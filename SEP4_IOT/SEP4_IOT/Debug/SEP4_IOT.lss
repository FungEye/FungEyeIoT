
SEP4_IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000608  00800200  00005bd6  00005c6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005bd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ff6  00800808  00800808  00006272  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006272  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000062d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009b0  00000000  00000000  00006310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c596  00000000  00000000  00006cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f9c  00000000  00000000  00013256  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000060ba  00000000  00000000  000161f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002360  00000000  00000000  0001c2ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003daf  00000000  00000000  0001e60c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b2a1  00000000  00000000  000223bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000938  00000000  00000000  0002d65c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	03 c1       	rjmp	.+518    	; 0x20c <__bad_interrupt>
       6:	00 00       	nop
       8:	01 c1       	rjmp	.+514    	; 0x20c <__bad_interrupt>
       a:	00 00       	nop
       c:	ff c0       	rjmp	.+510    	; 0x20c <__bad_interrupt>
       e:	00 00       	nop
      10:	fd c0       	rjmp	.+506    	; 0x20c <__bad_interrupt>
      12:	00 00       	nop
      14:	fb c0       	rjmp	.+502    	; 0x20c <__bad_interrupt>
      16:	00 00       	nop
      18:	f9 c0       	rjmp	.+498    	; 0x20c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f7 c0       	rjmp	.+494    	; 0x20c <__bad_interrupt>
      1e:	00 00       	nop
      20:	f5 c0       	rjmp	.+490    	; 0x20c <__bad_interrupt>
      22:	00 00       	nop
      24:	f3 c0       	rjmp	.+486    	; 0x20c <__bad_interrupt>
      26:	00 00       	nop
      28:	f1 c0       	rjmp	.+482    	; 0x20c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ef c0       	rjmp	.+478    	; 0x20c <__bad_interrupt>
      2e:	00 00       	nop
      30:	46 c6       	rjmp	.+3212   	; 0xcbe <__vector_12>
      32:	00 00       	nop
      34:	eb c0       	rjmp	.+470    	; 0x20c <__bad_interrupt>
      36:	00 00       	nop
      38:	e9 c0       	rjmp	.+466    	; 0x20c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e7 c0       	rjmp	.+462    	; 0x20c <__bad_interrupt>
      3e:	00 00       	nop
      40:	e5 c0       	rjmp	.+458    	; 0x20c <__bad_interrupt>
      42:	00 00       	nop
      44:	e3 c0       	rjmp	.+454    	; 0x20c <__bad_interrupt>
      46:	00 00       	nop
      48:	e1 c0       	rjmp	.+450    	; 0x20c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	df c0       	rjmp	.+446    	; 0x20c <__bad_interrupt>
      4e:	00 00       	nop
      50:	dd c0       	rjmp	.+442    	; 0x20c <__bad_interrupt>
      52:	00 00       	nop
      54:	db c0       	rjmp	.+438    	; 0x20c <__bad_interrupt>
      56:	00 00       	nop
      58:	d9 c0       	rjmp	.+434    	; 0x20c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d7 c0       	rjmp	.+430    	; 0x20c <__bad_interrupt>
      5e:	00 00       	nop
      60:	d5 c0       	rjmp	.+426    	; 0x20c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 22 21 	jmp	0x4244	; 0x4244 <__vector_25>
      68:	0c 94 74 21 	jmp	0x42e8	; 0x42e8 <__vector_26>
      6c:	cf c0       	rjmp	.+414    	; 0x20c <__bad_interrupt>
      6e:	00 00       	nop
      70:	cd c0       	rjmp	.+410    	; 0x20c <__bad_interrupt>
      72:	00 00       	nop
      74:	cb c0       	rjmp	.+406    	; 0x20c <__bad_interrupt>
      76:	00 00       	nop
      78:	c9 c0       	rjmp	.+402    	; 0x20c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c7 c0       	rjmp	.+398    	; 0x20c <__bad_interrupt>
      7e:	00 00       	nop
      80:	c5 c0       	rjmp	.+394    	; 0x20c <__bad_interrupt>
      82:	00 00       	nop
      84:	c3 c0       	rjmp	.+390    	; 0x20c <__bad_interrupt>
      86:	00 00       	nop
      88:	c1 c0       	rjmp	.+386    	; 0x20c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	bf c0       	rjmp	.+382    	; 0x20c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 b8 21 	jmp	0x4370	; 0x4370 <__vector_36>
      94:	0c 94 0a 22 	jmp	0x4414	; 0x4414 <__vector_37>
      98:	b9 c0       	rjmp	.+370    	; 0x20c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 55 26 	jmp	0x4caa	; 0x4caa <__vector_39>
      a0:	b5 c0       	rjmp	.+362    	; 0x20c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b3 c0       	rjmp	.+358    	; 0x20c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b1 c0       	rjmp	.+354    	; 0x20c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	af c0       	rjmp	.+350    	; 0x20c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ad c0       	rjmp	.+346    	; 0x20c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ab c0       	rjmp	.+342    	; 0x20c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	a9 c0       	rjmp	.+338    	; 0x20c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a7 c0       	rjmp	.+334    	; 0x20c <__bad_interrupt>
      be:	00 00       	nop
      c0:	a5 c0       	rjmp	.+330    	; 0x20c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a3 c0       	rjmp	.+326    	; 0x20c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a1 c0       	rjmp	.+322    	; 0x20c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 4e 22 	jmp	0x449c	; 0x449c <__vector_51>
      d0:	0c 94 a0 22 	jmp	0x4540	; 0x4540 <__vector_52>
      d4:	9b c0       	rjmp	.+310    	; 0x20c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 e4 22 	jmp	0x45c8	; 0x45c8 <__vector_54>
      dc:	0c 94 36 23 	jmp	0x466c	; 0x466c <__vector_55>
      e0:	95 c0       	rjmp	.+298    	; 0x20c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	63 19       	sub	r22, r3
      e6:	63 19       	sub	r22, r3
      e8:	63 19       	sub	r22, r3
      ea:	9a 19       	sub	r25, r10
      ec:	a2 19       	sub	r26, r2
      ee:	b7 19       	sub	r27, r7
      f0:	63 19       	sub	r22, r3
      f2:	63 19       	sub	r22, r3
      f4:	9a 19       	sub	r25, r10
      f6:	a2 19       	sub	r26, r2
      f8:	77 26       	eor	r7, r23
      fa:	e7 26       	eor	r14, r23
      fc:	e7 26       	eor	r14, r23
      fe:	e7 26       	eor	r14, r23
     100:	e7 26       	eor	r14, r23
     102:	e7 26       	eor	r14, r23
     104:	e7 26       	eor	r14, r23
     106:	e7 26       	eor	r14, r23
     108:	77 26       	eor	r7, r23
     10a:	e7 26       	eor	r14, r23
     10c:	e7 26       	eor	r14, r23
     10e:	e7 26       	eor	r14, r23
     110:	e7 26       	eor	r14, r23
     112:	e7 26       	eor	r14, r23
     114:	e7 26       	eor	r14, r23
     116:	e7 26       	eor	r14, r23
     118:	79 26       	eor	r7, r25
     11a:	e7 26       	eor	r14, r23
     11c:	e7 26       	eor	r14, r23
     11e:	e7 26       	eor	r14, r23
     120:	e7 26       	eor	r14, r23
     122:	e7 26       	eor	r14, r23
     124:	e7 26       	eor	r14, r23
     126:	e7 26       	eor	r14, r23
     128:	e7 26       	eor	r14, r23
     12a:	e7 26       	eor	r14, r23
     12c:	e7 26       	eor	r14, r23
     12e:	e7 26       	eor	r14, r23
     130:	e7 26       	eor	r14, r23
     132:	e7 26       	eor	r14, r23
     134:	e7 26       	eor	r14, r23
     136:	e7 26       	eor	r14, r23
     138:	79 26       	eor	r7, r25
     13a:	e7 26       	eor	r14, r23
     13c:	e7 26       	eor	r14, r23
     13e:	e7 26       	eor	r14, r23
     140:	e7 26       	eor	r14, r23
     142:	e7 26       	eor	r14, r23
     144:	e7 26       	eor	r14, r23
     146:	e7 26       	eor	r14, r23
     148:	e7 26       	eor	r14, r23
     14a:	e7 26       	eor	r14, r23
     14c:	e7 26       	eor	r14, r23
     14e:	e7 26       	eor	r14, r23
     150:	e7 26       	eor	r14, r23
     152:	e7 26       	eor	r14, r23
     154:	e7 26       	eor	r14, r23
     156:	e7 26       	eor	r14, r23
     158:	e3 26       	eor	r14, r19
     15a:	e7 26       	eor	r14, r23
     15c:	e7 26       	eor	r14, r23
     15e:	e7 26       	eor	r14, r23
     160:	e7 26       	eor	r14, r23
     162:	e7 26       	eor	r14, r23
     164:	e7 26       	eor	r14, r23
     166:	e7 26       	eor	r14, r23
     168:	ae 26       	eor	r10, r30
     16a:	e7 26       	eor	r14, r23
     16c:	e7 26       	eor	r14, r23
     16e:	e7 26       	eor	r14, r23
     170:	e7 26       	eor	r14, r23
     172:	e7 26       	eor	r14, r23
     174:	e7 26       	eor	r14, r23
     176:	e7 26       	eor	r14, r23
     178:	e7 26       	eor	r14, r23
     17a:	e7 26       	eor	r14, r23
     17c:	e7 26       	eor	r14, r23
     17e:	e7 26       	eor	r14, r23
     180:	e7 26       	eor	r14, r23
     182:	e7 26       	eor	r14, r23
     184:	e7 26       	eor	r14, r23
     186:	e7 26       	eor	r14, r23
     188:	a2 26       	eor	r10, r18
     18a:	e7 26       	eor	r14, r23
     18c:	e7 26       	eor	r14, r23
     18e:	e7 26       	eor	r14, r23
     190:	e7 26       	eor	r14, r23
     192:	e7 26       	eor	r14, r23
     194:	e7 26       	eor	r14, r23
     196:	e7 26       	eor	r14, r23
     198:	c6 26       	eor	r12, r22

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <prvCheckTasksWaitingTermination>
     19e:	80 91 2b 16 	lds	r24, 0x162B	; 0x80162b <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	c5 d4       	rcall	.+2442   	; 0xb32 <vPortYield>
     1a8:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 d5 18 	call	0x31aa	; 0x31aa <prvProcessTimerOrBlockTask>
     1c6:	0e 94 2c 19 	call	0x3258	; 0x3258 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	18 e0       	ldi	r17, 0x08	; 8
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e6 ed       	ldi	r30, 0xD6	; 214
     1e4:	fb e5       	ldi	r31, 0x5B	; 91
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a8 30       	cpi	r26, 0x08	; 8
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	27 e1       	ldi	r18, 0x17	; 23
     1f8:	a8 e0       	ldi	r26, 0x08	; 8
     1fa:	b8 e0       	ldi	r27, 0x08	; 8
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	ae 3f       	cpi	r26, 0xFE	; 254
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	66 d2       	rcall	.+1228   	; 0x6d4 <main>
     208:	0c 94 e9 2d 	jmp	0x5bd2	; 0x5bd2 <_exit>

0000020c <__bad_interrupt>:
     20c:	f9 ce       	rjmp	.-526    	; 0x0 <__vectors>

0000020e <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
     20e:	0f 93       	push	r16
     210:	1f 93       	push	r17
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
     21a:	64 97       	sbiw	r28, 0x14	; 20
     21c:	0f b6       	in	r0, 0x3f	; 63
     21e:	f8 94       	cli
     220:	de bf       	out	0x3e, r29	; 62
     222:	0f be       	out	0x3f, r0	; 63
     224:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	0e 94 ed 24 	call	0x49da	; 0x49da <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
     22c:	0e 94 22 1c 	call	0x3844	; 0x3844 <lora_driver_rn2483FactoryReset>
     230:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <lora_driver_mapReturnCodeToText>
     234:	9f 93       	push	r25
     236:	8f 93       	push	r24
     238:	8f e6       	ldi	r24, 0x6F	; 111
     23a:	92 e0       	ldi	r25, 0x02	; 2
     23c:	9f 93       	push	r25
     23e:	8f 93       	push	r24
     240:	0e 94 cb 2a 	call	0x5596	; 0x5596 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
     244:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <lora_driver_configureToEu868>
     248:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <lora_driver_mapReturnCodeToText>
     24c:	9f 93       	push	r25
     24e:	8f 93       	push	r24
     250:	82 e8       	ldi	r24, 0x82	; 130
     252:	92 e0       	ldi	r25, 0x02	; 2
     254:	9f 93       	push	r25
     256:	8f 93       	push	r24
     258:	0e 94 cb 2a 	call	0x5596	; 0x5596 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
     25c:	8e 01       	movw	r16, r28
     25e:	0f 5f       	subi	r16, 0xFF	; 255
     260:	1f 4f       	sbci	r17, 0xFF	; 255
     262:	c8 01       	movw	r24, r16
     264:	0e 94 34 1c 	call	0x3868	; 0x3868 <lora_driver_getRn2483Hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
     268:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <lora_driver_mapReturnCodeToText>
     26c:	1f 93       	push	r17
     26e:	0f 93       	push	r16
     270:	9f 93       	push	r25
     272:	8f 93       	push	r24
     274:	8b e9       	ldi	r24, 0x9B	; 155
     276:	92 e0       	ldi	r25, 0x02	; 2
     278:	9f 93       	push	r25
     27a:	8f 93       	push	r24
     27c:	0e 94 cb 2a 	call	0x5596	; 0x5596 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
     280:	c8 01       	movw	r24, r16
     282:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <lora_driver_setDeviceIdentifier>
     286:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <lora_driver_mapReturnCodeToText>
     28a:	9f 93       	push	r25
     28c:	8f 93       	push	r24
     28e:	1f 93       	push	r17
     290:	0f 93       	push	r16
     292:	8f ea       	ldi	r24, 0xAF	; 175
     294:	92 e0       	ldi	r25, 0x02	; 2
     296:	9f 93       	push	r25
     298:	8f 93       	push	r24
     29a:	0e 94 cb 2a 	call	0x5596	; 0x5596 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
     29e:	a8 01       	movw	r20, r16
     2a0:	64 ec       	ldi	r22, 0xC4	; 196
     2a2:	72 e0       	ldi	r23, 0x02	; 2
     2a4:	85 ee       	ldi	r24, 0xE5	; 229
     2a6:	92 e0       	ldi	r25, 0x02	; 2
     2a8:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <lora_driver_setOtaaIdentity>
     2ac:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <lora_driver_mapReturnCodeToText>
     2b0:	9f 93       	push	r25
     2b2:	8f 93       	push	r24
     2b4:	1f 93       	push	r17
     2b6:	0f 93       	push	r16
     2b8:	84 ec       	ldi	r24, 0xC4	; 196
     2ba:	92 e0       	ldi	r25, 0x02	; 2
     2bc:	9f 93       	push	r25
     2be:	8f 93       	push	r24
     2c0:	85 ee       	ldi	r24, 0xE5	; 229
     2c2:	92 e0       	ldi	r25, 0x02	; 2
     2c4:	9f 93       	push	r25
     2c6:	8f 93       	push	r24
     2c8:	86 ef       	ldi	r24, 0xF6	; 246
     2ca:	92 e0       	ldi	r25, 0x02	; 2
     2cc:	9f 93       	push	r25
     2ce:	8f 93       	push	r24
     2d0:	0e 94 cb 2a 	call	0x5596	; 0x5596 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
     2d4:	0e 94 83 1c 	call	0x3906	; 0x3906 <lora_driver_saveMac>
     2d8:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <lora_driver_mapReturnCodeToText>
     2dc:	9f 93       	push	r25
     2de:	8f 93       	push	r24
     2e0:	8c e2       	ldi	r24, 0x2C	; 44
     2e2:	93 e0       	ldi	r25, 0x03	; 3
     2e4:	9f 93       	push	r25
     2e6:	8f 93       	push	r24
     2e8:	0e 94 cb 2a 	call	0x5596	; 0x5596 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	f8 94       	cli
     2f0:	de bf       	out	0x3e, r29	; 62
     2f2:	0f be       	out	0x3f, r0	; 63
     2f4:	cd bf       	out	0x3d, r28	; 61
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <lora_driver_setAdaptiveDataRate>
     2fc:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <lora_driver_mapReturnCodeToText>
     300:	9f 93       	push	r25
     302:	8f 93       	push	r24
     304:	8b e3       	ldi	r24, 0x3B	; 59
     306:	93 e0       	ldi	r25, 0x03	; 3
     308:	9f 93       	push	r25
     30a:	8f 93       	push	r24
     30c:	0e 94 cb 2a 	call	0x5596	; 0x5596 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
     310:	84 ef       	ldi	r24, 0xF4	; 244
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <lora_driver_setReceiveDelay>
     318:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <lora_driver_mapReturnCodeToText>
     31c:	9f 93       	push	r25
     31e:	8f 93       	push	r24
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	8f 93       	push	r24
     324:	84 ef       	ldi	r24, 0xF4	; 244
     326:	8f 93       	push	r24
     328:	8c e5       	ldi	r24, 0x5C	; 92
     32a:	93 e0       	ldi	r25, 0x03	; 3
     32c:	9f 93       	push	r25
     32e:	8f 93       	push	r24
     330:	0e 94 cb 2a 	call	0x5596	; 0x5596 <printf>
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	f8 94       	cli
     338:	de bf       	out	0x3e, r29	; 62
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
     33e:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	0e 94 89 1c 	call	0x3912	; 0x3912 <lora_driver_join>
     346:	08 2f       	mov	r16, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
     348:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <lora_driver_mapReturnCodeToText>
     34c:	9f 93       	push	r25
     34e:	8f 93       	push	r24
     350:	1f 92       	push	r1
     352:	1f 93       	push	r17
     354:	8c e7       	ldi	r24, 0x7C	; 124
     356:	93 e0       	ldi	r25, 0x03	; 3
     358:	9f 93       	push	r25
     35a:	8f 93       	push	r24
     35c:	0e 94 cb 2a 	call	0x5596	; 0x5596 <printf>

		if ( rc != LORA_ACCEPTED)
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
     36a:	0f 90       	pop	r0
     36c:	08 30       	cpi	r16, 0x08	; 8
     36e:	59 f0       	breq	.+22     	; 0x386 <_lora_setup+0x178>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <status_leds_longPuls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     376:	66 e3       	ldi	r22, 0x36	; 54
     378:	71 e0       	ldi	r23, 0x01	; 1
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 7f 11 	call	0x22fe	; 0x22fe <vTaskDelay>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     382:	11 50       	subi	r17, 0x01	; 1
     384:	e9 f6       	brne	.-70     	; 0x340 <_lora_setup+0x132>

	if (rc == LORA_ACCEPTED)
     386:	08 30       	cpi	r16, 0x08	; 8
     388:	21 f4       	brne	.+8      	; 0x392 <_lora_setup+0x184>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	0e 94 33 25 	call	0x4a66	; 0x4a66 <status_leds_ledOn>
		while (1)
		{
			taskYIELD();
		}
	}
}
     390:	08 c0       	rjmp	.+16     	; 0x3a2 <_lora_setup+0x194>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	0e 94 42 25 	call	0x4a84	; 0x4a84 <status_leds_ledOff>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	0e 94 10 25 	call	0x4a20	; 0x4a20 <status_leds_fastBlink>

		// Lets stay here
		while (1)
		{
			taskYIELD();
     39e:	c9 d3       	rcall	.+1938   	; 0xb32 <vPortYield>
     3a0:	fe cf       	rjmp	.-4      	; 0x39e <_lora_setup+0x190>
		}
	}
}
     3a2:	64 96       	adiw	r28, 0x14	; 20
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	de bf       	out	0x3e, r29	; 62
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	cd bf       	out	0x3d, r28	; 61
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	08 95       	ret

000003b8 <lora_handler_task>:

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	00 d0       	rcall	.+0      	; 0x3be <lora_handler_task+0x6>
     3be:	1f 92       	push	r1
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	0e 94 14 1c 	call	0x3828	; 0x3828 <lora_driver_resetRn2483>
	vTaskDelay(2);
     3ca:	62 e0       	ldi	r22, 0x02	; 2
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 7f 11 	call	0x22fe	; 0x22fe <vTaskDelay>
	lora_driver_resetRn2483(0);
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	0e 94 14 1c 	call	0x3828	; 0x3828 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     3dc:	66 e9       	ldi	r22, 0x96	; 150
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 7f 11 	call	0x22fe	; 0x22fe <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
     3e8:	0e 94 cd 1b 	call	0x379a	; 0x379a <lora_driver_flushBuffers>

	_lora_setup();
     3ec:	10 df       	rcall	.-480    	; 0x20e <_lora_setup>

	_uplink_payload.len = 6;
     3ee:	e8 e0       	ldi	r30, 0x08	; 8
     3f0:	f8 e0       	ldi	r31, 0x08	; 8
     3f2:	86 e0       	ldi	r24, 0x06	; 6
     3f4:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.portNo = 2;
     3f6:	82 e0       	ldi	r24, 0x02	; 2
     3f8:	80 83       	st	Z, r24

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     3fa:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <xTaskGetTickCount>
     3fe:	69 83       	std	Y+1, r22	; 0x01
     400:	7a 83       	std	Y+2, r23	; 0x02
     402:	8b 83       	std	Y+3, r24	; 0x03
     404:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     406:	48 ea       	ldi	r20, 0xA8	; 168
     408:	58 e4       	ldi	r21, 0x48	; 72
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	ce 01       	movw	r24, r28
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	0e 94 1a 11 	call	0x2234	; 0x2234 <xTaskDelayUntil>

		// Some dummy payload
		uint16_t hum = humidity; // measured humidity
     416:	d0 90 f0 17 	lds	r13, 0x17F0	; 0x8017f0 <humidity>
     41a:	c0 90 f1 17 	lds	r12, 0x17F1	; 0x8017f1 <humidity+0x1>
		int16_t temp = temperature; // measured temp
     41e:	10 91 ee 17 	lds	r17, 0x17EE	; 0x8017ee <temperature>
     422:	00 91 ef 17 	lds	r16, 0x17EF	; 0x8017ef <temperature+0x1>
		uint16_t co2_ppm = co2; // measured CO2
     426:	f0 90 ec 17 	lds	r15, 0x17EC	; 0x8017ec <co2>
     42a:	e0 90 ed 17 	lds	r14, 0x17ED	; 0x8017ed <co2+0x1>
		
		printf("TEMP BEFORE SEND: %d\n",temperature);
     42e:	0f 93       	push	r16
     430:	1f 93       	push	r17
     432:	8c e9       	ldi	r24, 0x9C	; 156
     434:	93 e0       	ldi	r25, 0x03	; 3
     436:	9f 93       	push	r25
     438:	8f 93       	push	r24
     43a:	0e 94 cb 2a 	call	0x5596	; 0x5596 <printf>
		printf("HUMID BEFORE SEND: %d\n",humidity);
     43e:	80 91 f1 17 	lds	r24, 0x17F1	; 0x8017f1 <humidity+0x1>
     442:	8f 93       	push	r24
     444:	80 91 f0 17 	lds	r24, 0x17F0	; 0x8017f0 <humidity>
     448:	8f 93       	push	r24
     44a:	82 eb       	ldi	r24, 0xB2	; 178
     44c:	93 e0       	ldi	r25, 0x03	; 3
     44e:	9f 93       	push	r25
     450:	8f 93       	push	r24
     452:	0e 94 cb 2a 	call	0x5596	; 0x5596 <printf>

		_uplink_payload.bytes[0] = hum >> 8;
     456:	e8 e0       	ldi	r30, 0x08	; 8
     458:	f8 e0       	ldi	r31, 0x08	; 8
     45a:	c2 82       	std	Z+2, r12	; 0x02
		_uplink_payload.bytes[1] = hum & 0xFF;
     45c:	d3 82       	std	Z+3, r13	; 0x03
		_uplink_payload.bytes[2] = temp >> 8;
     45e:	04 83       	std	Z+4, r16	; 0x04
		_uplink_payload.bytes[3] = temp & 0xFF;
     460:	15 83       	std	Z+5, r17	; 0x05
		_uplink_payload.bytes[4] = co2_ppm >> 8;
     462:	e6 82       	std	Z+6, r14	; 0x06
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
     464:	f7 82       	std	Z+7, r15	; 0x07

		status_leds_shortPuls(led_ST4);  // OPTIONAL
     466:	83 e0       	ldi	r24, 0x03	; 3
     468:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
     46c:	68 e0       	ldi	r22, 0x08	; 8
     46e:	78 e0       	ldi	r23, 0x08	; 8
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	0e 94 b2 1c 	call	0x3964	; 0x3964 <lora_driver_sendUploadMessage>
     476:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <lora_driver_mapReturnCodeToText>
     47a:	9f 93       	push	r25
     47c:	8f 93       	push	r24
     47e:	89 ec       	ldi	r24, 0xC9	; 201
     480:	93 e0       	ldi	r25, 0x03	; 3
     482:	9f 93       	push	r25
     484:	8f 93       	push	r24
     486:	0e 94 cb 2a 	call	0x5596	; 0x5596 <printf>
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	f8 94       	cli
     48e:	de bf       	out	0x3e, r29	; 62
     490:	0f be       	out	0x3f, r0	; 63
     492:	cd bf       	out	0x3d, r28	; 61
     494:	b8 cf       	rjmp	.-144    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>

00000496 <lora_handler_initialise>:
extern int16_t temperature;
extern int16_t humidity;
extern int16_t co2;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
     496:	ef 92       	push	r14
     498:	ff 92       	push	r15
     49a:	0f 93       	push	r16
	xTaskCreate(
     49c:	e1 2c       	mov	r14, r1
     49e:	f1 2c       	mov	r15, r1
     4a0:	08 2f       	mov	r16, r24
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	48 e8       	ldi	r20, 0x88	; 136
     4a8:	51 e0       	ldi	r21, 0x01	; 1
     4aa:	6e ed       	ldi	r22, 0xDE	; 222
     4ac:	73 e0       	ldi	r23, 0x03	; 3
     4ae:	8c ed       	ldi	r24, 0xDC	; 220
     4b0:	91 e0       	ldi	r25, 0x01	; 1
     4b2:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     4b6:	0f 91       	pop	r16
     4b8:	ff 90       	pop	r15
     4ba:	ef 90       	pop	r14
     4bc:	08 95       	ret

000004be <task1>:
	,  NULL );
}

/*-----------------------------------------------------------*/
void task1( void *pvParameters )
{
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	00 d0       	rcall	.+0      	; 0x4c4 <task1+0x6>
     4c4:	1f 92       	push	r1
     4c6:	cd b7       	in	r28, 0x3d	; 61
     4c8:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 500/portTICK_PERIOD_MS; // 500 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
     4ca:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <xTaskGetTickCount>
     4ce:	69 83       	std	Y+1, r22	; 0x01
     4d0:	7a 83       	std	Y+2, r23	; 0x02
     4d2:	8b 83       	std	Y+3, r24	; 0x03
     4d4:	9c 83       	std	Y+4, r25	; 0x04

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     4d6:	4f e1       	ldi	r20, 0x1F	; 31
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	60 e0       	ldi	r22, 0x00	; 0
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	ce 01       	movw	r24, r28
     4e0:	01 96       	adiw	r24, 0x01	; 1
     4e2:	0e 94 1a 11 	call	0x2234	; 0x2234 <xTaskDelayUntil>
		printf("----Temp & Humidity START----");
     4e6:	85 ee       	ldi	r24, 0xE5	; 229
     4e8:	93 e0       	ldi	r25, 0x03	; 3
     4ea:	9f 93       	push	r25
     4ec:	8f 93       	push	r24
     4ee:	0e 94 cb 2a 	call	0x5596	; 0x5596 <printf>
		humidity = 0.0;
     4f2:	10 92 f1 17 	sts	0x17F1, r1	; 0x8017f1 <humidity+0x1>
     4f6:	10 92 f0 17 	sts	0x17F0, r1	; 0x8017f0 <humidity>
		temperature = 0.0;
     4fa:	10 92 ef 17 	sts	0x17EF, r1	; 0x8017ef <temperature+0x1>
     4fe:	10 92 ee 17 	sts	0x17EE, r1	; 0x8017ee <temperature>
		
		puts("Tying to wake up");
     502:	83 e0       	ldi	r24, 0x03	; 3
     504:	94 e0       	ldi	r25, 0x04	; 4
     506:	0e 94 de 2a 	call	0x55bc	; 0x55bc <puts>
		if (HIH8120_OK != hih8120_wakeup())
     50a:	0e 94 49 1a 	call	0x3492	; 0x3492 <hih8120_wakeup>
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	88 23       	and	r24, r24
     514:	29 f0       	breq	.+10     	; 0x520 <task1+0x62>
		{
			puts("WAKEUP FAILED");
     516:	84 e1       	ldi	r24, 0x14	; 20
     518:	94 e0       	ldi	r25, 0x04	; 4
     51a:	0e 94 de 2a 	call	0x55bc	; 0x55bc <puts>
     51e:	04 c0       	rjmp	.+8      	; 0x528 <task1+0x6a>
		}else
		{
			puts("AWAKE");
     520:	82 e2       	ldi	r24, 0x22	; 34
     522:	94 e0       	ldi	r25, 0x04	; 4
     524:	0e 94 de 2a 	call	0x55bc	; 0x55bc <puts>
		}
		vTaskDelay(pdMS_TO_TICKS(100));
     528:	66 e0       	ldi	r22, 0x06	; 6
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 7f 11 	call	0x22fe	; 0x22fe <vTaskDelay>
		
		puts("Measuring");
     534:	88 e2       	ldi	r24, 0x28	; 40
     536:	94 e0       	ldi	r25, 0x04	; 4
     538:	0e 94 de 2a 	call	0x55bc	; 0x55bc <puts>
		if (HIH8120_OK != hih8120_measure())
     53c:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <hih8120_measure>
     540:	88 23       	and	r24, r24
     542:	29 f0       	breq	.+10     	; 0x54e <task1+0x90>
		{
			puts("MESURING FAILED");
     544:	82 e3       	ldi	r24, 0x32	; 50
     546:	94 e0       	ldi	r25, 0x04	; 4
     548:	0e 94 de 2a 	call	0x55bc	; 0x55bc <puts>
     54c:	04 c0       	rjmp	.+8      	; 0x556 <task1+0x98>
		}else
		{
			puts("MESURING SUCCESSFUL");
     54e:	82 e4       	ldi	r24, 0x42	; 66
     550:	94 e0       	ldi	r25, 0x04	; 4
     552:	0e 94 de 2a 	call	0x55bc	; 0x55bc <puts>
		}
		humidity = hih8120_getHumidityPercent_x10();
     556:	0e 94 84 1a 	call	0x3508	; 0x3508 <hih8120_getHumidityPercent_x10>
     55a:	90 93 f1 17 	sts	0x17F1, r25	; 0x8017f1 <humidity+0x1>
     55e:	80 93 f0 17 	sts	0x17F0, r24	; 0x8017f0 <humidity>
		temperature = hih8120_getTemperature_x10();
     562:	0e 94 aa 1a 	call	0x3554	; 0x3554 <hih8120_getTemperature_x10>
     566:	80 93 ee 17 	sts	0x17EE, r24	; 0x8017ee <temperature>
     56a:	90 93 ef 17 	sts	0x17EF, r25	; 0x8017ef <temperature+0x1>
		printf("TEMP: %d\n",temperature);
     56e:	9f 93       	push	r25
     570:	8f 93       	push	r24
     572:	86 e5       	ldi	r24, 0x56	; 86
     574:	94 e0       	ldi	r25, 0x04	; 4
     576:	9f 93       	push	r25
     578:	8f 93       	push	r24
     57a:	0e 94 cb 2a 	call	0x5596	; 0x5596 <printf>
		printf("HUMID: %d\n",humidity);
     57e:	80 91 f1 17 	lds	r24, 0x17F1	; 0x8017f1 <humidity+0x1>
     582:	8f 93       	push	r24
     584:	80 91 f0 17 	lds	r24, 0x17F0	; 0x8017f0 <humidity>
     588:	8f 93       	push	r24
     58a:	80 e6       	ldi	r24, 0x60	; 96
     58c:	94 e0       	ldi	r25, 0x04	; 4
     58e:	9f 93       	push	r25
     590:	8f 93       	push	r24
     592:	0e 94 cb 2a 	call	0x5596	; 0x5596 <printf>
		printf("----Temp & Humidity END----");
     596:	8b e6       	ldi	r24, 0x6B	; 107
     598:	94 e0       	ldi	r25, 0x04	; 4
     59a:	9f 93       	push	r25
     59c:	8f 93       	push	r24
     59e:	0e 94 cb 2a 	call	0x5596	; 0x5596 <printf>
		vTaskDelay(pdMS_TO_TICKS(60000));
     5a2:	68 e8       	ldi	r22, 0x88	; 136
     5a4:	7e e0       	ldi	r23, 0x0E	; 14
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	0e 94 7f 11 	call	0x22fe	; 0x22fe <vTaskDelay>
	}
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	f8 94       	cli
     5b2:	de bf       	out	0x3e, r29	; 62
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	8e cf       	rjmp	.-228    	; 0x4d6 <task1+0x18>

000005ba <task2>:
{
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000/portTICK_PERIOD_MS; // 1000 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
     5ba:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <xTaskGetTickCount>

	mh_z19_returnCode_t rc;

	for(;;)
	{
		printf("----CO2 START----");
     5be:	87 e8       	ldi	r24, 0x87	; 135
     5c0:	94 e0       	ldi	r25, 0x04	; 4
     5c2:	9f 93       	push	r25
     5c4:	8f 93       	push	r24
     5c6:	0e 94 cb 2a 	call	0x5596	; 0x5596 <printf>
		rc = mh_z19_takeMeassuring();
     5ca:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <mh_z19_takeMeassuring>
		if (rc != MHZ19_OK)
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	88 23       	and	r24, r24
     5d4:	21 f0       	breq	.+8      	; 0x5de <task2+0x24>
		{
			puts("CO2 MEASURING FAILED");
     5d6:	89 e9       	ldi	r24, 0x99	; 153
     5d8:	94 e0       	ldi	r25, 0x04	; 4
     5da:	0e 94 de 2a 	call	0x55bc	; 0x55bc <puts>
		}
		
		co2 = mh_z19_getCo2Ppm;
     5de:	8f ec       	ldi	r24, 0xCF	; 207
     5e0:	9f e1       	ldi	r25, 0x1F	; 31
     5e2:	90 93 ed 17 	sts	0x17ED, r25	; 0x8017ed <co2+0x1>
     5e6:	80 93 ec 17 	sts	0x17EC, r24	; 0x8017ec <co2>
		printf("CO2: %d\n",co2);
     5ea:	9f 93       	push	r25
     5ec:	8f 93       	push	r24
     5ee:	8e ea       	ldi	r24, 0xAE	; 174
     5f0:	94 e0       	ldi	r25, 0x04	; 4
     5f2:	9f 93       	push	r25
     5f4:	8f 93       	push	r24
     5f6:	0e 94 cb 2a 	call	0x5596	; 0x5596 <printf>
		printf("----CO2 END----");
     5fa:	87 eb       	ldi	r24, 0xB7	; 183
     5fc:	94 e0       	ldi	r25, 0x04	; 4
     5fe:	9f 93       	push	r25
     600:	8f 93       	push	r24
     602:	0e 94 cb 2a 	call	0x5596	; 0x5596 <printf>
		vTaskDelay(pdMS_TO_TICKS(6000));
     606:	64 e7       	ldi	r22, 0x74	; 116
     608:	71 e0       	ldi	r23, 0x01	; 1
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 7f 11 	call	0x22fe	; 0x22fe <vTaskDelay>
	}
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	cf cf       	rjmp	.-98     	; 0x5be <task2+0x4>

00000620 <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_initialise(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
     620:	ef 92       	push	r14
     622:	ff 92       	push	r15
     624:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
     626:	80 91 f2 17 	lds	r24, 0x17F2	; 0x8017f2 <xTestSemaphore>
     62a:	90 91 f3 17 	lds	r25, 0x17F3	; 0x8017f3 <xTestSemaphore+0x1>
     62e:	89 2b       	or	r24, r25
     630:	79 f4       	brne	.+30     	; 0x650 <create_tasks_and_semaphores+0x30>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	2a d5       	rcall	.+2644   	; 0x108a <xQueueCreateMutex>
     636:	90 93 f3 17 	sts	0x17F3, r25	; 0x8017f3 <xTestSemaphore+0x1>
     63a:	80 93 f2 17 	sts	0x17F2, r24	; 0x8017f2 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
     63e:	00 97       	sbiw	r24, 0x00	; 0
     640:	39 f0       	breq	.+14     	; 0x650 <create_tasks_and_semaphores+0x30>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
     642:	00 e0       	ldi	r16, 0x00	; 0
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	a9 01       	movw	r20, r18
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	79 d4       	rcall	.+2290   	; 0xf42 <xQueueGenericSend>
		}
	}

	xTaskCreate(
     650:	e1 2c       	mov	r14, r1
     652:	f1 2c       	mov	r15, r1
     654:	02 e0       	ldi	r16, 0x02	; 2
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	40 ec       	ldi	r20, 0xC0	; 192
     65c:	50 e0       	ldi	r21, 0x00	; 0
     65e:	67 ec       	ldi	r22, 0xC7	; 199
     660:	74 e0       	ldi	r23, 0x04	; 4
     662:	8f e5       	ldi	r24, 0x5F	; 95
     664:	92 e0       	ldi	r25, 0x02	; 2
     666:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
     66a:	01 e0       	ldi	r16, 0x01	; 1
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	40 ec       	ldi	r20, 0xC0	; 192
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	6b ed       	ldi	r22, 0xDB	; 219
     676:	74 e0       	ldi	r23, 0x04	; 4
     678:	8d ed       	ldi	r24, 0xDD	; 221
     67a:	92 e0       	ldi	r25, 0x02	; 2
     67c:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <xTaskCreate>
	,  "CO2"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     680:	0f 91       	pop	r16
     682:	ff 90       	pop	r15
     684:	ef 90       	pop	r14
     686:	08 95       	ret

00000688 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
     688:	81 b1       	in	r24, 0x01	; 1
     68a:	81 68       	ori	r24, 0x81	; 129
     68c:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	0e 94 98 23 	call	0x4730	; 0x4730 <stdio_initialise>
	// Let's create some tasks
	create_tasks_and_semaphores();
     694:	c5 df       	rcall	.-118    	; 0x620 <create_tasks_and_semaphores>

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
     696:	85 e0       	ldi	r24, 0x05	; 5
     698:	0e 94 9f 24 	call	0x493e	; 0x493e <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
     6a6:	83 e0       	ldi	r24, 0x03	; 3
     6a8:	f6 de       	rcall	.-532    	; 0x496 <lora_handler_initialise>
	if(HIH8120_OK == hih8120_initialise())
     6aa:	0e 94 31 1a 	call	0x3462	; 0x3462 <hih8120_initialise>
     6ae:	81 11       	cpse	r24, r1
     6b0:	05 c0       	rjmp	.+10     	; 0x6bc <initialiseSystem+0x34>
	{
		puts("hih8120 INITAILISED");
     6b2:	8f ed       	ldi	r24, 0xDF	; 223
     6b4:	94 e0       	ldi	r25, 0x04	; 4
     6b6:	0e 94 de 2a 	call	0x55bc	; 0x55bc <puts>
     6ba:	04 c0       	rjmp	.+8      	; 0x6c4 <initialiseSystem+0x3c>
	}else
	{
		puts("hih8120 FAILED");
     6bc:	83 ef       	ldi	r24, 0xF3	; 243
     6be:	94 e0       	ldi	r25, 0x04	; 4
     6c0:	0e 94 de 2a 	call	0x55bc	; 0x55bc <puts>
	}
	
	// The parameter is the USART port the MH-Z19 sensor is connected to - in this case USART3
	mh_z19_initialise(ser_USART3);
     6c4:	83 e0       	ldi	r24, 0x03	; 3
     6c6:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <mh_z19_initialise>
	puts("mh_z19 INITAILISED");
     6ca:	82 e0       	ldi	r24, 0x02	; 2
     6cc:	95 e0       	ldi	r25, 0x05	; 5
     6ce:	0c 94 de 2a 	jmp	0x55bc	; 0x55bc <puts>
     6d2:	08 95       	ret

000006d4 <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
     6d4:	d9 df       	rcall	.-78     	; 0x688 <initialiseSystem>
	printf("Program Started!!\n");
     6d6:	85 e1       	ldi	r24, 0x15	; 21
     6d8:	95 e0       	ldi	r25, 0x05	; 5
     6da:	0e 94 de 2a 	call	0x55bc	; 0x55bc <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
     6de:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <vTaskStartScheduler>
     6e2:	ff cf       	rjmp	.-2      	; 0x6e2 <main+0xe>

000006e4 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     6e4:	ea e2       	ldi	r30, 0x2A	; 42
     6e6:	f8 e0       	ldi	r31, 0x08	; 8
     6e8:	ae e2       	ldi	r26, 0x2E	; 46
     6ea:	b8 e0       	ldi	r27, 0x08	; 8
     6ec:	b1 83       	std	Z+1, r27	; 0x01
     6ee:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     6f0:	13 82       	std	Z+3, r1	; 0x03
     6f2:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     6f4:	e6 ed       	ldi	r30, 0xD6	; 214
     6f6:	f5 e1       	ldi	r31, 0x15	; 21
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     6f8:	f0 93 29 08 	sts	0x0829, r31	; 0x800829 <pxEnd+0x1>
     6fc:	e0 93 28 08 	sts	0x0828, r30	; 0x800828 <pxEnd>
    pxEnd->xBlockSize = 0;
     700:	13 82       	std	Z+3, r1	; 0x03
     702:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     704:	11 82       	std	Z+1, r1	; 0x01
     706:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     708:	88 ea       	ldi	r24, 0xA8	; 168
     70a:	9d e0       	ldi	r25, 0x0D	; 13
     70c:	13 96       	adiw	r26, 0x03	; 3
     70e:	9c 93       	st	X, r25
     710:	8e 93       	st	-X, r24
     712:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     714:	ed 93       	st	X+, r30
     716:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     718:	90 93 25 08 	sts	0x0825, r25	; 0x800825 <xMinimumEverFreeBytesRemaining+0x1>
     71c:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     720:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <xFreeBytesRemaining+0x1>
     724:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 e8       	ldi	r25, 0x80	; 128
     72c:	90 93 1f 08 	sts	0x081F, r25	; 0x80081f <xBlockAllocatedBit+0x1>
     730:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <xBlockAllocatedBit>
     734:	08 95       	ret

00000736 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     73c:	aa e2       	ldi	r26, 0x2A	; 42
     73e:	b8 e0       	ldi	r27, 0x08	; 8
     740:	01 c0       	rjmp	.+2      	; 0x744 <prvInsertBlockIntoFreeList+0xe>
     742:	df 01       	movw	r26, r30
     744:	ed 91       	ld	r30, X+
     746:	fc 91       	ld	r31, X
     748:	11 97       	sbiw	r26, 0x01	; 1
     74a:	ec 17       	cp	r30, r28
     74c:	fd 07       	cpc	r31, r29
     74e:	c8 f3       	brcs	.-14     	; 0x742 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     750:	12 96       	adiw	r26, 0x02	; 2
     752:	8d 91       	ld	r24, X+
     754:	9c 91       	ld	r25, X
     756:	13 97       	sbiw	r26, 0x03	; 3
     758:	9d 01       	movw	r18, r26
     75a:	28 0f       	add	r18, r24
     75c:	39 1f       	adc	r19, r25
     75e:	c2 17       	cp	r28, r18
     760:	d3 07       	cpc	r29, r19
     762:	49 f4       	brne	.+18     	; 0x776 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     764:	2a 81       	ldd	r18, Y+2	; 0x02
     766:	3b 81       	ldd	r19, Y+3	; 0x03
     768:	82 0f       	add	r24, r18
     76a:	93 1f       	adc	r25, r19
     76c:	13 96       	adiw	r26, 0x03	; 3
     76e:	9c 93       	st	X, r25
     770:	8e 93       	st	-X, r24
     772:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     774:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     776:	8a 81       	ldd	r24, Y+2	; 0x02
     778:	9b 81       	ldd	r25, Y+3	; 0x03
     77a:	9e 01       	movw	r18, r28
     77c:	28 0f       	add	r18, r24
     77e:	39 1f       	adc	r19, r25
     780:	e2 17       	cp	r30, r18
     782:	f3 07       	cpc	r31, r19
     784:	c1 f4       	brne	.+48     	; 0x7b6 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     786:	20 91 28 08 	lds	r18, 0x0828	; 0x800828 <pxEnd>
     78a:	30 91 29 08 	lds	r19, 0x0829	; 0x800829 <pxEnd+0x1>
     78e:	e2 17       	cp	r30, r18
     790:	f3 07       	cpc	r31, r19
     792:	71 f0       	breq	.+28     	; 0x7b0 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     794:	22 81       	ldd	r18, Z+2	; 0x02
     796:	33 81       	ldd	r19, Z+3	; 0x03
     798:	82 0f       	add	r24, r18
     79a:	93 1f       	adc	r25, r19
     79c:	9b 83       	std	Y+3, r25	; 0x03
     79e:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     7a0:	ed 91       	ld	r30, X+
     7a2:	fc 91       	ld	r31, X
     7a4:	11 97       	sbiw	r26, 0x01	; 1
     7a6:	80 81       	ld	r24, Z
     7a8:	91 81       	ldd	r25, Z+1	; 0x01
     7aa:	99 83       	std	Y+1, r25	; 0x01
     7ac:	88 83       	st	Y, r24
     7ae:	05 c0       	rjmp	.+10     	; 0x7ba <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     7b0:	39 83       	std	Y+1, r19	; 0x01
     7b2:	28 83       	st	Y, r18
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     7b6:	f9 83       	std	Y+1, r31	; 0x01
     7b8:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     7ba:	ca 17       	cp	r28, r26
     7bc:	db 07       	cpc	r29, r27
     7be:	11 f0       	breq	.+4      	; 0x7c4 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     7c0:	cd 93       	st	X+, r28
     7c2:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	08 95       	ret

000007ca <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     7ca:	ef 92       	push	r14
     7cc:	ff 92       	push	r15
     7ce:	0f 93       	push	r16
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     7d8:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     7dc:	80 91 28 08 	lds	r24, 0x0828	; 0x800828 <pxEnd>
     7e0:	90 91 29 08 	lds	r25, 0x0829	; 0x800829 <pxEnd+0x1>
     7e4:	89 2b       	or	r24, r25
     7e6:	09 f4       	brne	.+2      	; 0x7ea <pvPortMalloc+0x20>
        {
            prvHeapInit();
     7e8:	7d df       	rcall	.-262    	; 0x6e4 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     7ea:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <xBlockAllocatedBit>
     7ee:	90 91 1f 08 	lds	r25, 0x081F	; 0x80081f <xBlockAllocatedBit+0x1>
     7f2:	80 23       	and	r24, r16
     7f4:	91 23       	and	r25, r17
     7f6:	89 2b       	or	r24, r25
     7f8:	09 f0       	breq	.+2      	; 0x7fc <pvPortMalloc+0x32>
     7fa:	76 c0       	rjmp	.+236    	; 0x8e8 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     7fc:	01 15       	cp	r16, r1
     7fe:	11 05       	cpc	r17, r1
     800:	49 f0       	breq	.+18     	; 0x814 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     802:	c8 01       	movw	r24, r16
     804:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     806:	08 17       	cp	r16, r24
     808:	19 07       	cpc	r17, r25
     80a:	18 f0       	brcs	.+6      	; 0x812 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     80c:	00 e0       	ldi	r16, 0x00	; 0
     80e:	10 e0       	ldi	r17, 0x00	; 0
     810:	01 c0       	rjmp	.+2      	; 0x814 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     812:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     814:	01 15       	cp	r16, r1
     816:	11 05       	cpc	r17, r1
     818:	09 f4       	brne	.+2      	; 0x81c <pvPortMalloc+0x52>
     81a:	69 c0       	rjmp	.+210    	; 0x8ee <pvPortMalloc+0x124>
     81c:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <xFreeBytesRemaining>
     820:	90 91 27 08 	lds	r25, 0x0827	; 0x800827 <xFreeBytesRemaining+0x1>
     824:	80 17       	cp	r24, r16
     826:	91 07       	cpc	r25, r17
     828:	08 f4       	brcc	.+2      	; 0x82c <pvPortMalloc+0x62>
     82a:	64 c0       	rjmp	.+200    	; 0x8f4 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     82c:	c0 91 2a 08 	lds	r28, 0x082A	; 0x80082a <xStart>
     830:	d0 91 2b 08 	lds	r29, 0x082B	; 0x80082b <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     834:	ea e2       	ldi	r30, 0x2A	; 42
     836:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     838:	02 c0       	rjmp	.+4      	; 0x83e <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     83a:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     83c:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     83e:	8a 81       	ldd	r24, Y+2	; 0x02
     840:	9b 81       	ldd	r25, Y+3	; 0x03
     842:	80 17       	cp	r24, r16
     844:	91 07       	cpc	r25, r17
     846:	20 f4       	brcc	.+8      	; 0x850 <pvPortMalloc+0x86>
     848:	88 81       	ld	r24, Y
     84a:	99 81       	ldd	r25, Y+1	; 0x01
     84c:	00 97       	sbiw	r24, 0x00	; 0
     84e:	a9 f7       	brne	.-22     	; 0x83a <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     850:	80 91 28 08 	lds	r24, 0x0828	; 0x800828 <pxEnd>
     854:	90 91 29 08 	lds	r25, 0x0829	; 0x800829 <pxEnd+0x1>
     858:	c8 17       	cp	r28, r24
     85a:	d9 07       	cpc	r29, r25
     85c:	09 f4       	brne	.+2      	; 0x860 <pvPortMalloc+0x96>
     85e:	4d c0       	rjmp	.+154    	; 0x8fa <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     860:	e0 80       	ld	r14, Z
     862:	f1 80       	ldd	r15, Z+1	; 0x01
     864:	84 e0       	ldi	r24, 0x04	; 4
     866:	e8 0e       	add	r14, r24
     868:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     86a:	88 81       	ld	r24, Y
     86c:	99 81       	ldd	r25, Y+1	; 0x01
     86e:	91 83       	std	Z+1, r25	; 0x01
     870:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     872:	2a 81       	ldd	r18, Y+2	; 0x02
     874:	3b 81       	ldd	r19, Y+3	; 0x03
     876:	20 1b       	sub	r18, r16
     878:	31 0b       	sbc	r19, r17
     87a:	29 30       	cpi	r18, 0x09	; 9
     87c:	31 05       	cpc	r19, r1
     87e:	48 f0       	brcs	.+18     	; 0x892 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     880:	ce 01       	movw	r24, r28
     882:	80 0f       	add	r24, r16
     884:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     886:	fc 01       	movw	r30, r24
     888:	33 83       	std	Z+3, r19	; 0x03
     88a:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     88c:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     88e:	0a 83       	std	Y+2, r16	; 0x02
     890:	52 df       	rcall	.-348    	; 0x736 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     892:	2a 81       	ldd	r18, Y+2	; 0x02
     894:	3b 81       	ldd	r19, Y+3	; 0x03
     896:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <xFreeBytesRemaining>
     89a:	90 91 27 08 	lds	r25, 0x0827	; 0x800827 <xFreeBytesRemaining+0x1>
     89e:	82 1b       	sub	r24, r18
     8a0:	93 0b       	sbc	r25, r19
     8a2:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <xFreeBytesRemaining+0x1>
     8a6:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     8aa:	40 91 24 08 	lds	r20, 0x0824	; 0x800824 <xMinimumEverFreeBytesRemaining>
     8ae:	50 91 25 08 	lds	r21, 0x0825	; 0x800825 <xMinimumEverFreeBytesRemaining+0x1>
     8b2:	84 17       	cp	r24, r20
     8b4:	95 07       	cpc	r25, r21
     8b6:	20 f4       	brcc	.+8      	; 0x8c0 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     8b8:	90 93 25 08 	sts	0x0825, r25	; 0x800825 <xMinimumEverFreeBytesRemaining+0x1>
     8bc:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     8c0:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <xBlockAllocatedBit>
     8c4:	90 91 1f 08 	lds	r25, 0x081F	; 0x80081f <xBlockAllocatedBit+0x1>
     8c8:	28 2b       	or	r18, r24
     8ca:	39 2b       	or	r19, r25
     8cc:	3b 83       	std	Y+3, r19	; 0x03
     8ce:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     8d0:	19 82       	std	Y+1, r1	; 0x01
     8d2:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     8d4:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <xNumberOfSuccessfulAllocations>
     8d8:	90 91 23 08 	lds	r25, 0x0823	; 0x800823 <xNumberOfSuccessfulAllocations+0x1>
     8dc:	01 96       	adiw	r24, 0x01	; 1
     8de:	90 93 23 08 	sts	0x0823, r25	; 0x800823 <xNumberOfSuccessfulAllocations+0x1>
     8e2:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <xNumberOfSuccessfulAllocations>
     8e6:	0b c0       	rjmp	.+22     	; 0x8fe <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     8e8:	e1 2c       	mov	r14, r1
     8ea:	f1 2c       	mov	r15, r1
     8ec:	08 c0       	rjmp	.+16     	; 0x8fe <pvPortMalloc+0x134>
     8ee:	e1 2c       	mov	r14, r1
     8f0:	f1 2c       	mov	r15, r1
     8f2:	05 c0       	rjmp	.+10     	; 0x8fe <pvPortMalloc+0x134>
     8f4:	e1 2c       	mov	r14, r1
     8f6:	f1 2c       	mov	r15, r1
     8f8:	02 c0       	rjmp	.+4      	; 0x8fe <pvPortMalloc+0x134>
     8fa:	e1 2c       	mov	r14, r1
     8fc:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     8fe:	0e 94 3e 10 	call	0x207c	; 0x207c <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     902:	e1 14       	cp	r14, r1
     904:	f1 04       	cpc	r15, r1
     906:	11 f4       	brne	.+4      	; 0x90c <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     908:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     90c:	c7 01       	movw	r24, r14
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16
     916:	ff 90       	pop	r15
     918:	ef 90       	pop	r14
     91a:	08 95       	ret

0000091c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     91c:	0f 93       	push	r16
     91e:	1f 93       	push	r17
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     924:	00 97       	sbiw	r24, 0x00	; 0
     926:	91 f1       	breq	.+100    	; 0x98c <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     928:	ec 01       	movw	r28, r24
     92a:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     92c:	4a 81       	ldd	r20, Y+2	; 0x02
     92e:	5b 81       	ldd	r21, Y+3	; 0x03
     930:	20 91 1e 08 	lds	r18, 0x081E	; 0x80081e <xBlockAllocatedBit>
     934:	30 91 1f 08 	lds	r19, 0x081F	; 0x80081f <xBlockAllocatedBit+0x1>
     938:	ba 01       	movw	r22, r20
     93a:	62 23       	and	r22, r18
     93c:	73 23       	and	r23, r19
     93e:	67 2b       	or	r22, r23
     940:	29 f1       	breq	.+74     	; 0x98c <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     942:	68 81       	ld	r22, Y
     944:	79 81       	ldd	r23, Y+1	; 0x01
     946:	67 2b       	or	r22, r23
     948:	09 f5       	brne	.+66     	; 0x98c <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     94a:	20 95       	com	r18
     94c:	30 95       	com	r19
     94e:	24 23       	and	r18, r20
     950:	35 23       	and	r19, r21
     952:	3b 83       	std	Y+3, r19	; 0x03
     954:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     956:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     95a:	8a 81       	ldd	r24, Y+2	; 0x02
     95c:	9b 81       	ldd	r25, Y+3	; 0x03
     95e:	20 91 26 08 	lds	r18, 0x0826	; 0x800826 <xFreeBytesRemaining>
     962:	30 91 27 08 	lds	r19, 0x0827	; 0x800827 <xFreeBytesRemaining+0x1>
     966:	82 0f       	add	r24, r18
     968:	93 1f       	adc	r25, r19
     96a:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <xFreeBytesRemaining+0x1>
     96e:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     972:	ce 01       	movw	r24, r28
     974:	e0 de       	rcall	.-576    	; 0x736 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     976:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <xNumberOfSuccessfulFrees>
     97a:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <xNumberOfSuccessfulFrees+0x1>
     97e:	01 96       	adiw	r24, 0x01	; 1
     980:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <xNumberOfSuccessfulFrees+0x1>
     984:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     988:	0e 94 3e 10 	call	0x207c	; 0x207c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	08 95       	ret

00000996 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     996:	fc 01       	movw	r30, r24
     998:	03 96       	adiw	r24, 0x03	; 3
     99a:	92 83       	std	Z+2, r25	; 0x02
     99c:	81 83       	std	Z+1, r24	; 0x01
     99e:	4f ef       	ldi	r20, 0xFF	; 255
     9a0:	5f ef       	ldi	r21, 0xFF	; 255
     9a2:	ba 01       	movw	r22, r20
     9a4:	43 83       	std	Z+3, r20	; 0x03
     9a6:	54 83       	std	Z+4, r21	; 0x04
     9a8:	65 83       	std	Z+5, r22	; 0x05
     9aa:	76 83       	std	Z+6, r23	; 0x06
     9ac:	90 87       	std	Z+8, r25	; 0x08
     9ae:	87 83       	std	Z+7, r24	; 0x07
     9b0:	92 87       	std	Z+10, r25	; 0x0a
     9b2:	81 87       	std	Z+9, r24	; 0x09
     9b4:	10 82       	st	Z, r1
     9b6:	08 95       	ret

000009b8 <vListInitialiseItem>:
     9b8:	fc 01       	movw	r30, r24
     9ba:	13 86       	std	Z+11, r1	; 0x0b
     9bc:	12 86       	std	Z+10, r1	; 0x0a
     9be:	08 95       	ret

000009c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     9c0:	0f 93       	push	r16
     9c2:	1f 93       	push	r17
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     9ca:	08 81       	ld	r16, Y
     9cc:	19 81       	ldd	r17, Y+1	; 0x01
     9ce:	2a 81       	ldd	r18, Y+2	; 0x02
     9d0:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     9d2:	0f 3f       	cpi	r16, 0xFF	; 255
     9d4:	4f ef       	ldi	r20, 0xFF	; 255
     9d6:	14 07       	cpc	r17, r20
     9d8:	24 07       	cpc	r18, r20
     9da:	34 07       	cpc	r19, r20
     9dc:	21 f4       	brne	.+8      	; 0x9e6 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     9de:	fc 01       	movw	r30, r24
     9e0:	a1 85       	ldd	r26, Z+9	; 0x09
     9e2:	b2 85       	ldd	r27, Z+10	; 0x0a
     9e4:	11 c0       	rjmp	.+34     	; 0xa08 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     9e6:	dc 01       	movw	r26, r24
     9e8:	13 96       	adiw	r26, 0x03	; 3
     9ea:	01 c0       	rjmp	.+2      	; 0x9ee <vListInsert+0x2e>
     9ec:	df 01       	movw	r26, r30
     9ee:	14 96       	adiw	r26, 0x04	; 4
     9f0:	ed 91       	ld	r30, X+
     9f2:	fc 91       	ld	r31, X
     9f4:	15 97       	sbiw	r26, 0x05	; 5
     9f6:	40 81       	ld	r20, Z
     9f8:	51 81       	ldd	r21, Z+1	; 0x01
     9fa:	62 81       	ldd	r22, Z+2	; 0x02
     9fc:	73 81       	ldd	r23, Z+3	; 0x03
     9fe:	04 17       	cp	r16, r20
     a00:	15 07       	cpc	r17, r21
     a02:	26 07       	cpc	r18, r22
     a04:	37 07       	cpc	r19, r23
     a06:	90 f7       	brcc	.-28     	; 0x9ec <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     a08:	14 96       	adiw	r26, 0x04	; 4
     a0a:	ed 91       	ld	r30, X+
     a0c:	fc 91       	ld	r31, X
     a0e:	15 97       	sbiw	r26, 0x05	; 5
     a10:	fd 83       	std	Y+5, r31	; 0x05
     a12:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a14:	d7 83       	std	Z+7, r29	; 0x07
     a16:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     a18:	bf 83       	std	Y+7, r27	; 0x07
     a1a:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     a1c:	15 96       	adiw	r26, 0x05	; 5
     a1e:	dc 93       	st	X, r29
     a20:	ce 93       	st	-X, r28
     a22:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     a24:	9b 87       	std	Y+11, r25	; 0x0b
     a26:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     a28:	fc 01       	movw	r30, r24
     a2a:	20 81       	ld	r18, Z
     a2c:	2f 5f       	subi	r18, 0xFF	; 255
     a2e:	20 83       	st	Z, r18
}
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	1f 91       	pop	r17
     a36:	0f 91       	pop	r16
     a38:	08 95       	ret

00000a3a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     a40:	a2 85       	ldd	r26, Z+10	; 0x0a
     a42:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a44:	c4 81       	ldd	r28, Z+4	; 0x04
     a46:	d5 81       	ldd	r29, Z+5	; 0x05
     a48:	86 81       	ldd	r24, Z+6	; 0x06
     a4a:	97 81       	ldd	r25, Z+7	; 0x07
     a4c:	9f 83       	std	Y+7, r25	; 0x07
     a4e:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a50:	c6 81       	ldd	r28, Z+6	; 0x06
     a52:	d7 81       	ldd	r29, Z+7	; 0x07
     a54:	84 81       	ldd	r24, Z+4	; 0x04
     a56:	95 81       	ldd	r25, Z+5	; 0x05
     a58:	9d 83       	std	Y+5, r25	; 0x05
     a5a:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     a5c:	11 96       	adiw	r26, 0x01	; 1
     a5e:	8d 91       	ld	r24, X+
     a60:	9c 91       	ld	r25, X
     a62:	12 97       	sbiw	r26, 0x02	; 2
     a64:	e8 17       	cp	r30, r24
     a66:	f9 07       	cpc	r31, r25
     a68:	31 f4       	brne	.+12     	; 0xa76 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     a6a:	86 81       	ldd	r24, Z+6	; 0x06
     a6c:	97 81       	ldd	r25, Z+7	; 0x07
     a6e:	12 96       	adiw	r26, 0x02	; 2
     a70:	9c 93       	st	X, r25
     a72:	8e 93       	st	-X, r24
     a74:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     a76:	13 86       	std	Z+11, r1	; 0x0b
     a78:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     a7a:	8c 91       	ld	r24, X
     a7c:	81 50       	subi	r24, 0x01	; 1
     a7e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     a80:	8c 91       	ld	r24, X
}
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	08 95       	ret

00000a88 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     a88:	a8 95       	wdr
     a8a:	90 ec       	ldi	r25, 0xC0	; 192
     a8c:	88 e1       	ldi	r24, 0x18	; 24
     a8e:	0f b6       	in	r0, 0x3f	; 63
     a90:	f8 94       	cli
     a92:	a8 95       	wdr
     a94:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     a9e:	08 95       	ret

00000aa0 <pxPortInitialiseStack>:
     aa0:	fc 01       	movw	r30, r24
     aa2:	60 83       	st	Z, r22
     aa4:	31 97       	sbiw	r30, 0x01	; 1
     aa6:	70 83       	st	Z, r23
     aa8:	31 97       	sbiw	r30, 0x01	; 1
     aaa:	10 82       	st	Z, r1
     aac:	31 97       	sbiw	r30, 0x01	; 1
     aae:	10 82       	st	Z, r1
     ab0:	31 97       	sbiw	r30, 0x01	; 1
     ab2:	20 e8       	ldi	r18, 0x80	; 128
     ab4:	20 83       	st	Z, r18
     ab6:	31 97       	sbiw	r30, 0x01	; 1
     ab8:	10 82       	st	Z, r1
     aba:	31 97       	sbiw	r30, 0x01	; 1
     abc:	10 82       	st	Z, r1
     abe:	31 97       	sbiw	r30, 0x01	; 1
     ac0:	10 82       	st	Z, r1
     ac2:	77 97       	sbiw	r30, 0x17	; 23
     ac4:	40 83       	st	Z, r20
     ac6:	31 97       	sbiw	r30, 0x01	; 1
     ac8:	50 83       	st	Z, r21
     aca:	86 97       	sbiw	r24, 0x26	; 38
     acc:	08 95       	ret

00000ace <xPortStartScheduler>:
     ace:	dc df       	rcall	.-72     	; 0xa88 <prvSetupTimerInterrupt>
     ad0:	a0 91 99 16 	lds	r26, 0x1699	; 0x801699 <pxCurrentTCB>
     ad4:	b0 91 9a 16 	lds	r27, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
     ad8:	cd 91       	ld	r28, X+
     ada:	cd bf       	out	0x3d, r28	; 61
     adc:	dd 91       	ld	r29, X+
     ade:	de bf       	out	0x3e, r29	; 62
     ae0:	ff 91       	pop	r31
     ae2:	ef 91       	pop	r30
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	bf 91       	pop	r27
     aea:	af 91       	pop	r26
     aec:	9f 91       	pop	r25
     aee:	8f 91       	pop	r24
     af0:	7f 91       	pop	r23
     af2:	6f 91       	pop	r22
     af4:	5f 91       	pop	r21
     af6:	4f 91       	pop	r20
     af8:	3f 91       	pop	r19
     afa:	2f 91       	pop	r18
     afc:	1f 91       	pop	r17
     afe:	0f 91       	pop	r16
     b00:	ff 90       	pop	r15
     b02:	ef 90       	pop	r14
     b04:	df 90       	pop	r13
     b06:	cf 90       	pop	r12
     b08:	bf 90       	pop	r11
     b0a:	af 90       	pop	r10
     b0c:	9f 90       	pop	r9
     b0e:	8f 90       	pop	r8
     b10:	7f 90       	pop	r7
     b12:	6f 90       	pop	r6
     b14:	5f 90       	pop	r5
     b16:	4f 90       	pop	r4
     b18:	3f 90       	pop	r3
     b1a:	2f 90       	pop	r2
     b1c:	1f 90       	pop	r1
     b1e:	0f 90       	pop	r0
     b20:	0c be       	out	0x3c, r0	; 60
     b22:	0f 90       	pop	r0
     b24:	0b be       	out	0x3b, r0	; 59
     b26:	0f 90       	pop	r0
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	0f 90       	pop	r0
     b2c:	08 95       	ret
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	08 95       	ret

00000b32 <vPortYield>:
     b32:	0f 92       	push	r0
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	f8 94       	cli
     b38:	0f 92       	push	r0
     b3a:	0b b6       	in	r0, 0x3b	; 59
     b3c:	0f 92       	push	r0
     b3e:	0c b6       	in	r0, 0x3c	; 60
     b40:	0f 92       	push	r0
     b42:	1f 92       	push	r1
     b44:	11 24       	eor	r1, r1
     b46:	2f 92       	push	r2
     b48:	3f 92       	push	r3
     b4a:	4f 92       	push	r4
     b4c:	5f 92       	push	r5
     b4e:	6f 92       	push	r6
     b50:	7f 92       	push	r7
     b52:	8f 92       	push	r8
     b54:	9f 92       	push	r9
     b56:	af 92       	push	r10
     b58:	bf 92       	push	r11
     b5a:	cf 92       	push	r12
     b5c:	df 92       	push	r13
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	2f 93       	push	r18
     b68:	3f 93       	push	r19
     b6a:	4f 93       	push	r20
     b6c:	5f 93       	push	r21
     b6e:	6f 93       	push	r22
     b70:	7f 93       	push	r23
     b72:	8f 93       	push	r24
     b74:	9f 93       	push	r25
     b76:	af 93       	push	r26
     b78:	bf 93       	push	r27
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	ef 93       	push	r30
     b80:	ff 93       	push	r31
     b82:	a0 91 99 16 	lds	r26, 0x1699	; 0x801699 <pxCurrentTCB>
     b86:	b0 91 9a 16 	lds	r27, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
     b8a:	0d b6       	in	r0, 0x3d	; 61
     b8c:	0d 92       	st	X+, r0
     b8e:	0e b6       	in	r0, 0x3e	; 62
     b90:	0d 92       	st	X+, r0
     b92:	0e 94 9a 11 	call	0x2334	; 0x2334 <vTaskSwitchContext>
     b96:	a0 91 99 16 	lds	r26, 0x1699	; 0x801699 <pxCurrentTCB>
     b9a:	b0 91 9a 16 	lds	r27, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
     b9e:	cd 91       	ld	r28, X+
     ba0:	cd bf       	out	0x3d, r28	; 61
     ba2:	dd 91       	ld	r29, X+
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	ff 91       	pop	r31
     ba8:	ef 91       	pop	r30
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	bf 91       	pop	r27
     bb0:	af 91       	pop	r26
     bb2:	9f 91       	pop	r25
     bb4:	8f 91       	pop	r24
     bb6:	7f 91       	pop	r23
     bb8:	6f 91       	pop	r22
     bba:	5f 91       	pop	r21
     bbc:	4f 91       	pop	r20
     bbe:	3f 91       	pop	r19
     bc0:	2f 91       	pop	r18
     bc2:	1f 91       	pop	r17
     bc4:	0f 91       	pop	r16
     bc6:	ff 90       	pop	r15
     bc8:	ef 90       	pop	r14
     bca:	df 90       	pop	r13
     bcc:	cf 90       	pop	r12
     bce:	bf 90       	pop	r11
     bd0:	af 90       	pop	r10
     bd2:	9f 90       	pop	r9
     bd4:	8f 90       	pop	r8
     bd6:	7f 90       	pop	r7
     bd8:	6f 90       	pop	r6
     bda:	5f 90       	pop	r5
     bdc:	4f 90       	pop	r4
     bde:	3f 90       	pop	r3
     be0:	2f 90       	pop	r2
     be2:	1f 90       	pop	r1
     be4:	0f 90       	pop	r0
     be6:	0c be       	out	0x3c, r0	; 60
     be8:	0f 90       	pop	r0
     bea:	0b be       	out	0x3b, r0	; 59
     bec:	0f 90       	pop	r0
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	0f 90       	pop	r0
     bf2:	08 95       	ret

00000bf4 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     bf4:	0f 92       	push	r0
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	0f 92       	push	r0
     bfc:	0b b6       	in	r0, 0x3b	; 59
     bfe:	0f 92       	push	r0
     c00:	0c b6       	in	r0, 0x3c	; 60
     c02:	0f 92       	push	r0
     c04:	1f 92       	push	r1
     c06:	11 24       	eor	r1, r1
     c08:	2f 92       	push	r2
     c0a:	3f 92       	push	r3
     c0c:	4f 92       	push	r4
     c0e:	5f 92       	push	r5
     c10:	6f 92       	push	r6
     c12:	7f 92       	push	r7
     c14:	8f 92       	push	r8
     c16:	9f 92       	push	r9
     c18:	af 92       	push	r10
     c1a:	bf 92       	push	r11
     c1c:	cf 92       	push	r12
     c1e:	df 92       	push	r13
     c20:	ef 92       	push	r14
     c22:	ff 92       	push	r15
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	2f 93       	push	r18
     c2a:	3f 93       	push	r19
     c2c:	4f 93       	push	r20
     c2e:	5f 93       	push	r21
     c30:	6f 93       	push	r22
     c32:	7f 93       	push	r23
     c34:	8f 93       	push	r24
     c36:	9f 93       	push	r25
     c38:	af 93       	push	r26
     c3a:	bf 93       	push	r27
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	ef 93       	push	r30
     c42:	ff 93       	push	r31
     c44:	a0 91 99 16 	lds	r26, 0x1699	; 0x801699 <pxCurrentTCB>
     c48:	b0 91 9a 16 	lds	r27, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
     c4c:	0d b6       	in	r0, 0x3d	; 61
     c4e:	0d 92       	st	X+, r0
     c50:	0e b6       	in	r0, 0x3e	; 62
     c52:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     c54:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     c56:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <xTaskIncrementTick>
     c5a:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     c5c:	0e 94 9a 11 	call	0x2334	; 0x2334 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     c60:	a0 91 99 16 	lds	r26, 0x1699	; 0x801699 <pxCurrentTCB>
     c64:	b0 91 9a 16 	lds	r27, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
     c68:	cd 91       	ld	r28, X+
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	dd 91       	ld	r29, X+
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	ff 91       	pop	r31
     c72:	ef 91       	pop	r30
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	bf 91       	pop	r27
     c7a:	af 91       	pop	r26
     c7c:	9f 91       	pop	r25
     c7e:	8f 91       	pop	r24
     c80:	7f 91       	pop	r23
     c82:	6f 91       	pop	r22
     c84:	5f 91       	pop	r21
     c86:	4f 91       	pop	r20
     c88:	3f 91       	pop	r19
     c8a:	2f 91       	pop	r18
     c8c:	1f 91       	pop	r17
     c8e:	0f 91       	pop	r16
     c90:	ff 90       	pop	r15
     c92:	ef 90       	pop	r14
     c94:	df 90       	pop	r13
     c96:	cf 90       	pop	r12
     c98:	bf 90       	pop	r11
     c9a:	af 90       	pop	r10
     c9c:	9f 90       	pop	r9
     c9e:	8f 90       	pop	r8
     ca0:	7f 90       	pop	r7
     ca2:	6f 90       	pop	r6
     ca4:	5f 90       	pop	r5
     ca6:	4f 90       	pop	r4
     ca8:	3f 90       	pop	r3
     caa:	2f 90       	pop	r2
     cac:	1f 90       	pop	r1
     cae:	0f 90       	pop	r0
     cb0:	0c be       	out	0x3c, r0	; 60
     cb2:	0f 90       	pop	r0
     cb4:	0b be       	out	0x3b, r0	; 59
     cb6:	0f 90       	pop	r0
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     cbc:	08 95       	ret

00000cbe <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     cbe:	9a df       	rcall	.-204    	; 0xbf4 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     cc0:	18 95       	reti

00000cc2 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	0f 92       	push	r0
     cc8:	fc 01       	movw	r30, r24
     cca:	86 8d       	ldd	r24, Z+30	; 0x1e
     ccc:	81 11       	cpse	r24, r1
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <prvIsQueueEmpty+0x12>
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	01 c0       	rjmp	.+2      	; 0xcd6 <prvIsQueueEmpty+0x14>
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	0f 90       	pop	r0
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	08 95       	ret

00000cdc <prvIsQueueFull>:
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	0f 92       	push	r0
     ce2:	fc 01       	movw	r30, r24
     ce4:	26 8d       	ldd	r18, Z+30	; 0x1e
     ce6:	87 8d       	ldd	r24, Z+31	; 0x1f
     ce8:	28 13       	cpse	r18, r24
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <prvIsQueueFull+0x14>
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	01 c0       	rjmp	.+2      	; 0xcf2 <prvIsQueueFull+0x16>
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	0f 90       	pop	r0
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	08 95       	ret

00000cf8 <prvCopyDataToQueue>:
     cf8:	0f 93       	push	r16
     cfa:	1f 93       	push	r17
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	ec 01       	movw	r28, r24
     d02:	04 2f       	mov	r16, r20
     d04:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d06:	48 a1       	ldd	r20, Y+32	; 0x20
     d08:	41 11       	cpse	r20, r1
     d0a:	0c c0       	rjmp	.+24     	; 0xd24 <prvCopyDataToQueue+0x2c>
     d0c:	88 81       	ld	r24, Y
     d0e:	99 81       	ldd	r25, Y+1	; 0x01
     d10:	89 2b       	or	r24, r25
     d12:	09 f0       	breq	.+2      	; 0xd16 <prvCopyDataToQueue+0x1e>
     d14:	42 c0       	rjmp	.+132    	; 0xd9a <prvCopyDataToQueue+0xa2>
     d16:	8c 81       	ldd	r24, Y+4	; 0x04
     d18:	9d 81       	ldd	r25, Y+5	; 0x05
     d1a:	0e 94 ab 13 	call	0x2756	; 0x2756 <xTaskPriorityDisinherit>
     d1e:	1d 82       	std	Y+5, r1	; 0x05
     d20:	1c 82       	std	Y+4, r1	; 0x04
     d22:	42 c0       	rjmp	.+132    	; 0xda8 <prvCopyDataToQueue+0xb0>
     d24:	01 11       	cpse	r16, r1
     d26:	17 c0       	rjmp	.+46     	; 0xd56 <prvCopyDataToQueue+0x5e>
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	9b 81       	ldd	r25, Y+3	; 0x03
     d2e:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <memcpy>
     d32:	28 a1       	ldd	r18, Y+32	; 0x20
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	9b 81       	ldd	r25, Y+3	; 0x03
     d38:	82 0f       	add	r24, r18
     d3a:	91 1d       	adc	r25, r1
     d3c:	9b 83       	std	Y+3, r25	; 0x03
     d3e:	8a 83       	std	Y+2, r24	; 0x02
     d40:	2c 81       	ldd	r18, Y+4	; 0x04
     d42:	3d 81       	ldd	r19, Y+5	; 0x05
     d44:	82 17       	cp	r24, r18
     d46:	93 07       	cpc	r25, r19
     d48:	50 f1       	brcs	.+84     	; 0xd9e <prvCopyDataToQueue+0xa6>
     d4a:	88 81       	ld	r24, Y
     d4c:	99 81       	ldd	r25, Y+1	; 0x01
     d4e:	9b 83       	std	Y+3, r25	; 0x03
     d50:	8a 83       	std	Y+2, r24	; 0x02
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	29 c0       	rjmp	.+82     	; 0xda8 <prvCopyDataToQueue+0xb0>
     d56:	50 e0       	ldi	r21, 0x00	; 0
     d58:	8e 81       	ldd	r24, Y+6	; 0x06
     d5a:	9f 81       	ldd	r25, Y+7	; 0x07
     d5c:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <memcpy>
     d60:	88 a1       	ldd	r24, Y+32	; 0x20
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	91 95       	neg	r25
     d66:	81 95       	neg	r24
     d68:	91 09       	sbc	r25, r1
     d6a:	2e 81       	ldd	r18, Y+6	; 0x06
     d6c:	3f 81       	ldd	r19, Y+7	; 0x07
     d6e:	28 0f       	add	r18, r24
     d70:	39 1f       	adc	r19, r25
     d72:	3f 83       	std	Y+7, r19	; 0x07
     d74:	2e 83       	std	Y+6, r18	; 0x06
     d76:	48 81       	ld	r20, Y
     d78:	59 81       	ldd	r21, Y+1	; 0x01
     d7a:	24 17       	cp	r18, r20
     d7c:	35 07       	cpc	r19, r21
     d7e:	30 f4       	brcc	.+12     	; 0xd8c <prvCopyDataToQueue+0x94>
     d80:	2c 81       	ldd	r18, Y+4	; 0x04
     d82:	3d 81       	ldd	r19, Y+5	; 0x05
     d84:	82 0f       	add	r24, r18
     d86:	93 1f       	adc	r25, r19
     d88:	9f 83       	std	Y+7, r25	; 0x07
     d8a:	8e 83       	std	Y+6, r24	; 0x06
     d8c:	02 30       	cpi	r16, 0x02	; 2
     d8e:	49 f4       	brne	.+18     	; 0xda2 <prvCopyDataToQueue+0xaa>
     d90:	11 23       	and	r17, r17
     d92:	49 f0       	breq	.+18     	; 0xda6 <prvCopyDataToQueue+0xae>
     d94:	11 50       	subi	r17, 0x01	; 1
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	07 c0       	rjmp	.+14     	; 0xda8 <prvCopyDataToQueue+0xb0>
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	05 c0       	rjmp	.+10     	; 0xda8 <prvCopyDataToQueue+0xb0>
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	03 c0       	rjmp	.+6      	; 0xda8 <prvCopyDataToQueue+0xb0>
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	01 c0       	rjmp	.+2      	; 0xda8 <prvCopyDataToQueue+0xb0>
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	1f 5f       	subi	r17, 0xFF	; 255
     daa:	1e 8f       	std	Y+30, r17	; 0x1e
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	08 95       	ret

00000db6 <prvCopyDataFromQueue>:
     db6:	fc 01       	movw	r30, r24
     db8:	40 a1       	ldd	r20, Z+32	; 0x20
     dba:	44 23       	and	r20, r20
     dbc:	a9 f0       	breq	.+42     	; 0xde8 <prvCopyDataFromQueue+0x32>
     dbe:	50 e0       	ldi	r21, 0x00	; 0
     dc0:	26 81       	ldd	r18, Z+6	; 0x06
     dc2:	37 81       	ldd	r19, Z+7	; 0x07
     dc4:	24 0f       	add	r18, r20
     dc6:	35 1f       	adc	r19, r21
     dc8:	37 83       	std	Z+7, r19	; 0x07
     dca:	26 83       	std	Z+6, r18	; 0x06
     dcc:	84 81       	ldd	r24, Z+4	; 0x04
     dce:	95 81       	ldd	r25, Z+5	; 0x05
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	20 f0       	brcs	.+8      	; 0xdde <prvCopyDataFromQueue+0x28>
     dd6:	80 81       	ld	r24, Z
     dd8:	91 81       	ldd	r25, Z+1	; 0x01
     dda:	97 83       	std	Z+7, r25	; 0x07
     ddc:	86 83       	std	Z+6, r24	; 0x06
     dde:	cb 01       	movw	r24, r22
     de0:	66 81       	ldd	r22, Z+6	; 0x06
     de2:	77 81       	ldd	r23, Z+7	; 0x07
     de4:	0c 94 6c 2a 	jmp	0x54d8	; 0x54d8 <memcpy>
     de8:	08 95       	ret

00000dea <prvUnlockQueue>:
     dea:	1f 93       	push	r17
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	ec 01       	movw	r28, r24
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	0f 92       	push	r0
     df8:	1a a1       	ldd	r17, Y+34	; 0x22
     dfa:	0b c0       	rjmp	.+22     	; 0xe12 <prvUnlockQueue+0x28>
     dfc:	8b 89       	ldd	r24, Y+19	; 0x13
     dfe:	88 23       	and	r24, r24
     e00:	51 f0       	breq	.+20     	; 0xe16 <prvUnlockQueue+0x2c>
     e02:	ce 01       	movw	r24, r28
     e04:	43 96       	adiw	r24, 0x13	; 19
     e06:	0e 94 58 12 	call	0x24b0	; 0x24b0 <xTaskRemoveFromEventList>
     e0a:	81 11       	cpse	r24, r1
     e0c:	0e 94 94 13 	call	0x2728	; 0x2728 <vTaskMissedYield>
     e10:	11 50       	subi	r17, 0x01	; 1
     e12:	11 16       	cp	r1, r17
     e14:	9c f3       	brlt	.-26     	; 0xdfc <prvUnlockQueue+0x12>
     e16:	8f ef       	ldi	r24, 0xFF	; 255
     e18:	8a a3       	std	Y+34, r24	; 0x22
     e1a:	0f 90       	pop	r0
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	0f 92       	push	r0
     e24:	19 a1       	ldd	r17, Y+33	; 0x21
     e26:	0b c0       	rjmp	.+22     	; 0xe3e <prvUnlockQueue+0x54>
     e28:	88 85       	ldd	r24, Y+8	; 0x08
     e2a:	88 23       	and	r24, r24
     e2c:	51 f0       	breq	.+20     	; 0xe42 <prvUnlockQueue+0x58>
     e2e:	ce 01       	movw	r24, r28
     e30:	08 96       	adiw	r24, 0x08	; 8
     e32:	0e 94 58 12 	call	0x24b0	; 0x24b0 <xTaskRemoveFromEventList>
     e36:	81 11       	cpse	r24, r1
     e38:	0e 94 94 13 	call	0x2728	; 0x2728 <vTaskMissedYield>
     e3c:	11 50       	subi	r17, 0x01	; 1
     e3e:	11 16       	cp	r1, r17
     e40:	9c f3       	brlt	.-26     	; 0xe28 <prvUnlockQueue+0x3e>
     e42:	8f ef       	ldi	r24, 0xFF	; 255
     e44:	89 a3       	std	Y+33, r24	; 0x21
     e46:	0f 90       	pop	r0
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	1f 91       	pop	r17
     e50:	08 95       	ret

00000e52 <xQueueGenericReset>:
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	ec 01       	movw	r28, r24
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	0f 92       	push	r0
     e5e:	e8 81       	ld	r30, Y
     e60:	f9 81       	ldd	r31, Y+1	; 0x01
     e62:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e64:	28 a1       	ldd	r18, Y+32	; 0x20
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	82 9f       	mul	r24, r18
     e6c:	a0 01       	movw	r20, r0
     e6e:	83 9f       	mul	r24, r19
     e70:	50 0d       	add	r21, r0
     e72:	92 9f       	mul	r25, r18
     e74:	50 0d       	add	r21, r0
     e76:	11 24       	eor	r1, r1
     e78:	4e 0f       	add	r20, r30
     e7a:	5f 1f       	adc	r21, r31
     e7c:	5d 83       	std	Y+5, r21	; 0x05
     e7e:	4c 83       	std	Y+4, r20	; 0x04
     e80:	1e 8e       	std	Y+30, r1	; 0x1e
     e82:	fb 83       	std	Y+3, r31	; 0x03
     e84:	ea 83       	std	Y+2, r30	; 0x02
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	28 9f       	mul	r18, r24
     e8a:	a0 01       	movw	r20, r0
     e8c:	29 9f       	mul	r18, r25
     e8e:	50 0d       	add	r21, r0
     e90:	38 9f       	mul	r19, r24
     e92:	50 0d       	add	r21, r0
     e94:	11 24       	eor	r1, r1
     e96:	cf 01       	movw	r24, r30
     e98:	84 0f       	add	r24, r20
     e9a:	95 1f       	adc	r25, r21
     e9c:	9f 83       	std	Y+7, r25	; 0x07
     e9e:	8e 83       	std	Y+6, r24	; 0x06
     ea0:	8f ef       	ldi	r24, 0xFF	; 255
     ea2:	89 a3       	std	Y+33, r24	; 0x21
     ea4:	8a a3       	std	Y+34, r24	; 0x22
     ea6:	61 11       	cpse	r22, r1
     ea8:	0b c0       	rjmp	.+22     	; 0xec0 <xQueueGenericReset+0x6e>
     eaa:	88 85       	ldd	r24, Y+8	; 0x08
     eac:	88 23       	and	r24, r24
     eae:	71 f0       	breq	.+28     	; 0xecc <xQueueGenericReset+0x7a>
     eb0:	ce 01       	movw	r24, r28
     eb2:	08 96       	adiw	r24, 0x08	; 8
     eb4:	0e 94 58 12 	call	0x24b0	; 0x24b0 <xTaskRemoveFromEventList>
     eb8:	88 23       	and	r24, r24
     eba:	41 f0       	breq	.+16     	; 0xecc <xQueueGenericReset+0x7a>
     ebc:	3a de       	rcall	.-908    	; 0xb32 <vPortYield>
     ebe:	06 c0       	rjmp	.+12     	; 0xecc <xQueueGenericReset+0x7a>
     ec0:	ce 01       	movw	r24, r28
     ec2:	08 96       	adiw	r24, 0x08	; 8
     ec4:	68 dd       	rcall	.-1328   	; 0x996 <vListInitialise>
     ec6:	ce 01       	movw	r24, r28
     ec8:	43 96       	adiw	r24, 0x13	; 19
     eca:	65 dd       	rcall	.-1334   	; 0x996 <vListInitialise>
     ecc:	0f 90       	pop	r0
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	08 95       	ret

00000ed8 <prvInitialiseNewQueue>:
     ed8:	0f 93       	push	r16
     eda:	1f 93       	push	r17
     edc:	f8 01       	movw	r30, r16
     ede:	61 11       	cpse	r22, r1
     ee0:	03 c0       	rjmp	.+6      	; 0xee8 <prvInitialiseNewQueue+0x10>
     ee2:	11 83       	std	Z+1, r17	; 0x01
     ee4:	00 83       	st	Z, r16
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <prvInitialiseNewQueue+0x14>
     ee8:	51 83       	std	Z+1, r21	; 0x01
     eea:	40 83       	st	Z, r20
     eec:	87 8f       	std	Z+31, r24	; 0x1f
     eee:	60 a3       	std	Z+32, r22	; 0x20
     ef0:	61 e0       	ldi	r22, 0x01	; 1
     ef2:	cf 01       	movw	r24, r30
     ef4:	ae df       	rcall	.-164    	; 0xe52 <xQueueGenericReset>
     ef6:	1f 91       	pop	r17
     ef8:	0f 91       	pop	r16
     efa:	08 95       	ret

00000efc <xQueueGenericCreate>:
     efc:	df 92       	push	r13
     efe:	ef 92       	push	r14
     f00:	ff 92       	push	r15
     f02:	0f 93       	push	r16
     f04:	1f 93       	push	r17
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	f8 2e       	mov	r15, r24
     f0c:	e6 2e       	mov	r14, r22
     f0e:	d4 2e       	mov	r13, r20
     f10:	86 9f       	mul	r24, r22
     f12:	c0 01       	movw	r24, r0
     f14:	11 24       	eor	r1, r1
     f16:	83 96       	adiw	r24, 0x23	; 35
     f18:	58 dc       	rcall	.-1872   	; 0x7ca <pvPortMalloc>
     f1a:	ec 01       	movw	r28, r24
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	41 f0       	breq	.+16     	; 0xf30 <xQueueGenericCreate+0x34>
     f20:	8c 01       	movw	r16, r24
     f22:	2d 2d       	mov	r18, r13
     f24:	ac 01       	movw	r20, r24
     f26:	4d 5d       	subi	r20, 0xDD	; 221
     f28:	5f 4f       	sbci	r21, 0xFF	; 255
     f2a:	6e 2d       	mov	r22, r14
     f2c:	8f 2d       	mov	r24, r15
     f2e:	d4 df       	rcall	.-88     	; 0xed8 <prvInitialiseNewQueue>
     f30:	ce 01       	movw	r24, r28
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	ff 90       	pop	r15
     f3c:	ef 90       	pop	r14
     f3e:	df 90       	pop	r13
     f40:	08 95       	ret

00000f42 <xQueueGenericSend>:
     f42:	cf 92       	push	r12
     f44:	df 92       	push	r13
     f46:	ef 92       	push	r14
     f48:	ff 92       	push	r15
     f4a:	0f 93       	push	r16
     f4c:	1f 93       	push	r17
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	29 97       	sbiw	r28, 0x09	; 9
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	f8 94       	cli
     f5c:	de bf       	out	0x3e, r29	; 62
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	cd bf       	out	0x3d, r28	; 61
     f62:	7c 01       	movw	r14, r24
     f64:	6b 01       	movw	r12, r22
     f66:	2e 83       	std	Y+6, r18	; 0x06
     f68:	3f 83       	std	Y+7, r19	; 0x07
     f6a:	48 87       	std	Y+8, r20	; 0x08
     f6c:	59 87       	std	Y+9, r21	; 0x09
     f6e:	10 e0       	ldi	r17, 0x00	; 0
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	f8 94       	cli
     f74:	0f 92       	push	r0
     f76:	f7 01       	movw	r30, r14
     f78:	96 8d       	ldd	r25, Z+30	; 0x1e
     f7a:	87 8d       	ldd	r24, Z+31	; 0x1f
     f7c:	98 17       	cp	r25, r24
     f7e:	10 f0       	brcs	.+4      	; 0xf84 <xQueueGenericSend+0x42>
     f80:	02 30       	cpi	r16, 0x02	; 2
     f82:	b1 f4       	brne	.+44     	; 0xfb0 <xQueueGenericSend+0x6e>
     f84:	40 2f       	mov	r20, r16
     f86:	b6 01       	movw	r22, r12
     f88:	c7 01       	movw	r24, r14
     f8a:	b6 de       	rcall	.-660    	; 0xcf8 <prvCopyDataToQueue>
     f8c:	f7 01       	movw	r30, r14
     f8e:	93 89       	ldd	r25, Z+19	; 0x13
     f90:	99 23       	and	r25, r25
     f92:	41 f0       	breq	.+16     	; 0xfa4 <xQueueGenericSend+0x62>
     f94:	c7 01       	movw	r24, r14
     f96:	43 96       	adiw	r24, 0x13	; 19
     f98:	0e 94 58 12 	call	0x24b0	; 0x24b0 <xTaskRemoveFromEventList>
     f9c:	88 23       	and	r24, r24
     f9e:	21 f0       	breq	.+8      	; 0xfa8 <xQueueGenericSend+0x66>
     fa0:	c8 dd       	rcall	.-1136   	; 0xb32 <vPortYield>
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <xQueueGenericSend+0x66>
     fa4:	81 11       	cpse	r24, r1
     fa6:	c5 dd       	rcall	.-1142   	; 0xb32 <vPortYield>
     fa8:	0f 90       	pop	r0
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	4c c0       	rjmp	.+152    	; 0x1048 <__EEPROM_REGION_LENGTH__+0x48>
     fb0:	8e 81       	ldd	r24, Y+6	; 0x06
     fb2:	9f 81       	ldd	r25, Y+7	; 0x07
     fb4:	a8 85       	ldd	r26, Y+8	; 0x08
     fb6:	b9 85       	ldd	r27, Y+9	; 0x09
     fb8:	89 2b       	or	r24, r25
     fba:	8a 2b       	or	r24, r26
     fbc:	8b 2b       	or	r24, r27
     fbe:	21 f4       	brne	.+8      	; 0xfc8 <xQueueGenericSend+0x86>
     fc0:	0f 90       	pop	r0
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	40 c0       	rjmp	.+128    	; 0x1048 <__EEPROM_REGION_LENGTH__+0x48>
     fc8:	11 11       	cpse	r17, r1
     fca:	05 c0       	rjmp	.+10     	; 0xfd6 <xQueueGenericSend+0x94>
     fcc:	ce 01       	movw	r24, r28
     fce:	01 96       	adiw	r24, 0x01	; 1
     fd0:	0e 94 1d 13 	call	0x263a	; 0x263a <vTaskInternalSetTimeOutState>
     fd4:	11 e0       	ldi	r17, 0x01	; 1
     fd6:	0f 90       	pop	r0
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	10 d7       	rcall	.+3616   	; 0x1dfc <vTaskSuspendAll>
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	0f 92       	push	r0
     fe2:	f7 01       	movw	r30, r14
     fe4:	81 a1       	ldd	r24, Z+33	; 0x21
     fe6:	8f 3f       	cpi	r24, 0xFF	; 255
     fe8:	09 f4       	brne	.+2      	; 0xfec <xQueueGenericSend+0xaa>
     fea:	11 a2       	std	Z+33, r1	; 0x21
     fec:	f7 01       	movw	r30, r14
     fee:	82 a1       	ldd	r24, Z+34	; 0x22
     ff0:	8f 3f       	cpi	r24, 0xFF	; 255
     ff2:	09 f4       	brne	.+2      	; 0xff6 <xQueueGenericSend+0xb4>
     ff4:	12 a2       	std	Z+34, r1	; 0x22
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	be 01       	movw	r22, r28
     ffc:	6a 5f       	subi	r22, 0xFA	; 250
     ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    1000:	ce 01       	movw	r24, r28
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	0e 94 2e 13 	call	0x265c	; 0x265c <xTaskCheckForTimeOut>
    1008:	81 11       	cpse	r24, r1
    100a:	19 c0       	rjmp	.+50     	; 0x103e <__EEPROM_REGION_LENGTH__+0x3e>
    100c:	c7 01       	movw	r24, r14
    100e:	66 de       	rcall	.-820    	; 0xcdc <prvIsQueueFull>
    1010:	88 23       	and	r24, r24
    1012:	81 f0       	breq	.+32     	; 0x1034 <__EEPROM_REGION_LENGTH__+0x34>
    1014:	4e 81       	ldd	r20, Y+6	; 0x06
    1016:	5f 81       	ldd	r21, Y+7	; 0x07
    1018:	68 85       	ldd	r22, Y+8	; 0x08
    101a:	79 85       	ldd	r23, Y+9	; 0x09
    101c:	c7 01       	movw	r24, r14
    101e:	08 96       	adiw	r24, 0x08	; 8
    1020:	0e 94 ff 11 	call	0x23fe	; 0x23fe <vTaskPlaceOnEventList>
    1024:	c7 01       	movw	r24, r14
    1026:	e1 de       	rcall	.-574    	; 0xdea <prvUnlockQueue>
    1028:	0e 94 3e 10 	call	0x207c	; 0x207c <xTaskResumeAll>
    102c:	81 11       	cpse	r24, r1
    102e:	a0 cf       	rjmp	.-192    	; 0xf70 <xQueueGenericSend+0x2e>
    1030:	80 dd       	rcall	.-1280   	; 0xb32 <vPortYield>
    1032:	9e cf       	rjmp	.-196    	; 0xf70 <xQueueGenericSend+0x2e>
    1034:	c7 01       	movw	r24, r14
    1036:	d9 de       	rcall	.-590    	; 0xdea <prvUnlockQueue>
    1038:	0e 94 3e 10 	call	0x207c	; 0x207c <xTaskResumeAll>
    103c:	99 cf       	rjmp	.-206    	; 0xf70 <xQueueGenericSend+0x2e>
    103e:	c7 01       	movw	r24, r14
    1040:	d4 de       	rcall	.-600    	; 0xdea <prvUnlockQueue>
    1042:	0e 94 3e 10 	call	0x207c	; 0x207c <xTaskResumeAll>
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	29 96       	adiw	r28, 0x09	; 9
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	cd bf       	out	0x3d, r28	; 61
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	1f 91       	pop	r17
    105a:	0f 91       	pop	r16
    105c:	ff 90       	pop	r15
    105e:	ef 90       	pop	r14
    1060:	df 90       	pop	r13
    1062:	cf 90       	pop	r12
    1064:	08 95       	ret

00001066 <prvInitialiseMutex>:
    1066:	0f 93       	push	r16
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	69 f0       	breq	.+26     	; 0x1086 <prvInitialiseMutex+0x20>
    106c:	fc 01       	movw	r30, r24
    106e:	15 82       	std	Z+5, r1	; 0x05
    1070:	14 82       	std	Z+4, r1	; 0x04
    1072:	11 82       	std	Z+1, r1	; 0x01
    1074:	10 82       	st	Z, r1
    1076:	16 82       	std	Z+6, r1	; 0x06
    1078:	00 e0       	ldi	r16, 0x00	; 0
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	a9 01       	movw	r20, r18
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	5e df       	rcall	.-324    	; 0xf42 <xQueueGenericSend>
    1086:	0f 91       	pop	r16
    1088:	08 95       	ret

0000108a <xQueueCreateMutex>:
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	48 2f       	mov	r20, r24
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	33 df       	rcall	.-410    	; 0xefc <xQueueGenericCreate>
    1096:	ec 01       	movw	r28, r24
    1098:	e6 df       	rcall	.-52     	; 0x1066 <prvInitialiseMutex>
    109a:	ce 01       	movw	r24, r28
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	08 95       	ret

000010a2 <xQueueGenericSendFromISR>:
    10a2:	ef 92       	push	r14
    10a4:	ff 92       	push	r15
    10a6:	0f 93       	push	r16
    10a8:	1f 93       	push	r17
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	8a 01       	movw	r16, r20
    10b0:	fc 01       	movw	r30, r24
    10b2:	56 8d       	ldd	r21, Z+30	; 0x1e
    10b4:	37 8d       	ldd	r19, Z+31	; 0x1f
    10b6:	53 17       	cp	r21, r19
    10b8:	10 f0       	brcs	.+4      	; 0x10be <xQueueGenericSendFromISR+0x1c>
    10ba:	22 30       	cpi	r18, 0x02	; 2
    10bc:	f9 f4       	brne	.+62     	; 0x10fc <xQueueGenericSendFromISR+0x5a>
    10be:	42 2f       	mov	r20, r18
    10c0:	78 01       	movw	r14, r16
    10c2:	ec 01       	movw	r28, r24
    10c4:	1a a1       	ldd	r17, Y+34	; 0x22
    10c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10c8:	ce 01       	movw	r24, r28
    10ca:	16 de       	rcall	.-980    	; 0xcf8 <prvCopyDataToQueue>
    10cc:	1f 3f       	cpi	r17, 0xFF	; 255
    10ce:	81 f4       	brne	.+32     	; 0x10f0 <xQueueGenericSendFromISR+0x4e>
    10d0:	8b 89       	ldd	r24, Y+19	; 0x13
    10d2:	88 23       	and	r24, r24
    10d4:	a9 f0       	breq	.+42     	; 0x1100 <xQueueGenericSendFromISR+0x5e>
    10d6:	ce 01       	movw	r24, r28
    10d8:	43 96       	adiw	r24, 0x13	; 19
    10da:	0e 94 58 12 	call	0x24b0	; 0x24b0 <xTaskRemoveFromEventList>
    10de:	88 23       	and	r24, r24
    10e0:	89 f0       	breq	.+34     	; 0x1104 <xQueueGenericSendFromISR+0x62>
    10e2:	e1 14       	cp	r14, r1
    10e4:	f1 04       	cpc	r15, r1
    10e6:	81 f0       	breq	.+32     	; 0x1108 <xQueueGenericSendFromISR+0x66>
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	f7 01       	movw	r30, r14
    10ec:	80 83       	st	Z, r24
    10ee:	0d c0       	rjmp	.+26     	; 0x110a <xQueueGenericSendFromISR+0x68>
    10f0:	ff 24       	eor	r15, r15
    10f2:	f3 94       	inc	r15
    10f4:	f1 0e       	add	r15, r17
    10f6:	fa a2       	std	Y+34, r15	; 0x22
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	07 c0       	rjmp	.+14     	; 0x110a <xQueueGenericSendFromISR+0x68>
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	05 c0       	rjmp	.+10     	; 0x110a <xQueueGenericSendFromISR+0x68>
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	03 c0       	rjmp	.+6      	; 0x110a <xQueueGenericSendFromISR+0x68>
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	01 c0       	rjmp	.+2      	; 0x110a <xQueueGenericSendFromISR+0x68>
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	08 95       	ret

00001118 <xQueueReceive>:
    1118:	cf 92       	push	r12
    111a:	df 92       	push	r13
    111c:	ef 92       	push	r14
    111e:	ff 92       	push	r15
    1120:	0f 93       	push	r16
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	29 97       	sbiw	r28, 0x09	; 9
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	f8 94       	cli
    1132:	de bf       	out	0x3e, r29	; 62
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	cd bf       	out	0x3d, r28	; 61
    1138:	8c 01       	movw	r16, r24
    113a:	6b 01       	movw	r12, r22
    113c:	2e 83       	std	Y+6, r18	; 0x06
    113e:	3f 83       	std	Y+7, r19	; 0x07
    1140:	48 87       	std	Y+8, r20	; 0x08
    1142:	59 87       	std	Y+9, r21	; 0x09
    1144:	e1 2c       	mov	r14, r1
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	0f 92       	push	r0
    114c:	f8 01       	movw	r30, r16
    114e:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1150:	ff 20       	and	r15, r15
    1152:	99 f0       	breq	.+38     	; 0x117a <xQueueReceive+0x62>
    1154:	b6 01       	movw	r22, r12
    1156:	c8 01       	movw	r24, r16
    1158:	2e de       	rcall	.-932    	; 0xdb6 <prvCopyDataFromQueue>
    115a:	fa 94       	dec	r15
    115c:	f8 01       	movw	r30, r16
    115e:	f6 8e       	std	Z+30, r15	; 0x1e
    1160:	80 85       	ldd	r24, Z+8	; 0x08
    1162:	88 23       	and	r24, r24
    1164:	31 f0       	breq	.+12     	; 0x1172 <xQueueReceive+0x5a>
    1166:	c8 01       	movw	r24, r16
    1168:	08 96       	adiw	r24, 0x08	; 8
    116a:	0e 94 58 12 	call	0x24b0	; 0x24b0 <xTaskRemoveFromEventList>
    116e:	81 11       	cpse	r24, r1
    1170:	e0 dc       	rcall	.-1600   	; 0xb32 <vPortYield>
    1172:	0f 90       	pop	r0
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	4f c0       	rjmp	.+158    	; 0x1218 <xQueueReceive+0x100>
    117a:	8e 81       	ldd	r24, Y+6	; 0x06
    117c:	9f 81       	ldd	r25, Y+7	; 0x07
    117e:	a8 85       	ldd	r26, Y+8	; 0x08
    1180:	b9 85       	ldd	r27, Y+9	; 0x09
    1182:	89 2b       	or	r24, r25
    1184:	8a 2b       	or	r24, r26
    1186:	8b 2b       	or	r24, r27
    1188:	21 f4       	brne	.+8      	; 0x1192 <xQueueReceive+0x7a>
    118a:	0f 90       	pop	r0
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	43 c0       	rjmp	.+134    	; 0x1218 <xQueueReceive+0x100>
    1192:	e1 10       	cpse	r14, r1
    1194:	06 c0       	rjmp	.+12     	; 0x11a2 <xQueueReceive+0x8a>
    1196:	ce 01       	movw	r24, r28
    1198:	01 96       	adiw	r24, 0x01	; 1
    119a:	0e 94 1d 13 	call	0x263a	; 0x263a <vTaskInternalSetTimeOutState>
    119e:	ee 24       	eor	r14, r14
    11a0:	e3 94       	inc	r14
    11a2:	0f 90       	pop	r0
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	2a d6       	rcall	.+3156   	; 0x1dfc <vTaskSuspendAll>
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	0f 92       	push	r0
    11ae:	f8 01       	movw	r30, r16
    11b0:	81 a1       	ldd	r24, Z+33	; 0x21
    11b2:	8f 3f       	cpi	r24, 0xFF	; 255
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <xQueueReceive+0xa0>
    11b6:	11 a2       	std	Z+33, r1	; 0x21
    11b8:	f8 01       	movw	r30, r16
    11ba:	82 a1       	ldd	r24, Z+34	; 0x22
    11bc:	8f 3f       	cpi	r24, 0xFF	; 255
    11be:	09 f4       	brne	.+2      	; 0x11c2 <xQueueReceive+0xaa>
    11c0:	12 a2       	std	Z+34, r1	; 0x22
    11c2:	0f 90       	pop	r0
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	be 01       	movw	r22, r28
    11c8:	6a 5f       	subi	r22, 0xFA	; 250
    11ca:	7f 4f       	sbci	r23, 0xFF	; 255
    11cc:	ce 01       	movw	r24, r28
    11ce:	01 96       	adiw	r24, 0x01	; 1
    11d0:	0e 94 2e 13 	call	0x265c	; 0x265c <xTaskCheckForTimeOut>
    11d4:	81 11       	cpse	r24, r1
    11d6:	17 c0       	rjmp	.+46     	; 0x1206 <xQueueReceive+0xee>
    11d8:	c8 01       	movw	r24, r16
    11da:	73 dd       	rcall	.-1306   	; 0xcc2 <prvIsQueueEmpty>
    11dc:	88 23       	and	r24, r24
    11de:	79 f0       	breq	.+30     	; 0x11fe <xQueueReceive+0xe6>
    11e0:	4e 81       	ldd	r20, Y+6	; 0x06
    11e2:	5f 81       	ldd	r21, Y+7	; 0x07
    11e4:	68 85       	ldd	r22, Y+8	; 0x08
    11e6:	79 85       	ldd	r23, Y+9	; 0x09
    11e8:	c8 01       	movw	r24, r16
    11ea:	43 96       	adiw	r24, 0x13	; 19
    11ec:	0e 94 ff 11 	call	0x23fe	; 0x23fe <vTaskPlaceOnEventList>
    11f0:	c8 01       	movw	r24, r16
    11f2:	fb dd       	rcall	.-1034   	; 0xdea <prvUnlockQueue>
    11f4:	43 d7       	rcall	.+3718   	; 0x207c <xTaskResumeAll>
    11f6:	81 11       	cpse	r24, r1
    11f8:	a6 cf       	rjmp	.-180    	; 0x1146 <xQueueReceive+0x2e>
    11fa:	9b dc       	rcall	.-1738   	; 0xb32 <vPortYield>
    11fc:	a4 cf       	rjmp	.-184    	; 0x1146 <xQueueReceive+0x2e>
    11fe:	c8 01       	movw	r24, r16
    1200:	f4 dd       	rcall	.-1048   	; 0xdea <prvUnlockQueue>
    1202:	3c d7       	rcall	.+3704   	; 0x207c <xTaskResumeAll>
    1204:	a0 cf       	rjmp	.-192    	; 0x1146 <xQueueReceive+0x2e>
    1206:	c8 01       	movw	r24, r16
    1208:	f0 dd       	rcall	.-1056   	; 0xdea <prvUnlockQueue>
    120a:	38 d7       	rcall	.+3696   	; 0x207c <xTaskResumeAll>
    120c:	c8 01       	movw	r24, r16
    120e:	59 dd       	rcall	.-1358   	; 0xcc2 <prvIsQueueEmpty>
    1210:	88 23       	and	r24, r24
    1212:	09 f4       	brne	.+2      	; 0x1216 <xQueueReceive+0xfe>
    1214:	98 cf       	rjmp	.-208    	; 0x1146 <xQueueReceive+0x2e>
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	29 96       	adiw	r28, 0x09	; 9
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	de bf       	out	0x3e, r29	; 62
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	cd bf       	out	0x3d, r28	; 61
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	1f 91       	pop	r17
    122a:	0f 91       	pop	r16
    122c:	ff 90       	pop	r15
    122e:	ef 90       	pop	r14
    1230:	df 90       	pop	r13
    1232:	cf 90       	pop	r12
    1234:	08 95       	ret

00001236 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	0f 92       	push	r0
    1242:	89 a1       	ldd	r24, Y+33	; 0x21
    1244:	8f 3f       	cpi	r24, 0xFF	; 255
    1246:	09 f4       	brne	.+2      	; 0x124a <vQueueWaitForMessageRestricted+0x14>
    1248:	19 a2       	std	Y+33, r1	; 0x21
    124a:	8a a1       	ldd	r24, Y+34	; 0x22
    124c:	8f 3f       	cpi	r24, 0xFF	; 255
    124e:	09 f4       	brne	.+2      	; 0x1252 <vQueueWaitForMessageRestricted+0x1c>
    1250:	1a a2       	std	Y+34, r1	; 0x22
    1252:	0f 90       	pop	r0
    1254:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1256:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1258:	81 11       	cpse	r24, r1
    125a:	04 c0       	rjmp	.+8      	; 0x1264 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    125c:	ce 01       	movw	r24, r28
    125e:	43 96       	adiw	r24, 0x13	; 19
    1260:	0e 94 16 12 	call	0x242c	; 0x242c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1264:	ce 01       	movw	r24, r28
    1266:	c1 dd       	rcall	.-1150   	; 0xdea <prvUnlockQueue>
    }
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
    126c:	08 95       	ret

0000126e <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    126e:	fc 01       	movw	r30, r24
    1270:	44 81       	ldd	r20, Z+4	; 0x04
    1272:	55 81       	ldd	r21, Z+5	; 0x05
    1274:	22 81       	ldd	r18, Z+2	; 0x02
    1276:	33 81       	ldd	r19, Z+3	; 0x03
    1278:	24 0f       	add	r18, r20
    127a:	35 1f       	adc	r19, r21
    127c:	80 81       	ld	r24, Z
    127e:	91 81       	ldd	r25, Z+1	; 0x01
    1280:	b9 01       	movw	r22, r18
    1282:	68 1b       	sub	r22, r24
    1284:	79 0b       	sbc	r23, r25
    1286:	cb 01       	movw	r24, r22
    1288:	64 17       	cp	r22, r20
    128a:	75 07       	cpc	r23, r21
    128c:	10 f0       	brcs	.+4      	; 0x1292 <prvBytesInBuffer+0x24>
    128e:	84 1b       	sub	r24, r20
    1290:	95 0b       	sbc	r25, r21
    1292:	08 95       	ret

00001294 <prvInitialiseNewStreamBuffer>:
    1294:	0f 93       	push	r16
    1296:	fc 01       	movw	r30, r24
    1298:	8f e0       	ldi	r24, 0x0F	; 15
    129a:	df 01       	movw	r26, r30
    129c:	1d 92       	st	X+, r1
    129e:	8a 95       	dec	r24
    12a0:	e9 f7       	brne	.-6      	; 0x129c <prvInitialiseNewStreamBuffer+0x8>
    12a2:	75 87       	std	Z+13, r23	; 0x0d
    12a4:	64 87       	std	Z+12, r22	; 0x0c
    12a6:	55 83       	std	Z+5, r21	; 0x05
    12a8:	44 83       	std	Z+4, r20	; 0x04
    12aa:	37 83       	std	Z+7, r19	; 0x07
    12ac:	26 83       	std	Z+6, r18	; 0x06
    12ae:	06 87       	std	Z+14, r16	; 0x0e
    12b0:	0f 91       	pop	r16
    12b2:	08 95       	ret

000012b4 <prvWriteBytesToBuffer>:
    12b4:	af 92       	push	r10
    12b6:	bf 92       	push	r11
    12b8:	cf 92       	push	r12
    12ba:	df 92       	push	r13
    12bc:	ef 92       	push	r14
    12be:	ff 92       	push	r15
    12c0:	0f 93       	push	r16
    12c2:	1f 93       	push	r17
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	6c 01       	movw	r12, r24
    12ca:	5b 01       	movw	r10, r22
    12cc:	7a 01       	movw	r14, r20
    12ce:	fc 01       	movw	r30, r24
    12d0:	c2 81       	ldd	r28, Z+2	; 0x02
    12d2:	d3 81       	ldd	r29, Z+3	; 0x03
    12d4:	04 81       	ldd	r16, Z+4	; 0x04
    12d6:	15 81       	ldd	r17, Z+5	; 0x05
    12d8:	0c 1b       	sub	r16, r28
    12da:	1d 0b       	sbc	r17, r29
    12dc:	40 17       	cp	r20, r16
    12de:	51 07       	cpc	r21, r17
    12e0:	08 f4       	brcc	.+2      	; 0x12e4 <prvWriteBytesToBuffer+0x30>
    12e2:	8a 01       	movw	r16, r20
    12e4:	f6 01       	movw	r30, r12
    12e6:	84 85       	ldd	r24, Z+12	; 0x0c
    12e8:	95 85       	ldd	r25, Z+13	; 0x0d
    12ea:	a8 01       	movw	r20, r16
    12ec:	b5 01       	movw	r22, r10
    12ee:	8c 0f       	add	r24, r28
    12f0:	9d 1f       	adc	r25, r29
    12f2:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <memcpy>
    12f6:	0e 15       	cp	r16, r14
    12f8:	1f 05       	cpc	r17, r15
    12fa:	58 f4       	brcc	.+22     	; 0x1312 <prvWriteBytesToBuffer+0x5e>
    12fc:	a7 01       	movw	r20, r14
    12fe:	40 1b       	sub	r20, r16
    1300:	51 0b       	sbc	r21, r17
    1302:	b5 01       	movw	r22, r10
    1304:	60 0f       	add	r22, r16
    1306:	71 1f       	adc	r23, r17
    1308:	f6 01       	movw	r30, r12
    130a:	84 85       	ldd	r24, Z+12	; 0x0c
    130c:	95 85       	ldd	r25, Z+13	; 0x0d
    130e:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <memcpy>
    1312:	ce 01       	movw	r24, r28
    1314:	8e 0d       	add	r24, r14
    1316:	9f 1d       	adc	r25, r15
    1318:	f6 01       	movw	r30, r12
    131a:	24 81       	ldd	r18, Z+4	; 0x04
    131c:	35 81       	ldd	r19, Z+5	; 0x05
    131e:	82 17       	cp	r24, r18
    1320:	93 07       	cpc	r25, r19
    1322:	10 f0       	brcs	.+4      	; 0x1328 <prvWriteBytesToBuffer+0x74>
    1324:	82 1b       	sub	r24, r18
    1326:	93 0b       	sbc	r25, r19
    1328:	f6 01       	movw	r30, r12
    132a:	93 83       	std	Z+3, r25	; 0x03
    132c:	82 83       	std	Z+2, r24	; 0x02
    132e:	c7 01       	movw	r24, r14
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	1f 91       	pop	r17
    1336:	0f 91       	pop	r16
    1338:	ff 90       	pop	r15
    133a:	ef 90       	pop	r14
    133c:	df 90       	pop	r13
    133e:	cf 90       	pop	r12
    1340:	bf 90       	pop	r11
    1342:	af 90       	pop	r10
    1344:	08 95       	ret

00001346 <prvWriteMessageToBuffer>:
    1346:	cf 92       	push	r12
    1348:	df 92       	push	r13
    134a:	ef 92       	push	r14
    134c:	ff 92       	push	r15
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	1f 92       	push	r1
    1358:	1f 92       	push	r1
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	7c 01       	movw	r14, r24
    1360:	6b 01       	movw	r12, r22
    1362:	5a 83       	std	Y+2, r21	; 0x02
    1364:	49 83       	std	Y+1, r20	; 0x01
    1366:	21 15       	cp	r18, r1
    1368:	31 05       	cpc	r19, r1
    136a:	c1 f0       	breq	.+48     	; 0x139c <prvWriteMessageToBuffer+0x56>
    136c:	fc 01       	movw	r30, r24
    136e:	86 85       	ldd	r24, Z+14	; 0x0e
    1370:	80 fd       	sbrc	r24, 0
    1372:	08 c0       	rjmp	.+16     	; 0x1384 <prvWriteMessageToBuffer+0x3e>
    1374:	42 17       	cp	r20, r18
    1376:	53 07       	cpc	r21, r19
    1378:	08 f4       	brcc	.+2      	; 0x137c <prvWriteMessageToBuffer+0x36>
    137a:	9a 01       	movw	r18, r20
    137c:	3a 83       	std	Y+2, r19	; 0x02
    137e:	29 83       	std	Y+1, r18	; 0x01
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	0f c0       	rjmp	.+30     	; 0x13a2 <prvWriteMessageToBuffer+0x5c>
    1384:	20 17       	cp	r18, r16
    1386:	31 07       	cpc	r19, r17
    1388:	58 f0       	brcs	.+22     	; 0x13a0 <prvWriteMessageToBuffer+0x5a>
    138a:	42 e0       	ldi	r20, 0x02	; 2
    138c:	50 e0       	ldi	r21, 0x00	; 0
    138e:	be 01       	movw	r22, r28
    1390:	6f 5f       	subi	r22, 0xFF	; 255
    1392:	7f 4f       	sbci	r23, 0xFF	; 255
    1394:	c7 01       	movw	r24, r14
    1396:	8e df       	rcall	.-228    	; 0x12b4 <prvWriteBytesToBuffer>
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	03 c0       	rjmp	.+6      	; 0x13a2 <prvWriteMessageToBuffer+0x5c>
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	01 c0       	rjmp	.+2      	; 0x13a2 <prvWriteMessageToBuffer+0x5c>
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	88 23       	and	r24, r24
    13a4:	31 f0       	breq	.+12     	; 0x13b2 <prvWriteMessageToBuffer+0x6c>
    13a6:	49 81       	ldd	r20, Y+1	; 0x01
    13a8:	5a 81       	ldd	r21, Y+2	; 0x02
    13aa:	b6 01       	movw	r22, r12
    13ac:	c7 01       	movw	r24, r14
    13ae:	82 df       	rcall	.-252    	; 0x12b4 <prvWriteBytesToBuffer>
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <prvWriteMessageToBuffer+0x70>
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	df 90       	pop	r13
    13c8:	cf 90       	pop	r12
    13ca:	08 95       	ret

000013cc <prvReadBytesFromBuffer>:
    13cc:	af 92       	push	r10
    13ce:	bf 92       	push	r11
    13d0:	cf 92       	push	r12
    13d2:	df 92       	push	r13
    13d4:	ef 92       	push	r14
    13d6:	ff 92       	push	r15
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	7c 01       	movw	r14, r24
    13e2:	5b 01       	movw	r10, r22
    13e4:	e9 01       	movw	r28, r18
    13e6:	42 17       	cp	r20, r18
    13e8:	53 07       	cpc	r21, r19
    13ea:	08 f4       	brcc	.+2      	; 0x13ee <prvReadBytesFromBuffer+0x22>
    13ec:	ea 01       	movw	r28, r20
    13ee:	20 97       	sbiw	r28, 0x00	; 0
    13f0:	81 f1       	breq	.+96     	; 0x1452 <prvReadBytesFromBuffer+0x86>
    13f2:	f7 01       	movw	r30, r14
    13f4:	00 81       	ld	r16, Z
    13f6:	11 81       	ldd	r17, Z+1	; 0x01
    13f8:	84 81       	ldd	r24, Z+4	; 0x04
    13fa:	95 81       	ldd	r25, Z+5	; 0x05
    13fc:	80 1b       	sub	r24, r16
    13fe:	91 0b       	sbc	r25, r17
    1400:	6e 01       	movw	r12, r28
    1402:	8c 17       	cp	r24, r28
    1404:	9d 07       	cpc	r25, r29
    1406:	08 f4       	brcc	.+2      	; 0x140a <prvReadBytesFromBuffer+0x3e>
    1408:	6c 01       	movw	r12, r24
    140a:	f7 01       	movw	r30, r14
    140c:	64 85       	ldd	r22, Z+12	; 0x0c
    140e:	75 85       	ldd	r23, Z+13	; 0x0d
    1410:	60 0f       	add	r22, r16
    1412:	71 1f       	adc	r23, r17
    1414:	a6 01       	movw	r20, r12
    1416:	c5 01       	movw	r24, r10
    1418:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <memcpy>
    141c:	cc 16       	cp	r12, r28
    141e:	dd 06       	cpc	r13, r29
    1420:	58 f4       	brcc	.+22     	; 0x1438 <prvReadBytesFromBuffer+0x6c>
    1422:	ae 01       	movw	r20, r28
    1424:	4c 19       	sub	r20, r12
    1426:	5d 09       	sbc	r21, r13
    1428:	f7 01       	movw	r30, r14
    142a:	64 85       	ldd	r22, Z+12	; 0x0c
    142c:	75 85       	ldd	r23, Z+13	; 0x0d
    142e:	c5 01       	movw	r24, r10
    1430:	8c 0d       	add	r24, r12
    1432:	9d 1d       	adc	r25, r13
    1434:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <memcpy>
    1438:	0c 0f       	add	r16, r28
    143a:	1d 1f       	adc	r17, r29
    143c:	f7 01       	movw	r30, r14
    143e:	84 81       	ldd	r24, Z+4	; 0x04
    1440:	95 81       	ldd	r25, Z+5	; 0x05
    1442:	08 17       	cp	r16, r24
    1444:	19 07       	cpc	r17, r25
    1446:	10 f0       	brcs	.+4      	; 0x144c <prvReadBytesFromBuffer+0x80>
    1448:	08 1b       	sub	r16, r24
    144a:	19 0b       	sbc	r17, r25
    144c:	f7 01       	movw	r30, r14
    144e:	11 83       	std	Z+1, r17	; 0x01
    1450:	00 83       	st	Z, r16
    1452:	ce 01       	movw	r24, r28
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	1f 91       	pop	r17
    145a:	0f 91       	pop	r16
    145c:	ff 90       	pop	r15
    145e:	ef 90       	pop	r14
    1460:	df 90       	pop	r13
    1462:	cf 90       	pop	r12
    1464:	bf 90       	pop	r11
    1466:	af 90       	pop	r10
    1468:	08 95       	ret

0000146a <prvReadMessageFromBuffer>:
    146a:	6f 92       	push	r6
    146c:	7f 92       	push	r7
    146e:	8f 92       	push	r8
    1470:	9f 92       	push	r9
    1472:	af 92       	push	r10
    1474:	bf 92       	push	r11
    1476:	cf 92       	push	r12
    1478:	df 92       	push	r13
    147a:	ef 92       	push	r14
    147c:	ff 92       	push	r15
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	1f 92       	push	r1
    1488:	1f 92       	push	r1
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	6c 01       	movw	r12, r24
    1490:	4b 01       	movw	r8, r22
    1492:	5a 01       	movw	r10, r20
    1494:	79 01       	movw	r14, r18
    1496:	01 15       	cp	r16, r1
    1498:	11 05       	cpc	r17, r1
    149a:	b1 f0       	breq	.+44     	; 0x14c8 <prvReadMessageFromBuffer+0x5e>
    149c:	fc 01       	movw	r30, r24
    149e:	60 80       	ld	r6, Z
    14a0:	71 80       	ldd	r7, Z+1	; 0x01
    14a2:	a8 01       	movw	r20, r16
    14a4:	be 01       	movw	r22, r28
    14a6:	6f 5f       	subi	r22, 0xFF	; 255
    14a8:	7f 4f       	sbci	r23, 0xFF	; 255
    14aa:	90 df       	rcall	.-224    	; 0x13cc <prvReadBytesFromBuffer>
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	9a 81       	ldd	r25, Y+2	; 0x02
    14b0:	e0 1a       	sub	r14, r16
    14b2:	f1 0a       	sbc	r15, r17
    14b4:	a8 16       	cp	r10, r24
    14b6:	b9 06       	cpc	r11, r25
    14b8:	30 f4       	brcc	.+12     	; 0x14c6 <prvReadMessageFromBuffer+0x5c>
    14ba:	f6 01       	movw	r30, r12
    14bc:	71 82       	std	Z+1, r7	; 0x01
    14be:	60 82       	st	Z, r6
    14c0:	a1 2c       	mov	r10, r1
    14c2:	b1 2c       	mov	r11, r1
    14c4:	01 c0       	rjmp	.+2      	; 0x14c8 <prvReadMessageFromBuffer+0x5e>
    14c6:	5c 01       	movw	r10, r24
    14c8:	97 01       	movw	r18, r14
    14ca:	a5 01       	movw	r20, r10
    14cc:	b4 01       	movw	r22, r8
    14ce:	c6 01       	movw	r24, r12
    14d0:	7d df       	rcall	.-262    	; 0x13cc <prvReadBytesFromBuffer>
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	ff 90       	pop	r15
    14e0:	ef 90       	pop	r14
    14e2:	df 90       	pop	r13
    14e4:	cf 90       	pop	r12
    14e6:	bf 90       	pop	r11
    14e8:	af 90       	pop	r10
    14ea:	9f 90       	pop	r9
    14ec:	8f 90       	pop	r8
    14ee:	7f 90       	pop	r7
    14f0:	6f 90       	pop	r6
    14f2:	08 95       	ret

000014f4 <xStreamBufferGenericCreate>:
    14f4:	cf 92       	push	r12
    14f6:	df 92       	push	r13
    14f8:	ef 92       	push	r14
    14fa:	ff 92       	push	r15
    14fc:	0f 93       	push	r16
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	ec 01       	movw	r28, r24
    1504:	6b 01       	movw	r12, r22
    1506:	41 30       	cpi	r20, 0x01	; 1
    1508:	11 f4       	brne	.+4      	; 0x150e <xStreamBufferGenericCreate+0x1a>
    150a:	01 e0       	ldi	r16, 0x01	; 1
    150c:	01 c0       	rjmp	.+2      	; 0x1510 <xStreamBufferGenericCreate+0x1c>
    150e:	00 e0       	ldi	r16, 0x00	; 0
    1510:	c1 14       	cp	r12, r1
    1512:	d1 04       	cpc	r13, r1
    1514:	19 f4       	brne	.+6      	; 0x151c <xStreamBufferGenericCreate+0x28>
    1516:	cc 24       	eor	r12, r12
    1518:	c3 94       	inc	r12
    151a:	d1 2c       	mov	r13, r1
    151c:	ce 01       	movw	r24, r28
    151e:	40 96       	adiw	r24, 0x10	; 16
    1520:	c8 17       	cp	r28, r24
    1522:	d9 07       	cpc	r29, r25
    1524:	20 f4       	brcc	.+8      	; 0x152e <xStreamBufferGenericCreate+0x3a>
    1526:	21 96       	adiw	r28, 0x01	; 1
    1528:	50 d9       	rcall	.-3424   	; 0x7ca <pvPortMalloc>
    152a:	7c 01       	movw	r14, r24
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <xStreamBufferGenericCreate+0x3e>
    152e:	e1 2c       	mov	r14, r1
    1530:	f1 2c       	mov	r15, r1
    1532:	e1 14       	cp	r14, r1
    1534:	f1 04       	cpc	r15, r1
    1536:	39 f0       	breq	.+14     	; 0x1546 <xStreamBufferGenericCreate+0x52>
    1538:	96 01       	movw	r18, r12
    153a:	ae 01       	movw	r20, r28
    153c:	b7 01       	movw	r22, r14
    153e:	61 5f       	subi	r22, 0xF1	; 241
    1540:	7f 4f       	sbci	r23, 0xFF	; 255
    1542:	c7 01       	movw	r24, r14
    1544:	a7 de       	rcall	.-690    	; 0x1294 <prvInitialiseNewStreamBuffer>
    1546:	c7 01       	movw	r24, r14
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	0f 91       	pop	r16
    154e:	ff 90       	pop	r15
    1550:	ef 90       	pop	r14
    1552:	df 90       	pop	r13
    1554:	cf 90       	pop	r12
    1556:	08 95       	ret

00001558 <xStreamBufferReset>:
    1558:	0f 93       	push	r16
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	0f 92       	push	r0
    1560:	fc 01       	movw	r30, r24
    1562:	20 85       	ldd	r18, Z+8	; 0x08
    1564:	31 85       	ldd	r19, Z+9	; 0x09
    1566:	23 2b       	or	r18, r19
    1568:	71 f4       	brne	.+28     	; 0x1586 <xStreamBufferReset+0x2e>
    156a:	22 85       	ldd	r18, Z+10	; 0x0a
    156c:	33 85       	ldd	r19, Z+11	; 0x0b
    156e:	23 2b       	or	r18, r19
    1570:	61 f4       	brne	.+24     	; 0x158a <xStreamBufferReset+0x32>
    1572:	26 81       	ldd	r18, Z+6	; 0x06
    1574:	37 81       	ldd	r19, Z+7	; 0x07
    1576:	44 81       	ldd	r20, Z+4	; 0x04
    1578:	55 81       	ldd	r21, Z+5	; 0x05
    157a:	64 85       	ldd	r22, Z+12	; 0x0c
    157c:	75 85       	ldd	r23, Z+13	; 0x0d
    157e:	06 85       	ldd	r16, Z+14	; 0x0e
    1580:	89 de       	rcall	.-750    	; 0x1294 <prvInitialiseNewStreamBuffer>
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	03 c0       	rjmp	.+6      	; 0x158c <xStreamBufferReset+0x34>
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	01 c0       	rjmp	.+2      	; 0x158c <xStreamBufferReset+0x34>
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	0f 90       	pop	r0
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	0f 91       	pop	r16
    1592:	08 95       	ret

00001594 <xStreamBufferSpacesAvailable>:
    1594:	fc 01       	movw	r30, r24
    1596:	24 81       	ldd	r18, Z+4	; 0x04
    1598:	35 81       	ldd	r19, Z+5	; 0x05
    159a:	80 81       	ld	r24, Z
    159c:	91 81       	ldd	r25, Z+1	; 0x01
    159e:	82 0f       	add	r24, r18
    15a0:	93 1f       	adc	r25, r19
    15a2:	42 81       	ldd	r20, Z+2	; 0x02
    15a4:	53 81       	ldd	r21, Z+3	; 0x03
    15a6:	84 1b       	sub	r24, r20
    15a8:	95 0b       	sbc	r25, r21
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	82 17       	cp	r24, r18
    15ae:	93 07       	cpc	r25, r19
    15b0:	10 f0       	brcs	.+4      	; 0x15b6 <xStreamBufferSpacesAvailable+0x22>
    15b2:	82 1b       	sub	r24, r18
    15b4:	93 0b       	sbc	r25, r19
    15b6:	08 95       	ret

000015b8 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    15b8:	2f 92       	push	r2
    15ba:	3f 92       	push	r3
    15bc:	4f 92       	push	r4
    15be:	5f 92       	push	r5
    15c0:	6f 92       	push	r6
    15c2:	7f 92       	push	r7
    15c4:	8f 92       	push	r8
    15c6:	9f 92       	push	r9
    15c8:	af 92       	push	r10
    15ca:	bf 92       	push	r11
    15cc:	cf 92       	push	r12
    15ce:	df 92       	push	r13
    15d0:	ef 92       	push	r14
    15d2:	ff 92       	push	r15
    15d4:	0f 93       	push	r16
    15d6:	1f 93       	push	r17
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    15e0:	2b 97       	sbiw	r28, 0x0b	; 11
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	f8 94       	cli
    15e6:	de bf       	out	0x3e, r29	; 62
    15e8:	0f be       	out	0x3f, r0	; 63
    15ea:	cd bf       	out	0x3d, r28	; 61
    15ec:	4c 01       	movw	r8, r24
    15ee:	7b 87       	std	Y+11, r23	; 0x0b
    15f0:	6a 87       	std	Y+10, r22	; 0x0a
    15f2:	1a 01       	movw	r2, r20
    15f4:	0e 83       	std	Y+6, r16	; 0x06
    15f6:	1f 83       	std	Y+7, r17	; 0x07
    15f8:	28 87       	std	Y+8, r18	; 0x08
    15fa:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    15fc:	fc 01       	movw	r30, r24
    15fe:	84 81       	ldd	r24, Z+4	; 0x04
    1600:	95 81       	ldd	r25, Z+5	; 0x05
    1602:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1604:	26 85       	ldd	r18, Z+14	; 0x0e
    1606:	20 ff       	sbrs	r18, 0
    1608:	0c c0       	rjmp	.+24     	; 0x1622 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    160a:	2a 01       	movw	r4, r20
    160c:	f2 e0       	ldi	r31, 0x02	; 2
    160e:	4f 0e       	add	r4, r31
    1610:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1612:	84 15       	cp	r24, r4
    1614:	95 05       	cpc	r25, r5
    1616:	58 f4       	brcc	.+22     	; 0x162e <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1618:	1e 82       	std	Y+6, r1	; 0x06
    161a:	1f 82       	std	Y+7, r1	; 0x07
    161c:	18 86       	std	Y+8, r1	; 0x08
    161e:	19 86       	std	Y+9, r1	; 0x09
    1620:	06 c0       	rjmp	.+12     	; 0x162e <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1622:	84 17       	cp	r24, r20
    1624:	95 07       	cpc	r25, r21
    1626:	10 f0       	brcs	.+4      	; 0x162c <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1628:	2a 01       	movw	r4, r20
    162a:	01 c0       	rjmp	.+2      	; 0x162e <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    162c:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    162e:	8e 81       	ldd	r24, Y+6	; 0x06
    1630:	9f 81       	ldd	r25, Y+7	; 0x07
    1632:	a8 85       	ldd	r26, Y+8	; 0x08
    1634:	b9 85       	ldd	r27, Y+9	; 0x09
    1636:	89 2b       	or	r24, r25
    1638:	8a 2b       	or	r24, r26
    163a:	8b 2b       	or	r24, r27
    163c:	09 f4       	brne	.+2      	; 0x1640 <xStreamBufferSend+0x88>
    163e:	36 c0       	rjmp	.+108    	; 0x16ac <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1640:	ce 01       	movw	r24, r28
    1642:	01 96       	adiw	r24, 0x01	; 1
    1644:	e4 d7       	rcall	.+4040   	; 0x260e <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    164c:	c4 01       	movw	r24, r8
    164e:	a2 df       	rcall	.-188    	; 0x1594 <xStreamBufferSpacesAvailable>
    1650:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1652:	84 15       	cp	r24, r4
    1654:	95 05       	cpc	r25, r5
    1656:	38 f5       	brcc	.+78     	; 0x16a6 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1658:	60 e0       	ldi	r22, 0x00	; 0
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1662:	0e 94 98 13 	call	0x2730	; 0x2730 <xTaskGetCurrentTaskHandle>
    1666:	f4 01       	movw	r30, r8
    1668:	93 87       	std	Z+11, r25	; 0x0b
    166a:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    166c:	0f 90       	pop	r0
    166e:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1670:	ae 80       	ldd	r10, Y+6	; 0x06
    1672:	bf 80       	ldd	r11, Y+7	; 0x07
    1674:	c8 84       	ldd	r12, Y+8	; 0x08
    1676:	d9 84       	ldd	r13, Y+9	; 0x09
    1678:	e1 2c       	mov	r14, r1
    167a:	f1 2c       	mov	r15, r1
    167c:	00 e0       	ldi	r16, 0x00	; 0
    167e:	10 e0       	ldi	r17, 0x00	; 0
    1680:	98 01       	movw	r18, r16
    1682:	40 e0       	ldi	r20, 0x00	; 0
    1684:	50 e0       	ldi	r21, 0x00	; 0
    1686:	ba 01       	movw	r22, r20
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	0e 94 06 14 	call	0x280c	; 0x280c <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    168e:	f4 01       	movw	r30, r8
    1690:	13 86       	std	Z+11, r1	; 0x0b
    1692:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1694:	be 01       	movw	r22, r28
    1696:	6a 5f       	subi	r22, 0xFA	; 250
    1698:	7f 4f       	sbci	r23, 0xFF	; 255
    169a:	ce 01       	movw	r24, r28
    169c:	01 96       	adiw	r24, 0x01	; 1
    169e:	de d7       	rcall	.+4028   	; 0x265c <xTaskCheckForTimeOut>
    16a0:	88 23       	and	r24, r24
    16a2:	89 f2       	breq	.-94     	; 0x1646 <xStreamBufferSend+0x8e>
    16a4:	05 c0       	rjmp	.+10     	; 0x16b0 <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    16a6:	0f 90       	pop	r0
    16a8:	0f be       	out	0x3f, r0	; 63
                    break;
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    16ac:	61 2c       	mov	r6, r1
    16ae:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    16b0:	61 14       	cp	r6, r1
    16b2:	71 04       	cpc	r7, r1
    16b4:	19 f4       	brne	.+6      	; 0x16bc <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    16b6:	c4 01       	movw	r24, r8
    16b8:	6d df       	rcall	.-294    	; 0x1594 <xStreamBufferSpacesAvailable>
    16ba:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    16bc:	82 01       	movw	r16, r4
    16be:	93 01       	movw	r18, r6
    16c0:	a1 01       	movw	r20, r2
    16c2:	6a 85       	ldd	r22, Y+10	; 0x0a
    16c4:	7b 85       	ldd	r23, Y+11	; 0x0b
    16c6:	c4 01       	movw	r24, r8
    16c8:	3e de       	rcall	.-900    	; 0x1346 <prvWriteMessageToBuffer>
    16ca:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    16cc:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    16ce:	e9 f0       	breq	.+58     	; 0x170a <xStreamBufferSend+0x152>
    16d0:	c4 01       	movw	r24, r8
    16d2:	cd dd       	rcall	.-1126   	; 0x126e <prvBytesInBuffer>
    16d4:	f4 01       	movw	r30, r8
    16d6:	26 81       	ldd	r18, Z+6	; 0x06
    16d8:	37 81       	ldd	r19, Z+7	; 0x07
    16da:	82 17       	cp	r24, r18
    16dc:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    16de:	a8 f0       	brcs	.+42     	; 0x170a <xStreamBufferSend+0x152>
    16e0:	8d d3       	rcall	.+1818   	; 0x1dfc <vTaskSuspendAll>
    16e2:	f4 01       	movw	r30, r8
    16e4:	80 85       	ldd	r24, Z+8	; 0x08
    16e6:	91 85       	ldd	r25, Z+9	; 0x09
    16e8:	89 2b       	or	r24, r25
    16ea:	71 f0       	breq	.+28     	; 0x1708 <xStreamBufferSend+0x150>
    16ec:	80 85       	ldd	r24, Z+8	; 0x08
    16ee:	91 85       	ldd	r25, Z+9	; 0x09
    16f0:	e1 2c       	mov	r14, r1
    16f2:	f1 2c       	mov	r15, r1
    16f4:	00 e0       	ldi	r16, 0x00	; 0
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	a9 01       	movw	r20, r18
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	0e 94 ad 14 	call	0x295a	; 0x295a <xTaskGenericNotify>
    1702:	f4 01       	movw	r30, r8
    1704:	11 86       	std	Z+9, r1	; 0x09
    1706:	10 86       	std	Z+8, r1	; 0x08
    1708:	b9 d4       	rcall	.+2418   	; 0x207c <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    170a:	c6 01       	movw	r24, r12
    170c:	2b 96       	adiw	r28, 0x0b	; 11
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	cd bf       	out	0x3d, r28	; 61
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	1f 91       	pop	r17
    171e:	0f 91       	pop	r16
    1720:	ff 90       	pop	r15
    1722:	ef 90       	pop	r14
    1724:	df 90       	pop	r13
    1726:	cf 90       	pop	r12
    1728:	bf 90       	pop	r11
    172a:	af 90       	pop	r10
    172c:	9f 90       	pop	r9
    172e:	8f 90       	pop	r8
    1730:	7f 90       	pop	r7
    1732:	6f 90       	pop	r6
    1734:	5f 90       	pop	r5
    1736:	4f 90       	pop	r4
    1738:	3f 90       	pop	r3
    173a:	2f 90       	pop	r2
    173c:	08 95       	ret

0000173e <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    173e:	af 92       	push	r10
    1740:	bf 92       	push	r11
    1742:	cf 92       	push	r12
    1744:	df 92       	push	r13
    1746:	ef 92       	push	r14
    1748:	ff 92       	push	r15
    174a:	0f 93       	push	r16
    174c:	1f 93       	push	r17
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	ec 01       	movw	r28, r24
    1754:	7b 01       	movw	r14, r22
    1756:	5a 01       	movw	r10, r20
    1758:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    175a:	8e 85       	ldd	r24, Y+14	; 0x0e
    175c:	80 ff       	sbrs	r24, 0
    175e:	04 c0       	rjmp	.+8      	; 0x1768 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1760:	8a 01       	movw	r16, r20
    1762:	0e 5f       	subi	r16, 0xFE	; 254
    1764:	1f 4f       	sbci	r17, 0xFF	; 255
    1766:	01 c0       	rjmp	.+2      	; 0x176a <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1768:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    176a:	ce 01       	movw	r24, r28
    176c:	13 df       	rcall	.-474    	; 0x1594 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    176e:	9c 01       	movw	r18, r24
    1770:	a5 01       	movw	r20, r10
    1772:	b7 01       	movw	r22, r14
    1774:	ce 01       	movw	r24, r28
    1776:	e7 dd       	rcall	.-1074   	; 0x1346 <prvWriteMessageToBuffer>
    1778:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    177a:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    177c:	c1 f0       	breq	.+48     	; 0x17ae <xStreamBufferSendFromISR+0x70>
    177e:	ce 01       	movw	r24, r28
    1780:	76 dd       	rcall	.-1300   	; 0x126e <prvBytesInBuffer>
    1782:	2e 81       	ldd	r18, Y+6	; 0x06
    1784:	3f 81       	ldd	r19, Y+7	; 0x07
    1786:	82 17       	cp	r24, r18
    1788:	93 07       	cpc	r25, r19
    178a:	88 f0       	brcs	.+34     	; 0x17ae <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    178c:	88 85       	ldd	r24, Y+8	; 0x08
    178e:	99 85       	ldd	r25, Y+9	; 0x09
    1790:	89 2b       	or	r24, r25
    1792:	69 f0       	breq	.+26     	; 0x17ae <xStreamBufferSendFromISR+0x70>
    1794:	88 85       	ldd	r24, Y+8	; 0x08
    1796:	99 85       	ldd	r25, Y+9	; 0x09
    1798:	e1 2c       	mov	r14, r1
    179a:	f1 2c       	mov	r15, r1
    179c:	00 e0       	ldi	r16, 0x00	; 0
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	a9 01       	movw	r20, r18
    17a4:	60 e0       	ldi	r22, 0x00	; 0
    17a6:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <xTaskGenericNotifyFromISR>
    17aa:	19 86       	std	Y+9, r1	; 0x09
    17ac:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    17ae:	c5 01       	movw	r24, r10
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	1f 91       	pop	r17
    17b6:	0f 91       	pop	r16
    17b8:	ff 90       	pop	r15
    17ba:	ef 90       	pop	r14
    17bc:	df 90       	pop	r13
    17be:	cf 90       	pop	r12
    17c0:	bf 90       	pop	r11
    17c2:	af 90       	pop	r10
    17c4:	08 95       	ret

000017c6 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    17c6:	4f 92       	push	r4
    17c8:	5f 92       	push	r5
    17ca:	6f 92       	push	r6
    17cc:	7f 92       	push	r7
    17ce:	8f 92       	push	r8
    17d0:	9f 92       	push	r9
    17d2:	af 92       	push	r10
    17d4:	bf 92       	push	r11
    17d6:	cf 92       	push	r12
    17d8:	df 92       	push	r13
    17da:	ef 92       	push	r14
    17dc:	ff 92       	push	r15
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	ec 01       	movw	r28, r24
    17e8:	2b 01       	movw	r4, r22
    17ea:	3a 01       	movw	r6, r20
    17ec:	58 01       	movw	r10, r16
    17ee:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    17f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    17f2:	80 ff       	sbrs	r24, 0
    17f4:	05 c0       	rjmp	.+10     	; 0x1800 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    17f6:	68 94       	set
    17f8:	88 24       	eor	r8, r8
    17fa:	81 f8       	bld	r8, 1
    17fc:	91 2c       	mov	r9, r1
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1800:	81 2c       	mov	r8, r1
    1802:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1804:	a1 14       	cp	r10, r1
    1806:	b1 04       	cpc	r11, r1
    1808:	c1 04       	cpc	r12, r1
    180a:	d1 04       	cpc	r13, r1
    180c:	31 f1       	breq	.+76     	; 0x185a <xStreamBufferReceive+0x94>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1814:	ce 01       	movw	r24, r28
    1816:	2b dd       	rcall	.-1450   	; 0x126e <prvBytesInBuffer>
    1818:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    181a:	88 16       	cp	r8, r24
    181c:	99 06       	cpc	r9, r25
    181e:	40 f0       	brcs	.+16     	; 0x1830 <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1820:	60 e0       	ldi	r22, 0x00	; 0
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    182a:	82 d7       	rcall	.+3844   	; 0x2730 <xTaskGetCurrentTaskHandle>
    182c:	99 87       	std	Y+9, r25	; 0x09
    182e:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1830:	0f 90       	pop	r0
    1832:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1834:	8e 14       	cp	r8, r14
    1836:	9f 04       	cpc	r9, r15
    1838:	98 f0       	brcs	.+38     	; 0x1860 <xStreamBufferReceive+0x9a>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    183a:	e1 2c       	mov	r14, r1
    183c:	f1 2c       	mov	r15, r1
    183e:	00 e0       	ldi	r16, 0x00	; 0
    1840:	10 e0       	ldi	r17, 0x00	; 0
    1842:	98 01       	movw	r18, r16
    1844:	40 e0       	ldi	r20, 0x00	; 0
    1846:	50 e0       	ldi	r21, 0x00	; 0
    1848:	ba 01       	movw	r22, r20
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	df d7       	rcall	.+4030   	; 0x280c <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    184e:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1850:	18 86       	std	Y+8, r1	; 0x08
    1852:	ce 01       	movw	r24, r28
    1854:	0c dd       	rcall	.-1512   	; 0x126e <prvBytesInBuffer>
    1856:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1858:	03 c0       	rjmp	.+6      	; 0x1860 <xStreamBufferReceive+0x9a>
    185a:	ce 01       	movw	r24, r28
    185c:	08 dd       	rcall	.-1520   	; 0x126e <prvBytesInBuffer>
    185e:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1860:	8e 14       	cp	r8, r14
    1862:	9f 04       	cpc	r9, r15
    1864:	e8 f4       	brcc	.+58     	; 0x18a0 <xStreamBufferReceive+0xda>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1866:	84 01       	movw	r16, r8
    1868:	97 01       	movw	r18, r14
    186a:	a3 01       	movw	r20, r6
    186c:	b2 01       	movw	r22, r4
    186e:	ce 01       	movw	r24, r28
    1870:	fc dd       	rcall	.-1032   	; 0x146a <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1872:	6c 01       	movw	r12, r24
    1874:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1876:	b1 f0       	breq	.+44     	; 0x18a4 <xStreamBufferReceive+0xde>
    1878:	c1 d2       	rcall	.+1410   	; 0x1dfc <vTaskSuspendAll>
    187a:	8a 85       	ldd	r24, Y+10	; 0x0a
    187c:	9b 85       	ldd	r25, Y+11	; 0x0b
    187e:	89 2b       	or	r24, r25
    1880:	69 f0       	breq	.+26     	; 0x189c <xStreamBufferReceive+0xd6>
    1882:	8a 85       	ldd	r24, Y+10	; 0x0a
    1884:	9b 85       	ldd	r25, Y+11	; 0x0b
    1886:	e1 2c       	mov	r14, r1
    1888:	f1 2c       	mov	r15, r1
    188a:	00 e0       	ldi	r16, 0x00	; 0
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	a9 01       	movw	r20, r18
    1892:	60 e0       	ldi	r22, 0x00	; 0
    1894:	0e 94 ad 14 	call	0x295a	; 0x295a <xTaskGenericNotify>
    1898:	1b 86       	std	Y+11, r1	; 0x0b
    189a:	1a 86       	std	Y+10, r1	; 0x0a
    189c:	ef d3       	rcall	.+2014   	; 0x207c <xTaskResumeAll>
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <xStreamBufferReceive+0xde>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    18a0:	c1 2c       	mov	r12, r1
    18a2:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    18a4:	c6 01       	movw	r24, r12
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	1f 91       	pop	r17
    18ac:	0f 91       	pop	r16
    18ae:	ff 90       	pop	r15
    18b0:	ef 90       	pop	r14
    18b2:	df 90       	pop	r13
    18b4:	cf 90       	pop	r12
    18b6:	bf 90       	pop	r11
    18b8:	af 90       	pop	r10
    18ba:	9f 90       	pop	r9
    18bc:	8f 90       	pop	r8
    18be:	7f 90       	pop	r7
    18c0:	6f 90       	pop	r6
    18c2:	5f 90       	pop	r5
    18c4:	4f 90       	pop	r4
    18c6:	08 95       	ret

000018c8 <prvResetNextTaskUnblockTime>:
    18c8:	e0 91 13 16 	lds	r30, 0x1613	; 0x801613 <pxDelayedTaskList>
    18cc:	f0 91 14 16 	lds	r31, 0x1614	; 0x801614 <pxDelayedTaskList+0x1>
    18d0:	80 81       	ld	r24, Z
    18d2:	81 11       	cpse	r24, r1
    18d4:	0c c0       	rjmp	.+24     	; 0x18ee <prvResetNextTaskUnblockTime+0x26>
    18d6:	8f ef       	ldi	r24, 0xFF	; 255
    18d8:	9f ef       	ldi	r25, 0xFF	; 255
    18da:	dc 01       	movw	r26, r24
    18dc:	80 93 dd 15 	sts	0x15DD, r24	; 0x8015dd <xNextTaskUnblockTime>
    18e0:	90 93 de 15 	sts	0x15DE, r25	; 0x8015de <xNextTaskUnblockTime+0x1>
    18e4:	a0 93 df 15 	sts	0x15DF, r26	; 0x8015df <xNextTaskUnblockTime+0x2>
    18e8:	b0 93 e0 15 	sts	0x15E0, r27	; 0x8015e0 <xNextTaskUnblockTime+0x3>
    18ec:	08 95       	ret
    18ee:	e0 91 13 16 	lds	r30, 0x1613	; 0x801613 <pxDelayedTaskList>
    18f2:	f0 91 14 16 	lds	r31, 0x1614	; 0x801614 <pxDelayedTaskList+0x1>
    18f6:	07 80       	ldd	r0, Z+7	; 0x07
    18f8:	f0 85       	ldd	r31, Z+8	; 0x08
    18fa:	e0 2d       	mov	r30, r0
    18fc:	80 81       	ld	r24, Z
    18fe:	91 81       	ldd	r25, Z+1	; 0x01
    1900:	a2 81       	ldd	r26, Z+2	; 0x02
    1902:	b3 81       	ldd	r27, Z+3	; 0x03
    1904:	80 93 dd 15 	sts	0x15DD, r24	; 0x8015dd <xNextTaskUnblockTime>
    1908:	90 93 de 15 	sts	0x15DE, r25	; 0x8015de <xNextTaskUnblockTime+0x1>
    190c:	a0 93 df 15 	sts	0x15DF, r26	; 0x8015df <xNextTaskUnblockTime+0x2>
    1910:	b0 93 e0 15 	sts	0x15E0, r27	; 0x8015e0 <xNextTaskUnblockTime+0x3>
    1914:	08 95       	ret

00001916 <prvDeleteTCB>:
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	ec 01       	movw	r28, r24
    191c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    191e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1920:	0e 94 8e 04 	call	0x91c	; 0x91c <vPortFree>
    1924:	ce 01       	movw	r24, r28
    1926:	0e 94 8e 04 	call	0x91c	; 0x91c <vPortFree>
    192a:	df 91       	pop	r29
    192c:	cf 91       	pop	r28
    192e:	08 95       	ret

00001930 <prvInitialiseNewTask>:
    1930:	4f 92       	push	r4
    1932:	5f 92       	push	r5
    1934:	6f 92       	push	r6
    1936:	7f 92       	push	r7
    1938:	8f 92       	push	r8
    193a:	9f 92       	push	r9
    193c:	af 92       	push	r10
    193e:	bf 92       	push	r11
    1940:	cf 92       	push	r12
    1942:	df 92       	push	r13
    1944:	ef 92       	push	r14
    1946:	ff 92       	push	r15
    1948:	0f 93       	push	r16
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	2c 01       	movw	r4, r24
    1950:	5b 01       	movw	r10, r22
    1952:	4a 01       	movw	r8, r20
    1954:	39 01       	movw	r6, r18
    1956:	e6 01       	movw	r28, r12
    1958:	65 ea       	ldi	r22, 0xA5	; 165
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    195e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1960:	0e 94 75 2a 	call	0x54ea	; 0x54ea <memset>
    1964:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1966:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1968:	21 e0       	ldi	r18, 0x01	; 1
    196a:	82 1a       	sub	r8, r18
    196c:	91 08       	sbc	r9, r1
    196e:	88 0e       	add	r8, r24
    1970:	99 1e       	adc	r9, r25
    1972:	a1 14       	cp	r10, r1
    1974:	b1 04       	cpc	r11, r1
    1976:	89 f4       	brne	.+34     	; 0x199a <prvInitialiseNewTask+0x6a>
    1978:	15 c0       	rjmp	.+42     	; 0x19a4 <prvInitialiseNewTask+0x74>
    197a:	82 2f       	mov	r24, r18
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	f5 01       	movw	r30, r10
    1980:	e8 0f       	add	r30, r24
    1982:	f9 1f       	adc	r31, r25
    1984:	30 81       	ld	r19, Z
    1986:	de 01       	movw	r26, r28
    1988:	a8 0f       	add	r26, r24
    198a:	b9 1f       	adc	r27, r25
    198c:	5d 96       	adiw	r26, 0x1d	; 29
    198e:	3c 93       	st	X, r19
    1990:	80 81       	ld	r24, Z
    1992:	88 23       	and	r24, r24
    1994:	29 f0       	breq	.+10     	; 0x19a0 <prvInitialiseNewTask+0x70>
    1996:	2f 5f       	subi	r18, 0xFF	; 255
    1998:	01 c0       	rjmp	.+2      	; 0x199c <prvInitialiseNewTask+0x6c>
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	20 31       	cpi	r18, 0x10	; 16
    199e:	68 f3       	brcs	.-38     	; 0x197a <prvInitialiseNewTask+0x4a>
    19a0:	1c a6       	std	Y+44, r1	; 0x2c
    19a2:	01 c0       	rjmp	.+2      	; 0x19a6 <prvInitialiseNewTask+0x76>
    19a4:	1d 8e       	std	Y+29, r1	; 0x1d
    19a6:	0a 30       	cpi	r16, 0x0A	; 10
    19a8:	08 f0       	brcs	.+2      	; 0x19ac <prvInitialiseNewTask+0x7c>
    19aa:	09 e0       	ldi	r16, 0x09	; 9
    19ac:	0a 8f       	std	Y+26, r16	; 0x1a
    19ae:	0d a7       	std	Y+45, r16	; 0x2d
    19b0:	1e a6       	std	Y+46, r1	; 0x2e
    19b2:	ce 01       	movw	r24, r28
    19b4:	02 96       	adiw	r24, 0x02	; 2
    19b6:	00 d8       	rcall	.-4096   	; 0x9b8 <vListInitialiseItem>
    19b8:	ce 01       	movw	r24, r28
    19ba:	0e 96       	adiw	r24, 0x0e	; 14
    19bc:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vListInitialiseItem>
    19c0:	db 87       	std	Y+11, r29	; 0x0b
    19c2:	ca 87       	std	Y+10, r28	; 0x0a
    19c4:	8a e0       	ldi	r24, 0x0A	; 10
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	a0 e0       	ldi	r26, 0x00	; 0
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	80 1b       	sub	r24, r16
    19ce:	91 09       	sbc	r25, r1
    19d0:	a1 09       	sbc	r26, r1
    19d2:	b1 09       	sbc	r27, r1
    19d4:	8e 87       	std	Y+14, r24	; 0x0e
    19d6:	9f 87       	std	Y+15, r25	; 0x0f
    19d8:	a8 8b       	std	Y+16, r26	; 0x10
    19da:	b9 8b       	std	Y+17, r27	; 0x11
    19dc:	df 8b       	std	Y+23, r29	; 0x17
    19de:	ce 8b       	std	Y+22, r28	; 0x16
    19e0:	84 e0       	ldi	r24, 0x04	; 4
    19e2:	fe 01       	movw	r30, r28
    19e4:	bf 96       	adiw	r30, 0x2f	; 47
    19e6:	df 01       	movw	r26, r30
    19e8:	1d 92       	st	X+, r1
    19ea:	8a 95       	dec	r24
    19ec:	e9 f7       	brne	.-6      	; 0x19e8 <prvInitialiseNewTask+0xb8>
    19ee:	1b aa       	std	Y+51, r1	; 0x33
    19f0:	a3 01       	movw	r20, r6
    19f2:	b2 01       	movw	r22, r4
    19f4:	c4 01       	movw	r24, r8
    19f6:	54 d8       	rcall	.-3928   	; 0xaa0 <pxPortInitialiseStack>
    19f8:	99 83       	std	Y+1, r25	; 0x01
    19fa:	88 83       	st	Y, r24
    19fc:	e1 14       	cp	r14, r1
    19fe:	f1 04       	cpc	r15, r1
    1a00:	19 f0       	breq	.+6      	; 0x1a08 <prvInitialiseNewTask+0xd8>
    1a02:	f7 01       	movw	r30, r14
    1a04:	d1 83       	std	Z+1, r29	; 0x01
    1a06:	c0 83       	st	Z, r28
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	0f 91       	pop	r16
    1a0e:	ff 90       	pop	r15
    1a10:	ef 90       	pop	r14
    1a12:	df 90       	pop	r13
    1a14:	cf 90       	pop	r12
    1a16:	bf 90       	pop	r11
    1a18:	af 90       	pop	r10
    1a1a:	9f 90       	pop	r9
    1a1c:	8f 90       	pop	r8
    1a1e:	7f 90       	pop	r7
    1a20:	6f 90       	pop	r6
    1a22:	5f 90       	pop	r5
    1a24:	4f 90       	pop	r4
    1a26:	08 95       	ret

00001a28 <prvInitialiseTaskLists>:
    1a28:	cf 93       	push	r28
    1a2a:	c0 e0       	ldi	r28, 0x00	; 0
    1a2c:	09 c0       	rjmp	.+18     	; 0x1a40 <prvInitialiseTaskLists+0x18>
    1a2e:	2b e0       	ldi	r18, 0x0B	; 11
    1a30:	c2 9f       	mul	r28, r18
    1a32:	c0 01       	movw	r24, r0
    1a34:	11 24       	eor	r1, r1
    1a36:	85 5d       	subi	r24, 0xD5	; 213
    1a38:	99 4e       	sbci	r25, 0xE9	; 233
    1a3a:	0e 94 cb 04 	call	0x996	; 0x996 <vListInitialise>
    1a3e:	cf 5f       	subi	r28, 0xFF	; 255
    1a40:	ca 30       	cpi	r28, 0x0A	; 10
    1a42:	a8 f3       	brcs	.-22     	; 0x1a2e <prvInitialiseTaskLists+0x6>
    1a44:	80 e2       	ldi	r24, 0x20	; 32
    1a46:	96 e1       	ldi	r25, 0x16	; 22
    1a48:	0e 94 cb 04 	call	0x996	; 0x996 <vListInitialise>
    1a4c:	85 e1       	ldi	r24, 0x15	; 21
    1a4e:	96 e1       	ldi	r25, 0x16	; 22
    1a50:	0e 94 cb 04 	call	0x996	; 0x996 <vListInitialise>
    1a54:	86 e0       	ldi	r24, 0x06	; 6
    1a56:	96 e1       	ldi	r25, 0x16	; 22
    1a58:	0e 94 cb 04 	call	0x996	; 0x996 <vListInitialise>
    1a5c:	8b ef       	ldi	r24, 0xFB	; 251
    1a5e:	95 e1       	ldi	r25, 0x15	; 21
    1a60:	0e 94 cb 04 	call	0x996	; 0x996 <vListInitialise>
    1a64:	8f ee       	ldi	r24, 0xEF	; 239
    1a66:	95 e1       	ldi	r25, 0x15	; 21
    1a68:	0e 94 cb 04 	call	0x996	; 0x996 <vListInitialise>
    1a6c:	80 e2       	ldi	r24, 0x20	; 32
    1a6e:	96 e1       	ldi	r25, 0x16	; 22
    1a70:	90 93 14 16 	sts	0x1614, r25	; 0x801614 <pxDelayedTaskList+0x1>
    1a74:	80 93 13 16 	sts	0x1613, r24	; 0x801613 <pxDelayedTaskList>
    1a78:	85 e1       	ldi	r24, 0x15	; 21
    1a7a:	96 e1       	ldi	r25, 0x16	; 22
    1a7c:	90 93 12 16 	sts	0x1612, r25	; 0x801612 <pxOverflowDelayedTaskList+0x1>
    1a80:	80 93 11 16 	sts	0x1611, r24	; 0x801611 <pxOverflowDelayedTaskList>
    1a84:	cf 91       	pop	r28
    1a86:	08 95       	ret

00001a88 <prvAddNewTaskToReadyList>:
    1a88:	cf 93       	push	r28
    1a8a:	df 93       	push	r29
    1a8c:	ec 01       	movw	r28, r24
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	0f 92       	push	r0
    1a94:	80 91 ee 15 	lds	r24, 0x15EE	; 0x8015ee <uxCurrentNumberOfTasks>
    1a98:	8f 5f       	subi	r24, 0xFF	; 255
    1a9a:	80 93 ee 15 	sts	0x15EE, r24	; 0x8015ee <uxCurrentNumberOfTasks>
    1a9e:	80 91 99 16 	lds	r24, 0x1699	; 0x801699 <pxCurrentTCB>
    1aa2:	90 91 9a 16 	lds	r25, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    1aa6:	89 2b       	or	r24, r25
    1aa8:	51 f4       	brne	.+20     	; 0x1abe <prvAddNewTaskToReadyList+0x36>
    1aaa:	d0 93 9a 16 	sts	0x169A, r29	; 0x80169a <pxCurrentTCB+0x1>
    1aae:	c0 93 99 16 	sts	0x1699, r28	; 0x801699 <pxCurrentTCB>
    1ab2:	80 91 ee 15 	lds	r24, 0x15EE	; 0x8015ee <uxCurrentNumberOfTasks>
    1ab6:	81 30       	cpi	r24, 0x01	; 1
    1ab8:	91 f4       	brne	.+36     	; 0x1ade <prvAddNewTaskToReadyList+0x56>
    1aba:	b6 df       	rcall	.-148    	; 0x1a28 <prvInitialiseTaskLists>
    1abc:	10 c0       	rjmp	.+32     	; 0x1ade <prvAddNewTaskToReadyList+0x56>
    1abe:	80 91 e8 15 	lds	r24, 0x15E8	; 0x8015e8 <xSchedulerRunning>
    1ac2:	81 11       	cpse	r24, r1
    1ac4:	0c c0       	rjmp	.+24     	; 0x1ade <prvAddNewTaskToReadyList+0x56>
    1ac6:	e0 91 99 16 	lds	r30, 0x1699	; 0x801699 <pxCurrentTCB>
    1aca:	f0 91 9a 16 	lds	r31, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    1ace:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ad0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ad2:	89 17       	cp	r24, r25
    1ad4:	20 f0       	brcs	.+8      	; 0x1ade <prvAddNewTaskToReadyList+0x56>
    1ad6:	d0 93 9a 16 	sts	0x169A, r29	; 0x80169a <pxCurrentTCB+0x1>
    1ada:	c0 93 99 16 	sts	0x1699, r28	; 0x801699 <pxCurrentTCB>
    1ade:	80 91 e1 15 	lds	r24, 0x15E1	; 0x8015e1 <uxTaskNumber>
    1ae2:	8f 5f       	subi	r24, 0xFF	; 255
    1ae4:	80 93 e1 15 	sts	0x15E1, r24	; 0x8015e1 <uxTaskNumber>
    1ae8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1aea:	80 91 e9 15 	lds	r24, 0x15E9	; 0x8015e9 <uxTopReadyPriority>
    1aee:	8e 17       	cp	r24, r30
    1af0:	10 f4       	brcc	.+4      	; 0x1af6 <prvAddNewTaskToReadyList+0x6e>
    1af2:	e0 93 e9 15 	sts	0x15E9, r30	; 0x8015e9 <uxTopReadyPriority>
    1af6:	8b e0       	ldi	r24, 0x0B	; 11
    1af8:	8e 9f       	mul	r24, r30
    1afa:	f0 01       	movw	r30, r0
    1afc:	11 24       	eor	r1, r1
    1afe:	e5 5d       	subi	r30, 0xD5	; 213
    1b00:	f9 4e       	sbci	r31, 0xE9	; 233
    1b02:	01 80       	ldd	r0, Z+1	; 0x01
    1b04:	f2 81       	ldd	r31, Z+2	; 0x02
    1b06:	e0 2d       	mov	r30, r0
    1b08:	ff 83       	std	Y+7, r31	; 0x07
    1b0a:	ee 83       	std	Y+6, r30	; 0x06
    1b0c:	26 81       	ldd	r18, Z+6	; 0x06
    1b0e:	37 81       	ldd	r19, Z+7	; 0x07
    1b10:	39 87       	std	Y+9, r19	; 0x09
    1b12:	28 87       	std	Y+8, r18	; 0x08
    1b14:	a6 81       	ldd	r26, Z+6	; 0x06
    1b16:	b7 81       	ldd	r27, Z+7	; 0x07
    1b18:	9e 01       	movw	r18, r28
    1b1a:	2e 5f       	subi	r18, 0xFE	; 254
    1b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1e:	15 96       	adiw	r26, 0x05	; 5
    1b20:	3c 93       	st	X, r19
    1b22:	2e 93       	st	-X, r18
    1b24:	14 97       	sbiw	r26, 0x04	; 4
    1b26:	37 83       	std	Z+7, r19	; 0x07
    1b28:	26 83       	std	Z+6, r18	; 0x06
    1b2a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1b2c:	8e 9f       	mul	r24, r30
    1b2e:	f0 01       	movw	r30, r0
    1b30:	11 24       	eor	r1, r1
    1b32:	e5 5d       	subi	r30, 0xD5	; 213
    1b34:	f9 4e       	sbci	r31, 0xE9	; 233
    1b36:	fd 87       	std	Y+13, r31	; 0x0d
    1b38:	ec 87       	std	Y+12, r30	; 0x0c
    1b3a:	80 81       	ld	r24, Z
    1b3c:	8f 5f       	subi	r24, 0xFF	; 255
    1b3e:	80 83       	st	Z, r24
    1b40:	0f 90       	pop	r0
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	80 91 e8 15 	lds	r24, 0x15E8	; 0x8015e8 <xSchedulerRunning>
    1b48:	88 23       	and	r24, r24
    1b4a:	51 f0       	breq	.+20     	; 0x1b60 <prvAddNewTaskToReadyList+0xd8>
    1b4c:	e0 91 99 16 	lds	r30, 0x1699	; 0x801699 <pxCurrentTCB>
    1b50:	f0 91 9a 16 	lds	r31, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    1b54:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b56:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b58:	98 17       	cp	r25, r24
    1b5a:	10 f4       	brcc	.+4      	; 0x1b60 <prvAddNewTaskToReadyList+0xd8>
    1b5c:	0e 94 99 05 	call	0xb32	; 0xb32 <vPortYield>
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	08 95       	ret

00001b66 <prvCheckTasksWaitingTermination>:
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	1b c0       	rjmp	.+54     	; 0x1ba2 <prvCheckTasksWaitingTermination+0x3c>
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	0f 92       	push	r0
    1b72:	e0 91 02 16 	lds	r30, 0x1602	; 0x801602 <xTasksWaitingTermination+0x7>
    1b76:	f0 91 03 16 	lds	r31, 0x1603	; 0x801603 <xTasksWaitingTermination+0x8>
    1b7a:	c0 85       	ldd	r28, Z+8	; 0x08
    1b7c:	d1 85       	ldd	r29, Z+9	; 0x09
    1b7e:	ce 01       	movw	r24, r28
    1b80:	02 96       	adiw	r24, 0x02	; 2
    1b82:	0e 94 1d 05 	call	0xa3a	; 0xa3a <uxListRemove>
    1b86:	80 91 ee 15 	lds	r24, 0x15EE	; 0x8015ee <uxCurrentNumberOfTasks>
    1b8a:	81 50       	subi	r24, 0x01	; 1
    1b8c:	80 93 ee 15 	sts	0x15EE, r24	; 0x8015ee <uxCurrentNumberOfTasks>
    1b90:	80 91 fa 15 	lds	r24, 0x15FA	; 0x8015fa <uxDeletedTasksWaitingCleanUp>
    1b94:	81 50       	subi	r24, 0x01	; 1
    1b96:	80 93 fa 15 	sts	0x15FA, r24	; 0x8015fa <uxDeletedTasksWaitingCleanUp>
    1b9a:	0f 90       	pop	r0
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	ba de       	rcall	.-652    	; 0x1916 <prvDeleteTCB>
    1ba2:	80 91 fa 15 	lds	r24, 0x15FA	; 0x8015fa <uxDeletedTasksWaitingCleanUp>
    1ba6:	81 11       	cpse	r24, r1
    1ba8:	e1 cf       	rjmp	.-62     	; 0x1b6c <prvCheckTasksWaitingTermination+0x6>
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	08 95       	ret

00001bb0 <prvAddCurrentTaskToDelayedList>:
    1bb0:	8f 92       	push	r8
    1bb2:	9f 92       	push	r9
    1bb4:	af 92       	push	r10
    1bb6:	bf 92       	push	r11
    1bb8:	cf 92       	push	r12
    1bba:	df 92       	push	r13
    1bbc:	ef 92       	push	r14
    1bbe:	ff 92       	push	r15
    1bc0:	cf 93       	push	r28
    1bc2:	df 93       	push	r29
    1bc4:	6b 01       	movw	r12, r22
    1bc6:	7c 01       	movw	r14, r24
    1bc8:	c4 2f       	mov	r28, r20
    1bca:	80 90 ea 15 	lds	r8, 0x15EA	; 0x8015ea <xTickCount>
    1bce:	90 90 eb 15 	lds	r9, 0x15EB	; 0x8015eb <xTickCount+0x1>
    1bd2:	a0 90 ec 15 	lds	r10, 0x15EC	; 0x8015ec <xTickCount+0x2>
    1bd6:	b0 90 ed 15 	lds	r11, 0x15ED	; 0x8015ed <xTickCount+0x3>
    1bda:	80 91 99 16 	lds	r24, 0x1699	; 0x801699 <pxCurrentTCB>
    1bde:	90 91 9a 16 	lds	r25, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    1be2:	02 96       	adiw	r24, 0x02	; 2
    1be4:	0e 94 1d 05 	call	0xa3a	; 0xa3a <uxListRemove>
    1be8:	8f ef       	ldi	r24, 0xFF	; 255
    1bea:	c8 16       	cp	r12, r24
    1bec:	d8 06       	cpc	r13, r24
    1bee:	e8 06       	cpc	r14, r24
    1bf0:	f8 06       	cpc	r15, r24
    1bf2:	b1 f5       	brne	.+108    	; 0x1c60 <prvAddCurrentTaskToDelayedList+0xb0>
    1bf4:	cc 23       	and	r28, r28
    1bf6:	a1 f1       	breq	.+104    	; 0x1c60 <prvAddCurrentTaskToDelayedList+0xb0>
    1bf8:	ef ee       	ldi	r30, 0xEF	; 239
    1bfa:	f5 e1       	ldi	r31, 0x15	; 21
    1bfc:	a1 81       	ldd	r26, Z+1	; 0x01
    1bfe:	b2 81       	ldd	r27, Z+2	; 0x02
    1c00:	c0 91 99 16 	lds	r28, 0x1699	; 0x801699 <pxCurrentTCB>
    1c04:	d0 91 9a 16 	lds	r29, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    1c08:	bf 83       	std	Y+7, r27	; 0x07
    1c0a:	ae 83       	std	Y+6, r26	; 0x06
    1c0c:	c0 91 99 16 	lds	r28, 0x1699	; 0x801699 <pxCurrentTCB>
    1c10:	d0 91 9a 16 	lds	r29, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    1c14:	16 96       	adiw	r26, 0x06	; 6
    1c16:	8d 91       	ld	r24, X+
    1c18:	9c 91       	ld	r25, X
    1c1a:	17 97       	sbiw	r26, 0x07	; 7
    1c1c:	99 87       	std	Y+9, r25	; 0x09
    1c1e:	88 87       	std	Y+8, r24	; 0x08
    1c20:	16 96       	adiw	r26, 0x06	; 6
    1c22:	cd 91       	ld	r28, X+
    1c24:	dc 91       	ld	r29, X
    1c26:	17 97       	sbiw	r26, 0x07	; 7
    1c28:	80 91 99 16 	lds	r24, 0x1699	; 0x801699 <pxCurrentTCB>
    1c2c:	90 91 9a 16 	lds	r25, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    1c30:	02 96       	adiw	r24, 0x02	; 2
    1c32:	9d 83       	std	Y+5, r25	; 0x05
    1c34:	8c 83       	std	Y+4, r24	; 0x04
    1c36:	80 91 99 16 	lds	r24, 0x1699	; 0x801699 <pxCurrentTCB>
    1c3a:	90 91 9a 16 	lds	r25, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    1c3e:	02 96       	adiw	r24, 0x02	; 2
    1c40:	17 96       	adiw	r26, 0x07	; 7
    1c42:	9c 93       	st	X, r25
    1c44:	8e 93       	st	-X, r24
    1c46:	16 97       	sbiw	r26, 0x06	; 6
    1c48:	a0 91 99 16 	lds	r26, 0x1699	; 0x801699 <pxCurrentTCB>
    1c4c:	b0 91 9a 16 	lds	r27, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    1c50:	1d 96       	adiw	r26, 0x0d	; 13
    1c52:	fc 93       	st	X, r31
    1c54:	ee 93       	st	-X, r30
    1c56:	1c 97       	sbiw	r26, 0x0c	; 12
    1c58:	80 81       	ld	r24, Z
    1c5a:	8f 5f       	subi	r24, 0xFF	; 255
    1c5c:	80 83       	st	Z, r24
    1c5e:	3f c0       	rjmp	.+126    	; 0x1cde <prvAddCurrentTaskToDelayedList+0x12e>
    1c60:	c8 0c       	add	r12, r8
    1c62:	d9 1c       	adc	r13, r9
    1c64:	ea 1c       	adc	r14, r10
    1c66:	fb 1c       	adc	r15, r11
    1c68:	e0 91 99 16 	lds	r30, 0x1699	; 0x801699 <pxCurrentTCB>
    1c6c:	f0 91 9a 16 	lds	r31, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    1c70:	c2 82       	std	Z+2, r12	; 0x02
    1c72:	d3 82       	std	Z+3, r13	; 0x03
    1c74:	e4 82       	std	Z+4, r14	; 0x04
    1c76:	f5 82       	std	Z+5, r15	; 0x05
    1c78:	c8 14       	cp	r12, r8
    1c7a:	d9 04       	cpc	r13, r9
    1c7c:	ea 04       	cpc	r14, r10
    1c7e:	fb 04       	cpc	r15, r11
    1c80:	68 f4       	brcc	.+26     	; 0x1c9c <prvAddCurrentTaskToDelayedList+0xec>
    1c82:	60 91 99 16 	lds	r22, 0x1699	; 0x801699 <pxCurrentTCB>
    1c86:	70 91 9a 16 	lds	r23, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    1c8a:	80 91 11 16 	lds	r24, 0x1611	; 0x801611 <pxOverflowDelayedTaskList>
    1c8e:	90 91 12 16 	lds	r25, 0x1612	; 0x801612 <pxOverflowDelayedTaskList+0x1>
    1c92:	6e 5f       	subi	r22, 0xFE	; 254
    1c94:	7f 4f       	sbci	r23, 0xFF	; 255
    1c96:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <vListInsert>
    1c9a:	21 c0       	rjmp	.+66     	; 0x1cde <prvAddCurrentTaskToDelayedList+0x12e>
    1c9c:	60 91 99 16 	lds	r22, 0x1699	; 0x801699 <pxCurrentTCB>
    1ca0:	70 91 9a 16 	lds	r23, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    1ca4:	80 91 13 16 	lds	r24, 0x1613	; 0x801613 <pxDelayedTaskList>
    1ca8:	90 91 14 16 	lds	r25, 0x1614	; 0x801614 <pxDelayedTaskList+0x1>
    1cac:	6e 5f       	subi	r22, 0xFE	; 254
    1cae:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb0:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <vListInsert>
    1cb4:	80 91 dd 15 	lds	r24, 0x15DD	; 0x8015dd <xNextTaskUnblockTime>
    1cb8:	90 91 de 15 	lds	r25, 0x15DE	; 0x8015de <xNextTaskUnblockTime+0x1>
    1cbc:	a0 91 df 15 	lds	r26, 0x15DF	; 0x8015df <xNextTaskUnblockTime+0x2>
    1cc0:	b0 91 e0 15 	lds	r27, 0x15E0	; 0x8015e0 <xNextTaskUnblockTime+0x3>
    1cc4:	c8 16       	cp	r12, r24
    1cc6:	d9 06       	cpc	r13, r25
    1cc8:	ea 06       	cpc	r14, r26
    1cca:	fb 06       	cpc	r15, r27
    1ccc:	40 f4       	brcc	.+16     	; 0x1cde <prvAddCurrentTaskToDelayedList+0x12e>
    1cce:	c0 92 dd 15 	sts	0x15DD, r12	; 0x8015dd <xNextTaskUnblockTime>
    1cd2:	d0 92 de 15 	sts	0x15DE, r13	; 0x8015de <xNextTaskUnblockTime+0x1>
    1cd6:	e0 92 df 15 	sts	0x15DF, r14	; 0x8015df <xNextTaskUnblockTime+0x2>
    1cda:	f0 92 e0 15 	sts	0x15E0, r15	; 0x8015e0 <xNextTaskUnblockTime+0x3>
    1cde:	df 91       	pop	r29
    1ce0:	cf 91       	pop	r28
    1ce2:	ff 90       	pop	r15
    1ce4:	ef 90       	pop	r14
    1ce6:	df 90       	pop	r13
    1ce8:	cf 90       	pop	r12
    1cea:	bf 90       	pop	r11
    1cec:	af 90       	pop	r10
    1cee:	9f 90       	pop	r9
    1cf0:	8f 90       	pop	r8
    1cf2:	08 95       	ret

00001cf4 <xTaskCreate>:
    1cf4:	2f 92       	push	r2
    1cf6:	3f 92       	push	r3
    1cf8:	4f 92       	push	r4
    1cfa:	5f 92       	push	r5
    1cfc:	6f 92       	push	r6
    1cfe:	7f 92       	push	r7
    1d00:	8f 92       	push	r8
    1d02:	9f 92       	push	r9
    1d04:	af 92       	push	r10
    1d06:	bf 92       	push	r11
    1d08:	cf 92       	push	r12
    1d0a:	df 92       	push	r13
    1d0c:	ef 92       	push	r14
    1d0e:	ff 92       	push	r15
    1d10:	0f 93       	push	r16
    1d12:	cf 93       	push	r28
    1d14:	df 93       	push	r29
    1d16:	3c 01       	movw	r6, r24
    1d18:	1b 01       	movw	r2, r22
    1d1a:	4a 01       	movw	r8, r20
    1d1c:	29 01       	movw	r4, r18
    1d1e:	ca 01       	movw	r24, r20
    1d20:	0e 94 e5 03 	call	0x7ca	; 0x7ca <pvPortMalloc>
    1d24:	6c 01       	movw	r12, r24
    1d26:	89 2b       	or	r24, r25
    1d28:	71 f0       	breq	.+28     	; 0x1d46 <xTaskCreate+0x52>
    1d2a:	84 e3       	ldi	r24, 0x34	; 52
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <pvPortMalloc>
    1d32:	ec 01       	movw	r28, r24
    1d34:	89 2b       	or	r24, r25
    1d36:	19 f0       	breq	.+6      	; 0x1d3e <xTaskCreate+0x4a>
    1d38:	dc 8e       	std	Y+28, r13	; 0x1c
    1d3a:	cb 8e       	std	Y+27, r12	; 0x1b
    1d3c:	06 c0       	rjmp	.+12     	; 0x1d4a <xTaskCreate+0x56>
    1d3e:	c6 01       	movw	r24, r12
    1d40:	0e 94 8e 04 	call	0x91c	; 0x91c <vPortFree>
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <xTaskCreate+0x56>
    1d46:	c0 e0       	ldi	r28, 0x00	; 0
    1d48:	d0 e0       	ldi	r29, 0x00	; 0
    1d4a:	20 97       	sbiw	r28, 0x00	; 0
    1d4c:	61 f0       	breq	.+24     	; 0x1d66 <xTaskCreate+0x72>
    1d4e:	a1 2c       	mov	r10, r1
    1d50:	b1 2c       	mov	r11, r1
    1d52:	6e 01       	movw	r12, r28
    1d54:	92 01       	movw	r18, r4
    1d56:	a4 01       	movw	r20, r8
    1d58:	b1 01       	movw	r22, r2
    1d5a:	c3 01       	movw	r24, r6
    1d5c:	e9 dd       	rcall	.-1070   	; 0x1930 <prvInitialiseNewTask>
    1d5e:	ce 01       	movw	r24, r28
    1d60:	93 de       	rcall	.-730    	; 0x1a88 <prvAddNewTaskToReadyList>
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	01 c0       	rjmp	.+2      	; 0x1d68 <xTaskCreate+0x74>
    1d66:	8f ef       	ldi	r24, 0xFF	; 255
    1d68:	df 91       	pop	r29
    1d6a:	cf 91       	pop	r28
    1d6c:	0f 91       	pop	r16
    1d6e:	ff 90       	pop	r15
    1d70:	ef 90       	pop	r14
    1d72:	df 90       	pop	r13
    1d74:	cf 90       	pop	r12
    1d76:	bf 90       	pop	r11
    1d78:	af 90       	pop	r10
    1d7a:	9f 90       	pop	r9
    1d7c:	8f 90       	pop	r8
    1d7e:	7f 90       	pop	r7
    1d80:	6f 90       	pop	r6
    1d82:	5f 90       	pop	r5
    1d84:	4f 90       	pop	r4
    1d86:	3f 90       	pop	r3
    1d88:	2f 90       	pop	r2
    1d8a:	08 95       	ret

00001d8c <vTaskStartScheduler>:
    1d8c:	ef 92       	push	r14
    1d8e:	ff 92       	push	r15
    1d90:	0f 93       	push	r16
    1d92:	0f 2e       	mov	r0, r31
    1d94:	fb ed       	ldi	r31, 0xDB	; 219
    1d96:	ef 2e       	mov	r14, r31
    1d98:	f5 e1       	ldi	r31, 0x15	; 21
    1d9a:	ff 2e       	mov	r15, r31
    1d9c:	f0 2d       	mov	r31, r0
    1d9e:	00 e0       	ldi	r16, 0x00	; 0
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 ec       	ldi	r20, 0xC0	; 192
    1da6:	50 e0       	ldi	r21, 0x00	; 0
    1da8:	67 e2       	ldi	r22, 0x27	; 39
    1daa:	75 e0       	ldi	r23, 0x05	; 5
    1dac:	8d ec       	ldi	r24, 0xCD	; 205
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	a1 df       	rcall	.-190    	; 0x1cf4 <xTaskCreate>
    1db2:	81 30       	cpi	r24, 0x01	; 1
    1db4:	11 f4       	brne	.+4      	; 0x1dba <vTaskStartScheduler+0x2e>
    1db6:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <xTimerCreateTimerTask>
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	c9 f4       	brne	.+50     	; 0x1df0 <vTaskStartScheduler+0x64>
    1dbe:	f8 94       	cli
    1dc0:	8f ef       	ldi	r24, 0xFF	; 255
    1dc2:	9f ef       	ldi	r25, 0xFF	; 255
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	80 93 dd 15 	sts	0x15DD, r24	; 0x8015dd <xNextTaskUnblockTime>
    1dca:	90 93 de 15 	sts	0x15DE, r25	; 0x8015de <xNextTaskUnblockTime+0x1>
    1dce:	a0 93 df 15 	sts	0x15DF, r26	; 0x8015df <xNextTaskUnblockTime+0x2>
    1dd2:	b0 93 e0 15 	sts	0x15E0, r27	; 0x8015e0 <xNextTaskUnblockTime+0x3>
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	80 93 e8 15 	sts	0x15E8, r24	; 0x8015e8 <xSchedulerRunning>
    1ddc:	10 92 ea 15 	sts	0x15EA, r1	; 0x8015ea <xTickCount>
    1de0:	10 92 eb 15 	sts	0x15EB, r1	; 0x8015eb <xTickCount+0x1>
    1de4:	10 92 ec 15 	sts	0x15EC, r1	; 0x8015ec <xTickCount+0x2>
    1de8:	10 92 ed 15 	sts	0x15ED, r1	; 0x8015ed <xTickCount+0x3>
    1dec:	0e 94 67 05 	call	0xace	; 0xace <xPortStartScheduler>
    1df0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1df4:	0f 91       	pop	r16
    1df6:	ff 90       	pop	r15
    1df8:	ef 90       	pop	r14
    1dfa:	08 95       	ret

00001dfc <vTaskSuspendAll>:
    1dfc:	80 91 da 15 	lds	r24, 0x15DA	; 0x8015da <uxSchedulerSuspended>
    1e00:	8f 5f       	subi	r24, 0xFF	; 255
    1e02:	80 93 da 15 	sts	0x15DA, r24	; 0x8015da <uxSchedulerSuspended>
    1e06:	08 95       	ret

00001e08 <xTaskGetTickCount>:
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	f8 94       	cli
    1e0c:	0f 92       	push	r0
    1e0e:	60 91 ea 15 	lds	r22, 0x15EA	; 0x8015ea <xTickCount>
    1e12:	70 91 eb 15 	lds	r23, 0x15EB	; 0x8015eb <xTickCount+0x1>
    1e16:	80 91 ec 15 	lds	r24, 0x15EC	; 0x8015ec <xTickCount+0x2>
    1e1a:	90 91 ed 15 	lds	r25, 0x15ED	; 0x8015ed <xTickCount+0x3>
    1e1e:	0f 90       	pop	r0
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	08 95       	ret

00001e24 <xTaskIncrementTick>:
    1e24:	cf 92       	push	r12
    1e26:	df 92       	push	r13
    1e28:	ef 92       	push	r14
    1e2a:	ff 92       	push	r15
    1e2c:	cf 93       	push	r28
    1e2e:	df 93       	push	r29
    1e30:	80 91 da 15 	lds	r24, 0x15DA	; 0x8015da <uxSchedulerSuspended>
    1e34:	81 11       	cpse	r24, r1
    1e36:	05 c1       	rjmp	.+522    	; 0x2042 <__DATA_REGION_LENGTH__+0x42>
    1e38:	c0 90 ea 15 	lds	r12, 0x15EA	; 0x8015ea <xTickCount>
    1e3c:	d0 90 eb 15 	lds	r13, 0x15EB	; 0x8015eb <xTickCount+0x1>
    1e40:	e0 90 ec 15 	lds	r14, 0x15EC	; 0x8015ec <xTickCount+0x2>
    1e44:	f0 90 ed 15 	lds	r15, 0x15ED	; 0x8015ed <xTickCount+0x3>
    1e48:	8f ef       	ldi	r24, 0xFF	; 255
    1e4a:	c8 1a       	sub	r12, r24
    1e4c:	d8 0a       	sbc	r13, r24
    1e4e:	e8 0a       	sbc	r14, r24
    1e50:	f8 0a       	sbc	r15, r24
    1e52:	c0 92 ea 15 	sts	0x15EA, r12	; 0x8015ea <xTickCount>
    1e56:	d0 92 eb 15 	sts	0x15EB, r13	; 0x8015eb <xTickCount+0x1>
    1e5a:	e0 92 ec 15 	sts	0x15EC, r14	; 0x8015ec <xTickCount+0x2>
    1e5e:	f0 92 ed 15 	sts	0x15ED, r15	; 0x8015ed <xTickCount+0x3>
    1e62:	c1 14       	cp	r12, r1
    1e64:	d1 04       	cpc	r13, r1
    1e66:	e1 04       	cpc	r14, r1
    1e68:	f1 04       	cpc	r15, r1
    1e6a:	b1 f4       	brne	.+44     	; 0x1e98 <xTaskIncrementTick+0x74>
    1e6c:	80 91 13 16 	lds	r24, 0x1613	; 0x801613 <pxDelayedTaskList>
    1e70:	90 91 14 16 	lds	r25, 0x1614	; 0x801614 <pxDelayedTaskList+0x1>
    1e74:	20 91 11 16 	lds	r18, 0x1611	; 0x801611 <pxOverflowDelayedTaskList>
    1e78:	30 91 12 16 	lds	r19, 0x1612	; 0x801612 <pxOverflowDelayedTaskList+0x1>
    1e7c:	30 93 14 16 	sts	0x1614, r19	; 0x801614 <pxDelayedTaskList+0x1>
    1e80:	20 93 13 16 	sts	0x1613, r18	; 0x801613 <pxDelayedTaskList>
    1e84:	90 93 12 16 	sts	0x1612, r25	; 0x801612 <pxOverflowDelayedTaskList+0x1>
    1e88:	80 93 11 16 	sts	0x1611, r24	; 0x801611 <pxOverflowDelayedTaskList>
    1e8c:	80 91 e2 15 	lds	r24, 0x15E2	; 0x8015e2 <xNumOfOverflows>
    1e90:	8f 5f       	subi	r24, 0xFF	; 255
    1e92:	80 93 e2 15 	sts	0x15E2, r24	; 0x8015e2 <xNumOfOverflows>
    1e96:	18 dd       	rcall	.-1488   	; 0x18c8 <prvResetNextTaskUnblockTime>
    1e98:	80 91 dd 15 	lds	r24, 0x15DD	; 0x8015dd <xNextTaskUnblockTime>
    1e9c:	90 91 de 15 	lds	r25, 0x15DE	; 0x8015de <xNextTaskUnblockTime+0x1>
    1ea0:	a0 91 df 15 	lds	r26, 0x15DF	; 0x8015df <xNextTaskUnblockTime+0x2>
    1ea4:	b0 91 e0 15 	lds	r27, 0x15E0	; 0x8015e0 <xNextTaskUnblockTime+0x3>
    1ea8:	c8 16       	cp	r12, r24
    1eaa:	d9 06       	cpc	r13, r25
    1eac:	ea 06       	cpc	r14, r26
    1eae:	fb 06       	cpc	r15, r27
    1eb0:	20 f4       	brcc	.+8      	; 0x1eba <xTaskIncrementTick+0x96>
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	b2 c0       	rjmp	.+356    	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	01 c0       	rjmp	.+2      	; 0x1ebc <xTaskIncrementTick+0x98>
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	e0 91 13 16 	lds	r30, 0x1613	; 0x801613 <pxDelayedTaskList>
    1ec0:	f0 91 14 16 	lds	r31, 0x1614	; 0x801614 <pxDelayedTaskList+0x1>
    1ec4:	90 81       	ld	r25, Z
    1ec6:	91 11       	cpse	r25, r1
    1ec8:	0c c0       	rjmp	.+24     	; 0x1ee2 <xTaskIncrementTick+0xbe>
    1eca:	4f ef       	ldi	r20, 0xFF	; 255
    1ecc:	5f ef       	ldi	r21, 0xFF	; 255
    1ece:	ba 01       	movw	r22, r20
    1ed0:	40 93 dd 15 	sts	0x15DD, r20	; 0x8015dd <xNextTaskUnblockTime>
    1ed4:	50 93 de 15 	sts	0x15DE, r21	; 0x8015de <xNextTaskUnblockTime+0x1>
    1ed8:	60 93 df 15 	sts	0x15DF, r22	; 0x8015df <xNextTaskUnblockTime+0x2>
    1edc:	70 93 e0 15 	sts	0x15E0, r23	; 0x8015e0 <xNextTaskUnblockTime+0x3>
    1ee0:	9c c0       	rjmp	.+312    	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    1ee2:	e0 91 13 16 	lds	r30, 0x1613	; 0x801613 <pxDelayedTaskList>
    1ee6:	f0 91 14 16 	lds	r31, 0x1614	; 0x801614 <pxDelayedTaskList+0x1>
    1eea:	07 80       	ldd	r0, Z+7	; 0x07
    1eec:	f0 85       	ldd	r31, Z+8	; 0x08
    1eee:	e0 2d       	mov	r30, r0
    1ef0:	00 84       	ldd	r0, Z+8	; 0x08
    1ef2:	f1 85       	ldd	r31, Z+9	; 0x09
    1ef4:	e0 2d       	mov	r30, r0
    1ef6:	42 81       	ldd	r20, Z+2	; 0x02
    1ef8:	53 81       	ldd	r21, Z+3	; 0x03
    1efa:	64 81       	ldd	r22, Z+4	; 0x04
    1efc:	75 81       	ldd	r23, Z+5	; 0x05
    1efe:	c4 16       	cp	r12, r20
    1f00:	d5 06       	cpc	r13, r21
    1f02:	e6 06       	cpc	r14, r22
    1f04:	f7 06       	cpc	r15, r23
    1f06:	48 f4       	brcc	.+18     	; 0x1f1a <xTaskIncrementTick+0xf6>
    1f08:	40 93 dd 15 	sts	0x15DD, r20	; 0x8015dd <xNextTaskUnblockTime>
    1f0c:	50 93 de 15 	sts	0x15DE, r21	; 0x8015de <xNextTaskUnblockTime+0x1>
    1f10:	60 93 df 15 	sts	0x15DF, r22	; 0x8015df <xNextTaskUnblockTime+0x2>
    1f14:	70 93 e0 15 	sts	0x15E0, r23	; 0x8015e0 <xNextTaskUnblockTime+0x3>
    1f18:	80 c0       	rjmp	.+256    	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    1f1a:	a4 85       	ldd	r26, Z+12	; 0x0c
    1f1c:	b5 85       	ldd	r27, Z+13	; 0x0d
    1f1e:	c6 81       	ldd	r28, Z+6	; 0x06
    1f20:	d7 81       	ldd	r29, Z+7	; 0x07
    1f22:	20 85       	ldd	r18, Z+8	; 0x08
    1f24:	31 85       	ldd	r19, Z+9	; 0x09
    1f26:	3f 83       	std	Y+7, r19	; 0x07
    1f28:	2e 83       	std	Y+6, r18	; 0x06
    1f2a:	c0 85       	ldd	r28, Z+8	; 0x08
    1f2c:	d1 85       	ldd	r29, Z+9	; 0x09
    1f2e:	26 81       	ldd	r18, Z+6	; 0x06
    1f30:	37 81       	ldd	r19, Z+7	; 0x07
    1f32:	3d 83       	std	Y+5, r19	; 0x05
    1f34:	2c 83       	std	Y+4, r18	; 0x04
    1f36:	11 96       	adiw	r26, 0x01	; 1
    1f38:	4d 91       	ld	r20, X+
    1f3a:	5c 91       	ld	r21, X
    1f3c:	12 97       	sbiw	r26, 0x02	; 2
    1f3e:	9f 01       	movw	r18, r30
    1f40:	2e 5f       	subi	r18, 0xFE	; 254
    1f42:	3f 4f       	sbci	r19, 0xFF	; 255
    1f44:	42 17       	cp	r20, r18
    1f46:	53 07       	cpc	r21, r19
    1f48:	31 f4       	brne	.+12     	; 0x1f56 <xTaskIncrementTick+0x132>
    1f4a:	40 85       	ldd	r20, Z+8	; 0x08
    1f4c:	51 85       	ldd	r21, Z+9	; 0x09
    1f4e:	12 96       	adiw	r26, 0x02	; 2
    1f50:	5c 93       	st	X, r21
    1f52:	4e 93       	st	-X, r20
    1f54:	11 97       	sbiw	r26, 0x01	; 1
    1f56:	15 86       	std	Z+13, r1	; 0x0d
    1f58:	14 86       	std	Z+12, r1	; 0x0c
    1f5a:	9c 91       	ld	r25, X
    1f5c:	91 50       	subi	r25, 0x01	; 1
    1f5e:	9c 93       	st	X, r25
    1f60:	a0 8d       	ldd	r26, Z+24	; 0x18
    1f62:	b1 8d       	ldd	r27, Z+25	; 0x19
    1f64:	10 97       	sbiw	r26, 0x00	; 0
    1f66:	09 f1       	breq	.+66     	; 0x1faa <xTaskIncrementTick+0x186>
    1f68:	c2 89       	ldd	r28, Z+18	; 0x12
    1f6a:	d3 89       	ldd	r29, Z+19	; 0x13
    1f6c:	44 89       	ldd	r20, Z+20	; 0x14
    1f6e:	55 89       	ldd	r21, Z+21	; 0x15
    1f70:	5f 83       	std	Y+7, r21	; 0x07
    1f72:	4e 83       	std	Y+6, r20	; 0x06
    1f74:	c4 89       	ldd	r28, Z+20	; 0x14
    1f76:	d5 89       	ldd	r29, Z+21	; 0x15
    1f78:	42 89       	ldd	r20, Z+18	; 0x12
    1f7a:	53 89       	ldd	r21, Z+19	; 0x13
    1f7c:	5d 83       	std	Y+5, r21	; 0x05
    1f7e:	4c 83       	std	Y+4, r20	; 0x04
    1f80:	11 96       	adiw	r26, 0x01	; 1
    1f82:	6d 91       	ld	r22, X+
    1f84:	7c 91       	ld	r23, X
    1f86:	12 97       	sbiw	r26, 0x02	; 2
    1f88:	af 01       	movw	r20, r30
    1f8a:	42 5f       	subi	r20, 0xF2	; 242
    1f8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f8e:	64 17       	cp	r22, r20
    1f90:	75 07       	cpc	r23, r21
    1f92:	31 f4       	brne	.+12     	; 0x1fa0 <xTaskIncrementTick+0x17c>
    1f94:	44 89       	ldd	r20, Z+20	; 0x14
    1f96:	55 89       	ldd	r21, Z+21	; 0x15
    1f98:	12 96       	adiw	r26, 0x02	; 2
    1f9a:	5c 93       	st	X, r21
    1f9c:	4e 93       	st	-X, r20
    1f9e:	11 97       	sbiw	r26, 0x01	; 1
    1fa0:	11 8e       	std	Z+25, r1	; 0x19
    1fa2:	10 8e       	std	Z+24, r1	; 0x18
    1fa4:	9c 91       	ld	r25, X
    1fa6:	91 50       	subi	r25, 0x01	; 1
    1fa8:	9c 93       	st	X, r25
    1faa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1fac:	90 91 e9 15 	lds	r25, 0x15E9	; 0x8015e9 <uxTopReadyPriority>
    1fb0:	9a 17       	cp	r25, r26
    1fb2:	10 f4       	brcc	.+4      	; 0x1fb8 <xTaskIncrementTick+0x194>
    1fb4:	a0 93 e9 15 	sts	0x15E9, r26	; 0x8015e9 <uxTopReadyPriority>
    1fb8:	9b e0       	ldi	r25, 0x0B	; 11
    1fba:	9a 9f       	mul	r25, r26
    1fbc:	d0 01       	movw	r26, r0
    1fbe:	11 24       	eor	r1, r1
    1fc0:	a5 5d       	subi	r26, 0xD5	; 213
    1fc2:	b9 4e       	sbci	r27, 0xE9	; 233
    1fc4:	11 96       	adiw	r26, 0x01	; 1
    1fc6:	0d 90       	ld	r0, X+
    1fc8:	bc 91       	ld	r27, X
    1fca:	a0 2d       	mov	r26, r0
    1fcc:	b7 83       	std	Z+7, r27	; 0x07
    1fce:	a6 83       	std	Z+6, r26	; 0x06
    1fd0:	16 96       	adiw	r26, 0x06	; 6
    1fd2:	4d 91       	ld	r20, X+
    1fd4:	5c 91       	ld	r21, X
    1fd6:	17 97       	sbiw	r26, 0x07	; 7
    1fd8:	51 87       	std	Z+9, r21	; 0x09
    1fda:	40 87       	std	Z+8, r20	; 0x08
    1fdc:	16 96       	adiw	r26, 0x06	; 6
    1fde:	cd 91       	ld	r28, X+
    1fe0:	dc 91       	ld	r29, X
    1fe2:	17 97       	sbiw	r26, 0x07	; 7
    1fe4:	3d 83       	std	Y+5, r19	; 0x05
    1fe6:	2c 83       	std	Y+4, r18	; 0x04
    1fe8:	17 96       	adiw	r26, 0x07	; 7
    1fea:	3c 93       	st	X, r19
    1fec:	2e 93       	st	-X, r18
    1fee:	16 97       	sbiw	r26, 0x06	; 6
    1ff0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ff2:	9a 9f       	mul	r25, r26
    1ff4:	d0 01       	movw	r26, r0
    1ff6:	11 24       	eor	r1, r1
    1ff8:	a5 5d       	subi	r26, 0xD5	; 213
    1ffa:	b9 4e       	sbci	r27, 0xE9	; 233
    1ffc:	b5 87       	std	Z+13, r27	; 0x0d
    1ffe:	a4 87       	std	Z+12, r26	; 0x0c
    2000:	9c 91       	ld	r25, X
    2002:	9f 5f       	subi	r25, 0xFF	; 255
    2004:	9c 93       	st	X, r25
    2006:	22 8d       	ldd	r18, Z+26	; 0x1a
    2008:	e0 91 99 16 	lds	r30, 0x1699	; 0x801699 <pxCurrentTCB>
    200c:	f0 91 9a 16 	lds	r31, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    2010:	92 8d       	ldd	r25, Z+26	; 0x1a
    2012:	29 17       	cp	r18, r25
    2014:	08 f0       	brcs	.+2      	; 0x2018 <__DATA_REGION_LENGTH__+0x18>
    2016:	4f cf       	rjmp	.-354    	; 0x1eb6 <xTaskIncrementTick+0x92>
    2018:	51 cf       	rjmp	.-350    	; 0x1ebc <xTaskIncrementTick+0x98>
    201a:	e0 91 99 16 	lds	r30, 0x1699	; 0x801699 <pxCurrentTCB>
    201e:	f0 91 9a 16 	lds	r31, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    2022:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2024:	9b e0       	ldi	r25, 0x0B	; 11
    2026:	e9 9f       	mul	r30, r25
    2028:	f0 01       	movw	r30, r0
    202a:	11 24       	eor	r1, r1
    202c:	e5 5d       	subi	r30, 0xD5	; 213
    202e:	f9 4e       	sbci	r31, 0xE9	; 233
    2030:	90 81       	ld	r25, Z
    2032:	92 30       	cpi	r25, 0x02	; 2
    2034:	08 f0       	brcs	.+2      	; 0x2038 <__DATA_REGION_LENGTH__+0x38>
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 91 e3 15 	lds	r25, 0x15E3	; 0x8015e3 <xYieldPending>
    203c:	91 11       	cpse	r25, r1
    203e:	16 c0       	rjmp	.+44     	; 0x206c <__DATA_REGION_LENGTH__+0x6c>
    2040:	16 c0       	rjmp	.+44     	; 0x206e <__DATA_REGION_LENGTH__+0x6e>
    2042:	80 91 e4 15 	lds	r24, 0x15E4	; 0x8015e4 <xPendedTicks>
    2046:	90 91 e5 15 	lds	r25, 0x15E5	; 0x8015e5 <xPendedTicks+0x1>
    204a:	a0 91 e6 15 	lds	r26, 0x15E6	; 0x8015e6 <xPendedTicks+0x2>
    204e:	b0 91 e7 15 	lds	r27, 0x15E7	; 0x8015e7 <xPendedTicks+0x3>
    2052:	01 96       	adiw	r24, 0x01	; 1
    2054:	a1 1d       	adc	r26, r1
    2056:	b1 1d       	adc	r27, r1
    2058:	80 93 e4 15 	sts	0x15E4, r24	; 0x8015e4 <xPendedTicks>
    205c:	90 93 e5 15 	sts	0x15E5, r25	; 0x8015e5 <xPendedTicks+0x1>
    2060:	a0 93 e6 15 	sts	0x15E6, r26	; 0x8015e6 <xPendedTicks+0x2>
    2064:	b0 93 e7 15 	sts	0x15E7, r27	; 0x8015e7 <xPendedTicks+0x3>
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	01 c0       	rjmp	.+2      	; 0x206e <__DATA_REGION_LENGTH__+0x6e>
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	df 91       	pop	r29
    2070:	cf 91       	pop	r28
    2072:	ff 90       	pop	r15
    2074:	ef 90       	pop	r14
    2076:	df 90       	pop	r13
    2078:	cf 90       	pop	r12
    207a:	08 95       	ret

0000207c <xTaskResumeAll>:
    207c:	cf 92       	push	r12
    207e:	df 92       	push	r13
    2080:	ef 92       	push	r14
    2082:	ff 92       	push	r15
    2084:	cf 93       	push	r28
    2086:	df 93       	push	r29
    2088:	0f b6       	in	r0, 0x3f	; 63
    208a:	f8 94       	cli
    208c:	0f 92       	push	r0
    208e:	80 91 da 15 	lds	r24, 0x15DA	; 0x8015da <uxSchedulerSuspended>
    2092:	81 50       	subi	r24, 0x01	; 1
    2094:	80 93 da 15 	sts	0x15DA, r24	; 0x8015da <uxSchedulerSuspended>
    2098:	80 91 da 15 	lds	r24, 0x15DA	; 0x8015da <uxSchedulerSuspended>
    209c:	81 11       	cpse	r24, r1
    209e:	be c0       	rjmp	.+380    	; 0x221c <__stack+0x1d>
    20a0:	80 91 ee 15 	lds	r24, 0x15EE	; 0x8015ee <uxCurrentNumberOfTasks>
    20a4:	81 11       	cpse	r24, r1
    20a6:	88 c0       	rjmp	.+272    	; 0x21b8 <xTaskResumeAll+0x13c>
    20a8:	bc c0       	rjmp	.+376    	; 0x2222 <__stack+0x23>
    20aa:	e0 91 0d 16 	lds	r30, 0x160D	; 0x80160d <xPendingReadyList+0x7>
    20ae:	f0 91 0e 16 	lds	r31, 0x160E	; 0x80160e <xPendingReadyList+0x8>
    20b2:	00 84       	ldd	r0, Z+8	; 0x08
    20b4:	f1 85       	ldd	r31, Z+9	; 0x09
    20b6:	e0 2d       	mov	r30, r0
    20b8:	a0 8d       	ldd	r26, Z+24	; 0x18
    20ba:	b1 8d       	ldd	r27, Z+25	; 0x19
    20bc:	c2 89       	ldd	r28, Z+18	; 0x12
    20be:	d3 89       	ldd	r29, Z+19	; 0x13
    20c0:	84 89       	ldd	r24, Z+20	; 0x14
    20c2:	95 89       	ldd	r25, Z+21	; 0x15
    20c4:	9f 83       	std	Y+7, r25	; 0x07
    20c6:	8e 83       	std	Y+6, r24	; 0x06
    20c8:	c4 89       	ldd	r28, Z+20	; 0x14
    20ca:	d5 89       	ldd	r29, Z+21	; 0x15
    20cc:	82 89       	ldd	r24, Z+18	; 0x12
    20ce:	93 89       	ldd	r25, Z+19	; 0x13
    20d0:	9d 83       	std	Y+5, r25	; 0x05
    20d2:	8c 83       	std	Y+4, r24	; 0x04
    20d4:	11 96       	adiw	r26, 0x01	; 1
    20d6:	2d 91       	ld	r18, X+
    20d8:	3c 91       	ld	r19, X
    20da:	12 97       	sbiw	r26, 0x02	; 2
    20dc:	cf 01       	movw	r24, r30
    20de:	0e 96       	adiw	r24, 0x0e	; 14
    20e0:	28 17       	cp	r18, r24
    20e2:	39 07       	cpc	r19, r25
    20e4:	31 f4       	brne	.+12     	; 0x20f2 <xTaskResumeAll+0x76>
    20e6:	84 89       	ldd	r24, Z+20	; 0x14
    20e8:	95 89       	ldd	r25, Z+21	; 0x15
    20ea:	12 96       	adiw	r26, 0x02	; 2
    20ec:	9c 93       	st	X, r25
    20ee:	8e 93       	st	-X, r24
    20f0:	11 97       	sbiw	r26, 0x01	; 1
    20f2:	11 8e       	std	Z+25, r1	; 0x19
    20f4:	10 8e       	std	Z+24, r1	; 0x18
    20f6:	8c 91       	ld	r24, X
    20f8:	81 50       	subi	r24, 0x01	; 1
    20fa:	8c 93       	st	X, r24
    20fc:	a4 85       	ldd	r26, Z+12	; 0x0c
    20fe:	b5 85       	ldd	r27, Z+13	; 0x0d
    2100:	c6 81       	ldd	r28, Z+6	; 0x06
    2102:	d7 81       	ldd	r29, Z+7	; 0x07
    2104:	80 85       	ldd	r24, Z+8	; 0x08
    2106:	91 85       	ldd	r25, Z+9	; 0x09
    2108:	9f 83       	std	Y+7, r25	; 0x07
    210a:	8e 83       	std	Y+6, r24	; 0x06
    210c:	c0 85       	ldd	r28, Z+8	; 0x08
    210e:	d1 85       	ldd	r29, Z+9	; 0x09
    2110:	86 81       	ldd	r24, Z+6	; 0x06
    2112:	97 81       	ldd	r25, Z+7	; 0x07
    2114:	9d 83       	std	Y+5, r25	; 0x05
    2116:	8c 83       	std	Y+4, r24	; 0x04
    2118:	11 96       	adiw	r26, 0x01	; 1
    211a:	8d 91       	ld	r24, X+
    211c:	9c 91       	ld	r25, X
    211e:	12 97       	sbiw	r26, 0x02	; 2
    2120:	9f 01       	movw	r18, r30
    2122:	2e 5f       	subi	r18, 0xFE	; 254
    2124:	3f 4f       	sbci	r19, 0xFF	; 255
    2126:	82 17       	cp	r24, r18
    2128:	93 07       	cpc	r25, r19
    212a:	31 f4       	brne	.+12     	; 0x2138 <xTaskResumeAll+0xbc>
    212c:	80 85       	ldd	r24, Z+8	; 0x08
    212e:	91 85       	ldd	r25, Z+9	; 0x09
    2130:	12 96       	adiw	r26, 0x02	; 2
    2132:	9c 93       	st	X, r25
    2134:	8e 93       	st	-X, r24
    2136:	11 97       	sbiw	r26, 0x01	; 1
    2138:	15 86       	std	Z+13, r1	; 0x0d
    213a:	14 86       	std	Z+12, r1	; 0x0c
    213c:	8c 91       	ld	r24, X
    213e:	81 50       	subi	r24, 0x01	; 1
    2140:	8c 93       	st	X, r24
    2142:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2144:	80 91 e9 15 	lds	r24, 0x15E9	; 0x8015e9 <uxTopReadyPriority>
    2148:	8a 17       	cp	r24, r26
    214a:	10 f4       	brcc	.+4      	; 0x2150 <xTaskResumeAll+0xd4>
    214c:	a0 93 e9 15 	sts	0x15E9, r26	; 0x8015e9 <uxTopReadyPriority>
    2150:	8b e0       	ldi	r24, 0x0B	; 11
    2152:	8a 9f       	mul	r24, r26
    2154:	d0 01       	movw	r26, r0
    2156:	11 24       	eor	r1, r1
    2158:	a5 5d       	subi	r26, 0xD5	; 213
    215a:	b9 4e       	sbci	r27, 0xE9	; 233
    215c:	11 96       	adiw	r26, 0x01	; 1
    215e:	0d 90       	ld	r0, X+
    2160:	bc 91       	ld	r27, X
    2162:	a0 2d       	mov	r26, r0
    2164:	b7 83       	std	Z+7, r27	; 0x07
    2166:	a6 83       	std	Z+6, r26	; 0x06
    2168:	16 96       	adiw	r26, 0x06	; 6
    216a:	4d 91       	ld	r20, X+
    216c:	5c 91       	ld	r21, X
    216e:	17 97       	sbiw	r26, 0x07	; 7
    2170:	51 87       	std	Z+9, r21	; 0x09
    2172:	40 87       	std	Z+8, r20	; 0x08
    2174:	16 96       	adiw	r26, 0x06	; 6
    2176:	cd 91       	ld	r28, X+
    2178:	dc 91       	ld	r29, X
    217a:	17 97       	sbiw	r26, 0x07	; 7
    217c:	3d 83       	std	Y+5, r19	; 0x05
    217e:	2c 83       	std	Y+4, r18	; 0x04
    2180:	17 96       	adiw	r26, 0x07	; 7
    2182:	3c 93       	st	X, r19
    2184:	2e 93       	st	-X, r18
    2186:	16 97       	sbiw	r26, 0x06	; 6
    2188:	a2 8d       	ldd	r26, Z+26	; 0x1a
    218a:	8a 9f       	mul	r24, r26
    218c:	d0 01       	movw	r26, r0
    218e:	11 24       	eor	r1, r1
    2190:	a5 5d       	subi	r26, 0xD5	; 213
    2192:	b9 4e       	sbci	r27, 0xE9	; 233
    2194:	b5 87       	std	Z+13, r27	; 0x0d
    2196:	a4 87       	std	Z+12, r26	; 0x0c
    2198:	8c 91       	ld	r24, X
    219a:	8f 5f       	subi	r24, 0xFF	; 255
    219c:	8c 93       	st	X, r24
    219e:	92 8d       	ldd	r25, Z+26	; 0x1a
    21a0:	a0 91 99 16 	lds	r26, 0x1699	; 0x801699 <pxCurrentTCB>
    21a4:	b0 91 9a 16 	lds	r27, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    21a8:	5a 96       	adiw	r26, 0x1a	; 26
    21aa:	8c 91       	ld	r24, X
    21ac:	98 17       	cp	r25, r24
    21ae:	30 f0       	brcs	.+12     	; 0x21bc <xTaskResumeAll+0x140>
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	80 93 e3 15 	sts	0x15E3, r24	; 0x8015e3 <xYieldPending>
    21b6:	02 c0       	rjmp	.+4      	; 0x21bc <xTaskResumeAll+0x140>
    21b8:	e0 e0       	ldi	r30, 0x00	; 0
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 91 06 16 	lds	r24, 0x1606	; 0x801606 <xPendingReadyList>
    21c0:	81 11       	cpse	r24, r1
    21c2:	73 cf       	rjmp	.-282    	; 0x20aa <xTaskResumeAll+0x2e>
    21c4:	ef 2b       	or	r30, r31
    21c6:	09 f0       	breq	.+2      	; 0x21ca <xTaskResumeAll+0x14e>
    21c8:	7f db       	rcall	.-2306   	; 0x18c8 <prvResetNextTaskUnblockTime>
    21ca:	c0 90 e4 15 	lds	r12, 0x15E4	; 0x8015e4 <xPendedTicks>
    21ce:	d0 90 e5 15 	lds	r13, 0x15E5	; 0x8015e5 <xPendedTicks+0x1>
    21d2:	e0 90 e6 15 	lds	r14, 0x15E6	; 0x8015e6 <xPendedTicks+0x2>
    21d6:	f0 90 e7 15 	lds	r15, 0x15E7	; 0x8015e7 <xPendedTicks+0x3>
    21da:	c1 14       	cp	r12, r1
    21dc:	d1 04       	cpc	r13, r1
    21de:	e1 04       	cpc	r14, r1
    21e0:	f1 04       	cpc	r15, r1
    21e2:	a1 f0       	breq	.+40     	; 0x220c <__stack+0xd>
    21e4:	1f de       	rcall	.-962    	; 0x1e24 <xTaskIncrementTick>
    21e6:	88 23       	and	r24, r24
    21e8:	19 f0       	breq	.+6      	; 0x21f0 <xTaskResumeAll+0x174>
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	80 93 e3 15 	sts	0x15E3, r24	; 0x8015e3 <xYieldPending>
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	c8 1a       	sub	r12, r24
    21f4:	d1 08       	sbc	r13, r1
    21f6:	e1 08       	sbc	r14, r1
    21f8:	f1 08       	sbc	r15, r1
    21fa:	a1 f7       	brne	.-24     	; 0x21e4 <xTaskResumeAll+0x168>
    21fc:	10 92 e4 15 	sts	0x15E4, r1	; 0x8015e4 <xPendedTicks>
    2200:	10 92 e5 15 	sts	0x15E5, r1	; 0x8015e5 <xPendedTicks+0x1>
    2204:	10 92 e6 15 	sts	0x15E6, r1	; 0x8015e6 <xPendedTicks+0x2>
    2208:	10 92 e7 15 	sts	0x15E7, r1	; 0x8015e7 <xPendedTicks+0x3>
    220c:	80 91 e3 15 	lds	r24, 0x15E3	; 0x8015e3 <xYieldPending>
    2210:	88 23       	and	r24, r24
    2212:	31 f0       	breq	.+12     	; 0x2220 <__stack+0x21>
    2214:	0e 94 99 05 	call	0xb32	; 0xb32 <vPortYield>
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	03 c0       	rjmp	.+6      	; 0x2222 <__stack+0x23>
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	01 c0       	rjmp	.+2      	; 0x2222 <__stack+0x23>
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	0f 90       	pop	r0
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	df 91       	pop	r29
    2228:	cf 91       	pop	r28
    222a:	ff 90       	pop	r15
    222c:	ef 90       	pop	r14
    222e:	df 90       	pop	r13
    2230:	cf 90       	pop	r12
    2232:	08 95       	ret

00002234 <xTaskDelayUntil>:
    2234:	8f 92       	push	r8
    2236:	9f 92       	push	r9
    2238:	af 92       	push	r10
    223a:	bf 92       	push	r11
    223c:	cf 92       	push	r12
    223e:	df 92       	push	r13
    2240:	ef 92       	push	r14
    2242:	ff 92       	push	r15
    2244:	1f 93       	push	r17
    2246:	cf 93       	push	r28
    2248:	df 93       	push	r29
    224a:	ec 01       	movw	r28, r24
    224c:	6a 01       	movw	r12, r20
    224e:	7b 01       	movw	r14, r22
    2250:	d5 dd       	rcall	.-1110   	; 0x1dfc <vTaskSuspendAll>
    2252:	80 90 ea 15 	lds	r8, 0x15EA	; 0x8015ea <xTickCount>
    2256:	90 90 eb 15 	lds	r9, 0x15EB	; 0x8015eb <xTickCount+0x1>
    225a:	a0 90 ec 15 	lds	r10, 0x15EC	; 0x8015ec <xTickCount+0x2>
    225e:	b0 90 ed 15 	lds	r11, 0x15ED	; 0x8015ed <xTickCount+0x3>
    2262:	88 81       	ld	r24, Y
    2264:	99 81       	ldd	r25, Y+1	; 0x01
    2266:	aa 81       	ldd	r26, Y+2	; 0x02
    2268:	bb 81       	ldd	r27, Y+3	; 0x03
    226a:	ac 01       	movw	r20, r24
    226c:	bd 01       	movw	r22, r26
    226e:	4c 0d       	add	r20, r12
    2270:	5d 1d       	adc	r21, r13
    2272:	6e 1d       	adc	r22, r14
    2274:	7f 1d       	adc	r23, r15
    2276:	88 16       	cp	r8, r24
    2278:	99 06       	cpc	r9, r25
    227a:	aa 06       	cpc	r10, r26
    227c:	bb 06       	cpc	r11, r27
    227e:	60 f4       	brcc	.+24     	; 0x2298 <xTaskDelayUntil+0x64>
    2280:	48 17       	cp	r20, r24
    2282:	59 07       	cpc	r21, r25
    2284:	6a 07       	cpc	r22, r26
    2286:	7b 07       	cpc	r23, r27
    2288:	98 f4       	brcc	.+38     	; 0x22b0 <xTaskDelayUntil+0x7c>
    228a:	84 16       	cp	r8, r20
    228c:	95 06       	cpc	r9, r21
    228e:	a6 06       	cpc	r10, r22
    2290:	b7 06       	cpc	r11, r23
    2292:	80 f0       	brcs	.+32     	; 0x22b4 <xTaskDelayUntil+0x80>
    2294:	10 e0       	ldi	r17, 0x00	; 0
    2296:	13 c0       	rjmp	.+38     	; 0x22be <xTaskDelayUntil+0x8a>
    2298:	48 17       	cp	r20, r24
    229a:	59 07       	cpc	r21, r25
    229c:	6a 07       	cpc	r22, r26
    229e:	7b 07       	cpc	r23, r27
    22a0:	58 f0       	brcs	.+22     	; 0x22b8 <xTaskDelayUntil+0x84>
    22a2:	84 16       	cp	r8, r20
    22a4:	95 06       	cpc	r9, r21
    22a6:	a6 06       	cpc	r10, r22
    22a8:	b7 06       	cpc	r11, r23
    22aa:	40 f0       	brcs	.+16     	; 0x22bc <xTaskDelayUntil+0x88>
    22ac:	10 e0       	ldi	r17, 0x00	; 0
    22ae:	07 c0       	rjmp	.+14     	; 0x22be <xTaskDelayUntil+0x8a>
    22b0:	10 e0       	ldi	r17, 0x00	; 0
    22b2:	05 c0       	rjmp	.+10     	; 0x22be <xTaskDelayUntil+0x8a>
    22b4:	11 e0       	ldi	r17, 0x01	; 1
    22b6:	03 c0       	rjmp	.+6      	; 0x22be <xTaskDelayUntil+0x8a>
    22b8:	11 e0       	ldi	r17, 0x01	; 1
    22ba:	01 c0       	rjmp	.+2      	; 0x22be <xTaskDelayUntil+0x8a>
    22bc:	11 e0       	ldi	r17, 0x01	; 1
    22be:	48 83       	st	Y, r20
    22c0:	59 83       	std	Y+1, r21	; 0x01
    22c2:	6a 83       	std	Y+2, r22	; 0x02
    22c4:	7b 83       	std	Y+3, r23	; 0x03
    22c6:	11 23       	and	r17, r17
    22c8:	41 f0       	breq	.+16     	; 0x22da <xTaskDelayUntil+0xa6>
    22ca:	cb 01       	movw	r24, r22
    22cc:	ba 01       	movw	r22, r20
    22ce:	68 19       	sub	r22, r8
    22d0:	79 09       	sbc	r23, r9
    22d2:	8a 09       	sbc	r24, r10
    22d4:	9b 09       	sbc	r25, r11
    22d6:	40 e0       	ldi	r20, 0x00	; 0
    22d8:	6b dc       	rcall	.-1834   	; 0x1bb0 <prvAddCurrentTaskToDelayedList>
    22da:	d0 de       	rcall	.-608    	; 0x207c <xTaskResumeAll>
    22dc:	81 11       	cpse	r24, r1
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <xTaskDelayUntil+0xb0>
    22e0:	0e 94 99 05 	call	0xb32	; 0xb32 <vPortYield>
    22e4:	81 2f       	mov	r24, r17
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	1f 91       	pop	r17
    22ec:	ff 90       	pop	r15
    22ee:	ef 90       	pop	r14
    22f0:	df 90       	pop	r13
    22f2:	cf 90       	pop	r12
    22f4:	bf 90       	pop	r11
    22f6:	af 90       	pop	r10
    22f8:	9f 90       	pop	r9
    22fa:	8f 90       	pop	r8
    22fc:	08 95       	ret

000022fe <vTaskDelay>:
    22fe:	cf 92       	push	r12
    2300:	df 92       	push	r13
    2302:	ef 92       	push	r14
    2304:	ff 92       	push	r15
    2306:	6b 01       	movw	r12, r22
    2308:	7c 01       	movw	r14, r24
    230a:	67 2b       	or	r22, r23
    230c:	68 2b       	or	r22, r24
    230e:	69 2b       	or	r22, r25
    2310:	39 f0       	breq	.+14     	; 0x2320 <vTaskDelay+0x22>
    2312:	74 dd       	rcall	.-1304   	; 0x1dfc <vTaskSuspendAll>
    2314:	40 e0       	ldi	r20, 0x00	; 0
    2316:	c7 01       	movw	r24, r14
    2318:	b6 01       	movw	r22, r12
    231a:	4a dc       	rcall	.-1900   	; 0x1bb0 <prvAddCurrentTaskToDelayedList>
    231c:	af de       	rcall	.-674    	; 0x207c <xTaskResumeAll>
    231e:	01 c0       	rjmp	.+2      	; 0x2322 <vTaskDelay+0x24>
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	81 11       	cpse	r24, r1
    2324:	02 c0       	rjmp	.+4      	; 0x232a <vTaskDelay+0x2c>
    2326:	0e 94 99 05 	call	0xb32	; 0xb32 <vPortYield>
    232a:	ff 90       	pop	r15
    232c:	ef 90       	pop	r14
    232e:	df 90       	pop	r13
    2330:	cf 90       	pop	r12
    2332:	08 95       	ret

00002334 <vTaskSwitchContext>:
    2334:	80 91 da 15 	lds	r24, 0x15DA	; 0x8015da <uxSchedulerSuspended>
    2338:	88 23       	and	r24, r24
    233a:	21 f0       	breq	.+8      	; 0x2344 <vTaskSwitchContext+0x10>
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	80 93 e3 15 	sts	0x15E3, r24	; 0x8015e3 <xYieldPending>
    2342:	08 95       	ret
    2344:	10 92 e3 15 	sts	0x15E3, r1	; 0x8015e3 <xYieldPending>
    2348:	e0 91 99 16 	lds	r30, 0x1699	; 0x801699 <pxCurrentTCB>
    234c:	f0 91 9a 16 	lds	r31, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    2350:	20 81       	ld	r18, Z
    2352:	31 81       	ldd	r19, Z+1	; 0x01
    2354:	e0 91 99 16 	lds	r30, 0x1699	; 0x801699 <pxCurrentTCB>
    2358:	f0 91 9a 16 	lds	r31, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    235c:	83 8d       	ldd	r24, Z+27	; 0x1b
    235e:	94 8d       	ldd	r25, Z+28	; 0x1c
    2360:	82 17       	cp	r24, r18
    2362:	93 07       	cpc	r25, r19
    2364:	60 f0       	brcs	.+24     	; 0x237e <vTaskSwitchContext+0x4a>
    2366:	60 91 99 16 	lds	r22, 0x1699	; 0x801699 <pxCurrentTCB>
    236a:	70 91 9a 16 	lds	r23, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    236e:	63 5e       	subi	r22, 0xE3	; 227
    2370:	7f 4f       	sbci	r23, 0xFF	; 255
    2372:	80 91 99 16 	lds	r24, 0x1699	; 0x801699 <pxCurrentTCB>
    2376:	90 91 9a 16 	lds	r25, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    237a:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <vApplicationStackOverflowHook>
    237e:	80 91 e9 15 	lds	r24, 0x15E9	; 0x8015e9 <uxTopReadyPriority>
    2382:	01 c0       	rjmp	.+2      	; 0x2386 <vTaskSwitchContext+0x52>
    2384:	81 50       	subi	r24, 0x01	; 1
    2386:	28 2f       	mov	r18, r24
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	9b e0       	ldi	r25, 0x0B	; 11
    238c:	92 9f       	mul	r25, r18
    238e:	f0 01       	movw	r30, r0
    2390:	93 9f       	mul	r25, r19
    2392:	f0 0d       	add	r31, r0
    2394:	11 24       	eor	r1, r1
    2396:	e5 5d       	subi	r30, 0xD5	; 213
    2398:	f9 4e       	sbci	r31, 0xE9	; 233
    239a:	90 81       	ld	r25, Z
    239c:	99 23       	and	r25, r25
    239e:	91 f3       	breq	.-28     	; 0x2384 <vTaskSwitchContext+0x50>
    23a0:	9b e0       	ldi	r25, 0x0B	; 11
    23a2:	92 9f       	mul	r25, r18
    23a4:	a0 01       	movw	r20, r0
    23a6:	93 9f       	mul	r25, r19
    23a8:	50 0d       	add	r21, r0
    23aa:	11 24       	eor	r1, r1
    23ac:	df 01       	movw	r26, r30
    23ae:	01 80       	ldd	r0, Z+1	; 0x01
    23b0:	f2 81       	ldd	r31, Z+2	; 0x02
    23b2:	e0 2d       	mov	r30, r0
    23b4:	04 80       	ldd	r0, Z+4	; 0x04
    23b6:	f5 81       	ldd	r31, Z+5	; 0x05
    23b8:	e0 2d       	mov	r30, r0
    23ba:	12 96       	adiw	r26, 0x02	; 2
    23bc:	fc 93       	st	X, r31
    23be:	ee 93       	st	-X, r30
    23c0:	11 97       	sbiw	r26, 0x01	; 1
    23c2:	42 5d       	subi	r20, 0xD2	; 210
    23c4:	59 4e       	sbci	r21, 0xE9	; 233
    23c6:	e4 17       	cp	r30, r20
    23c8:	f5 07       	cpc	r31, r21
    23ca:	29 f4       	brne	.+10     	; 0x23d6 <vTaskSwitchContext+0xa2>
    23cc:	44 81       	ldd	r20, Z+4	; 0x04
    23ce:	55 81       	ldd	r21, Z+5	; 0x05
    23d0:	fd 01       	movw	r30, r26
    23d2:	52 83       	std	Z+2, r21	; 0x02
    23d4:	41 83       	std	Z+1, r20	; 0x01
    23d6:	9b e0       	ldi	r25, 0x0B	; 11
    23d8:	92 9f       	mul	r25, r18
    23da:	f0 01       	movw	r30, r0
    23dc:	93 9f       	mul	r25, r19
    23de:	f0 0d       	add	r31, r0
    23e0:	11 24       	eor	r1, r1
    23e2:	e5 5d       	subi	r30, 0xD5	; 213
    23e4:	f9 4e       	sbci	r31, 0xE9	; 233
    23e6:	01 80       	ldd	r0, Z+1	; 0x01
    23e8:	f2 81       	ldd	r31, Z+2	; 0x02
    23ea:	e0 2d       	mov	r30, r0
    23ec:	20 85       	ldd	r18, Z+8	; 0x08
    23ee:	31 85       	ldd	r19, Z+9	; 0x09
    23f0:	30 93 9a 16 	sts	0x169A, r19	; 0x80169a <pxCurrentTCB+0x1>
    23f4:	20 93 99 16 	sts	0x1699, r18	; 0x801699 <pxCurrentTCB>
    23f8:	80 93 e9 15 	sts	0x15E9, r24	; 0x8015e9 <uxTopReadyPriority>
    23fc:	08 95       	ret

000023fe <vTaskPlaceOnEventList>:
    23fe:	cf 92       	push	r12
    2400:	df 92       	push	r13
    2402:	ef 92       	push	r14
    2404:	ff 92       	push	r15
    2406:	6a 01       	movw	r12, r20
    2408:	7b 01       	movw	r14, r22
    240a:	60 91 99 16 	lds	r22, 0x1699	; 0x801699 <pxCurrentTCB>
    240e:	70 91 9a 16 	lds	r23, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    2412:	62 5f       	subi	r22, 0xF2	; 242
    2414:	7f 4f       	sbci	r23, 0xFF	; 255
    2416:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <vListInsert>
    241a:	41 e0       	ldi	r20, 0x01	; 1
    241c:	c7 01       	movw	r24, r14
    241e:	b6 01       	movw	r22, r12
    2420:	c7 db       	rcall	.-2162   	; 0x1bb0 <prvAddCurrentTaskToDelayedList>
    2422:	ff 90       	pop	r15
    2424:	ef 90       	pop	r14
    2426:	df 90       	pop	r13
    2428:	cf 90       	pop	r12
    242a:	08 95       	ret

0000242c <vTaskPlaceOnEventListRestricted>:
    242c:	cf 93       	push	r28
    242e:	df 93       	push	r29
    2430:	fc 01       	movw	r30, r24
    2432:	cb 01       	movw	r24, r22
    2434:	ba 01       	movw	r22, r20
    2436:	a1 81       	ldd	r26, Z+1	; 0x01
    2438:	b2 81       	ldd	r27, Z+2	; 0x02
    243a:	c0 91 99 16 	lds	r28, 0x1699	; 0x801699 <pxCurrentTCB>
    243e:	d0 91 9a 16 	lds	r29, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    2442:	bb 8b       	std	Y+19, r27	; 0x13
    2444:	aa 8b       	std	Y+18, r26	; 0x12
    2446:	c0 91 99 16 	lds	r28, 0x1699	; 0x801699 <pxCurrentTCB>
    244a:	d0 91 9a 16 	lds	r29, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    244e:	16 96       	adiw	r26, 0x06	; 6
    2450:	4d 91       	ld	r20, X+
    2452:	5c 91       	ld	r21, X
    2454:	17 97       	sbiw	r26, 0x07	; 7
    2456:	5d 8b       	std	Y+21, r21	; 0x15
    2458:	4c 8b       	std	Y+20, r20	; 0x14
    245a:	16 96       	adiw	r26, 0x06	; 6
    245c:	cd 91       	ld	r28, X+
    245e:	dc 91       	ld	r29, X
    2460:	17 97       	sbiw	r26, 0x07	; 7
    2462:	40 91 99 16 	lds	r20, 0x1699	; 0x801699 <pxCurrentTCB>
    2466:	50 91 9a 16 	lds	r21, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    246a:	42 5f       	subi	r20, 0xF2	; 242
    246c:	5f 4f       	sbci	r21, 0xFF	; 255
    246e:	5d 83       	std	Y+5, r21	; 0x05
    2470:	4c 83       	std	Y+4, r20	; 0x04
    2472:	40 91 99 16 	lds	r20, 0x1699	; 0x801699 <pxCurrentTCB>
    2476:	50 91 9a 16 	lds	r21, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    247a:	42 5f       	subi	r20, 0xF2	; 242
    247c:	5f 4f       	sbci	r21, 0xFF	; 255
    247e:	17 96       	adiw	r26, 0x07	; 7
    2480:	5c 93       	st	X, r21
    2482:	4e 93       	st	-X, r20
    2484:	16 97       	sbiw	r26, 0x06	; 6
    2486:	a0 91 99 16 	lds	r26, 0x1699	; 0x801699 <pxCurrentTCB>
    248a:	b0 91 9a 16 	lds	r27, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    248e:	59 96       	adiw	r26, 0x19	; 25
    2490:	fc 93       	st	X, r31
    2492:	ee 93       	st	-X, r30
    2494:	58 97       	sbiw	r26, 0x18	; 24
    2496:	30 81       	ld	r19, Z
    2498:	3f 5f       	subi	r19, 0xFF	; 255
    249a:	30 83       	st	Z, r19
    249c:	22 23       	and	r18, r18
    249e:	19 f0       	breq	.+6      	; 0x24a6 <vTaskPlaceOnEventListRestricted+0x7a>
    24a0:	6f ef       	ldi	r22, 0xFF	; 255
    24a2:	7f ef       	ldi	r23, 0xFF	; 255
    24a4:	cb 01       	movw	r24, r22
    24a6:	42 2f       	mov	r20, r18
    24a8:	83 db       	rcall	.-2298   	; 0x1bb0 <prvAddCurrentTaskToDelayedList>
    24aa:	df 91       	pop	r29
    24ac:	cf 91       	pop	r28
    24ae:	08 95       	ret

000024b0 <xTaskRemoveFromEventList>:
    24b0:	cf 93       	push	r28
    24b2:	df 93       	push	r29
    24b4:	dc 01       	movw	r26, r24
    24b6:	17 96       	adiw	r26, 0x07	; 7
    24b8:	ed 91       	ld	r30, X+
    24ba:	fc 91       	ld	r31, X
    24bc:	18 97       	sbiw	r26, 0x08	; 8
    24be:	00 84       	ldd	r0, Z+8	; 0x08
    24c0:	f1 85       	ldd	r31, Z+9	; 0x09
    24c2:	e0 2d       	mov	r30, r0
    24c4:	a0 8d       	ldd	r26, Z+24	; 0x18
    24c6:	b1 8d       	ldd	r27, Z+25	; 0x19
    24c8:	c2 89       	ldd	r28, Z+18	; 0x12
    24ca:	d3 89       	ldd	r29, Z+19	; 0x13
    24cc:	84 89       	ldd	r24, Z+20	; 0x14
    24ce:	95 89       	ldd	r25, Z+21	; 0x15
    24d0:	9f 83       	std	Y+7, r25	; 0x07
    24d2:	8e 83       	std	Y+6, r24	; 0x06
    24d4:	c4 89       	ldd	r28, Z+20	; 0x14
    24d6:	d5 89       	ldd	r29, Z+21	; 0x15
    24d8:	82 89       	ldd	r24, Z+18	; 0x12
    24da:	93 89       	ldd	r25, Z+19	; 0x13
    24dc:	9d 83       	std	Y+5, r25	; 0x05
    24de:	8c 83       	std	Y+4, r24	; 0x04
    24e0:	11 96       	adiw	r26, 0x01	; 1
    24e2:	8d 91       	ld	r24, X+
    24e4:	9c 91       	ld	r25, X
    24e6:	12 97       	sbiw	r26, 0x02	; 2
    24e8:	9f 01       	movw	r18, r30
    24ea:	22 5f       	subi	r18, 0xF2	; 242
    24ec:	3f 4f       	sbci	r19, 0xFF	; 255
    24ee:	82 17       	cp	r24, r18
    24f0:	93 07       	cpc	r25, r19
    24f2:	31 f4       	brne	.+12     	; 0x2500 <xTaskRemoveFromEventList+0x50>
    24f4:	84 89       	ldd	r24, Z+20	; 0x14
    24f6:	95 89       	ldd	r25, Z+21	; 0x15
    24f8:	12 96       	adiw	r26, 0x02	; 2
    24fa:	9c 93       	st	X, r25
    24fc:	8e 93       	st	-X, r24
    24fe:	11 97       	sbiw	r26, 0x01	; 1
    2500:	11 8e       	std	Z+25, r1	; 0x19
    2502:	10 8e       	std	Z+24, r1	; 0x18
    2504:	8c 91       	ld	r24, X
    2506:	81 50       	subi	r24, 0x01	; 1
    2508:	8c 93       	st	X, r24
    250a:	80 91 da 15 	lds	r24, 0x15DA	; 0x8015da <uxSchedulerSuspended>
    250e:	81 11       	cpse	r24, r1
    2510:	52 c0       	rjmp	.+164    	; 0x25b6 <xTaskRemoveFromEventList+0x106>
    2512:	a4 85       	ldd	r26, Z+12	; 0x0c
    2514:	b5 85       	ldd	r27, Z+13	; 0x0d
    2516:	c6 81       	ldd	r28, Z+6	; 0x06
    2518:	d7 81       	ldd	r29, Z+7	; 0x07
    251a:	80 85       	ldd	r24, Z+8	; 0x08
    251c:	91 85       	ldd	r25, Z+9	; 0x09
    251e:	9f 83       	std	Y+7, r25	; 0x07
    2520:	8e 83       	std	Y+6, r24	; 0x06
    2522:	c0 85       	ldd	r28, Z+8	; 0x08
    2524:	d1 85       	ldd	r29, Z+9	; 0x09
    2526:	86 81       	ldd	r24, Z+6	; 0x06
    2528:	97 81       	ldd	r25, Z+7	; 0x07
    252a:	9d 83       	std	Y+5, r25	; 0x05
    252c:	8c 83       	std	Y+4, r24	; 0x04
    252e:	11 96       	adiw	r26, 0x01	; 1
    2530:	8d 91       	ld	r24, X+
    2532:	9c 91       	ld	r25, X
    2534:	12 97       	sbiw	r26, 0x02	; 2
    2536:	9f 01       	movw	r18, r30
    2538:	2e 5f       	subi	r18, 0xFE	; 254
    253a:	3f 4f       	sbci	r19, 0xFF	; 255
    253c:	82 17       	cp	r24, r18
    253e:	93 07       	cpc	r25, r19
    2540:	31 f4       	brne	.+12     	; 0x254e <xTaskRemoveFromEventList+0x9e>
    2542:	80 85       	ldd	r24, Z+8	; 0x08
    2544:	91 85       	ldd	r25, Z+9	; 0x09
    2546:	12 96       	adiw	r26, 0x02	; 2
    2548:	9c 93       	st	X, r25
    254a:	8e 93       	st	-X, r24
    254c:	11 97       	sbiw	r26, 0x01	; 1
    254e:	15 86       	std	Z+13, r1	; 0x0d
    2550:	14 86       	std	Z+12, r1	; 0x0c
    2552:	8c 91       	ld	r24, X
    2554:	81 50       	subi	r24, 0x01	; 1
    2556:	8c 93       	st	X, r24
    2558:	a2 8d       	ldd	r26, Z+26	; 0x1a
    255a:	80 91 e9 15 	lds	r24, 0x15E9	; 0x8015e9 <uxTopReadyPriority>
    255e:	8a 17       	cp	r24, r26
    2560:	10 f4       	brcc	.+4      	; 0x2566 <xTaskRemoveFromEventList+0xb6>
    2562:	a0 93 e9 15 	sts	0x15E9, r26	; 0x8015e9 <uxTopReadyPriority>
    2566:	8b e0       	ldi	r24, 0x0B	; 11
    2568:	8a 9f       	mul	r24, r26
    256a:	d0 01       	movw	r26, r0
    256c:	11 24       	eor	r1, r1
    256e:	a5 5d       	subi	r26, 0xD5	; 213
    2570:	b9 4e       	sbci	r27, 0xE9	; 233
    2572:	11 96       	adiw	r26, 0x01	; 1
    2574:	0d 90       	ld	r0, X+
    2576:	bc 91       	ld	r27, X
    2578:	a0 2d       	mov	r26, r0
    257a:	b7 83       	std	Z+7, r27	; 0x07
    257c:	a6 83       	std	Z+6, r26	; 0x06
    257e:	16 96       	adiw	r26, 0x06	; 6
    2580:	4d 91       	ld	r20, X+
    2582:	5c 91       	ld	r21, X
    2584:	17 97       	sbiw	r26, 0x07	; 7
    2586:	51 87       	std	Z+9, r21	; 0x09
    2588:	40 87       	std	Z+8, r20	; 0x08
    258a:	16 96       	adiw	r26, 0x06	; 6
    258c:	cd 91       	ld	r28, X+
    258e:	dc 91       	ld	r29, X
    2590:	17 97       	sbiw	r26, 0x07	; 7
    2592:	3d 83       	std	Y+5, r19	; 0x05
    2594:	2c 83       	std	Y+4, r18	; 0x04
    2596:	17 96       	adiw	r26, 0x07	; 7
    2598:	3c 93       	st	X, r19
    259a:	2e 93       	st	-X, r18
    259c:	16 97       	sbiw	r26, 0x06	; 6
    259e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    25a0:	8a 9f       	mul	r24, r26
    25a2:	d0 01       	movw	r26, r0
    25a4:	11 24       	eor	r1, r1
    25a6:	a5 5d       	subi	r26, 0xD5	; 213
    25a8:	b9 4e       	sbci	r27, 0xE9	; 233
    25aa:	b5 87       	std	Z+13, r27	; 0x0d
    25ac:	a4 87       	std	Z+12, r26	; 0x0c
    25ae:	8c 91       	ld	r24, X
    25b0:	8f 5f       	subi	r24, 0xFF	; 255
    25b2:	8c 93       	st	X, r24
    25b4:	1c c0       	rjmp	.+56     	; 0x25ee <xTaskRemoveFromEventList+0x13e>
    25b6:	46 e0       	ldi	r20, 0x06	; 6
    25b8:	56 e1       	ldi	r21, 0x16	; 22
    25ba:	da 01       	movw	r26, r20
    25bc:	11 96       	adiw	r26, 0x01	; 1
    25be:	cd 91       	ld	r28, X+
    25c0:	dc 91       	ld	r29, X
    25c2:	12 97       	sbiw	r26, 0x02	; 2
    25c4:	d3 8b       	std	Z+19, r29	; 0x13
    25c6:	c2 8b       	std	Z+18, r28	; 0x12
    25c8:	8e 81       	ldd	r24, Y+6	; 0x06
    25ca:	9f 81       	ldd	r25, Y+7	; 0x07
    25cc:	95 8b       	std	Z+21, r25	; 0x15
    25ce:	84 8b       	std	Z+20, r24	; 0x14
    25d0:	8e 81       	ldd	r24, Y+6	; 0x06
    25d2:	9f 81       	ldd	r25, Y+7	; 0x07
    25d4:	dc 01       	movw	r26, r24
    25d6:	15 96       	adiw	r26, 0x05	; 5
    25d8:	3c 93       	st	X, r19
    25da:	2e 93       	st	-X, r18
    25dc:	14 97       	sbiw	r26, 0x04	; 4
    25de:	3f 83       	std	Y+7, r19	; 0x07
    25e0:	2e 83       	std	Y+6, r18	; 0x06
    25e2:	51 8f       	std	Z+25, r21	; 0x19
    25e4:	40 8f       	std	Z+24, r20	; 0x18
    25e6:	da 01       	movw	r26, r20
    25e8:	8c 91       	ld	r24, X
    25ea:	8f 5f       	subi	r24, 0xFF	; 255
    25ec:	8c 93       	st	X, r24
    25ee:	92 8d       	ldd	r25, Z+26	; 0x1a
    25f0:	e0 91 99 16 	lds	r30, 0x1699	; 0x801699 <pxCurrentTCB>
    25f4:	f0 91 9a 16 	lds	r31, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    25f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    25fa:	89 17       	cp	r24, r25
    25fc:	20 f4       	brcc	.+8      	; 0x2606 <xTaskRemoveFromEventList+0x156>
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	80 93 e3 15 	sts	0x15E3, r24	; 0x8015e3 <xYieldPending>
    2604:	01 c0       	rjmp	.+2      	; 0x2608 <xTaskRemoveFromEventList+0x158>
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	df 91       	pop	r29
    260a:	cf 91       	pop	r28
    260c:	08 95       	ret

0000260e <vTaskSetTimeOutState>:
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	0f 92       	push	r0
    2614:	20 91 e2 15 	lds	r18, 0x15E2	; 0x8015e2 <xNumOfOverflows>
    2618:	fc 01       	movw	r30, r24
    261a:	20 83       	st	Z, r18
    261c:	40 91 ea 15 	lds	r20, 0x15EA	; 0x8015ea <xTickCount>
    2620:	50 91 eb 15 	lds	r21, 0x15EB	; 0x8015eb <xTickCount+0x1>
    2624:	60 91 ec 15 	lds	r22, 0x15EC	; 0x8015ec <xTickCount+0x2>
    2628:	70 91 ed 15 	lds	r23, 0x15ED	; 0x8015ed <xTickCount+0x3>
    262c:	41 83       	std	Z+1, r20	; 0x01
    262e:	52 83       	std	Z+2, r21	; 0x02
    2630:	63 83       	std	Z+3, r22	; 0x03
    2632:	74 83       	std	Z+4, r23	; 0x04
    2634:	0f 90       	pop	r0
    2636:	0f be       	out	0x3f, r0	; 63
    2638:	08 95       	ret

0000263a <vTaskInternalSetTimeOutState>:
    263a:	20 91 e2 15 	lds	r18, 0x15E2	; 0x8015e2 <xNumOfOverflows>
    263e:	fc 01       	movw	r30, r24
    2640:	20 83       	st	Z, r18
    2642:	40 91 ea 15 	lds	r20, 0x15EA	; 0x8015ea <xTickCount>
    2646:	50 91 eb 15 	lds	r21, 0x15EB	; 0x8015eb <xTickCount+0x1>
    264a:	60 91 ec 15 	lds	r22, 0x15EC	; 0x8015ec <xTickCount+0x2>
    264e:	70 91 ed 15 	lds	r23, 0x15ED	; 0x8015ed <xTickCount+0x3>
    2652:	41 83       	std	Z+1, r20	; 0x01
    2654:	52 83       	std	Z+2, r21	; 0x02
    2656:	63 83       	std	Z+3, r22	; 0x03
    2658:	74 83       	std	Z+4, r23	; 0x04
    265a:	08 95       	ret

0000265c <xTaskCheckForTimeOut>:
    265c:	8f 92       	push	r8
    265e:	9f 92       	push	r9
    2660:	af 92       	push	r10
    2662:	bf 92       	push	r11
    2664:	cf 92       	push	r12
    2666:	df 92       	push	r13
    2668:	ef 92       	push	r14
    266a:	ff 92       	push	r15
    266c:	0f 93       	push	r16
    266e:	1f 93       	push	r17
    2670:	cf 93       	push	r28
    2672:	df 93       	push	r29
    2674:	fb 01       	movw	r30, r22
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	f8 94       	cli
    267a:	0f 92       	push	r0
    267c:	c0 90 ea 15 	lds	r12, 0x15EA	; 0x8015ea <xTickCount>
    2680:	d0 90 eb 15 	lds	r13, 0x15EB	; 0x8015eb <xTickCount+0x1>
    2684:	e0 90 ec 15 	lds	r14, 0x15EC	; 0x8015ec <xTickCount+0x2>
    2688:	f0 90 ed 15 	lds	r15, 0x15ED	; 0x8015ed <xTickCount+0x3>
    268c:	dc 01       	movw	r26, r24
    268e:	11 96       	adiw	r26, 0x01	; 1
    2690:	0d 91       	ld	r16, X+
    2692:	1d 91       	ld	r17, X+
    2694:	2d 91       	ld	r18, X+
    2696:	3c 91       	ld	r19, X
    2698:	14 97       	sbiw	r26, 0x04	; 4
    269a:	46 01       	movw	r8, r12
    269c:	57 01       	movw	r10, r14
    269e:	80 1a       	sub	r8, r16
    26a0:	91 0a       	sbc	r9, r17
    26a2:	a2 0a       	sbc	r10, r18
    26a4:	b3 0a       	sbc	r11, r19
    26a6:	40 81       	ld	r20, Z
    26a8:	51 81       	ldd	r21, Z+1	; 0x01
    26aa:	62 81       	ldd	r22, Z+2	; 0x02
    26ac:	73 81       	ldd	r23, Z+3	; 0x03
    26ae:	4f 3f       	cpi	r20, 0xFF	; 255
    26b0:	bf ef       	ldi	r27, 0xFF	; 255
    26b2:	5b 07       	cpc	r21, r27
    26b4:	6b 07       	cpc	r22, r27
    26b6:	7b 07       	cpc	r23, r27
    26b8:	39 f1       	breq	.+78     	; 0x2708 <xTaskCheckForTimeOut+0xac>
    26ba:	ec 01       	movw	r28, r24
    26bc:	b8 81       	ld	r27, Y
    26be:	a0 91 e2 15 	lds	r26, 0x15E2	; 0x8015e2 <xNumOfOverflows>
    26c2:	ba 17       	cp	r27, r26
    26c4:	59 f0       	breq	.+22     	; 0x26dc <xTaskCheckForTimeOut+0x80>
    26c6:	c0 16       	cp	r12, r16
    26c8:	d1 06       	cpc	r13, r17
    26ca:	e2 06       	cpc	r14, r18
    26cc:	f3 06       	cpc	r15, r19
    26ce:	30 f0       	brcs	.+12     	; 0x26dc <xTaskCheckForTimeOut+0x80>
    26d0:	10 82       	st	Z, r1
    26d2:	11 82       	std	Z+1, r1	; 0x01
    26d4:	12 82       	std	Z+2, r1	; 0x02
    26d6:	13 82       	std	Z+3, r1	; 0x03
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	17 c0       	rjmp	.+46     	; 0x270a <xTaskCheckForTimeOut+0xae>
    26dc:	84 16       	cp	r8, r20
    26de:	95 06       	cpc	r9, r21
    26e0:	a6 06       	cpc	r10, r22
    26e2:	b7 06       	cpc	r11, r23
    26e4:	58 f4       	brcc	.+22     	; 0x26fc <xTaskCheckForTimeOut+0xa0>
    26e6:	48 19       	sub	r20, r8
    26e8:	59 09       	sbc	r21, r9
    26ea:	6a 09       	sbc	r22, r10
    26ec:	7b 09       	sbc	r23, r11
    26ee:	40 83       	st	Z, r20
    26f0:	51 83       	std	Z+1, r21	; 0x01
    26f2:	62 83       	std	Z+2, r22	; 0x02
    26f4:	73 83       	std	Z+3, r23	; 0x03
    26f6:	a1 df       	rcall	.-190    	; 0x263a <vTaskInternalSetTimeOutState>
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	07 c0       	rjmp	.+14     	; 0x270a <xTaskCheckForTimeOut+0xae>
    26fc:	10 82       	st	Z, r1
    26fe:	11 82       	std	Z+1, r1	; 0x01
    2700:	12 82       	std	Z+2, r1	; 0x02
    2702:	13 82       	std	Z+3, r1	; 0x03
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	01 c0       	rjmp	.+2      	; 0x270a <xTaskCheckForTimeOut+0xae>
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	0f 90       	pop	r0
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	df 91       	pop	r29
    2710:	cf 91       	pop	r28
    2712:	1f 91       	pop	r17
    2714:	0f 91       	pop	r16
    2716:	ff 90       	pop	r15
    2718:	ef 90       	pop	r14
    271a:	df 90       	pop	r13
    271c:	cf 90       	pop	r12
    271e:	bf 90       	pop	r11
    2720:	af 90       	pop	r10
    2722:	9f 90       	pop	r9
    2724:	8f 90       	pop	r8
    2726:	08 95       	ret

00002728 <vTaskMissedYield>:
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	80 93 e3 15 	sts	0x15E3, r24	; 0x8015e3 <xYieldPending>
    272e:	08 95       	ret

00002730 <xTaskGetCurrentTaskHandle>:
    2730:	80 91 99 16 	lds	r24, 0x1699	; 0x801699 <pxCurrentTCB>
    2734:	90 91 9a 16 	lds	r25, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    2738:	08 95       	ret

0000273a <xTaskGetSchedulerState>:
    273a:	80 91 e8 15 	lds	r24, 0x15E8	; 0x8015e8 <xSchedulerRunning>
    273e:	88 23       	and	r24, r24
    2740:	31 f0       	breq	.+12     	; 0x274e <xTaskGetSchedulerState+0x14>
    2742:	80 91 da 15 	lds	r24, 0x15DA	; 0x8015da <uxSchedulerSuspended>
    2746:	81 11       	cpse	r24, r1
    2748:	04 c0       	rjmp	.+8      	; 0x2752 <xTaskGetSchedulerState+0x18>
    274a:	82 e0       	ldi	r24, 0x02	; 2
    274c:	08 95       	ret
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	08 95       	ret
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	08 95       	ret

00002756 <xTaskPriorityDisinherit>:
    2756:	0f 93       	push	r16
    2758:	1f 93       	push	r17
    275a:	cf 93       	push	r28
    275c:	df 93       	push	r29
    275e:	fc 01       	movw	r30, r24
    2760:	89 2b       	or	r24, r25
    2762:	09 f4       	brne	.+2      	; 0x2766 <xTaskPriorityDisinherit+0x10>
    2764:	49 c0       	rjmp	.+146    	; 0x27f8 <xTaskPriorityDisinherit+0xa2>
    2766:	86 a5       	ldd	r24, Z+46	; 0x2e
    2768:	81 50       	subi	r24, 0x01	; 1
    276a:	86 a7       	std	Z+46, r24	; 0x2e
    276c:	22 8d       	ldd	r18, Z+26	; 0x1a
    276e:	95 a5       	ldd	r25, Z+45	; 0x2d
    2770:	29 17       	cp	r18, r25
    2772:	09 f4       	brne	.+2      	; 0x2776 <xTaskPriorityDisinherit+0x20>
    2774:	43 c0       	rjmp	.+134    	; 0x27fc <xTaskPriorityDisinherit+0xa6>
    2776:	81 11       	cpse	r24, r1
    2778:	43 c0       	rjmp	.+134    	; 0x2800 <xTaskPriorityDisinherit+0xaa>
    277a:	ef 01       	movw	r28, r30
    277c:	8f 01       	movw	r16, r30
    277e:	0e 5f       	subi	r16, 0xFE	; 254
    2780:	1f 4f       	sbci	r17, 0xFF	; 255
    2782:	c8 01       	movw	r24, r16
    2784:	0e 94 1d 05 	call	0xa3a	; 0xa3a <uxListRemove>
    2788:	ed a5       	ldd	r30, Y+45	; 0x2d
    278a:	ea 8f       	std	Y+26, r30	; 0x1a
    278c:	8a e0       	ldi	r24, 0x0A	; 10
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	a0 e0       	ldi	r26, 0x00	; 0
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	8e 1b       	sub	r24, r30
    2796:	91 09       	sbc	r25, r1
    2798:	a1 09       	sbc	r26, r1
    279a:	b1 09       	sbc	r27, r1
    279c:	8e 87       	std	Y+14, r24	; 0x0e
    279e:	9f 87       	std	Y+15, r25	; 0x0f
    27a0:	a8 8b       	std	Y+16, r26	; 0x10
    27a2:	b9 8b       	std	Y+17, r27	; 0x11
    27a4:	80 91 e9 15 	lds	r24, 0x15E9	; 0x8015e9 <uxTopReadyPriority>
    27a8:	8e 17       	cp	r24, r30
    27aa:	10 f4       	brcc	.+4      	; 0x27b0 <xTaskPriorityDisinherit+0x5a>
    27ac:	e0 93 e9 15 	sts	0x15E9, r30	; 0x8015e9 <uxTopReadyPriority>
    27b0:	8b e0       	ldi	r24, 0x0B	; 11
    27b2:	8e 9f       	mul	r24, r30
    27b4:	f0 01       	movw	r30, r0
    27b6:	11 24       	eor	r1, r1
    27b8:	e5 5d       	subi	r30, 0xD5	; 213
    27ba:	f9 4e       	sbci	r31, 0xE9	; 233
    27bc:	01 80       	ldd	r0, Z+1	; 0x01
    27be:	f2 81       	ldd	r31, Z+2	; 0x02
    27c0:	e0 2d       	mov	r30, r0
    27c2:	ff 83       	std	Y+7, r31	; 0x07
    27c4:	ee 83       	std	Y+6, r30	; 0x06
    27c6:	26 81       	ldd	r18, Z+6	; 0x06
    27c8:	37 81       	ldd	r19, Z+7	; 0x07
    27ca:	39 87       	std	Y+9, r19	; 0x09
    27cc:	28 87       	std	Y+8, r18	; 0x08
    27ce:	a6 81       	ldd	r26, Z+6	; 0x06
    27d0:	b7 81       	ldd	r27, Z+7	; 0x07
    27d2:	15 96       	adiw	r26, 0x05	; 5
    27d4:	1c 93       	st	X, r17
    27d6:	0e 93       	st	-X, r16
    27d8:	14 97       	sbiw	r26, 0x04	; 4
    27da:	17 83       	std	Z+7, r17	; 0x07
    27dc:	06 83       	std	Z+6, r16	; 0x06
    27de:	ea 8d       	ldd	r30, Y+26	; 0x1a
    27e0:	8e 9f       	mul	r24, r30
    27e2:	f0 01       	movw	r30, r0
    27e4:	11 24       	eor	r1, r1
    27e6:	e5 5d       	subi	r30, 0xD5	; 213
    27e8:	f9 4e       	sbci	r31, 0xE9	; 233
    27ea:	fd 87       	std	Y+13, r31	; 0x0d
    27ec:	ec 87       	std	Y+12, r30	; 0x0c
    27ee:	80 81       	ld	r24, Z
    27f0:	8f 5f       	subi	r24, 0xFF	; 255
    27f2:	80 83       	st	Z, r24
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	05 c0       	rjmp	.+10     	; 0x2802 <xTaskPriorityDisinherit+0xac>
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	03 c0       	rjmp	.+6      	; 0x2802 <xTaskPriorityDisinherit+0xac>
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	01 c0       	rjmp	.+2      	; 0x2802 <xTaskPriorityDisinherit+0xac>
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	df 91       	pop	r29
    2804:	cf 91       	pop	r28
    2806:	1f 91       	pop	r17
    2808:	0f 91       	pop	r16
    280a:	08 95       	ret

0000280c <xTaskGenericNotifyWait>:
    280c:	4f 92       	push	r4
    280e:	5f 92       	push	r5
    2810:	6f 92       	push	r6
    2812:	7f 92       	push	r7
    2814:	af 92       	push	r10
    2816:	bf 92       	push	r11
    2818:	cf 92       	push	r12
    281a:	df 92       	push	r13
    281c:	ef 92       	push	r14
    281e:	ff 92       	push	r15
    2820:	0f 93       	push	r16
    2822:	1f 93       	push	r17
    2824:	cf 93       	push	r28
    2826:	df 93       	push	r29
    2828:	28 01       	movw	r4, r16
    282a:	39 01       	movw	r6, r18
    282c:	0f b6       	in	r0, 0x3f	; 63
    282e:	f8 94       	cli
    2830:	0f 92       	push	r0
    2832:	e0 91 99 16 	lds	r30, 0x1699	; 0x801699 <pxCurrentTCB>
    2836:	f0 91 9a 16 	lds	r31, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    283a:	c8 2f       	mov	r28, r24
    283c:	d0 e0       	ldi	r29, 0x00	; 0
    283e:	ec 0f       	add	r30, r28
    2840:	fd 1f       	adc	r31, r29
    2842:	83 a9       	ldd	r24, Z+51	; 0x33
    2844:	82 30       	cpi	r24, 0x02	; 2
    2846:	71 f1       	breq	.+92     	; 0x28a4 <xTaskGenericNotifyWait+0x98>
    2848:	e0 91 99 16 	lds	r30, 0x1699	; 0x801699 <pxCurrentTCB>
    284c:	f0 91 9a 16 	lds	r31, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    2850:	ce 01       	movw	r24, r28
    2852:	88 0f       	add	r24, r24
    2854:	99 1f       	adc	r25, r25
    2856:	88 0f       	add	r24, r24
    2858:	99 1f       	adc	r25, r25
    285a:	e8 0f       	add	r30, r24
    285c:	f9 1f       	adc	r31, r25
    285e:	87 a5       	ldd	r24, Z+47	; 0x2f
    2860:	90 a9       	ldd	r25, Z+48	; 0x30
    2862:	a1 a9       	ldd	r26, Z+49	; 0x31
    2864:	b2 a9       	ldd	r27, Z+50	; 0x32
    2866:	40 95       	com	r20
    2868:	50 95       	com	r21
    286a:	60 95       	com	r22
    286c:	70 95       	com	r23
    286e:	48 23       	and	r20, r24
    2870:	59 23       	and	r21, r25
    2872:	6a 23       	and	r22, r26
    2874:	7b 23       	and	r23, r27
    2876:	47 a7       	std	Z+47, r20	; 0x2f
    2878:	50 ab       	std	Z+48, r21	; 0x30
    287a:	61 ab       	std	Z+49, r22	; 0x31
    287c:	72 ab       	std	Z+50, r23	; 0x32
    287e:	e0 91 99 16 	lds	r30, 0x1699	; 0x801699 <pxCurrentTCB>
    2882:	f0 91 9a 16 	lds	r31, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    2886:	ec 0f       	add	r30, r28
    2888:	fd 1f       	adc	r31, r29
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	83 ab       	std	Z+51, r24	; 0x33
    288e:	a1 14       	cp	r10, r1
    2890:	b1 04       	cpc	r11, r1
    2892:	c1 04       	cpc	r12, r1
    2894:	d1 04       	cpc	r13, r1
    2896:	31 f0       	breq	.+12     	; 0x28a4 <xTaskGenericNotifyWait+0x98>
    2898:	41 e0       	ldi	r20, 0x01	; 1
    289a:	c6 01       	movw	r24, r12
    289c:	b5 01       	movw	r22, r10
    289e:	88 d9       	rcall	.-3312   	; 0x1bb0 <prvAddCurrentTaskToDelayedList>
    28a0:	0e 94 99 05 	call	0xb32	; 0xb32 <vPortYield>
    28a4:	0f 90       	pop	r0
    28a6:	0f be       	out	0x3f, r0	; 63
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	f8 94       	cli
    28ac:	0f 92       	push	r0
    28ae:	e1 14       	cp	r14, r1
    28b0:	f1 04       	cpc	r15, r1
    28b2:	a1 f0       	breq	.+40     	; 0x28dc <xTaskGenericNotifyWait+0xd0>
    28b4:	e0 91 99 16 	lds	r30, 0x1699	; 0x801699 <pxCurrentTCB>
    28b8:	f0 91 9a 16 	lds	r31, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    28bc:	ce 01       	movw	r24, r28
    28be:	88 0f       	add	r24, r24
    28c0:	99 1f       	adc	r25, r25
    28c2:	88 0f       	add	r24, r24
    28c4:	99 1f       	adc	r25, r25
    28c6:	e8 0f       	add	r30, r24
    28c8:	f9 1f       	adc	r31, r25
    28ca:	87 a5       	ldd	r24, Z+47	; 0x2f
    28cc:	90 a9       	ldd	r25, Z+48	; 0x30
    28ce:	a1 a9       	ldd	r26, Z+49	; 0x31
    28d0:	b2 a9       	ldd	r27, Z+50	; 0x32
    28d2:	f7 01       	movw	r30, r14
    28d4:	80 83       	st	Z, r24
    28d6:	91 83       	std	Z+1, r25	; 0x01
    28d8:	a2 83       	std	Z+2, r26	; 0x02
    28da:	b3 83       	std	Z+3, r27	; 0x03
    28dc:	e0 91 99 16 	lds	r30, 0x1699	; 0x801699 <pxCurrentTCB>
    28e0:	f0 91 9a 16 	lds	r31, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    28e4:	ec 0f       	add	r30, r28
    28e6:	fd 1f       	adc	r31, r29
    28e8:	83 a9       	ldd	r24, Z+51	; 0x33
    28ea:	82 30       	cpi	r24, 0x02	; 2
    28ec:	e9 f4       	brne	.+58     	; 0x2928 <xTaskGenericNotifyWait+0x11c>
    28ee:	e0 91 99 16 	lds	r30, 0x1699	; 0x801699 <pxCurrentTCB>
    28f2:	f0 91 9a 16 	lds	r31, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    28f6:	ce 01       	movw	r24, r28
    28f8:	88 0f       	add	r24, r24
    28fa:	99 1f       	adc	r25, r25
    28fc:	88 0f       	add	r24, r24
    28fe:	99 1f       	adc	r25, r25
    2900:	e8 0f       	add	r30, r24
    2902:	f9 1f       	adc	r31, r25
    2904:	87 a5       	ldd	r24, Z+47	; 0x2f
    2906:	90 a9       	ldd	r25, Z+48	; 0x30
    2908:	a1 a9       	ldd	r26, Z+49	; 0x31
    290a:	b2 a9       	ldd	r27, Z+50	; 0x32
    290c:	40 94       	com	r4
    290e:	50 94       	com	r5
    2910:	60 94       	com	r6
    2912:	70 94       	com	r7
    2914:	48 22       	and	r4, r24
    2916:	59 22       	and	r5, r25
    2918:	6a 22       	and	r6, r26
    291a:	7b 22       	and	r7, r27
    291c:	47 a6       	std	Z+47, r4	; 0x2f
    291e:	50 aa       	std	Z+48, r5	; 0x30
    2920:	61 aa       	std	Z+49, r6	; 0x31
    2922:	72 aa       	std	Z+50, r7	; 0x32
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	01 c0       	rjmp	.+2      	; 0x292a <xTaskGenericNotifyWait+0x11e>
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	20 91 99 16 	lds	r18, 0x1699	; 0x801699 <pxCurrentTCB>
    292e:	30 91 9a 16 	lds	r19, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    2932:	c2 0f       	add	r28, r18
    2934:	d3 1f       	adc	r29, r19
    2936:	1b aa       	std	Y+51, r1	; 0x33
    2938:	0f 90       	pop	r0
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	df 91       	pop	r29
    293e:	cf 91       	pop	r28
    2940:	1f 91       	pop	r17
    2942:	0f 91       	pop	r16
    2944:	ff 90       	pop	r15
    2946:	ef 90       	pop	r14
    2948:	df 90       	pop	r13
    294a:	cf 90       	pop	r12
    294c:	bf 90       	pop	r11
    294e:	af 90       	pop	r10
    2950:	7f 90       	pop	r7
    2952:	6f 90       	pop	r6
    2954:	5f 90       	pop	r5
    2956:	4f 90       	pop	r4
    2958:	08 95       	ret

0000295a <xTaskGenericNotify>:
    295a:	8f 92       	push	r8
    295c:	9f 92       	push	r9
    295e:	af 92       	push	r10
    2960:	bf 92       	push	r11
    2962:	ef 92       	push	r14
    2964:	ff 92       	push	r15
    2966:	0f 93       	push	r16
    2968:	cf 93       	push	r28
    296a:	df 93       	push	r29
    296c:	dc 01       	movw	r26, r24
    296e:	0f b6       	in	r0, 0x3f	; 63
    2970:	f8 94       	cli
    2972:	0f 92       	push	r0
    2974:	e1 14       	cp	r14, r1
    2976:	f1 04       	cpc	r15, r1
    2978:	89 f0       	breq	.+34     	; 0x299c <xTaskGenericNotify+0x42>
    297a:	e6 2f       	mov	r30, r22
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	ee 0f       	add	r30, r30
    2980:	ff 1f       	adc	r31, r31
    2982:	ee 0f       	add	r30, r30
    2984:	ff 1f       	adc	r31, r31
    2986:	e8 0f       	add	r30, r24
    2988:	f9 1f       	adc	r31, r25
    298a:	87 a4       	ldd	r8, Z+47	; 0x2f
    298c:	90 a8       	ldd	r9, Z+48	; 0x30
    298e:	a1 a8       	ldd	r10, Z+49	; 0x31
    2990:	b2 a8       	ldd	r11, Z+50	; 0x32
    2992:	f7 01       	movw	r30, r14
    2994:	80 82       	st	Z, r8
    2996:	91 82       	std	Z+1, r9	; 0x01
    2998:	a2 82       	std	Z+2, r10	; 0x02
    299a:	b3 82       	std	Z+3, r11	; 0x03
    299c:	70 e0       	ldi	r23, 0x00	; 0
    299e:	fd 01       	movw	r30, r26
    29a0:	e6 0f       	add	r30, r22
    29a2:	f7 1f       	adc	r31, r23
    29a4:	83 a9       	ldd	r24, Z+51	; 0x33
    29a6:	92 e0       	ldi	r25, 0x02	; 2
    29a8:	93 ab       	std	Z+51, r25	; 0x33
    29aa:	02 30       	cpi	r16, 0x02	; 2
    29ac:	01 f1       	breq	.+64     	; 0x29ee <xTaskGenericNotify+0x94>
    29ae:	18 f4       	brcc	.+6      	; 0x29b6 <xTaskGenericNotify+0x5c>
    29b0:	01 30       	cpi	r16, 0x01	; 1
    29b2:	31 f0       	breq	.+12     	; 0x29c0 <xTaskGenericNotify+0x66>
    29b4:	4d c0       	rjmp	.+154    	; 0x2a50 <xTaskGenericNotify+0xf6>
    29b6:	03 30       	cpi	r16, 0x03	; 3
    29b8:	79 f1       	breq	.+94     	; 0x2a18 <xTaskGenericNotify+0xbe>
    29ba:	04 30       	cpi	r16, 0x04	; 4
    29bc:	d1 f1       	breq	.+116    	; 0x2a32 <xTaskGenericNotify+0xd8>
    29be:	48 c0       	rjmp	.+144    	; 0x2a50 <xTaskGenericNotify+0xf6>
    29c0:	66 0f       	add	r22, r22
    29c2:	77 1f       	adc	r23, r23
    29c4:	66 0f       	add	r22, r22
    29c6:	77 1f       	adc	r23, r23
    29c8:	fd 01       	movw	r30, r26
    29ca:	e6 0f       	add	r30, r22
    29cc:	f7 1f       	adc	r31, r23
    29ce:	87 a4       	ldd	r8, Z+47	; 0x2f
    29d0:	90 a8       	ldd	r9, Z+48	; 0x30
    29d2:	a1 a8       	ldd	r10, Z+49	; 0x31
    29d4:	b2 a8       	ldd	r11, Z+50	; 0x32
    29d6:	ba 01       	movw	r22, r20
    29d8:	a9 01       	movw	r20, r18
    29da:	48 29       	or	r20, r8
    29dc:	59 29       	or	r21, r9
    29de:	6a 29       	or	r22, r10
    29e0:	7b 29       	or	r23, r11
    29e2:	47 a7       	std	Z+47, r20	; 0x2f
    29e4:	50 ab       	std	Z+48, r21	; 0x30
    29e6:	61 ab       	std	Z+49, r22	; 0x31
    29e8:	72 ab       	std	Z+50, r23	; 0x32
    29ea:	01 e0       	ldi	r16, 0x01	; 1
    29ec:	34 c0       	rjmp	.+104    	; 0x2a56 <xTaskGenericNotify+0xfc>
    29ee:	66 0f       	add	r22, r22
    29f0:	77 1f       	adc	r23, r23
    29f2:	66 0f       	add	r22, r22
    29f4:	77 1f       	adc	r23, r23
    29f6:	fd 01       	movw	r30, r26
    29f8:	e6 0f       	add	r30, r22
    29fa:	f7 1f       	adc	r31, r23
    29fc:	47 a5       	ldd	r20, Z+47	; 0x2f
    29fe:	50 a9       	ldd	r21, Z+48	; 0x30
    2a00:	61 a9       	ldd	r22, Z+49	; 0x31
    2a02:	72 a9       	ldd	r23, Z+50	; 0x32
    2a04:	4f 5f       	subi	r20, 0xFF	; 255
    2a06:	5f 4f       	sbci	r21, 0xFF	; 255
    2a08:	6f 4f       	sbci	r22, 0xFF	; 255
    2a0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a0c:	47 a7       	std	Z+47, r20	; 0x2f
    2a0e:	50 ab       	std	Z+48, r21	; 0x30
    2a10:	61 ab       	std	Z+49, r22	; 0x31
    2a12:	72 ab       	std	Z+50, r23	; 0x32
    2a14:	01 e0       	ldi	r16, 0x01	; 1
    2a16:	1f c0       	rjmp	.+62     	; 0x2a56 <xTaskGenericNotify+0xfc>
    2a18:	66 0f       	add	r22, r22
    2a1a:	77 1f       	adc	r23, r23
    2a1c:	66 0f       	add	r22, r22
    2a1e:	77 1f       	adc	r23, r23
    2a20:	fd 01       	movw	r30, r26
    2a22:	e6 0f       	add	r30, r22
    2a24:	f7 1f       	adc	r31, r23
    2a26:	27 a7       	std	Z+47, r18	; 0x2f
    2a28:	30 ab       	std	Z+48, r19	; 0x30
    2a2a:	41 ab       	std	Z+49, r20	; 0x31
    2a2c:	52 ab       	std	Z+50, r21	; 0x32
    2a2e:	01 e0       	ldi	r16, 0x01	; 1
    2a30:	12 c0       	rjmp	.+36     	; 0x2a56 <xTaskGenericNotify+0xfc>
    2a32:	82 30       	cpi	r24, 0x02	; 2
    2a34:	79 f0       	breq	.+30     	; 0x2a54 <xTaskGenericNotify+0xfa>
    2a36:	66 0f       	add	r22, r22
    2a38:	77 1f       	adc	r23, r23
    2a3a:	66 0f       	add	r22, r22
    2a3c:	77 1f       	adc	r23, r23
    2a3e:	fd 01       	movw	r30, r26
    2a40:	e6 0f       	add	r30, r22
    2a42:	f7 1f       	adc	r31, r23
    2a44:	27 a7       	std	Z+47, r18	; 0x2f
    2a46:	30 ab       	std	Z+48, r19	; 0x30
    2a48:	41 ab       	std	Z+49, r20	; 0x31
    2a4a:	52 ab       	std	Z+50, r21	; 0x32
    2a4c:	01 e0       	ldi	r16, 0x01	; 1
    2a4e:	03 c0       	rjmp	.+6      	; 0x2a56 <xTaskGenericNotify+0xfc>
    2a50:	01 e0       	ldi	r16, 0x01	; 1
    2a52:	01 c0       	rjmp	.+2      	; 0x2a56 <xTaskGenericNotify+0xfc>
    2a54:	00 e0       	ldi	r16, 0x00	; 0
    2a56:	81 30       	cpi	r24, 0x01	; 1
    2a58:	09 f0       	breq	.+2      	; 0x2a5c <xTaskGenericNotify+0x102>
    2a5a:	69 c0       	rjmp	.+210    	; 0x2b2e <xTaskGenericNotify+0x1d4>
    2a5c:	1c 96       	adiw	r26, 0x0c	; 12
    2a5e:	ed 91       	ld	r30, X+
    2a60:	fc 91       	ld	r31, X
    2a62:	1d 97       	sbiw	r26, 0x0d	; 13
    2a64:	16 96       	adiw	r26, 0x06	; 6
    2a66:	cd 91       	ld	r28, X+
    2a68:	dc 91       	ld	r29, X
    2a6a:	17 97       	sbiw	r26, 0x07	; 7
    2a6c:	18 96       	adiw	r26, 0x08	; 8
    2a6e:	8d 91       	ld	r24, X+
    2a70:	9c 91       	ld	r25, X
    2a72:	19 97       	sbiw	r26, 0x09	; 9
    2a74:	9f 83       	std	Y+7, r25	; 0x07
    2a76:	8e 83       	std	Y+6, r24	; 0x06
    2a78:	18 96       	adiw	r26, 0x08	; 8
    2a7a:	cd 91       	ld	r28, X+
    2a7c:	dc 91       	ld	r29, X
    2a7e:	19 97       	sbiw	r26, 0x09	; 9
    2a80:	16 96       	adiw	r26, 0x06	; 6
    2a82:	8d 91       	ld	r24, X+
    2a84:	9c 91       	ld	r25, X
    2a86:	17 97       	sbiw	r26, 0x07	; 7
    2a88:	9d 83       	std	Y+5, r25	; 0x05
    2a8a:	8c 83       	std	Y+4, r24	; 0x04
    2a8c:	81 81       	ldd	r24, Z+1	; 0x01
    2a8e:	92 81       	ldd	r25, Z+2	; 0x02
    2a90:	9d 01       	movw	r18, r26
    2a92:	2e 5f       	subi	r18, 0xFE	; 254
    2a94:	3f 4f       	sbci	r19, 0xFF	; 255
    2a96:	82 17       	cp	r24, r18
    2a98:	93 07       	cpc	r25, r19
    2a9a:	31 f4       	brne	.+12     	; 0x2aa8 <xTaskGenericNotify+0x14e>
    2a9c:	18 96       	adiw	r26, 0x08	; 8
    2a9e:	8d 91       	ld	r24, X+
    2aa0:	9c 91       	ld	r25, X
    2aa2:	19 97       	sbiw	r26, 0x09	; 9
    2aa4:	92 83       	std	Z+2, r25	; 0x02
    2aa6:	81 83       	std	Z+1, r24	; 0x01
    2aa8:	1d 96       	adiw	r26, 0x0d	; 13
    2aaa:	1c 92       	st	X, r1
    2aac:	1e 92       	st	-X, r1
    2aae:	1c 97       	sbiw	r26, 0x0c	; 12
    2ab0:	80 81       	ld	r24, Z
    2ab2:	81 50       	subi	r24, 0x01	; 1
    2ab4:	80 83       	st	Z, r24
    2ab6:	5a 96       	adiw	r26, 0x1a	; 26
    2ab8:	ec 91       	ld	r30, X
    2aba:	5a 97       	sbiw	r26, 0x1a	; 26
    2abc:	80 91 e9 15 	lds	r24, 0x15E9	; 0x8015e9 <uxTopReadyPriority>
    2ac0:	8e 17       	cp	r24, r30
    2ac2:	10 f4       	brcc	.+4      	; 0x2ac8 <xTaskGenericNotify+0x16e>
    2ac4:	e0 93 e9 15 	sts	0x15E9, r30	; 0x8015e9 <uxTopReadyPriority>
    2ac8:	8b e0       	ldi	r24, 0x0B	; 11
    2aca:	8e 9f       	mul	r24, r30
    2acc:	f0 01       	movw	r30, r0
    2ace:	11 24       	eor	r1, r1
    2ad0:	e5 5d       	subi	r30, 0xD5	; 213
    2ad2:	f9 4e       	sbci	r31, 0xE9	; 233
    2ad4:	01 80       	ldd	r0, Z+1	; 0x01
    2ad6:	f2 81       	ldd	r31, Z+2	; 0x02
    2ad8:	e0 2d       	mov	r30, r0
    2ada:	17 96       	adiw	r26, 0x07	; 7
    2adc:	fc 93       	st	X, r31
    2ade:	ee 93       	st	-X, r30
    2ae0:	16 97       	sbiw	r26, 0x06	; 6
    2ae2:	46 81       	ldd	r20, Z+6	; 0x06
    2ae4:	57 81       	ldd	r21, Z+7	; 0x07
    2ae6:	19 96       	adiw	r26, 0x09	; 9
    2ae8:	5c 93       	st	X, r21
    2aea:	4e 93       	st	-X, r20
    2aec:	18 97       	sbiw	r26, 0x08	; 8
    2aee:	c6 81       	ldd	r28, Z+6	; 0x06
    2af0:	d7 81       	ldd	r29, Z+7	; 0x07
    2af2:	3d 83       	std	Y+5, r19	; 0x05
    2af4:	2c 83       	std	Y+4, r18	; 0x04
    2af6:	37 83       	std	Z+7, r19	; 0x07
    2af8:	26 83       	std	Z+6, r18	; 0x06
    2afa:	5a 96       	adiw	r26, 0x1a	; 26
    2afc:	ec 91       	ld	r30, X
    2afe:	5a 97       	sbiw	r26, 0x1a	; 26
    2b00:	8e 9f       	mul	r24, r30
    2b02:	f0 01       	movw	r30, r0
    2b04:	11 24       	eor	r1, r1
    2b06:	e5 5d       	subi	r30, 0xD5	; 213
    2b08:	f9 4e       	sbci	r31, 0xE9	; 233
    2b0a:	1d 96       	adiw	r26, 0x0d	; 13
    2b0c:	fc 93       	st	X, r31
    2b0e:	ee 93       	st	-X, r30
    2b10:	1c 97       	sbiw	r26, 0x0c	; 12
    2b12:	80 81       	ld	r24, Z
    2b14:	8f 5f       	subi	r24, 0xFF	; 255
    2b16:	80 83       	st	Z, r24
    2b18:	5a 96       	adiw	r26, 0x1a	; 26
    2b1a:	9c 91       	ld	r25, X
    2b1c:	e0 91 99 16 	lds	r30, 0x1699	; 0x801699 <pxCurrentTCB>
    2b20:	f0 91 9a 16 	lds	r31, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    2b24:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b26:	89 17       	cp	r24, r25
    2b28:	10 f4       	brcc	.+4      	; 0x2b2e <xTaskGenericNotify+0x1d4>
    2b2a:	0e 94 99 05 	call	0xb32	; 0xb32 <vPortYield>
    2b2e:	0f 90       	pop	r0
    2b30:	0f be       	out	0x3f, r0	; 63
    2b32:	80 2f       	mov	r24, r16
    2b34:	df 91       	pop	r29
    2b36:	cf 91       	pop	r28
    2b38:	0f 91       	pop	r16
    2b3a:	ff 90       	pop	r15
    2b3c:	ef 90       	pop	r14
    2b3e:	bf 90       	pop	r11
    2b40:	af 90       	pop	r10
    2b42:	9f 90       	pop	r9
    2b44:	8f 90       	pop	r8
    2b46:	08 95       	ret

00002b48 <xTaskGenericNotifyFromISR>:
    2b48:	8f 92       	push	r8
    2b4a:	9f 92       	push	r9
    2b4c:	af 92       	push	r10
    2b4e:	bf 92       	push	r11
    2b50:	cf 92       	push	r12
    2b52:	df 92       	push	r13
    2b54:	ef 92       	push	r14
    2b56:	ff 92       	push	r15
    2b58:	0f 93       	push	r16
    2b5a:	cf 93       	push	r28
    2b5c:	df 93       	push	r29
    2b5e:	dc 01       	movw	r26, r24
    2b60:	e1 14       	cp	r14, r1
    2b62:	f1 04       	cpc	r15, r1
    2b64:	89 f0       	breq	.+34     	; 0x2b88 <xTaskGenericNotifyFromISR+0x40>
    2b66:	e6 2f       	mov	r30, r22
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	ee 0f       	add	r30, r30
    2b6c:	ff 1f       	adc	r31, r31
    2b6e:	ee 0f       	add	r30, r30
    2b70:	ff 1f       	adc	r31, r31
    2b72:	e8 0f       	add	r30, r24
    2b74:	f9 1f       	adc	r31, r25
    2b76:	87 a4       	ldd	r8, Z+47	; 0x2f
    2b78:	90 a8       	ldd	r9, Z+48	; 0x30
    2b7a:	a1 a8       	ldd	r10, Z+49	; 0x31
    2b7c:	b2 a8       	ldd	r11, Z+50	; 0x32
    2b7e:	f7 01       	movw	r30, r14
    2b80:	80 82       	st	Z, r8
    2b82:	91 82       	std	Z+1, r9	; 0x01
    2b84:	a2 82       	std	Z+2, r10	; 0x02
    2b86:	b3 82       	std	Z+3, r11	; 0x03
    2b88:	70 e0       	ldi	r23, 0x00	; 0
    2b8a:	fd 01       	movw	r30, r26
    2b8c:	e6 0f       	add	r30, r22
    2b8e:	f7 1f       	adc	r31, r23
    2b90:	93 a9       	ldd	r25, Z+51	; 0x33
    2b92:	82 e0       	ldi	r24, 0x02	; 2
    2b94:	83 ab       	std	Z+51, r24	; 0x33
    2b96:	02 30       	cpi	r16, 0x02	; 2
    2b98:	01 f1       	breq	.+64     	; 0x2bda <xTaskGenericNotifyFromISR+0x92>
    2b9a:	18 f4       	brcc	.+6      	; 0x2ba2 <xTaskGenericNotifyFromISR+0x5a>
    2b9c:	01 30       	cpi	r16, 0x01	; 1
    2b9e:	31 f0       	breq	.+12     	; 0x2bac <xTaskGenericNotifyFromISR+0x64>
    2ba0:	4d c0       	rjmp	.+154    	; 0x2c3c <xTaskGenericNotifyFromISR+0xf4>
    2ba2:	03 30       	cpi	r16, 0x03	; 3
    2ba4:	79 f1       	breq	.+94     	; 0x2c04 <xTaskGenericNotifyFromISR+0xbc>
    2ba6:	04 30       	cpi	r16, 0x04	; 4
    2ba8:	d1 f1       	breq	.+116    	; 0x2c1e <xTaskGenericNotifyFromISR+0xd6>
    2baa:	48 c0       	rjmp	.+144    	; 0x2c3c <xTaskGenericNotifyFromISR+0xf4>
    2bac:	66 0f       	add	r22, r22
    2bae:	77 1f       	adc	r23, r23
    2bb0:	66 0f       	add	r22, r22
    2bb2:	77 1f       	adc	r23, r23
    2bb4:	fd 01       	movw	r30, r26
    2bb6:	e6 0f       	add	r30, r22
    2bb8:	f7 1f       	adc	r31, r23
    2bba:	87 a4       	ldd	r8, Z+47	; 0x2f
    2bbc:	90 a8       	ldd	r9, Z+48	; 0x30
    2bbe:	a1 a8       	ldd	r10, Z+49	; 0x31
    2bc0:	b2 a8       	ldd	r11, Z+50	; 0x32
    2bc2:	ba 01       	movw	r22, r20
    2bc4:	a9 01       	movw	r20, r18
    2bc6:	48 29       	or	r20, r8
    2bc8:	59 29       	or	r21, r9
    2bca:	6a 29       	or	r22, r10
    2bcc:	7b 29       	or	r23, r11
    2bce:	47 a7       	std	Z+47, r20	; 0x2f
    2bd0:	50 ab       	std	Z+48, r21	; 0x30
    2bd2:	61 ab       	std	Z+49, r22	; 0x31
    2bd4:	72 ab       	std	Z+50, r23	; 0x32
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	34 c0       	rjmp	.+104    	; 0x2c42 <xTaskGenericNotifyFromISR+0xfa>
    2bda:	66 0f       	add	r22, r22
    2bdc:	77 1f       	adc	r23, r23
    2bde:	66 0f       	add	r22, r22
    2be0:	77 1f       	adc	r23, r23
    2be2:	fd 01       	movw	r30, r26
    2be4:	e6 0f       	add	r30, r22
    2be6:	f7 1f       	adc	r31, r23
    2be8:	47 a5       	ldd	r20, Z+47	; 0x2f
    2bea:	50 a9       	ldd	r21, Z+48	; 0x30
    2bec:	61 a9       	ldd	r22, Z+49	; 0x31
    2bee:	72 a9       	ldd	r23, Z+50	; 0x32
    2bf0:	4f 5f       	subi	r20, 0xFF	; 255
    2bf2:	5f 4f       	sbci	r21, 0xFF	; 255
    2bf4:	6f 4f       	sbci	r22, 0xFF	; 255
    2bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf8:	47 a7       	std	Z+47, r20	; 0x2f
    2bfa:	50 ab       	std	Z+48, r21	; 0x30
    2bfc:	61 ab       	std	Z+49, r22	; 0x31
    2bfe:	72 ab       	std	Z+50, r23	; 0x32
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	1f c0       	rjmp	.+62     	; 0x2c42 <xTaskGenericNotifyFromISR+0xfa>
    2c04:	66 0f       	add	r22, r22
    2c06:	77 1f       	adc	r23, r23
    2c08:	66 0f       	add	r22, r22
    2c0a:	77 1f       	adc	r23, r23
    2c0c:	fd 01       	movw	r30, r26
    2c0e:	e6 0f       	add	r30, r22
    2c10:	f7 1f       	adc	r31, r23
    2c12:	27 a7       	std	Z+47, r18	; 0x2f
    2c14:	30 ab       	std	Z+48, r19	; 0x30
    2c16:	41 ab       	std	Z+49, r20	; 0x31
    2c18:	52 ab       	std	Z+50, r21	; 0x32
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	12 c0       	rjmp	.+36     	; 0x2c42 <xTaskGenericNotifyFromISR+0xfa>
    2c1e:	92 30       	cpi	r25, 0x02	; 2
    2c20:	79 f0       	breq	.+30     	; 0x2c40 <xTaskGenericNotifyFromISR+0xf8>
    2c22:	66 0f       	add	r22, r22
    2c24:	77 1f       	adc	r23, r23
    2c26:	66 0f       	add	r22, r22
    2c28:	77 1f       	adc	r23, r23
    2c2a:	fd 01       	movw	r30, r26
    2c2c:	e6 0f       	add	r30, r22
    2c2e:	f7 1f       	adc	r31, r23
    2c30:	27 a7       	std	Z+47, r18	; 0x2f
    2c32:	30 ab       	std	Z+48, r19	; 0x30
    2c34:	41 ab       	std	Z+49, r20	; 0x31
    2c36:	52 ab       	std	Z+50, r21	; 0x32
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	03 c0       	rjmp	.+6      	; 0x2c42 <xTaskGenericNotifyFromISR+0xfa>
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	01 c0       	rjmp	.+2      	; 0x2c42 <xTaskGenericNotifyFromISR+0xfa>
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	91 30       	cpi	r25, 0x01	; 1
    2c44:	09 f0       	breq	.+2      	; 0x2c48 <xTaskGenericNotifyFromISR+0x100>
    2c46:	96 c0       	rjmp	.+300    	; 0x2d74 <xTaskGenericNotifyFromISR+0x22c>
    2c48:	90 91 da 15 	lds	r25, 0x15DA	; 0x8015da <uxSchedulerSuspended>
    2c4c:	91 11       	cpse	r25, r1
    2c4e:	5f c0       	rjmp	.+190    	; 0x2d0e <xTaskGenericNotifyFromISR+0x1c6>
    2c50:	1c 96       	adiw	r26, 0x0c	; 12
    2c52:	ed 91       	ld	r30, X+
    2c54:	fc 91       	ld	r31, X
    2c56:	1d 97       	sbiw	r26, 0x0d	; 13
    2c58:	16 96       	adiw	r26, 0x06	; 6
    2c5a:	cd 91       	ld	r28, X+
    2c5c:	dc 91       	ld	r29, X
    2c5e:	17 97       	sbiw	r26, 0x07	; 7
    2c60:	18 96       	adiw	r26, 0x08	; 8
    2c62:	2d 91       	ld	r18, X+
    2c64:	3c 91       	ld	r19, X
    2c66:	19 97       	sbiw	r26, 0x09	; 9
    2c68:	3f 83       	std	Y+7, r19	; 0x07
    2c6a:	2e 83       	std	Y+6, r18	; 0x06
    2c6c:	18 96       	adiw	r26, 0x08	; 8
    2c6e:	cd 91       	ld	r28, X+
    2c70:	dc 91       	ld	r29, X
    2c72:	19 97       	sbiw	r26, 0x09	; 9
    2c74:	16 96       	adiw	r26, 0x06	; 6
    2c76:	2d 91       	ld	r18, X+
    2c78:	3c 91       	ld	r19, X
    2c7a:	17 97       	sbiw	r26, 0x07	; 7
    2c7c:	3d 83       	std	Y+5, r19	; 0x05
    2c7e:	2c 83       	std	Y+4, r18	; 0x04
    2c80:	41 81       	ldd	r20, Z+1	; 0x01
    2c82:	52 81       	ldd	r21, Z+2	; 0x02
    2c84:	9d 01       	movw	r18, r26
    2c86:	2e 5f       	subi	r18, 0xFE	; 254
    2c88:	3f 4f       	sbci	r19, 0xFF	; 255
    2c8a:	42 17       	cp	r20, r18
    2c8c:	53 07       	cpc	r21, r19
    2c8e:	31 f4       	brne	.+12     	; 0x2c9c <xTaskGenericNotifyFromISR+0x154>
    2c90:	18 96       	adiw	r26, 0x08	; 8
    2c92:	4d 91       	ld	r20, X+
    2c94:	5c 91       	ld	r21, X
    2c96:	19 97       	sbiw	r26, 0x09	; 9
    2c98:	52 83       	std	Z+2, r21	; 0x02
    2c9a:	41 83       	std	Z+1, r20	; 0x01
    2c9c:	1d 96       	adiw	r26, 0x0d	; 13
    2c9e:	1c 92       	st	X, r1
    2ca0:	1e 92       	st	-X, r1
    2ca2:	1c 97       	sbiw	r26, 0x0c	; 12
    2ca4:	90 81       	ld	r25, Z
    2ca6:	91 50       	subi	r25, 0x01	; 1
    2ca8:	90 83       	st	Z, r25
    2caa:	5a 96       	adiw	r26, 0x1a	; 26
    2cac:	ec 91       	ld	r30, X
    2cae:	5a 97       	sbiw	r26, 0x1a	; 26
    2cb0:	90 91 e9 15 	lds	r25, 0x15E9	; 0x8015e9 <uxTopReadyPriority>
    2cb4:	9e 17       	cp	r25, r30
    2cb6:	10 f4       	brcc	.+4      	; 0x2cbc <xTaskGenericNotifyFromISR+0x174>
    2cb8:	e0 93 e9 15 	sts	0x15E9, r30	; 0x8015e9 <uxTopReadyPriority>
    2cbc:	9b e0       	ldi	r25, 0x0B	; 11
    2cbe:	9e 9f       	mul	r25, r30
    2cc0:	f0 01       	movw	r30, r0
    2cc2:	11 24       	eor	r1, r1
    2cc4:	e5 5d       	subi	r30, 0xD5	; 213
    2cc6:	f9 4e       	sbci	r31, 0xE9	; 233
    2cc8:	01 80       	ldd	r0, Z+1	; 0x01
    2cca:	f2 81       	ldd	r31, Z+2	; 0x02
    2ccc:	e0 2d       	mov	r30, r0
    2cce:	17 96       	adiw	r26, 0x07	; 7
    2cd0:	fc 93       	st	X, r31
    2cd2:	ee 93       	st	-X, r30
    2cd4:	16 97       	sbiw	r26, 0x06	; 6
    2cd6:	46 81       	ldd	r20, Z+6	; 0x06
    2cd8:	57 81       	ldd	r21, Z+7	; 0x07
    2cda:	19 96       	adiw	r26, 0x09	; 9
    2cdc:	5c 93       	st	X, r21
    2cde:	4e 93       	st	-X, r20
    2ce0:	18 97       	sbiw	r26, 0x08	; 8
    2ce2:	c6 81       	ldd	r28, Z+6	; 0x06
    2ce4:	d7 81       	ldd	r29, Z+7	; 0x07
    2ce6:	3d 83       	std	Y+5, r19	; 0x05
    2ce8:	2c 83       	std	Y+4, r18	; 0x04
    2cea:	37 83       	std	Z+7, r19	; 0x07
    2cec:	26 83       	std	Z+6, r18	; 0x06
    2cee:	5a 96       	adiw	r26, 0x1a	; 26
    2cf0:	ec 91       	ld	r30, X
    2cf2:	5a 97       	sbiw	r26, 0x1a	; 26
    2cf4:	9e 9f       	mul	r25, r30
    2cf6:	f0 01       	movw	r30, r0
    2cf8:	11 24       	eor	r1, r1
    2cfa:	e5 5d       	subi	r30, 0xD5	; 213
    2cfc:	f9 4e       	sbci	r31, 0xE9	; 233
    2cfe:	1d 96       	adiw	r26, 0x0d	; 13
    2d00:	fc 93       	st	X, r31
    2d02:	ee 93       	st	-X, r30
    2d04:	1c 97       	sbiw	r26, 0x0c	; 12
    2d06:	90 81       	ld	r25, Z
    2d08:	9f 5f       	subi	r25, 0xFF	; 255
    2d0a:	90 83       	st	Z, r25
    2d0c:	21 c0       	rjmp	.+66     	; 0x2d50 <xTaskGenericNotifyFromISR+0x208>
    2d0e:	66 e0       	ldi	r22, 0x06	; 6
    2d10:	76 e1       	ldi	r23, 0x16	; 22
    2d12:	fb 01       	movw	r30, r22
    2d14:	c1 81       	ldd	r28, Z+1	; 0x01
    2d16:	d2 81       	ldd	r29, Z+2	; 0x02
    2d18:	53 96       	adiw	r26, 0x13	; 19
    2d1a:	dc 93       	st	X, r29
    2d1c:	ce 93       	st	-X, r28
    2d1e:	52 97       	sbiw	r26, 0x12	; 18
    2d20:	2e 81       	ldd	r18, Y+6	; 0x06
    2d22:	3f 81       	ldd	r19, Y+7	; 0x07
    2d24:	55 96       	adiw	r26, 0x15	; 21
    2d26:	3c 93       	st	X, r19
    2d28:	2e 93       	st	-X, r18
    2d2a:	54 97       	sbiw	r26, 0x14	; 20
    2d2c:	4e 81       	ldd	r20, Y+6	; 0x06
    2d2e:	5f 81       	ldd	r21, Y+7	; 0x07
    2d30:	9d 01       	movw	r18, r26
    2d32:	22 5f       	subi	r18, 0xF2	; 242
    2d34:	3f 4f       	sbci	r19, 0xFF	; 255
    2d36:	fa 01       	movw	r30, r20
    2d38:	35 83       	std	Z+5, r19	; 0x05
    2d3a:	24 83       	std	Z+4, r18	; 0x04
    2d3c:	3f 83       	std	Y+7, r19	; 0x07
    2d3e:	2e 83       	std	Y+6, r18	; 0x06
    2d40:	59 96       	adiw	r26, 0x19	; 25
    2d42:	7c 93       	st	X, r23
    2d44:	6e 93       	st	-X, r22
    2d46:	58 97       	sbiw	r26, 0x18	; 24
    2d48:	fb 01       	movw	r30, r22
    2d4a:	90 81       	ld	r25, Z
    2d4c:	9f 5f       	subi	r25, 0xFF	; 255
    2d4e:	90 83       	st	Z, r25
    2d50:	5a 96       	adiw	r26, 0x1a	; 26
    2d52:	2c 91       	ld	r18, X
    2d54:	e0 91 99 16 	lds	r30, 0x1699	; 0x801699 <pxCurrentTCB>
    2d58:	f0 91 9a 16 	lds	r31, 0x169A	; 0x80169a <pxCurrentTCB+0x1>
    2d5c:	92 8d       	ldd	r25, Z+26	; 0x1a
    2d5e:	92 17       	cp	r25, r18
    2d60:	48 f4       	brcc	.+18     	; 0x2d74 <xTaskGenericNotifyFromISR+0x22c>
    2d62:	c1 14       	cp	r12, r1
    2d64:	d1 04       	cpc	r13, r1
    2d66:	19 f0       	breq	.+6      	; 0x2d6e <xTaskGenericNotifyFromISR+0x226>
    2d68:	91 e0       	ldi	r25, 0x01	; 1
    2d6a:	f6 01       	movw	r30, r12
    2d6c:	90 83       	st	Z, r25
    2d6e:	91 e0       	ldi	r25, 0x01	; 1
    2d70:	90 93 e3 15 	sts	0x15E3, r25	; 0x8015e3 <xYieldPending>
    2d74:	df 91       	pop	r29
    2d76:	cf 91       	pop	r28
    2d78:	0f 91       	pop	r16
    2d7a:	ff 90       	pop	r15
    2d7c:	ef 90       	pop	r14
    2d7e:	df 90       	pop	r13
    2d80:	cf 90       	pop	r12
    2d82:	bf 90       	pop	r11
    2d84:	af 90       	pop	r10
    2d86:	9f 90       	pop	r9
    2d88:	8f 90       	pop	r8
    2d8a:	08 95       	ret

00002d8c <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2d8c:	00 97       	sbiw	r24, 0x00	; 0
    2d8e:	21 f4       	brne	.+8      	; 0x2d98 <xTaskGenericNotifyStateClear+0xc>
    2d90:	80 91 99 16 	lds	r24, 0x1699	; 0x801699 <pxCurrentTCB>
    2d94:	90 91 9a 16 	lds	r25, 0x169A	; 0x80169a <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2d98:	0f b6       	in	r0, 0x3f	; 63
    2d9a:	f8 94       	cli
    2d9c:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2d9e:	70 e0       	ldi	r23, 0x00	; 0
    2da0:	fc 01       	movw	r30, r24
    2da2:	e6 0f       	add	r30, r22
    2da4:	f7 1f       	adc	r31, r23
    2da6:	23 a9       	ldd	r18, Z+51	; 0x33
    2da8:	22 30       	cpi	r18, 0x02	; 2
    2daa:	31 f4       	brne	.+12     	; 0x2db8 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2dac:	fc 01       	movw	r30, r24
    2dae:	e6 0f       	add	r30, r22
    2db0:	f7 1f       	adc	r31, r23
    2db2:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	01 c0       	rjmp	.+2      	; 0x2dba <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2db8:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2dba:	0f 90       	pop	r0
    2dbc:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2dbe:	08 95       	ret

00002dc0 <prvGetNextExpireTime>:
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	e0 91 a5 16 	lds	r30, 0x16A5	; 0x8016a5 <pxCurrentTimerList>
    2dc6:	f0 91 a6 16 	lds	r31, 0x16A6	; 0x8016a6 <pxCurrentTimerList+0x1>
    2dca:	80 81       	ld	r24, Z
    2dcc:	91 e0       	ldi	r25, 0x01	; 1
    2dce:	81 11       	cpse	r24, r1
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	9c 93       	st	X, r25
    2dd4:	91 11       	cpse	r25, r1
    2dd6:	08 c0       	rjmp	.+16     	; 0x2de8 <prvGetNextExpireTime+0x28>
    2dd8:	07 80       	ldd	r0, Z+7	; 0x07
    2dda:	f0 85       	ldd	r31, Z+8	; 0x08
    2ddc:	e0 2d       	mov	r30, r0
    2dde:	60 81       	ld	r22, Z
    2de0:	71 81       	ldd	r23, Z+1	; 0x01
    2de2:	82 81       	ldd	r24, Z+2	; 0x02
    2de4:	93 81       	ldd	r25, Z+3	; 0x03
    2de6:	08 95       	ret
    2de8:	60 e0       	ldi	r22, 0x00	; 0
    2dea:	70 e0       	ldi	r23, 0x00	; 0
    2dec:	cb 01       	movw	r24, r22
    2dee:	08 95       	ret

00002df0 <prvInsertTimerInActiveList>:
    2df0:	cf 92       	push	r12
    2df2:	df 92       	push	r13
    2df4:	ef 92       	push	r14
    2df6:	ff 92       	push	r15
    2df8:	0f 93       	push	r16
    2dfa:	1f 93       	push	r17
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	42 83       	std	Z+2, r20	; 0x02
    2e00:	53 83       	std	Z+3, r21	; 0x03
    2e02:	64 83       	std	Z+4, r22	; 0x04
    2e04:	75 83       	std	Z+5, r23	; 0x05
    2e06:	93 87       	std	Z+11, r25	; 0x0b
    2e08:	82 87       	std	Z+10, r24	; 0x0a
    2e0a:	04 17       	cp	r16, r20
    2e0c:	15 07       	cpc	r17, r21
    2e0e:	26 07       	cpc	r18, r22
    2e10:	37 07       	cpc	r19, r23
    2e12:	c0 f0       	brcs	.+48     	; 0x2e44 <prvInsertTimerInActiveList+0x54>
    2e14:	0c 19       	sub	r16, r12
    2e16:	1d 09       	sbc	r17, r13
    2e18:	2e 09       	sbc	r18, r14
    2e1a:	3f 09       	sbc	r19, r15
    2e1c:	86 85       	ldd	r24, Z+14	; 0x0e
    2e1e:	97 85       	ldd	r25, Z+15	; 0x0f
    2e20:	a0 89       	ldd	r26, Z+16	; 0x10
    2e22:	b1 89       	ldd	r27, Z+17	; 0x11
    2e24:	08 17       	cp	r16, r24
    2e26:	19 07       	cpc	r17, r25
    2e28:	2a 07       	cpc	r18, r26
    2e2a:	3b 07       	cpc	r19, r27
    2e2c:	00 f5       	brcc	.+64     	; 0x2e6e <prvInsertTimerInActiveList+0x7e>
    2e2e:	bf 01       	movw	r22, r30
    2e30:	6e 5f       	subi	r22, 0xFE	; 254
    2e32:	7f 4f       	sbci	r23, 0xFF	; 255
    2e34:	80 91 a3 16 	lds	r24, 0x16A3	; 0x8016a3 <pxOverflowTimerList>
    2e38:	90 91 a4 16 	lds	r25, 0x16A4	; 0x8016a4 <pxOverflowTimerList+0x1>
    2e3c:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <vListInsert>
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	18 c0       	rjmp	.+48     	; 0x2e74 <prvInsertTimerInActiveList+0x84>
    2e44:	0c 15       	cp	r16, r12
    2e46:	1d 05       	cpc	r17, r13
    2e48:	2e 05       	cpc	r18, r14
    2e4a:	3f 05       	cpc	r19, r15
    2e4c:	28 f4       	brcc	.+10     	; 0x2e58 <prvInsertTimerInActiveList+0x68>
    2e4e:	4c 15       	cp	r20, r12
    2e50:	5d 05       	cpc	r21, r13
    2e52:	6e 05       	cpc	r22, r14
    2e54:	7f 05       	cpc	r23, r15
    2e56:	68 f4       	brcc	.+26     	; 0x2e72 <prvInsertTimerInActiveList+0x82>
    2e58:	bf 01       	movw	r22, r30
    2e5a:	6e 5f       	subi	r22, 0xFE	; 254
    2e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e5e:	80 91 a5 16 	lds	r24, 0x16A5	; 0x8016a5 <pxCurrentTimerList>
    2e62:	90 91 a6 16 	lds	r25, 0x16A6	; 0x8016a6 <pxCurrentTimerList+0x1>
    2e66:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <vListInsert>
    2e6a:	80 e0       	ldi	r24, 0x00	; 0
    2e6c:	03 c0       	rjmp	.+6      	; 0x2e74 <prvInsertTimerInActiveList+0x84>
    2e6e:	81 e0       	ldi	r24, 0x01	; 1
    2e70:	01 c0       	rjmp	.+2      	; 0x2e74 <prvInsertTimerInActiveList+0x84>
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	1f 91       	pop	r17
    2e76:	0f 91       	pop	r16
    2e78:	ff 90       	pop	r15
    2e7a:	ef 90       	pop	r14
    2e7c:	df 90       	pop	r13
    2e7e:	cf 90       	pop	r12
    2e80:	08 95       	ret

00002e82 <prvCheckForValidListAndQueue>:
    2e82:	0f b6       	in	r0, 0x3f	; 63
    2e84:	f8 94       	cli
    2e86:	0f 92       	push	r0
    2e88:	80 91 a1 16 	lds	r24, 0x16A1	; 0x8016a1 <xTimerQueue>
    2e8c:	90 91 a2 16 	lds	r25, 0x16A2	; 0x8016a2 <xTimerQueue+0x1>
    2e90:	89 2b       	or	r24, r25
    2e92:	e9 f4       	brne	.+58     	; 0x2ece <prvCheckForValidListAndQueue+0x4c>
    2e94:	82 eb       	ldi	r24, 0xB2	; 178
    2e96:	96 e1       	ldi	r25, 0x16	; 22
    2e98:	0e 94 cb 04 	call	0x996	; 0x996 <vListInitialise>
    2e9c:	87 ea       	ldi	r24, 0xA7	; 167
    2e9e:	96 e1       	ldi	r25, 0x16	; 22
    2ea0:	0e 94 cb 04 	call	0x996	; 0x996 <vListInitialise>
    2ea4:	82 eb       	ldi	r24, 0xB2	; 178
    2ea6:	96 e1       	ldi	r25, 0x16	; 22
    2ea8:	90 93 a6 16 	sts	0x16A6, r25	; 0x8016a6 <pxCurrentTimerList+0x1>
    2eac:	80 93 a5 16 	sts	0x16A5, r24	; 0x8016a5 <pxCurrentTimerList>
    2eb0:	87 ea       	ldi	r24, 0xA7	; 167
    2eb2:	96 e1       	ldi	r25, 0x16	; 22
    2eb4:	90 93 a4 16 	sts	0x16A4, r25	; 0x8016a4 <pxOverflowTimerList+0x1>
    2eb8:	80 93 a3 16 	sts	0x16A3, r24	; 0x8016a3 <pxOverflowTimerList>
    2ebc:	40 e0       	ldi	r20, 0x00	; 0
    2ebe:	67 e0       	ldi	r22, 0x07	; 7
    2ec0:	8a e0       	ldi	r24, 0x0A	; 10
    2ec2:	0e 94 7e 07 	call	0xefc	; 0xefc <xQueueGenericCreate>
    2ec6:	90 93 a2 16 	sts	0x16A2, r25	; 0x8016a2 <xTimerQueue+0x1>
    2eca:	80 93 a1 16 	sts	0x16A1, r24	; 0x8016a1 <xTimerQueue>
    2ece:	0f 90       	pop	r0
    2ed0:	0f be       	out	0x3f, r0	; 63
    2ed2:	08 95       	ret

00002ed4 <xTimerCreateTimerTask>:
    2ed4:	ef 92       	push	r14
    2ed6:	ff 92       	push	r15
    2ed8:	0f 93       	push	r16
    2eda:	d3 df       	rcall	.-90     	; 0x2e82 <prvCheckForValidListAndQueue>
    2edc:	80 91 a1 16 	lds	r24, 0x16A1	; 0x8016a1 <xTimerQueue>
    2ee0:	90 91 a2 16 	lds	r25, 0x16A2	; 0x8016a2 <xTimerQueue+0x1>
    2ee4:	89 2b       	or	r24, r25
    2ee6:	91 f0       	breq	.+36     	; 0x2f0c <xTimerCreateTimerTask+0x38>
    2ee8:	0f 2e       	mov	r0, r31
    2eea:	ff e9       	ldi	r31, 0x9F	; 159
    2eec:	ef 2e       	mov	r14, r31
    2eee:	f6 e1       	ldi	r31, 0x16	; 22
    2ef0:	ff 2e       	mov	r15, r31
    2ef2:	f0 2d       	mov	r31, r0
    2ef4:	03 e0       	ldi	r16, 0x03	; 3
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	40 ec       	ldi	r20, 0xC0	; 192
    2efc:	50 e0       	ldi	r21, 0x00	; 0
    2efe:	6c e2       	ldi	r22, 0x2C	; 44
    2f00:	75 e0       	ldi	r23, 0x05	; 5
    2f02:	87 ed       	ldi	r24, 0xD7	; 215
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <xTaskCreate>
    2f0a:	01 c0       	rjmp	.+2      	; 0x2f0e <xTimerCreateTimerTask+0x3a>
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	0f 91       	pop	r16
    2f10:	ff 90       	pop	r15
    2f12:	ef 90       	pop	r14
    2f14:	08 95       	ret

00002f16 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2f16:	8f 92       	push	r8
    2f18:	9f 92       	push	r9
    2f1a:	af 92       	push	r10
    2f1c:	bf 92       	push	r11
    2f1e:	cf 92       	push	r12
    2f20:	df 92       	push	r13
    2f22:	ef 92       	push	r14
    2f24:	ff 92       	push	r15
    2f26:	0f 93       	push	r16
    2f28:	1f 93       	push	r17
    2f2a:	cf 93       	push	r28
    2f2c:	df 93       	push	r29
    2f2e:	cd b7       	in	r28, 0x3d	; 61
    2f30:	de b7       	in	r29, 0x3e	; 62
    2f32:	27 97       	sbiw	r28, 0x07	; 7
    2f34:	0f b6       	in	r0, 0x3f	; 63
    2f36:	f8 94       	cli
    2f38:	de bf       	out	0x3e, r29	; 62
    2f3a:	0f be       	out	0x3f, r0	; 63
    2f3c:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2f3e:	e0 91 a1 16 	lds	r30, 0x16A1	; 0x8016a1 <xTimerQueue>
    2f42:	f0 91 a2 16 	lds	r31, 0x16A2	; 0x8016a2 <xTimerQueue+0x1>
    2f46:	30 97       	sbiw	r30, 0x00	; 0
    2f48:	81 f1       	breq	.+96     	; 0x2faa <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2f4a:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2f4c:	2a 83       	std	Y+2, r18	; 0x02
    2f4e:	3b 83       	std	Y+3, r19	; 0x03
    2f50:	4c 83       	std	Y+4, r20	; 0x04
    2f52:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2f54:	9f 83       	std	Y+7, r25	; 0x07
    2f56:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2f58:	66 30       	cpi	r22, 0x06	; 6
    2f5a:	f4 f4       	brge	.+60     	; 0x2f98 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2f5c:	ee db       	rcall	.-2084   	; 0x273a <xTaskGetSchedulerState>
    2f5e:	82 30       	cpi	r24, 0x02	; 2
    2f60:	69 f4       	brne	.+26     	; 0x2f7c <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2f62:	00 e0       	ldi	r16, 0x00	; 0
    2f64:	a7 01       	movw	r20, r14
    2f66:	96 01       	movw	r18, r12
    2f68:	be 01       	movw	r22, r28
    2f6a:	6f 5f       	subi	r22, 0xFF	; 255
    2f6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f6e:	80 91 a1 16 	lds	r24, 0x16A1	; 0x8016a1 <xTimerQueue>
    2f72:	90 91 a2 16 	lds	r25, 0x16A2	; 0x8016a2 <xTimerQueue+0x1>
    2f76:	0e 94 a1 07 	call	0xf42	; 0xf42 <xQueueGenericSend>
    2f7a:	18 c0       	rjmp	.+48     	; 0x2fac <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2f7c:	00 e0       	ldi	r16, 0x00	; 0
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	a9 01       	movw	r20, r18
    2f84:	be 01       	movw	r22, r28
    2f86:	6f 5f       	subi	r22, 0xFF	; 255
    2f88:	7f 4f       	sbci	r23, 0xFF	; 255
    2f8a:	80 91 a1 16 	lds	r24, 0x16A1	; 0x8016a1 <xTimerQueue>
    2f8e:	90 91 a2 16 	lds	r25, 0x16A2	; 0x8016a2 <xTimerQueue+0x1>
    2f92:	0e 94 a1 07 	call	0xf42	; 0xf42 <xQueueGenericSend>
    2f96:	0a c0       	rjmp	.+20     	; 0x2fac <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	a8 01       	movw	r20, r16
    2f9c:	be 01       	movw	r22, r28
    2f9e:	6f 5f       	subi	r22, 0xFF	; 255
    2fa0:	7f 4f       	sbci	r23, 0xFF	; 255
    2fa2:	cf 01       	movw	r24, r30
    2fa4:	0e 94 51 08 	call	0x10a2	; 0x10a2 <xQueueGenericSendFromISR>
    2fa8:	01 c0       	rjmp	.+2      	; 0x2fac <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2faa:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2fac:	27 96       	adiw	r28, 0x07	; 7
    2fae:	0f b6       	in	r0, 0x3f	; 63
    2fb0:	f8 94       	cli
    2fb2:	de bf       	out	0x3e, r29	; 62
    2fb4:	0f be       	out	0x3f, r0	; 63
    2fb6:	cd bf       	out	0x3d, r28	; 61
    2fb8:	df 91       	pop	r29
    2fba:	cf 91       	pop	r28
    2fbc:	1f 91       	pop	r17
    2fbe:	0f 91       	pop	r16
    2fc0:	ff 90       	pop	r15
    2fc2:	ef 90       	pop	r14
    2fc4:	df 90       	pop	r13
    2fc6:	cf 90       	pop	r12
    2fc8:	bf 90       	pop	r11
    2fca:	af 90       	pop	r10
    2fcc:	9f 90       	pop	r9
    2fce:	8f 90       	pop	r8
    2fd0:	08 95       	ret

00002fd2 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2fd2:	8f 92       	push	r8
    2fd4:	9f 92       	push	r9
    2fd6:	af 92       	push	r10
    2fd8:	bf 92       	push	r11
    2fda:	cf 92       	push	r12
    2fdc:	df 92       	push	r13
    2fde:	ef 92       	push	r14
    2fe0:	ff 92       	push	r15
    2fe2:	0f 93       	push	r16
    2fe4:	1f 93       	push	r17
    2fe6:	cf 93       	push	r28
    2fe8:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2fea:	3b c0       	rjmp	.+118    	; 0x3062 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2fec:	07 80       	ldd	r0, Z+7	; 0x07
    2fee:	f0 85       	ldd	r31, Z+8	; 0x08
    2ff0:	e0 2d       	mov	r30, r0
    2ff2:	80 80       	ld	r8, Z
    2ff4:	91 80       	ldd	r9, Z+1	; 0x01
    2ff6:	a2 80       	ldd	r10, Z+2	; 0x02
    2ff8:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2ffa:	c0 85       	ldd	r28, Z+8	; 0x08
    2ffc:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2ffe:	8e 01       	movw	r16, r28
    3000:	0e 5f       	subi	r16, 0xFE	; 254
    3002:	1f 4f       	sbci	r17, 0xFF	; 255
    3004:	c8 01       	movw	r24, r16
    3006:	0e 94 1d 05 	call	0xa3a	; 0xa3a <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    300a:	ec 89       	ldd	r30, Y+20	; 0x14
    300c:	fd 89       	ldd	r31, Y+21	; 0x15
    300e:	ce 01       	movw	r24, r28
    3010:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3012:	8e 89       	ldd	r24, Y+22	; 0x16
    3014:	82 ff       	sbrs	r24, 2
    3016:	25 c0       	rjmp	.+74     	; 0x3062 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3018:	8e 85       	ldd	r24, Y+14	; 0x0e
    301a:	9f 85       	ldd	r25, Y+15	; 0x0f
    301c:	a8 89       	ldd	r26, Y+16	; 0x10
    301e:	b9 89       	ldd	r27, Y+17	; 0x11
    3020:	88 0d       	add	r24, r8
    3022:	99 1d       	adc	r25, r9
    3024:	aa 1d       	adc	r26, r10
    3026:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    3028:	88 16       	cp	r8, r24
    302a:	99 06       	cpc	r9, r25
    302c:	aa 06       	cpc	r10, r26
    302e:	bb 06       	cpc	r11, r27
    3030:	70 f4       	brcc	.+28     	; 0x304e <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3032:	8a 83       	std	Y+2, r24	; 0x02
    3034:	9b 83       	std	Y+3, r25	; 0x03
    3036:	ac 83       	std	Y+4, r26	; 0x04
    3038:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    303a:	db 87       	std	Y+11, r29	; 0x0b
    303c:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    303e:	b8 01       	movw	r22, r16
    3040:	80 91 a5 16 	lds	r24, 0x16A5	; 0x8016a5 <pxCurrentTimerList>
    3044:	90 91 a6 16 	lds	r25, 0x16A6	; 0x8016a6 <pxCurrentTimerList+0x1>
    3048:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <vListInsert>
    304c:	0a c0       	rjmp	.+20     	; 0x3062 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    304e:	c1 2c       	mov	r12, r1
    3050:	d1 2c       	mov	r13, r1
    3052:	76 01       	movw	r14, r12
    3054:	00 e0       	ldi	r16, 0x00	; 0
    3056:	10 e0       	ldi	r17, 0x00	; 0
    3058:	a5 01       	movw	r20, r10
    305a:	94 01       	movw	r18, r8
    305c:	60 e0       	ldi	r22, 0x00	; 0
    305e:	ce 01       	movw	r24, r28
    3060:	5a df       	rcall	.-332    	; 0x2f16 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3062:	e0 91 a5 16 	lds	r30, 0x16A5	; 0x8016a5 <pxCurrentTimerList>
    3066:	f0 91 a6 16 	lds	r31, 0x16A6	; 0x8016a6 <pxCurrentTimerList+0x1>
    306a:	80 81       	ld	r24, Z
    306c:	81 11       	cpse	r24, r1
    306e:	be cf       	rjmp	.-132    	; 0x2fec <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3070:	80 91 a3 16 	lds	r24, 0x16A3	; 0x8016a3 <pxOverflowTimerList>
    3074:	90 91 a4 16 	lds	r25, 0x16A4	; 0x8016a4 <pxOverflowTimerList+0x1>
    3078:	90 93 a6 16 	sts	0x16A6, r25	; 0x8016a6 <pxCurrentTimerList+0x1>
    307c:	80 93 a5 16 	sts	0x16A5, r24	; 0x8016a5 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3080:	f0 93 a4 16 	sts	0x16A4, r31	; 0x8016a4 <pxOverflowTimerList+0x1>
    3084:	e0 93 a3 16 	sts	0x16A3, r30	; 0x8016a3 <pxOverflowTimerList>
    }
    3088:	df 91       	pop	r29
    308a:	cf 91       	pop	r28
    308c:	1f 91       	pop	r17
    308e:	0f 91       	pop	r16
    3090:	ff 90       	pop	r15
    3092:	ef 90       	pop	r14
    3094:	df 90       	pop	r13
    3096:	cf 90       	pop	r12
    3098:	bf 90       	pop	r11
    309a:	af 90       	pop	r10
    309c:	9f 90       	pop	r9
    309e:	8f 90       	pop	r8
    30a0:	08 95       	ret

000030a2 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    30a2:	cf 92       	push	r12
    30a4:	df 92       	push	r13
    30a6:	ef 92       	push	r14
    30a8:	ff 92       	push	r15
    30aa:	cf 93       	push	r28
    30ac:	df 93       	push	r29
    30ae:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    30b0:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <xTaskGetTickCount>
    30b4:	6b 01       	movw	r12, r22
    30b6:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    30b8:	80 91 9b 16 	lds	r24, 0x169B	; 0x80169b <xLastTime.2436>
    30bc:	90 91 9c 16 	lds	r25, 0x169C	; 0x80169c <xLastTime.2436+0x1>
    30c0:	a0 91 9d 16 	lds	r26, 0x169D	; 0x80169d <xLastTime.2436+0x2>
    30c4:	b0 91 9e 16 	lds	r27, 0x169E	; 0x80169e <xLastTime.2436+0x3>
    30c8:	c8 16       	cp	r12, r24
    30ca:	d9 06       	cpc	r13, r25
    30cc:	ea 06       	cpc	r14, r26
    30ce:	fb 06       	cpc	r15, r27
    30d0:	20 f4       	brcc	.+8      	; 0x30da <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    30d2:	7f df       	rcall	.-258    	; 0x2fd2 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	88 83       	st	Y, r24
    30d8:	01 c0       	rjmp	.+2      	; 0x30dc <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    30da:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    30dc:	c0 92 9b 16 	sts	0x169B, r12	; 0x80169b <xLastTime.2436>
    30e0:	d0 92 9c 16 	sts	0x169C, r13	; 0x80169c <xLastTime.2436+0x1>
    30e4:	e0 92 9d 16 	sts	0x169D, r14	; 0x80169d <xLastTime.2436+0x2>
    30e8:	f0 92 9e 16 	sts	0x169E, r15	; 0x80169e <xLastTime.2436+0x3>

        return xTimeNow;
    }
    30ec:	c7 01       	movw	r24, r14
    30ee:	b6 01       	movw	r22, r12
    30f0:	df 91       	pop	r29
    30f2:	cf 91       	pop	r28
    30f4:	ff 90       	pop	r15
    30f6:	ef 90       	pop	r14
    30f8:	df 90       	pop	r13
    30fa:	cf 90       	pop	r12
    30fc:	08 95       	ret

000030fe <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    30fe:	4f 92       	push	r4
    3100:	5f 92       	push	r5
    3102:	6f 92       	push	r6
    3104:	7f 92       	push	r7
    3106:	8f 92       	push	r8
    3108:	9f 92       	push	r9
    310a:	af 92       	push	r10
    310c:	bf 92       	push	r11
    310e:	cf 92       	push	r12
    3110:	df 92       	push	r13
    3112:	ef 92       	push	r14
    3114:	ff 92       	push	r15
    3116:	0f 93       	push	r16
    3118:	1f 93       	push	r17
    311a:	cf 93       	push	r28
    311c:	df 93       	push	r29
    311e:	4b 01       	movw	r8, r22
    3120:	5c 01       	movw	r10, r24
    3122:	29 01       	movw	r4, r18
    3124:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3126:	e0 91 a5 16 	lds	r30, 0x16A5	; 0x8016a5 <pxCurrentTimerList>
    312a:	f0 91 a6 16 	lds	r31, 0x16A6	; 0x8016a6 <pxCurrentTimerList+0x1>
    312e:	07 80       	ldd	r0, Z+7	; 0x07
    3130:	f0 85       	ldd	r31, Z+8	; 0x08
    3132:	e0 2d       	mov	r30, r0
    3134:	c0 85       	ldd	r28, Z+8	; 0x08
    3136:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3138:	ce 01       	movw	r24, r28
    313a:	02 96       	adiw	r24, 0x02	; 2
    313c:	0e 94 1d 05 	call	0xa3a	; 0xa3a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3140:	8e 89       	ldd	r24, Y+22	; 0x16
    3142:	82 ff       	sbrs	r24, 2
    3144:	1b c0       	rjmp	.+54     	; 0x317c <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3146:	4e 85       	ldd	r20, Y+14	; 0x0e
    3148:	5f 85       	ldd	r21, Y+15	; 0x0f
    314a:	68 89       	ldd	r22, Y+16	; 0x10
    314c:	79 89       	ldd	r23, Y+17	; 0x11
    314e:	48 0d       	add	r20, r8
    3150:	59 1d       	adc	r21, r9
    3152:	6a 1d       	adc	r22, r10
    3154:	7b 1d       	adc	r23, r11
    3156:	75 01       	movw	r14, r10
    3158:	64 01       	movw	r12, r8
    315a:	93 01       	movw	r18, r6
    315c:	82 01       	movw	r16, r4
    315e:	ce 01       	movw	r24, r28
    3160:	47 de       	rcall	.-882    	; 0x2df0 <prvInsertTimerInActiveList>
    3162:	88 23       	and	r24, r24
    3164:	69 f0       	breq	.+26     	; 0x3180 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3166:	c1 2c       	mov	r12, r1
    3168:	d1 2c       	mov	r13, r1
    316a:	76 01       	movw	r14, r12
    316c:	00 e0       	ldi	r16, 0x00	; 0
    316e:	10 e0       	ldi	r17, 0x00	; 0
    3170:	a5 01       	movw	r20, r10
    3172:	94 01       	movw	r18, r8
    3174:	60 e0       	ldi	r22, 0x00	; 0
    3176:	ce 01       	movw	r24, r28
    3178:	ce de       	rcall	.-612    	; 0x2f16 <xTimerGenericCommand>
    317a:	02 c0       	rjmp	.+4      	; 0x3180 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    317c:	8e 7f       	andi	r24, 0xFE	; 254
    317e:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3180:	ec 89       	ldd	r30, Y+20	; 0x14
    3182:	fd 89       	ldd	r31, Y+21	; 0x15
    3184:	ce 01       	movw	r24, r28
    3186:	19 95       	eicall
    }
    3188:	df 91       	pop	r29
    318a:	cf 91       	pop	r28
    318c:	1f 91       	pop	r17
    318e:	0f 91       	pop	r16
    3190:	ff 90       	pop	r15
    3192:	ef 90       	pop	r14
    3194:	df 90       	pop	r13
    3196:	cf 90       	pop	r12
    3198:	bf 90       	pop	r11
    319a:	af 90       	pop	r10
    319c:	9f 90       	pop	r9
    319e:	8f 90       	pop	r8
    31a0:	7f 90       	pop	r7
    31a2:	6f 90       	pop	r6
    31a4:	5f 90       	pop	r5
    31a6:	4f 90       	pop	r4
    31a8:	08 95       	ret

000031aa <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    31aa:	8f 92       	push	r8
    31ac:	9f 92       	push	r9
    31ae:	af 92       	push	r10
    31b0:	bf 92       	push	r11
    31b2:	cf 92       	push	r12
    31b4:	df 92       	push	r13
    31b6:	ef 92       	push	r14
    31b8:	ff 92       	push	r15
    31ba:	1f 93       	push	r17
    31bc:	cf 93       	push	r28
    31be:	df 93       	push	r29
    31c0:	1f 92       	push	r1
    31c2:	cd b7       	in	r28, 0x3d	; 61
    31c4:	de b7       	in	r29, 0x3e	; 62
    31c6:	6b 01       	movw	r12, r22
    31c8:	7c 01       	movw	r14, r24
    31ca:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    31cc:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    31d0:	ce 01       	movw	r24, r28
    31d2:	01 96       	adiw	r24, 0x01	; 1
    31d4:	66 df       	rcall	.-308    	; 0x30a2 <prvSampleTimeNow>
    31d6:	4b 01       	movw	r8, r22
    31d8:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    31da:	89 81       	ldd	r24, Y+1	; 0x01
    31dc:	81 11       	cpse	r24, r1
    31de:	2d c0       	rjmp	.+90     	; 0x323a <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    31e0:	11 11       	cpse	r17, r1
    31e2:	0d c0       	rjmp	.+26     	; 0x31fe <prvProcessTimerOrBlockTask+0x54>
    31e4:	8c 14       	cp	r8, r12
    31e6:	9d 04       	cpc	r9, r13
    31e8:	ae 04       	cpc	r10, r14
    31ea:	bf 04       	cpc	r11, r15
    31ec:	40 f0       	brcs	.+16     	; 0x31fe <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    31ee:	0e 94 3e 10 	call	0x207c	; 0x207c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    31f2:	a5 01       	movw	r20, r10
    31f4:	94 01       	movw	r18, r8
    31f6:	c7 01       	movw	r24, r14
    31f8:	b6 01       	movw	r22, r12
    31fa:	81 df       	rcall	.-254    	; 0x30fe <prvProcessExpiredTimer>
    31fc:	20 c0       	rjmp	.+64     	; 0x323e <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    31fe:	11 23       	and	r17, r17
    3200:	41 f0       	breq	.+16     	; 0x3212 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3202:	e0 91 a3 16 	lds	r30, 0x16A3	; 0x8016a3 <pxOverflowTimerList>
    3206:	f0 91 a4 16 	lds	r31, 0x16A4	; 0x8016a4 <pxOverflowTimerList+0x1>
    320a:	80 81       	ld	r24, Z
    320c:	11 e0       	ldi	r17, 0x01	; 1
    320e:	81 11       	cpse	r24, r1
    3210:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3212:	b7 01       	movw	r22, r14
    3214:	a6 01       	movw	r20, r12
    3216:	48 19       	sub	r20, r8
    3218:	59 09       	sbc	r21, r9
    321a:	6a 09       	sbc	r22, r10
    321c:	7b 09       	sbc	r23, r11
    321e:	21 2f       	mov	r18, r17
    3220:	80 91 a1 16 	lds	r24, 0x16A1	; 0x8016a1 <xTimerQueue>
    3224:	90 91 a2 16 	lds	r25, 0x16A2	; 0x8016a2 <xTimerQueue+0x1>
    3228:	0e 94 1b 09 	call	0x1236	; 0x1236 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    322c:	0e 94 3e 10 	call	0x207c	; 0x207c <xTaskResumeAll>
    3230:	81 11       	cpse	r24, r1
    3232:	05 c0       	rjmp	.+10     	; 0x323e <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3234:	0e 94 99 05 	call	0xb32	; 0xb32 <vPortYield>
    3238:	02 c0       	rjmp	.+4      	; 0x323e <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    323a:	0e 94 3e 10 	call	0x207c	; 0x207c <xTaskResumeAll>
            }
        }
    }
    323e:	0f 90       	pop	r0
    3240:	df 91       	pop	r29
    3242:	cf 91       	pop	r28
    3244:	1f 91       	pop	r17
    3246:	ff 90       	pop	r15
    3248:	ef 90       	pop	r14
    324a:	df 90       	pop	r13
    324c:	cf 90       	pop	r12
    324e:	bf 90       	pop	r11
    3250:	af 90       	pop	r10
    3252:	9f 90       	pop	r9
    3254:	8f 90       	pop	r8
    3256:	08 95       	ret

00003258 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3258:	af 92       	push	r10
    325a:	bf 92       	push	r11
    325c:	cf 92       	push	r12
    325e:	df 92       	push	r13
    3260:	ef 92       	push	r14
    3262:	ff 92       	push	r15
    3264:	0f 93       	push	r16
    3266:	1f 93       	push	r17
    3268:	cf 93       	push	r28
    326a:	df 93       	push	r29
    326c:	cd b7       	in	r28, 0x3d	; 61
    326e:	de b7       	in	r29, 0x3e	; 62
    3270:	28 97       	sbiw	r28, 0x08	; 8
    3272:	0f b6       	in	r0, 0x3f	; 63
    3274:	f8 94       	cli
    3276:	de bf       	out	0x3e, r29	; 62
    3278:	0f be       	out	0x3f, r0	; 63
    327a:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    327c:	82 c0       	rjmp	.+260    	; 0x3382 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    327e:	89 81       	ldd	r24, Y+1	; 0x01
    3280:	88 23       	and	r24, r24
    3282:	0c f4       	brge	.+2      	; 0x3286 <prvProcessReceivedCommands+0x2e>
    3284:	7e c0       	rjmp	.+252    	; 0x3382 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3286:	ae 80       	ldd	r10, Y+6	; 0x06
    3288:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    328a:	d5 01       	movw	r26, r10
    328c:	1c 96       	adiw	r26, 0x0c	; 12
    328e:	8d 91       	ld	r24, X+
    3290:	9c 91       	ld	r25, X
    3292:	1d 97       	sbiw	r26, 0x0d	; 13
    3294:	89 2b       	or	r24, r25
    3296:	21 f0       	breq	.+8      	; 0x32a0 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3298:	c5 01       	movw	r24, r10
    329a:	02 96       	adiw	r24, 0x02	; 2
    329c:	0e 94 1d 05 	call	0xa3a	; 0xa3a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    32a0:	ce 01       	movw	r24, r28
    32a2:	08 96       	adiw	r24, 0x08	; 8
    32a4:	fe de       	rcall	.-516    	; 0x30a2 <prvSampleTimeNow>
    32a6:	8b 01       	movw	r16, r22
    32a8:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    32aa:	e9 81       	ldd	r30, Y+1	; 0x01
    32ac:	0e 2e       	mov	r0, r30
    32ae:	00 0c       	add	r0, r0
    32b0:	ff 0b       	sbc	r31, r31
    32b2:	ea 30       	cpi	r30, 0x0A	; 10
    32b4:	f1 05       	cpc	r31, r1
    32b6:	08 f0       	brcs	.+2      	; 0x32ba <prvProcessReceivedCommands+0x62>
    32b8:	64 c0       	rjmp	.+200    	; 0x3382 <prvProcessReceivedCommands+0x12a>
    32ba:	88 27       	eor	r24, r24
    32bc:	ee 58       	subi	r30, 0x8E	; 142
    32be:	ff 4f       	sbci	r31, 0xFF	; 255
    32c0:	8f 4f       	sbci	r24, 0xFF	; 255
    32c2:	0c 94 3f 29 	jmp	0x527e	; 0x527e <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    32c6:	f5 01       	movw	r30, r10
    32c8:	86 89       	ldd	r24, Z+22	; 0x16
    32ca:	81 60       	ori	r24, 0x01	; 1
    32cc:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    32ce:	ca 80       	ldd	r12, Y+2	; 0x02
    32d0:	db 80       	ldd	r13, Y+3	; 0x03
    32d2:	ec 80       	ldd	r14, Y+4	; 0x04
    32d4:	fd 80       	ldd	r15, Y+5	; 0x05
    32d6:	46 85       	ldd	r20, Z+14	; 0x0e
    32d8:	57 85       	ldd	r21, Z+15	; 0x0f
    32da:	60 89       	ldd	r22, Z+16	; 0x10
    32dc:	71 89       	ldd	r23, Z+17	; 0x11
    32de:	4c 0d       	add	r20, r12
    32e0:	5d 1d       	adc	r21, r13
    32e2:	6e 1d       	adc	r22, r14
    32e4:	7f 1d       	adc	r23, r15
    32e6:	c5 01       	movw	r24, r10
    32e8:	83 dd       	rcall	.-1274   	; 0x2df0 <prvInsertTimerInActiveList>
    32ea:	88 23       	and	r24, r24
    32ec:	09 f4       	brne	.+2      	; 0x32f0 <prvProcessReceivedCommands+0x98>
    32ee:	49 c0       	rjmp	.+146    	; 0x3382 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    32f0:	d5 01       	movw	r26, r10
    32f2:	54 96       	adiw	r26, 0x14	; 20
    32f4:	ed 91       	ld	r30, X+
    32f6:	fc 91       	ld	r31, X
    32f8:	55 97       	sbiw	r26, 0x15	; 21
    32fa:	c5 01       	movw	r24, r10
    32fc:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    32fe:	f5 01       	movw	r30, r10
    3300:	86 89       	ldd	r24, Z+22	; 0x16
    3302:	82 ff       	sbrs	r24, 2
    3304:	3e c0       	rjmp	.+124    	; 0x3382 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3306:	4a 81       	ldd	r20, Y+2	; 0x02
    3308:	5b 81       	ldd	r21, Y+3	; 0x03
    330a:	6c 81       	ldd	r22, Y+4	; 0x04
    330c:	7d 81       	ldd	r23, Y+5	; 0x05
    330e:	86 85       	ldd	r24, Z+14	; 0x0e
    3310:	97 85       	ldd	r25, Z+15	; 0x0f
    3312:	a0 89       	ldd	r26, Z+16	; 0x10
    3314:	b1 89       	ldd	r27, Z+17	; 0x11
    3316:	9a 01       	movw	r18, r20
    3318:	ab 01       	movw	r20, r22
    331a:	28 0f       	add	r18, r24
    331c:	39 1f       	adc	r19, r25
    331e:	4a 1f       	adc	r20, r26
    3320:	5b 1f       	adc	r21, r27
    3322:	c1 2c       	mov	r12, r1
    3324:	d1 2c       	mov	r13, r1
    3326:	76 01       	movw	r14, r12
    3328:	00 e0       	ldi	r16, 0x00	; 0
    332a:	10 e0       	ldi	r17, 0x00	; 0
    332c:	60 e0       	ldi	r22, 0x00	; 0
    332e:	c5 01       	movw	r24, r10
    3330:	f2 dd       	rcall	.-1052   	; 0x2f16 <xTimerGenericCommand>
    3332:	27 c0       	rjmp	.+78     	; 0x3382 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3334:	d5 01       	movw	r26, r10
    3336:	56 96       	adiw	r26, 0x16	; 22
    3338:	8c 91       	ld	r24, X
    333a:	56 97       	sbiw	r26, 0x16	; 22
    333c:	8e 7f       	andi	r24, 0xFE	; 254
    333e:	56 96       	adiw	r26, 0x16	; 22
    3340:	8c 93       	st	X, r24
                        break;
    3342:	1f c0       	rjmp	.+62     	; 0x3382 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3344:	f5 01       	movw	r30, r10
    3346:	86 89       	ldd	r24, Z+22	; 0x16
    3348:	81 60       	ori	r24, 0x01	; 1
    334a:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    334c:	4a 81       	ldd	r20, Y+2	; 0x02
    334e:	5b 81       	ldd	r21, Y+3	; 0x03
    3350:	6c 81       	ldd	r22, Y+4	; 0x04
    3352:	7d 81       	ldd	r23, Y+5	; 0x05
    3354:	46 87       	std	Z+14, r20	; 0x0e
    3356:	57 87       	std	Z+15, r21	; 0x0f
    3358:	60 8b       	std	Z+16, r22	; 0x10
    335a:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    335c:	40 0f       	add	r20, r16
    335e:	51 1f       	adc	r21, r17
    3360:	62 1f       	adc	r22, r18
    3362:	73 1f       	adc	r23, r19
    3364:	68 01       	movw	r12, r16
    3366:	79 01       	movw	r14, r18
    3368:	c5 01       	movw	r24, r10
    336a:	42 dd       	rcall	.-1404   	; 0x2df0 <prvInsertTimerInActiveList>
                        break;
    336c:	0a c0       	rjmp	.+20     	; 0x3382 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    336e:	f5 01       	movw	r30, r10
    3370:	86 89       	ldd	r24, Z+22	; 0x16
    3372:	81 fd       	sbrc	r24, 1
    3374:	04 c0       	rjmp	.+8      	; 0x337e <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3376:	c5 01       	movw	r24, r10
    3378:	0e 94 8e 04 	call	0x91c	; 0x91c <vPortFree>
    337c:	02 c0       	rjmp	.+4      	; 0x3382 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    337e:	8e 7f       	andi	r24, 0xFE	; 254
    3380:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	a9 01       	movw	r20, r18
    3388:	be 01       	movw	r22, r28
    338a:	6f 5f       	subi	r22, 0xFF	; 255
    338c:	7f 4f       	sbci	r23, 0xFF	; 255
    338e:	80 91 a1 16 	lds	r24, 0x16A1	; 0x8016a1 <xTimerQueue>
    3392:	90 91 a2 16 	lds	r25, 0x16A2	; 0x8016a2 <xTimerQueue+0x1>
    3396:	0e 94 8c 08 	call	0x1118	; 0x1118 <xQueueReceive>
    339a:	81 11       	cpse	r24, r1
    339c:	70 cf       	rjmp	.-288    	; 0x327e <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    339e:	28 96       	adiw	r28, 0x08	; 8
    33a0:	0f b6       	in	r0, 0x3f	; 63
    33a2:	f8 94       	cli
    33a4:	de bf       	out	0x3e, r29	; 62
    33a6:	0f be       	out	0x3f, r0	; 63
    33a8:	cd bf       	out	0x3d, r28	; 61
    33aa:	df 91       	pop	r29
    33ac:	cf 91       	pop	r28
    33ae:	1f 91       	pop	r17
    33b0:	0f 91       	pop	r16
    33b2:	ff 90       	pop	r15
    33b4:	ef 90       	pop	r14
    33b6:	df 90       	pop	r13
    33b8:	cf 90       	pop	r12
    33ba:	bf 90       	pop	r11
    33bc:	af 90       	pop	r10
    33be:	08 95       	ret

000033c0 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    33c0:	08 95       	ret

000033c2 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    33c2:	84 b1       	in	r24, 0x04	; 4
    33c4:	80 68       	ori	r24, 0x80	; 128
    33c6:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    33c8:	85 b1       	in	r24, 0x05	; 5
    33ca:	80 68       	ori	r24, 0x80	; 128
    33cc:	85 b9       	out	0x05, r24	; 5
    33ce:	08 95       	ret

000033d0 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    33d0:	83 b1       	in	r24, 0x03	; 3
    33d2:	80 68       	ori	r24, 0x80	; 128
    33d4:	83 b9       	out	0x03, r24	; 3
    33d6:	08 95       	ret

000033d8 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    33d8:	f4 df       	rcall	.-24     	; 0x33c2 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    33da:	2f ef       	ldi	r18, 0xFF	; 255
    33dc:	80 e7       	ldi	r24, 0x70	; 112
    33de:	92 e0       	ldi	r25, 0x02	; 2
    33e0:	21 50       	subi	r18, 0x01	; 1
    33e2:	80 40       	sbci	r24, 0x00	; 0
    33e4:	90 40       	sbci	r25, 0x00	; 0
    33e6:	e1 f7       	brne	.-8      	; 0x33e0 <vApplicationMallocFailedHook+0x8>
    33e8:	00 c0       	rjmp	.+0      	; 0x33ea <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    33ea:	00 00       	nop
    33ec:	f1 df       	rcall	.-30     	; 0x33d0 <prvBlinkMainLed>
    33ee:	f5 cf       	rjmp	.-22     	; 0x33da <vApplicationMallocFailedHook+0x2>

000033f0 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    33f0:	e8 df       	rcall	.-48     	; 0x33c2 <prvSetMainLedOn>
    33f2:	2f ef       	ldi	r18, 0xFF	; 255
    33f4:	87 ea       	ldi	r24, 0xA7	; 167
    33f6:	91 e6       	ldi	r25, 0x61	; 97
    33f8:	21 50       	subi	r18, 0x01	; 1
    33fa:	80 40       	sbci	r24, 0x00	; 0
    33fc:	90 40       	sbci	r25, 0x00	; 0
    33fe:	e1 f7       	brne	.-8      	; 0x33f8 <vApplicationStackOverflowHook+0x8>
    3400:	00 c0       	rjmp	.+0      	; 0x3402 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3402:	00 00       	nop
    3404:	e5 df       	rcall	.-54     	; 0x33d0 <prvBlinkMainLed>
    3406:	f5 cf       	rjmp	.-22     	; 0x33f2 <vApplicationStackOverflowHook+0x2>

00003408 <_hihTwiCallback>:
    3408:	65 30       	cpi	r22, 0x05	; 5
    340a:	f1 f4       	brne	.+60     	; 0x3448 <_hihTwiCallback+0x40>
    340c:	fa 01       	movw	r30, r20
    340e:	80 81       	ld	r24, Z
    3410:	8f 73       	andi	r24, 0x3F	; 63
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	98 2f       	mov	r25, r24
    3416:	88 27       	eor	r24, r24
    3418:	21 81       	ldd	r18, Z+1	; 0x01
    341a:	82 2b       	or	r24, r18
    341c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3420:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3424:	82 81       	ldd	r24, Z+2	; 0x02
    3426:	f0 e4       	ldi	r31, 0x40	; 64
    3428:	8f 9f       	mul	r24, r31
    342a:	c0 01       	movw	r24, r0
    342c:	11 24       	eor	r1, r1
    342e:	fa 01       	movw	r30, r20
    3430:	23 81       	ldd	r18, Z+3	; 0x03
    3432:	26 95       	lsr	r18
    3434:	26 95       	lsr	r18
    3436:	82 2b       	or	r24, r18
    3438:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    343c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	80 93 bd 16 	sts	0x16BD, r24	; 0x8016bd <_measuringIsReady>
    3446:	08 95       	ret
    3448:	64 30       	cpi	r22, 0x04	; 4
    344a:	51 f0       	breq	.+20     	; 0x3460 <_hihTwiCallback+0x58>
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	90 e4       	ldi	r25, 0x40	; 64
    3450:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3454:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3458:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    345c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3460:	08 95       	ret

00003462 <hih8120_initialise>:
    3462:	0f 93       	push	r16
    3464:	1f 93       	push	r17
    3466:	04 e0       	ldi	r16, 0x04	; 4
    3468:	1a e1       	ldi	r17, 0x1A	; 26
    346a:	20 e0       	ldi	r18, 0x00	; 0
    346c:	34 e2       	ldi	r19, 0x24	; 36
    346e:	44 ef       	ldi	r20, 0xF4	; 244
    3470:	50 e0       	ldi	r21, 0x00	; 0
    3472:	60 e0       	ldi	r22, 0x00	; 0
    3474:	87 e2       	ldi	r24, 0x27	; 39
    3476:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <twiCreate>
    347a:	90 93 bf 16 	sts	0x16BF, r25	; 0x8016bf <_hih8120Handler+0x1>
    347e:	80 93 be 16 	sts	0x16BE, r24	; 0x8016be <_hih8120Handler>
    3482:	21 e0       	ldi	r18, 0x01	; 1
    3484:	89 2b       	or	r24, r25
    3486:	09 f0       	breq	.+2      	; 0x348a <hih8120_initialise+0x28>
    3488:	20 e0       	ldi	r18, 0x00	; 0
    348a:	82 2f       	mov	r24, r18
    348c:	1f 91       	pop	r17
    348e:	0f 91       	pop	r16
    3490:	08 95       	ret

00003492 <hih8120_wakeup>:
    3492:	80 91 be 16 	lds	r24, 0x16BE	; 0x8016be <_hih8120Handler>
    3496:	90 91 bf 16 	lds	r25, 0x16BF	; 0x8016bf <_hih8120Handler+0x1>
    349a:	00 97       	sbiw	r24, 0x00	; 0
    349c:	59 f0       	breq	.+22     	; 0x34b4 <hih8120_wakeup+0x22>
    349e:	40 e0       	ldi	r20, 0x00	; 0
    34a0:	60 e0       	ldi	r22, 0x00	; 0
    34a2:	70 e0       	ldi	r23, 0x00	; 0
    34a4:	0e 94 d6 25 	call	0x4bac	; 0x4bac <twiTransmit>
    34a8:	84 30       	cpi	r24, 0x04	; 4
    34aa:	31 f4       	brne	.+12     	; 0x34b8 <hih8120_wakeup+0x26>
    34ac:	10 92 bd 16 	sts	0x16BD, r1	; 0x8016bd <_measuringIsReady>
    34b0:	80 e0       	ldi	r24, 0x00	; 0
    34b2:	08 95       	ret
    34b4:	82 e0       	ldi	r24, 0x02	; 2
    34b6:	08 95       	ret
    34b8:	83 e0       	ldi	r24, 0x03	; 3
    34ba:	08 95       	ret

000034bc <hih8120_measure>:
    34bc:	80 91 be 16 	lds	r24, 0x16BE	; 0x8016be <_hih8120Handler>
    34c0:	90 91 bf 16 	lds	r25, 0x16BF	; 0x8016bf <_hih8120Handler+0x1>
    34c4:	00 97       	sbiw	r24, 0x00	; 0
    34c6:	39 f0       	breq	.+14     	; 0x34d6 <hih8120_measure+0x1a>
    34c8:	64 e0       	ldi	r22, 0x04	; 4
    34ca:	0e 94 22 26 	call	0x4c44	; 0x4c44 <twiReceive>
    34ce:	85 30       	cpi	r24, 0x05	; 5
    34d0:	21 f0       	breq	.+8      	; 0x34da <hih8120_measure+0x1e>
    34d2:	83 e0       	ldi	r24, 0x03	; 3
    34d4:	08 95       	ret
    34d6:	82 e0       	ldi	r24, 0x02	; 2
    34d8:	08 95       	ret
    34da:	80 e0       	ldi	r24, 0x00	; 0
    34dc:	08 95       	ret

000034de <hih8120_getHumidity>:
    34de:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    34e2:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    34e6:	80 e0       	ldi	r24, 0x00	; 0
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	0e 94 2c 28 	call	0x5058	; 0x5058 <__floatunsisf>
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	48 ec       	ldi	r20, 0xC8	; 200
    34f4:	52 e4       	ldi	r21, 0x42	; 66
    34f6:	0e 94 ba 28 	call	0x5174	; 0x5174 <__mulsf3>
    34fa:	20 e0       	ldi	r18, 0x00	; 0
    34fc:	38 ef       	ldi	r19, 0xF8	; 248
    34fe:	4f e7       	ldi	r20, 0x7F	; 127
    3500:	56 e4       	ldi	r21, 0x46	; 70
    3502:	0c 94 93 27 	jmp	0x4f26	; 0x4f26 <__divsf3>
    3506:	08 95       	ret

00003508 <hih8120_getHumidityPercent_x10>:
    3508:	ea df       	rcall	.-44     	; 0x34de <hih8120_getHumidity>
    350a:	20 e0       	ldi	r18, 0x00	; 0
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	40 e2       	ldi	r20, 0x20	; 32
    3510:	51 e4       	ldi	r21, 0x41	; 65
    3512:	0e 94 ba 28 	call	0x5174	; 0x5174 <__mulsf3>
    3516:	0e 94 00 28 	call	0x5000	; 0x5000 <__fixunssfsi>
    351a:	cb 01       	movw	r24, r22
    351c:	08 95       	ret

0000351e <hih8120_getTemperature>:
    351e:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3522:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	0e 94 2c 28 	call	0x5058	; 0x5058 <__floatunsisf>
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	45 e2       	ldi	r20, 0x25	; 37
    3534:	53 e4       	ldi	r21, 0x43	; 67
    3536:	0e 94 ba 28 	call	0x5174	; 0x5174 <__mulsf3>
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	38 ef       	ldi	r19, 0xF8	; 248
    353e:	4f e7       	ldi	r20, 0x7F	; 127
    3540:	56 e4       	ldi	r21, 0x46	; 70
    3542:	0e 94 93 27 	call	0x4f26	; 0x4f26 <__divsf3>
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	40 e2       	ldi	r20, 0x20	; 32
    354c:	52 e4       	ldi	r21, 0x42	; 66
    354e:	0c 94 2e 27 	jmp	0x4e5c	; 0x4e5c <__subsf3>
    3552:	08 95       	ret

00003554 <hih8120_getTemperature_x10>:
    3554:	e4 df       	rcall	.-56     	; 0x351e <hih8120_getTemperature>
    3556:	20 e0       	ldi	r18, 0x00	; 0
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	40 e2       	ldi	r20, 0x20	; 32
    355c:	51 e4       	ldi	r21, 0x41	; 65
    355e:	0e 94 ba 28 	call	0x5174	; 0x5174 <__mulsf3>
    3562:	0e 94 fb 27 	call	0x4ff6	; 0x4ff6 <__fixsfsi>
    3566:	cb 01       	movw	r24, r22
    3568:	08 95       	ret

0000356a <_serialCallBack>:
    356a:	0f 93       	push	r16
    356c:	1f 93       	push	r17
    356e:	cf 93       	push	r28
    3570:	df 93       	push	r29
    3572:	1f 92       	push	r1
    3574:	1f 92       	push	r1
    3576:	cd b7       	in	r28, 0x3d	; 61
    3578:	de b7       	in	r29, 0x3e	; 62
    357a:	8c 01       	movw	r16, r24
    357c:	19 82       	std	Y+1, r1	; 0x01
    357e:	2d c0       	rjmp	.+90     	; 0x35da <_serialCallBack+0x70>
    3580:	e0 91 f7 16 	lds	r30, 0x16F7	; 0x8016f7 <rec_buf_inp.2878>
    3584:	ec 32       	cpi	r30, 0x2C	; 44
    3586:	50 f4       	brcc	.+20     	; 0x359c <_serialCallBack+0x32>
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	8e 0f       	add	r24, r30
    358c:	80 93 f7 16 	sts	0x16F7, r24	; 0x8016f7 <rec_buf_inp.2878>
    3590:	f0 e0       	ldi	r31, 0x00	; 0
    3592:	e7 5d       	subi	r30, 0xD7	; 215
    3594:	f8 4e       	sbci	r31, 0xE8	; 232
    3596:	8a 81       	ldd	r24, Y+2	; 0x02
    3598:	80 83       	st	Z, r24
    359a:	02 c0       	rjmp	.+4      	; 0x35a0 <_serialCallBack+0x36>
    359c:	10 92 f7 16 	sts	0x16F7, r1	; 0x8016f7 <rec_buf_inp.2878>
    35a0:	8a 81       	ldd	r24, Y+2	; 0x02
    35a2:	8a 30       	cpi	r24, 0x0A	; 10
    35a4:	d1 f4       	brne	.+52     	; 0x35da <_serialCallBack+0x70>
    35a6:	40 91 f7 16 	lds	r20, 0x16F7	; 0x8016f7 <rec_buf_inp.2878>
    35aa:	50 e0       	ldi	r21, 0x00	; 0
    35ac:	fa 01       	movw	r30, r20
    35ae:	e9 5d       	subi	r30, 0xD9	; 217
    35b0:	f8 4e       	sbci	r31, 0xE8	; 232
    35b2:	10 82       	st	Z, r1
    35b4:	41 50       	subi	r20, 0x01	; 1
    35b6:	51 09       	sbc	r21, r1
    35b8:	9e 01       	movw	r18, r28
    35ba:	2f 5f       	subi	r18, 0xFF	; 255
    35bc:	3f 4f       	sbci	r19, 0xFF	; 255
    35be:	69 e2       	ldi	r22, 0x29	; 41
    35c0:	77 e1       	ldi	r23, 0x17	; 23
    35c2:	80 91 fa 16 	lds	r24, 0x16FA	; 0x8016fa <_serialReplyBufferHandle>
    35c6:	90 91 fb 16 	lds	r25, 0x16FB	; 0x8016fb <_serialReplyBufferHandle+0x1>
    35ca:	0e 94 9f 0b 	call	0x173e	; 0x173e <xStreamBufferSendFromISR>
    35ce:	89 81       	ldd	r24, Y+1	; 0x01
    35d0:	81 11       	cpse	r24, r1
    35d2:	0e 94 99 05 	call	0xb32	; 0xb32 <vPortYield>
    35d6:	10 92 f7 16 	sts	0x16F7, r1	; 0x8016f7 <rec_buf_inp.2878>
    35da:	be 01       	movw	r22, r28
    35dc:	6e 5f       	subi	r22, 0xFE	; 254
    35de:	7f 4f       	sbci	r23, 0xFF	; 255
    35e0:	c8 01       	movw	r24, r16
    35e2:	10 d6       	rcall	.+3104   	; 0x4204 <serial_getByte>
    35e4:	88 23       	and	r24, r24
    35e6:	61 f2       	breq	.-104    	; 0x3580 <_serialCallBack+0x16>
    35e8:	0f 90       	pop	r0
    35ea:	0f 90       	pop	r0
    35ec:	df 91       	pop	r29
    35ee:	cf 91       	pop	r28
    35f0:	1f 91       	pop	r17
    35f2:	0f 91       	pop	r16
    35f4:	08 95       	ret

000035f6 <_uploadMessage>:
    35f6:	0f 93       	push	r16
    35f8:	1f 93       	push	r17
    35fa:	cf 93       	push	r28
    35fc:	df 93       	push	r29
    35fe:	8c 01       	movw	r16, r24
    3600:	eb 01       	movw	r28, r22
    3602:	80 91 fa 16 	lds	r24, 0x16FA	; 0x8016fa <_serialReplyBufferHandle>
    3606:	90 91 fb 16 	lds	r25, 0x16FB	; 0x8016fb <_serialReplyBufferHandle+0x1>
    360a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <xStreamBufferReset>
    360e:	b8 01       	movw	r22, r16
    3610:	80 ec       	ldi	r24, 0xC0	; 192
    3612:	96 e1       	ldi	r25, 0x16	; 22
    3614:	0e 94 ac 2a 	call	0x5558	; 0x5558 <strcpy>
    3618:	20 97       	sbiw	r28, 0x00	; 0
    361a:	79 f0       	breq	.+30     	; 0x363a <_uploadMessage+0x44>
    361c:	e0 ec       	ldi	r30, 0xC0	; 192
    361e:	f6 e1       	ldi	r31, 0x16	; 22
    3620:	01 90       	ld	r0, Z+
    3622:	00 20       	and	r0, r0
    3624:	e9 f7       	brne	.-6      	; 0x3620 <_uploadMessage+0x2a>
    3626:	31 97       	sbiw	r30, 0x01	; 1
    3628:	80 e2       	ldi	r24, 0x20	; 32
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	91 83       	std	Z+1, r25	; 0x01
    362e:	80 83       	st	Z, r24
    3630:	be 01       	movw	r22, r28
    3632:	80 ec       	ldi	r24, 0xC0	; 192
    3634:	96 e1       	ldi	r25, 0x16	; 22
    3636:	0e 94 a1 2a 	call	0x5542	; 0x5542 <strcat>
    363a:	e0 ec       	ldi	r30, 0xC0	; 192
    363c:	f6 e1       	ldi	r31, 0x16	; 22
    363e:	df 01       	movw	r26, r30
    3640:	0d 90       	ld	r0, X+
    3642:	00 20       	and	r0, r0
    3644:	e9 f7       	brne	.-6      	; 0x3640 <_uploadMessage+0x4a>
    3646:	11 97       	sbiw	r26, 0x01	; 1
    3648:	8d e0       	ldi	r24, 0x0D	; 13
    364a:	9a e0       	ldi	r25, 0x0A	; 10
    364c:	11 96       	adiw	r26, 0x01	; 1
    364e:	9c 93       	st	X, r25
    3650:	8e 93       	st	-X, r24
    3652:	12 96       	adiw	r26, 0x02	; 2
    3654:	1c 92       	st	X, r1
    3656:	01 90       	ld	r0, Z+
    3658:	00 20       	and	r0, r0
    365a:	e9 f7       	brne	.-6      	; 0x3656 <_uploadMessage+0x60>
    365c:	31 97       	sbiw	r30, 0x01	; 1
    365e:	e0 5c       	subi	r30, 0xC0	; 192
    3660:	f6 41       	sbci	r31, 0x16	; 22
    3662:	ae 2f       	mov	r26, r30
    3664:	80 ec       	ldi	r24, 0xC0	; 192
    3666:	96 e1       	ldi	r25, 0x16	; 22
    3668:	ac 01       	movw	r20, r24
    366a:	6a 2f       	mov	r22, r26
    366c:	80 91 fc 16 	lds	r24, 0x16FC	; 0x8016fc <_rn2483_serial>
    3670:	90 91 fd 16 	lds	r25, 0x16FD	; 0x8016fd <_rn2483_serial+0x1>
    3674:	72 d5       	rcall	.+2788   	; 0x415a <serial_sendBytes>
    3676:	81 11       	cpse	r24, r1
    3678:	11 c0       	rjmp	.+34     	; 0x369c <_uploadMessage+0xa6>
    367a:	08 e2       	ldi	r16, 0x28	; 40
    367c:	15 e0       	ldi	r17, 0x05	; 5
    367e:	20 e0       	ldi	r18, 0x00	; 0
    3680:	30 e0       	ldi	r19, 0x00	; 0
    3682:	4d e2       	ldi	r20, 0x2D	; 45
    3684:	50 e0       	ldi	r21, 0x00	; 0
    3686:	63 e8       	ldi	r22, 0x83	; 131
    3688:	77 e1       	ldi	r23, 0x17	; 23
    368a:	80 91 fa 16 	lds	r24, 0x16FA	; 0x8016fa <_serialReplyBufferHandle>
    368e:	90 91 fb 16 	lds	r25, 0x16FB	; 0x8016fb <_serialReplyBufferHandle+0x1>
    3692:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <xStreamBufferReceive>
    3696:	83 e8       	ldi	r24, 0x83	; 131
    3698:	97 e1       	ldi	r25, 0x17	; 23
    369a:	02 c0       	rjmp	.+4      	; 0x36a0 <_uploadMessage+0xaa>
    369c:	80 e0       	ldi	r24, 0x00	; 0
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	df 91       	pop	r29
    36a2:	cf 91       	pop	r28
    36a4:	1f 91       	pop	r17
    36a6:	0f 91       	pop	r16
    36a8:	08 95       	ret

000036aa <_reply2ReturnCode>:
    36aa:	2f 92       	push	r2
    36ac:	3f 92       	push	r3
    36ae:	4f 92       	push	r4
    36b0:	5f 92       	push	r5
    36b2:	6f 92       	push	r6
    36b4:	7f 92       	push	r7
    36b6:	8f 92       	push	r8
    36b8:	9f 92       	push	r9
    36ba:	af 92       	push	r10
    36bc:	bf 92       	push	r11
    36be:	cf 92       	push	r12
    36c0:	df 92       	push	r13
    36c2:	ef 92       	push	r14
    36c4:	ff 92       	push	r15
    36c6:	0f 93       	push	r16
    36c8:	1f 93       	push	r17
    36ca:	cf 93       	push	r28
    36cc:	df 93       	push	r29
    36ce:	5c 01       	movw	r10, r24
    36d0:	fc 01       	movw	r30, r24
    36d2:	01 90       	ld	r0, Z+
    36d4:	00 20       	and	r0, r0
    36d6:	e9 f7       	brne	.-6      	; 0x36d2 <_reply2ReturnCode+0x28>
    36d8:	31 97       	sbiw	r30, 0x01	; 1
    36da:	6f 01       	movw	r12, r30
    36dc:	c8 1a       	sub	r12, r24
    36de:	d9 0a       	sbc	r13, r25
    36e0:	5c 2c       	mov	r5, r12
    36e2:	0f 2e       	mov	r0, r31
    36e4:	fd ec       	ldi	r31, 0xCD	; 205
    36e6:	8f 2e       	mov	r8, r31
    36e8:	f7 e0       	ldi	r31, 0x07	; 7
    36ea:	9f 2e       	mov	r9, r31
    36ec:	f0 2d       	mov	r31, r0
    36ee:	e1 2c       	mov	r14, r1
    36f0:	f1 2c       	mov	r15, r1
    36f2:	4c 2c       	mov	r4, r12
    36f4:	37 01       	movw	r6, r14
    36f6:	f4 01       	movw	r30, r8
    36f8:	01 81       	ldd	r16, Z+1	; 0x01
    36fa:	12 81       	ldd	r17, Z+2	; 0x02
    36fc:	e8 01       	movw	r28, r16
    36fe:	09 90       	ld	r0, Y+
    3700:	00 20       	and	r0, r0
    3702:	e9 f7       	brne	.-6      	; 0x36fe <_reply2ReturnCode+0x54>
    3704:	21 97       	sbiw	r28, 0x01	; 1
    3706:	c0 1b       	sub	r28, r16
    3708:	d1 0b       	sbc	r29, r17
    370a:	3c 2e       	mov	r3, r28
    370c:	f9 e0       	ldi	r31, 0x09	; 9
    370e:	cf 16       	cp	r12, r31
    3710:	d1 04       	cpc	r13, r1
    3712:	58 f0       	brcs	.+22     	; 0x372a <_reply2ReturnCode+0x80>
    3714:	f4 01       	movw	r30, r8
    3716:	20 80       	ld	r2, Z
    3718:	fe e0       	ldi	r31, 0x0E	; 14
    371a:	2f 12       	cpse	r2, r31
    371c:	06 c0       	rjmp	.+12     	; 0x372a <_reply2ReturnCode+0x80>
    371e:	b8 01       	movw	r22, r16
    3720:	c5 01       	movw	r24, r10
    3722:	0e 94 7c 2a 	call	0x54f8	; 0x54f8 <strcasestr>
    3726:	89 2b       	or	r24, r25
    3728:	09 f5       	brne	.+66     	; 0x376c <_reply2ReturnCode+0xc2>
    372a:	44 2d       	mov	r20, r4
    372c:	35 14       	cp	r3, r5
    372e:	08 f4       	brcc	.+2      	; 0x3732 <_reply2ReturnCode+0x88>
    3730:	4c 2f       	mov	r20, r28
    3732:	50 e0       	ldi	r21, 0x00	; 0
    3734:	b8 01       	movw	r22, r16
    3736:	c5 01       	movw	r24, r10
    3738:	0e 94 b3 2a 	call	0x5566	; 0x5566 <strncasecmp>
    373c:	89 2b       	or	r24, r25
    373e:	49 f4       	brne	.+18     	; 0x3752 <_reply2ReturnCode+0xa8>
    3740:	f3 01       	movw	r30, r6
    3742:	ee 0f       	add	r30, r30
    3744:	ff 1f       	adc	r31, r31
    3746:	e6 0d       	add	r30, r6
    3748:	f7 1d       	adc	r31, r7
    374a:	e3 53       	subi	r30, 0x33	; 51
    374c:	f8 4f       	sbci	r31, 0xF8	; 248
    374e:	20 80       	ld	r2, Z
    3750:	0d c0       	rjmp	.+26     	; 0x376c <_reply2ReturnCode+0xc2>
    3752:	8f ef       	ldi	r24, 0xFF	; 255
    3754:	e8 1a       	sub	r14, r24
    3756:	f8 0a       	sbc	r15, r24
    3758:	e3 e0       	ldi	r30, 0x03	; 3
    375a:	8e 0e       	add	r8, r30
    375c:	91 1c       	adc	r9, r1
    375e:	f1 e1       	ldi	r31, 0x11	; 17
    3760:	ef 16       	cp	r14, r31
    3762:	f1 04       	cpc	r15, r1
    3764:	39 f6       	brne	.-114    	; 0x36f4 <_reply2ReturnCode+0x4a>
    3766:	68 94       	set
    3768:	22 24       	eor	r2, r2
    376a:	24 f8       	bld	r2, 4
    376c:	82 2d       	mov	r24, r2
    376e:	df 91       	pop	r29
    3770:	cf 91       	pop	r28
    3772:	1f 91       	pop	r17
    3774:	0f 91       	pop	r16
    3776:	ff 90       	pop	r15
    3778:	ef 90       	pop	r14
    377a:	df 90       	pop	r13
    377c:	cf 90       	pop	r12
    377e:	bf 90       	pop	r11
    3780:	af 90       	pop	r10
    3782:	9f 90       	pop	r9
    3784:	8f 90       	pop	r8
    3786:	7f 90       	pop	r7
    3788:	6f 90       	pop	r6
    378a:	5f 90       	pop	r5
    378c:	4f 90       	pop	r4
    378e:	3f 90       	pop	r3
    3790:	2f 90       	pop	r2
    3792:	08 95       	ret

00003794 <_uploadMessageRc>:
    3794:	30 df       	rcall	.-416    	; 0x35f6 <_uploadMessage>
    3796:	89 cf       	rjmp	.-238    	; 0x36aa <_reply2ReturnCode>
    3798:	08 95       	ret

0000379a <lora_driver_flushBuffers>:
    379a:	80 91 fa 16 	lds	r24, 0x16FA	; 0x8016fa <_serialReplyBufferHandle>
    379e:	90 91 fb 16 	lds	r25, 0x16FB	; 0x8016fb <_serialReplyBufferHandle+0x1>
    37a2:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <xStreamBufferReset>
    37a6:	08 95       	ret

000037a8 <lora_driver_initialise>:
    37a8:	8f 92       	push	r8
    37aa:	9f 92       	push	r9
    37ac:	af 92       	push	r10
    37ae:	cf 92       	push	r12
    37b0:	ef 92       	push	r14
    37b2:	0f 93       	push	r16
    37b4:	1f 93       	push	r17
    37b6:	cf 93       	push	r28
    37b8:	c8 2f       	mov	r28, r24
    37ba:	8b 01       	movw	r16, r22
    37bc:	41 e0       	ldi	r20, 0x01	; 1
    37be:	60 e0       	ldi	r22, 0x00	; 0
    37c0:	70 e0       	ldi	r23, 0x00	; 0
    37c2:	88 ec       	ldi	r24, 0xC8	; 200
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <xStreamBufferGenericCreate>
    37ca:	90 93 fb 16 	sts	0x16FB, r25	; 0x8016fb <_serialReplyBufferHandle+0x1>
    37ce:	80 93 fa 16 	sts	0x16FA, r24	; 0x8016fa <_serialReplyBufferHandle>
    37d2:	10 93 f9 16 	sts	0x16F9, r17	; 0x8016f9 <_downlinkMessageBuffer+0x1>
    37d6:	00 93 f8 16 	sts	0x16F8, r16	; 0x8016f8 <_downlinkMessageBuffer>
    37da:	0f 2e       	mov	r0, r31
    37dc:	f5 eb       	ldi	r31, 0xB5	; 181
    37de:	8f 2e       	mov	r8, r31
    37e0:	fa e1       	ldi	r31, 0x1A	; 26
    37e2:	9f 2e       	mov	r9, r31
    37e4:	f0 2d       	mov	r31, r0
    37e6:	68 94       	set
    37e8:	aa 24       	eor	r10, r10
    37ea:	a6 f8       	bld	r10, 6
    37ec:	68 94       	set
    37ee:	cc 24       	eor	r12, r12
    37f0:	c6 f8       	bld	r12, 6
    37f2:	e1 2c       	mov	r14, r1
    37f4:	00 e0       	ldi	r16, 0x00	; 0
    37f6:	23 e0       	ldi	r18, 0x03	; 3
    37f8:	40 e0       	ldi	r20, 0x00	; 0
    37fa:	51 ee       	ldi	r21, 0xE1	; 225
    37fc:	60 e0       	ldi	r22, 0x00	; 0
    37fe:	70 e0       	ldi	r23, 0x00	; 0
    3800:	8c 2f       	mov	r24, r28
    3802:	de d3       	rcall	.+1980   	; 0x3fc0 <serial_create>
    3804:	90 93 fd 16 	sts	0x16FD, r25	; 0x8016fd <_rn2483_serial+0x1>
    3808:	80 93 fc 16 	sts	0x16FC, r24	; 0x8016fc <_rn2483_serial>
    380c:	e7 e0       	ldi	r30, 0x07	; 7
    380e:	f1 e0       	ldi	r31, 0x01	; 1
    3810:	80 81       	ld	r24, Z
    3812:	80 61       	ori	r24, 0x10	; 16
    3814:	80 83       	st	Z, r24
    3816:	cf 91       	pop	r28
    3818:	1f 91       	pop	r17
    381a:	0f 91       	pop	r16
    381c:	ef 90       	pop	r14
    381e:	cf 90       	pop	r12
    3820:	af 90       	pop	r10
    3822:	9f 90       	pop	r9
    3824:	8f 90       	pop	r8
    3826:	08 95       	ret

00003828 <lora_driver_resetRn2483>:
    3828:	88 23       	and	r24, r24
    382a:	31 f0       	breq	.+12     	; 0x3838 <lora_driver_resetRn2483+0x10>
    382c:	e8 e0       	ldi	r30, 0x08	; 8
    382e:	f1 e0       	ldi	r31, 0x01	; 1
    3830:	80 81       	ld	r24, Z
    3832:	8f 7e       	andi	r24, 0xEF	; 239
    3834:	80 83       	st	Z, r24
    3836:	08 95       	ret
    3838:	e8 e0       	ldi	r30, 0x08	; 8
    383a:	f1 e0       	ldi	r31, 0x01	; 1
    383c:	80 81       	ld	r24, Z
    383e:	80 61       	ori	r24, 0x10	; 16
    3840:	80 83       	st	Z, r24
    3842:	08 95       	ret

00003844 <lora_driver_rn2483FactoryReset>:
    3844:	60 e0       	ldi	r22, 0x00	; 0
    3846:	70 e0       	ldi	r23, 0x00	; 0
    3848:	83 e5       	ldi	r24, 0x53	; 83
    384a:	95 e0       	ldi	r25, 0x05	; 5
    384c:	d4 de       	rcall	.-600    	; 0x35f6 <_uploadMessage>
    384e:	e3 e8       	ldi	r30, 0x83	; 131
    3850:	f7 e1       	ldi	r31, 0x17	; 23
    3852:	01 90       	ld	r0, Z+
    3854:	00 20       	and	r0, r0
    3856:	e9 f7       	brne	.-6      	; 0x3852 <lora_driver_rn2483FactoryReset+0xe>
    3858:	31 97       	sbiw	r30, 0x01	; 1
    385a:	e3 58       	subi	r30, 0x83	; 131
    385c:	f7 41       	sbci	r31, 0x17	; 23
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	75 97       	sbiw	r30, 0x15	; 21
    3862:	08 f0       	brcs	.+2      	; 0x3866 <lora_driver_rn2483FactoryReset+0x22>
    3864:	80 e0       	ldi	r24, 0x00	; 0
    3866:	08 95       	ret

00003868 <lora_driver_getRn2483Hweui>:
    3868:	cf 93       	push	r28
    386a:	df 93       	push	r29
    386c:	ec 01       	movw	r28, r24
    386e:	60 e0       	ldi	r22, 0x00	; 0
    3870:	70 e0       	ldi	r23, 0x00	; 0
    3872:	84 e6       	ldi	r24, 0x64	; 100
    3874:	95 e0       	ldi	r25, 0x05	; 5
    3876:	bf de       	rcall	.-642    	; 0x35f6 <_uploadMessage>
    3878:	e3 e8       	ldi	r30, 0x83	; 131
    387a:	f7 e1       	ldi	r31, 0x17	; 23
    387c:	01 90       	ld	r0, Z+
    387e:	00 20       	and	r0, r0
    3880:	e9 f7       	brne	.-6      	; 0x387c <lora_driver_getRn2483Hweui+0x14>
    3882:	e4 59       	subi	r30, 0x94	; 148
    3884:	f7 41       	sbci	r31, 0x17	; 23
    3886:	39 f4       	brne	.+14     	; 0x3896 <lora_driver_getRn2483Hweui+0x2e>
    3888:	63 e8       	ldi	r22, 0x83	; 131
    388a:	77 e1       	ldi	r23, 0x17	; 23
    388c:	ce 01       	movw	r24, r28
    388e:	0e 94 ac 2a 	call	0x5558	; 0x5558 <strcpy>
    3892:	80 e0       	ldi	r24, 0x00	; 0
    3894:	02 c0       	rjmp	.+4      	; 0x389a <lora_driver_getRn2483Hweui+0x32>
    3896:	18 82       	st	Y, r1
    3898:	81 e0       	ldi	r24, 0x01	; 1
    389a:	df 91       	pop	r29
    389c:	cf 91       	pop	r28
    389e:	08 95       	ret

000038a0 <lora_driver_setDeviceIdentifier>:
    38a0:	fc 01       	movw	r30, r24
    38a2:	01 90       	ld	r0, Z+
    38a4:	00 20       	and	r0, r0
    38a6:	e9 f7       	brne	.-6      	; 0x38a2 <lora_driver_setDeviceIdentifier+0x2>
    38a8:	9f 01       	movw	r18, r30
    38aa:	21 51       	subi	r18, 0x11	; 17
    38ac:	31 09       	sbc	r19, r1
    38ae:	28 17       	cp	r18, r24
    38b0:	39 07       	cpc	r19, r25
    38b2:	29 f4       	brne	.+10     	; 0x38be <lora_driver_setDeviceIdentifier+0x1e>
    38b4:	bc 01       	movw	r22, r24
    38b6:	82 e9       	ldi	r24, 0x92	; 146
    38b8:	95 e0       	ldi	r25, 0x05	; 5
    38ba:	6c cf       	rjmp	.-296    	; 0x3794 <_uploadMessageRc>
    38bc:	08 95       	ret
    38be:	89 e0       	ldi	r24, 0x09	; 9
    38c0:	08 95       	ret

000038c2 <lora_driver_setApplicationIdentifier>:
    38c2:	fc 01       	movw	r30, r24
    38c4:	01 90       	ld	r0, Z+
    38c6:	00 20       	and	r0, r0
    38c8:	e9 f7       	brne	.-6      	; 0x38c4 <lora_driver_setApplicationIdentifier+0x2>
    38ca:	9f 01       	movw	r18, r30
    38cc:	21 51       	subi	r18, 0x11	; 17
    38ce:	31 09       	sbc	r19, r1
    38d0:	28 17       	cp	r18, r24
    38d2:	39 07       	cpc	r19, r25
    38d4:	29 f4       	brne	.+10     	; 0x38e0 <lora_driver_setApplicationIdentifier+0x1e>
    38d6:	bc 01       	movw	r22, r24
    38d8:	81 ea       	ldi	r24, 0xA1	; 161
    38da:	95 e0       	ldi	r25, 0x05	; 5
    38dc:	5b cf       	rjmp	.-330    	; 0x3794 <_uploadMessageRc>
    38de:	08 95       	ret
    38e0:	89 e0       	ldi	r24, 0x09	; 9
    38e2:	08 95       	ret

000038e4 <lora_driver_setApplicationKey>:
    38e4:	fc 01       	movw	r30, r24
    38e6:	01 90       	ld	r0, Z+
    38e8:	00 20       	and	r0, r0
    38ea:	e9 f7       	brne	.-6      	; 0x38e6 <lora_driver_setApplicationKey+0x2>
    38ec:	9f 01       	movw	r18, r30
    38ee:	21 52       	subi	r18, 0x21	; 33
    38f0:	31 09       	sbc	r19, r1
    38f2:	28 17       	cp	r18, r24
    38f4:	39 07       	cpc	r19, r25
    38f6:	29 f4       	brne	.+10     	; 0x3902 <lora_driver_setApplicationKey+0x1e>
    38f8:	bc 01       	movw	r22, r24
    38fa:	80 eb       	ldi	r24, 0xB0	; 176
    38fc:	95 e0       	ldi	r25, 0x05	; 5
    38fe:	4a cf       	rjmp	.-364    	; 0x3794 <_uploadMessageRc>
    3900:	08 95       	ret
    3902:	89 e0       	ldi	r24, 0x09	; 9
    3904:	08 95       	ret

00003906 <lora_driver_saveMac>:
    3906:	60 e0       	ldi	r22, 0x00	; 0
    3908:	70 e0       	ldi	r23, 0x00	; 0
    390a:	8f ee       	ldi	r24, 0xEF	; 239
    390c:	95 e0       	ldi	r25, 0x05	; 5
    390e:	42 cf       	rjmp	.-380    	; 0x3794 <_uploadMessageRc>
    3910:	08 95       	ret

00003912 <lora_driver_join>:
    3912:	0f 93       	push	r16
    3914:	1f 93       	push	r17
    3916:	e8 2f       	mov	r30, r24
    3918:	f0 e0       	ldi	r31, 0x00	; 0
    391a:	ee 0f       	add	r30, r30
    391c:	ff 1f       	adc	r31, r31
    391e:	e7 53       	subi	r30, 0x37	; 55
    3920:	f8 4f       	sbci	r31, 0xF8	; 248
    3922:	60 81       	ld	r22, Z
    3924:	71 81       	ldd	r23, Z+1	; 0x01
    3926:	88 ef       	ldi	r24, 0xF8	; 248
    3928:	95 e0       	ldi	r25, 0x05	; 5
    392a:	34 df       	rcall	.-408    	; 0x3794 <_uploadMessageRc>
    392c:	81 11       	cpse	r24, r1
    392e:	14 c0       	rjmp	.+40     	; 0x3958 <lora_driver_join+0x46>
    3930:	08 e2       	ldi	r16, 0x28	; 40
    3932:	15 e0       	ldi	r17, 0x05	; 5
    3934:	20 e0       	ldi	r18, 0x00	; 0
    3936:	30 e0       	ldi	r19, 0x00	; 0
    3938:	4d e2       	ldi	r20, 0x2D	; 45
    393a:	50 e0       	ldi	r21, 0x00	; 0
    393c:	63 e8       	ldi	r22, 0x83	; 131
    393e:	77 e1       	ldi	r23, 0x17	; 23
    3940:	80 91 fa 16 	lds	r24, 0x16FA	; 0x8016fa <_serialReplyBufferHandle>
    3944:	90 91 fb 16 	lds	r25, 0x16FB	; 0x8016fb <_serialReplyBufferHandle+0x1>
    3948:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <xStreamBufferReceive>
    394c:	88 23       	and	r24, r24
    394e:	21 f0       	breq	.+8      	; 0x3958 <lora_driver_join+0x46>
    3950:	83 e8       	ldi	r24, 0x83	; 131
    3952:	97 e1       	ldi	r25, 0x17	; 23
    3954:	aa de       	rcall	.-684    	; 0x36aa <_reply2ReturnCode>
    3956:	03 c0       	rjmp	.+6      	; 0x395e <lora_driver_join+0x4c>
    3958:	83 e8       	ldi	r24, 0x83	; 131
    395a:	97 e1       	ldi	r25, 0x17	; 23
    395c:	a6 de       	rcall	.-692    	; 0x36aa <_reply2ReturnCode>
    395e:	1f 91       	pop	r17
    3960:	0f 91       	pop	r16
    3962:	08 95       	ret

00003964 <lora_driver_sendUploadMessage>:
    3964:	0f 93       	push	r16
    3966:	1f 93       	push	r17
    3968:	cf 93       	push	r28
    396a:	df 93       	push	r29
    396c:	1f 92       	push	r1
    396e:	cd b7       	in	r28, 0x3d	; 61
    3970:	de b7       	in	r29, 0x3e	; 62
    3972:	db 01       	movw	r26, r22
    3974:	11 96       	adiw	r26, 0x01	; 1
    3976:	9c 91       	ld	r25, X
    3978:	11 97       	sbiw	r26, 0x01	; 1
    397a:	95 31       	cpi	r25, 0x15	; 21
    397c:	08 f0       	brcs	.+2      	; 0x3980 <lora_driver_sendUploadMessage+0x1c>
    397e:	b4 c0       	rjmp	.+360    	; 0x3ae8 <lora_driver_sendUploadMessage+0x184>
    3980:	99 23       	and	r25, r25
    3982:	81 f1       	breq	.+96     	; 0x39e4 <lora_driver_sendUploadMessage+0x80>
    3984:	60 e0       	ldi	r22, 0x00	; 0
    3986:	70 e0       	ldi	r23, 0x00	; 0
    3988:	27 2f       	mov	r18, r23
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	46 2f       	mov	r20, r22
    398e:	50 e0       	ldi	r21, 0x00	; 0
    3990:	fd 01       	movw	r30, r26
    3992:	e4 0f       	add	r30, r20
    3994:	f5 1f       	adc	r31, r21
    3996:	92 81       	ldd	r25, Z+2	; 0x02
    3998:	92 95       	swap	r25
    399a:	9f 70       	andi	r25, 0x0F	; 15
    399c:	9a 30       	cpi	r25, 0x0A	; 10
    399e:	10 f0       	brcs	.+4      	; 0x39a4 <lora_driver_sendUploadMessage+0x40>
    39a0:	99 5c       	subi	r25, 0xC9	; 201
    39a2:	01 c0       	rjmp	.+2      	; 0x39a6 <lora_driver_sendUploadMessage+0x42>
    39a4:	90 5d       	subi	r25, 0xD0	; 208
    39a6:	f9 01       	movw	r30, r18
    39a8:	ec 5e       	subi	r30, 0xEC	; 236
    39aa:	f8 4e       	sbci	r31, 0xE8	; 232
    39ac:	90 83       	st	Z, r25
    39ae:	2f 5f       	subi	r18, 0xFF	; 255
    39b0:	3f 4f       	sbci	r19, 0xFF	; 255
    39b2:	fd 01       	movw	r30, r26
    39b4:	e4 0f       	add	r30, r20
    39b6:	f5 1f       	adc	r31, r21
    39b8:	92 81       	ldd	r25, Z+2	; 0x02
    39ba:	9f 70       	andi	r25, 0x0F	; 15
    39bc:	49 2f       	mov	r20, r25
    39be:	50 e0       	ldi	r21, 0x00	; 0
    39c0:	4a 30       	cpi	r20, 0x0A	; 10
    39c2:	51 05       	cpc	r21, r1
    39c4:	14 f0       	brlt	.+4      	; 0x39ca <lora_driver_sendUploadMessage+0x66>
    39c6:	99 5c       	subi	r25, 0xC9	; 201
    39c8:	01 c0       	rjmp	.+2      	; 0x39cc <lora_driver_sendUploadMessage+0x68>
    39ca:	90 5d       	subi	r25, 0xD0	; 208
    39cc:	f9 01       	movw	r30, r18
    39ce:	ec 5e       	subi	r30, 0xEC	; 236
    39d0:	f8 4e       	sbci	r31, 0xE8	; 232
    39d2:	90 83       	st	Z, r25
    39d4:	7e 5f       	subi	r23, 0xFE	; 254
    39d6:	6f 5f       	subi	r22, 0xFF	; 255
    39d8:	11 96       	adiw	r26, 0x01	; 1
    39da:	9c 91       	ld	r25, X
    39dc:	11 97       	sbiw	r26, 0x01	; 1
    39de:	69 17       	cp	r22, r25
    39e0:	98 f2       	brcs	.-90     	; 0x3988 <lora_driver_sendUploadMessage+0x24>
    39e2:	01 c0       	rjmp	.+2      	; 0x39e6 <lora_driver_sendUploadMessage+0x82>
    39e4:	70 e0       	ldi	r23, 0x00	; 0
    39e6:	e7 2f       	mov	r30, r23
    39e8:	f0 e0       	ldi	r31, 0x00	; 0
    39ea:	ec 5e       	subi	r30, 0xEC	; 236
    39ec:	f8 4e       	sbci	r31, 0xE8	; 232
    39ee:	10 82       	st	Z, r1
    39f0:	4c 91       	ld	r20, X
    39f2:	81 11       	cpse	r24, r1
    39f4:	03 c0       	rjmp	.+6      	; 0x39fc <lora_driver_sendUploadMessage+0x98>
    39f6:	81 e0       	ldi	r24, 0x01	; 1
    39f8:	96 e0       	ldi	r25, 0x06	; 6
    39fa:	02 c0       	rjmp	.+4      	; 0x3a00 <lora_driver_sendUploadMessage+0x9c>
    39fc:	83 e0       	ldi	r24, 0x03	; 3
    39fe:	96 e0       	ldi	r25, 0x06	; 6
    3a00:	24 e1       	ldi	r18, 0x14	; 20
    3a02:	37 e1       	ldi	r19, 0x17	; 23
    3a04:	3f 93       	push	r19
    3a06:	2f 93       	push	r18
    3a08:	1f 92       	push	r1
    3a0a:	4f 93       	push	r20
    3a0c:	9f 93       	push	r25
    3a0e:	8f 93       	push	r24
    3a10:	87 e0       	ldi	r24, 0x07	; 7
    3a12:	96 e0       	ldi	r25, 0x06	; 6
    3a14:	9f 93       	push	r25
    3a16:	8f 93       	push	r24
    3a18:	86 e5       	ldi	r24, 0x56	; 86
    3a1a:	97 e1       	ldi	r25, 0x17	; 23
    3a1c:	9f 93       	push	r25
    3a1e:	8f 93       	push	r24
    3a20:	0e 94 0e 2b 	call	0x561c	; 0x561c <sprintf>
    3a24:	60 e0       	ldi	r22, 0x00	; 0
    3a26:	70 e0       	ldi	r23, 0x00	; 0
    3a28:	86 e5       	ldi	r24, 0x56	; 86
    3a2a:	97 e1       	ldi	r25, 0x17	; 23
    3a2c:	b3 de       	rcall	.-666    	; 0x3794 <_uploadMessageRc>
    3a2e:	0f b6       	in	r0, 0x3f	; 63
    3a30:	f8 94       	cli
    3a32:	de bf       	out	0x3e, r29	; 62
    3a34:	0f be       	out	0x3f, r0	; 63
    3a36:	cd bf       	out	0x3d, r28	; 61
    3a38:	81 11       	cpse	r24, r1
    3a3a:	59 c0       	rjmp	.+178    	; 0x3aee <lora_driver_sendUploadMessage+0x18a>
    3a3c:	08 e2       	ldi	r16, 0x28	; 40
    3a3e:	15 e0       	ldi	r17, 0x05	; 5
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	4d e2       	ldi	r20, 0x2D	; 45
    3a46:	50 e0       	ldi	r21, 0x00	; 0
    3a48:	63 e8       	ldi	r22, 0x83	; 131
    3a4a:	77 e1       	ldi	r23, 0x17	; 23
    3a4c:	80 91 fa 16 	lds	r24, 0x16FA	; 0x8016fa <_serialReplyBufferHandle>
    3a50:	90 91 fb 16 	lds	r25, 0x16FB	; 0x8016fb <_serialReplyBufferHandle+0x1>
    3a54:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <xStreamBufferReceive>
    3a58:	88 23       	and	r24, r24
    3a5a:	09 f4       	brne	.+2      	; 0x3a5e <lora_driver_sendUploadMessage+0xfa>
    3a5c:	47 c0       	rjmp	.+142    	; 0x3aec <lora_driver_sendUploadMessage+0x188>
    3a5e:	83 e8       	ldi	r24, 0x83	; 131
    3a60:	97 e1       	ldi	r25, 0x17	; 23
    3a62:	23 de       	rcall	.-954    	; 0x36aa <_reply2ReturnCode>
    3a64:	8e 30       	cpi	r24, 0x0E	; 14
    3a66:	09 f0       	breq	.+2      	; 0x3a6a <lora_driver_sendUploadMessage+0x106>
    3a68:	42 c0       	rjmp	.+132    	; 0x3aee <lora_driver_sendUploadMessage+0x18a>
    3a6a:	87 e0       	ldi	r24, 0x07	; 7
    3a6c:	89 83       	std	Y+1, r24	; 0x01
    3a6e:	80 91 f8 16 	lds	r24, 0x16F8	; 0x8016f8 <_downlinkMessageBuffer>
    3a72:	90 91 f9 16 	lds	r25, 0x16F9	; 0x8016f9 <_downlinkMessageBuffer+0x1>
    3a76:	89 2b       	or	r24, r25
    3a78:	a9 f1       	breq	.+106    	; 0x3ae4 <lora_driver_sendUploadMessage+0x180>
    3a7a:	be 01       	movw	r22, r28
    3a7c:	6f 5f       	subi	r22, 0xFF	; 255
    3a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a80:	83 e8       	ldi	r24, 0x83	; 131
    3a82:	97 e1       	ldi	r25, 0x17	; 23
    3a84:	68 d1       	rcall	.+720    	; 0x3d56 <decode_port_no>
    3a86:	80 93 fe 16 	sts	0x16FE, r24	; 0x8016fe <_downlinkPayload>
    3a8a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a8c:	f0 e0       	ldi	r31, 0x00	; 0
    3a8e:	ed 57       	subi	r30, 0x7D	; 125
    3a90:	f8 4e       	sbci	r31, 0xE8	; 232
    3a92:	df 01       	movw	r26, r30
    3a94:	0d 90       	ld	r0, X+
    3a96:	00 20       	and	r0, r0
    3a98:	e9 f7       	brne	.-6      	; 0x3a94 <lora_driver_sendUploadMessage+0x130>
    3a9a:	11 97       	sbiw	r26, 0x01	; 1
    3a9c:	ae 1b       	sub	r26, r30
    3a9e:	bf 0b       	sbc	r27, r31
    3aa0:	aa 23       	and	r26, r26
    3aa2:	91 f0       	breq	.+36     	; 0x3ac8 <lora_driver_sendUploadMessage+0x164>
    3aa4:	bb 27       	eor	r27, r27
    3aa6:	cd 01       	movw	r24, r26
    3aa8:	01 97       	sbiw	r24, 0x01	; 1
    3aaa:	9c 01       	movw	r18, r24
    3aac:	12 f4       	brpl	.+4      	; 0x3ab2 <lora_driver_sendUploadMessage+0x14e>
    3aae:	2f 5f       	subi	r18, 0xFF	; 255
    3ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ab2:	35 95       	asr	r19
    3ab4:	27 95       	ror	r18
    3ab6:	20 93 ff 16 	sts	0x16FF, r18	; 0x8016ff <_downlinkPayload+0x1>
    3aba:	af 01       	movw	r20, r30
    3abc:	4f 5f       	subi	r20, 0xFF	; 255
    3abe:	5f 4f       	sbci	r21, 0xFF	; 255
    3ac0:	64 e1       	ldi	r22, 0x14	; 20
    3ac2:	80 e0       	ldi	r24, 0x00	; 0
    3ac4:	97 e1       	ldi	r25, 0x17	; 23
    3ac6:	73 d1       	rcall	.+742    	; 0x3dae <decode_hexadecimal_string_bytes>
    3ac8:	01 e0       	ldi	r16, 0x01	; 1
    3aca:	10 e0       	ldi	r17, 0x00	; 0
    3acc:	20 e0       	ldi	r18, 0x00	; 0
    3ace:	30 e0       	ldi	r19, 0x00	; 0
    3ad0:	46 e1       	ldi	r20, 0x16	; 22
    3ad2:	50 e0       	ldi	r21, 0x00	; 0
    3ad4:	6e ef       	ldi	r22, 0xFE	; 254
    3ad6:	76 e1       	ldi	r23, 0x16	; 22
    3ad8:	80 91 f8 16 	lds	r24, 0x16F8	; 0x8016f8 <_downlinkMessageBuffer>
    3adc:	90 91 f9 16 	lds	r25, 0x16F9	; 0x8016f9 <_downlinkMessageBuffer+0x1>
    3ae0:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <xStreamBufferSend>
    3ae4:	8e e0       	ldi	r24, 0x0E	; 14
    3ae6:	03 c0       	rjmp	.+6      	; 0x3aee <lora_driver_sendUploadMessage+0x18a>
    3ae8:	84 e1       	ldi	r24, 0x14	; 20
    3aea:	01 c0       	rjmp	.+2      	; 0x3aee <lora_driver_sendUploadMessage+0x18a>
    3aec:	80 e0       	ldi	r24, 0x00	; 0
    3aee:	0f 90       	pop	r0
    3af0:	df 91       	pop	r29
    3af2:	cf 91       	pop	r28
    3af4:	1f 91       	pop	r17
    3af6:	0f 91       	pop	r16
    3af8:	08 95       	ret

00003afa <lora_driver_setAdaptiveDataRate>:
    3afa:	81 30       	cpi	r24, 0x01	; 1
    3afc:	19 f0       	breq	.+6      	; 0x3b04 <lora_driver_setAdaptiveDataRate+0xa>
    3afe:	67 e1       	ldi	r22, 0x17	; 23
    3b00:	76 e0       	ldi	r23, 0x06	; 6
    3b02:	02 c0       	rjmp	.+4      	; 0x3b08 <lora_driver_setAdaptiveDataRate+0xe>
    3b04:	60 ef       	ldi	r22, 0xF0	; 240
    3b06:	76 e0       	ldi	r23, 0x06	; 6
    3b08:	8b e1       	ldi	r24, 0x1B	; 27
    3b0a:	96 e0       	ldi	r25, 0x06	; 6
    3b0c:	43 ce       	rjmp	.-890    	; 0x3794 <_uploadMessageRc>
    3b0e:	08 95       	ret

00003b10 <lora_driver_setReceiveDelay>:
    3b10:	9f 93       	push	r25
    3b12:	8f 93       	push	r24
    3b14:	8c e4       	ldi	r24, 0x4C	; 76
    3b16:	96 e0       	ldi	r25, 0x06	; 6
    3b18:	9f 93       	push	r25
    3b1a:	8f 93       	push	r24
    3b1c:	86 e5       	ldi	r24, 0x56	; 86
    3b1e:	97 e1       	ldi	r25, 0x17	; 23
    3b20:	9f 93       	push	r25
    3b22:	8f 93       	push	r24
    3b24:	0e 94 0e 2b 	call	0x561c	; 0x561c <sprintf>
    3b28:	60 e0       	ldi	r22, 0x00	; 0
    3b2a:	70 e0       	ldi	r23, 0x00	; 0
    3b2c:	86 e5       	ldi	r24, 0x56	; 86
    3b2e:	97 e1       	ldi	r25, 0x17	; 23
    3b30:	31 de       	rcall	.-926    	; 0x3794 <_uploadMessageRc>
    3b32:	0f 90       	pop	r0
    3b34:	0f 90       	pop	r0
    3b36:	0f 90       	pop	r0
    3b38:	0f 90       	pop	r0
    3b3a:	0f 90       	pop	r0
    3b3c:	0f 90       	pop	r0
    3b3e:	08 95       	ret

00003b40 <lora_driver_configureToEu868>:
    3b40:	2f 92       	push	r2
    3b42:	3f 92       	push	r3
    3b44:	4f 92       	push	r4
    3b46:	5f 92       	push	r5
    3b48:	6f 92       	push	r6
    3b4a:	7f 92       	push	r7
    3b4c:	8f 92       	push	r8
    3b4e:	9f 92       	push	r9
    3b50:	af 92       	push	r10
    3b52:	bf 92       	push	r11
    3b54:	cf 92       	push	r12
    3b56:	df 92       	push	r13
    3b58:	ef 92       	push	r14
    3b5a:	ff 92       	push	r15
    3b5c:	0f 93       	push	r16
    3b5e:	1f 93       	push	r17
    3b60:	cf 93       	push	r28
    3b62:	df 93       	push	r29
    3b64:	cd b7       	in	r28, 0x3d	; 61
    3b66:	de b7       	in	r29, 0x3e	; 62
    3b68:	a0 97       	sbiw	r28, 0x20	; 32
    3b6a:	0f b6       	in	r0, 0x3f	; 63
    3b6c:	f8 94       	cli
    3b6e:	de bf       	out	0x3e, r29	; 62
    3b70:	0f be       	out	0x3f, r0	; 63
    3b72:	cd bf       	out	0x3d, r28	; 61
    3b74:	69 e7       	ldi	r22, 0x79	; 121
    3b76:	76 e0       	ldi	r23, 0x06	; 6
    3b78:	85 e8       	ldi	r24, 0x85	; 133
    3b7a:	96 e0       	ldi	r25, 0x06	; 6
    3b7c:	3c dd       	rcall	.-1416   	; 0x35f6 <_uploadMessage>
    3b7e:	95 dd       	rcall	.-1238   	; 0x36aa <_reply2ReturnCode>
    3b80:	81 11       	cpse	r24, r1
    3b82:	a3 c0       	rjmp	.+326    	; 0x3cca <lora_driver_configureToEu868+0x18a>
    3b84:	80 e2       	ldi	r24, 0x20	; 32
    3b86:	e2 e2       	ldi	r30, 0x22	; 34
    3b88:	f2 e0       	ldi	r31, 0x02	; 2
    3b8a:	de 01       	movw	r26, r28
    3b8c:	11 96       	adiw	r26, 0x01	; 1
    3b8e:	01 90       	ld	r0, Z+
    3b90:	0d 92       	st	X+, r0
    3b92:	8a 95       	dec	r24
    3b94:	e1 f7       	brne	.-8      	; 0x3b8e <lora_driver_configureToEu868+0x4e>
    3b96:	9e 01       	movw	r18, r28
    3b98:	2f 5f       	subi	r18, 0xFF	; 255
    3b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b9c:	69 01       	movw	r12, r18
    3b9e:	e1 2c       	mov	r14, r1
    3ba0:	f1 2c       	mov	r15, r1
    3ba2:	0f 2e       	mov	r0, r31
    3ba4:	f1 e9       	ldi	r31, 0x91	; 145
    3ba6:	af 2e       	mov	r10, r31
    3ba8:	f6 e0       	ldi	r31, 0x06	; 6
    3baa:	bf 2e       	mov	r11, r31
    3bac:	f0 2d       	mov	r31, r0
    3bae:	06 e5       	ldi	r16, 0x56	; 86
    3bb0:	17 e1       	ldi	r17, 0x17	; 23
    3bb2:	0f 2e       	mov	r0, r31
    3bb4:	fa ea       	ldi	r31, 0xAA	; 170
    3bb6:	4f 2e       	mov	r4, r31
    3bb8:	f6 e0       	ldi	r31, 0x06	; 6
    3bba:	5f 2e       	mov	r5, r31
    3bbc:	f0 2d       	mov	r31, r0
    3bbe:	0f 2e       	mov	r0, r31
    3bc0:	f1 ec       	ldi	r31, 0xC1	; 193
    3bc2:	8f 2e       	mov	r8, r31
    3bc4:	f6 e0       	ldi	r31, 0x06	; 6
    3bc6:	9f 2e       	mov	r9, r31
    3bc8:	f0 2d       	mov	r31, r0
    3bca:	0f 2e       	mov	r0, r31
    3bcc:	fb ed       	ldi	r31, 0xDB	; 219
    3bce:	6f 2e       	mov	r6, r31
    3bd0:	f6 e0       	ldi	r31, 0x06	; 6
    3bd2:	7f 2e       	mov	r7, r31
    3bd4:	f0 2d       	mov	r31, r0
    3bd6:	3e 2c       	mov	r3, r14
    3bd8:	2f 2c       	mov	r2, r15
    3bda:	ff 92       	push	r15
    3bdc:	ef 92       	push	r14
    3bde:	bf 92       	push	r11
    3be0:	af 92       	push	r10
    3be2:	1f 93       	push	r17
    3be4:	0f 93       	push	r16
    3be6:	0e 94 0e 2b 	call	0x561c	; 0x561c <sprintf>
    3bea:	60 e0       	ldi	r22, 0x00	; 0
    3bec:	70 e0       	ldi	r23, 0x00	; 0
    3bee:	c8 01       	movw	r24, r16
    3bf0:	02 dd       	rcall	.-1532   	; 0x35f6 <_uploadMessage>
    3bf2:	5b dd       	rcall	.-1354   	; 0x36aa <_reply2ReturnCode>
    3bf4:	0f 90       	pop	r0
    3bf6:	0f 90       	pop	r0
    3bf8:	0f 90       	pop	r0
    3bfa:	0f 90       	pop	r0
    3bfc:	0f 90       	pop	r0
    3bfe:	0f 90       	pop	r0
    3c00:	81 11       	cpse	r24, r1
    3c02:	63 c0       	rjmp	.+198    	; 0x3cca <lora_driver_configureToEu868+0x18a>
    3c04:	32 e0       	ldi	r19, 0x02	; 2
    3c06:	3e 15       	cp	r19, r14
    3c08:	e8 f4       	brcc	.+58     	; 0x3c44 <lora_driver_configureToEu868+0x104>
    3c0a:	f6 01       	movw	r30, r12
    3c0c:	83 81       	ldd	r24, Z+3	; 0x03
    3c0e:	8f 93       	push	r24
    3c10:	82 81       	ldd	r24, Z+2	; 0x02
    3c12:	8f 93       	push	r24
    3c14:	81 81       	ldd	r24, Z+1	; 0x01
    3c16:	8f 93       	push	r24
    3c18:	80 81       	ld	r24, Z
    3c1a:	8f 93       	push	r24
    3c1c:	ff 92       	push	r15
    3c1e:	ef 92       	push	r14
    3c20:	5f 92       	push	r5
    3c22:	4f 92       	push	r4
    3c24:	1f 93       	push	r17
    3c26:	0f 93       	push	r16
    3c28:	0e 94 0e 2b 	call	0x561c	; 0x561c <sprintf>
    3c2c:	60 e0       	ldi	r22, 0x00	; 0
    3c2e:	70 e0       	ldi	r23, 0x00	; 0
    3c30:	c8 01       	movw	r24, r16
    3c32:	e1 dc       	rcall	.-1598   	; 0x35f6 <_uploadMessage>
    3c34:	3a dd       	rcall	.-1420   	; 0x36aa <_reply2ReturnCode>
    3c36:	0f b6       	in	r0, 0x3f	; 63
    3c38:	f8 94       	cli
    3c3a:	de bf       	out	0x3e, r29	; 62
    3c3c:	0f be       	out	0x3f, r0	; 63
    3c3e:	cd bf       	out	0x3d, r28	; 61
    3c40:	81 11       	cpse	r24, r1
    3c42:	43 c0       	rjmp	.+134    	; 0x3cca <lora_driver_configureToEu868+0x18a>
    3c44:	2f 92       	push	r2
    3c46:	3f 92       	push	r3
    3c48:	9f 92       	push	r9
    3c4a:	8f 92       	push	r8
    3c4c:	1f 93       	push	r17
    3c4e:	0f 93       	push	r16
    3c50:	0e 94 0e 2b 	call	0x561c	; 0x561c <sprintf>
    3c54:	60 e0       	ldi	r22, 0x00	; 0
    3c56:	70 e0       	ldi	r23, 0x00	; 0
    3c58:	c8 01       	movw	r24, r16
    3c5a:	cd dc       	rcall	.-1638   	; 0x35f6 <_uploadMessage>
    3c5c:	26 dd       	rcall	.-1460   	; 0x36aa <_reply2ReturnCode>
    3c5e:	0f 90       	pop	r0
    3c60:	0f 90       	pop	r0
    3c62:	0f 90       	pop	r0
    3c64:	0f 90       	pop	r0
    3c66:	0f 90       	pop	r0
    3c68:	0f 90       	pop	r0
    3c6a:	81 11       	cpse	r24, r1
    3c6c:	2e c0       	rjmp	.+92     	; 0x3cca <lora_driver_configureToEu868+0x18a>
    3c6e:	2f 92       	push	r2
    3c70:	3f 92       	push	r3
    3c72:	7f 92       	push	r7
    3c74:	6f 92       	push	r6
    3c76:	1f 93       	push	r17
    3c78:	0f 93       	push	r16
    3c7a:	0e 94 0e 2b 	call	0x561c	; 0x561c <sprintf>
    3c7e:	60 e0       	ldi	r22, 0x00	; 0
    3c80:	70 e0       	ldi	r23, 0x00	; 0
    3c82:	c8 01       	movw	r24, r16
    3c84:	b8 dc       	rcall	.-1680   	; 0x35f6 <_uploadMessage>
    3c86:	11 dd       	rcall	.-1502   	; 0x36aa <_reply2ReturnCode>
    3c88:	0f 90       	pop	r0
    3c8a:	0f 90       	pop	r0
    3c8c:	0f 90       	pop	r0
    3c8e:	0f 90       	pop	r0
    3c90:	0f 90       	pop	r0
    3c92:	0f 90       	pop	r0
    3c94:	81 11       	cpse	r24, r1
    3c96:	19 c0       	rjmp	.+50     	; 0x3cca <lora_driver_configureToEu868+0x18a>
    3c98:	3f ef       	ldi	r19, 0xFF	; 255
    3c9a:	e3 1a       	sub	r14, r19
    3c9c:	f3 0a       	sbc	r15, r19
    3c9e:	84 e0       	ldi	r24, 0x04	; 4
    3ca0:	c8 0e       	add	r12, r24
    3ca2:	d1 1c       	adc	r13, r1
    3ca4:	98 e0       	ldi	r25, 0x08	; 8
    3ca6:	e9 16       	cp	r14, r25
    3ca8:	f1 04       	cpc	r15, r1
    3caa:	09 f0       	breq	.+2      	; 0x3cae <lora_driver_configureToEu868+0x16e>
    3cac:	94 cf       	rjmp	.-216    	; 0x3bd6 <lora_driver_configureToEu868+0x96>
    3cae:	60 e0       	ldi	r22, 0x00	; 0
    3cb0:	70 e0       	ldi	r23, 0x00	; 0
    3cb2:	83 ef       	ldi	r24, 0xF3	; 243
    3cb4:	96 e0       	ldi	r25, 0x06	; 6
    3cb6:	9f dc       	rcall	.-1730   	; 0x35f6 <_uploadMessage>
    3cb8:	f8 dc       	rcall	.-1552   	; 0x36aa <_reply2ReturnCode>
    3cba:	81 11       	cpse	r24, r1
    3cbc:	06 c0       	rjmp	.+12     	; 0x3cca <lora_driver_configureToEu868+0x18a>
    3cbe:	60 e0       	ldi	r22, 0x00	; 0
    3cc0:	70 e0       	ldi	r23, 0x00	; 0
    3cc2:	84 e0       	ldi	r24, 0x04	; 4
    3cc4:	97 e0       	ldi	r25, 0x07	; 7
    3cc6:	97 dc       	rcall	.-1746   	; 0x35f6 <_uploadMessage>
    3cc8:	f0 dc       	rcall	.-1568   	; 0x36aa <_reply2ReturnCode>
    3cca:	a0 96       	adiw	r28, 0x20	; 32
    3ccc:	0f b6       	in	r0, 0x3f	; 63
    3cce:	f8 94       	cli
    3cd0:	de bf       	out	0x3e, r29	; 62
    3cd2:	0f be       	out	0x3f, r0	; 63
    3cd4:	cd bf       	out	0x3d, r28	; 61
    3cd6:	df 91       	pop	r29
    3cd8:	cf 91       	pop	r28
    3cda:	1f 91       	pop	r17
    3cdc:	0f 91       	pop	r16
    3cde:	ff 90       	pop	r15
    3ce0:	ef 90       	pop	r14
    3ce2:	df 90       	pop	r13
    3ce4:	cf 90       	pop	r12
    3ce6:	bf 90       	pop	r11
    3ce8:	af 90       	pop	r10
    3cea:	9f 90       	pop	r9
    3cec:	8f 90       	pop	r8
    3cee:	7f 90       	pop	r7
    3cf0:	6f 90       	pop	r6
    3cf2:	5f 90       	pop	r5
    3cf4:	4f 90       	pop	r4
    3cf6:	3f 90       	pop	r3
    3cf8:	2f 90       	pop	r2
    3cfa:	08 95       	ret

00003cfc <lora_driver_setOtaaIdentity>:
    3cfc:	ef 92       	push	r14
    3cfe:	ff 92       	push	r15
    3d00:	0f 93       	push	r16
    3d02:	1f 93       	push	r17
    3d04:	cf 93       	push	r28
    3d06:	df 93       	push	r29
    3d08:	ec 01       	movw	r28, r24
    3d0a:	8b 01       	movw	r16, r22
    3d0c:	7a 01       	movw	r14, r20
    3d0e:	81 e0       	ldi	r24, 0x01	; 1
    3d10:	f4 de       	rcall	.-536    	; 0x3afa <lora_driver_setAdaptiveDataRate>
    3d12:	81 11       	cpse	r24, r1
    3d14:	0d c0       	rjmp	.+26     	; 0x3d30 <lora_driver_setOtaaIdentity+0x34>
    3d16:	ce 01       	movw	r24, r28
    3d18:	d4 dd       	rcall	.-1112   	; 0x38c2 <lora_driver_setApplicationIdentifier>
    3d1a:	81 11       	cpse	r24, r1
    3d1c:	09 c0       	rjmp	.+18     	; 0x3d30 <lora_driver_setOtaaIdentity+0x34>
    3d1e:	c8 01       	movw	r24, r16
    3d20:	e1 dd       	rcall	.-1086   	; 0x38e4 <lora_driver_setApplicationKey>
    3d22:	81 11       	cpse	r24, r1
    3d24:	05 c0       	rjmp	.+10     	; 0x3d30 <lora_driver_setOtaaIdentity+0x34>
    3d26:	c7 01       	movw	r24, r14
    3d28:	bb dd       	rcall	.-1162   	; 0x38a0 <lora_driver_setDeviceIdentifier>
    3d2a:	81 11       	cpse	r24, r1
    3d2c:	01 c0       	rjmp	.+2      	; 0x3d30 <lora_driver_setOtaaIdentity+0x34>
    3d2e:	eb dd       	rcall	.-1066   	; 0x3906 <lora_driver_saveMac>
    3d30:	df 91       	pop	r29
    3d32:	cf 91       	pop	r28
    3d34:	1f 91       	pop	r17
    3d36:	0f 91       	pop	r16
    3d38:	ff 90       	pop	r15
    3d3a:	ef 90       	pop	r14
    3d3c:	08 95       	ret

00003d3e <lora_driver_mapReturnCodeToText>:
    3d3e:	90 e0       	ldi	r25, 0x00	; 0
    3d40:	fc 01       	movw	r30, r24
    3d42:	ee 0f       	add	r30, r30
    3d44:	ff 1f       	adc	r31, r31
    3d46:	8e 0f       	add	r24, r30
    3d48:	9f 1f       	adc	r25, r31
    3d4a:	fc 01       	movw	r30, r24
    3d4c:	e3 53       	subi	r30, 0x33	; 51
    3d4e:	f8 4f       	sbci	r31, 0xF8	; 248
    3d50:	81 81       	ldd	r24, Z+1	; 0x01
    3d52:	92 81       	ldd	r25, Z+2	; 0x02
    3d54:	08 95       	ret

00003d56 <decode_port_no>:
    3d56:	dc 01       	movw	r26, r24
    3d58:	00 97       	sbiw	r24, 0x00	; 0
    3d5a:	29 f1       	breq	.+74     	; 0x3da6 <decode_port_no+0x50>
    3d5c:	fb 01       	movw	r30, r22
    3d5e:	20 81       	ld	r18, Z
    3d60:	fc 01       	movw	r30, r24
    3d62:	01 90       	ld	r0, Z+
    3d64:	00 20       	and	r0, r0
    3d66:	e9 f7       	brne	.-6      	; 0x3d62 <decode_port_no+0xc>
    3d68:	31 97       	sbiw	r30, 0x01	; 1
    3d6a:	e8 1b       	sub	r30, r24
    3d6c:	f9 0b       	sbc	r31, r25
    3d6e:	82 2f       	mov	r24, r18
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	e8 17       	cp	r30, r24
    3d74:	f9 07       	cpc	r31, r25
    3d76:	c8 f0       	brcs	.+50     	; 0x3daa <decode_port_no+0x54>
    3d78:	80 e0       	ldi	r24, 0x00	; 0
    3d7a:	08 c0       	rjmp	.+16     	; 0x3d8c <decode_port_no+0x36>
    3d7c:	88 0f       	add	r24, r24
    3d7e:	38 2f       	mov	r19, r24
    3d80:	33 0f       	add	r19, r19
    3d82:	33 0f       	add	r19, r19
    3d84:	83 0f       	add	r24, r19
    3d86:	80 53       	subi	r24, 0x30	; 48
    3d88:	89 0f       	add	r24, r25
    3d8a:	2f 5f       	subi	r18, 0xFF	; 255
    3d8c:	fd 01       	movw	r30, r26
    3d8e:	e2 0f       	add	r30, r18
    3d90:	f1 1d       	adc	r31, r1
    3d92:	90 81       	ld	r25, Z
    3d94:	30 ed       	ldi	r19, 0xD0	; 208
    3d96:	39 0f       	add	r19, r25
    3d98:	3a 30       	cpi	r19, 0x0A	; 10
    3d9a:	10 f4       	brcc	.+4      	; 0x3da0 <decode_port_no+0x4a>
    3d9c:	91 11       	cpse	r25, r1
    3d9e:	ee cf       	rjmp	.-36     	; 0x3d7c <decode_port_no+0x26>
    3da0:	fb 01       	movw	r30, r22
    3da2:	20 83       	st	Z, r18
    3da4:	08 95       	ret
    3da6:	80 e0       	ldi	r24, 0x00	; 0
    3da8:	08 95       	ret
    3daa:	80 e0       	ldi	r24, 0x00	; 0
    3dac:	08 95       	ret

00003dae <decode_hexadecimal_string_bytes>:
    3dae:	0f 93       	push	r16
    3db0:	1f 93       	push	r17
    3db2:	cf 93       	push	r28
    3db4:	df 93       	push	r29
    3db6:	dc 01       	movw	r26, r24
    3db8:	ea 01       	movw	r28, r20
    3dba:	20 97       	sbiw	r28, 0x00	; 0
    3dbc:	e1 f1       	breq	.+120    	; 0x3e36 <decode_hexadecimal_string_bytes+0x88>
    3dbe:	fa 01       	movw	r30, r20
    3dc0:	01 90       	ld	r0, Z+
    3dc2:	00 20       	and	r0, r0
    3dc4:	e9 f7       	brne	.-6      	; 0x3dc0 <decode_hexadecimal_string_bytes+0x12>
    3dc6:	31 97       	sbiw	r30, 0x01	; 1
    3dc8:	e4 1b       	sub	r30, r20
    3dca:	f5 0b       	sbc	r31, r21
    3dcc:	32 97       	sbiw	r30, 0x02	; 2
    3dce:	10 f5       	brcc	.+68     	; 0x3e14 <decode_hexadecimal_string_bytes+0x66>
    3dd0:	32 c0       	rjmp	.+100    	; 0x3e36 <decode_hexadecimal_string_bytes+0x88>
    3dd2:	8d 01       	movw	r16, r26
    3dd4:	04 0f       	add	r16, r20
    3dd6:	15 1f       	adc	r17, r21
    3dd8:	30 e0       	ldi	r19, 0x00	; 0
    3dda:	ae 01       	movw	r20, r28
    3ddc:	42 0f       	add	r20, r18
    3dde:	53 1f       	adc	r21, r19
    3de0:	fa 01       	movw	r30, r20
    3de2:	90 81       	ld	r25, Z
    3de4:	91 34       	cpi	r25, 0x41	; 65
    3de6:	28 f0       	brcs	.+10     	; 0x3df2 <decode_hexadecimal_string_bytes+0x44>
    3de8:	97 53       	subi	r25, 0x37	; 55
    3dea:	59 2f       	mov	r21, r25
    3dec:	52 95       	swap	r21
    3dee:	50 7f       	andi	r21, 0xF0	; 240
    3df0:	03 c0       	rjmp	.+6      	; 0x3df8 <decode_hexadecimal_string_bytes+0x4a>
    3df2:	59 2f       	mov	r21, r25
    3df4:	52 95       	swap	r21
    3df6:	50 7f       	andi	r21, 0xF0	; 240
    3df8:	2c 0f       	add	r18, r28
    3dfa:	3d 1f       	adc	r19, r29
    3dfc:	f9 01       	movw	r30, r18
    3dfe:	91 81       	ldd	r25, Z+1	; 0x01
    3e00:	91 34       	cpi	r25, 0x41	; 65
    3e02:	10 f0       	brcs	.+4      	; 0x3e08 <decode_hexadecimal_string_bytes+0x5a>
    3e04:	97 53       	subi	r25, 0x37	; 55
    3e06:	01 c0       	rjmp	.+2      	; 0x3e0a <decode_hexadecimal_string_bytes+0x5c>
    3e08:	90 53       	subi	r25, 0x30	; 48
    3e0a:	95 0f       	add	r25, r21
    3e0c:	f8 01       	movw	r30, r16
    3e0e:	90 83       	st	Z, r25
    3e10:	8f 5f       	subi	r24, 0xFF	; 255
    3e12:	01 c0       	rjmp	.+2      	; 0x3e16 <decode_hexadecimal_string_bytes+0x68>
    3e14:	80 e0       	ldi	r24, 0x00	; 0
    3e16:	28 2f       	mov	r18, r24
    3e18:	22 0f       	add	r18, r18
    3e1a:	48 2f       	mov	r20, r24
    3e1c:	50 e0       	ldi	r21, 0x00	; 0
    3e1e:	fe 01       	movw	r30, r28
    3e20:	01 90       	ld	r0, Z+
    3e22:	00 20       	and	r0, r0
    3e24:	e9 f7       	brne	.-6      	; 0x3e20 <decode_hexadecimal_string_bytes+0x72>
    3e26:	31 97       	sbiw	r30, 0x01	; 1
    3e28:	ec 1b       	sub	r30, r28
    3e2a:	fd 0b       	sbc	r31, r29
    3e2c:	4e 17       	cp	r20, r30
    3e2e:	5f 07       	cpc	r21, r31
    3e30:	10 f4       	brcc	.+4      	; 0x3e36 <decode_hexadecimal_string_bytes+0x88>
    3e32:	86 13       	cpse	r24, r22
    3e34:	ce cf       	rjmp	.-100    	; 0x3dd2 <decode_hexadecimal_string_bytes+0x24>
    3e36:	df 91       	pop	r29
    3e38:	cf 91       	pop	r28
    3e3a:	1f 91       	pop	r17
    3e3c:	0f 91       	pop	r16
    3e3e:	08 95       	ret

00003e40 <_serialCallBack>:
    3e40:	80 91 b3 17 	lds	r24, 0x17B3	; 0x8017b3 <crc_sum.1945>
    3e44:	86 0f       	add	r24, r22
    3e46:	80 93 b3 17 	sts	0x17B3, r24	; 0x8017b3 <crc_sum.1945>
    3e4a:	90 91 b6 17 	lds	r25, 0x17B6	; 0x8017b6 <_mh_state>
    3e4e:	91 30       	cpi	r25, 0x01	; 1
    3e50:	79 f0       	breq	.+30     	; 0x3e70 <_serialCallBack+0x30>
    3e52:	28 f0       	brcs	.+10     	; 0x3e5e <_serialCallBack+0x1e>
    3e54:	92 30       	cpi	r25, 0x02	; 2
    3e56:	a9 f0       	breq	.+42     	; 0x3e82 <_serialCallBack+0x42>
    3e58:	93 30       	cpi	r25, 0x03	; 3
    3e5a:	19 f1       	breq	.+70     	; 0x3ea2 <_serialCallBack+0x62>
    3e5c:	08 95       	ret
    3e5e:	6f 3f       	cpi	r22, 0xFF	; 255
    3e60:	09 f0       	breq	.+2      	; 0x3e64 <_serialCallBack+0x24>
    3e62:	48 c0       	rjmp	.+144    	; 0x3ef4 <_serialCallBack+0xb4>
    3e64:	10 92 b3 17 	sts	0x17B3, r1	; 0x8017b3 <crc_sum.1945>
    3e68:	81 e0       	ldi	r24, 0x01	; 1
    3e6a:	80 93 b6 17 	sts	0x17B6, r24	; 0x8017b6 <_mh_state>
    3e6e:	08 95       	ret
    3e70:	66 38       	cpi	r22, 0x86	; 134
    3e72:	09 f0       	breq	.+2      	; 0x3e76 <_serialCallBack+0x36>
    3e74:	3f c0       	rjmp	.+126    	; 0x3ef4 <_serialCallBack+0xb4>
    3e76:	10 92 b2 17 	sts	0x17B2, r1	; 0x8017b2 <inDex.1943>
    3e7a:	82 e0       	ldi	r24, 0x02	; 2
    3e7c:	80 93 b6 17 	sts	0x17B6, r24	; 0x8017b6 <_mh_state>
    3e80:	08 95       	ret
    3e82:	e0 91 b2 17 	lds	r30, 0x17B2	; 0x8017b2 <inDex.1943>
    3e86:	81 e0       	ldi	r24, 0x01	; 1
    3e88:	8e 0f       	add	r24, r30
    3e8a:	80 93 b2 17 	sts	0x17B2, r24	; 0x8017b2 <inDex.1943>
    3e8e:	f0 e0       	ldi	r31, 0x00	; 0
    3e90:	e0 55       	subi	r30, 0x50	; 80
    3e92:	f8 4e       	sbci	r31, 0xE8	; 232
    3e94:	60 83       	st	Z, r22
    3e96:	82 30       	cpi	r24, 0x02	; 2
    3e98:	69 f5       	brne	.+90     	; 0x3ef4 <_serialCallBack+0xb4>
    3e9a:	83 e0       	ldi	r24, 0x03	; 3
    3e9c:	80 93 b6 17 	sts	0x17B6, r24	; 0x8017b6 <_mh_state>
    3ea0:	08 95       	ret
    3ea2:	90 91 b2 17 	lds	r25, 0x17B2	; 0x8017b2 <inDex.1943>
    3ea6:	21 e0       	ldi	r18, 0x01	; 1
    3ea8:	29 0f       	add	r18, r25
    3eaa:	20 93 b2 17 	sts	0x17B2, r18	; 0x8017b2 <inDex.1943>
    3eae:	96 30       	cpi	r25, 0x06	; 6
    3eb0:	09 f5       	brne	.+66     	; 0x3ef4 <_serialCallBack+0xb4>
    3eb2:	81 11       	cpse	r24, r1
    3eb4:	0e c0       	rjmp	.+28     	; 0x3ed2 <_serialCallBack+0x92>
    3eb6:	e0 eb       	ldi	r30, 0xB0	; 176
    3eb8:	f7 e1       	ldi	r31, 0x17	; 23
    3eba:	80 81       	ld	r24, Z
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	98 2f       	mov	r25, r24
    3ec0:	88 27       	eor	r24, r24
    3ec2:	21 81       	ldd	r18, Z+1	; 0x01
    3ec4:	82 0f       	add	r24, r18
    3ec6:	91 1d       	adc	r25, r1
    3ec8:	90 93 b8 17 	sts	0x17B8, r25	; 0x8017b8 <_ppm+0x1>
    3ecc:	80 93 b7 17 	sts	0x17B7, r24	; 0x8017b7 <_ppm>
    3ed0:	04 c0       	rjmp	.+8      	; 0x3eda <_serialCallBack+0x9a>
    3ed2:	10 92 b8 17 	sts	0x17B8, r1	; 0x8017b8 <_ppm+0x1>
    3ed6:	10 92 b7 17 	sts	0x17B7, r1	; 0x8017b7 <_ppm>
    3eda:	10 92 b6 17 	sts	0x17B6, r1	; 0x8017b6 <_mh_state>
    3ede:	e0 91 b4 17 	lds	r30, 0x17B4	; 0x8017b4 <_appCallBack>
    3ee2:	f0 91 b5 17 	lds	r31, 0x17B5	; 0x8017b5 <_appCallBack+0x1>
    3ee6:	30 97       	sbiw	r30, 0x00	; 0
    3ee8:	29 f0       	breq	.+10     	; 0x3ef4 <_serialCallBack+0xb4>
    3eea:	80 91 b7 17 	lds	r24, 0x17B7	; 0x8017b7 <_ppm>
    3eee:	90 91 b8 17 	lds	r25, 0x17B8	; 0x8017b8 <_ppm+0x1>
    3ef2:	19 95       	eicall
    3ef4:	08 95       	ret

00003ef6 <mh_z19_initialise>:
    3ef6:	8f 92       	push	r8
    3ef8:	9f 92       	push	r9
    3efa:	af 92       	push	r10
    3efc:	cf 92       	push	r12
    3efe:	ef 92       	push	r14
    3f00:	0f 93       	push	r16
    3f02:	0f 2e       	mov	r0, r31
    3f04:	f0 e2       	ldi	r31, 0x20	; 32
    3f06:	8f 2e       	mov	r8, r31
    3f08:	ff e1       	ldi	r31, 0x1F	; 31
    3f0a:	9f 2e       	mov	r9, r31
    3f0c:	f0 2d       	mov	r31, r0
    3f0e:	68 94       	set
    3f10:	aa 24       	eor	r10, r10
    3f12:	a4 f8       	bld	r10, 4
    3f14:	68 94       	set
    3f16:	cc 24       	eor	r12, r12
    3f18:	c4 f8       	bld	r12, 4
    3f1a:	e1 2c       	mov	r14, r1
    3f1c:	00 e0       	ldi	r16, 0x00	; 0
    3f1e:	23 e0       	ldi	r18, 0x03	; 3
    3f20:	40 e8       	ldi	r20, 0x80	; 128
    3f22:	55 e2       	ldi	r21, 0x25	; 37
    3f24:	60 e0       	ldi	r22, 0x00	; 0
    3f26:	70 e0       	ldi	r23, 0x00	; 0
    3f28:	4b d0       	rcall	.+150    	; 0x3fc0 <serial_create>
    3f2a:	90 93 ba 17 	sts	0x17BA, r25	; 0x8017ba <_serial+0x1>
    3f2e:	80 93 b9 17 	sts	0x17B9, r24	; 0x8017b9 <_serial>
    3f32:	0f 91       	pop	r16
    3f34:	ef 90       	pop	r14
    3f36:	cf 90       	pop	r12
    3f38:	af 90       	pop	r10
    3f3a:	9f 90       	pop	r9
    3f3c:	8f 90       	pop	r8
    3f3e:	08 95       	ret

00003f40 <mh_z19_takeMeassuring>:
    3f40:	cf 93       	push	r28
    3f42:	df 93       	push	r29
    3f44:	cd b7       	in	r28, 0x3d	; 61
    3f46:	de b7       	in	r29, 0x3e	; 62
    3f48:	29 97       	sbiw	r28, 0x09	; 9
    3f4a:	0f b6       	in	r0, 0x3f	; 63
    3f4c:	f8 94       	cli
    3f4e:	de bf       	out	0x3e, r29	; 62
    3f50:	0f be       	out	0x3f, r0	; 63
    3f52:	cd bf       	out	0x3d, r28	; 61
    3f54:	89 e0       	ldi	r24, 0x09	; 9
    3f56:	e2 e4       	ldi	r30, 0x42	; 66
    3f58:	f2 e0       	ldi	r31, 0x02	; 2
    3f5a:	9e 01       	movw	r18, r28
    3f5c:	2f 5f       	subi	r18, 0xFF	; 255
    3f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f60:	d9 01       	movw	r26, r18
    3f62:	01 90       	ld	r0, Z+
    3f64:	0d 92       	st	X+, r0
    3f66:	8a 95       	dec	r24
    3f68:	e1 f7       	brne	.-8      	; 0x3f62 <mh_z19_takeMeassuring+0x22>
    3f6a:	10 92 b8 17 	sts	0x17B8, r1	; 0x8017b8 <_ppm+0x1>
    3f6e:	10 92 b7 17 	sts	0x17B7, r1	; 0x8017b7 <_ppm>
    3f72:	80 91 b9 17 	lds	r24, 0x17B9	; 0x8017b9 <_serial>
    3f76:	90 91 ba 17 	lds	r25, 0x17BA	; 0x8017ba <_serial+0x1>
    3f7a:	00 97       	sbiw	r24, 0x00	; 0
    3f7c:	31 f0       	breq	.+12     	; 0x3f8a <mh_z19_takeMeassuring+0x4a>
    3f7e:	42 2f       	mov	r20, r18
    3f80:	53 2f       	mov	r21, r19
    3f82:	69 e0       	ldi	r22, 0x09	; 9
    3f84:	ea d0       	rcall	.+468    	; 0x415a <serial_sendBytes>
    3f86:	80 e0       	ldi	r24, 0x00	; 0
    3f88:	01 c0       	rjmp	.+2      	; 0x3f8c <mh_z19_takeMeassuring+0x4c>
    3f8a:	82 e0       	ldi	r24, 0x02	; 2
    3f8c:	29 96       	adiw	r28, 0x09	; 9
    3f8e:	0f b6       	in	r0, 0x3f	; 63
    3f90:	f8 94       	cli
    3f92:	de bf       	out	0x3e, r29	; 62
    3f94:	0f be       	out	0x3f, r0	; 63
    3f96:	cd bf       	out	0x3d, r28	; 61
    3f98:	df 91       	pop	r29
    3f9a:	cf 91       	pop	r28
    3f9c:	08 95       	ret

00003f9e <mh_z19_getCo2Ppm>:
    3f9e:	20 91 b7 17 	lds	r18, 0x17B7	; 0x8017b7 <_ppm>
    3fa2:	30 91 b8 17 	lds	r19, 0x17B8	; 0x8017b8 <_ppm+0x1>
    3fa6:	21 15       	cp	r18, r1
    3fa8:	31 05       	cpc	r19, r1
    3faa:	29 f4       	brne	.+10     	; 0x3fb6 <mh_z19_getCo2Ppm+0x18>
    3fac:	fc 01       	movw	r30, r24
    3fae:	11 82       	std	Z+1, r1	; 0x01
    3fb0:	10 82       	st	Z, r1
    3fb2:	81 e0       	ldi	r24, 0x01	; 1
    3fb4:	08 95       	ret
    3fb6:	fc 01       	movw	r30, r24
    3fb8:	31 83       	std	Z+1, r19	; 0x01
    3fba:	20 83       	st	Z, r18
    3fbc:	80 e0       	ldi	r24, 0x00	; 0
    3fbe:	08 95       	ret

00003fc0 <serial_create>:
    3fc0:	2f 92       	push	r2
    3fc2:	3f 92       	push	r3
    3fc4:	4f 92       	push	r4
    3fc6:	5f 92       	push	r5
    3fc8:	6f 92       	push	r6
    3fca:	7f 92       	push	r7
    3fcc:	8f 92       	push	r8
    3fce:	9f 92       	push	r9
    3fd0:	af 92       	push	r10
    3fd2:	cf 92       	push	r12
    3fd4:	ef 92       	push	r14
    3fd6:	ff 92       	push	r15
    3fd8:	0f 93       	push	r16
    3fda:	1f 93       	push	r17
    3fdc:	cf 93       	push	r28
    3fde:	df 93       	push	r29
    3fe0:	cd b7       	in	r28, 0x3d	; 61
    3fe2:	de b7       	in	r29, 0x3e	; 62
    3fe4:	f8 2e       	mov	r15, r24
    3fe6:	2a 01       	movw	r4, r20
    3fe8:	3b 01       	movw	r6, r22
    3fea:	88 e0       	ldi	r24, 0x08	; 8
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	0e 94 47 29 	call	0x528e	; 0x528e <malloc>
    3ff2:	8c 01       	movw	r16, r24
    3ff4:	8f 2d       	mov	r24, r15
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	fc 01       	movw	r30, r24
    3ffa:	ee 0f       	add	r30, r30
    3ffc:	ff 1f       	adc	r31, r31
    3ffe:	e5 54       	subi	r30, 0x45	; 69
    4000:	f8 4e       	sbci	r31, 0xE8	; 232
    4002:	11 83       	std	Z+1, r17	; 0x01
    4004:	00 83       	st	Z, r16
    4006:	01 15       	cp	r16, r1
    4008:	11 05       	cpc	r17, r1
    400a:	09 f4       	brne	.+2      	; 0x400e <serial_create+0x4e>
    400c:	69 c0       	rjmp	.+210    	; 0x40e0 <serial_create+0x120>
    400e:	88 0f       	add	r24, r24
    4010:	99 1f       	adc	r25, r25
    4012:	fc 01       	movw	r30, r24
    4014:	e5 5f       	subi	r30, 0xF5	; 245
    4016:	fd 4f       	sbci	r31, 0xFD	; 253
    4018:	80 81       	ld	r24, Z
    401a:	91 81       	ldd	r25, Z+1	; 0x01
    401c:	d8 01       	movw	r26, r16
    401e:	8d 93       	st	X+, r24
    4020:	9c 93       	st	X, r25
    4022:	8c 2d       	mov	r24, r12
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	88 0f       	add	r24, r24
    4028:	99 1f       	adc	r25, r25
    402a:	88 0f       	add	r24, r24
    402c:	99 1f       	adc	r25, r25
    402e:	0e 94 47 29 	call	0x528e	; 0x528e <malloc>
    4032:	1c 01       	movw	r2, r24
    4034:	86 e0       	ldi	r24, 0x06	; 6
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	0e 94 47 29 	call	0x528e	; 0x528e <malloc>
    403c:	7c 01       	movw	r14, r24
    403e:	4c 2d       	mov	r20, r12
    4040:	b1 01       	movw	r22, r2
    4042:	f0 d6       	rcall	.+3552   	; 0x4e24 <fifo_init>
    4044:	f8 01       	movw	r30, r16
    4046:	f5 82       	std	Z+5, r15	; 0x05
    4048:	e4 82       	std	Z+4, r14	; 0x04
    404a:	8a 2d       	mov	r24, r10
    404c:	90 e0       	ldi	r25, 0x00	; 0
    404e:	88 0f       	add	r24, r24
    4050:	99 1f       	adc	r25, r25
    4052:	88 0f       	add	r24, r24
    4054:	99 1f       	adc	r25, r25
    4056:	0e 94 47 29 	call	0x528e	; 0x528e <malloc>
    405a:	1c 01       	movw	r2, r24
    405c:	86 e0       	ldi	r24, 0x06	; 6
    405e:	90 e0       	ldi	r25, 0x00	; 0
    4060:	0e 94 47 29 	call	0x528e	; 0x528e <malloc>
    4064:	7c 01       	movw	r14, r24
    4066:	4a 2d       	mov	r20, r10
    4068:	b1 01       	movw	r22, r2
    406a:	dc d6       	rcall	.+3512   	; 0x4e24 <fifo_init>
    406c:	d8 01       	movw	r26, r16
    406e:	13 96       	adiw	r26, 0x03	; 3
    4070:	fc 92       	st	X, r15
    4072:	ee 92       	st	-X, r14
    4074:	12 97       	sbiw	r26, 0x02	; 2
    4076:	17 96       	adiw	r26, 0x07	; 7
    4078:	9c 92       	st	X, r9
    407a:	8e 92       	st	-X, r8
    407c:	16 97       	sbiw	r26, 0x06	; 6
    407e:	ff b6       	in	r15, 0x3f	; 63
    4080:	f8 94       	cli
    4082:	ed 91       	ld	r30, X+
    4084:	fc 91       	ld	r31, X
    4086:	11 97       	sbiw	r26, 0x01	; 1
    4088:	36 97       	sbiw	r30, 0x06	; 6
    408a:	80 81       	ld	r24, Z
    408c:	82 60       	ori	r24, 0x02	; 2
    408e:	80 83       	st	Z, r24
    4090:	8d 90       	ld	r8, X+
    4092:	9c 90       	ld	r9, X
    4094:	c3 01       	movw	r24, r6
    4096:	b2 01       	movw	r22, r4
    4098:	df d7       	rcall	.+4030   	; 0x5058 <__floatunsisf>
    409a:	20 e0       	ldi	r18, 0x00	; 0
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	40 e0       	ldi	r20, 0x00	; 0
    40a0:	51 e4       	ldi	r21, 0x41	; 65
    40a2:	0e 94 ba 28 	call	0x5174	; 0x5174 <__mulsf3>
    40a6:	9b 01       	movw	r18, r22
    40a8:	ac 01       	movw	r20, r24
    40aa:	60 e0       	ldi	r22, 0x00	; 0
    40ac:	74 e2       	ldi	r23, 0x24	; 36
    40ae:	84 e7       	ldi	r24, 0x74	; 116
    40b0:	9b e4       	ldi	r25, 0x4B	; 75
    40b2:	39 d7       	rcall	.+3698   	; 0x4f26 <__divsf3>
    40b4:	20 e0       	ldi	r18, 0x00	; 0
    40b6:	30 e0       	ldi	r19, 0x00	; 0
    40b8:	40 e8       	ldi	r20, 0x80	; 128
    40ba:	5f e3       	ldi	r21, 0x3F	; 63
    40bc:	cf d6       	rcall	.+3486   	; 0x4e5c <__subsf3>
    40be:	a0 d7       	rcall	.+3904   	; 0x5000 <__fixunssfsi>
    40c0:	f4 01       	movw	r30, r8
    40c2:	32 97       	sbiw	r30, 0x02	; 2
    40c4:	60 83       	st	Z, r22
    40c6:	d8 01       	movw	r26, r16
    40c8:	ed 91       	ld	r30, X+
    40ca:	fc 91       	ld	r31, X
    40cc:	11 97       	sbiw	r26, 0x01	; 1
    40ce:	35 97       	sbiw	r30, 0x05	; 5
    40d0:	88 e9       	ldi	r24, 0x98	; 152
    40d2:	80 83       	st	Z, r24
    40d4:	ed 91       	ld	r30, X+
    40d6:	fc 91       	ld	r31, X
    40d8:	34 97       	sbiw	r30, 0x04	; 4
    40da:	86 e0       	ldi	r24, 0x06	; 6
    40dc:	80 83       	st	Z, r24
    40de:	ff be       	out	0x3f, r15	; 63
    40e0:	c8 01       	movw	r24, r16
    40e2:	df 91       	pop	r29
    40e4:	cf 91       	pop	r28
    40e6:	1f 91       	pop	r17
    40e8:	0f 91       	pop	r16
    40ea:	ff 90       	pop	r15
    40ec:	ef 90       	pop	r14
    40ee:	cf 90       	pop	r12
    40f0:	af 90       	pop	r10
    40f2:	9f 90       	pop	r9
    40f4:	8f 90       	pop	r8
    40f6:	7f 90       	pop	r7
    40f8:	6f 90       	pop	r6
    40fa:	5f 90       	pop	r5
    40fc:	4f 90       	pop	r4
    40fe:	3f 90       	pop	r3
    4100:	2f 90       	pop	r2
    4102:	08 95       	ret

00004104 <serial_sendByte>:
    4104:	cf 93       	push	r28
    4106:	df 93       	push	r29
    4108:	dc 01       	movw	r26, r24
    410a:	89 2b       	or	r24, r25
    410c:	01 f1       	breq	.+64     	; 0x414e <serial_sendByte+0x4a>
    410e:	12 96       	adiw	r26, 0x02	; 2
    4110:	ed 91       	ld	r30, X+
    4112:	fc 91       	ld	r31, X
    4114:	13 97       	sbiw	r26, 0x03	; 3
    4116:	93 81       	ldd	r25, Z+3	; 0x03
    4118:	82 81       	ldd	r24, Z+2	; 0x02
    411a:	25 81       	ldd	r18, Z+5	; 0x05
    411c:	98 1b       	sub	r25, r24
    411e:	92 23       	and	r25, r18
    4120:	84 81       	ldd	r24, Z+4	; 0x04
    4122:	98 17       	cp	r25, r24
    4124:	b1 f0       	breq	.+44     	; 0x4152 <serial_sendByte+0x4e>
    4126:	83 81       	ldd	r24, Z+3	; 0x03
    4128:	26 95       	lsr	r18
    412a:	28 23       	and	r18, r24
    412c:	c0 81       	ld	r28, Z
    412e:	d1 81       	ldd	r29, Z+1	; 0x01
    4130:	c2 0f       	add	r28, r18
    4132:	d1 1d       	adc	r29, r1
    4134:	68 83       	st	Y, r22
    4136:	8f 5f       	subi	r24, 0xFF	; 255
    4138:	95 81       	ldd	r25, Z+5	; 0x05
    413a:	89 23       	and	r24, r25
    413c:	83 83       	std	Z+3, r24	; 0x03
    413e:	ed 91       	ld	r30, X+
    4140:	fc 91       	ld	r31, X
    4142:	35 97       	sbiw	r30, 0x05	; 5
    4144:	80 81       	ld	r24, Z
    4146:	80 62       	ori	r24, 0x20	; 32
    4148:	80 83       	st	Z, r24
    414a:	80 e0       	ldi	r24, 0x00	; 0
    414c:	03 c0       	rjmp	.+6      	; 0x4154 <serial_sendByte+0x50>
    414e:	81 e0       	ldi	r24, 0x01	; 1
    4150:	01 c0       	rjmp	.+2      	; 0x4154 <serial_sendByte+0x50>
    4152:	82 e0       	ldi	r24, 0x02	; 2
    4154:	df 91       	pop	r29
    4156:	cf 91       	pop	r28
    4158:	08 95       	ret

0000415a <serial_sendBytes>:
    415a:	ef 92       	push	r14
    415c:	ff 92       	push	r15
    415e:	0f 93       	push	r16
    4160:	1f 93       	push	r17
    4162:	cf 93       	push	r28
    4164:	df 93       	push	r29
    4166:	7c 01       	movw	r14, r24
    4168:	00 97       	sbiw	r24, 0x00	; 0
    416a:	09 f4       	brne	.+2      	; 0x416e <serial_sendBytes+0x14>
    416c:	41 c0       	rjmp	.+130    	; 0x41f0 <serial_sendBytes+0x96>
    416e:	dc 01       	movw	r26, r24
    4170:	12 96       	adiw	r26, 0x02	; 2
    4172:	ed 91       	ld	r30, X+
    4174:	fc 91       	ld	r31, X
    4176:	13 97       	sbiw	r26, 0x03	; 3
    4178:	93 81       	ldd	r25, Z+3	; 0x03
    417a:	82 81       	ldd	r24, Z+2	; 0x02
    417c:	98 1b       	sub	r25, r24
    417e:	85 81       	ldd	r24, Z+5	; 0x05
    4180:	98 23       	and	r25, r24
    4182:	84 81       	ldd	r24, Z+4	; 0x04
    4184:	89 1b       	sub	r24, r25
    4186:	86 17       	cp	r24, r22
    4188:	a8 f1       	brcs	.+106    	; 0x41f4 <serial_sendBytes+0x9a>
    418a:	66 23       	and	r22, r22
    418c:	41 f1       	breq	.+80     	; 0x41de <serial_sendBytes+0x84>
    418e:	84 2f       	mov	r24, r20
    4190:	95 2f       	mov	r25, r21
    4192:	dc 01       	movw	r26, r24
    4194:	61 50       	subi	r22, 0x01	; 1
    4196:	46 2f       	mov	r20, r22
    4198:	50 e0       	ldi	r21, 0x00	; 0
    419a:	4f 5f       	subi	r20, 0xFF	; 255
    419c:	5f 4f       	sbci	r21, 0xFF	; 255
    419e:	48 0f       	add	r20, r24
    41a0:	59 1f       	adc	r21, r25
    41a2:	e7 01       	movw	r28, r14
    41a4:	ea 81       	ldd	r30, Y+2	; 0x02
    41a6:	fb 81       	ldd	r31, Y+3	; 0x03
    41a8:	93 81       	ldd	r25, Z+3	; 0x03
    41aa:	82 81       	ldd	r24, Z+2	; 0x02
    41ac:	25 81       	ldd	r18, Z+5	; 0x05
    41ae:	98 1b       	sub	r25, r24
    41b0:	92 23       	and	r25, r18
    41b2:	84 81       	ldd	r24, Z+4	; 0x04
    41b4:	98 17       	cp	r25, r24
    41b6:	79 f0       	breq	.+30     	; 0x41d6 <serial_sendBytes+0x7c>
    41b8:	8c 91       	ld	r24, X
    41ba:	93 81       	ldd	r25, Z+3	; 0x03
    41bc:	26 95       	lsr	r18
    41be:	29 23       	and	r18, r25
    41c0:	60 81       	ld	r22, Z
    41c2:	71 81       	ldd	r23, Z+1	; 0x01
    41c4:	8b 01       	movw	r16, r22
    41c6:	02 0f       	add	r16, r18
    41c8:	11 1d       	adc	r17, r1
    41ca:	e8 01       	movw	r28, r16
    41cc:	88 83       	st	Y, r24
    41ce:	9f 5f       	subi	r25, 0xFF	; 255
    41d0:	85 81       	ldd	r24, Z+5	; 0x05
    41d2:	98 23       	and	r25, r24
    41d4:	93 83       	std	Z+3, r25	; 0x03
    41d6:	11 96       	adiw	r26, 0x01	; 1
    41d8:	a4 17       	cp	r26, r20
    41da:	b5 07       	cpc	r27, r21
    41dc:	11 f7       	brne	.-60     	; 0x41a2 <serial_sendBytes+0x48>
    41de:	d7 01       	movw	r26, r14
    41e0:	ed 91       	ld	r30, X+
    41e2:	fc 91       	ld	r31, X
    41e4:	35 97       	sbiw	r30, 0x05	; 5
    41e6:	80 81       	ld	r24, Z
    41e8:	80 62       	ori	r24, 0x20	; 32
    41ea:	80 83       	st	Z, r24
    41ec:	80 e0       	ldi	r24, 0x00	; 0
    41ee:	03 c0       	rjmp	.+6      	; 0x41f6 <serial_sendBytes+0x9c>
    41f0:	81 e0       	ldi	r24, 0x01	; 1
    41f2:	01 c0       	rjmp	.+2      	; 0x41f6 <serial_sendBytes+0x9c>
    41f4:	82 e0       	ldi	r24, 0x02	; 2
    41f6:	df 91       	pop	r29
    41f8:	cf 91       	pop	r28
    41fa:	1f 91       	pop	r17
    41fc:	0f 91       	pop	r16
    41fe:	ff 90       	pop	r15
    4200:	ef 90       	pop	r14
    4202:	08 95       	ret

00004204 <serial_getByte>:
    4204:	00 97       	sbiw	r24, 0x00	; 0
    4206:	d1 f0       	breq	.+52     	; 0x423c <serial_getByte+0x38>
    4208:	dc 01       	movw	r26, r24
    420a:	14 96       	adiw	r26, 0x04	; 4
    420c:	ed 91       	ld	r30, X+
    420e:	fc 91       	ld	r31, X
    4210:	15 97       	sbiw	r26, 0x05	; 5
    4212:	93 81       	ldd	r25, Z+3	; 0x03
    4214:	82 81       	ldd	r24, Z+2	; 0x02
    4216:	98 17       	cp	r25, r24
    4218:	99 f0       	breq	.+38     	; 0x4240 <serial_getByte+0x3c>
    421a:	92 81       	ldd	r25, Z+2	; 0x02
    421c:	85 81       	ldd	r24, Z+5	; 0x05
    421e:	86 95       	lsr	r24
    4220:	89 23       	and	r24, r25
    4222:	a0 81       	ld	r26, Z
    4224:	b1 81       	ldd	r27, Z+1	; 0x01
    4226:	a8 0f       	add	r26, r24
    4228:	b1 1d       	adc	r27, r1
    422a:	8c 91       	ld	r24, X
    422c:	db 01       	movw	r26, r22
    422e:	8c 93       	st	X, r24
    4230:	9f 5f       	subi	r25, 0xFF	; 255
    4232:	85 81       	ldd	r24, Z+5	; 0x05
    4234:	98 23       	and	r25, r24
    4236:	92 83       	std	Z+2, r25	; 0x02
    4238:	80 e0       	ldi	r24, 0x00	; 0
    423a:	08 95       	ret
    423c:	81 e0       	ldi	r24, 0x01	; 1
    423e:	08 95       	ret
    4240:	83 e0       	ldi	r24, 0x03	; 3
    4242:	08 95       	ret

00004244 <__vector_25>:
    4244:	1f 92       	push	r1
    4246:	0f 92       	push	r0
    4248:	0f b6       	in	r0, 0x3f	; 63
    424a:	0f 92       	push	r0
    424c:	11 24       	eor	r1, r1
    424e:	0b b6       	in	r0, 0x3b	; 59
    4250:	0f 92       	push	r0
    4252:	2f 93       	push	r18
    4254:	3f 93       	push	r19
    4256:	4f 93       	push	r20
    4258:	5f 93       	push	r21
    425a:	6f 93       	push	r22
    425c:	7f 93       	push	r23
    425e:	8f 93       	push	r24
    4260:	9f 93       	push	r25
    4262:	af 93       	push	r26
    4264:	bf 93       	push	r27
    4266:	cf 93       	push	r28
    4268:	df 93       	push	r29
    426a:	ef 93       	push	r30
    426c:	ff 93       	push	r31
    426e:	a0 91 bb 17 	lds	r26, 0x17BB	; 0x8017bb <_ser_handle>
    4272:	b0 91 bc 17 	lds	r27, 0x17BC	; 0x8017bc <_ser_handle+0x1>
    4276:	10 97       	sbiw	r26, 0x00	; 0
    4278:	11 f1       	breq	.+68     	; 0x42be <__vector_25+0x7a>
    427a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    427e:	14 96       	adiw	r26, 0x04	; 4
    4280:	ed 91       	ld	r30, X+
    4282:	fc 91       	ld	r31, X
    4284:	15 97       	sbiw	r26, 0x05	; 5
    4286:	93 81       	ldd	r25, Z+3	; 0x03
    4288:	82 81       	ldd	r24, Z+2	; 0x02
    428a:	25 81       	ldd	r18, Z+5	; 0x05
    428c:	98 1b       	sub	r25, r24
    428e:	92 23       	and	r25, r18
    4290:	84 81       	ldd	r24, Z+4	; 0x04
    4292:	98 17       	cp	r25, r24
    4294:	61 f0       	breq	.+24     	; 0x42ae <__vector_25+0x6a>
    4296:	83 81       	ldd	r24, Z+3	; 0x03
    4298:	26 95       	lsr	r18
    429a:	28 23       	and	r18, r24
    429c:	c0 81       	ld	r28, Z
    429e:	d1 81       	ldd	r29, Z+1	; 0x01
    42a0:	c2 0f       	add	r28, r18
    42a2:	d1 1d       	adc	r29, r1
    42a4:	68 83       	st	Y, r22
    42a6:	8f 5f       	subi	r24, 0xFF	; 255
    42a8:	95 81       	ldd	r25, Z+5	; 0x05
    42aa:	89 23       	and	r24, r25
    42ac:	83 83       	std	Z+3, r24	; 0x03
    42ae:	16 96       	adiw	r26, 0x06	; 6
    42b0:	ed 91       	ld	r30, X+
    42b2:	fc 91       	ld	r31, X
    42b4:	17 97       	sbiw	r26, 0x07	; 7
    42b6:	30 97       	sbiw	r30, 0x00	; 0
    42b8:	11 f0       	breq	.+4      	; 0x42be <__vector_25+0x7a>
    42ba:	cd 01       	movw	r24, r26
    42bc:	19 95       	eicall
    42be:	ff 91       	pop	r31
    42c0:	ef 91       	pop	r30
    42c2:	df 91       	pop	r29
    42c4:	cf 91       	pop	r28
    42c6:	bf 91       	pop	r27
    42c8:	af 91       	pop	r26
    42ca:	9f 91       	pop	r25
    42cc:	8f 91       	pop	r24
    42ce:	7f 91       	pop	r23
    42d0:	6f 91       	pop	r22
    42d2:	5f 91       	pop	r21
    42d4:	4f 91       	pop	r20
    42d6:	3f 91       	pop	r19
    42d8:	2f 91       	pop	r18
    42da:	0f 90       	pop	r0
    42dc:	0b be       	out	0x3b, r0	; 59
    42de:	0f 90       	pop	r0
    42e0:	0f be       	out	0x3f, r0	; 63
    42e2:	0f 90       	pop	r0
    42e4:	1f 90       	pop	r1
    42e6:	18 95       	reti

000042e8 <__vector_26>:
    42e8:	1f 92       	push	r1
    42ea:	0f 92       	push	r0
    42ec:	0f b6       	in	r0, 0x3f	; 63
    42ee:	0f 92       	push	r0
    42f0:	11 24       	eor	r1, r1
    42f2:	0b b6       	in	r0, 0x3b	; 59
    42f4:	0f 92       	push	r0
    42f6:	2f 93       	push	r18
    42f8:	8f 93       	push	r24
    42fa:	9f 93       	push	r25
    42fc:	af 93       	push	r26
    42fe:	bf 93       	push	r27
    4300:	ef 93       	push	r30
    4302:	ff 93       	push	r31
    4304:	e0 91 bb 17 	lds	r30, 0x17BB	; 0x8017bb <_ser_handle>
    4308:	f0 91 bc 17 	lds	r31, 0x17BC	; 0x8017bc <_ser_handle+0x1>
    430c:	30 97       	sbiw	r30, 0x00	; 0
    430e:	b9 f0       	breq	.+46     	; 0x433e <__vector_26+0x56>
    4310:	02 80       	ldd	r0, Z+2	; 0x02
    4312:	f3 81       	ldd	r31, Z+3	; 0x03
    4314:	e0 2d       	mov	r30, r0
    4316:	93 81       	ldd	r25, Z+3	; 0x03
    4318:	82 81       	ldd	r24, Z+2	; 0x02
    431a:	98 17       	cp	r25, r24
    431c:	b1 f0       	breq	.+44     	; 0x434a <__vector_26+0x62>
    431e:	92 81       	ldd	r25, Z+2	; 0x02
    4320:	85 81       	ldd	r24, Z+5	; 0x05
    4322:	28 2f       	mov	r18, r24
    4324:	26 95       	lsr	r18
    4326:	29 23       	and	r18, r25
    4328:	a0 81       	ld	r26, Z
    432a:	b1 81       	ldd	r27, Z+1	; 0x01
    432c:	a2 0f       	add	r26, r18
    432e:	b1 1d       	adc	r27, r1
    4330:	2c 91       	ld	r18, X
    4332:	9f 5f       	subi	r25, 0xFF	; 255
    4334:	89 23       	and	r24, r25
    4336:	82 83       	std	Z+2, r24	; 0x02
    4338:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    433c:	0b c0       	rjmp	.+22     	; 0x4354 <__vector_26+0x6c>
    433e:	e1 ec       	ldi	r30, 0xC1	; 193
    4340:	f0 e0       	ldi	r31, 0x00	; 0
    4342:	80 81       	ld	r24, Z
    4344:	8f 7d       	andi	r24, 0xDF	; 223
    4346:	80 83       	st	Z, r24
    4348:	05 c0       	rjmp	.+10     	; 0x4354 <__vector_26+0x6c>
    434a:	e1 ec       	ldi	r30, 0xC1	; 193
    434c:	f0 e0       	ldi	r31, 0x00	; 0
    434e:	80 81       	ld	r24, Z
    4350:	8f 7d       	andi	r24, 0xDF	; 223
    4352:	80 83       	st	Z, r24
    4354:	ff 91       	pop	r31
    4356:	ef 91       	pop	r30
    4358:	bf 91       	pop	r27
    435a:	af 91       	pop	r26
    435c:	9f 91       	pop	r25
    435e:	8f 91       	pop	r24
    4360:	2f 91       	pop	r18
    4362:	0f 90       	pop	r0
    4364:	0b be       	out	0x3b, r0	; 59
    4366:	0f 90       	pop	r0
    4368:	0f be       	out	0x3f, r0	; 63
    436a:	0f 90       	pop	r0
    436c:	1f 90       	pop	r1
    436e:	18 95       	reti

00004370 <__vector_36>:
    4370:	1f 92       	push	r1
    4372:	0f 92       	push	r0
    4374:	0f b6       	in	r0, 0x3f	; 63
    4376:	0f 92       	push	r0
    4378:	11 24       	eor	r1, r1
    437a:	0b b6       	in	r0, 0x3b	; 59
    437c:	0f 92       	push	r0
    437e:	2f 93       	push	r18
    4380:	3f 93       	push	r19
    4382:	4f 93       	push	r20
    4384:	5f 93       	push	r21
    4386:	6f 93       	push	r22
    4388:	7f 93       	push	r23
    438a:	8f 93       	push	r24
    438c:	9f 93       	push	r25
    438e:	af 93       	push	r26
    4390:	bf 93       	push	r27
    4392:	cf 93       	push	r28
    4394:	df 93       	push	r29
    4396:	ef 93       	push	r30
    4398:	ff 93       	push	r31
    439a:	a0 91 bd 17 	lds	r26, 0x17BD	; 0x8017bd <_ser_handle+0x2>
    439e:	b0 91 be 17 	lds	r27, 0x17BE	; 0x8017be <_ser_handle+0x3>
    43a2:	10 97       	sbiw	r26, 0x00	; 0
    43a4:	11 f1       	breq	.+68     	; 0x43ea <__vector_36+0x7a>
    43a6:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    43aa:	14 96       	adiw	r26, 0x04	; 4
    43ac:	ed 91       	ld	r30, X+
    43ae:	fc 91       	ld	r31, X
    43b0:	15 97       	sbiw	r26, 0x05	; 5
    43b2:	93 81       	ldd	r25, Z+3	; 0x03
    43b4:	82 81       	ldd	r24, Z+2	; 0x02
    43b6:	25 81       	ldd	r18, Z+5	; 0x05
    43b8:	98 1b       	sub	r25, r24
    43ba:	92 23       	and	r25, r18
    43bc:	84 81       	ldd	r24, Z+4	; 0x04
    43be:	98 17       	cp	r25, r24
    43c0:	61 f0       	breq	.+24     	; 0x43da <__vector_36+0x6a>
    43c2:	83 81       	ldd	r24, Z+3	; 0x03
    43c4:	26 95       	lsr	r18
    43c6:	28 23       	and	r18, r24
    43c8:	c0 81       	ld	r28, Z
    43ca:	d1 81       	ldd	r29, Z+1	; 0x01
    43cc:	c2 0f       	add	r28, r18
    43ce:	d1 1d       	adc	r29, r1
    43d0:	68 83       	st	Y, r22
    43d2:	8f 5f       	subi	r24, 0xFF	; 255
    43d4:	95 81       	ldd	r25, Z+5	; 0x05
    43d6:	89 23       	and	r24, r25
    43d8:	83 83       	std	Z+3, r24	; 0x03
    43da:	16 96       	adiw	r26, 0x06	; 6
    43dc:	ed 91       	ld	r30, X+
    43de:	fc 91       	ld	r31, X
    43e0:	17 97       	sbiw	r26, 0x07	; 7
    43e2:	30 97       	sbiw	r30, 0x00	; 0
    43e4:	11 f0       	breq	.+4      	; 0x43ea <__vector_36+0x7a>
    43e6:	cd 01       	movw	r24, r26
    43e8:	19 95       	eicall
    43ea:	ff 91       	pop	r31
    43ec:	ef 91       	pop	r30
    43ee:	df 91       	pop	r29
    43f0:	cf 91       	pop	r28
    43f2:	bf 91       	pop	r27
    43f4:	af 91       	pop	r26
    43f6:	9f 91       	pop	r25
    43f8:	8f 91       	pop	r24
    43fa:	7f 91       	pop	r23
    43fc:	6f 91       	pop	r22
    43fe:	5f 91       	pop	r21
    4400:	4f 91       	pop	r20
    4402:	3f 91       	pop	r19
    4404:	2f 91       	pop	r18
    4406:	0f 90       	pop	r0
    4408:	0b be       	out	0x3b, r0	; 59
    440a:	0f 90       	pop	r0
    440c:	0f be       	out	0x3f, r0	; 63
    440e:	0f 90       	pop	r0
    4410:	1f 90       	pop	r1
    4412:	18 95       	reti

00004414 <__vector_37>:
    4414:	1f 92       	push	r1
    4416:	0f 92       	push	r0
    4418:	0f b6       	in	r0, 0x3f	; 63
    441a:	0f 92       	push	r0
    441c:	11 24       	eor	r1, r1
    441e:	0b b6       	in	r0, 0x3b	; 59
    4420:	0f 92       	push	r0
    4422:	2f 93       	push	r18
    4424:	8f 93       	push	r24
    4426:	9f 93       	push	r25
    4428:	af 93       	push	r26
    442a:	bf 93       	push	r27
    442c:	ef 93       	push	r30
    442e:	ff 93       	push	r31
    4430:	e0 91 bd 17 	lds	r30, 0x17BD	; 0x8017bd <_ser_handle+0x2>
    4434:	f0 91 be 17 	lds	r31, 0x17BE	; 0x8017be <_ser_handle+0x3>
    4438:	30 97       	sbiw	r30, 0x00	; 0
    443a:	b9 f0       	breq	.+46     	; 0x446a <__vector_37+0x56>
    443c:	02 80       	ldd	r0, Z+2	; 0x02
    443e:	f3 81       	ldd	r31, Z+3	; 0x03
    4440:	e0 2d       	mov	r30, r0
    4442:	93 81       	ldd	r25, Z+3	; 0x03
    4444:	82 81       	ldd	r24, Z+2	; 0x02
    4446:	98 17       	cp	r25, r24
    4448:	b1 f0       	breq	.+44     	; 0x4476 <__vector_37+0x62>
    444a:	92 81       	ldd	r25, Z+2	; 0x02
    444c:	85 81       	ldd	r24, Z+5	; 0x05
    444e:	28 2f       	mov	r18, r24
    4450:	26 95       	lsr	r18
    4452:	29 23       	and	r18, r25
    4454:	a0 81       	ld	r26, Z
    4456:	b1 81       	ldd	r27, Z+1	; 0x01
    4458:	a2 0f       	add	r26, r18
    445a:	b1 1d       	adc	r27, r1
    445c:	2c 91       	ld	r18, X
    445e:	9f 5f       	subi	r25, 0xFF	; 255
    4460:	89 23       	and	r24, r25
    4462:	82 83       	std	Z+2, r24	; 0x02
    4464:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4468:	0b c0       	rjmp	.+22     	; 0x4480 <__vector_37+0x6c>
    446a:	e9 ec       	ldi	r30, 0xC9	; 201
    446c:	f0 e0       	ldi	r31, 0x00	; 0
    446e:	80 81       	ld	r24, Z
    4470:	8f 7d       	andi	r24, 0xDF	; 223
    4472:	80 83       	st	Z, r24
    4474:	05 c0       	rjmp	.+10     	; 0x4480 <__vector_37+0x6c>
    4476:	e9 ec       	ldi	r30, 0xC9	; 201
    4478:	f0 e0       	ldi	r31, 0x00	; 0
    447a:	80 81       	ld	r24, Z
    447c:	8f 7d       	andi	r24, 0xDF	; 223
    447e:	80 83       	st	Z, r24
    4480:	ff 91       	pop	r31
    4482:	ef 91       	pop	r30
    4484:	bf 91       	pop	r27
    4486:	af 91       	pop	r26
    4488:	9f 91       	pop	r25
    448a:	8f 91       	pop	r24
    448c:	2f 91       	pop	r18
    448e:	0f 90       	pop	r0
    4490:	0b be       	out	0x3b, r0	; 59
    4492:	0f 90       	pop	r0
    4494:	0f be       	out	0x3f, r0	; 63
    4496:	0f 90       	pop	r0
    4498:	1f 90       	pop	r1
    449a:	18 95       	reti

0000449c <__vector_51>:
    449c:	1f 92       	push	r1
    449e:	0f 92       	push	r0
    44a0:	0f b6       	in	r0, 0x3f	; 63
    44a2:	0f 92       	push	r0
    44a4:	11 24       	eor	r1, r1
    44a6:	0b b6       	in	r0, 0x3b	; 59
    44a8:	0f 92       	push	r0
    44aa:	2f 93       	push	r18
    44ac:	3f 93       	push	r19
    44ae:	4f 93       	push	r20
    44b0:	5f 93       	push	r21
    44b2:	6f 93       	push	r22
    44b4:	7f 93       	push	r23
    44b6:	8f 93       	push	r24
    44b8:	9f 93       	push	r25
    44ba:	af 93       	push	r26
    44bc:	bf 93       	push	r27
    44be:	cf 93       	push	r28
    44c0:	df 93       	push	r29
    44c2:	ef 93       	push	r30
    44c4:	ff 93       	push	r31
    44c6:	a0 91 bf 17 	lds	r26, 0x17BF	; 0x8017bf <_ser_handle+0x4>
    44ca:	b0 91 c0 17 	lds	r27, 0x17C0	; 0x8017c0 <_ser_handle+0x5>
    44ce:	10 97       	sbiw	r26, 0x00	; 0
    44d0:	11 f1       	breq	.+68     	; 0x4516 <__vector_51+0x7a>
    44d2:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    44d6:	14 96       	adiw	r26, 0x04	; 4
    44d8:	ed 91       	ld	r30, X+
    44da:	fc 91       	ld	r31, X
    44dc:	15 97       	sbiw	r26, 0x05	; 5
    44de:	93 81       	ldd	r25, Z+3	; 0x03
    44e0:	82 81       	ldd	r24, Z+2	; 0x02
    44e2:	25 81       	ldd	r18, Z+5	; 0x05
    44e4:	98 1b       	sub	r25, r24
    44e6:	92 23       	and	r25, r18
    44e8:	84 81       	ldd	r24, Z+4	; 0x04
    44ea:	98 17       	cp	r25, r24
    44ec:	61 f0       	breq	.+24     	; 0x4506 <__vector_51+0x6a>
    44ee:	83 81       	ldd	r24, Z+3	; 0x03
    44f0:	26 95       	lsr	r18
    44f2:	28 23       	and	r18, r24
    44f4:	c0 81       	ld	r28, Z
    44f6:	d1 81       	ldd	r29, Z+1	; 0x01
    44f8:	c2 0f       	add	r28, r18
    44fa:	d1 1d       	adc	r29, r1
    44fc:	68 83       	st	Y, r22
    44fe:	8f 5f       	subi	r24, 0xFF	; 255
    4500:	95 81       	ldd	r25, Z+5	; 0x05
    4502:	89 23       	and	r24, r25
    4504:	83 83       	std	Z+3, r24	; 0x03
    4506:	16 96       	adiw	r26, 0x06	; 6
    4508:	ed 91       	ld	r30, X+
    450a:	fc 91       	ld	r31, X
    450c:	17 97       	sbiw	r26, 0x07	; 7
    450e:	30 97       	sbiw	r30, 0x00	; 0
    4510:	11 f0       	breq	.+4      	; 0x4516 <__vector_51+0x7a>
    4512:	cd 01       	movw	r24, r26
    4514:	19 95       	eicall
    4516:	ff 91       	pop	r31
    4518:	ef 91       	pop	r30
    451a:	df 91       	pop	r29
    451c:	cf 91       	pop	r28
    451e:	bf 91       	pop	r27
    4520:	af 91       	pop	r26
    4522:	9f 91       	pop	r25
    4524:	8f 91       	pop	r24
    4526:	7f 91       	pop	r23
    4528:	6f 91       	pop	r22
    452a:	5f 91       	pop	r21
    452c:	4f 91       	pop	r20
    452e:	3f 91       	pop	r19
    4530:	2f 91       	pop	r18
    4532:	0f 90       	pop	r0
    4534:	0b be       	out	0x3b, r0	; 59
    4536:	0f 90       	pop	r0
    4538:	0f be       	out	0x3f, r0	; 63
    453a:	0f 90       	pop	r0
    453c:	1f 90       	pop	r1
    453e:	18 95       	reti

00004540 <__vector_52>:
    4540:	1f 92       	push	r1
    4542:	0f 92       	push	r0
    4544:	0f b6       	in	r0, 0x3f	; 63
    4546:	0f 92       	push	r0
    4548:	11 24       	eor	r1, r1
    454a:	0b b6       	in	r0, 0x3b	; 59
    454c:	0f 92       	push	r0
    454e:	2f 93       	push	r18
    4550:	8f 93       	push	r24
    4552:	9f 93       	push	r25
    4554:	af 93       	push	r26
    4556:	bf 93       	push	r27
    4558:	ef 93       	push	r30
    455a:	ff 93       	push	r31
    455c:	e0 91 bf 17 	lds	r30, 0x17BF	; 0x8017bf <_ser_handle+0x4>
    4560:	f0 91 c0 17 	lds	r31, 0x17C0	; 0x8017c0 <_ser_handle+0x5>
    4564:	30 97       	sbiw	r30, 0x00	; 0
    4566:	b9 f0       	breq	.+46     	; 0x4596 <__vector_52+0x56>
    4568:	02 80       	ldd	r0, Z+2	; 0x02
    456a:	f3 81       	ldd	r31, Z+3	; 0x03
    456c:	e0 2d       	mov	r30, r0
    456e:	93 81       	ldd	r25, Z+3	; 0x03
    4570:	82 81       	ldd	r24, Z+2	; 0x02
    4572:	98 17       	cp	r25, r24
    4574:	b1 f0       	breq	.+44     	; 0x45a2 <__vector_52+0x62>
    4576:	92 81       	ldd	r25, Z+2	; 0x02
    4578:	85 81       	ldd	r24, Z+5	; 0x05
    457a:	28 2f       	mov	r18, r24
    457c:	26 95       	lsr	r18
    457e:	29 23       	and	r18, r25
    4580:	a0 81       	ld	r26, Z
    4582:	b1 81       	ldd	r27, Z+1	; 0x01
    4584:	a2 0f       	add	r26, r18
    4586:	b1 1d       	adc	r27, r1
    4588:	2c 91       	ld	r18, X
    458a:	9f 5f       	subi	r25, 0xFF	; 255
    458c:	89 23       	and	r24, r25
    458e:	82 83       	std	Z+2, r24	; 0x02
    4590:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4594:	0b c0       	rjmp	.+22     	; 0x45ac <__vector_52+0x6c>
    4596:	e1 ed       	ldi	r30, 0xD1	; 209
    4598:	f0 e0       	ldi	r31, 0x00	; 0
    459a:	80 81       	ld	r24, Z
    459c:	8f 7d       	andi	r24, 0xDF	; 223
    459e:	80 83       	st	Z, r24
    45a0:	05 c0       	rjmp	.+10     	; 0x45ac <__vector_52+0x6c>
    45a2:	e1 ed       	ldi	r30, 0xD1	; 209
    45a4:	f0 e0       	ldi	r31, 0x00	; 0
    45a6:	80 81       	ld	r24, Z
    45a8:	8f 7d       	andi	r24, 0xDF	; 223
    45aa:	80 83       	st	Z, r24
    45ac:	ff 91       	pop	r31
    45ae:	ef 91       	pop	r30
    45b0:	bf 91       	pop	r27
    45b2:	af 91       	pop	r26
    45b4:	9f 91       	pop	r25
    45b6:	8f 91       	pop	r24
    45b8:	2f 91       	pop	r18
    45ba:	0f 90       	pop	r0
    45bc:	0b be       	out	0x3b, r0	; 59
    45be:	0f 90       	pop	r0
    45c0:	0f be       	out	0x3f, r0	; 63
    45c2:	0f 90       	pop	r0
    45c4:	1f 90       	pop	r1
    45c6:	18 95       	reti

000045c8 <__vector_54>:
    45c8:	1f 92       	push	r1
    45ca:	0f 92       	push	r0
    45cc:	0f b6       	in	r0, 0x3f	; 63
    45ce:	0f 92       	push	r0
    45d0:	11 24       	eor	r1, r1
    45d2:	0b b6       	in	r0, 0x3b	; 59
    45d4:	0f 92       	push	r0
    45d6:	2f 93       	push	r18
    45d8:	3f 93       	push	r19
    45da:	4f 93       	push	r20
    45dc:	5f 93       	push	r21
    45de:	6f 93       	push	r22
    45e0:	7f 93       	push	r23
    45e2:	8f 93       	push	r24
    45e4:	9f 93       	push	r25
    45e6:	af 93       	push	r26
    45e8:	bf 93       	push	r27
    45ea:	cf 93       	push	r28
    45ec:	df 93       	push	r29
    45ee:	ef 93       	push	r30
    45f0:	ff 93       	push	r31
    45f2:	a0 91 c1 17 	lds	r26, 0x17C1	; 0x8017c1 <_ser_handle+0x6>
    45f6:	b0 91 c2 17 	lds	r27, 0x17C2	; 0x8017c2 <_ser_handle+0x7>
    45fa:	10 97       	sbiw	r26, 0x00	; 0
    45fc:	11 f1       	breq	.+68     	; 0x4642 <__vector_54+0x7a>
    45fe:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4602:	14 96       	adiw	r26, 0x04	; 4
    4604:	ed 91       	ld	r30, X+
    4606:	fc 91       	ld	r31, X
    4608:	15 97       	sbiw	r26, 0x05	; 5
    460a:	93 81       	ldd	r25, Z+3	; 0x03
    460c:	82 81       	ldd	r24, Z+2	; 0x02
    460e:	25 81       	ldd	r18, Z+5	; 0x05
    4610:	98 1b       	sub	r25, r24
    4612:	92 23       	and	r25, r18
    4614:	84 81       	ldd	r24, Z+4	; 0x04
    4616:	98 17       	cp	r25, r24
    4618:	61 f0       	breq	.+24     	; 0x4632 <__vector_54+0x6a>
    461a:	83 81       	ldd	r24, Z+3	; 0x03
    461c:	26 95       	lsr	r18
    461e:	28 23       	and	r18, r24
    4620:	c0 81       	ld	r28, Z
    4622:	d1 81       	ldd	r29, Z+1	; 0x01
    4624:	c2 0f       	add	r28, r18
    4626:	d1 1d       	adc	r29, r1
    4628:	68 83       	st	Y, r22
    462a:	8f 5f       	subi	r24, 0xFF	; 255
    462c:	95 81       	ldd	r25, Z+5	; 0x05
    462e:	89 23       	and	r24, r25
    4630:	83 83       	std	Z+3, r24	; 0x03
    4632:	16 96       	adiw	r26, 0x06	; 6
    4634:	ed 91       	ld	r30, X+
    4636:	fc 91       	ld	r31, X
    4638:	17 97       	sbiw	r26, 0x07	; 7
    463a:	30 97       	sbiw	r30, 0x00	; 0
    463c:	11 f0       	breq	.+4      	; 0x4642 <__vector_54+0x7a>
    463e:	cd 01       	movw	r24, r26
    4640:	19 95       	eicall
    4642:	ff 91       	pop	r31
    4644:	ef 91       	pop	r30
    4646:	df 91       	pop	r29
    4648:	cf 91       	pop	r28
    464a:	bf 91       	pop	r27
    464c:	af 91       	pop	r26
    464e:	9f 91       	pop	r25
    4650:	8f 91       	pop	r24
    4652:	7f 91       	pop	r23
    4654:	6f 91       	pop	r22
    4656:	5f 91       	pop	r21
    4658:	4f 91       	pop	r20
    465a:	3f 91       	pop	r19
    465c:	2f 91       	pop	r18
    465e:	0f 90       	pop	r0
    4660:	0b be       	out	0x3b, r0	; 59
    4662:	0f 90       	pop	r0
    4664:	0f be       	out	0x3f, r0	; 63
    4666:	0f 90       	pop	r0
    4668:	1f 90       	pop	r1
    466a:	18 95       	reti

0000466c <__vector_55>:
    466c:	1f 92       	push	r1
    466e:	0f 92       	push	r0
    4670:	0f b6       	in	r0, 0x3f	; 63
    4672:	0f 92       	push	r0
    4674:	11 24       	eor	r1, r1
    4676:	0b b6       	in	r0, 0x3b	; 59
    4678:	0f 92       	push	r0
    467a:	2f 93       	push	r18
    467c:	8f 93       	push	r24
    467e:	9f 93       	push	r25
    4680:	af 93       	push	r26
    4682:	bf 93       	push	r27
    4684:	ef 93       	push	r30
    4686:	ff 93       	push	r31
    4688:	e0 91 c1 17 	lds	r30, 0x17C1	; 0x8017c1 <_ser_handle+0x6>
    468c:	f0 91 c2 17 	lds	r31, 0x17C2	; 0x8017c2 <_ser_handle+0x7>
    4690:	30 97       	sbiw	r30, 0x00	; 0
    4692:	b9 f0       	breq	.+46     	; 0x46c2 <__vector_55+0x56>
    4694:	02 80       	ldd	r0, Z+2	; 0x02
    4696:	f3 81       	ldd	r31, Z+3	; 0x03
    4698:	e0 2d       	mov	r30, r0
    469a:	93 81       	ldd	r25, Z+3	; 0x03
    469c:	82 81       	ldd	r24, Z+2	; 0x02
    469e:	98 17       	cp	r25, r24
    46a0:	b1 f0       	breq	.+44     	; 0x46ce <__vector_55+0x62>
    46a2:	92 81       	ldd	r25, Z+2	; 0x02
    46a4:	85 81       	ldd	r24, Z+5	; 0x05
    46a6:	28 2f       	mov	r18, r24
    46a8:	26 95       	lsr	r18
    46aa:	29 23       	and	r18, r25
    46ac:	a0 81       	ld	r26, Z
    46ae:	b1 81       	ldd	r27, Z+1	; 0x01
    46b0:	a2 0f       	add	r26, r18
    46b2:	b1 1d       	adc	r27, r1
    46b4:	2c 91       	ld	r18, X
    46b6:	9f 5f       	subi	r25, 0xFF	; 255
    46b8:	89 23       	and	r24, r25
    46ba:	82 83       	std	Z+2, r24	; 0x02
    46bc:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    46c0:	0b c0       	rjmp	.+22     	; 0x46d8 <__vector_55+0x6c>
    46c2:	e1 e3       	ldi	r30, 0x31	; 49
    46c4:	f1 e0       	ldi	r31, 0x01	; 1
    46c6:	80 81       	ld	r24, Z
    46c8:	8f 7d       	andi	r24, 0xDF	; 223
    46ca:	80 83       	st	Z, r24
    46cc:	05 c0       	rjmp	.+10     	; 0x46d8 <__vector_55+0x6c>
    46ce:	e1 e3       	ldi	r30, 0x31	; 49
    46d0:	f1 e0       	ldi	r31, 0x01	; 1
    46d2:	80 81       	ld	r24, Z
    46d4:	8f 7d       	andi	r24, 0xDF	; 223
    46d6:	80 83       	st	Z, r24
    46d8:	ff 91       	pop	r31
    46da:	ef 91       	pop	r30
    46dc:	bf 91       	pop	r27
    46de:	af 91       	pop	r26
    46e0:	9f 91       	pop	r25
    46e2:	8f 91       	pop	r24
    46e4:	2f 91       	pop	r18
    46e6:	0f 90       	pop	r0
    46e8:	0b be       	out	0x3b, r0	; 59
    46ea:	0f 90       	pop	r0
    46ec:	0f be       	out	0x3f, r0	; 63
    46ee:	0f 90       	pop	r0
    46f0:	1f 90       	pop	r1
    46f2:	18 95       	reti

000046f4 <usart_getchar>:
    46f4:	cf 93       	push	r28
    46f6:	df 93       	push	r29
    46f8:	1f 92       	push	r1
    46fa:	cd b7       	in	r28, 0x3d	; 61
    46fc:	de b7       	in	r29, 0x3e	; 62
    46fe:	be 01       	movw	r22, r28
    4700:	6f 5f       	subi	r22, 0xFF	; 255
    4702:	7f 4f       	sbci	r23, 0xFF	; 255
    4704:	80 91 c3 17 	lds	r24, 0x17C3	; 0x8017c3 <_com_serial_instance>
    4708:	90 91 c4 17 	lds	r25, 0x17C4	; 0x8017c4 <_com_serial_instance+0x1>
    470c:	7b dd       	rcall	.-1290   	; 0x4204 <serial_getByte>
    470e:	81 11       	cpse	r24, r1
    4710:	f6 cf       	rjmp	.-20     	; 0x46fe <usart_getchar+0xa>
    4712:	89 81       	ldd	r24, Y+1	; 0x01
    4714:	90 e0       	ldi	r25, 0x00	; 0
    4716:	0f 90       	pop	r0
    4718:	df 91       	pop	r29
    471a:	cf 91       	pop	r28
    471c:	08 95       	ret

0000471e <usart_putchar>:
    471e:	68 2f       	mov	r22, r24
    4720:	80 91 c3 17 	lds	r24, 0x17C3	; 0x8017c3 <_com_serial_instance>
    4724:	90 91 c4 17 	lds	r25, 0x17C4	; 0x8017c4 <_com_serial_instance+0x1>
    4728:	ed dc       	rcall	.-1574   	; 0x4104 <serial_sendByte>
    472a:	80 e0       	ldi	r24, 0x00	; 0
    472c:	90 e0       	ldi	r25, 0x00	; 0
    472e:	08 95       	ret

00004730 <stdio_initialise>:
    4730:	8f 92       	push	r8
    4732:	9f 92       	push	r9
    4734:	af 92       	push	r10
    4736:	cf 92       	push	r12
    4738:	ef 92       	push	r14
    473a:	0f 93       	push	r16
    473c:	81 2c       	mov	r8, r1
    473e:	91 2c       	mov	r9, r1
    4740:	68 94       	set
    4742:	aa 24       	eor	r10, r10
    4744:	a7 f8       	bld	r10, 7
    4746:	68 94       	set
    4748:	cc 24       	eor	r12, r12
    474a:	c7 f8       	bld	r12, 7
    474c:	e1 2c       	mov	r14, r1
    474e:	00 e0       	ldi	r16, 0x00	; 0
    4750:	23 e0       	ldi	r18, 0x03	; 3
    4752:	40 e0       	ldi	r20, 0x00	; 0
    4754:	51 ee       	ldi	r21, 0xE1	; 225
    4756:	60 e0       	ldi	r22, 0x00	; 0
    4758:	70 e0       	ldi	r23, 0x00	; 0
    475a:	32 dc       	rcall	.-1948   	; 0x3fc0 <serial_create>
    475c:	90 93 c4 17 	sts	0x17C4, r25	; 0x8017c4 <_com_serial_instance+0x1>
    4760:	80 93 c3 17 	sts	0x17C3, r24	; 0x8017c3 <_com_serial_instance>
    4764:	e8 ef       	ldi	r30, 0xF8	; 248
    4766:	f7 e1       	ldi	r31, 0x17	; 23
    4768:	83 e1       	ldi	r24, 0x13	; 19
    476a:	92 e0       	ldi	r25, 0x02	; 2
    476c:	91 83       	std	Z+1, r25	; 0x01
    476e:	80 83       	st	Z, r24
    4770:	93 83       	std	Z+3, r25	; 0x03
    4772:	82 83       	std	Z+2, r24	; 0x02
    4774:	0f 91       	pop	r16
    4776:	ef 90       	pop	r14
    4778:	cf 90       	pop	r12
    477a:	af 90       	pop	r10
    477c:	9f 90       	pop	r9
    477e:	8f 90       	pop	r8
    4780:	08 95       	ret

00004782 <_turn_off>:
    4782:	90 e0       	ldi	r25, 0x00	; 0
    4784:	fc 01       	movw	r30, r24
    4786:	ee 0f       	add	r30, r30
    4788:	ff 1f       	adc	r31, r31
    478a:	e8 0f       	add	r30, r24
    478c:	f9 1f       	adc	r31, r25
    478e:	ee 0f       	add	r30, r30
    4790:	ff 1f       	adc	r31, r31
    4792:	eb 53       	subi	r30, 0x3B	; 59
    4794:	f8 4e       	sbci	r31, 0xE8	; 232
    4796:	23 81       	ldd	r18, Z+3	; 0x03
    4798:	21 11       	cpse	r18, r1
    479a:	1f c0       	rjmp	.+62     	; 0x47da <_turn_off+0x58>
    479c:	9c 01       	movw	r18, r24
    479e:	22 0f       	add	r18, r18
    47a0:	33 1f       	adc	r19, r19
    47a2:	f9 01       	movw	r30, r18
    47a4:	e8 0f       	add	r30, r24
    47a6:	f9 1f       	adc	r31, r25
    47a8:	ee 0f       	add	r30, r30
    47aa:	ff 1f       	adc	r31, r31
    47ac:	eb 53       	subi	r30, 0x3B	; 59
    47ae:	f8 4e       	sbci	r31, 0xE8	; 232
    47b0:	a0 81       	ld	r26, Z
    47b2:	b1 81       	ldd	r27, Z+1	; 0x01
    47b4:	4c 91       	ld	r20, X
    47b6:	f9 01       	movw	r30, r18
    47b8:	e8 0f       	add	r30, r24
    47ba:	f9 1f       	adc	r31, r25
    47bc:	ee 0f       	add	r30, r30
    47be:	ff 1f       	adc	r31, r31
    47c0:	eb 53       	subi	r30, 0x3B	; 59
    47c2:	f8 4e       	sbci	r31, 0xE8	; 232
    47c4:	81 e0       	ldi	r24, 0x01	; 1
    47c6:	90 e0       	ldi	r25, 0x00	; 0
    47c8:	02 80       	ldd	r0, Z+2	; 0x02
    47ca:	02 c0       	rjmp	.+4      	; 0x47d0 <_turn_off+0x4e>
    47cc:	88 0f       	add	r24, r24
    47ce:	99 1f       	adc	r25, r25
    47d0:	0a 94       	dec	r0
    47d2:	e2 f7       	brpl	.-8      	; 0x47cc <_turn_off+0x4a>
    47d4:	84 2b       	or	r24, r20
    47d6:	8c 93       	st	X, r24
    47d8:	08 95       	ret
    47da:	fc 01       	movw	r30, r24
    47dc:	ee 0f       	add	r30, r30
    47de:	ff 1f       	adc	r31, r31
    47e0:	df 01       	movw	r26, r30
    47e2:	a8 0f       	add	r26, r24
    47e4:	b9 1f       	adc	r27, r25
    47e6:	aa 0f       	add	r26, r26
    47e8:	bb 1f       	adc	r27, r27
    47ea:	ab 53       	subi	r26, 0x3B	; 59
    47ec:	b8 4e       	sbci	r27, 0xE8	; 232
    47ee:	0d 90       	ld	r0, X+
    47f0:	bc 91       	ld	r27, X
    47f2:	a0 2d       	mov	r26, r0
    47f4:	2c 91       	ld	r18, X
    47f6:	e8 0f       	add	r30, r24
    47f8:	f9 1f       	adc	r31, r25
    47fa:	ee 0f       	add	r30, r30
    47fc:	ff 1f       	adc	r31, r31
    47fe:	eb 53       	subi	r30, 0x3B	; 59
    4800:	f8 4e       	sbci	r31, 0xE8	; 232
    4802:	81 e0       	ldi	r24, 0x01	; 1
    4804:	90 e0       	ldi	r25, 0x00	; 0
    4806:	02 80       	ldd	r0, Z+2	; 0x02
    4808:	02 c0       	rjmp	.+4      	; 0x480e <_turn_off+0x8c>
    480a:	88 0f       	add	r24, r24
    480c:	99 1f       	adc	r25, r25
    480e:	0a 94       	dec	r0
    4810:	e2 f7       	brpl	.-8      	; 0x480a <_turn_off+0x88>
    4812:	80 95       	com	r24
    4814:	82 23       	and	r24, r18
    4816:	8c 93       	st	X, r24
    4818:	08 95       	ret

0000481a <_turn_on>:
    481a:	90 e0       	ldi	r25, 0x00	; 0
    481c:	fc 01       	movw	r30, r24
    481e:	ee 0f       	add	r30, r30
    4820:	ff 1f       	adc	r31, r31
    4822:	e8 0f       	add	r30, r24
    4824:	f9 1f       	adc	r31, r25
    4826:	ee 0f       	add	r30, r30
    4828:	ff 1f       	adc	r31, r31
    482a:	eb 53       	subi	r30, 0x3B	; 59
    482c:	f8 4e       	sbci	r31, 0xE8	; 232
    482e:	23 81       	ldd	r18, Z+3	; 0x03
    4830:	21 11       	cpse	r18, r1
    4832:	20 c0       	rjmp	.+64     	; 0x4874 <_turn_on+0x5a>
    4834:	9c 01       	movw	r18, r24
    4836:	22 0f       	add	r18, r18
    4838:	33 1f       	adc	r19, r19
    483a:	f9 01       	movw	r30, r18
    483c:	e8 0f       	add	r30, r24
    483e:	f9 1f       	adc	r31, r25
    4840:	ee 0f       	add	r30, r30
    4842:	ff 1f       	adc	r31, r31
    4844:	eb 53       	subi	r30, 0x3B	; 59
    4846:	f8 4e       	sbci	r31, 0xE8	; 232
    4848:	a0 81       	ld	r26, Z
    484a:	b1 81       	ldd	r27, Z+1	; 0x01
    484c:	4c 91       	ld	r20, X
    484e:	f9 01       	movw	r30, r18
    4850:	e8 0f       	add	r30, r24
    4852:	f9 1f       	adc	r31, r25
    4854:	ee 0f       	add	r30, r30
    4856:	ff 1f       	adc	r31, r31
    4858:	eb 53       	subi	r30, 0x3B	; 59
    485a:	f8 4e       	sbci	r31, 0xE8	; 232
    485c:	81 e0       	ldi	r24, 0x01	; 1
    485e:	90 e0       	ldi	r25, 0x00	; 0
    4860:	02 80       	ldd	r0, Z+2	; 0x02
    4862:	02 c0       	rjmp	.+4      	; 0x4868 <_turn_on+0x4e>
    4864:	88 0f       	add	r24, r24
    4866:	99 1f       	adc	r25, r25
    4868:	0a 94       	dec	r0
    486a:	e2 f7       	brpl	.-8      	; 0x4864 <_turn_on+0x4a>
    486c:	80 95       	com	r24
    486e:	84 23       	and	r24, r20
    4870:	8c 93       	st	X, r24
    4872:	08 95       	ret
    4874:	fc 01       	movw	r30, r24
    4876:	ee 0f       	add	r30, r30
    4878:	ff 1f       	adc	r31, r31
    487a:	df 01       	movw	r26, r30
    487c:	a8 0f       	add	r26, r24
    487e:	b9 1f       	adc	r27, r25
    4880:	aa 0f       	add	r26, r26
    4882:	bb 1f       	adc	r27, r27
    4884:	ab 53       	subi	r26, 0x3B	; 59
    4886:	b8 4e       	sbci	r27, 0xE8	; 232
    4888:	0d 90       	ld	r0, X+
    488a:	bc 91       	ld	r27, X
    488c:	a0 2d       	mov	r26, r0
    488e:	2c 91       	ld	r18, X
    4890:	e8 0f       	add	r30, r24
    4892:	f9 1f       	adc	r31, r25
    4894:	ee 0f       	add	r30, r30
    4896:	ff 1f       	adc	r31, r31
    4898:	eb 53       	subi	r30, 0x3B	; 59
    489a:	f8 4e       	sbci	r31, 0xE8	; 232
    489c:	81 e0       	ldi	r24, 0x01	; 1
    489e:	90 e0       	ldi	r25, 0x00	; 0
    48a0:	02 80       	ldd	r0, Z+2	; 0x02
    48a2:	02 c0       	rjmp	.+4      	; 0x48a8 <_turn_on+0x8e>
    48a4:	88 0f       	add	r24, r24
    48a6:	99 1f       	adc	r25, r25
    48a8:	0a 94       	dec	r0
    48aa:	e2 f7       	brpl	.-8      	; 0x48a4 <_turn_on+0x8a>
    48ac:	82 2b       	or	r24, r18
    48ae:	8c 93       	st	X, r24
    48b0:	08 95       	ret

000048b2 <_hal_led_task>:
    48b2:	cc 24       	eor	r12, r12
    48b4:	c3 94       	inc	r12
    48b6:	d1 2c       	mov	r13, r1
    48b8:	68 94       	set
    48ba:	bb 24       	eor	r11, r11
    48bc:	b2 f8       	bld	r11, 2
    48be:	c5 ec       	ldi	r28, 0xC5	; 197
    48c0:	d7 e1       	ldi	r29, 0x17	; 23
    48c2:	10 e0       	ldi	r17, 0x00	; 0
    48c4:	8c 81       	ldd	r24, Y+4	; 0x04
    48c6:	81 30       	cpi	r24, 0x01	; 1
    48c8:	81 f0       	breq	.+32     	; 0x48ea <_hal_led_task+0x38>
    48ca:	18 f1       	brcs	.+70     	; 0x4912 <_hal_led_task+0x60>
    48cc:	82 30       	cpi	r24, 0x02	; 2
    48ce:	61 f5       	brne	.+88     	; 0x4928 <_hal_led_task+0x76>
    48d0:	e8 81       	ld	r30, Y
    48d2:	f9 81       	ldd	r31, Y+1	; 0x01
    48d4:	20 81       	ld	r18, Z
    48d6:	c6 01       	movw	r24, r12
    48d8:	0a 80       	ldd	r0, Y+2	; 0x02
    48da:	02 c0       	rjmp	.+4      	; 0x48e0 <_hal_led_task+0x2e>
    48dc:	88 0f       	add	r24, r24
    48de:	99 1f       	adc	r25, r25
    48e0:	0a 94       	dec	r0
    48e2:	e2 f7       	brpl	.-8      	; 0x48dc <_hal_led_task+0x2a>
    48e4:	82 27       	eor	r24, r18
    48e6:	80 83       	st	Z, r24
    48e8:	1f c0       	rjmp	.+62     	; 0x4928 <_hal_led_task+0x76>
    48ea:	8d 81       	ldd	r24, Y+5	; 0x05
    48ec:	8f 5f       	subi	r24, 0xFF	; 255
    48ee:	86 30       	cpi	r24, 0x06	; 6
    48f0:	10 f4       	brcc	.+4      	; 0x48f6 <_hal_led_task+0x44>
    48f2:	8d 83       	std	Y+5, r24	; 0x05
    48f4:	19 c0       	rjmp	.+50     	; 0x4928 <_hal_led_task+0x76>
    48f6:	1d 82       	std	Y+5, r1	; 0x05
    48f8:	e8 81       	ld	r30, Y
    48fa:	f9 81       	ldd	r31, Y+1	; 0x01
    48fc:	20 81       	ld	r18, Z
    48fe:	c6 01       	movw	r24, r12
    4900:	0a 80       	ldd	r0, Y+2	; 0x02
    4902:	02 c0       	rjmp	.+4      	; 0x4908 <_hal_led_task+0x56>
    4904:	88 0f       	add	r24, r24
    4906:	99 1f       	adc	r25, r25
    4908:	0a 94       	dec	r0
    490a:	e2 f7       	brpl	.-8      	; 0x4904 <_hal_led_task+0x52>
    490c:	82 27       	eor	r24, r18
    490e:	80 83       	st	Z, r24
    4910:	0b c0       	rjmp	.+22     	; 0x4928 <_hal_led_task+0x76>
    4912:	0d 81       	ldd	r16, Y+5	; 0x05
    4914:	00 23       	and	r16, r16
    4916:	29 f0       	breq	.+10     	; 0x4922 <_hal_led_task+0x70>
    4918:	81 2f       	mov	r24, r17
    491a:	7f df       	rcall	.-258    	; 0x481a <_turn_on>
    491c:	01 50       	subi	r16, 0x01	; 1
    491e:	0d 83       	std	Y+5, r16	; 0x05
    4920:	03 c0       	rjmp	.+6      	; 0x4928 <_hal_led_task+0x76>
    4922:	bc 82       	std	Y+4, r11	; 0x04
    4924:	81 2f       	mov	r24, r17
    4926:	2d df       	rcall	.-422    	; 0x4782 <_turn_off>
    4928:	1f 5f       	subi	r17, 0xFF	; 255
    492a:	26 96       	adiw	r28, 0x06	; 6
    492c:	14 30       	cpi	r17, 0x04	; 4
    492e:	51 f6       	brne	.-108    	; 0x48c4 <_hal_led_task+0x12>
    4930:	6c e0       	ldi	r22, 0x0C	; 12
    4932:	70 e0       	ldi	r23, 0x00	; 0
    4934:	80 e0       	ldi	r24, 0x00	; 0
    4936:	90 e0       	ldi	r25, 0x00	; 0
    4938:	0e 94 7f 11 	call	0x22fe	; 0x22fe <vTaskDelay>
    493c:	c0 cf       	rjmp	.-128    	; 0x48be <_hal_led_task+0xc>

0000493e <status_leds_initialise>:
    493e:	ef 92       	push	r14
    4940:	ff 92       	push	r15
    4942:	0f 93       	push	r16
    4944:	1f 93       	push	r17
    4946:	cf 93       	push	r28
    4948:	df 93       	push	r29
    494a:	08 2f       	mov	r16, r24
    494c:	80 e4       	ldi	r24, 0x40	; 64
    494e:	87 b9       	out	0x07, r24	; 7
    4950:	c5 ec       	ldi	r28, 0xC5	; 197
    4952:	d7 e1       	ldi	r29, 0x17	; 23
    4954:	0f 2e       	mov	r0, r31
    4956:	f8 e2       	ldi	r31, 0x28	; 40
    4958:	ef 2e       	mov	r14, r31
    495a:	f1 2c       	mov	r15, r1
    495c:	f0 2d       	mov	r31, r0
    495e:	f9 82       	std	Y+1, r15	; 0x01
    4960:	e8 82       	st	Y, r14
    4962:	86 e0       	ldi	r24, 0x06	; 6
    4964:	8a 83       	std	Y+2, r24	; 0x02
    4966:	1b 82       	std	Y+3, r1	; 0x03
    4968:	14 e0       	ldi	r17, 0x04	; 4
    496a:	1c 83       	std	Y+4, r17	; 0x04
    496c:	80 e0       	ldi	r24, 0x00	; 0
    496e:	09 df       	rcall	.-494    	; 0x4782 <_turn_off>
    4970:	80 e8       	ldi	r24, 0x80	; 128
    4972:	87 b9       	out	0x07, r24	; 7
    4974:	ff 82       	std	Y+7, r15	; 0x07
    4976:	ee 82       	std	Y+6, r14	; 0x06
    4978:	87 e0       	ldi	r24, 0x07	; 7
    497a:	88 87       	std	Y+8, r24	; 0x08
    497c:	19 86       	std	Y+9, r1	; 0x09
    497e:	1a 87       	std	Y+10, r17	; 0x0a
    4980:	81 e0       	ldi	r24, 0x01	; 1
    4982:	ff de       	rcall	.-514    	; 0x4782 <_turn_off>
    4984:	80 e2       	ldi	r24, 0x20	; 32
    4986:	83 bb       	out	0x13, r24	; 19
    4988:	84 e3       	ldi	r24, 0x34	; 52
    498a:	90 e0       	ldi	r25, 0x00	; 0
    498c:	9d 87       	std	Y+13, r25	; 0x0d
    498e:	8c 87       	std	Y+12, r24	; 0x0c
    4990:	85 e0       	ldi	r24, 0x05	; 5
    4992:	8e 87       	std	Y+14, r24	; 0x0e
    4994:	1f 86       	std	Y+15, r1	; 0x0f
    4996:	18 8b       	std	Y+16, r17	; 0x10
    4998:	82 e0       	ldi	r24, 0x02	; 2
    499a:	f3 de       	rcall	.-538    	; 0x4782 <_turn_off>
    499c:	80 e1       	ldi	r24, 0x10	; 16
    499e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    49a2:	82 e0       	ldi	r24, 0x02	; 2
    49a4:	91 e0       	ldi	r25, 0x01	; 1
    49a6:	9b 8b       	std	Y+19, r25	; 0x13
    49a8:	8a 8b       	std	Y+18, r24	; 0x12
    49aa:	1c 8b       	std	Y+20, r17	; 0x14
    49ac:	1d 8a       	std	Y+21, r1	; 0x15
    49ae:	1e 8b       	std	Y+22, r17	; 0x16
    49b0:	83 e0       	ldi	r24, 0x03	; 3
    49b2:	e7 de       	rcall	.-562    	; 0x4782 <_turn_off>
    49b4:	e1 2c       	mov	r14, r1
    49b6:	f1 2c       	mov	r15, r1
    49b8:	20 e0       	ldi	r18, 0x00	; 0
    49ba:	30 e0       	ldi	r19, 0x00	; 0
    49bc:	40 ec       	ldi	r20, 0xC0	; 192
    49be:	50 e0       	ldi	r21, 0x00	; 0
    49c0:	60 e0       	ldi	r22, 0x00	; 0
    49c2:	78 e0       	ldi	r23, 0x08	; 8
    49c4:	89 e5       	ldi	r24, 0x59	; 89
    49c6:	94 e2       	ldi	r25, 0x24	; 36
    49c8:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <xTaskCreate>
    49cc:	df 91       	pop	r29
    49ce:	cf 91       	pop	r28
    49d0:	1f 91       	pop	r17
    49d2:	0f 91       	pop	r16
    49d4:	ff 90       	pop	r15
    49d6:	ef 90       	pop	r14
    49d8:	08 95       	ret

000049da <status_leds_slowBlink>:
    49da:	cf 93       	push	r28
    49dc:	df 93       	push	r29
    49de:	90 e0       	ldi	r25, 0x00	; 0
    49e0:	fc 01       	movw	r30, r24
    49e2:	ee 0f       	add	r30, r30
    49e4:	ff 1f       	adc	r31, r31
    49e6:	df 01       	movw	r26, r30
    49e8:	a8 0f       	add	r26, r24
    49ea:	b9 1f       	adc	r27, r25
    49ec:	aa 0f       	add	r26, r26
    49ee:	bb 1f       	adc	r27, r27
    49f0:	ab 53       	subi	r26, 0x3B	; 59
    49f2:	b8 4e       	sbci	r27, 0xE8	; 232
    49f4:	cd 91       	ld	r28, X+
    49f6:	dc 91       	ld	r29, X
    49f8:	11 97       	sbiw	r26, 0x01	; 1
    49fa:	48 81       	ld	r20, Y
    49fc:	21 e0       	ldi	r18, 0x01	; 1
    49fe:	30 e0       	ldi	r19, 0x00	; 0
    4a00:	12 96       	adiw	r26, 0x02	; 2
    4a02:	0c 90       	ld	r0, X
    4a04:	12 97       	sbiw	r26, 0x02	; 2
    4a06:	02 c0       	rjmp	.+4      	; 0x4a0c <status_leds_slowBlink+0x32>
    4a08:	22 0f       	add	r18, r18
    4a0a:	33 1f       	adc	r19, r19
    4a0c:	0a 94       	dec	r0
    4a0e:	e2 f7       	brpl	.-8      	; 0x4a08 <status_leds_slowBlink+0x2e>
    4a10:	24 27       	eor	r18, r20
    4a12:	28 83       	st	Y, r18
    4a14:	fd 01       	movw	r30, r26
    4a16:	81 e0       	ldi	r24, 0x01	; 1
    4a18:	84 83       	std	Z+4, r24	; 0x04
    4a1a:	df 91       	pop	r29
    4a1c:	cf 91       	pop	r28
    4a1e:	08 95       	ret

00004a20 <status_leds_fastBlink>:
    4a20:	cf 93       	push	r28
    4a22:	df 93       	push	r29
    4a24:	90 e0       	ldi	r25, 0x00	; 0
    4a26:	fc 01       	movw	r30, r24
    4a28:	ee 0f       	add	r30, r30
    4a2a:	ff 1f       	adc	r31, r31
    4a2c:	df 01       	movw	r26, r30
    4a2e:	a8 0f       	add	r26, r24
    4a30:	b9 1f       	adc	r27, r25
    4a32:	aa 0f       	add	r26, r26
    4a34:	bb 1f       	adc	r27, r27
    4a36:	ab 53       	subi	r26, 0x3B	; 59
    4a38:	b8 4e       	sbci	r27, 0xE8	; 232
    4a3a:	cd 91       	ld	r28, X+
    4a3c:	dc 91       	ld	r29, X
    4a3e:	11 97       	sbiw	r26, 0x01	; 1
    4a40:	48 81       	ld	r20, Y
    4a42:	21 e0       	ldi	r18, 0x01	; 1
    4a44:	30 e0       	ldi	r19, 0x00	; 0
    4a46:	12 96       	adiw	r26, 0x02	; 2
    4a48:	0c 90       	ld	r0, X
    4a4a:	12 97       	sbiw	r26, 0x02	; 2
    4a4c:	02 c0       	rjmp	.+4      	; 0x4a52 <status_leds_fastBlink+0x32>
    4a4e:	22 0f       	add	r18, r18
    4a50:	33 1f       	adc	r19, r19
    4a52:	0a 94       	dec	r0
    4a54:	e2 f7       	brpl	.-8      	; 0x4a4e <status_leds_fastBlink+0x2e>
    4a56:	24 27       	eor	r18, r20
    4a58:	28 83       	st	Y, r18
    4a5a:	fd 01       	movw	r30, r26
    4a5c:	82 e0       	ldi	r24, 0x02	; 2
    4a5e:	84 83       	std	Z+4, r24	; 0x04
    4a60:	df 91       	pop	r29
    4a62:	cf 91       	pop	r28
    4a64:	08 95       	ret

00004a66 <status_leds_ledOn>:
    4a66:	28 2f       	mov	r18, r24
    4a68:	30 e0       	ldi	r19, 0x00	; 0
    4a6a:	f9 01       	movw	r30, r18
    4a6c:	ee 0f       	add	r30, r30
    4a6e:	ff 1f       	adc	r31, r31
    4a70:	e2 0f       	add	r30, r18
    4a72:	f3 1f       	adc	r31, r19
    4a74:	ee 0f       	add	r30, r30
    4a76:	ff 1f       	adc	r31, r31
    4a78:	eb 53       	subi	r30, 0x3B	; 59
    4a7a:	f8 4e       	sbci	r31, 0xE8	; 232
    4a7c:	93 e0       	ldi	r25, 0x03	; 3
    4a7e:	94 83       	std	Z+4, r25	; 0x04
    4a80:	cc ce       	rjmp	.-616    	; 0x481a <_turn_on>
    4a82:	08 95       	ret

00004a84 <status_leds_ledOff>:
    4a84:	28 2f       	mov	r18, r24
    4a86:	30 e0       	ldi	r19, 0x00	; 0
    4a88:	f9 01       	movw	r30, r18
    4a8a:	ee 0f       	add	r30, r30
    4a8c:	ff 1f       	adc	r31, r31
    4a8e:	e2 0f       	add	r30, r18
    4a90:	f3 1f       	adc	r31, r19
    4a92:	ee 0f       	add	r30, r30
    4a94:	ff 1f       	adc	r31, r31
    4a96:	eb 53       	subi	r30, 0x3B	; 59
    4a98:	f8 4e       	sbci	r31, 0xE8	; 232
    4a9a:	94 e0       	ldi	r25, 0x04	; 4
    4a9c:	94 83       	std	Z+4, r25	; 0x04
    4a9e:	71 ce       	rjmp	.-798    	; 0x4782 <_turn_off>
    4aa0:	08 95       	ret

00004aa2 <status_leds_longPuls>:
    4aa2:	90 e0       	ldi	r25, 0x00	; 0
    4aa4:	fc 01       	movw	r30, r24
    4aa6:	ee 0f       	add	r30, r30
    4aa8:	ff 1f       	adc	r31, r31
    4aaa:	df 01       	movw	r26, r30
    4aac:	a8 0f       	add	r26, r24
    4aae:	b9 1f       	adc	r27, r25
    4ab0:	aa 0f       	add	r26, r26
    4ab2:	bb 1f       	adc	r27, r27
    4ab4:	ab 53       	subi	r26, 0x3B	; 59
    4ab6:	b8 4e       	sbci	r27, 0xE8	; 232
    4ab8:	26 e0       	ldi	r18, 0x06	; 6
    4aba:	15 96       	adiw	r26, 0x05	; 5
    4abc:	2c 93       	st	X, r18
    4abe:	15 97       	sbiw	r26, 0x05	; 5
    4ac0:	fd 01       	movw	r30, r26
    4ac2:	14 82       	std	Z+4, r1	; 0x04
    4ac4:	08 95       	ret

00004ac6 <status_leds_shortPuls>:
    4ac6:	90 e0       	ldi	r25, 0x00	; 0
    4ac8:	fc 01       	movw	r30, r24
    4aca:	ee 0f       	add	r30, r30
    4acc:	ff 1f       	adc	r31, r31
    4ace:	df 01       	movw	r26, r30
    4ad0:	a8 0f       	add	r26, r24
    4ad2:	b9 1f       	adc	r27, r25
    4ad4:	aa 0f       	add	r26, r26
    4ad6:	bb 1f       	adc	r27, r27
    4ad8:	ab 53       	subi	r26, 0x3B	; 59
    4ada:	b8 4e       	sbci	r27, 0xE8	; 232
    4adc:	15 96       	adiw	r26, 0x05	; 5
    4ade:	1c 92       	st	X, r1
    4ae0:	15 97       	sbiw	r26, 0x05	; 5
    4ae2:	fd 01       	movw	r30, r26
    4ae4:	14 82       	std	Z+4, r1	; 0x04
    4ae6:	08 95       	ret

00004ae8 <_initTwiInterface>:
    4ae8:	80 91 eb 17 	lds	r24, 0x17EB	; 0x8017eb <_twiIsInitiated>
    4aec:	81 11       	cpse	r24, r1
    4aee:	0c c0       	rjmp	.+24     	; 0x4b08 <_initTwiInterface+0x20>
    4af0:	8c e0       	ldi	r24, 0x0C	; 12
    4af2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4af6:	8f ef       	ldi	r24, 0xFF	; 255
    4af8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4afc:	84 e0       	ldi	r24, 0x04	; 4
    4afe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4b02:	81 e0       	ldi	r24, 0x01	; 1
    4b04:	80 93 eb 17 	sts	0x17EB, r24	; 0x8017eb <_twiIsInitiated>
    4b08:	08 95       	ret

00004b0a <twiCreate>:
    4b0a:	af 92       	push	r10
    4b0c:	bf 92       	push	r11
    4b0e:	cf 92       	push	r12
    4b10:	df 92       	push	r13
    4b12:	ef 92       	push	r14
    4b14:	ff 92       	push	r15
    4b16:	0f 93       	push	r16
    4b18:	1f 93       	push	r17
    4b1a:	cf 93       	push	r28
    4b1c:	df 93       	push	r29
    4b1e:	a8 2e       	mov	r10, r24
    4b20:	b6 2e       	mov	r11, r22
    4b22:	69 01       	movw	r12, r18
    4b24:	7a 01       	movw	r14, r20
    4b26:	84 e0       	ldi	r24, 0x04	; 4
    4b28:	90 e0       	ldi	r25, 0x00	; 0
    4b2a:	b1 d3       	rcall	.+1890   	; 0x528e <malloc>
    4b2c:	ec 01       	movw	r28, r24
    4b2e:	89 2b       	or	r24, r25
    4b30:	61 f1       	breq	.+88     	; 0x4b8a <twiCreate+0x80>
    4b32:	a8 82       	st	Y, r10
    4b34:	81 e0       	ldi	r24, 0x01	; 1
    4b36:	b8 12       	cpse	r11, r24
    4b38:	12 c0       	rjmp	.+36     	; 0x4b5e <twiCreate+0x54>
    4b3a:	c7 01       	movw	r24, r14
    4b3c:	b6 01       	movw	r22, r12
    4b3e:	20 ea       	ldi	r18, 0xA0	; 160
    4b40:	36 e8       	ldi	r19, 0x86	; 134
    4b42:	41 e0       	ldi	r20, 0x01	; 1
    4b44:	50 e0       	ldi	r21, 0x00	; 0
    4b46:	79 d3       	rcall	.+1778   	; 0x523a <__udivmodsi4>
    4b48:	da 01       	movw	r26, r20
    4b4a:	c9 01       	movw	r24, r18
    4b4c:	40 97       	sbiw	r24, 0x10	; 16
    4b4e:	a1 09       	sbc	r26, r1
    4b50:	b1 09       	sbc	r27, r1
    4b52:	b6 95       	lsr	r27
    4b54:	a7 95       	ror	r26
    4b56:	97 95       	ror	r25
    4b58:	87 95       	ror	r24
    4b5a:	89 83       	std	Y+1, r24	; 0x01
    4b5c:	11 c0       	rjmp	.+34     	; 0x4b80 <twiCreate+0x76>
    4b5e:	c7 01       	movw	r24, r14
    4b60:	b6 01       	movw	r22, r12
    4b62:	20 e8       	ldi	r18, 0x80	; 128
    4b64:	3a e1       	ldi	r19, 0x1A	; 26
    4b66:	46 e0       	ldi	r20, 0x06	; 6
    4b68:	50 e0       	ldi	r21, 0x00	; 0
    4b6a:	67 d3       	rcall	.+1742   	; 0x523a <__udivmodsi4>
    4b6c:	da 01       	movw	r26, r20
    4b6e:	c9 01       	movw	r24, r18
    4b70:	40 97       	sbiw	r24, 0x10	; 16
    4b72:	a1 09       	sbc	r26, r1
    4b74:	b1 09       	sbc	r27, r1
    4b76:	b6 95       	lsr	r27
    4b78:	a7 95       	ror	r26
    4b7a:	97 95       	ror	r25
    4b7c:	87 95       	ror	r24
    4b7e:	89 83       	std	Y+1, r24	; 0x01
    4b80:	1b 83       	std	Y+3, r17	; 0x03
    4b82:	0a 83       	std	Y+2, r16	; 0x02
    4b84:	8c 2f       	mov	r24, r28
    4b86:	9d 2f       	mov	r25, r29
    4b88:	02 c0       	rjmp	.+4      	; 0x4b8e <twiCreate+0x84>
    4b8a:	80 e0       	ldi	r24, 0x00	; 0
    4b8c:	90 e0       	ldi	r25, 0x00	; 0
    4b8e:	df 91       	pop	r29
    4b90:	cf 91       	pop	r28
    4b92:	1f 91       	pop	r17
    4b94:	0f 91       	pop	r16
    4b96:	ff 90       	pop	r15
    4b98:	ef 90       	pop	r14
    4b9a:	df 90       	pop	r13
    4b9c:	cf 90       	pop	r12
    4b9e:	bf 90       	pop	r11
    4ba0:	af 90       	pop	r10
    4ba2:	08 95       	ret

00004ba4 <twiIsBusy>:
    4ba4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4ba8:	81 70       	andi	r24, 0x01	; 1
    4baa:	08 95       	ret

00004bac <twiTransmit>:
    4bac:	ff 92       	push	r15
    4bae:	0f 93       	push	r16
    4bb0:	1f 93       	push	r17
    4bb2:	cf 93       	push	r28
    4bb4:	df 93       	push	r29
    4bb6:	00 97       	sbiw	r24, 0x00	; 0
    4bb8:	d1 f1       	breq	.+116    	; 0x4c2e <twiTransmit+0x82>
    4bba:	4a 30       	cpi	r20, 0x0A	; 10
    4bbc:	d0 f5       	brcc	.+116    	; 0x4c32 <twiTransmit+0x86>
    4bbe:	f4 2e       	mov	r15, r20
    4bc0:	8b 01       	movw	r16, r22
    4bc2:	ec 01       	movw	r28, r24
    4bc4:	ef df       	rcall	.-34     	; 0x4ba4 <twiIsBusy>
    4bc6:	81 11       	cpse	r24, r1
    4bc8:	36 c0       	rjmp	.+108    	; 0x4c36 <twiTransmit+0x8a>
    4bca:	80 91 de 17 	lds	r24, 0x17DE	; 0x8017de <_twiCurrentHandler>
    4bce:	90 91 df 17 	lds	r25, 0x17DF	; 0x8017df <_twiCurrentHandler+0x1>
    4bd2:	c8 17       	cp	r28, r24
    4bd4:	d9 07       	cpc	r29, r25
    4bd6:	41 f0       	breq	.+16     	; 0x4be8 <twiTransmit+0x3c>
    4bd8:	87 df       	rcall	.-242    	; 0x4ae8 <_initTwiInterface>
    4bda:	89 81       	ldd	r24, Y+1	; 0x01
    4bdc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4be0:	d0 93 df 17 	sts	0x17DF, r29	; 0x8017df <_twiCurrentHandler+0x1>
    4be4:	c0 93 de 17 	sts	0x17DE, r28	; 0x8017de <_twiCurrentHandler>
    4be8:	81 e0       	ldi	r24, 0x01	; 1
    4bea:	8f 0d       	add	r24, r15
    4bec:	80 93 e0 17 	sts	0x17E0, r24	; 0x8017e0 <_twiMessageLen>
    4bf0:	88 81       	ld	r24, Y
    4bf2:	88 0f       	add	r24, r24
    4bf4:	80 93 e1 17 	sts	0x17E1, r24	; 0x8017e1 <_twiMessageBuffer>
    4bf8:	ff 20       	and	r15, r15
    4bfa:	89 f0       	breq	.+34     	; 0x4c1e <twiTransmit+0x72>
    4bfc:	f8 01       	movw	r30, r16
    4bfe:	a2 ee       	ldi	r26, 0xE2	; 226
    4c00:	b7 e1       	ldi	r27, 0x17	; 23
    4c02:	4f ef       	ldi	r20, 0xFF	; 255
    4c04:	4f 0d       	add	r20, r15
    4c06:	64 2f       	mov	r22, r20
    4c08:	70 e0       	ldi	r23, 0x00	; 0
    4c0a:	cb 01       	movw	r24, r22
    4c0c:	01 96       	adiw	r24, 0x01	; 1
    4c0e:	b8 01       	movw	r22, r16
    4c10:	68 0f       	add	r22, r24
    4c12:	79 1f       	adc	r23, r25
    4c14:	81 91       	ld	r24, Z+
    4c16:	8d 93       	st	X+, r24
    4c18:	e6 17       	cp	r30, r22
    4c1a:	f7 07       	cpc	r31, r23
    4c1c:	d9 f7       	brne	.-10     	; 0x4c14 <twiTransmit+0x68>
    4c1e:	88 ef       	ldi	r24, 0xF8	; 248
    4c20:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4c24:	85 ea       	ldi	r24, 0xA5	; 165
    4c26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4c2a:	84 e0       	ldi	r24, 0x04	; 4
    4c2c:	05 c0       	rjmp	.+10     	; 0x4c38 <twiTransmit+0x8c>
    4c2e:	86 e0       	ldi	r24, 0x06	; 6
    4c30:	03 c0       	rjmp	.+6      	; 0x4c38 <twiTransmit+0x8c>
    4c32:	87 e0       	ldi	r24, 0x07	; 7
    4c34:	01 c0       	rjmp	.+2      	; 0x4c38 <twiTransmit+0x8c>
    4c36:	82 e0       	ldi	r24, 0x02	; 2
    4c38:	df 91       	pop	r29
    4c3a:	cf 91       	pop	r28
    4c3c:	1f 91       	pop	r17
    4c3e:	0f 91       	pop	r16
    4c40:	ff 90       	pop	r15
    4c42:	08 95       	ret

00004c44 <twiReceive>:
    4c44:	1f 93       	push	r17
    4c46:	cf 93       	push	r28
    4c48:	df 93       	push	r29
    4c4a:	00 97       	sbiw	r24, 0x00	; 0
    4c4c:	29 f1       	breq	.+74     	; 0x4c98 <twiReceive+0x54>
    4c4e:	6b 30       	cpi	r22, 0x0B	; 11
    4c50:	28 f5       	brcc	.+74     	; 0x4c9c <twiReceive+0x58>
    4c52:	16 2f       	mov	r17, r22
    4c54:	ec 01       	movw	r28, r24
    4c56:	a6 df       	rcall	.-180    	; 0x4ba4 <twiIsBusy>
    4c58:	81 11       	cpse	r24, r1
    4c5a:	22 c0       	rjmp	.+68     	; 0x4ca0 <twiReceive+0x5c>
    4c5c:	80 91 de 17 	lds	r24, 0x17DE	; 0x8017de <_twiCurrentHandler>
    4c60:	90 91 df 17 	lds	r25, 0x17DF	; 0x8017df <_twiCurrentHandler+0x1>
    4c64:	c8 17       	cp	r28, r24
    4c66:	d9 07       	cpc	r29, r25
    4c68:	41 f0       	breq	.+16     	; 0x4c7a <twiReceive+0x36>
    4c6a:	3e df       	rcall	.-388    	; 0x4ae8 <_initTwiInterface>
    4c6c:	89 81       	ldd	r24, Y+1	; 0x01
    4c6e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4c72:	d0 93 df 17 	sts	0x17DF, r29	; 0x8017df <_twiCurrentHandler+0x1>
    4c76:	c0 93 de 17 	sts	0x17DE, r28	; 0x8017de <_twiCurrentHandler>
    4c7a:	10 93 e0 17 	sts	0x17E0, r17	; 0x8017e0 <_twiMessageLen>
    4c7e:	88 81       	ld	r24, Y
    4c80:	88 0f       	add	r24, r24
    4c82:	81 60       	ori	r24, 0x01	; 1
    4c84:	80 93 e1 17 	sts	0x17E1, r24	; 0x8017e1 <_twiMessageBuffer>
    4c88:	88 ef       	ldi	r24, 0xF8	; 248
    4c8a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4c8e:	85 ea       	ldi	r24, 0xA5	; 165
    4c90:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4c94:	85 e0       	ldi	r24, 0x05	; 5
    4c96:	05 c0       	rjmp	.+10     	; 0x4ca2 <twiReceive+0x5e>
    4c98:	86 e0       	ldi	r24, 0x06	; 6
    4c9a:	03 c0       	rjmp	.+6      	; 0x4ca2 <twiReceive+0x5e>
    4c9c:	87 e0       	ldi	r24, 0x07	; 7
    4c9e:	01 c0       	rjmp	.+2      	; 0x4ca2 <twiReceive+0x5e>
    4ca0:	82 e0       	ldi	r24, 0x02	; 2
    4ca2:	df 91       	pop	r29
    4ca4:	cf 91       	pop	r28
    4ca6:	1f 91       	pop	r17
    4ca8:	08 95       	ret

00004caa <__vector_39>:
    4caa:	1f 92       	push	r1
    4cac:	0f 92       	push	r0
    4cae:	0f b6       	in	r0, 0x3f	; 63
    4cb0:	0f 92       	push	r0
    4cb2:	11 24       	eor	r1, r1
    4cb4:	0b b6       	in	r0, 0x3b	; 59
    4cb6:	0f 92       	push	r0
    4cb8:	2f 93       	push	r18
    4cba:	3f 93       	push	r19
    4cbc:	4f 93       	push	r20
    4cbe:	5f 93       	push	r21
    4cc0:	6f 93       	push	r22
    4cc2:	7f 93       	push	r23
    4cc4:	8f 93       	push	r24
    4cc6:	9f 93       	push	r25
    4cc8:	af 93       	push	r26
    4cca:	bf 93       	push	r27
    4ccc:	ef 93       	push	r30
    4cce:	ff 93       	push	r31
    4cd0:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4cd4:	8e 2f       	mov	r24, r30
    4cd6:	90 e0       	ldi	r25, 0x00	; 0
    4cd8:	fc 01       	movw	r30, r24
    4cda:	38 97       	sbiw	r30, 0x08	; 8
    4cdc:	e1 35       	cpi	r30, 0x51	; 81
    4cde:	f1 05       	cpc	r31, r1
    4ce0:	08 f0       	brcs	.+2      	; 0x4ce4 <__vector_39+0x3a>
    4ce2:	75 c0       	rjmp	.+234    	; 0x4dce <__vector_39+0x124>
    4ce4:	88 27       	eor	r24, r24
    4ce6:	e4 58       	subi	r30, 0x84	; 132
    4ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cea:	8f 4f       	sbci	r24, 0xFF	; 255
    4cec:	c8 c2       	rjmp	.+1424   	; 0x527e <__tablejump2__>
    4cee:	10 92 dd 17 	sts	0x17DD, r1	; 0x8017dd <_index.1885>
    4cf2:	e0 91 dd 17 	lds	r30, 0x17DD	; 0x8017dd <_index.1885>
    4cf6:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <_twiMessageLen>
    4cfa:	e8 17       	cp	r30, r24
    4cfc:	70 f4       	brcc	.+28     	; 0x4d1a <__vector_39+0x70>
    4cfe:	81 e0       	ldi	r24, 0x01	; 1
    4d00:	8e 0f       	add	r24, r30
    4d02:	80 93 dd 17 	sts	0x17DD, r24	; 0x8017dd <_index.1885>
    4d06:	f0 e0       	ldi	r31, 0x00	; 0
    4d08:	ef 51       	subi	r30, 0x1F	; 31
    4d0a:	f8 4e       	sbci	r31, 0xE8	; 232
    4d0c:	80 81       	ld	r24, Z
    4d0e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4d12:	85 e8       	ldi	r24, 0x85	; 133
    4d14:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4d18:	72 c0       	rjmp	.+228    	; 0x4dfe <__vector_39+0x154>
    4d1a:	84 e9       	ldi	r24, 0x94	; 148
    4d1c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4d20:	80 91 de 17 	lds	r24, 0x17DE	; 0x8017de <_twiCurrentHandler>
    4d24:	90 91 df 17 	lds	r25, 0x17DF	; 0x8017df <_twiCurrentHandler+0x1>
    4d28:	dc 01       	movw	r26, r24
    4d2a:	12 96       	adiw	r26, 0x02	; 2
    4d2c:	ed 91       	ld	r30, X+
    4d2e:	fc 91       	ld	r31, X
    4d30:	13 97       	sbiw	r26, 0x03	; 3
    4d32:	30 97       	sbiw	r30, 0x00	; 0
    4d34:	09 f4       	brne	.+2      	; 0x4d38 <__vector_39+0x8e>
    4d36:	63 c0       	rjmp	.+198    	; 0x4dfe <__vector_39+0x154>
    4d38:	20 e0       	ldi	r18, 0x00	; 0
    4d3a:	40 e0       	ldi	r20, 0x00	; 0
    4d3c:	50 e0       	ldi	r21, 0x00	; 0
    4d3e:	64 e0       	ldi	r22, 0x04	; 4
    4d40:	19 95       	eicall
    4d42:	5d c0       	rjmp	.+186    	; 0x4dfe <__vector_39+0x154>
    4d44:	e0 91 dd 17 	lds	r30, 0x17DD	; 0x8017dd <_index.1885>
    4d48:	81 e0       	ldi	r24, 0x01	; 1
    4d4a:	8e 0f       	add	r24, r30
    4d4c:	80 93 dd 17 	sts	0x17DD, r24	; 0x8017dd <_index.1885>
    4d50:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4d54:	f0 e0       	ldi	r31, 0x00	; 0
    4d56:	ef 51       	subi	r30, 0x1F	; 31
    4d58:	f8 4e       	sbci	r31, 0xE8	; 232
    4d5a:	80 83       	st	Z, r24
    4d5c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4d60:	80 34       	cpi	r24, 0x40	; 64
    4d62:	11 f4       	brne	.+4      	; 0x4d68 <__vector_39+0xbe>
    4d64:	10 92 dd 17 	sts	0x17DD, r1	; 0x8017dd <_index.1885>
    4d68:	20 91 dd 17 	lds	r18, 0x17DD	; 0x8017dd <_index.1885>
    4d6c:	30 e0       	ldi	r19, 0x00	; 0
    4d6e:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <_twiMessageLen>
    4d72:	90 e0       	ldi	r25, 0x00	; 0
    4d74:	01 97       	sbiw	r24, 0x01	; 1
    4d76:	28 17       	cp	r18, r24
    4d78:	39 07       	cpc	r19, r25
    4d7a:	24 f4       	brge	.+8      	; 0x4d84 <__vector_39+0xda>
    4d7c:	85 ec       	ldi	r24, 0xC5	; 197
    4d7e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4d82:	3d c0       	rjmp	.+122    	; 0x4dfe <__vector_39+0x154>
    4d84:	85 e8       	ldi	r24, 0x85	; 133
    4d86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4d8a:	39 c0       	rjmp	.+114    	; 0x4dfe <__vector_39+0x154>
    4d8c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4d90:	e0 91 dd 17 	lds	r30, 0x17DD	; 0x8017dd <_index.1885>
    4d94:	f0 e0       	ldi	r31, 0x00	; 0
    4d96:	ef 51       	subi	r30, 0x1F	; 31
    4d98:	f8 4e       	sbci	r31, 0xE8	; 232
    4d9a:	80 83       	st	Z, r24
    4d9c:	84 e9       	ldi	r24, 0x94	; 148
    4d9e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4da2:	80 91 de 17 	lds	r24, 0x17DE	; 0x8017de <_twiCurrentHandler>
    4da6:	90 91 df 17 	lds	r25, 0x17DF	; 0x8017df <_twiCurrentHandler+0x1>
    4daa:	dc 01       	movw	r26, r24
    4dac:	12 96       	adiw	r26, 0x02	; 2
    4dae:	ed 91       	ld	r30, X+
    4db0:	fc 91       	ld	r31, X
    4db2:	13 97       	sbiw	r26, 0x03	; 3
    4db4:	30 97       	sbiw	r30, 0x00	; 0
    4db6:	19 f1       	breq	.+70     	; 0x4dfe <__vector_39+0x154>
    4db8:	20 91 e0 17 	lds	r18, 0x17E0	; 0x8017e0 <_twiMessageLen>
    4dbc:	41 ee       	ldi	r20, 0xE1	; 225
    4dbe:	57 e1       	ldi	r21, 0x17	; 23
    4dc0:	65 e0       	ldi	r22, 0x05	; 5
    4dc2:	19 95       	eicall
    4dc4:	1c c0       	rjmp	.+56     	; 0x4dfe <__vector_39+0x154>
    4dc6:	85 ea       	ldi	r24, 0xA5	; 165
    4dc8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4dcc:	18 c0       	rjmp	.+48     	; 0x4dfe <__vector_39+0x154>
    4dce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4dd2:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4dd6:	84 e0       	ldi	r24, 0x04	; 4
    4dd8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4ddc:	80 91 de 17 	lds	r24, 0x17DE	; 0x8017de <_twiCurrentHandler>
    4de0:	90 91 df 17 	lds	r25, 0x17DF	; 0x8017df <_twiCurrentHandler+0x1>
    4de4:	dc 01       	movw	r26, r24
    4de6:	12 96       	adiw	r26, 0x02	; 2
    4de8:	ed 91       	ld	r30, X+
    4dea:	fc 91       	ld	r31, X
    4dec:	13 97       	sbiw	r26, 0x03	; 3
    4dee:	30 97       	sbiw	r30, 0x00	; 0
    4df0:	31 f0       	breq	.+12     	; 0x4dfe <__vector_39+0x154>
    4df2:	20 e0       	ldi	r18, 0x00	; 0
    4df4:	40 e0       	ldi	r20, 0x00	; 0
    4df6:	50 e0       	ldi	r21, 0x00	; 0
    4df8:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    4dfc:	19 95       	eicall
    4dfe:	ff 91       	pop	r31
    4e00:	ef 91       	pop	r30
    4e02:	bf 91       	pop	r27
    4e04:	af 91       	pop	r26
    4e06:	9f 91       	pop	r25
    4e08:	8f 91       	pop	r24
    4e0a:	7f 91       	pop	r23
    4e0c:	6f 91       	pop	r22
    4e0e:	5f 91       	pop	r21
    4e10:	4f 91       	pop	r20
    4e12:	3f 91       	pop	r19
    4e14:	2f 91       	pop	r18
    4e16:	0f 90       	pop	r0
    4e18:	0b be       	out	0x3b, r0	; 59
    4e1a:	0f 90       	pop	r0
    4e1c:	0f be       	out	0x3f, r0	; 63
    4e1e:	0f 90       	pop	r0
    4e20:	1f 90       	pop	r1
    4e22:	18 95       	reti

00004e24 <fifo_init>:
    4e24:	fc 01       	movw	r30, r24
    4e26:	41 11       	cpse	r20, r1
    4e28:	01 c0       	rjmp	.+2      	; 0x4e2c <fifo_init+0x8>
    4e2a:	52 d3       	rcall	.+1700   	; 0x54d0 <abort>
    4e2c:	84 2f       	mov	r24, r20
    4e2e:	90 e0       	ldi	r25, 0x00	; 0
    4e30:	9c 01       	movw	r18, r24
    4e32:	21 50       	subi	r18, 0x01	; 1
    4e34:	31 09       	sbc	r19, r1
    4e36:	82 23       	and	r24, r18
    4e38:	93 23       	and	r25, r19
    4e3a:	89 2b       	or	r24, r25
    4e3c:	09 f0       	breq	.+2      	; 0x4e40 <fifo_init+0x1c>
    4e3e:	48 d3       	rcall	.+1680   	; 0x54d0 <abort>
    4e40:	41 38       	cpi	r20, 0x81	; 129
    4e42:	08 f0       	brcs	.+2      	; 0x4e46 <fifo_init+0x22>
    4e44:	45 d3       	rcall	.+1674   	; 0x54d0 <abort>
    4e46:	12 82       	std	Z+2, r1	; 0x02
    4e48:	13 82       	std	Z+3, r1	; 0x03
    4e4a:	44 83       	std	Z+4, r20	; 0x04
    4e4c:	44 0f       	add	r20, r20
    4e4e:	41 50       	subi	r20, 0x01	; 1
    4e50:	45 83       	std	Z+5, r20	; 0x05
    4e52:	71 83       	std	Z+1, r23	; 0x01
    4e54:	60 83       	st	Z, r22
    4e56:	80 e0       	ldi	r24, 0x00	; 0
    4e58:	90 e0       	ldi	r25, 0x00	; 0
    4e5a:	08 95       	ret

00004e5c <__subsf3>:
    4e5c:	50 58       	subi	r21, 0x80	; 128

00004e5e <__addsf3>:
    4e5e:	bb 27       	eor	r27, r27
    4e60:	aa 27       	eor	r26, r26
    4e62:	0e d0       	rcall	.+28     	; 0x4e80 <__addsf3x>
    4e64:	4d c1       	rjmp	.+666    	; 0x5100 <__fp_round>
    4e66:	3e d1       	rcall	.+636    	; 0x50e4 <__fp_pscA>
    4e68:	30 f0       	brcs	.+12     	; 0x4e76 <__addsf3+0x18>
    4e6a:	43 d1       	rcall	.+646    	; 0x50f2 <__fp_pscB>
    4e6c:	20 f0       	brcs	.+8      	; 0x4e76 <__addsf3+0x18>
    4e6e:	31 f4       	brne	.+12     	; 0x4e7c <__addsf3+0x1e>
    4e70:	9f 3f       	cpi	r25, 0xFF	; 255
    4e72:	11 f4       	brne	.+4      	; 0x4e78 <__addsf3+0x1a>
    4e74:	1e f4       	brtc	.+6      	; 0x4e7c <__addsf3+0x1e>
    4e76:	33 c1       	rjmp	.+614    	; 0x50de <__fp_nan>
    4e78:	0e f4       	brtc	.+2      	; 0x4e7c <__addsf3+0x1e>
    4e7a:	e0 95       	com	r30
    4e7c:	e7 fb       	bst	r30, 7
    4e7e:	29 c1       	rjmp	.+594    	; 0x50d2 <__fp_inf>

00004e80 <__addsf3x>:
    4e80:	e9 2f       	mov	r30, r25
    4e82:	4f d1       	rcall	.+670    	; 0x5122 <__fp_split3>
    4e84:	80 f3       	brcs	.-32     	; 0x4e66 <__addsf3+0x8>
    4e86:	ba 17       	cp	r27, r26
    4e88:	62 07       	cpc	r22, r18
    4e8a:	73 07       	cpc	r23, r19
    4e8c:	84 07       	cpc	r24, r20
    4e8e:	95 07       	cpc	r25, r21
    4e90:	18 f0       	brcs	.+6      	; 0x4e98 <__addsf3x+0x18>
    4e92:	71 f4       	brne	.+28     	; 0x4eb0 <__addsf3x+0x30>
    4e94:	9e f5       	brtc	.+102    	; 0x4efc <__addsf3x+0x7c>
    4e96:	67 c1       	rjmp	.+718    	; 0x5166 <__fp_zero>
    4e98:	0e f4       	brtc	.+2      	; 0x4e9c <__addsf3x+0x1c>
    4e9a:	e0 95       	com	r30
    4e9c:	0b 2e       	mov	r0, r27
    4e9e:	ba 2f       	mov	r27, r26
    4ea0:	a0 2d       	mov	r26, r0
    4ea2:	0b 01       	movw	r0, r22
    4ea4:	b9 01       	movw	r22, r18
    4ea6:	90 01       	movw	r18, r0
    4ea8:	0c 01       	movw	r0, r24
    4eaa:	ca 01       	movw	r24, r20
    4eac:	a0 01       	movw	r20, r0
    4eae:	11 24       	eor	r1, r1
    4eb0:	ff 27       	eor	r31, r31
    4eb2:	59 1b       	sub	r21, r25
    4eb4:	99 f0       	breq	.+38     	; 0x4edc <__addsf3x+0x5c>
    4eb6:	59 3f       	cpi	r21, 0xF9	; 249
    4eb8:	50 f4       	brcc	.+20     	; 0x4ece <__addsf3x+0x4e>
    4eba:	50 3e       	cpi	r21, 0xE0	; 224
    4ebc:	68 f1       	brcs	.+90     	; 0x4f18 <__addsf3x+0x98>
    4ebe:	1a 16       	cp	r1, r26
    4ec0:	f0 40       	sbci	r31, 0x00	; 0
    4ec2:	a2 2f       	mov	r26, r18
    4ec4:	23 2f       	mov	r18, r19
    4ec6:	34 2f       	mov	r19, r20
    4ec8:	44 27       	eor	r20, r20
    4eca:	58 5f       	subi	r21, 0xF8	; 248
    4ecc:	f3 cf       	rjmp	.-26     	; 0x4eb4 <__addsf3x+0x34>
    4ece:	46 95       	lsr	r20
    4ed0:	37 95       	ror	r19
    4ed2:	27 95       	ror	r18
    4ed4:	a7 95       	ror	r26
    4ed6:	f0 40       	sbci	r31, 0x00	; 0
    4ed8:	53 95       	inc	r21
    4eda:	c9 f7       	brne	.-14     	; 0x4ece <__addsf3x+0x4e>
    4edc:	7e f4       	brtc	.+30     	; 0x4efc <__addsf3x+0x7c>
    4ede:	1f 16       	cp	r1, r31
    4ee0:	ba 0b       	sbc	r27, r26
    4ee2:	62 0b       	sbc	r22, r18
    4ee4:	73 0b       	sbc	r23, r19
    4ee6:	84 0b       	sbc	r24, r20
    4ee8:	ba f0       	brmi	.+46     	; 0x4f18 <__addsf3x+0x98>
    4eea:	91 50       	subi	r25, 0x01	; 1
    4eec:	a1 f0       	breq	.+40     	; 0x4f16 <__addsf3x+0x96>
    4eee:	ff 0f       	add	r31, r31
    4ef0:	bb 1f       	adc	r27, r27
    4ef2:	66 1f       	adc	r22, r22
    4ef4:	77 1f       	adc	r23, r23
    4ef6:	88 1f       	adc	r24, r24
    4ef8:	c2 f7       	brpl	.-16     	; 0x4eea <__addsf3x+0x6a>
    4efa:	0e c0       	rjmp	.+28     	; 0x4f18 <__addsf3x+0x98>
    4efc:	ba 0f       	add	r27, r26
    4efe:	62 1f       	adc	r22, r18
    4f00:	73 1f       	adc	r23, r19
    4f02:	84 1f       	adc	r24, r20
    4f04:	48 f4       	brcc	.+18     	; 0x4f18 <__addsf3x+0x98>
    4f06:	87 95       	ror	r24
    4f08:	77 95       	ror	r23
    4f0a:	67 95       	ror	r22
    4f0c:	b7 95       	ror	r27
    4f0e:	f7 95       	ror	r31
    4f10:	9e 3f       	cpi	r25, 0xFE	; 254
    4f12:	08 f0       	brcs	.+2      	; 0x4f16 <__addsf3x+0x96>
    4f14:	b3 cf       	rjmp	.-154    	; 0x4e7c <__addsf3+0x1e>
    4f16:	93 95       	inc	r25
    4f18:	88 0f       	add	r24, r24
    4f1a:	08 f0       	brcs	.+2      	; 0x4f1e <__addsf3x+0x9e>
    4f1c:	99 27       	eor	r25, r25
    4f1e:	ee 0f       	add	r30, r30
    4f20:	97 95       	ror	r25
    4f22:	87 95       	ror	r24
    4f24:	08 95       	ret

00004f26 <__divsf3>:
    4f26:	0c d0       	rcall	.+24     	; 0x4f40 <__divsf3x>
    4f28:	eb c0       	rjmp	.+470    	; 0x5100 <__fp_round>
    4f2a:	e3 d0       	rcall	.+454    	; 0x50f2 <__fp_pscB>
    4f2c:	40 f0       	brcs	.+16     	; 0x4f3e <__divsf3+0x18>
    4f2e:	da d0       	rcall	.+436    	; 0x50e4 <__fp_pscA>
    4f30:	30 f0       	brcs	.+12     	; 0x4f3e <__divsf3+0x18>
    4f32:	21 f4       	brne	.+8      	; 0x4f3c <__divsf3+0x16>
    4f34:	5f 3f       	cpi	r21, 0xFF	; 255
    4f36:	19 f0       	breq	.+6      	; 0x4f3e <__divsf3+0x18>
    4f38:	cc c0       	rjmp	.+408    	; 0x50d2 <__fp_inf>
    4f3a:	51 11       	cpse	r21, r1
    4f3c:	15 c1       	rjmp	.+554    	; 0x5168 <__fp_szero>
    4f3e:	cf c0       	rjmp	.+414    	; 0x50de <__fp_nan>

00004f40 <__divsf3x>:
    4f40:	f0 d0       	rcall	.+480    	; 0x5122 <__fp_split3>
    4f42:	98 f3       	brcs	.-26     	; 0x4f2a <__divsf3+0x4>

00004f44 <__divsf3_pse>:
    4f44:	99 23       	and	r25, r25
    4f46:	c9 f3       	breq	.-14     	; 0x4f3a <__divsf3+0x14>
    4f48:	55 23       	and	r21, r21
    4f4a:	b1 f3       	breq	.-20     	; 0x4f38 <__divsf3+0x12>
    4f4c:	95 1b       	sub	r25, r21
    4f4e:	55 0b       	sbc	r21, r21
    4f50:	bb 27       	eor	r27, r27
    4f52:	aa 27       	eor	r26, r26
    4f54:	62 17       	cp	r22, r18
    4f56:	73 07       	cpc	r23, r19
    4f58:	84 07       	cpc	r24, r20
    4f5a:	38 f0       	brcs	.+14     	; 0x4f6a <__divsf3_pse+0x26>
    4f5c:	9f 5f       	subi	r25, 0xFF	; 255
    4f5e:	5f 4f       	sbci	r21, 0xFF	; 255
    4f60:	22 0f       	add	r18, r18
    4f62:	33 1f       	adc	r19, r19
    4f64:	44 1f       	adc	r20, r20
    4f66:	aa 1f       	adc	r26, r26
    4f68:	a9 f3       	breq	.-22     	; 0x4f54 <__divsf3_pse+0x10>
    4f6a:	33 d0       	rcall	.+102    	; 0x4fd2 <__divsf3_pse+0x8e>
    4f6c:	0e 2e       	mov	r0, r30
    4f6e:	3a f0       	brmi	.+14     	; 0x4f7e <__divsf3_pse+0x3a>
    4f70:	e0 e8       	ldi	r30, 0x80	; 128
    4f72:	30 d0       	rcall	.+96     	; 0x4fd4 <__divsf3_pse+0x90>
    4f74:	91 50       	subi	r25, 0x01	; 1
    4f76:	50 40       	sbci	r21, 0x00	; 0
    4f78:	e6 95       	lsr	r30
    4f7a:	00 1c       	adc	r0, r0
    4f7c:	ca f7       	brpl	.-14     	; 0x4f70 <__divsf3_pse+0x2c>
    4f7e:	29 d0       	rcall	.+82     	; 0x4fd2 <__divsf3_pse+0x8e>
    4f80:	fe 2f       	mov	r31, r30
    4f82:	27 d0       	rcall	.+78     	; 0x4fd2 <__divsf3_pse+0x8e>
    4f84:	66 0f       	add	r22, r22
    4f86:	77 1f       	adc	r23, r23
    4f88:	88 1f       	adc	r24, r24
    4f8a:	bb 1f       	adc	r27, r27
    4f8c:	26 17       	cp	r18, r22
    4f8e:	37 07       	cpc	r19, r23
    4f90:	48 07       	cpc	r20, r24
    4f92:	ab 07       	cpc	r26, r27
    4f94:	b0 e8       	ldi	r27, 0x80	; 128
    4f96:	09 f0       	breq	.+2      	; 0x4f9a <__divsf3_pse+0x56>
    4f98:	bb 0b       	sbc	r27, r27
    4f9a:	80 2d       	mov	r24, r0
    4f9c:	bf 01       	movw	r22, r30
    4f9e:	ff 27       	eor	r31, r31
    4fa0:	93 58       	subi	r25, 0x83	; 131
    4fa2:	5f 4f       	sbci	r21, 0xFF	; 255
    4fa4:	2a f0       	brmi	.+10     	; 0x4fb0 <__divsf3_pse+0x6c>
    4fa6:	9e 3f       	cpi	r25, 0xFE	; 254
    4fa8:	51 05       	cpc	r21, r1
    4faa:	68 f0       	brcs	.+26     	; 0x4fc6 <__divsf3_pse+0x82>
    4fac:	92 c0       	rjmp	.+292    	; 0x50d2 <__fp_inf>
    4fae:	dc c0       	rjmp	.+440    	; 0x5168 <__fp_szero>
    4fb0:	5f 3f       	cpi	r21, 0xFF	; 255
    4fb2:	ec f3       	brlt	.-6      	; 0x4fae <__divsf3_pse+0x6a>
    4fb4:	98 3e       	cpi	r25, 0xE8	; 232
    4fb6:	dc f3       	brlt	.-10     	; 0x4fae <__divsf3_pse+0x6a>
    4fb8:	86 95       	lsr	r24
    4fba:	77 95       	ror	r23
    4fbc:	67 95       	ror	r22
    4fbe:	b7 95       	ror	r27
    4fc0:	f7 95       	ror	r31
    4fc2:	9f 5f       	subi	r25, 0xFF	; 255
    4fc4:	c9 f7       	brne	.-14     	; 0x4fb8 <__divsf3_pse+0x74>
    4fc6:	88 0f       	add	r24, r24
    4fc8:	91 1d       	adc	r25, r1
    4fca:	96 95       	lsr	r25
    4fcc:	87 95       	ror	r24
    4fce:	97 f9       	bld	r25, 7
    4fd0:	08 95       	ret
    4fd2:	e1 e0       	ldi	r30, 0x01	; 1
    4fd4:	66 0f       	add	r22, r22
    4fd6:	77 1f       	adc	r23, r23
    4fd8:	88 1f       	adc	r24, r24
    4fda:	bb 1f       	adc	r27, r27
    4fdc:	62 17       	cp	r22, r18
    4fde:	73 07       	cpc	r23, r19
    4fe0:	84 07       	cpc	r24, r20
    4fe2:	ba 07       	cpc	r27, r26
    4fe4:	20 f0       	brcs	.+8      	; 0x4fee <__divsf3_pse+0xaa>
    4fe6:	62 1b       	sub	r22, r18
    4fe8:	73 0b       	sbc	r23, r19
    4fea:	84 0b       	sbc	r24, r20
    4fec:	ba 0b       	sbc	r27, r26
    4fee:	ee 1f       	adc	r30, r30
    4ff0:	88 f7       	brcc	.-30     	; 0x4fd4 <__divsf3_pse+0x90>
    4ff2:	e0 95       	com	r30
    4ff4:	08 95       	ret

00004ff6 <__fixsfsi>:
    4ff6:	04 d0       	rcall	.+8      	; 0x5000 <__fixunssfsi>
    4ff8:	68 94       	set
    4ffa:	b1 11       	cpse	r27, r1
    4ffc:	b5 c0       	rjmp	.+362    	; 0x5168 <__fp_szero>
    4ffe:	08 95       	ret

00005000 <__fixunssfsi>:
    5000:	98 d0       	rcall	.+304    	; 0x5132 <__fp_splitA>
    5002:	88 f0       	brcs	.+34     	; 0x5026 <__fixunssfsi+0x26>
    5004:	9f 57       	subi	r25, 0x7F	; 127
    5006:	90 f0       	brcs	.+36     	; 0x502c <__fixunssfsi+0x2c>
    5008:	b9 2f       	mov	r27, r25
    500a:	99 27       	eor	r25, r25
    500c:	b7 51       	subi	r27, 0x17	; 23
    500e:	a0 f0       	brcs	.+40     	; 0x5038 <__fixunssfsi+0x38>
    5010:	d1 f0       	breq	.+52     	; 0x5046 <__fixunssfsi+0x46>
    5012:	66 0f       	add	r22, r22
    5014:	77 1f       	adc	r23, r23
    5016:	88 1f       	adc	r24, r24
    5018:	99 1f       	adc	r25, r25
    501a:	1a f0       	brmi	.+6      	; 0x5022 <__fixunssfsi+0x22>
    501c:	ba 95       	dec	r27
    501e:	c9 f7       	brne	.-14     	; 0x5012 <__fixunssfsi+0x12>
    5020:	12 c0       	rjmp	.+36     	; 0x5046 <__fixunssfsi+0x46>
    5022:	b1 30       	cpi	r27, 0x01	; 1
    5024:	81 f0       	breq	.+32     	; 0x5046 <__fixunssfsi+0x46>
    5026:	9f d0       	rcall	.+318    	; 0x5166 <__fp_zero>
    5028:	b1 e0       	ldi	r27, 0x01	; 1
    502a:	08 95       	ret
    502c:	9c c0       	rjmp	.+312    	; 0x5166 <__fp_zero>
    502e:	67 2f       	mov	r22, r23
    5030:	78 2f       	mov	r23, r24
    5032:	88 27       	eor	r24, r24
    5034:	b8 5f       	subi	r27, 0xF8	; 248
    5036:	39 f0       	breq	.+14     	; 0x5046 <__fixunssfsi+0x46>
    5038:	b9 3f       	cpi	r27, 0xF9	; 249
    503a:	cc f3       	brlt	.-14     	; 0x502e <__fixunssfsi+0x2e>
    503c:	86 95       	lsr	r24
    503e:	77 95       	ror	r23
    5040:	67 95       	ror	r22
    5042:	b3 95       	inc	r27
    5044:	d9 f7       	brne	.-10     	; 0x503c <__fixunssfsi+0x3c>
    5046:	3e f4       	brtc	.+14     	; 0x5056 <__fixunssfsi+0x56>
    5048:	90 95       	com	r25
    504a:	80 95       	com	r24
    504c:	70 95       	com	r23
    504e:	61 95       	neg	r22
    5050:	7f 4f       	sbci	r23, 0xFF	; 255
    5052:	8f 4f       	sbci	r24, 0xFF	; 255
    5054:	9f 4f       	sbci	r25, 0xFF	; 255
    5056:	08 95       	ret

00005058 <__floatunsisf>:
    5058:	e8 94       	clt
    505a:	09 c0       	rjmp	.+18     	; 0x506e <__floatsisf+0x12>

0000505c <__floatsisf>:
    505c:	97 fb       	bst	r25, 7
    505e:	3e f4       	brtc	.+14     	; 0x506e <__floatsisf+0x12>
    5060:	90 95       	com	r25
    5062:	80 95       	com	r24
    5064:	70 95       	com	r23
    5066:	61 95       	neg	r22
    5068:	7f 4f       	sbci	r23, 0xFF	; 255
    506a:	8f 4f       	sbci	r24, 0xFF	; 255
    506c:	9f 4f       	sbci	r25, 0xFF	; 255
    506e:	99 23       	and	r25, r25
    5070:	a9 f0       	breq	.+42     	; 0x509c <__floatsisf+0x40>
    5072:	f9 2f       	mov	r31, r25
    5074:	96 e9       	ldi	r25, 0x96	; 150
    5076:	bb 27       	eor	r27, r27
    5078:	93 95       	inc	r25
    507a:	f6 95       	lsr	r31
    507c:	87 95       	ror	r24
    507e:	77 95       	ror	r23
    5080:	67 95       	ror	r22
    5082:	b7 95       	ror	r27
    5084:	f1 11       	cpse	r31, r1
    5086:	f8 cf       	rjmp	.-16     	; 0x5078 <__floatsisf+0x1c>
    5088:	fa f4       	brpl	.+62     	; 0x50c8 <__floatsisf+0x6c>
    508a:	bb 0f       	add	r27, r27
    508c:	11 f4       	brne	.+4      	; 0x5092 <__floatsisf+0x36>
    508e:	60 ff       	sbrs	r22, 0
    5090:	1b c0       	rjmp	.+54     	; 0x50c8 <__floatsisf+0x6c>
    5092:	6f 5f       	subi	r22, 0xFF	; 255
    5094:	7f 4f       	sbci	r23, 0xFF	; 255
    5096:	8f 4f       	sbci	r24, 0xFF	; 255
    5098:	9f 4f       	sbci	r25, 0xFF	; 255
    509a:	16 c0       	rjmp	.+44     	; 0x50c8 <__floatsisf+0x6c>
    509c:	88 23       	and	r24, r24
    509e:	11 f0       	breq	.+4      	; 0x50a4 <__floatsisf+0x48>
    50a0:	96 e9       	ldi	r25, 0x96	; 150
    50a2:	11 c0       	rjmp	.+34     	; 0x50c6 <__floatsisf+0x6a>
    50a4:	77 23       	and	r23, r23
    50a6:	21 f0       	breq	.+8      	; 0x50b0 <__floatsisf+0x54>
    50a8:	9e e8       	ldi	r25, 0x8E	; 142
    50aa:	87 2f       	mov	r24, r23
    50ac:	76 2f       	mov	r23, r22
    50ae:	05 c0       	rjmp	.+10     	; 0x50ba <__floatsisf+0x5e>
    50b0:	66 23       	and	r22, r22
    50b2:	71 f0       	breq	.+28     	; 0x50d0 <__floatsisf+0x74>
    50b4:	96 e8       	ldi	r25, 0x86	; 134
    50b6:	86 2f       	mov	r24, r22
    50b8:	70 e0       	ldi	r23, 0x00	; 0
    50ba:	60 e0       	ldi	r22, 0x00	; 0
    50bc:	2a f0       	brmi	.+10     	; 0x50c8 <__floatsisf+0x6c>
    50be:	9a 95       	dec	r25
    50c0:	66 0f       	add	r22, r22
    50c2:	77 1f       	adc	r23, r23
    50c4:	88 1f       	adc	r24, r24
    50c6:	da f7       	brpl	.-10     	; 0x50be <__floatsisf+0x62>
    50c8:	88 0f       	add	r24, r24
    50ca:	96 95       	lsr	r25
    50cc:	87 95       	ror	r24
    50ce:	97 f9       	bld	r25, 7
    50d0:	08 95       	ret

000050d2 <__fp_inf>:
    50d2:	97 f9       	bld	r25, 7
    50d4:	9f 67       	ori	r25, 0x7F	; 127
    50d6:	80 e8       	ldi	r24, 0x80	; 128
    50d8:	70 e0       	ldi	r23, 0x00	; 0
    50da:	60 e0       	ldi	r22, 0x00	; 0
    50dc:	08 95       	ret

000050de <__fp_nan>:
    50de:	9f ef       	ldi	r25, 0xFF	; 255
    50e0:	80 ec       	ldi	r24, 0xC0	; 192
    50e2:	08 95       	ret

000050e4 <__fp_pscA>:
    50e4:	00 24       	eor	r0, r0
    50e6:	0a 94       	dec	r0
    50e8:	16 16       	cp	r1, r22
    50ea:	17 06       	cpc	r1, r23
    50ec:	18 06       	cpc	r1, r24
    50ee:	09 06       	cpc	r0, r25
    50f0:	08 95       	ret

000050f2 <__fp_pscB>:
    50f2:	00 24       	eor	r0, r0
    50f4:	0a 94       	dec	r0
    50f6:	12 16       	cp	r1, r18
    50f8:	13 06       	cpc	r1, r19
    50fa:	14 06       	cpc	r1, r20
    50fc:	05 06       	cpc	r0, r21
    50fe:	08 95       	ret

00005100 <__fp_round>:
    5100:	09 2e       	mov	r0, r25
    5102:	03 94       	inc	r0
    5104:	00 0c       	add	r0, r0
    5106:	11 f4       	brne	.+4      	; 0x510c <__fp_round+0xc>
    5108:	88 23       	and	r24, r24
    510a:	52 f0       	brmi	.+20     	; 0x5120 <__fp_round+0x20>
    510c:	bb 0f       	add	r27, r27
    510e:	40 f4       	brcc	.+16     	; 0x5120 <__fp_round+0x20>
    5110:	bf 2b       	or	r27, r31
    5112:	11 f4       	brne	.+4      	; 0x5118 <__fp_round+0x18>
    5114:	60 ff       	sbrs	r22, 0
    5116:	04 c0       	rjmp	.+8      	; 0x5120 <__fp_round+0x20>
    5118:	6f 5f       	subi	r22, 0xFF	; 255
    511a:	7f 4f       	sbci	r23, 0xFF	; 255
    511c:	8f 4f       	sbci	r24, 0xFF	; 255
    511e:	9f 4f       	sbci	r25, 0xFF	; 255
    5120:	08 95       	ret

00005122 <__fp_split3>:
    5122:	57 fd       	sbrc	r21, 7
    5124:	90 58       	subi	r25, 0x80	; 128
    5126:	44 0f       	add	r20, r20
    5128:	55 1f       	adc	r21, r21
    512a:	59 f0       	breq	.+22     	; 0x5142 <__fp_splitA+0x10>
    512c:	5f 3f       	cpi	r21, 0xFF	; 255
    512e:	71 f0       	breq	.+28     	; 0x514c <__fp_splitA+0x1a>
    5130:	47 95       	ror	r20

00005132 <__fp_splitA>:
    5132:	88 0f       	add	r24, r24
    5134:	97 fb       	bst	r25, 7
    5136:	99 1f       	adc	r25, r25
    5138:	61 f0       	breq	.+24     	; 0x5152 <__fp_splitA+0x20>
    513a:	9f 3f       	cpi	r25, 0xFF	; 255
    513c:	79 f0       	breq	.+30     	; 0x515c <__fp_splitA+0x2a>
    513e:	87 95       	ror	r24
    5140:	08 95       	ret
    5142:	12 16       	cp	r1, r18
    5144:	13 06       	cpc	r1, r19
    5146:	14 06       	cpc	r1, r20
    5148:	55 1f       	adc	r21, r21
    514a:	f2 cf       	rjmp	.-28     	; 0x5130 <__fp_split3+0xe>
    514c:	46 95       	lsr	r20
    514e:	f1 df       	rcall	.-30     	; 0x5132 <__fp_splitA>
    5150:	08 c0       	rjmp	.+16     	; 0x5162 <__fp_splitA+0x30>
    5152:	16 16       	cp	r1, r22
    5154:	17 06       	cpc	r1, r23
    5156:	18 06       	cpc	r1, r24
    5158:	99 1f       	adc	r25, r25
    515a:	f1 cf       	rjmp	.-30     	; 0x513e <__fp_splitA+0xc>
    515c:	86 95       	lsr	r24
    515e:	71 05       	cpc	r23, r1
    5160:	61 05       	cpc	r22, r1
    5162:	08 94       	sec
    5164:	08 95       	ret

00005166 <__fp_zero>:
    5166:	e8 94       	clt

00005168 <__fp_szero>:
    5168:	bb 27       	eor	r27, r27
    516a:	66 27       	eor	r22, r22
    516c:	77 27       	eor	r23, r23
    516e:	cb 01       	movw	r24, r22
    5170:	97 f9       	bld	r25, 7
    5172:	08 95       	ret

00005174 <__mulsf3>:
    5174:	0b d0       	rcall	.+22     	; 0x518c <__mulsf3x>
    5176:	c4 cf       	rjmp	.-120    	; 0x5100 <__fp_round>
    5178:	b5 df       	rcall	.-150    	; 0x50e4 <__fp_pscA>
    517a:	28 f0       	brcs	.+10     	; 0x5186 <__mulsf3+0x12>
    517c:	ba df       	rcall	.-140    	; 0x50f2 <__fp_pscB>
    517e:	18 f0       	brcs	.+6      	; 0x5186 <__mulsf3+0x12>
    5180:	95 23       	and	r25, r21
    5182:	09 f0       	breq	.+2      	; 0x5186 <__mulsf3+0x12>
    5184:	a6 cf       	rjmp	.-180    	; 0x50d2 <__fp_inf>
    5186:	ab cf       	rjmp	.-170    	; 0x50de <__fp_nan>
    5188:	11 24       	eor	r1, r1
    518a:	ee cf       	rjmp	.-36     	; 0x5168 <__fp_szero>

0000518c <__mulsf3x>:
    518c:	ca df       	rcall	.-108    	; 0x5122 <__fp_split3>
    518e:	a0 f3       	brcs	.-24     	; 0x5178 <__mulsf3+0x4>

00005190 <__mulsf3_pse>:
    5190:	95 9f       	mul	r25, r21
    5192:	d1 f3       	breq	.-12     	; 0x5188 <__mulsf3+0x14>
    5194:	95 0f       	add	r25, r21
    5196:	50 e0       	ldi	r21, 0x00	; 0
    5198:	55 1f       	adc	r21, r21
    519a:	62 9f       	mul	r22, r18
    519c:	f0 01       	movw	r30, r0
    519e:	72 9f       	mul	r23, r18
    51a0:	bb 27       	eor	r27, r27
    51a2:	f0 0d       	add	r31, r0
    51a4:	b1 1d       	adc	r27, r1
    51a6:	63 9f       	mul	r22, r19
    51a8:	aa 27       	eor	r26, r26
    51aa:	f0 0d       	add	r31, r0
    51ac:	b1 1d       	adc	r27, r1
    51ae:	aa 1f       	adc	r26, r26
    51b0:	64 9f       	mul	r22, r20
    51b2:	66 27       	eor	r22, r22
    51b4:	b0 0d       	add	r27, r0
    51b6:	a1 1d       	adc	r26, r1
    51b8:	66 1f       	adc	r22, r22
    51ba:	82 9f       	mul	r24, r18
    51bc:	22 27       	eor	r18, r18
    51be:	b0 0d       	add	r27, r0
    51c0:	a1 1d       	adc	r26, r1
    51c2:	62 1f       	adc	r22, r18
    51c4:	73 9f       	mul	r23, r19
    51c6:	b0 0d       	add	r27, r0
    51c8:	a1 1d       	adc	r26, r1
    51ca:	62 1f       	adc	r22, r18
    51cc:	83 9f       	mul	r24, r19
    51ce:	a0 0d       	add	r26, r0
    51d0:	61 1d       	adc	r22, r1
    51d2:	22 1f       	adc	r18, r18
    51d4:	74 9f       	mul	r23, r20
    51d6:	33 27       	eor	r19, r19
    51d8:	a0 0d       	add	r26, r0
    51da:	61 1d       	adc	r22, r1
    51dc:	23 1f       	adc	r18, r19
    51de:	84 9f       	mul	r24, r20
    51e0:	60 0d       	add	r22, r0
    51e2:	21 1d       	adc	r18, r1
    51e4:	82 2f       	mov	r24, r18
    51e6:	76 2f       	mov	r23, r22
    51e8:	6a 2f       	mov	r22, r26
    51ea:	11 24       	eor	r1, r1
    51ec:	9f 57       	subi	r25, 0x7F	; 127
    51ee:	50 40       	sbci	r21, 0x00	; 0
    51f0:	8a f0       	brmi	.+34     	; 0x5214 <__mulsf3_pse+0x84>
    51f2:	e1 f0       	breq	.+56     	; 0x522c <__mulsf3_pse+0x9c>
    51f4:	88 23       	and	r24, r24
    51f6:	4a f0       	brmi	.+18     	; 0x520a <__mulsf3_pse+0x7a>
    51f8:	ee 0f       	add	r30, r30
    51fa:	ff 1f       	adc	r31, r31
    51fc:	bb 1f       	adc	r27, r27
    51fe:	66 1f       	adc	r22, r22
    5200:	77 1f       	adc	r23, r23
    5202:	88 1f       	adc	r24, r24
    5204:	91 50       	subi	r25, 0x01	; 1
    5206:	50 40       	sbci	r21, 0x00	; 0
    5208:	a9 f7       	brne	.-22     	; 0x51f4 <__mulsf3_pse+0x64>
    520a:	9e 3f       	cpi	r25, 0xFE	; 254
    520c:	51 05       	cpc	r21, r1
    520e:	70 f0       	brcs	.+28     	; 0x522c <__mulsf3_pse+0x9c>
    5210:	60 cf       	rjmp	.-320    	; 0x50d2 <__fp_inf>
    5212:	aa cf       	rjmp	.-172    	; 0x5168 <__fp_szero>
    5214:	5f 3f       	cpi	r21, 0xFF	; 255
    5216:	ec f3       	brlt	.-6      	; 0x5212 <__mulsf3_pse+0x82>
    5218:	98 3e       	cpi	r25, 0xE8	; 232
    521a:	dc f3       	brlt	.-10     	; 0x5212 <__mulsf3_pse+0x82>
    521c:	86 95       	lsr	r24
    521e:	77 95       	ror	r23
    5220:	67 95       	ror	r22
    5222:	b7 95       	ror	r27
    5224:	f7 95       	ror	r31
    5226:	e7 95       	ror	r30
    5228:	9f 5f       	subi	r25, 0xFF	; 255
    522a:	c1 f7       	brne	.-16     	; 0x521c <__mulsf3_pse+0x8c>
    522c:	fe 2b       	or	r31, r30
    522e:	88 0f       	add	r24, r24
    5230:	91 1d       	adc	r25, r1
    5232:	96 95       	lsr	r25
    5234:	87 95       	ror	r24
    5236:	97 f9       	bld	r25, 7
    5238:	08 95       	ret

0000523a <__udivmodsi4>:
    523a:	a1 e2       	ldi	r26, 0x21	; 33
    523c:	1a 2e       	mov	r1, r26
    523e:	aa 1b       	sub	r26, r26
    5240:	bb 1b       	sub	r27, r27
    5242:	fd 01       	movw	r30, r26
    5244:	0d c0       	rjmp	.+26     	; 0x5260 <__udivmodsi4_ep>

00005246 <__udivmodsi4_loop>:
    5246:	aa 1f       	adc	r26, r26
    5248:	bb 1f       	adc	r27, r27
    524a:	ee 1f       	adc	r30, r30
    524c:	ff 1f       	adc	r31, r31
    524e:	a2 17       	cp	r26, r18
    5250:	b3 07       	cpc	r27, r19
    5252:	e4 07       	cpc	r30, r20
    5254:	f5 07       	cpc	r31, r21
    5256:	20 f0       	brcs	.+8      	; 0x5260 <__udivmodsi4_ep>
    5258:	a2 1b       	sub	r26, r18
    525a:	b3 0b       	sbc	r27, r19
    525c:	e4 0b       	sbc	r30, r20
    525e:	f5 0b       	sbc	r31, r21

00005260 <__udivmodsi4_ep>:
    5260:	66 1f       	adc	r22, r22
    5262:	77 1f       	adc	r23, r23
    5264:	88 1f       	adc	r24, r24
    5266:	99 1f       	adc	r25, r25
    5268:	1a 94       	dec	r1
    526a:	69 f7       	brne	.-38     	; 0x5246 <__udivmodsi4_loop>
    526c:	60 95       	com	r22
    526e:	70 95       	com	r23
    5270:	80 95       	com	r24
    5272:	90 95       	com	r25
    5274:	9b 01       	movw	r18, r22
    5276:	ac 01       	movw	r20, r24
    5278:	bd 01       	movw	r22, r26
    527a:	cf 01       	movw	r24, r30
    527c:	08 95       	ret

0000527e <__tablejump2__>:
    527e:	ee 0f       	add	r30, r30
    5280:	ff 1f       	adc	r31, r31
    5282:	88 1f       	adc	r24, r24
    5284:	8b bf       	out	0x3b, r24	; 59
    5286:	07 90       	elpm	r0, Z+
    5288:	f6 91       	elpm	r31, Z
    528a:	e0 2d       	mov	r30, r0
    528c:	19 94       	eijmp

0000528e <malloc>:
    528e:	0f 93       	push	r16
    5290:	1f 93       	push	r17
    5292:	cf 93       	push	r28
    5294:	df 93       	push	r29
    5296:	82 30       	cpi	r24, 0x02	; 2
    5298:	91 05       	cpc	r25, r1
    529a:	10 f4       	brcc	.+4      	; 0x52a0 <malloc+0x12>
    529c:	82 e0       	ldi	r24, 0x02	; 2
    529e:	90 e0       	ldi	r25, 0x00	; 0
    52a0:	e0 91 f6 17 	lds	r30, 0x17F6	; 0x8017f6 <__flp>
    52a4:	f0 91 f7 17 	lds	r31, 0x17F7	; 0x8017f7 <__flp+0x1>
    52a8:	20 e0       	ldi	r18, 0x00	; 0
    52aa:	30 e0       	ldi	r19, 0x00	; 0
    52ac:	a0 e0       	ldi	r26, 0x00	; 0
    52ae:	b0 e0       	ldi	r27, 0x00	; 0
    52b0:	30 97       	sbiw	r30, 0x00	; 0
    52b2:	19 f1       	breq	.+70     	; 0x52fa <malloc+0x6c>
    52b4:	40 81       	ld	r20, Z
    52b6:	51 81       	ldd	r21, Z+1	; 0x01
    52b8:	02 81       	ldd	r16, Z+2	; 0x02
    52ba:	13 81       	ldd	r17, Z+3	; 0x03
    52bc:	48 17       	cp	r20, r24
    52be:	59 07       	cpc	r21, r25
    52c0:	c8 f0       	brcs	.+50     	; 0x52f4 <malloc+0x66>
    52c2:	84 17       	cp	r24, r20
    52c4:	95 07       	cpc	r25, r21
    52c6:	69 f4       	brne	.+26     	; 0x52e2 <malloc+0x54>
    52c8:	10 97       	sbiw	r26, 0x00	; 0
    52ca:	31 f0       	breq	.+12     	; 0x52d8 <malloc+0x4a>
    52cc:	12 96       	adiw	r26, 0x02	; 2
    52ce:	0c 93       	st	X, r16
    52d0:	12 97       	sbiw	r26, 0x02	; 2
    52d2:	13 96       	adiw	r26, 0x03	; 3
    52d4:	1c 93       	st	X, r17
    52d6:	27 c0       	rjmp	.+78     	; 0x5326 <malloc+0x98>
    52d8:	00 93 f6 17 	sts	0x17F6, r16	; 0x8017f6 <__flp>
    52dc:	10 93 f7 17 	sts	0x17F7, r17	; 0x8017f7 <__flp+0x1>
    52e0:	22 c0       	rjmp	.+68     	; 0x5326 <malloc+0x98>
    52e2:	21 15       	cp	r18, r1
    52e4:	31 05       	cpc	r19, r1
    52e6:	19 f0       	breq	.+6      	; 0x52ee <malloc+0x60>
    52e8:	42 17       	cp	r20, r18
    52ea:	53 07       	cpc	r21, r19
    52ec:	18 f4       	brcc	.+6      	; 0x52f4 <malloc+0x66>
    52ee:	9a 01       	movw	r18, r20
    52f0:	bd 01       	movw	r22, r26
    52f2:	ef 01       	movw	r28, r30
    52f4:	df 01       	movw	r26, r30
    52f6:	f8 01       	movw	r30, r16
    52f8:	db cf       	rjmp	.-74     	; 0x52b0 <malloc+0x22>
    52fa:	21 15       	cp	r18, r1
    52fc:	31 05       	cpc	r19, r1
    52fe:	f9 f0       	breq	.+62     	; 0x533e <malloc+0xb0>
    5300:	28 1b       	sub	r18, r24
    5302:	39 0b       	sbc	r19, r25
    5304:	24 30       	cpi	r18, 0x04	; 4
    5306:	31 05       	cpc	r19, r1
    5308:	80 f4       	brcc	.+32     	; 0x532a <malloc+0x9c>
    530a:	8a 81       	ldd	r24, Y+2	; 0x02
    530c:	9b 81       	ldd	r25, Y+3	; 0x03
    530e:	61 15       	cp	r22, r1
    5310:	71 05       	cpc	r23, r1
    5312:	21 f0       	breq	.+8      	; 0x531c <malloc+0x8e>
    5314:	fb 01       	movw	r30, r22
    5316:	93 83       	std	Z+3, r25	; 0x03
    5318:	82 83       	std	Z+2, r24	; 0x02
    531a:	04 c0       	rjmp	.+8      	; 0x5324 <malloc+0x96>
    531c:	90 93 f7 17 	sts	0x17F7, r25	; 0x8017f7 <__flp+0x1>
    5320:	80 93 f6 17 	sts	0x17F6, r24	; 0x8017f6 <__flp>
    5324:	fe 01       	movw	r30, r28
    5326:	32 96       	adiw	r30, 0x02	; 2
    5328:	44 c0       	rjmp	.+136    	; 0x53b2 <malloc+0x124>
    532a:	fe 01       	movw	r30, r28
    532c:	e2 0f       	add	r30, r18
    532e:	f3 1f       	adc	r31, r19
    5330:	81 93       	st	Z+, r24
    5332:	91 93       	st	Z+, r25
    5334:	22 50       	subi	r18, 0x02	; 2
    5336:	31 09       	sbc	r19, r1
    5338:	39 83       	std	Y+1, r19	; 0x01
    533a:	28 83       	st	Y, r18
    533c:	3a c0       	rjmp	.+116    	; 0x53b2 <malloc+0x124>
    533e:	20 91 f4 17 	lds	r18, 0x17F4	; 0x8017f4 <__brkval>
    5342:	30 91 f5 17 	lds	r19, 0x17F5	; 0x8017f5 <__brkval+0x1>
    5346:	23 2b       	or	r18, r19
    5348:	41 f4       	brne	.+16     	; 0x535a <malloc+0xcc>
    534a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    534e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5352:	30 93 f5 17 	sts	0x17F5, r19	; 0x8017f5 <__brkval+0x1>
    5356:	20 93 f4 17 	sts	0x17F4, r18	; 0x8017f4 <__brkval>
    535a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    535e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5362:	21 15       	cp	r18, r1
    5364:	31 05       	cpc	r19, r1
    5366:	41 f4       	brne	.+16     	; 0x5378 <malloc+0xea>
    5368:	2d b7       	in	r18, 0x3d	; 61
    536a:	3e b7       	in	r19, 0x3e	; 62
    536c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5370:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5374:	24 1b       	sub	r18, r20
    5376:	35 0b       	sbc	r19, r21
    5378:	e0 91 f4 17 	lds	r30, 0x17F4	; 0x8017f4 <__brkval>
    537c:	f0 91 f5 17 	lds	r31, 0x17F5	; 0x8017f5 <__brkval+0x1>
    5380:	e2 17       	cp	r30, r18
    5382:	f3 07       	cpc	r31, r19
    5384:	a0 f4       	brcc	.+40     	; 0x53ae <malloc+0x120>
    5386:	2e 1b       	sub	r18, r30
    5388:	3f 0b       	sbc	r19, r31
    538a:	28 17       	cp	r18, r24
    538c:	39 07       	cpc	r19, r25
    538e:	78 f0       	brcs	.+30     	; 0x53ae <malloc+0x120>
    5390:	ac 01       	movw	r20, r24
    5392:	4e 5f       	subi	r20, 0xFE	; 254
    5394:	5f 4f       	sbci	r21, 0xFF	; 255
    5396:	24 17       	cp	r18, r20
    5398:	35 07       	cpc	r19, r21
    539a:	48 f0       	brcs	.+18     	; 0x53ae <malloc+0x120>
    539c:	4e 0f       	add	r20, r30
    539e:	5f 1f       	adc	r21, r31
    53a0:	50 93 f5 17 	sts	0x17F5, r21	; 0x8017f5 <__brkval+0x1>
    53a4:	40 93 f4 17 	sts	0x17F4, r20	; 0x8017f4 <__brkval>
    53a8:	81 93       	st	Z+, r24
    53aa:	91 93       	st	Z+, r25
    53ac:	02 c0       	rjmp	.+4      	; 0x53b2 <malloc+0x124>
    53ae:	e0 e0       	ldi	r30, 0x00	; 0
    53b0:	f0 e0       	ldi	r31, 0x00	; 0
    53b2:	cf 01       	movw	r24, r30
    53b4:	df 91       	pop	r29
    53b6:	cf 91       	pop	r28
    53b8:	1f 91       	pop	r17
    53ba:	0f 91       	pop	r16
    53bc:	08 95       	ret

000053be <free>:
    53be:	cf 93       	push	r28
    53c0:	df 93       	push	r29
    53c2:	00 97       	sbiw	r24, 0x00	; 0
    53c4:	09 f4       	brne	.+2      	; 0x53c8 <free+0xa>
    53c6:	81 c0       	rjmp	.+258    	; 0x54ca <free+0x10c>
    53c8:	fc 01       	movw	r30, r24
    53ca:	32 97       	sbiw	r30, 0x02	; 2
    53cc:	13 82       	std	Z+3, r1	; 0x03
    53ce:	12 82       	std	Z+2, r1	; 0x02
    53d0:	a0 91 f6 17 	lds	r26, 0x17F6	; 0x8017f6 <__flp>
    53d4:	b0 91 f7 17 	lds	r27, 0x17F7	; 0x8017f7 <__flp+0x1>
    53d8:	10 97       	sbiw	r26, 0x00	; 0
    53da:	81 f4       	brne	.+32     	; 0x53fc <free+0x3e>
    53dc:	20 81       	ld	r18, Z
    53de:	31 81       	ldd	r19, Z+1	; 0x01
    53e0:	82 0f       	add	r24, r18
    53e2:	93 1f       	adc	r25, r19
    53e4:	20 91 f4 17 	lds	r18, 0x17F4	; 0x8017f4 <__brkval>
    53e8:	30 91 f5 17 	lds	r19, 0x17F5	; 0x8017f5 <__brkval+0x1>
    53ec:	28 17       	cp	r18, r24
    53ee:	39 07       	cpc	r19, r25
    53f0:	51 f5       	brne	.+84     	; 0x5446 <free+0x88>
    53f2:	f0 93 f5 17 	sts	0x17F5, r31	; 0x8017f5 <__brkval+0x1>
    53f6:	e0 93 f4 17 	sts	0x17F4, r30	; 0x8017f4 <__brkval>
    53fa:	67 c0       	rjmp	.+206    	; 0x54ca <free+0x10c>
    53fc:	ed 01       	movw	r28, r26
    53fe:	20 e0       	ldi	r18, 0x00	; 0
    5400:	30 e0       	ldi	r19, 0x00	; 0
    5402:	ce 17       	cp	r28, r30
    5404:	df 07       	cpc	r29, r31
    5406:	40 f4       	brcc	.+16     	; 0x5418 <free+0x5a>
    5408:	4a 81       	ldd	r20, Y+2	; 0x02
    540a:	5b 81       	ldd	r21, Y+3	; 0x03
    540c:	9e 01       	movw	r18, r28
    540e:	41 15       	cp	r20, r1
    5410:	51 05       	cpc	r21, r1
    5412:	f1 f0       	breq	.+60     	; 0x5450 <free+0x92>
    5414:	ea 01       	movw	r28, r20
    5416:	f5 cf       	rjmp	.-22     	; 0x5402 <free+0x44>
    5418:	d3 83       	std	Z+3, r29	; 0x03
    541a:	c2 83       	std	Z+2, r28	; 0x02
    541c:	40 81       	ld	r20, Z
    541e:	51 81       	ldd	r21, Z+1	; 0x01
    5420:	84 0f       	add	r24, r20
    5422:	95 1f       	adc	r25, r21
    5424:	c8 17       	cp	r28, r24
    5426:	d9 07       	cpc	r29, r25
    5428:	59 f4       	brne	.+22     	; 0x5440 <free+0x82>
    542a:	88 81       	ld	r24, Y
    542c:	99 81       	ldd	r25, Y+1	; 0x01
    542e:	84 0f       	add	r24, r20
    5430:	95 1f       	adc	r25, r21
    5432:	02 96       	adiw	r24, 0x02	; 2
    5434:	91 83       	std	Z+1, r25	; 0x01
    5436:	80 83       	st	Z, r24
    5438:	8a 81       	ldd	r24, Y+2	; 0x02
    543a:	9b 81       	ldd	r25, Y+3	; 0x03
    543c:	93 83       	std	Z+3, r25	; 0x03
    543e:	82 83       	std	Z+2, r24	; 0x02
    5440:	21 15       	cp	r18, r1
    5442:	31 05       	cpc	r19, r1
    5444:	29 f4       	brne	.+10     	; 0x5450 <free+0x92>
    5446:	f0 93 f7 17 	sts	0x17F7, r31	; 0x8017f7 <__flp+0x1>
    544a:	e0 93 f6 17 	sts	0x17F6, r30	; 0x8017f6 <__flp>
    544e:	3d c0       	rjmp	.+122    	; 0x54ca <free+0x10c>
    5450:	e9 01       	movw	r28, r18
    5452:	fb 83       	std	Y+3, r31	; 0x03
    5454:	ea 83       	std	Y+2, r30	; 0x02
    5456:	49 91       	ld	r20, Y+
    5458:	59 91       	ld	r21, Y+
    545a:	c4 0f       	add	r28, r20
    545c:	d5 1f       	adc	r29, r21
    545e:	ec 17       	cp	r30, r28
    5460:	fd 07       	cpc	r31, r29
    5462:	61 f4       	brne	.+24     	; 0x547c <free+0xbe>
    5464:	80 81       	ld	r24, Z
    5466:	91 81       	ldd	r25, Z+1	; 0x01
    5468:	84 0f       	add	r24, r20
    546a:	95 1f       	adc	r25, r21
    546c:	02 96       	adiw	r24, 0x02	; 2
    546e:	e9 01       	movw	r28, r18
    5470:	99 83       	std	Y+1, r25	; 0x01
    5472:	88 83       	st	Y, r24
    5474:	82 81       	ldd	r24, Z+2	; 0x02
    5476:	93 81       	ldd	r25, Z+3	; 0x03
    5478:	9b 83       	std	Y+3, r25	; 0x03
    547a:	8a 83       	std	Y+2, r24	; 0x02
    547c:	e0 e0       	ldi	r30, 0x00	; 0
    547e:	f0 e0       	ldi	r31, 0x00	; 0
    5480:	12 96       	adiw	r26, 0x02	; 2
    5482:	8d 91       	ld	r24, X+
    5484:	9c 91       	ld	r25, X
    5486:	13 97       	sbiw	r26, 0x03	; 3
    5488:	00 97       	sbiw	r24, 0x00	; 0
    548a:	19 f0       	breq	.+6      	; 0x5492 <free+0xd4>
    548c:	fd 01       	movw	r30, r26
    548e:	dc 01       	movw	r26, r24
    5490:	f7 cf       	rjmp	.-18     	; 0x5480 <free+0xc2>
    5492:	8d 91       	ld	r24, X+
    5494:	9c 91       	ld	r25, X
    5496:	11 97       	sbiw	r26, 0x01	; 1
    5498:	9d 01       	movw	r18, r26
    549a:	2e 5f       	subi	r18, 0xFE	; 254
    549c:	3f 4f       	sbci	r19, 0xFF	; 255
    549e:	82 0f       	add	r24, r18
    54a0:	93 1f       	adc	r25, r19
    54a2:	20 91 f4 17 	lds	r18, 0x17F4	; 0x8017f4 <__brkval>
    54a6:	30 91 f5 17 	lds	r19, 0x17F5	; 0x8017f5 <__brkval+0x1>
    54aa:	28 17       	cp	r18, r24
    54ac:	39 07       	cpc	r19, r25
    54ae:	69 f4       	brne	.+26     	; 0x54ca <free+0x10c>
    54b0:	30 97       	sbiw	r30, 0x00	; 0
    54b2:	29 f4       	brne	.+10     	; 0x54be <free+0x100>
    54b4:	10 92 f7 17 	sts	0x17F7, r1	; 0x8017f7 <__flp+0x1>
    54b8:	10 92 f6 17 	sts	0x17F6, r1	; 0x8017f6 <__flp>
    54bc:	02 c0       	rjmp	.+4      	; 0x54c2 <free+0x104>
    54be:	13 82       	std	Z+3, r1	; 0x03
    54c0:	12 82       	std	Z+2, r1	; 0x02
    54c2:	b0 93 f5 17 	sts	0x17F5, r27	; 0x8017f5 <__brkval+0x1>
    54c6:	a0 93 f4 17 	sts	0x17F4, r26	; 0x8017f4 <__brkval>
    54ca:	df 91       	pop	r29
    54cc:	cf 91       	pop	r28
    54ce:	08 95       	ret

000054d0 <abort>:
    54d0:	81 e0       	ldi	r24, 0x01	; 1
    54d2:	90 e0       	ldi	r25, 0x00	; 0
    54d4:	f8 94       	cli
    54d6:	7d c3       	rjmp	.+1786   	; 0x5bd2 <_exit>

000054d8 <memcpy>:
    54d8:	fb 01       	movw	r30, r22
    54da:	dc 01       	movw	r26, r24
    54dc:	02 c0       	rjmp	.+4      	; 0x54e2 <memcpy+0xa>
    54de:	01 90       	ld	r0, Z+
    54e0:	0d 92       	st	X+, r0
    54e2:	41 50       	subi	r20, 0x01	; 1
    54e4:	50 40       	sbci	r21, 0x00	; 0
    54e6:	d8 f7       	brcc	.-10     	; 0x54de <memcpy+0x6>
    54e8:	08 95       	ret

000054ea <memset>:
    54ea:	dc 01       	movw	r26, r24
    54ec:	01 c0       	rjmp	.+2      	; 0x54f0 <memset+0x6>
    54ee:	6d 93       	st	X+, r22
    54f0:	41 50       	subi	r20, 0x01	; 1
    54f2:	50 40       	sbci	r21, 0x00	; 0
    54f4:	e0 f7       	brcc	.-8      	; 0x54ee <memset+0x4>
    54f6:	08 95       	ret

000054f8 <strcasestr>:
    54f8:	fb 01       	movw	r30, r22
    54fa:	51 91       	ld	r21, Z+
    54fc:	55 23       	and	r21, r21
    54fe:	b1 f0       	breq	.+44     	; 0x552c <strcasestr+0x34>
    5500:	bf 01       	movw	r22, r30
    5502:	dc 01       	movw	r26, r24
    5504:	05 2e       	mov	r0, r21
    5506:	4d 91       	ld	r20, X+
    5508:	44 23       	and	r20, r20
    550a:	69 f0       	breq	.+26     	; 0x5526 <strcasestr+0x2e>
    550c:	10 d0       	rcall	.+32     	; 0x552e <strcasestr+0x36>
    550e:	d9 f7       	brne	.-10     	; 0x5506 <strcasestr+0xe>
    5510:	cd 01       	movw	r24, r26
    5512:	01 90       	ld	r0, Z+
    5514:	00 20       	and	r0, r0
    5516:	49 f0       	breq	.+18     	; 0x552a <strcasestr+0x32>
    5518:	4d 91       	ld	r20, X+
    551a:	41 11       	cpse	r20, r1
    551c:	08 d0       	rcall	.+16     	; 0x552e <strcasestr+0x36>
    551e:	c9 f3       	breq	.-14     	; 0x5512 <strcasestr+0x1a>
    5520:	fb 01       	movw	r30, r22
    5522:	41 11       	cpse	r20, r1
    5524:	ee cf       	rjmp	.-36     	; 0x5502 <strcasestr+0xa>
    5526:	81 e0       	ldi	r24, 0x01	; 1
    5528:	90 e0       	ldi	r25, 0x00	; 0
    552a:	01 97       	sbiw	r24, 0x01	; 1
    552c:	08 95       	ret
    552e:	40 25       	eor	r20, r0
    5530:	39 f0       	breq	.+14     	; 0x5540 <strcasestr+0x48>
    5532:	40 32       	cpi	r20, 0x20	; 32
    5534:	29 f4       	brne	.+10     	; 0x5540 <strcasestr+0x48>
    5536:	40 29       	or	r20, r0
    5538:	4b 57       	subi	r20, 0x7B	; 123
    553a:	46 5e       	subi	r20, 0xE6	; 230
    553c:	08 f0       	brcs	.+2      	; 0x5540 <strcasestr+0x48>
    553e:	18 94       	sez
    5540:	08 95       	ret

00005542 <strcat>:
    5542:	fb 01       	movw	r30, r22
    5544:	dc 01       	movw	r26, r24
    5546:	0d 90       	ld	r0, X+
    5548:	00 20       	and	r0, r0
    554a:	e9 f7       	brne	.-6      	; 0x5546 <strcat+0x4>
    554c:	11 97       	sbiw	r26, 0x01	; 1
    554e:	01 90       	ld	r0, Z+
    5550:	0d 92       	st	X+, r0
    5552:	00 20       	and	r0, r0
    5554:	e1 f7       	brne	.-8      	; 0x554e <strcat+0xc>
    5556:	08 95       	ret

00005558 <strcpy>:
    5558:	fb 01       	movw	r30, r22
    555a:	dc 01       	movw	r26, r24
    555c:	01 90       	ld	r0, Z+
    555e:	0d 92       	st	X+, r0
    5560:	00 20       	and	r0, r0
    5562:	e1 f7       	brne	.-8      	; 0x555c <strcpy+0x4>
    5564:	08 95       	ret

00005566 <strncasecmp>:
    5566:	fb 01       	movw	r30, r22
    5568:	dc 01       	movw	r26, r24
    556a:	41 50       	subi	r20, 0x01	; 1
    556c:	50 40       	sbci	r21, 0x00	; 0
    556e:	88 f0       	brcs	.+34     	; 0x5592 <strncasecmp+0x2c>
    5570:	8d 91       	ld	r24, X+
    5572:	81 34       	cpi	r24, 0x41	; 65
    5574:	1c f0       	brlt	.+6      	; 0x557c <strncasecmp+0x16>
    5576:	8b 35       	cpi	r24, 0x5B	; 91
    5578:	0c f4       	brge	.+2      	; 0x557c <strncasecmp+0x16>
    557a:	80 5e       	subi	r24, 0xE0	; 224
    557c:	61 91       	ld	r22, Z+
    557e:	61 34       	cpi	r22, 0x41	; 65
    5580:	1c f0       	brlt	.+6      	; 0x5588 <strncasecmp+0x22>
    5582:	6b 35       	cpi	r22, 0x5B	; 91
    5584:	0c f4       	brge	.+2      	; 0x5588 <strncasecmp+0x22>
    5586:	60 5e       	subi	r22, 0xE0	; 224
    5588:	86 1b       	sub	r24, r22
    558a:	61 11       	cpse	r22, r1
    558c:	71 f3       	breq	.-36     	; 0x556a <strncasecmp+0x4>
    558e:	99 0b       	sbc	r25, r25
    5590:	08 95       	ret
    5592:	88 1b       	sub	r24, r24
    5594:	fc cf       	rjmp	.-8      	; 0x558e <strncasecmp+0x28>

00005596 <printf>:
    5596:	cf 93       	push	r28
    5598:	df 93       	push	r29
    559a:	cd b7       	in	r28, 0x3d	; 61
    559c:	de b7       	in	r29, 0x3e	; 62
    559e:	ae 01       	movw	r20, r28
    55a0:	4a 5f       	subi	r20, 0xFA	; 250
    55a2:	5f 4f       	sbci	r21, 0xFF	; 255
    55a4:	fa 01       	movw	r30, r20
    55a6:	61 91       	ld	r22, Z+
    55a8:	71 91       	ld	r23, Z+
    55aa:	af 01       	movw	r20, r30
    55ac:	80 91 fa 17 	lds	r24, 0x17FA	; 0x8017fa <__iob+0x2>
    55b0:	90 91 fb 17 	lds	r25, 0x17FB	; 0x8017fb <__iob+0x3>
    55b4:	61 d0       	rcall	.+194    	; 0x5678 <vfprintf>
    55b6:	df 91       	pop	r29
    55b8:	cf 91       	pop	r28
    55ba:	08 95       	ret

000055bc <puts>:
    55bc:	0f 93       	push	r16
    55be:	1f 93       	push	r17
    55c0:	cf 93       	push	r28
    55c2:	df 93       	push	r29
    55c4:	e0 91 fa 17 	lds	r30, 0x17FA	; 0x8017fa <__iob+0x2>
    55c8:	f0 91 fb 17 	lds	r31, 0x17FB	; 0x8017fb <__iob+0x3>
    55cc:	23 81       	ldd	r18, Z+3	; 0x03
    55ce:	21 ff       	sbrs	r18, 1
    55d0:	1b c0       	rjmp	.+54     	; 0x5608 <puts+0x4c>
    55d2:	8c 01       	movw	r16, r24
    55d4:	d0 e0       	ldi	r29, 0x00	; 0
    55d6:	c0 e0       	ldi	r28, 0x00	; 0
    55d8:	f8 01       	movw	r30, r16
    55da:	81 91       	ld	r24, Z+
    55dc:	8f 01       	movw	r16, r30
    55de:	60 91 fa 17 	lds	r22, 0x17FA	; 0x8017fa <__iob+0x2>
    55e2:	70 91 fb 17 	lds	r23, 0x17FB	; 0x8017fb <__iob+0x3>
    55e6:	db 01       	movw	r26, r22
    55e8:	18 96       	adiw	r26, 0x08	; 8
    55ea:	ed 91       	ld	r30, X+
    55ec:	fc 91       	ld	r31, X
    55ee:	19 97       	sbiw	r26, 0x09	; 9
    55f0:	88 23       	and	r24, r24
    55f2:	31 f0       	breq	.+12     	; 0x5600 <puts+0x44>
    55f4:	19 95       	eicall
    55f6:	89 2b       	or	r24, r25
    55f8:	79 f3       	breq	.-34     	; 0x55d8 <puts+0x1c>
    55fa:	df ef       	ldi	r29, 0xFF	; 255
    55fc:	cf ef       	ldi	r28, 0xFF	; 255
    55fe:	ec cf       	rjmp	.-40     	; 0x55d8 <puts+0x1c>
    5600:	8a e0       	ldi	r24, 0x0A	; 10
    5602:	19 95       	eicall
    5604:	89 2b       	or	r24, r25
    5606:	19 f0       	breq	.+6      	; 0x560e <puts+0x52>
    5608:	8f ef       	ldi	r24, 0xFF	; 255
    560a:	9f ef       	ldi	r25, 0xFF	; 255
    560c:	02 c0       	rjmp	.+4      	; 0x5612 <puts+0x56>
    560e:	8d 2f       	mov	r24, r29
    5610:	9c 2f       	mov	r25, r28
    5612:	df 91       	pop	r29
    5614:	cf 91       	pop	r28
    5616:	1f 91       	pop	r17
    5618:	0f 91       	pop	r16
    561a:	08 95       	ret

0000561c <sprintf>:
    561c:	0f 93       	push	r16
    561e:	1f 93       	push	r17
    5620:	cf 93       	push	r28
    5622:	df 93       	push	r29
    5624:	cd b7       	in	r28, 0x3d	; 61
    5626:	de b7       	in	r29, 0x3e	; 62
    5628:	2e 97       	sbiw	r28, 0x0e	; 14
    562a:	0f b6       	in	r0, 0x3f	; 63
    562c:	f8 94       	cli
    562e:	de bf       	out	0x3e, r29	; 62
    5630:	0f be       	out	0x3f, r0	; 63
    5632:	cd bf       	out	0x3d, r28	; 61
    5634:	0e 89       	ldd	r16, Y+22	; 0x16
    5636:	1f 89       	ldd	r17, Y+23	; 0x17
    5638:	86 e0       	ldi	r24, 0x06	; 6
    563a:	8c 83       	std	Y+4, r24	; 0x04
    563c:	1a 83       	std	Y+2, r17	; 0x02
    563e:	09 83       	std	Y+1, r16	; 0x01
    5640:	8f ef       	ldi	r24, 0xFF	; 255
    5642:	9f e7       	ldi	r25, 0x7F	; 127
    5644:	9e 83       	std	Y+6, r25	; 0x06
    5646:	8d 83       	std	Y+5, r24	; 0x05
    5648:	ae 01       	movw	r20, r28
    564a:	46 5e       	subi	r20, 0xE6	; 230
    564c:	5f 4f       	sbci	r21, 0xFF	; 255
    564e:	68 8d       	ldd	r22, Y+24	; 0x18
    5650:	79 8d       	ldd	r23, Y+25	; 0x19
    5652:	ce 01       	movw	r24, r28
    5654:	01 96       	adiw	r24, 0x01	; 1
    5656:	10 d0       	rcall	.+32     	; 0x5678 <vfprintf>
    5658:	ef 81       	ldd	r30, Y+7	; 0x07
    565a:	f8 85       	ldd	r31, Y+8	; 0x08
    565c:	e0 0f       	add	r30, r16
    565e:	f1 1f       	adc	r31, r17
    5660:	10 82       	st	Z, r1
    5662:	2e 96       	adiw	r28, 0x0e	; 14
    5664:	0f b6       	in	r0, 0x3f	; 63
    5666:	f8 94       	cli
    5668:	de bf       	out	0x3e, r29	; 62
    566a:	0f be       	out	0x3f, r0	; 63
    566c:	cd bf       	out	0x3d, r28	; 61
    566e:	df 91       	pop	r29
    5670:	cf 91       	pop	r28
    5672:	1f 91       	pop	r17
    5674:	0f 91       	pop	r16
    5676:	08 95       	ret

00005678 <vfprintf>:
    5678:	2f 92       	push	r2
    567a:	3f 92       	push	r3
    567c:	4f 92       	push	r4
    567e:	5f 92       	push	r5
    5680:	6f 92       	push	r6
    5682:	7f 92       	push	r7
    5684:	8f 92       	push	r8
    5686:	9f 92       	push	r9
    5688:	af 92       	push	r10
    568a:	bf 92       	push	r11
    568c:	cf 92       	push	r12
    568e:	df 92       	push	r13
    5690:	ef 92       	push	r14
    5692:	ff 92       	push	r15
    5694:	0f 93       	push	r16
    5696:	1f 93       	push	r17
    5698:	cf 93       	push	r28
    569a:	df 93       	push	r29
    569c:	cd b7       	in	r28, 0x3d	; 61
    569e:	de b7       	in	r29, 0x3e	; 62
    56a0:	2b 97       	sbiw	r28, 0x0b	; 11
    56a2:	0f b6       	in	r0, 0x3f	; 63
    56a4:	f8 94       	cli
    56a6:	de bf       	out	0x3e, r29	; 62
    56a8:	0f be       	out	0x3f, r0	; 63
    56aa:	cd bf       	out	0x3d, r28	; 61
    56ac:	6c 01       	movw	r12, r24
    56ae:	7b 01       	movw	r14, r22
    56b0:	8a 01       	movw	r16, r20
    56b2:	fc 01       	movw	r30, r24
    56b4:	17 82       	std	Z+7, r1	; 0x07
    56b6:	16 82       	std	Z+6, r1	; 0x06
    56b8:	83 81       	ldd	r24, Z+3	; 0x03
    56ba:	81 ff       	sbrs	r24, 1
    56bc:	bf c1       	rjmp	.+894    	; 0x5a3c <vfprintf+0x3c4>
    56be:	ce 01       	movw	r24, r28
    56c0:	01 96       	adiw	r24, 0x01	; 1
    56c2:	3c 01       	movw	r6, r24
    56c4:	f6 01       	movw	r30, r12
    56c6:	93 81       	ldd	r25, Z+3	; 0x03
    56c8:	f7 01       	movw	r30, r14
    56ca:	93 fd       	sbrc	r25, 3
    56cc:	85 91       	lpm	r24, Z+
    56ce:	93 ff       	sbrs	r25, 3
    56d0:	81 91       	ld	r24, Z+
    56d2:	7f 01       	movw	r14, r30
    56d4:	88 23       	and	r24, r24
    56d6:	09 f4       	brne	.+2      	; 0x56da <vfprintf+0x62>
    56d8:	ad c1       	rjmp	.+858    	; 0x5a34 <vfprintf+0x3bc>
    56da:	85 32       	cpi	r24, 0x25	; 37
    56dc:	39 f4       	brne	.+14     	; 0x56ec <vfprintf+0x74>
    56de:	93 fd       	sbrc	r25, 3
    56e0:	85 91       	lpm	r24, Z+
    56e2:	93 ff       	sbrs	r25, 3
    56e4:	81 91       	ld	r24, Z+
    56e6:	7f 01       	movw	r14, r30
    56e8:	85 32       	cpi	r24, 0x25	; 37
    56ea:	21 f4       	brne	.+8      	; 0x56f4 <vfprintf+0x7c>
    56ec:	b6 01       	movw	r22, r12
    56ee:	90 e0       	ldi	r25, 0x00	; 0
    56f0:	d6 d1       	rcall	.+940    	; 0x5a9e <fputc>
    56f2:	e8 cf       	rjmp	.-48     	; 0x56c4 <vfprintf+0x4c>
    56f4:	91 2c       	mov	r9, r1
    56f6:	21 2c       	mov	r2, r1
    56f8:	31 2c       	mov	r3, r1
    56fa:	ff e1       	ldi	r31, 0x1F	; 31
    56fc:	f3 15       	cp	r31, r3
    56fe:	d8 f0       	brcs	.+54     	; 0x5736 <vfprintf+0xbe>
    5700:	8b 32       	cpi	r24, 0x2B	; 43
    5702:	79 f0       	breq	.+30     	; 0x5722 <vfprintf+0xaa>
    5704:	38 f4       	brcc	.+14     	; 0x5714 <vfprintf+0x9c>
    5706:	80 32       	cpi	r24, 0x20	; 32
    5708:	79 f0       	breq	.+30     	; 0x5728 <vfprintf+0xb0>
    570a:	83 32       	cpi	r24, 0x23	; 35
    570c:	a1 f4       	brne	.+40     	; 0x5736 <vfprintf+0xbe>
    570e:	23 2d       	mov	r18, r3
    5710:	20 61       	ori	r18, 0x10	; 16
    5712:	1d c0       	rjmp	.+58     	; 0x574e <vfprintf+0xd6>
    5714:	8d 32       	cpi	r24, 0x2D	; 45
    5716:	61 f0       	breq	.+24     	; 0x5730 <vfprintf+0xb8>
    5718:	80 33       	cpi	r24, 0x30	; 48
    571a:	69 f4       	brne	.+26     	; 0x5736 <vfprintf+0xbe>
    571c:	23 2d       	mov	r18, r3
    571e:	21 60       	ori	r18, 0x01	; 1
    5720:	16 c0       	rjmp	.+44     	; 0x574e <vfprintf+0xd6>
    5722:	83 2d       	mov	r24, r3
    5724:	82 60       	ori	r24, 0x02	; 2
    5726:	38 2e       	mov	r3, r24
    5728:	e3 2d       	mov	r30, r3
    572a:	e4 60       	ori	r30, 0x04	; 4
    572c:	3e 2e       	mov	r3, r30
    572e:	2a c0       	rjmp	.+84     	; 0x5784 <vfprintf+0x10c>
    5730:	f3 2d       	mov	r31, r3
    5732:	f8 60       	ori	r31, 0x08	; 8
    5734:	1d c0       	rjmp	.+58     	; 0x5770 <vfprintf+0xf8>
    5736:	37 fc       	sbrc	r3, 7
    5738:	2d c0       	rjmp	.+90     	; 0x5794 <vfprintf+0x11c>
    573a:	20 ed       	ldi	r18, 0xD0	; 208
    573c:	28 0f       	add	r18, r24
    573e:	2a 30       	cpi	r18, 0x0A	; 10
    5740:	40 f0       	brcs	.+16     	; 0x5752 <vfprintf+0xda>
    5742:	8e 32       	cpi	r24, 0x2E	; 46
    5744:	b9 f4       	brne	.+46     	; 0x5774 <vfprintf+0xfc>
    5746:	36 fc       	sbrc	r3, 6
    5748:	75 c1       	rjmp	.+746    	; 0x5a34 <vfprintf+0x3bc>
    574a:	23 2d       	mov	r18, r3
    574c:	20 64       	ori	r18, 0x40	; 64
    574e:	32 2e       	mov	r3, r18
    5750:	19 c0       	rjmp	.+50     	; 0x5784 <vfprintf+0x10c>
    5752:	36 fe       	sbrs	r3, 6
    5754:	06 c0       	rjmp	.+12     	; 0x5762 <vfprintf+0xea>
    5756:	8a e0       	ldi	r24, 0x0A	; 10
    5758:	98 9e       	mul	r9, r24
    575a:	20 0d       	add	r18, r0
    575c:	11 24       	eor	r1, r1
    575e:	92 2e       	mov	r9, r18
    5760:	11 c0       	rjmp	.+34     	; 0x5784 <vfprintf+0x10c>
    5762:	ea e0       	ldi	r30, 0x0A	; 10
    5764:	2e 9e       	mul	r2, r30
    5766:	20 0d       	add	r18, r0
    5768:	11 24       	eor	r1, r1
    576a:	22 2e       	mov	r2, r18
    576c:	f3 2d       	mov	r31, r3
    576e:	f0 62       	ori	r31, 0x20	; 32
    5770:	3f 2e       	mov	r3, r31
    5772:	08 c0       	rjmp	.+16     	; 0x5784 <vfprintf+0x10c>
    5774:	8c 36       	cpi	r24, 0x6C	; 108
    5776:	21 f4       	brne	.+8      	; 0x5780 <vfprintf+0x108>
    5778:	83 2d       	mov	r24, r3
    577a:	80 68       	ori	r24, 0x80	; 128
    577c:	38 2e       	mov	r3, r24
    577e:	02 c0       	rjmp	.+4      	; 0x5784 <vfprintf+0x10c>
    5780:	88 36       	cpi	r24, 0x68	; 104
    5782:	41 f4       	brne	.+16     	; 0x5794 <vfprintf+0x11c>
    5784:	f7 01       	movw	r30, r14
    5786:	93 fd       	sbrc	r25, 3
    5788:	85 91       	lpm	r24, Z+
    578a:	93 ff       	sbrs	r25, 3
    578c:	81 91       	ld	r24, Z+
    578e:	7f 01       	movw	r14, r30
    5790:	81 11       	cpse	r24, r1
    5792:	b3 cf       	rjmp	.-154    	; 0x56fa <vfprintf+0x82>
    5794:	98 2f       	mov	r25, r24
    5796:	9f 7d       	andi	r25, 0xDF	; 223
    5798:	95 54       	subi	r25, 0x45	; 69
    579a:	93 30       	cpi	r25, 0x03	; 3
    579c:	28 f4       	brcc	.+10     	; 0x57a8 <vfprintf+0x130>
    579e:	0c 5f       	subi	r16, 0xFC	; 252
    57a0:	1f 4f       	sbci	r17, 0xFF	; 255
    57a2:	9f e3       	ldi	r25, 0x3F	; 63
    57a4:	99 83       	std	Y+1, r25	; 0x01
    57a6:	0d c0       	rjmp	.+26     	; 0x57c2 <vfprintf+0x14a>
    57a8:	83 36       	cpi	r24, 0x63	; 99
    57aa:	31 f0       	breq	.+12     	; 0x57b8 <vfprintf+0x140>
    57ac:	83 37       	cpi	r24, 0x73	; 115
    57ae:	71 f0       	breq	.+28     	; 0x57cc <vfprintf+0x154>
    57b0:	83 35       	cpi	r24, 0x53	; 83
    57b2:	09 f0       	breq	.+2      	; 0x57b6 <vfprintf+0x13e>
    57b4:	55 c0       	rjmp	.+170    	; 0x5860 <vfprintf+0x1e8>
    57b6:	20 c0       	rjmp	.+64     	; 0x57f8 <vfprintf+0x180>
    57b8:	f8 01       	movw	r30, r16
    57ba:	80 81       	ld	r24, Z
    57bc:	89 83       	std	Y+1, r24	; 0x01
    57be:	0e 5f       	subi	r16, 0xFE	; 254
    57c0:	1f 4f       	sbci	r17, 0xFF	; 255
    57c2:	88 24       	eor	r8, r8
    57c4:	83 94       	inc	r8
    57c6:	91 2c       	mov	r9, r1
    57c8:	53 01       	movw	r10, r6
    57ca:	12 c0       	rjmp	.+36     	; 0x57f0 <vfprintf+0x178>
    57cc:	28 01       	movw	r4, r16
    57ce:	f2 e0       	ldi	r31, 0x02	; 2
    57d0:	4f 0e       	add	r4, r31
    57d2:	51 1c       	adc	r5, r1
    57d4:	f8 01       	movw	r30, r16
    57d6:	a0 80       	ld	r10, Z
    57d8:	b1 80       	ldd	r11, Z+1	; 0x01
    57da:	36 fe       	sbrs	r3, 6
    57dc:	03 c0       	rjmp	.+6      	; 0x57e4 <vfprintf+0x16c>
    57de:	69 2d       	mov	r22, r9
    57e0:	70 e0       	ldi	r23, 0x00	; 0
    57e2:	02 c0       	rjmp	.+4      	; 0x57e8 <vfprintf+0x170>
    57e4:	6f ef       	ldi	r22, 0xFF	; 255
    57e6:	7f ef       	ldi	r23, 0xFF	; 255
    57e8:	c5 01       	movw	r24, r10
    57ea:	4e d1       	rcall	.+668    	; 0x5a88 <strnlen>
    57ec:	4c 01       	movw	r8, r24
    57ee:	82 01       	movw	r16, r4
    57f0:	f3 2d       	mov	r31, r3
    57f2:	ff 77       	andi	r31, 0x7F	; 127
    57f4:	3f 2e       	mov	r3, r31
    57f6:	15 c0       	rjmp	.+42     	; 0x5822 <vfprintf+0x1aa>
    57f8:	28 01       	movw	r4, r16
    57fa:	22 e0       	ldi	r18, 0x02	; 2
    57fc:	42 0e       	add	r4, r18
    57fe:	51 1c       	adc	r5, r1
    5800:	f8 01       	movw	r30, r16
    5802:	a0 80       	ld	r10, Z
    5804:	b1 80       	ldd	r11, Z+1	; 0x01
    5806:	36 fe       	sbrs	r3, 6
    5808:	03 c0       	rjmp	.+6      	; 0x5810 <vfprintf+0x198>
    580a:	69 2d       	mov	r22, r9
    580c:	70 e0       	ldi	r23, 0x00	; 0
    580e:	02 c0       	rjmp	.+4      	; 0x5814 <vfprintf+0x19c>
    5810:	6f ef       	ldi	r22, 0xFF	; 255
    5812:	7f ef       	ldi	r23, 0xFF	; 255
    5814:	c5 01       	movw	r24, r10
    5816:	2d d1       	rcall	.+602    	; 0x5a72 <strnlen_P>
    5818:	4c 01       	movw	r8, r24
    581a:	f3 2d       	mov	r31, r3
    581c:	f0 68       	ori	r31, 0x80	; 128
    581e:	3f 2e       	mov	r3, r31
    5820:	82 01       	movw	r16, r4
    5822:	33 fc       	sbrc	r3, 3
    5824:	19 c0       	rjmp	.+50     	; 0x5858 <vfprintf+0x1e0>
    5826:	82 2d       	mov	r24, r2
    5828:	90 e0       	ldi	r25, 0x00	; 0
    582a:	88 16       	cp	r8, r24
    582c:	99 06       	cpc	r9, r25
    582e:	a0 f4       	brcc	.+40     	; 0x5858 <vfprintf+0x1e0>
    5830:	b6 01       	movw	r22, r12
    5832:	80 e2       	ldi	r24, 0x20	; 32
    5834:	90 e0       	ldi	r25, 0x00	; 0
    5836:	33 d1       	rcall	.+614    	; 0x5a9e <fputc>
    5838:	2a 94       	dec	r2
    583a:	f5 cf       	rjmp	.-22     	; 0x5826 <vfprintf+0x1ae>
    583c:	f5 01       	movw	r30, r10
    583e:	37 fc       	sbrc	r3, 7
    5840:	85 91       	lpm	r24, Z+
    5842:	37 fe       	sbrs	r3, 7
    5844:	81 91       	ld	r24, Z+
    5846:	5f 01       	movw	r10, r30
    5848:	b6 01       	movw	r22, r12
    584a:	90 e0       	ldi	r25, 0x00	; 0
    584c:	28 d1       	rcall	.+592    	; 0x5a9e <fputc>
    584e:	21 10       	cpse	r2, r1
    5850:	2a 94       	dec	r2
    5852:	21 e0       	ldi	r18, 0x01	; 1
    5854:	82 1a       	sub	r8, r18
    5856:	91 08       	sbc	r9, r1
    5858:	81 14       	cp	r8, r1
    585a:	91 04       	cpc	r9, r1
    585c:	79 f7       	brne	.-34     	; 0x583c <vfprintf+0x1c4>
    585e:	e1 c0       	rjmp	.+450    	; 0x5a22 <vfprintf+0x3aa>
    5860:	84 36       	cpi	r24, 0x64	; 100
    5862:	11 f0       	breq	.+4      	; 0x5868 <vfprintf+0x1f0>
    5864:	89 36       	cpi	r24, 0x69	; 105
    5866:	39 f5       	brne	.+78     	; 0x58b6 <vfprintf+0x23e>
    5868:	f8 01       	movw	r30, r16
    586a:	37 fe       	sbrs	r3, 7
    586c:	07 c0       	rjmp	.+14     	; 0x587c <vfprintf+0x204>
    586e:	60 81       	ld	r22, Z
    5870:	71 81       	ldd	r23, Z+1	; 0x01
    5872:	82 81       	ldd	r24, Z+2	; 0x02
    5874:	93 81       	ldd	r25, Z+3	; 0x03
    5876:	0c 5f       	subi	r16, 0xFC	; 252
    5878:	1f 4f       	sbci	r17, 0xFF	; 255
    587a:	08 c0       	rjmp	.+16     	; 0x588c <vfprintf+0x214>
    587c:	60 81       	ld	r22, Z
    587e:	71 81       	ldd	r23, Z+1	; 0x01
    5880:	07 2e       	mov	r0, r23
    5882:	00 0c       	add	r0, r0
    5884:	88 0b       	sbc	r24, r24
    5886:	99 0b       	sbc	r25, r25
    5888:	0e 5f       	subi	r16, 0xFE	; 254
    588a:	1f 4f       	sbci	r17, 0xFF	; 255
    588c:	f3 2d       	mov	r31, r3
    588e:	ff 76       	andi	r31, 0x6F	; 111
    5890:	3f 2e       	mov	r3, r31
    5892:	97 ff       	sbrs	r25, 7
    5894:	09 c0       	rjmp	.+18     	; 0x58a8 <vfprintf+0x230>
    5896:	90 95       	com	r25
    5898:	80 95       	com	r24
    589a:	70 95       	com	r23
    589c:	61 95       	neg	r22
    589e:	7f 4f       	sbci	r23, 0xFF	; 255
    58a0:	8f 4f       	sbci	r24, 0xFF	; 255
    58a2:	9f 4f       	sbci	r25, 0xFF	; 255
    58a4:	f0 68       	ori	r31, 0x80	; 128
    58a6:	3f 2e       	mov	r3, r31
    58a8:	2a e0       	ldi	r18, 0x0A	; 10
    58aa:	30 e0       	ldi	r19, 0x00	; 0
    58ac:	a3 01       	movw	r20, r6
    58ae:	33 d1       	rcall	.+614    	; 0x5b16 <__ultoa_invert>
    58b0:	88 2e       	mov	r8, r24
    58b2:	86 18       	sub	r8, r6
    58b4:	44 c0       	rjmp	.+136    	; 0x593e <vfprintf+0x2c6>
    58b6:	85 37       	cpi	r24, 0x75	; 117
    58b8:	31 f4       	brne	.+12     	; 0x58c6 <vfprintf+0x24e>
    58ba:	23 2d       	mov	r18, r3
    58bc:	2f 7e       	andi	r18, 0xEF	; 239
    58be:	b2 2e       	mov	r11, r18
    58c0:	2a e0       	ldi	r18, 0x0A	; 10
    58c2:	30 e0       	ldi	r19, 0x00	; 0
    58c4:	25 c0       	rjmp	.+74     	; 0x5910 <vfprintf+0x298>
    58c6:	93 2d       	mov	r25, r3
    58c8:	99 7f       	andi	r25, 0xF9	; 249
    58ca:	b9 2e       	mov	r11, r25
    58cc:	8f 36       	cpi	r24, 0x6F	; 111
    58ce:	c1 f0       	breq	.+48     	; 0x5900 <vfprintf+0x288>
    58d0:	18 f4       	brcc	.+6      	; 0x58d8 <vfprintf+0x260>
    58d2:	88 35       	cpi	r24, 0x58	; 88
    58d4:	79 f0       	breq	.+30     	; 0x58f4 <vfprintf+0x27c>
    58d6:	ae c0       	rjmp	.+348    	; 0x5a34 <vfprintf+0x3bc>
    58d8:	80 37       	cpi	r24, 0x70	; 112
    58da:	19 f0       	breq	.+6      	; 0x58e2 <vfprintf+0x26a>
    58dc:	88 37       	cpi	r24, 0x78	; 120
    58de:	21 f0       	breq	.+8      	; 0x58e8 <vfprintf+0x270>
    58e0:	a9 c0       	rjmp	.+338    	; 0x5a34 <vfprintf+0x3bc>
    58e2:	e9 2f       	mov	r30, r25
    58e4:	e0 61       	ori	r30, 0x10	; 16
    58e6:	be 2e       	mov	r11, r30
    58e8:	b4 fe       	sbrs	r11, 4
    58ea:	0d c0       	rjmp	.+26     	; 0x5906 <vfprintf+0x28e>
    58ec:	fb 2d       	mov	r31, r11
    58ee:	f4 60       	ori	r31, 0x04	; 4
    58f0:	bf 2e       	mov	r11, r31
    58f2:	09 c0       	rjmp	.+18     	; 0x5906 <vfprintf+0x28e>
    58f4:	34 fe       	sbrs	r3, 4
    58f6:	0a c0       	rjmp	.+20     	; 0x590c <vfprintf+0x294>
    58f8:	29 2f       	mov	r18, r25
    58fa:	26 60       	ori	r18, 0x06	; 6
    58fc:	b2 2e       	mov	r11, r18
    58fe:	06 c0       	rjmp	.+12     	; 0x590c <vfprintf+0x294>
    5900:	28 e0       	ldi	r18, 0x08	; 8
    5902:	30 e0       	ldi	r19, 0x00	; 0
    5904:	05 c0       	rjmp	.+10     	; 0x5910 <vfprintf+0x298>
    5906:	20 e1       	ldi	r18, 0x10	; 16
    5908:	30 e0       	ldi	r19, 0x00	; 0
    590a:	02 c0       	rjmp	.+4      	; 0x5910 <vfprintf+0x298>
    590c:	20 e1       	ldi	r18, 0x10	; 16
    590e:	32 e0       	ldi	r19, 0x02	; 2
    5910:	f8 01       	movw	r30, r16
    5912:	b7 fe       	sbrs	r11, 7
    5914:	07 c0       	rjmp	.+14     	; 0x5924 <vfprintf+0x2ac>
    5916:	60 81       	ld	r22, Z
    5918:	71 81       	ldd	r23, Z+1	; 0x01
    591a:	82 81       	ldd	r24, Z+2	; 0x02
    591c:	93 81       	ldd	r25, Z+3	; 0x03
    591e:	0c 5f       	subi	r16, 0xFC	; 252
    5920:	1f 4f       	sbci	r17, 0xFF	; 255
    5922:	06 c0       	rjmp	.+12     	; 0x5930 <vfprintf+0x2b8>
    5924:	60 81       	ld	r22, Z
    5926:	71 81       	ldd	r23, Z+1	; 0x01
    5928:	80 e0       	ldi	r24, 0x00	; 0
    592a:	90 e0       	ldi	r25, 0x00	; 0
    592c:	0e 5f       	subi	r16, 0xFE	; 254
    592e:	1f 4f       	sbci	r17, 0xFF	; 255
    5930:	a3 01       	movw	r20, r6
    5932:	f1 d0       	rcall	.+482    	; 0x5b16 <__ultoa_invert>
    5934:	88 2e       	mov	r8, r24
    5936:	86 18       	sub	r8, r6
    5938:	fb 2d       	mov	r31, r11
    593a:	ff 77       	andi	r31, 0x7F	; 127
    593c:	3f 2e       	mov	r3, r31
    593e:	36 fe       	sbrs	r3, 6
    5940:	0d c0       	rjmp	.+26     	; 0x595c <vfprintf+0x2e4>
    5942:	23 2d       	mov	r18, r3
    5944:	2e 7f       	andi	r18, 0xFE	; 254
    5946:	a2 2e       	mov	r10, r18
    5948:	89 14       	cp	r8, r9
    594a:	58 f4       	brcc	.+22     	; 0x5962 <vfprintf+0x2ea>
    594c:	34 fe       	sbrs	r3, 4
    594e:	0b c0       	rjmp	.+22     	; 0x5966 <vfprintf+0x2ee>
    5950:	32 fc       	sbrc	r3, 2
    5952:	09 c0       	rjmp	.+18     	; 0x5966 <vfprintf+0x2ee>
    5954:	83 2d       	mov	r24, r3
    5956:	8e 7e       	andi	r24, 0xEE	; 238
    5958:	a8 2e       	mov	r10, r24
    595a:	05 c0       	rjmp	.+10     	; 0x5966 <vfprintf+0x2ee>
    595c:	b8 2c       	mov	r11, r8
    595e:	a3 2c       	mov	r10, r3
    5960:	03 c0       	rjmp	.+6      	; 0x5968 <vfprintf+0x2f0>
    5962:	b8 2c       	mov	r11, r8
    5964:	01 c0       	rjmp	.+2      	; 0x5968 <vfprintf+0x2f0>
    5966:	b9 2c       	mov	r11, r9
    5968:	a4 fe       	sbrs	r10, 4
    596a:	0f c0       	rjmp	.+30     	; 0x598a <vfprintf+0x312>
    596c:	fe 01       	movw	r30, r28
    596e:	e8 0d       	add	r30, r8
    5970:	f1 1d       	adc	r31, r1
    5972:	80 81       	ld	r24, Z
    5974:	80 33       	cpi	r24, 0x30	; 48
    5976:	21 f4       	brne	.+8      	; 0x5980 <vfprintf+0x308>
    5978:	9a 2d       	mov	r25, r10
    597a:	99 7e       	andi	r25, 0xE9	; 233
    597c:	a9 2e       	mov	r10, r25
    597e:	09 c0       	rjmp	.+18     	; 0x5992 <vfprintf+0x31a>
    5980:	a2 fe       	sbrs	r10, 2
    5982:	06 c0       	rjmp	.+12     	; 0x5990 <vfprintf+0x318>
    5984:	b3 94       	inc	r11
    5986:	b3 94       	inc	r11
    5988:	04 c0       	rjmp	.+8      	; 0x5992 <vfprintf+0x31a>
    598a:	8a 2d       	mov	r24, r10
    598c:	86 78       	andi	r24, 0x86	; 134
    598e:	09 f0       	breq	.+2      	; 0x5992 <vfprintf+0x31a>
    5990:	b3 94       	inc	r11
    5992:	a3 fc       	sbrc	r10, 3
    5994:	10 c0       	rjmp	.+32     	; 0x59b6 <vfprintf+0x33e>
    5996:	a0 fe       	sbrs	r10, 0
    5998:	06 c0       	rjmp	.+12     	; 0x59a6 <vfprintf+0x32e>
    599a:	b2 14       	cp	r11, r2
    599c:	80 f4       	brcc	.+32     	; 0x59be <vfprintf+0x346>
    599e:	28 0c       	add	r2, r8
    59a0:	92 2c       	mov	r9, r2
    59a2:	9b 18       	sub	r9, r11
    59a4:	0d c0       	rjmp	.+26     	; 0x59c0 <vfprintf+0x348>
    59a6:	b2 14       	cp	r11, r2
    59a8:	58 f4       	brcc	.+22     	; 0x59c0 <vfprintf+0x348>
    59aa:	b6 01       	movw	r22, r12
    59ac:	80 e2       	ldi	r24, 0x20	; 32
    59ae:	90 e0       	ldi	r25, 0x00	; 0
    59b0:	76 d0       	rcall	.+236    	; 0x5a9e <fputc>
    59b2:	b3 94       	inc	r11
    59b4:	f8 cf       	rjmp	.-16     	; 0x59a6 <vfprintf+0x32e>
    59b6:	b2 14       	cp	r11, r2
    59b8:	18 f4       	brcc	.+6      	; 0x59c0 <vfprintf+0x348>
    59ba:	2b 18       	sub	r2, r11
    59bc:	02 c0       	rjmp	.+4      	; 0x59c2 <vfprintf+0x34a>
    59be:	98 2c       	mov	r9, r8
    59c0:	21 2c       	mov	r2, r1
    59c2:	a4 fe       	sbrs	r10, 4
    59c4:	0f c0       	rjmp	.+30     	; 0x59e4 <vfprintf+0x36c>
    59c6:	b6 01       	movw	r22, r12
    59c8:	80 e3       	ldi	r24, 0x30	; 48
    59ca:	90 e0       	ldi	r25, 0x00	; 0
    59cc:	68 d0       	rcall	.+208    	; 0x5a9e <fputc>
    59ce:	a2 fe       	sbrs	r10, 2
    59d0:	16 c0       	rjmp	.+44     	; 0x59fe <vfprintf+0x386>
    59d2:	a1 fc       	sbrc	r10, 1
    59d4:	03 c0       	rjmp	.+6      	; 0x59dc <vfprintf+0x364>
    59d6:	88 e7       	ldi	r24, 0x78	; 120
    59d8:	90 e0       	ldi	r25, 0x00	; 0
    59da:	02 c0       	rjmp	.+4      	; 0x59e0 <vfprintf+0x368>
    59dc:	88 e5       	ldi	r24, 0x58	; 88
    59de:	90 e0       	ldi	r25, 0x00	; 0
    59e0:	b6 01       	movw	r22, r12
    59e2:	0c c0       	rjmp	.+24     	; 0x59fc <vfprintf+0x384>
    59e4:	8a 2d       	mov	r24, r10
    59e6:	86 78       	andi	r24, 0x86	; 134
    59e8:	51 f0       	breq	.+20     	; 0x59fe <vfprintf+0x386>
    59ea:	a1 fe       	sbrs	r10, 1
    59ec:	02 c0       	rjmp	.+4      	; 0x59f2 <vfprintf+0x37a>
    59ee:	8b e2       	ldi	r24, 0x2B	; 43
    59f0:	01 c0       	rjmp	.+2      	; 0x59f4 <vfprintf+0x37c>
    59f2:	80 e2       	ldi	r24, 0x20	; 32
    59f4:	a7 fc       	sbrc	r10, 7
    59f6:	8d e2       	ldi	r24, 0x2D	; 45
    59f8:	b6 01       	movw	r22, r12
    59fa:	90 e0       	ldi	r25, 0x00	; 0
    59fc:	50 d0       	rcall	.+160    	; 0x5a9e <fputc>
    59fe:	89 14       	cp	r8, r9
    5a00:	30 f4       	brcc	.+12     	; 0x5a0e <vfprintf+0x396>
    5a02:	b6 01       	movw	r22, r12
    5a04:	80 e3       	ldi	r24, 0x30	; 48
    5a06:	90 e0       	ldi	r25, 0x00	; 0
    5a08:	4a d0       	rcall	.+148    	; 0x5a9e <fputc>
    5a0a:	9a 94       	dec	r9
    5a0c:	f8 cf       	rjmp	.-16     	; 0x59fe <vfprintf+0x386>
    5a0e:	8a 94       	dec	r8
    5a10:	f3 01       	movw	r30, r6
    5a12:	e8 0d       	add	r30, r8
    5a14:	f1 1d       	adc	r31, r1
    5a16:	80 81       	ld	r24, Z
    5a18:	b6 01       	movw	r22, r12
    5a1a:	90 e0       	ldi	r25, 0x00	; 0
    5a1c:	40 d0       	rcall	.+128    	; 0x5a9e <fputc>
    5a1e:	81 10       	cpse	r8, r1
    5a20:	f6 cf       	rjmp	.-20     	; 0x5a0e <vfprintf+0x396>
    5a22:	22 20       	and	r2, r2
    5a24:	09 f4       	brne	.+2      	; 0x5a28 <vfprintf+0x3b0>
    5a26:	4e ce       	rjmp	.-868    	; 0x56c4 <vfprintf+0x4c>
    5a28:	b6 01       	movw	r22, r12
    5a2a:	80 e2       	ldi	r24, 0x20	; 32
    5a2c:	90 e0       	ldi	r25, 0x00	; 0
    5a2e:	37 d0       	rcall	.+110    	; 0x5a9e <fputc>
    5a30:	2a 94       	dec	r2
    5a32:	f7 cf       	rjmp	.-18     	; 0x5a22 <vfprintf+0x3aa>
    5a34:	f6 01       	movw	r30, r12
    5a36:	86 81       	ldd	r24, Z+6	; 0x06
    5a38:	97 81       	ldd	r25, Z+7	; 0x07
    5a3a:	02 c0       	rjmp	.+4      	; 0x5a40 <vfprintf+0x3c8>
    5a3c:	8f ef       	ldi	r24, 0xFF	; 255
    5a3e:	9f ef       	ldi	r25, 0xFF	; 255
    5a40:	2b 96       	adiw	r28, 0x0b	; 11
    5a42:	0f b6       	in	r0, 0x3f	; 63
    5a44:	f8 94       	cli
    5a46:	de bf       	out	0x3e, r29	; 62
    5a48:	0f be       	out	0x3f, r0	; 63
    5a4a:	cd bf       	out	0x3d, r28	; 61
    5a4c:	df 91       	pop	r29
    5a4e:	cf 91       	pop	r28
    5a50:	1f 91       	pop	r17
    5a52:	0f 91       	pop	r16
    5a54:	ff 90       	pop	r15
    5a56:	ef 90       	pop	r14
    5a58:	df 90       	pop	r13
    5a5a:	cf 90       	pop	r12
    5a5c:	bf 90       	pop	r11
    5a5e:	af 90       	pop	r10
    5a60:	9f 90       	pop	r9
    5a62:	8f 90       	pop	r8
    5a64:	7f 90       	pop	r7
    5a66:	6f 90       	pop	r6
    5a68:	5f 90       	pop	r5
    5a6a:	4f 90       	pop	r4
    5a6c:	3f 90       	pop	r3
    5a6e:	2f 90       	pop	r2
    5a70:	08 95       	ret

00005a72 <strnlen_P>:
    5a72:	fc 01       	movw	r30, r24
    5a74:	05 90       	lpm	r0, Z+
    5a76:	61 50       	subi	r22, 0x01	; 1
    5a78:	70 40       	sbci	r23, 0x00	; 0
    5a7a:	01 10       	cpse	r0, r1
    5a7c:	d8 f7       	brcc	.-10     	; 0x5a74 <strnlen_P+0x2>
    5a7e:	80 95       	com	r24
    5a80:	90 95       	com	r25
    5a82:	8e 0f       	add	r24, r30
    5a84:	9f 1f       	adc	r25, r31
    5a86:	08 95       	ret

00005a88 <strnlen>:
    5a88:	fc 01       	movw	r30, r24
    5a8a:	61 50       	subi	r22, 0x01	; 1
    5a8c:	70 40       	sbci	r23, 0x00	; 0
    5a8e:	01 90       	ld	r0, Z+
    5a90:	01 10       	cpse	r0, r1
    5a92:	d8 f7       	brcc	.-10     	; 0x5a8a <strnlen+0x2>
    5a94:	80 95       	com	r24
    5a96:	90 95       	com	r25
    5a98:	8e 0f       	add	r24, r30
    5a9a:	9f 1f       	adc	r25, r31
    5a9c:	08 95       	ret

00005a9e <fputc>:
    5a9e:	0f 93       	push	r16
    5aa0:	1f 93       	push	r17
    5aa2:	cf 93       	push	r28
    5aa4:	df 93       	push	r29
    5aa6:	fb 01       	movw	r30, r22
    5aa8:	23 81       	ldd	r18, Z+3	; 0x03
    5aaa:	21 fd       	sbrc	r18, 1
    5aac:	03 c0       	rjmp	.+6      	; 0x5ab4 <fputc+0x16>
    5aae:	8f ef       	ldi	r24, 0xFF	; 255
    5ab0:	9f ef       	ldi	r25, 0xFF	; 255
    5ab2:	2c c0       	rjmp	.+88     	; 0x5b0c <fputc+0x6e>
    5ab4:	22 ff       	sbrs	r18, 2
    5ab6:	16 c0       	rjmp	.+44     	; 0x5ae4 <fputc+0x46>
    5ab8:	46 81       	ldd	r20, Z+6	; 0x06
    5aba:	57 81       	ldd	r21, Z+7	; 0x07
    5abc:	24 81       	ldd	r18, Z+4	; 0x04
    5abe:	35 81       	ldd	r19, Z+5	; 0x05
    5ac0:	42 17       	cp	r20, r18
    5ac2:	53 07       	cpc	r21, r19
    5ac4:	44 f4       	brge	.+16     	; 0x5ad6 <fputc+0x38>
    5ac6:	a0 81       	ld	r26, Z
    5ac8:	b1 81       	ldd	r27, Z+1	; 0x01
    5aca:	9d 01       	movw	r18, r26
    5acc:	2f 5f       	subi	r18, 0xFF	; 255
    5ace:	3f 4f       	sbci	r19, 0xFF	; 255
    5ad0:	31 83       	std	Z+1, r19	; 0x01
    5ad2:	20 83       	st	Z, r18
    5ad4:	8c 93       	st	X, r24
    5ad6:	26 81       	ldd	r18, Z+6	; 0x06
    5ad8:	37 81       	ldd	r19, Z+7	; 0x07
    5ada:	2f 5f       	subi	r18, 0xFF	; 255
    5adc:	3f 4f       	sbci	r19, 0xFF	; 255
    5ade:	37 83       	std	Z+7, r19	; 0x07
    5ae0:	26 83       	std	Z+6, r18	; 0x06
    5ae2:	14 c0       	rjmp	.+40     	; 0x5b0c <fputc+0x6e>
    5ae4:	8b 01       	movw	r16, r22
    5ae6:	ec 01       	movw	r28, r24
    5ae8:	fb 01       	movw	r30, r22
    5aea:	00 84       	ldd	r0, Z+8	; 0x08
    5aec:	f1 85       	ldd	r31, Z+9	; 0x09
    5aee:	e0 2d       	mov	r30, r0
    5af0:	19 95       	eicall
    5af2:	89 2b       	or	r24, r25
    5af4:	e1 f6       	brne	.-72     	; 0x5aae <fputc+0x10>
    5af6:	d8 01       	movw	r26, r16
    5af8:	16 96       	adiw	r26, 0x06	; 6
    5afa:	8d 91       	ld	r24, X+
    5afc:	9c 91       	ld	r25, X
    5afe:	17 97       	sbiw	r26, 0x07	; 7
    5b00:	01 96       	adiw	r24, 0x01	; 1
    5b02:	17 96       	adiw	r26, 0x07	; 7
    5b04:	9c 93       	st	X, r25
    5b06:	8e 93       	st	-X, r24
    5b08:	16 97       	sbiw	r26, 0x06	; 6
    5b0a:	ce 01       	movw	r24, r28
    5b0c:	df 91       	pop	r29
    5b0e:	cf 91       	pop	r28
    5b10:	1f 91       	pop	r17
    5b12:	0f 91       	pop	r16
    5b14:	08 95       	ret

00005b16 <__ultoa_invert>:
    5b16:	fa 01       	movw	r30, r20
    5b18:	aa 27       	eor	r26, r26
    5b1a:	28 30       	cpi	r18, 0x08	; 8
    5b1c:	51 f1       	breq	.+84     	; 0x5b72 <__ultoa_invert+0x5c>
    5b1e:	20 31       	cpi	r18, 0x10	; 16
    5b20:	81 f1       	breq	.+96     	; 0x5b82 <__ultoa_invert+0x6c>
    5b22:	e8 94       	clt
    5b24:	6f 93       	push	r22
    5b26:	6e 7f       	andi	r22, 0xFE	; 254
    5b28:	6e 5f       	subi	r22, 0xFE	; 254
    5b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    5b2c:	8f 4f       	sbci	r24, 0xFF	; 255
    5b2e:	9f 4f       	sbci	r25, 0xFF	; 255
    5b30:	af 4f       	sbci	r26, 0xFF	; 255
    5b32:	b1 e0       	ldi	r27, 0x01	; 1
    5b34:	3e d0       	rcall	.+124    	; 0x5bb2 <__ultoa_invert+0x9c>
    5b36:	b4 e0       	ldi	r27, 0x04	; 4
    5b38:	3c d0       	rcall	.+120    	; 0x5bb2 <__ultoa_invert+0x9c>
    5b3a:	67 0f       	add	r22, r23
    5b3c:	78 1f       	adc	r23, r24
    5b3e:	89 1f       	adc	r24, r25
    5b40:	9a 1f       	adc	r25, r26
    5b42:	a1 1d       	adc	r26, r1
    5b44:	68 0f       	add	r22, r24
    5b46:	79 1f       	adc	r23, r25
    5b48:	8a 1f       	adc	r24, r26
    5b4a:	91 1d       	adc	r25, r1
    5b4c:	a1 1d       	adc	r26, r1
    5b4e:	6a 0f       	add	r22, r26
    5b50:	71 1d       	adc	r23, r1
    5b52:	81 1d       	adc	r24, r1
    5b54:	91 1d       	adc	r25, r1
    5b56:	a1 1d       	adc	r26, r1
    5b58:	20 d0       	rcall	.+64     	; 0x5b9a <__ultoa_invert+0x84>
    5b5a:	09 f4       	brne	.+2      	; 0x5b5e <__ultoa_invert+0x48>
    5b5c:	68 94       	set
    5b5e:	3f 91       	pop	r19
    5b60:	2a e0       	ldi	r18, 0x0A	; 10
    5b62:	26 9f       	mul	r18, r22
    5b64:	11 24       	eor	r1, r1
    5b66:	30 19       	sub	r19, r0
    5b68:	30 5d       	subi	r19, 0xD0	; 208
    5b6a:	31 93       	st	Z+, r19
    5b6c:	de f6       	brtc	.-74     	; 0x5b24 <__ultoa_invert+0xe>
    5b6e:	cf 01       	movw	r24, r30
    5b70:	08 95       	ret
    5b72:	46 2f       	mov	r20, r22
    5b74:	47 70       	andi	r20, 0x07	; 7
    5b76:	40 5d       	subi	r20, 0xD0	; 208
    5b78:	41 93       	st	Z+, r20
    5b7a:	b3 e0       	ldi	r27, 0x03	; 3
    5b7c:	0f d0       	rcall	.+30     	; 0x5b9c <__ultoa_invert+0x86>
    5b7e:	c9 f7       	brne	.-14     	; 0x5b72 <__ultoa_invert+0x5c>
    5b80:	f6 cf       	rjmp	.-20     	; 0x5b6e <__ultoa_invert+0x58>
    5b82:	46 2f       	mov	r20, r22
    5b84:	4f 70       	andi	r20, 0x0F	; 15
    5b86:	40 5d       	subi	r20, 0xD0	; 208
    5b88:	4a 33       	cpi	r20, 0x3A	; 58
    5b8a:	18 f0       	brcs	.+6      	; 0x5b92 <__ultoa_invert+0x7c>
    5b8c:	49 5d       	subi	r20, 0xD9	; 217
    5b8e:	31 fd       	sbrc	r19, 1
    5b90:	40 52       	subi	r20, 0x20	; 32
    5b92:	41 93       	st	Z+, r20
    5b94:	02 d0       	rcall	.+4      	; 0x5b9a <__ultoa_invert+0x84>
    5b96:	a9 f7       	brne	.-22     	; 0x5b82 <__ultoa_invert+0x6c>
    5b98:	ea cf       	rjmp	.-44     	; 0x5b6e <__ultoa_invert+0x58>
    5b9a:	b4 e0       	ldi	r27, 0x04	; 4
    5b9c:	a6 95       	lsr	r26
    5b9e:	97 95       	ror	r25
    5ba0:	87 95       	ror	r24
    5ba2:	77 95       	ror	r23
    5ba4:	67 95       	ror	r22
    5ba6:	ba 95       	dec	r27
    5ba8:	c9 f7       	brne	.-14     	; 0x5b9c <__ultoa_invert+0x86>
    5baa:	00 97       	sbiw	r24, 0x00	; 0
    5bac:	61 05       	cpc	r22, r1
    5bae:	71 05       	cpc	r23, r1
    5bb0:	08 95       	ret
    5bb2:	9b 01       	movw	r18, r22
    5bb4:	ac 01       	movw	r20, r24
    5bb6:	0a 2e       	mov	r0, r26
    5bb8:	06 94       	lsr	r0
    5bba:	57 95       	ror	r21
    5bbc:	47 95       	ror	r20
    5bbe:	37 95       	ror	r19
    5bc0:	27 95       	ror	r18
    5bc2:	ba 95       	dec	r27
    5bc4:	c9 f7       	brne	.-14     	; 0x5bb8 <__ultoa_invert+0xa2>
    5bc6:	62 0f       	add	r22, r18
    5bc8:	73 1f       	adc	r23, r19
    5bca:	84 1f       	adc	r24, r20
    5bcc:	95 1f       	adc	r25, r21
    5bce:	a0 1d       	adc	r26, r0
    5bd0:	08 95       	ret

00005bd2 <_exit>:
    5bd2:	f8 94       	cli

00005bd4 <__stop_program>:
    5bd4:	ff cf       	rjmp	.-2      	; 0x5bd4 <__stop_program>
