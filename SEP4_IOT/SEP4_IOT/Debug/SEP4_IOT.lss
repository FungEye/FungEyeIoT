
SEP4_IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000588  00800200  00005aec  00005b80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005aec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ff4  00800788  00800788  00006108  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006108  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006164  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a00  00000000  00000000  000061a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c468  00000000  00000000  00006ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000030ee  00000000  00000000  0001300c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000624a  00000000  00000000  000160fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000023e8  00000000  00000000  0001c344  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003df0  00000000  00000000  0001e72c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b306  00000000  00000000  0002251c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000968  00000000  00000000  0002d822  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	03 c1       	rjmp	.+518    	; 0x20c <__bad_interrupt>
       6:	00 00       	nop
       8:	01 c1       	rjmp	.+514    	; 0x20c <__bad_interrupt>
       a:	00 00       	nop
       c:	ff c0       	rjmp	.+510    	; 0x20c <__bad_interrupt>
       e:	00 00       	nop
      10:	fd c0       	rjmp	.+506    	; 0x20c <__bad_interrupt>
      12:	00 00       	nop
      14:	fb c0       	rjmp	.+502    	; 0x20c <__bad_interrupt>
      16:	00 00       	nop
      18:	f9 c0       	rjmp	.+498    	; 0x20c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f7 c0       	rjmp	.+494    	; 0x20c <__bad_interrupt>
      1e:	00 00       	nop
      20:	f5 c0       	rjmp	.+490    	; 0x20c <__bad_interrupt>
      22:	00 00       	nop
      24:	f3 c0       	rjmp	.+486    	; 0x20c <__bad_interrupt>
      26:	00 00       	nop
      28:	f1 c0       	rjmp	.+482    	; 0x20c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ef c0       	rjmp	.+478    	; 0x20c <__bad_interrupt>
      2e:	00 00       	nop
      30:	8f c5       	rjmp	.+2846   	; 0xb50 <__vector_12>
      32:	00 00       	nop
      34:	eb c0       	rjmp	.+470    	; 0x20c <__bad_interrupt>
      36:	00 00       	nop
      38:	e9 c0       	rjmp	.+466    	; 0x20c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e7 c0       	rjmp	.+462    	; 0x20c <__bad_interrupt>
      3e:	00 00       	nop
      40:	e5 c0       	rjmp	.+458    	; 0x20c <__bad_interrupt>
      42:	00 00       	nop
      44:	e3 c0       	rjmp	.+454    	; 0x20c <__bad_interrupt>
      46:	00 00       	nop
      48:	e1 c0       	rjmp	.+450    	; 0x20c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	df c0       	rjmp	.+446    	; 0x20c <__bad_interrupt>
      4e:	00 00       	nop
      50:	dd c0       	rjmp	.+442    	; 0x20c <__bad_interrupt>
      52:	00 00       	nop
      54:	db c0       	rjmp	.+438    	; 0x20c <__bad_interrupt>
      56:	00 00       	nop
      58:	d9 c0       	rjmp	.+434    	; 0x20c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d7 c0       	rjmp	.+430    	; 0x20c <__bad_interrupt>
      5e:	00 00       	nop
      60:	d5 c0       	rjmp	.+426    	; 0x20c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 ad 20 	jmp	0x415a	; 0x415a <__vector_25>
      68:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <__vector_26>
      6c:	cf c0       	rjmp	.+414    	; 0x20c <__bad_interrupt>
      6e:	00 00       	nop
      70:	cd c0       	rjmp	.+410    	; 0x20c <__bad_interrupt>
      72:	00 00       	nop
      74:	cb c0       	rjmp	.+406    	; 0x20c <__bad_interrupt>
      76:	00 00       	nop
      78:	c9 c0       	rjmp	.+402    	; 0x20c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c7 c0       	rjmp	.+398    	; 0x20c <__bad_interrupt>
      7e:	00 00       	nop
      80:	c5 c0       	rjmp	.+394    	; 0x20c <__bad_interrupt>
      82:	00 00       	nop
      84:	c3 c0       	rjmp	.+390    	; 0x20c <__bad_interrupt>
      86:	00 00       	nop
      88:	c1 c0       	rjmp	.+386    	; 0x20c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	bf c0       	rjmp	.+382    	; 0x20c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 43 21 	jmp	0x4286	; 0x4286 <__vector_36>
      94:	0c 94 95 21 	jmp	0x432a	; 0x432a <__vector_37>
      98:	b9 c0       	rjmp	.+370    	; 0x20c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 e0 25 	jmp	0x4bc0	; 0x4bc0 <__vector_39>
      a0:	b5 c0       	rjmp	.+362    	; 0x20c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b3 c0       	rjmp	.+358    	; 0x20c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b1 c0       	rjmp	.+354    	; 0x20c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	af c0       	rjmp	.+350    	; 0x20c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ad c0       	rjmp	.+346    	; 0x20c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ab c0       	rjmp	.+342    	; 0x20c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	a9 c0       	rjmp	.+338    	; 0x20c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a7 c0       	rjmp	.+334    	; 0x20c <__bad_interrupt>
      be:	00 00       	nop
      c0:	a5 c0       	rjmp	.+330    	; 0x20c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a3 c0       	rjmp	.+326    	; 0x20c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a1 c0       	rjmp	.+322    	; 0x20c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 d9 21 	jmp	0x43b2	; 0x43b2 <__vector_51>
      d0:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__vector_52>
      d4:	9b c0       	rjmp	.+310    	; 0x20c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 6f 22 	jmp	0x44de	; 0x44de <__vector_54>
      dc:	0c 94 c1 22 	jmp	0x4582	; 0x4582 <__vector_55>
      e0:	95 c0       	rjmp	.+298    	; 0x20c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	88 18       	sub	r8, r8
      e6:	88 18       	sub	r8, r8
      e8:	88 18       	sub	r8, r8
      ea:	bf 18       	sub	r11, r15
      ec:	c7 18       	sub	r12, r7
      ee:	dc 18       	sub	r13, r12
      f0:	88 18       	sub	r8, r8
      f2:	88 18       	sub	r8, r8
      f4:	bf 18       	sub	r11, r15
      f6:	c7 18       	sub	r12, r7
      f8:	02 26       	eor	r0, r18
      fa:	72 26       	eor	r7, r18
      fc:	72 26       	eor	r7, r18
      fe:	72 26       	eor	r7, r18
     100:	72 26       	eor	r7, r18
     102:	72 26       	eor	r7, r18
     104:	72 26       	eor	r7, r18
     106:	72 26       	eor	r7, r18
     108:	02 26       	eor	r0, r18
     10a:	72 26       	eor	r7, r18
     10c:	72 26       	eor	r7, r18
     10e:	72 26       	eor	r7, r18
     110:	72 26       	eor	r7, r18
     112:	72 26       	eor	r7, r18
     114:	72 26       	eor	r7, r18
     116:	72 26       	eor	r7, r18
     118:	04 26       	eor	r0, r20
     11a:	72 26       	eor	r7, r18
     11c:	72 26       	eor	r7, r18
     11e:	72 26       	eor	r7, r18
     120:	72 26       	eor	r7, r18
     122:	72 26       	eor	r7, r18
     124:	72 26       	eor	r7, r18
     126:	72 26       	eor	r7, r18
     128:	72 26       	eor	r7, r18
     12a:	72 26       	eor	r7, r18
     12c:	72 26       	eor	r7, r18
     12e:	72 26       	eor	r7, r18
     130:	72 26       	eor	r7, r18
     132:	72 26       	eor	r7, r18
     134:	72 26       	eor	r7, r18
     136:	72 26       	eor	r7, r18
     138:	04 26       	eor	r0, r20
     13a:	72 26       	eor	r7, r18
     13c:	72 26       	eor	r7, r18
     13e:	72 26       	eor	r7, r18
     140:	72 26       	eor	r7, r18
     142:	72 26       	eor	r7, r18
     144:	72 26       	eor	r7, r18
     146:	72 26       	eor	r7, r18
     148:	72 26       	eor	r7, r18
     14a:	72 26       	eor	r7, r18
     14c:	72 26       	eor	r7, r18
     14e:	72 26       	eor	r7, r18
     150:	72 26       	eor	r7, r18
     152:	72 26       	eor	r7, r18
     154:	72 26       	eor	r7, r18
     156:	72 26       	eor	r7, r18
     158:	6e 26       	eor	r6, r30
     15a:	72 26       	eor	r7, r18
     15c:	72 26       	eor	r7, r18
     15e:	72 26       	eor	r7, r18
     160:	72 26       	eor	r7, r18
     162:	72 26       	eor	r7, r18
     164:	72 26       	eor	r7, r18
     166:	72 26       	eor	r7, r18
     168:	39 26       	eor	r3, r25
     16a:	72 26       	eor	r7, r18
     16c:	72 26       	eor	r7, r18
     16e:	72 26       	eor	r7, r18
     170:	72 26       	eor	r7, r18
     172:	72 26       	eor	r7, r18
     174:	72 26       	eor	r7, r18
     176:	72 26       	eor	r7, r18
     178:	72 26       	eor	r7, r18
     17a:	72 26       	eor	r7, r18
     17c:	72 26       	eor	r7, r18
     17e:	72 26       	eor	r7, r18
     180:	72 26       	eor	r7, r18
     182:	72 26       	eor	r7, r18
     184:	72 26       	eor	r7, r18
     186:	72 26       	eor	r7, r18
     188:	2d 26       	eor	r2, r29
     18a:	72 26       	eor	r7, r18
     18c:	72 26       	eor	r7, r18
     18e:	72 26       	eor	r7, r18
     190:	72 26       	eor	r7, r18
     192:	72 26       	eor	r7, r18
     194:	72 26       	eor	r7, r18
     196:	72 26       	eor	r7, r18
     198:	51 26       	eor	r5, r17

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <prvCheckTasksWaitingTermination>
     19e:	80 91 ab 15 	lds	r24, 0x15AB	; 0x8015ab <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	0e d4       	rcall	.+2076   	; 0x9c4 <vPortYield>
     1a8:	0e 94 05 19 	call	0x320a	; 0x320a <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 51 18 	call	0x30a2	; 0x30a2 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	17 e0       	ldi	r17, 0x07	; 7
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	ec ee       	ldi	r30, 0xEC	; 236
     1e4:	fa e5       	ldi	r31, 0x5A	; 90
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a8 38       	cpi	r26, 0x88	; 136
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	27 e1       	ldi	r18, 0x17	; 23
     1f8:	a8 e8       	ldi	r26, 0x88	; 136
     1fa:	b7 e0       	ldi	r27, 0x07	; 7
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	ac 37       	cpi	r26, 0x7C	; 124
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	a4 d1       	rcall	.+840    	; 0x550 <main>
     208:	0c 94 74 2d 	jmp	0x5ae8	; 0x5ae8 <_exit>

0000020c <__bad_interrupt>:
     20c:	f9 ce       	rjmp	.-526    	; 0x0 <__vectors>

0000020e <co2Task_run>:
{
	mh_z19_returnCode_t rc;

	for(;;)
	{
		rc = mh_z19_takeMeassuring();
     20e:	0e 94 2b 1f 	call	0x3e56	; 0x3e56 <mh_z19_takeMeassuring>
		if (rc != MHZ19_OK)
     212:	88 23       	and	r24, r24
     214:	21 f0       	breq	.+8      	; 0x21e <co2Task_run+0x10>
		{
			puts("CO2 MEASURING FAILED");
     216:	8f e6       	ldi	r24, 0x6F	; 111
     218:	92 e0       	ldi	r25, 0x02	; 2
     21a:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <puts>
		}
		co2 = mh_z19_getCo2Ppm;
     21e:	8a e5       	ldi	r24, 0x5A	; 90
     220:	9f e1       	ldi	r25, 0x1F	; 31
     222:	90 93 6d 17 	sts	0x176D, r25	; 0x80176d <co2+0x1>
     226:	80 93 6c 17 	sts	0x176C, r24	; 0x80176c <co2>
		printf("CO2: %d\n",co2);
     22a:	9f 93       	push	r25
     22c:	8f 93       	push	r24
     22e:	84 e8       	ldi	r24, 0x84	; 132
     230:	92 e0       	ldi	r25, 0x02	; 2
     232:	9f 93       	push	r25
     234:	8f 93       	push	r24
     236:	0e 94 56 2a 	call	0x54ac	; 0x54ac <printf>
		vTaskDelay(pdMS_TO_TICKS(6000));
     23a:	64 e7       	ldi	r22, 0x74	; 116
     23c:	71 e0       	ldi	r23, 0x01	; 1
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0e 94 a4 10 	call	0x2148	; 0x2148 <vTaskDelay>
	}
     246:	0f 90       	pop	r0
     248:	0f 90       	pop	r0
     24a:	0f 90       	pop	r0
     24c:	0f 90       	pop	r0
     24e:	df cf       	rjmp	.-66     	; 0x20e <co2Task_run>

00000250 <_run>:
// Main task for CO2
static void _run(void* params) {
	// In future we could use this for some INIT value
	
	while (1) {
		co2Task_run();
     250:	de df       	rcall	.-68     	; 0x20e <co2Task_run>

00000252 <co2Task_create>:
		vTaskDelay(pdMS_TO_TICKS(6000));
	}
}

// Creating Task
void co2Task_create(){
     252:	ef 92       	push	r14
     254:	ff 92       	push	r15
     256:	0f 93       	push	r16
	xTaskCreate(
     258:	e1 2c       	mov	r14, r1
     25a:	f1 2c       	mov	r15, r1
     25c:	01 e0       	ldi	r16, 0x01	; 1
     25e:	20 e0       	ldi	r18, 0x00	; 0
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	40 ec       	ldi	r20, 0xC0	; 192
     264:	50 e0       	ldi	r21, 0x00	; 0
     266:	6d e8       	ldi	r22, 0x8D	; 141
     268:	72 e0       	ldi	r23, 0x02	; 2
     26a:	88 e2       	ldi	r24, 0x28	; 40
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <xTaskCreate>
	configMINIMAL_STACK_SIZE,	   // This stack size can be checked & adjusted by reading the Stack Highwater
	NULL,					   	   // (void *pvParameters)
	1,							   //the priority of the task
	NULL							   //No TaskHandle created.
	);
}
     272:	0f 91       	pop	r16
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	08 95       	ret

0000027a <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
     27a:	0f 93       	push	r16
     27c:	1f 93       	push	r17
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
     286:	64 97       	sbiw	r28, 0x14	; 20
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	f8 94       	cli
     28c:	de bf       	out	0x3e, r29	; 62
     28e:	0f be       	out	0x3f, r0	; 63
     290:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	0e 94 78 24 	call	0x48f0	; 0x48f0 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
     298:	0e 94 ad 1b 	call	0x375a	; 0x375a <lora_driver_rn2483FactoryReset>
     29c:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <lora_driver_mapReturnCodeToText>
     2a0:	9f 93       	push	r25
     2a2:	8f 93       	push	r24
     2a4:	81 e9       	ldi	r24, 0x91	; 145
     2a6:	92 e0       	ldi	r25, 0x02	; 2
     2a8:	9f 93       	push	r25
     2aa:	8f 93       	push	r24
     2ac:	0e 94 56 2a 	call	0x54ac	; 0x54ac <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
     2b0:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <lora_driver_configureToEu868>
     2b4:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <lora_driver_mapReturnCodeToText>
     2b8:	9f 93       	push	r25
     2ba:	8f 93       	push	r24
     2bc:	84 ea       	ldi	r24, 0xA4	; 164
     2be:	92 e0       	ldi	r25, 0x02	; 2
     2c0:	9f 93       	push	r25
     2c2:	8f 93       	push	r24
     2c4:	0e 94 56 2a 	call	0x54ac	; 0x54ac <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
     2c8:	8e 01       	movw	r16, r28
     2ca:	0f 5f       	subi	r16, 0xFF	; 255
     2cc:	1f 4f       	sbci	r17, 0xFF	; 255
     2ce:	c8 01       	movw	r24, r16
     2d0:	0e 94 bf 1b 	call	0x377e	; 0x377e <lora_driver_getRn2483Hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
     2d4:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <lora_driver_mapReturnCodeToText>
     2d8:	1f 93       	push	r17
     2da:	0f 93       	push	r16
     2dc:	9f 93       	push	r25
     2de:	8f 93       	push	r24
     2e0:	8d eb       	ldi	r24, 0xBD	; 189
     2e2:	92 e0       	ldi	r25, 0x02	; 2
     2e4:	9f 93       	push	r25
     2e6:	8f 93       	push	r24
     2e8:	0e 94 56 2a 	call	0x54ac	; 0x54ac <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
     2ec:	c8 01       	movw	r24, r16
     2ee:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <lora_driver_setDeviceIdentifier>
     2f2:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <lora_driver_mapReturnCodeToText>
     2f6:	9f 93       	push	r25
     2f8:	8f 93       	push	r24
     2fa:	1f 93       	push	r17
     2fc:	0f 93       	push	r16
     2fe:	81 ed       	ldi	r24, 0xD1	; 209
     300:	92 e0       	ldi	r25, 0x02	; 2
     302:	9f 93       	push	r25
     304:	8f 93       	push	r24
     306:	0e 94 56 2a 	call	0x54ac	; 0x54ac <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
     30a:	a8 01       	movw	r20, r16
     30c:	66 ee       	ldi	r22, 0xE6	; 230
     30e:	72 e0       	ldi	r23, 0x02	; 2
     310:	87 e0       	ldi	r24, 0x07	; 7
     312:	93 e0       	ldi	r25, 0x03	; 3
     314:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <lora_driver_setOtaaIdentity>
     318:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <lora_driver_mapReturnCodeToText>
     31c:	9f 93       	push	r25
     31e:	8f 93       	push	r24
     320:	1f 93       	push	r17
     322:	0f 93       	push	r16
     324:	86 ee       	ldi	r24, 0xE6	; 230
     326:	92 e0       	ldi	r25, 0x02	; 2
     328:	9f 93       	push	r25
     32a:	8f 93       	push	r24
     32c:	87 e0       	ldi	r24, 0x07	; 7
     32e:	93 e0       	ldi	r25, 0x03	; 3
     330:	9f 93       	push	r25
     332:	8f 93       	push	r24
     334:	88 e1       	ldi	r24, 0x18	; 24
     336:	93 e0       	ldi	r25, 0x03	; 3
     338:	9f 93       	push	r25
     33a:	8f 93       	push	r24
     33c:	0e 94 56 2a 	call	0x54ac	; 0x54ac <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
     340:	0e 94 0e 1c 	call	0x381c	; 0x381c <lora_driver_saveMac>
     344:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <lora_driver_mapReturnCodeToText>
     348:	9f 93       	push	r25
     34a:	8f 93       	push	r24
     34c:	8e e4       	ldi	r24, 0x4E	; 78
     34e:	93 e0       	ldi	r25, 0x03	; 3
     350:	9f 93       	push	r25
     352:	8f 93       	push	r24
     354:	0e 94 56 2a 	call	0x54ac	; 0x54ac <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <lora_driver_setAdaptiveDataRate>
     368:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <lora_driver_mapReturnCodeToText>
     36c:	9f 93       	push	r25
     36e:	8f 93       	push	r24
     370:	8d e5       	ldi	r24, 0x5D	; 93
     372:	93 e0       	ldi	r25, 0x03	; 3
     374:	9f 93       	push	r25
     376:	8f 93       	push	r24
     378:	0e 94 56 2a 	call	0x54ac	; 0x54ac <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
     37c:	84 ef       	ldi	r24, 0xF4	; 244
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <lora_driver_setReceiveDelay>
     384:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <lora_driver_mapReturnCodeToText>
     388:	9f 93       	push	r25
     38a:	8f 93       	push	r24
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	8f 93       	push	r24
     390:	84 ef       	ldi	r24, 0xF4	; 244
     392:	8f 93       	push	r24
     394:	8e e7       	ldi	r24, 0x7E	; 126
     396:	93 e0       	ldi	r25, 0x03	; 3
     398:	9f 93       	push	r25
     39a:	8f 93       	push	r24
     39c:	0e 94 56 2a 	call	0x54ac	; 0x54ac <printf>
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	f8 94       	cli
     3a4:	de bf       	out	0x3e, r29	; 62
     3a6:	0f be       	out	0x3f, r0	; 63
     3a8:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
     3aa:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	0e 94 14 1c 	call	0x3828	; 0x3828 <lora_driver_join>
     3b2:	08 2f       	mov	r16, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
     3b4:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <lora_driver_mapReturnCodeToText>
     3b8:	9f 93       	push	r25
     3ba:	8f 93       	push	r24
     3bc:	1f 92       	push	r1
     3be:	1f 93       	push	r17
     3c0:	8e e9       	ldi	r24, 0x9E	; 158
     3c2:	93 e0       	ldi	r25, 0x03	; 3
     3c4:	9f 93       	push	r25
     3c6:	8f 93       	push	r24
     3c8:	0e 94 56 2a 	call	0x54ac	; 0x54ac <printf>

		if ( rc != LORA_ACCEPTED)
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	08 30       	cpi	r16, 0x08	; 8
     3da:	59 f0       	breq	.+22     	; 0x3f2 <_lora_setup+0x178>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <status_leds_longPuls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     3e2:	66 e3       	ldi	r22, 0x36	; 54
     3e4:	71 e0       	ldi	r23, 0x01	; 1
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 a4 10 	call	0x2148	; 0x2148 <vTaskDelay>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     3ee:	11 50       	subi	r17, 0x01	; 1
     3f0:	e9 f6       	brne	.-70     	; 0x3ac <_lora_setup+0x132>

	if (rc == LORA_ACCEPTED)
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	21 f4       	brne	.+8      	; 0x3fe <_lora_setup+0x184>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	0e 94 be 24 	call	0x497c	; 0x497c <status_leds_ledOn>
		while (1)
		{
			taskYIELD();
		}
	}
}
     3fc:	08 c0       	rjmp	.+16     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	0e 94 cd 24 	call	0x499a	; 0x499a <status_leds_ledOff>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	0e 94 9b 24 	call	0x4936	; 0x4936 <status_leds_fastBlink>

		// Lets stay here
		while (1)
		{
			taskYIELD();
     40a:	dc d2       	rcall	.+1464   	; 0x9c4 <vPortYield>
     40c:	fe cf       	rjmp	.-4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		}
	}
}
     40e:	64 96       	adiw	r28, 0x14	; 20
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	08 95       	ret

00000424 <lora_handler_task>:

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	00 d0       	rcall	.+0      	; 0x42a <lora_handler_task+0x6>
     42a:	1f 92       	push	r1
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	0e 94 9f 1b 	call	0x373e	; 0x373e <lora_driver_resetRn2483>
	vTaskDelay(2);
     436:	62 e0       	ldi	r22, 0x02	; 2
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 a4 10 	call	0x2148	; 0x2148 <vTaskDelay>
	lora_driver_resetRn2483(0);
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	0e 94 9f 1b 	call	0x373e	; 0x373e <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     448:	66 e9       	ldi	r22, 0x96	; 150
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 a4 10 	call	0x2148	; 0x2148 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
     454:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <lora_driver_flushBuffers>

	_lora_setup();
     458:	10 df       	rcall	.-480    	; 0x27a <_lora_setup>

	_uplink_payload.len = 6;
     45a:	e8 e8       	ldi	r30, 0x88	; 136
     45c:	f7 e0       	ldi	r31, 0x07	; 7
     45e:	86 e0       	ldi	r24, 0x06	; 6
     460:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.portNo = 2;
     462:	82 e0       	ldi	r24, 0x02	; 2
     464:	80 83       	st	Z, r24

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     466:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <xTaskGetTickCount>
     46a:	69 83       	std	Y+1, r22	; 0x01
     46c:	7a 83       	std	Y+2, r23	; 0x02
     46e:	8b 83       	std	Y+3, r24	; 0x03
     470:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     472:	48 ea       	ldi	r20, 0xA8	; 168
     474:	58 e4       	ldi	r21, 0x48	; 72
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	70 e0       	ldi	r23, 0x00	; 0
     47a:	ce 01       	movw	r24, r28
     47c:	01 96       	adiw	r24, 0x01	; 1
     47e:	0e 94 3f 10 	call	0x207e	; 0x207e <xTaskDelayUntil>

		// Some dummy payload
		uint16_t hum = humidity; // measured humidity
     482:	d0 90 70 17 	lds	r13, 0x1770	; 0x801770 <humidity>
     486:	c0 90 71 17 	lds	r12, 0x1771	; 0x801771 <humidity+0x1>
		int16_t temp = temperature; // measured temp
     48a:	10 91 6e 17 	lds	r17, 0x176E	; 0x80176e <temperature>
     48e:	00 91 6f 17 	lds	r16, 0x176F	; 0x80176f <temperature+0x1>
		uint16_t co2_ppm = co2; // measured CO2
     492:	f0 90 6c 17 	lds	r15, 0x176C	; 0x80176c <co2>
     496:	e0 90 6d 17 	lds	r14, 0x176D	; 0x80176d <co2+0x1>
		
		printf("TEMP BEFORE SEND: %d\n",temperature);
     49a:	0f 93       	push	r16
     49c:	1f 93       	push	r17
     49e:	8e eb       	ldi	r24, 0xBE	; 190
     4a0:	93 e0       	ldi	r25, 0x03	; 3
     4a2:	9f 93       	push	r25
     4a4:	8f 93       	push	r24
     4a6:	0e 94 56 2a 	call	0x54ac	; 0x54ac <printf>
		printf("HUMID BEFORE SEND: %d\n",humidity);
     4aa:	80 91 71 17 	lds	r24, 0x1771	; 0x801771 <humidity+0x1>
     4ae:	8f 93       	push	r24
     4b0:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <humidity>
     4b4:	8f 93       	push	r24
     4b6:	84 ed       	ldi	r24, 0xD4	; 212
     4b8:	93 e0       	ldi	r25, 0x03	; 3
     4ba:	9f 93       	push	r25
     4bc:	8f 93       	push	r24
     4be:	0e 94 56 2a 	call	0x54ac	; 0x54ac <printf>

		_uplink_payload.bytes[0] = hum >> 8;
     4c2:	e8 e8       	ldi	r30, 0x88	; 136
     4c4:	f7 e0       	ldi	r31, 0x07	; 7
     4c6:	c2 82       	std	Z+2, r12	; 0x02
		_uplink_payload.bytes[1] = hum & 0xFF;
     4c8:	d3 82       	std	Z+3, r13	; 0x03
		_uplink_payload.bytes[2] = temp >> 8;
     4ca:	04 83       	std	Z+4, r16	; 0x04
		_uplink_payload.bytes[3] = temp & 0xFF;
     4cc:	15 83       	std	Z+5, r17	; 0x05
		_uplink_payload.bytes[4] = co2_ppm >> 8;
     4ce:	e6 82       	std	Z+6, r14	; 0x06
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
     4d0:	f7 82       	std	Z+7, r15	; 0x07

		status_leds_shortPuls(led_ST4);  // OPTIONAL
     4d2:	83 e0       	ldi	r24, 0x03	; 3
     4d4:	0e 94 ee 24 	call	0x49dc	; 0x49dc <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
     4d8:	68 e8       	ldi	r22, 0x88	; 136
     4da:	77 e0       	ldi	r23, 0x07	; 7
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	0e 94 3d 1c 	call	0x387a	; 0x387a <lora_driver_sendUploadMessage>
     4e2:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <lora_driver_mapReturnCodeToText>
     4e6:	9f 93       	push	r25
     4e8:	8f 93       	push	r24
     4ea:	8b ee       	ldi	r24, 0xEB	; 235
     4ec:	93 e0       	ldi	r25, 0x03	; 3
     4ee:	9f 93       	push	r25
     4f0:	8f 93       	push	r24
     4f2:	0e 94 56 2a 	call	0x54ac	; 0x54ac <printf>
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	cd bf       	out	0x3d, r28	; 61
     500:	b8 cf       	rjmp	.-144    	; 0x472 <lora_handler_task+0x4e>

00000502 <lora_handler_initialise>:
extern int16_t temperature;
extern int16_t humidity;
extern int16_t co2;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
	xTaskCreate(
     508:	e1 2c       	mov	r14, r1
     50a:	f1 2c       	mov	r15, r1
     50c:	08 2f       	mov	r16, r24
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	48 e8       	ldi	r20, 0x88	; 136
     514:	51 e0       	ldi	r21, 0x01	; 1
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	74 e0       	ldi	r23, 0x04	; 4
     51a:	82 e1       	ldi	r24, 0x12	; 18
     51c:	92 e0       	ldi	r25, 0x02	; 2
     51e:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     522:	0f 91       	pop	r16
     524:	ff 90       	pop	r15
     526:	ef 90       	pop	r14
     528:	08 95       	ret

0000052a <_initDrivers>:

// Prototype for LoRaWAN handler
void lora_handler_initialise(UBaseType_t lora_handler_task_priority);

static void _initDrivers(void) {
	puts("Initializing drivers...");
     52a:	87 e0       	ldi	r24, 0x07	; 7
     52c:	94 e0       	ldi	r25, 0x04	; 4
     52e:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <puts>
	mh_z19_initialise(ser_USART3);
     532:	83 e0       	ldi	r24, 0x03	; 3
     534:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <mh_z19_initialise>
	hih8120_initialise();
     538:	0e 94 bc 19 	call	0x3378	; 0x3378 <hih8120_initialise>
	lora_driver_initialise(ser_USART1, NULL); // Without down-link buffer
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	0c 94 5f 1b 	jmp	0x36be	; 0x36be <lora_driver_initialise>
     546:	08 95       	ret

00000548 <_createTasks>:
}


static void _createTasks()
{
	co2Task_create();
     548:	84 de       	rcall	.-760    	; 0x252 <co2Task_create>
	humidityTemperatureTask_create();
     54a:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <humidityTemperatureTask_create>
     54e:	08 95       	ret

00000550 <main>:
}


int main(void)
{
	stdio_initialise(ser_USART0);
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	0e 94 23 23 	call	0x4646	; 0x4646 <stdio_initialise>
	lora_handler_initialise(3); // Lora task with priority 3
     556:	83 e0       	ldi	r24, 0x03	; 3
     558:	d4 df       	rcall	.-88     	; 0x502 <lora_handler_initialise>
	
	_initDrivers();
     55a:	e7 df       	rcall	.-50     	; 0x52a <_initDrivers>
	_createTasks();
     55c:	f5 df       	rcall	.-22     	; 0x548 <_createTasks>
     55e:	85 e0       	ldi	r24, 0x05	; 5

	status_leds_initialise(5); // Status LED driver - Priority 5. (LoRaWAN)
     560:	0e 94 2a 24 	call	0x4854	; 0x4854 <status_leds_initialise>
     564:	8f e1       	ldi	r24, 0x1F	; 31

	printf("Starting...\n");
     566:	94 e0       	ldi	r25, 0x04	; 4
     568:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <puts>
     56c:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <vTaskStartScheduler>
	vTaskStartScheduler();
     570:	80 e0       	ldi	r24, 0x00	; 0
}
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	08 95       	ret

00000576 <prvHeapInit>:
     576:	ea ea       	ldi	r30, 0xAA	; 170

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     578:	f7 e0       	ldi	r31, 0x07	; 7
     57a:	ae ea       	ldi	r26, 0xAE	; 174
     57c:	b7 e0       	ldi	r27, 0x07	; 7
     57e:	b1 83       	std	Z+1, r27	; 0x01
     580:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     582:	13 82       	std	Z+3, r1	; 0x03
     584:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     586:	e6 e5       	ldi	r30, 0x56	; 86
     588:	f5 e1       	ldi	r31, 0x15	; 21
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     58a:	f0 93 a9 07 	sts	0x07A9, r31	; 0x8007a9 <pxEnd+0x1>
     58e:	e0 93 a8 07 	sts	0x07A8, r30	; 0x8007a8 <pxEnd>
    pxEnd->xBlockSize = 0;
     592:	13 82       	std	Z+3, r1	; 0x03
     594:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     596:	11 82       	std	Z+1, r1	; 0x01
     598:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     59a:	88 ea       	ldi	r24, 0xA8	; 168
     59c:	9d e0       	ldi	r25, 0x0D	; 13
     59e:	13 96       	adiw	r26, 0x03	; 3
     5a0:	9c 93       	st	X, r25
     5a2:	8e 93       	st	-X, r24
     5a4:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     5a6:	ed 93       	st	X+, r30
     5a8:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     5aa:	90 93 a5 07 	sts	0x07A5, r25	; 0x8007a5 <xMinimumEverFreeBytesRemaining+0x1>
     5ae:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     5b2:	90 93 a7 07 	sts	0x07A7, r25	; 0x8007a7 <xFreeBytesRemaining+0x1>
     5b6:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	90 e8       	ldi	r25, 0x80	; 128
     5be:	90 93 9f 07 	sts	0x079F, r25	; 0x80079f <xBlockAllocatedBit+0x1>
     5c2:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <xBlockAllocatedBit>
     5c6:	08 95       	ret

000005c8 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     5ce:	aa ea       	ldi	r26, 0xAA	; 170
     5d0:	b7 e0       	ldi	r27, 0x07	; 7
     5d2:	01 c0       	rjmp	.+2      	; 0x5d6 <prvInsertBlockIntoFreeList+0xe>
     5d4:	df 01       	movw	r26, r30
     5d6:	ed 91       	ld	r30, X+
     5d8:	fc 91       	ld	r31, X
     5da:	11 97       	sbiw	r26, 0x01	; 1
     5dc:	ec 17       	cp	r30, r28
     5de:	fd 07       	cpc	r31, r29
     5e0:	c8 f3       	brcs	.-14     	; 0x5d4 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     5e2:	12 96       	adiw	r26, 0x02	; 2
     5e4:	8d 91       	ld	r24, X+
     5e6:	9c 91       	ld	r25, X
     5e8:	13 97       	sbiw	r26, 0x03	; 3
     5ea:	9d 01       	movw	r18, r26
     5ec:	28 0f       	add	r18, r24
     5ee:	39 1f       	adc	r19, r25
     5f0:	c2 17       	cp	r28, r18
     5f2:	d3 07       	cpc	r29, r19
     5f4:	49 f4       	brne	.+18     	; 0x608 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     5f6:	2a 81       	ldd	r18, Y+2	; 0x02
     5f8:	3b 81       	ldd	r19, Y+3	; 0x03
     5fa:	82 0f       	add	r24, r18
     5fc:	93 1f       	adc	r25, r19
     5fe:	13 96       	adiw	r26, 0x03	; 3
     600:	9c 93       	st	X, r25
     602:	8e 93       	st	-X, r24
     604:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     606:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     608:	8a 81       	ldd	r24, Y+2	; 0x02
     60a:	9b 81       	ldd	r25, Y+3	; 0x03
     60c:	9e 01       	movw	r18, r28
     60e:	28 0f       	add	r18, r24
     610:	39 1f       	adc	r19, r25
     612:	e2 17       	cp	r30, r18
     614:	f3 07       	cpc	r31, r19
     616:	c1 f4       	brne	.+48     	; 0x648 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     618:	20 91 a8 07 	lds	r18, 0x07A8	; 0x8007a8 <pxEnd>
     61c:	30 91 a9 07 	lds	r19, 0x07A9	; 0x8007a9 <pxEnd+0x1>
     620:	e2 17       	cp	r30, r18
     622:	f3 07       	cpc	r31, r19
     624:	71 f0       	breq	.+28     	; 0x642 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     626:	22 81       	ldd	r18, Z+2	; 0x02
     628:	33 81       	ldd	r19, Z+3	; 0x03
     62a:	82 0f       	add	r24, r18
     62c:	93 1f       	adc	r25, r19
     62e:	9b 83       	std	Y+3, r25	; 0x03
     630:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     632:	ed 91       	ld	r30, X+
     634:	fc 91       	ld	r31, X
     636:	11 97       	sbiw	r26, 0x01	; 1
     638:	80 81       	ld	r24, Z
     63a:	91 81       	ldd	r25, Z+1	; 0x01
     63c:	99 83       	std	Y+1, r25	; 0x01
     63e:	88 83       	st	Y, r24
     640:	05 c0       	rjmp	.+10     	; 0x64c <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     642:	39 83       	std	Y+1, r19	; 0x01
     644:	28 83       	st	Y, r18
     646:	02 c0       	rjmp	.+4      	; 0x64c <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     648:	f9 83       	std	Y+1, r31	; 0x01
     64a:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     64c:	ca 17       	cp	r28, r26
     64e:	db 07       	cpc	r29, r27
     650:	11 f0       	breq	.+4      	; 0x656 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     652:	cd 93       	st	X+, r28
     654:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	08 95       	ret

0000065c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     65c:	ef 92       	push	r14
     65e:	ff 92       	push	r15
     660:	0f 93       	push	r16
     662:	1f 93       	push	r17
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     66a:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     66e:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <pxEnd>
     672:	90 91 a9 07 	lds	r25, 0x07A9	; 0x8007a9 <pxEnd+0x1>
     676:	89 2b       	or	r24, r25
     678:	09 f4       	brne	.+2      	; 0x67c <pvPortMalloc+0x20>
        {
            prvHeapInit();
     67a:	7d df       	rcall	.-262    	; 0x576 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     67c:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <xBlockAllocatedBit>
     680:	90 91 9f 07 	lds	r25, 0x079F	; 0x80079f <xBlockAllocatedBit+0x1>
     684:	80 23       	and	r24, r16
     686:	91 23       	and	r25, r17
     688:	89 2b       	or	r24, r25
     68a:	09 f0       	breq	.+2      	; 0x68e <pvPortMalloc+0x32>
     68c:	76 c0       	rjmp	.+236    	; 0x77a <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     68e:	01 15       	cp	r16, r1
     690:	11 05       	cpc	r17, r1
     692:	49 f0       	breq	.+18     	; 0x6a6 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     694:	c8 01       	movw	r24, r16
     696:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     698:	08 17       	cp	r16, r24
     69a:	19 07       	cpc	r17, r25
     69c:	18 f0       	brcs	.+6      	; 0x6a4 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     69e:	00 e0       	ldi	r16, 0x00	; 0
     6a0:	10 e0       	ldi	r17, 0x00	; 0
     6a2:	01 c0       	rjmp	.+2      	; 0x6a6 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     6a4:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     6a6:	01 15       	cp	r16, r1
     6a8:	11 05       	cpc	r17, r1
     6aa:	09 f4       	brne	.+2      	; 0x6ae <pvPortMalloc+0x52>
     6ac:	69 c0       	rjmp	.+210    	; 0x780 <pvPortMalloc+0x124>
     6ae:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <xFreeBytesRemaining>
     6b2:	90 91 a7 07 	lds	r25, 0x07A7	; 0x8007a7 <xFreeBytesRemaining+0x1>
     6b6:	80 17       	cp	r24, r16
     6b8:	91 07       	cpc	r25, r17
     6ba:	08 f4       	brcc	.+2      	; 0x6be <pvPortMalloc+0x62>
     6bc:	64 c0       	rjmp	.+200    	; 0x786 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     6be:	c0 91 aa 07 	lds	r28, 0x07AA	; 0x8007aa <xStart>
     6c2:	d0 91 ab 07 	lds	r29, 0x07AB	; 0x8007ab <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     6c6:	ea ea       	ldi	r30, 0xAA	; 170
     6c8:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     6cc:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     6ce:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     6d0:	8a 81       	ldd	r24, Y+2	; 0x02
     6d2:	9b 81       	ldd	r25, Y+3	; 0x03
     6d4:	80 17       	cp	r24, r16
     6d6:	91 07       	cpc	r25, r17
     6d8:	20 f4       	brcc	.+8      	; 0x6e2 <pvPortMalloc+0x86>
     6da:	88 81       	ld	r24, Y
     6dc:	99 81       	ldd	r25, Y+1	; 0x01
     6de:	00 97       	sbiw	r24, 0x00	; 0
     6e0:	a9 f7       	brne	.-22     	; 0x6cc <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     6e2:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <pxEnd>
     6e6:	90 91 a9 07 	lds	r25, 0x07A9	; 0x8007a9 <pxEnd+0x1>
     6ea:	c8 17       	cp	r28, r24
     6ec:	d9 07       	cpc	r29, r25
     6ee:	09 f4       	brne	.+2      	; 0x6f2 <pvPortMalloc+0x96>
     6f0:	4d c0       	rjmp	.+154    	; 0x78c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     6f2:	e0 80       	ld	r14, Z
     6f4:	f1 80       	ldd	r15, Z+1	; 0x01
     6f6:	84 e0       	ldi	r24, 0x04	; 4
     6f8:	e8 0e       	add	r14, r24
     6fa:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     6fc:	88 81       	ld	r24, Y
     6fe:	99 81       	ldd	r25, Y+1	; 0x01
     700:	91 83       	std	Z+1, r25	; 0x01
     702:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     704:	2a 81       	ldd	r18, Y+2	; 0x02
     706:	3b 81       	ldd	r19, Y+3	; 0x03
     708:	20 1b       	sub	r18, r16
     70a:	31 0b       	sbc	r19, r17
     70c:	29 30       	cpi	r18, 0x09	; 9
     70e:	31 05       	cpc	r19, r1
     710:	48 f0       	brcs	.+18     	; 0x724 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     712:	ce 01       	movw	r24, r28
     714:	80 0f       	add	r24, r16
     716:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     718:	fc 01       	movw	r30, r24
     71a:	33 83       	std	Z+3, r19	; 0x03
     71c:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     71e:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     720:	0a 83       	std	Y+2, r16	; 0x02
     722:	52 df       	rcall	.-348    	; 0x5c8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     724:	2a 81       	ldd	r18, Y+2	; 0x02
     726:	3b 81       	ldd	r19, Y+3	; 0x03
     728:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <xFreeBytesRemaining>
     72c:	90 91 a7 07 	lds	r25, 0x07A7	; 0x8007a7 <xFreeBytesRemaining+0x1>
     730:	82 1b       	sub	r24, r18
     732:	93 0b       	sbc	r25, r19
     734:	90 93 a7 07 	sts	0x07A7, r25	; 0x8007a7 <xFreeBytesRemaining+0x1>
     738:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     73c:	40 91 a4 07 	lds	r20, 0x07A4	; 0x8007a4 <xMinimumEverFreeBytesRemaining>
     740:	50 91 a5 07 	lds	r21, 0x07A5	; 0x8007a5 <xMinimumEverFreeBytesRemaining+0x1>
     744:	84 17       	cp	r24, r20
     746:	95 07       	cpc	r25, r21
     748:	20 f4       	brcc	.+8      	; 0x752 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     74a:	90 93 a5 07 	sts	0x07A5, r25	; 0x8007a5 <xMinimumEverFreeBytesRemaining+0x1>
     74e:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     752:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <xBlockAllocatedBit>
     756:	90 91 9f 07 	lds	r25, 0x079F	; 0x80079f <xBlockAllocatedBit+0x1>
     75a:	28 2b       	or	r18, r24
     75c:	39 2b       	or	r19, r25
     75e:	3b 83       	std	Y+3, r19	; 0x03
     760:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     762:	19 82       	std	Y+1, r1	; 0x01
     764:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     766:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <xNumberOfSuccessfulAllocations>
     76a:	90 91 a3 07 	lds	r25, 0x07A3	; 0x8007a3 <xNumberOfSuccessfulAllocations+0x1>
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	90 93 a3 07 	sts	0x07A3, r25	; 0x8007a3 <xNumberOfSuccessfulAllocations+0x1>
     774:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <xNumberOfSuccessfulAllocations>
     778:	0b c0       	rjmp	.+22     	; 0x790 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     77a:	e1 2c       	mov	r14, r1
     77c:	f1 2c       	mov	r15, r1
     77e:	08 c0       	rjmp	.+16     	; 0x790 <pvPortMalloc+0x134>
     780:	e1 2c       	mov	r14, r1
     782:	f1 2c       	mov	r15, r1
     784:	05 c0       	rjmp	.+10     	; 0x790 <pvPortMalloc+0x134>
     786:	e1 2c       	mov	r14, r1
     788:	f1 2c       	mov	r15, r1
     78a:	02 c0       	rjmp	.+4      	; 0x790 <pvPortMalloc+0x134>
     78c:	e1 2c       	mov	r14, r1
     78e:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     790:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     794:	e1 14       	cp	r14, r1
     796:	f1 04       	cpc	r15, r1
     798:	11 f4       	brne	.+4      	; 0x79e <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     79a:	0e 94 11 19 	call	0x3222	; 0x3222 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     79e:	c7 01       	movw	r24, r14
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	ff 90       	pop	r15
     7aa:	ef 90       	pop	r14
     7ac:	08 95       	ret

000007ae <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	91 f1       	breq	.+100    	; 0x81e <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     7ba:	ec 01       	movw	r28, r24
     7bc:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     7be:	4a 81       	ldd	r20, Y+2	; 0x02
     7c0:	5b 81       	ldd	r21, Y+3	; 0x03
     7c2:	20 91 9e 07 	lds	r18, 0x079E	; 0x80079e <xBlockAllocatedBit>
     7c6:	30 91 9f 07 	lds	r19, 0x079F	; 0x80079f <xBlockAllocatedBit+0x1>
     7ca:	ba 01       	movw	r22, r20
     7cc:	62 23       	and	r22, r18
     7ce:	73 23       	and	r23, r19
     7d0:	67 2b       	or	r22, r23
     7d2:	29 f1       	breq	.+74     	; 0x81e <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     7d4:	68 81       	ld	r22, Y
     7d6:	79 81       	ldd	r23, Y+1	; 0x01
     7d8:	67 2b       	or	r22, r23
     7da:	09 f5       	brne	.+66     	; 0x81e <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     7dc:	20 95       	com	r18
     7de:	30 95       	com	r19
     7e0:	24 23       	and	r18, r20
     7e2:	35 23       	and	r19, r21
     7e4:	3b 83       	std	Y+3, r19	; 0x03
     7e6:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     7e8:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     7ec:	8a 81       	ldd	r24, Y+2	; 0x02
     7ee:	9b 81       	ldd	r25, Y+3	; 0x03
     7f0:	20 91 a6 07 	lds	r18, 0x07A6	; 0x8007a6 <xFreeBytesRemaining>
     7f4:	30 91 a7 07 	lds	r19, 0x07A7	; 0x8007a7 <xFreeBytesRemaining+0x1>
     7f8:	82 0f       	add	r24, r18
     7fa:	93 1f       	adc	r25, r19
     7fc:	90 93 a7 07 	sts	0x07A7, r25	; 0x8007a7 <xFreeBytesRemaining+0x1>
     800:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     804:	ce 01       	movw	r24, r28
     806:	e0 de       	rcall	.-576    	; 0x5c8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     808:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <xNumberOfSuccessfulFrees>
     80c:	90 91 a1 07 	lds	r25, 0x07A1	; 0x8007a1 <xNumberOfSuccessfulFrees+0x1>
     810:	01 96       	adiw	r24, 0x01	; 1
     812:	90 93 a1 07 	sts	0x07A1, r25	; 0x8007a1 <xNumberOfSuccessfulFrees+0x1>
     816:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     81a:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	08 95       	ret

00000828 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     828:	fc 01       	movw	r30, r24
     82a:	03 96       	adiw	r24, 0x03	; 3
     82c:	92 83       	std	Z+2, r25	; 0x02
     82e:	81 83       	std	Z+1, r24	; 0x01
     830:	4f ef       	ldi	r20, 0xFF	; 255
     832:	5f ef       	ldi	r21, 0xFF	; 255
     834:	ba 01       	movw	r22, r20
     836:	43 83       	std	Z+3, r20	; 0x03
     838:	54 83       	std	Z+4, r21	; 0x04
     83a:	65 83       	std	Z+5, r22	; 0x05
     83c:	76 83       	std	Z+6, r23	; 0x06
     83e:	90 87       	std	Z+8, r25	; 0x08
     840:	87 83       	std	Z+7, r24	; 0x07
     842:	92 87       	std	Z+10, r25	; 0x0a
     844:	81 87       	std	Z+9, r24	; 0x09
     846:	10 82       	st	Z, r1
     848:	08 95       	ret

0000084a <vListInitialiseItem>:
     84a:	fc 01       	movw	r30, r24
     84c:	13 86       	std	Z+11, r1	; 0x0b
     84e:	12 86       	std	Z+10, r1	; 0x0a
     850:	08 95       	ret

00000852 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     852:	0f 93       	push	r16
     854:	1f 93       	push	r17
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     85c:	08 81       	ld	r16, Y
     85e:	19 81       	ldd	r17, Y+1	; 0x01
     860:	2a 81       	ldd	r18, Y+2	; 0x02
     862:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     864:	0f 3f       	cpi	r16, 0xFF	; 255
     866:	4f ef       	ldi	r20, 0xFF	; 255
     868:	14 07       	cpc	r17, r20
     86a:	24 07       	cpc	r18, r20
     86c:	34 07       	cpc	r19, r20
     86e:	21 f4       	brne	.+8      	; 0x878 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     870:	fc 01       	movw	r30, r24
     872:	a1 85       	ldd	r26, Z+9	; 0x09
     874:	b2 85       	ldd	r27, Z+10	; 0x0a
     876:	11 c0       	rjmp	.+34     	; 0x89a <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     878:	dc 01       	movw	r26, r24
     87a:	13 96       	adiw	r26, 0x03	; 3
     87c:	01 c0       	rjmp	.+2      	; 0x880 <vListInsert+0x2e>
     87e:	df 01       	movw	r26, r30
     880:	14 96       	adiw	r26, 0x04	; 4
     882:	ed 91       	ld	r30, X+
     884:	fc 91       	ld	r31, X
     886:	15 97       	sbiw	r26, 0x05	; 5
     888:	40 81       	ld	r20, Z
     88a:	51 81       	ldd	r21, Z+1	; 0x01
     88c:	62 81       	ldd	r22, Z+2	; 0x02
     88e:	73 81       	ldd	r23, Z+3	; 0x03
     890:	04 17       	cp	r16, r20
     892:	15 07       	cpc	r17, r21
     894:	26 07       	cpc	r18, r22
     896:	37 07       	cpc	r19, r23
     898:	90 f7       	brcc	.-28     	; 0x87e <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     89a:	14 96       	adiw	r26, 0x04	; 4
     89c:	ed 91       	ld	r30, X+
     89e:	fc 91       	ld	r31, X
     8a0:	15 97       	sbiw	r26, 0x05	; 5
     8a2:	fd 83       	std	Y+5, r31	; 0x05
     8a4:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     8a6:	d7 83       	std	Z+7, r29	; 0x07
     8a8:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     8aa:	bf 83       	std	Y+7, r27	; 0x07
     8ac:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     8ae:	15 96       	adiw	r26, 0x05	; 5
     8b0:	dc 93       	st	X, r29
     8b2:	ce 93       	st	-X, r28
     8b4:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     8b6:	9b 87       	std	Y+11, r25	; 0x0b
     8b8:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     8ba:	fc 01       	movw	r30, r24
     8bc:	20 81       	ld	r18, Z
     8be:	2f 5f       	subi	r18, 0xFF	; 255
     8c0:	20 83       	st	Z, r18
}
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	1f 91       	pop	r17
     8c8:	0f 91       	pop	r16
     8ca:	08 95       	ret

000008cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     8d2:	a2 85       	ldd	r26, Z+10	; 0x0a
     8d4:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     8d6:	c4 81       	ldd	r28, Z+4	; 0x04
     8d8:	d5 81       	ldd	r29, Z+5	; 0x05
     8da:	86 81       	ldd	r24, Z+6	; 0x06
     8dc:	97 81       	ldd	r25, Z+7	; 0x07
     8de:	9f 83       	std	Y+7, r25	; 0x07
     8e0:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     8e2:	c6 81       	ldd	r28, Z+6	; 0x06
     8e4:	d7 81       	ldd	r29, Z+7	; 0x07
     8e6:	84 81       	ldd	r24, Z+4	; 0x04
     8e8:	95 81       	ldd	r25, Z+5	; 0x05
     8ea:	9d 83       	std	Y+5, r25	; 0x05
     8ec:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     8ee:	11 96       	adiw	r26, 0x01	; 1
     8f0:	8d 91       	ld	r24, X+
     8f2:	9c 91       	ld	r25, X
     8f4:	12 97       	sbiw	r26, 0x02	; 2
     8f6:	e8 17       	cp	r30, r24
     8f8:	f9 07       	cpc	r31, r25
     8fa:	31 f4       	brne	.+12     	; 0x908 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     8fc:	86 81       	ldd	r24, Z+6	; 0x06
     8fe:	97 81       	ldd	r25, Z+7	; 0x07
     900:	12 96       	adiw	r26, 0x02	; 2
     902:	9c 93       	st	X, r25
     904:	8e 93       	st	-X, r24
     906:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     908:	13 86       	std	Z+11, r1	; 0x0b
     90a:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     90c:	8c 91       	ld	r24, X
     90e:	81 50       	subi	r24, 0x01	; 1
     910:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     912:	8c 91       	ld	r24, X
}
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	08 95       	ret

0000091a <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     91a:	a8 95       	wdr
     91c:	90 ec       	ldi	r25, 0xC0	; 192
     91e:	88 e1       	ldi	r24, 0x18	; 24
     920:	0f b6       	in	r0, 0x3f	; 63
     922:	f8 94       	cli
     924:	a8 95       	wdr
     926:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     930:	08 95       	ret

00000932 <pxPortInitialiseStack>:
     932:	fc 01       	movw	r30, r24
     934:	60 83       	st	Z, r22
     936:	31 97       	sbiw	r30, 0x01	; 1
     938:	70 83       	st	Z, r23
     93a:	31 97       	sbiw	r30, 0x01	; 1
     93c:	10 82       	st	Z, r1
     93e:	31 97       	sbiw	r30, 0x01	; 1
     940:	10 82       	st	Z, r1
     942:	31 97       	sbiw	r30, 0x01	; 1
     944:	20 e8       	ldi	r18, 0x80	; 128
     946:	20 83       	st	Z, r18
     948:	31 97       	sbiw	r30, 0x01	; 1
     94a:	10 82       	st	Z, r1
     94c:	31 97       	sbiw	r30, 0x01	; 1
     94e:	10 82       	st	Z, r1
     950:	31 97       	sbiw	r30, 0x01	; 1
     952:	10 82       	st	Z, r1
     954:	77 97       	sbiw	r30, 0x17	; 23
     956:	40 83       	st	Z, r20
     958:	31 97       	sbiw	r30, 0x01	; 1
     95a:	50 83       	st	Z, r21
     95c:	86 97       	sbiw	r24, 0x26	; 38
     95e:	08 95       	ret

00000960 <xPortStartScheduler>:
     960:	dc df       	rcall	.-72     	; 0x91a <prvSetupTimerInterrupt>
     962:	a0 91 19 16 	lds	r26, 0x1619	; 0x801619 <pxCurrentTCB>
     966:	b0 91 1a 16 	lds	r27, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
     96a:	cd 91       	ld	r28, X+
     96c:	cd bf       	out	0x3d, r28	; 61
     96e:	dd 91       	ld	r29, X+
     970:	de bf       	out	0x3e, r29	; 62
     972:	ff 91       	pop	r31
     974:	ef 91       	pop	r30
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	bf 91       	pop	r27
     97c:	af 91       	pop	r26
     97e:	9f 91       	pop	r25
     980:	8f 91       	pop	r24
     982:	7f 91       	pop	r23
     984:	6f 91       	pop	r22
     986:	5f 91       	pop	r21
     988:	4f 91       	pop	r20
     98a:	3f 91       	pop	r19
     98c:	2f 91       	pop	r18
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	df 90       	pop	r13
     998:	cf 90       	pop	r12
     99a:	bf 90       	pop	r11
     99c:	af 90       	pop	r10
     99e:	9f 90       	pop	r9
     9a0:	8f 90       	pop	r8
     9a2:	7f 90       	pop	r7
     9a4:	6f 90       	pop	r6
     9a6:	5f 90       	pop	r5
     9a8:	4f 90       	pop	r4
     9aa:	3f 90       	pop	r3
     9ac:	2f 90       	pop	r2
     9ae:	1f 90       	pop	r1
     9b0:	0f 90       	pop	r0
     9b2:	0c be       	out	0x3c, r0	; 60
     9b4:	0f 90       	pop	r0
     9b6:	0b be       	out	0x3b, r0	; 59
     9b8:	0f 90       	pop	r0
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	0f 90       	pop	r0
     9be:	08 95       	ret
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	08 95       	ret

000009c4 <vPortYield>:
     9c4:	0f 92       	push	r0
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	f8 94       	cli
     9ca:	0f 92       	push	r0
     9cc:	0b b6       	in	r0, 0x3b	; 59
     9ce:	0f 92       	push	r0
     9d0:	0c b6       	in	r0, 0x3c	; 60
     9d2:	0f 92       	push	r0
     9d4:	1f 92       	push	r1
     9d6:	11 24       	eor	r1, r1
     9d8:	2f 92       	push	r2
     9da:	3f 92       	push	r3
     9dc:	4f 92       	push	r4
     9de:	5f 92       	push	r5
     9e0:	6f 92       	push	r6
     9e2:	7f 92       	push	r7
     9e4:	8f 92       	push	r8
     9e6:	9f 92       	push	r9
     9e8:	af 92       	push	r10
     9ea:	bf 92       	push	r11
     9ec:	cf 92       	push	r12
     9ee:	df 92       	push	r13
     9f0:	ef 92       	push	r14
     9f2:	ff 92       	push	r15
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	2f 93       	push	r18
     9fa:	3f 93       	push	r19
     9fc:	4f 93       	push	r20
     9fe:	5f 93       	push	r21
     a00:	6f 93       	push	r22
     a02:	7f 93       	push	r23
     a04:	8f 93       	push	r24
     a06:	9f 93       	push	r25
     a08:	af 93       	push	r26
     a0a:	bf 93       	push	r27
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
     a10:	ef 93       	push	r30
     a12:	ff 93       	push	r31
     a14:	a0 91 19 16 	lds	r26, 0x1619	; 0x801619 <pxCurrentTCB>
     a18:	b0 91 1a 16 	lds	r27, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
     a1c:	0d b6       	in	r0, 0x3d	; 61
     a1e:	0d 92       	st	X+, r0
     a20:	0e b6       	in	r0, 0x3e	; 62
     a22:	0d 92       	st	X+, r0
     a24:	0e 94 bf 10 	call	0x217e	; 0x217e <vTaskSwitchContext>
     a28:	a0 91 19 16 	lds	r26, 0x1619	; 0x801619 <pxCurrentTCB>
     a2c:	b0 91 1a 16 	lds	r27, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
     a30:	cd 91       	ld	r28, X+
     a32:	cd bf       	out	0x3d, r28	; 61
     a34:	dd 91       	ld	r29, X+
     a36:	de bf       	out	0x3e, r29	; 62
     a38:	ff 91       	pop	r31
     a3a:	ef 91       	pop	r30
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	bf 91       	pop	r27
     a42:	af 91       	pop	r26
     a44:	9f 91       	pop	r25
     a46:	8f 91       	pop	r24
     a48:	7f 91       	pop	r23
     a4a:	6f 91       	pop	r22
     a4c:	5f 91       	pop	r21
     a4e:	4f 91       	pop	r20
     a50:	3f 91       	pop	r19
     a52:	2f 91       	pop	r18
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	ff 90       	pop	r15
     a5a:	ef 90       	pop	r14
     a5c:	df 90       	pop	r13
     a5e:	cf 90       	pop	r12
     a60:	bf 90       	pop	r11
     a62:	af 90       	pop	r10
     a64:	9f 90       	pop	r9
     a66:	8f 90       	pop	r8
     a68:	7f 90       	pop	r7
     a6a:	6f 90       	pop	r6
     a6c:	5f 90       	pop	r5
     a6e:	4f 90       	pop	r4
     a70:	3f 90       	pop	r3
     a72:	2f 90       	pop	r2
     a74:	1f 90       	pop	r1
     a76:	0f 90       	pop	r0
     a78:	0c be       	out	0x3c, r0	; 60
     a7a:	0f 90       	pop	r0
     a7c:	0b be       	out	0x3b, r0	; 59
     a7e:	0f 90       	pop	r0
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	0f 90       	pop	r0
     a84:	08 95       	ret

00000a86 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     a86:	0f 92       	push	r0
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	0f 92       	push	r0
     a8e:	0b b6       	in	r0, 0x3b	; 59
     a90:	0f 92       	push	r0
     a92:	0c b6       	in	r0, 0x3c	; 60
     a94:	0f 92       	push	r0
     a96:	1f 92       	push	r1
     a98:	11 24       	eor	r1, r1
     a9a:	2f 92       	push	r2
     a9c:	3f 92       	push	r3
     a9e:	4f 92       	push	r4
     aa0:	5f 92       	push	r5
     aa2:	6f 92       	push	r6
     aa4:	7f 92       	push	r7
     aa6:	8f 92       	push	r8
     aa8:	9f 92       	push	r9
     aaa:	af 92       	push	r10
     aac:	bf 92       	push	r11
     aae:	cf 92       	push	r12
     ab0:	df 92       	push	r13
     ab2:	ef 92       	push	r14
     ab4:	ff 92       	push	r15
     ab6:	0f 93       	push	r16
     ab8:	1f 93       	push	r17
     aba:	2f 93       	push	r18
     abc:	3f 93       	push	r19
     abe:	4f 93       	push	r20
     ac0:	5f 93       	push	r21
     ac2:	6f 93       	push	r22
     ac4:	7f 93       	push	r23
     ac6:	8f 93       	push	r24
     ac8:	9f 93       	push	r25
     aca:	af 93       	push	r26
     acc:	bf 93       	push	r27
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	ef 93       	push	r30
     ad4:	ff 93       	push	r31
     ad6:	a0 91 19 16 	lds	r26, 0x1619	; 0x801619 <pxCurrentTCB>
     ada:	b0 91 1a 16 	lds	r27, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
     ade:	0d b6       	in	r0, 0x3d	; 61
     ae0:	0d 92       	st	X+, r0
     ae2:	0e b6       	in	r0, 0x3e	; 62
     ae4:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     ae6:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     ae8:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <xTaskIncrementTick>
     aec:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     aee:	0e 94 bf 10 	call	0x217e	; 0x217e <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     af2:	a0 91 19 16 	lds	r26, 0x1619	; 0x801619 <pxCurrentTCB>
     af6:	b0 91 1a 16 	lds	r27, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
     afa:	cd 91       	ld	r28, X+
     afc:	cd bf       	out	0x3d, r28	; 61
     afe:	dd 91       	ld	r29, X+
     b00:	de bf       	out	0x3e, r29	; 62
     b02:	ff 91       	pop	r31
     b04:	ef 91       	pop	r30
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	bf 91       	pop	r27
     b0c:	af 91       	pop	r26
     b0e:	9f 91       	pop	r25
     b10:	8f 91       	pop	r24
     b12:	7f 91       	pop	r23
     b14:	6f 91       	pop	r22
     b16:	5f 91       	pop	r21
     b18:	4f 91       	pop	r20
     b1a:	3f 91       	pop	r19
     b1c:	2f 91       	pop	r18
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	ff 90       	pop	r15
     b24:	ef 90       	pop	r14
     b26:	df 90       	pop	r13
     b28:	cf 90       	pop	r12
     b2a:	bf 90       	pop	r11
     b2c:	af 90       	pop	r10
     b2e:	9f 90       	pop	r9
     b30:	8f 90       	pop	r8
     b32:	7f 90       	pop	r7
     b34:	6f 90       	pop	r6
     b36:	5f 90       	pop	r5
     b38:	4f 90       	pop	r4
     b3a:	3f 90       	pop	r3
     b3c:	2f 90       	pop	r2
     b3e:	1f 90       	pop	r1
     b40:	0f 90       	pop	r0
     b42:	0c be       	out	0x3c, r0	; 60
     b44:	0f 90       	pop	r0
     b46:	0b be       	out	0x3b, r0	; 59
     b48:	0f 90       	pop	r0
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     b4e:	08 95       	ret

00000b50 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     b50:	9a df       	rcall	.-204    	; 0xa86 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     b52:	18 95       	reti

00000b54 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	0f 92       	push	r0
     b5a:	fc 01       	movw	r30, r24
     b5c:	86 8d       	ldd	r24, Z+30	; 0x1e
     b5e:	81 11       	cpse	r24, r1
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <prvIsQueueEmpty+0x12>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	01 c0       	rjmp	.+2      	; 0xb68 <prvIsQueueEmpty+0x14>
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	0f 90       	pop	r0
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	08 95       	ret

00000b6e <prvIsQueueFull>:
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	0f 92       	push	r0
     b74:	fc 01       	movw	r30, r24
     b76:	26 8d       	ldd	r18, Z+30	; 0x1e
     b78:	87 8d       	ldd	r24, Z+31	; 0x1f
     b7a:	28 13       	cpse	r18, r24
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <prvIsQueueFull+0x14>
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	01 c0       	rjmp	.+2      	; 0xb84 <prvIsQueueFull+0x16>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	0f 90       	pop	r0
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	08 95       	ret

00000b8a <prvCopyDataToQueue>:
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	ec 01       	movw	r28, r24
     b94:	04 2f       	mov	r16, r20
     b96:	1e 8d       	ldd	r17, Y+30	; 0x1e
     b98:	48 a1       	ldd	r20, Y+32	; 0x20
     b9a:	41 11       	cpse	r20, r1
     b9c:	0c c0       	rjmp	.+24     	; 0xbb6 <prvCopyDataToQueue+0x2c>
     b9e:	88 81       	ld	r24, Y
     ba0:	99 81       	ldd	r25, Y+1	; 0x01
     ba2:	89 2b       	or	r24, r25
     ba4:	09 f0       	breq	.+2      	; 0xba8 <prvCopyDataToQueue+0x1e>
     ba6:	42 c0       	rjmp	.+132    	; 0xc2c <prvCopyDataToQueue+0xa2>
     ba8:	8c 81       	ldd	r24, Y+4	; 0x04
     baa:	9d 81       	ldd	r25, Y+5	; 0x05
     bac:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <xTaskPriorityDisinherit>
     bb0:	1d 82       	std	Y+5, r1	; 0x05
     bb2:	1c 82       	std	Y+4, r1	; 0x04
     bb4:	42 c0       	rjmp	.+132    	; 0xc3a <prvCopyDataToQueue+0xb0>
     bb6:	01 11       	cpse	r16, r1
     bb8:	17 c0       	rjmp	.+46     	; 0xbe8 <prvCopyDataToQueue+0x5e>
     bba:	50 e0       	ldi	r21, 0x00	; 0
     bbc:	8a 81       	ldd	r24, Y+2	; 0x02
     bbe:	9b 81       	ldd	r25, Y+3	; 0x03
     bc0:	0e 94 f7 29 	call	0x53ee	; 0x53ee <memcpy>
     bc4:	28 a1       	ldd	r18, Y+32	; 0x20
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	9b 81       	ldd	r25, Y+3	; 0x03
     bca:	82 0f       	add	r24, r18
     bcc:	91 1d       	adc	r25, r1
     bce:	9b 83       	std	Y+3, r25	; 0x03
     bd0:	8a 83       	std	Y+2, r24	; 0x02
     bd2:	2c 81       	ldd	r18, Y+4	; 0x04
     bd4:	3d 81       	ldd	r19, Y+5	; 0x05
     bd6:	82 17       	cp	r24, r18
     bd8:	93 07       	cpc	r25, r19
     bda:	50 f1       	brcs	.+84     	; 0xc30 <prvCopyDataToQueue+0xa6>
     bdc:	88 81       	ld	r24, Y
     bde:	99 81       	ldd	r25, Y+1	; 0x01
     be0:	9b 83       	std	Y+3, r25	; 0x03
     be2:	8a 83       	std	Y+2, r24	; 0x02
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	29 c0       	rjmp	.+82     	; 0xc3a <prvCopyDataToQueue+0xb0>
     be8:	50 e0       	ldi	r21, 0x00	; 0
     bea:	8e 81       	ldd	r24, Y+6	; 0x06
     bec:	9f 81       	ldd	r25, Y+7	; 0x07
     bee:	0e 94 f7 29 	call	0x53ee	; 0x53ee <memcpy>
     bf2:	88 a1       	ldd	r24, Y+32	; 0x20
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	91 95       	neg	r25
     bf8:	81 95       	neg	r24
     bfa:	91 09       	sbc	r25, r1
     bfc:	2e 81       	ldd	r18, Y+6	; 0x06
     bfe:	3f 81       	ldd	r19, Y+7	; 0x07
     c00:	28 0f       	add	r18, r24
     c02:	39 1f       	adc	r19, r25
     c04:	3f 83       	std	Y+7, r19	; 0x07
     c06:	2e 83       	std	Y+6, r18	; 0x06
     c08:	48 81       	ld	r20, Y
     c0a:	59 81       	ldd	r21, Y+1	; 0x01
     c0c:	24 17       	cp	r18, r20
     c0e:	35 07       	cpc	r19, r21
     c10:	30 f4       	brcc	.+12     	; 0xc1e <prvCopyDataToQueue+0x94>
     c12:	2c 81       	ldd	r18, Y+4	; 0x04
     c14:	3d 81       	ldd	r19, Y+5	; 0x05
     c16:	82 0f       	add	r24, r18
     c18:	93 1f       	adc	r25, r19
     c1a:	9f 83       	std	Y+7, r25	; 0x07
     c1c:	8e 83       	std	Y+6, r24	; 0x06
     c1e:	02 30       	cpi	r16, 0x02	; 2
     c20:	49 f4       	brne	.+18     	; 0xc34 <prvCopyDataToQueue+0xaa>
     c22:	11 23       	and	r17, r17
     c24:	49 f0       	breq	.+18     	; 0xc38 <prvCopyDataToQueue+0xae>
     c26:	11 50       	subi	r17, 0x01	; 1
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	07 c0       	rjmp	.+14     	; 0xc3a <prvCopyDataToQueue+0xb0>
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	05 c0       	rjmp	.+10     	; 0xc3a <prvCopyDataToQueue+0xb0>
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	03 c0       	rjmp	.+6      	; 0xc3a <prvCopyDataToQueue+0xb0>
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	01 c0       	rjmp	.+2      	; 0xc3a <prvCopyDataToQueue+0xb0>
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	1f 5f       	subi	r17, 0xFF	; 255
     c3c:	1e 8f       	std	Y+30, r17	; 0x1e
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	08 95       	ret

00000c48 <prvCopyDataFromQueue>:
     c48:	fc 01       	movw	r30, r24
     c4a:	40 a1       	ldd	r20, Z+32	; 0x20
     c4c:	44 23       	and	r20, r20
     c4e:	a9 f0       	breq	.+42     	; 0xc7a <prvCopyDataFromQueue+0x32>
     c50:	50 e0       	ldi	r21, 0x00	; 0
     c52:	26 81       	ldd	r18, Z+6	; 0x06
     c54:	37 81       	ldd	r19, Z+7	; 0x07
     c56:	24 0f       	add	r18, r20
     c58:	35 1f       	adc	r19, r21
     c5a:	37 83       	std	Z+7, r19	; 0x07
     c5c:	26 83       	std	Z+6, r18	; 0x06
     c5e:	84 81       	ldd	r24, Z+4	; 0x04
     c60:	95 81       	ldd	r25, Z+5	; 0x05
     c62:	28 17       	cp	r18, r24
     c64:	39 07       	cpc	r19, r25
     c66:	20 f0       	brcs	.+8      	; 0xc70 <prvCopyDataFromQueue+0x28>
     c68:	80 81       	ld	r24, Z
     c6a:	91 81       	ldd	r25, Z+1	; 0x01
     c6c:	97 83       	std	Z+7, r25	; 0x07
     c6e:	86 83       	std	Z+6, r24	; 0x06
     c70:	cb 01       	movw	r24, r22
     c72:	66 81       	ldd	r22, Z+6	; 0x06
     c74:	77 81       	ldd	r23, Z+7	; 0x07
     c76:	0c 94 f7 29 	jmp	0x53ee	; 0x53ee <memcpy>
     c7a:	08 95       	ret

00000c7c <prvUnlockQueue>:
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	ec 01       	movw	r28, r24
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	0f 92       	push	r0
     c8a:	1a a1       	ldd	r17, Y+34	; 0x22
     c8c:	0b c0       	rjmp	.+22     	; 0xca4 <prvUnlockQueue+0x28>
     c8e:	8b 89       	ldd	r24, Y+19	; 0x13
     c90:	88 23       	and	r24, r24
     c92:	51 f0       	breq	.+20     	; 0xca8 <prvUnlockQueue+0x2c>
     c94:	ce 01       	movw	r24, r28
     c96:	43 96       	adiw	r24, 0x13	; 19
     c98:	0e 94 7d 11 	call	0x22fa	; 0x22fa <xTaskRemoveFromEventList>
     c9c:	81 11       	cpse	r24, r1
     c9e:	0e 94 b9 12 	call	0x2572	; 0x2572 <vTaskMissedYield>
     ca2:	11 50       	subi	r17, 0x01	; 1
     ca4:	11 16       	cp	r1, r17
     ca6:	9c f3       	brlt	.-26     	; 0xc8e <prvUnlockQueue+0x12>
     ca8:	8f ef       	ldi	r24, 0xFF	; 255
     caa:	8a a3       	std	Y+34, r24	; 0x22
     cac:	0f 90       	pop	r0
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	0f 92       	push	r0
     cb6:	19 a1       	ldd	r17, Y+33	; 0x21
     cb8:	0b c0       	rjmp	.+22     	; 0xcd0 <prvUnlockQueue+0x54>
     cba:	88 85       	ldd	r24, Y+8	; 0x08
     cbc:	88 23       	and	r24, r24
     cbe:	51 f0       	breq	.+20     	; 0xcd4 <prvUnlockQueue+0x58>
     cc0:	ce 01       	movw	r24, r28
     cc2:	08 96       	adiw	r24, 0x08	; 8
     cc4:	0e 94 7d 11 	call	0x22fa	; 0x22fa <xTaskRemoveFromEventList>
     cc8:	81 11       	cpse	r24, r1
     cca:	0e 94 b9 12 	call	0x2572	; 0x2572 <vTaskMissedYield>
     cce:	11 50       	subi	r17, 0x01	; 1
     cd0:	11 16       	cp	r1, r17
     cd2:	9c f3       	brlt	.-26     	; 0xcba <prvUnlockQueue+0x3e>
     cd4:	8f ef       	ldi	r24, 0xFF	; 255
     cd6:	89 a3       	std	Y+33, r24	; 0x21
     cd8:	0f 90       	pop	r0
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	08 95       	ret

00000ce4 <xQueueGenericReset>:
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	ec 01       	movw	r28, r24
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	0f 92       	push	r0
     cf0:	e8 81       	ld	r30, Y
     cf2:	f9 81       	ldd	r31, Y+1	; 0x01
     cf4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     cf6:	28 a1       	ldd	r18, Y+32	; 0x20
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	82 9f       	mul	r24, r18
     cfe:	a0 01       	movw	r20, r0
     d00:	83 9f       	mul	r24, r19
     d02:	50 0d       	add	r21, r0
     d04:	92 9f       	mul	r25, r18
     d06:	50 0d       	add	r21, r0
     d08:	11 24       	eor	r1, r1
     d0a:	4e 0f       	add	r20, r30
     d0c:	5f 1f       	adc	r21, r31
     d0e:	5d 83       	std	Y+5, r21	; 0x05
     d10:	4c 83       	std	Y+4, r20	; 0x04
     d12:	1e 8e       	std	Y+30, r1	; 0x1e
     d14:	fb 83       	std	Y+3, r31	; 0x03
     d16:	ea 83       	std	Y+2, r30	; 0x02
     d18:	01 97       	sbiw	r24, 0x01	; 1
     d1a:	28 9f       	mul	r18, r24
     d1c:	a0 01       	movw	r20, r0
     d1e:	29 9f       	mul	r18, r25
     d20:	50 0d       	add	r21, r0
     d22:	38 9f       	mul	r19, r24
     d24:	50 0d       	add	r21, r0
     d26:	11 24       	eor	r1, r1
     d28:	cf 01       	movw	r24, r30
     d2a:	84 0f       	add	r24, r20
     d2c:	95 1f       	adc	r25, r21
     d2e:	9f 83       	std	Y+7, r25	; 0x07
     d30:	8e 83       	std	Y+6, r24	; 0x06
     d32:	8f ef       	ldi	r24, 0xFF	; 255
     d34:	89 a3       	std	Y+33, r24	; 0x21
     d36:	8a a3       	std	Y+34, r24	; 0x22
     d38:	61 11       	cpse	r22, r1
     d3a:	0b c0       	rjmp	.+22     	; 0xd52 <xQueueGenericReset+0x6e>
     d3c:	88 85       	ldd	r24, Y+8	; 0x08
     d3e:	88 23       	and	r24, r24
     d40:	71 f0       	breq	.+28     	; 0xd5e <xQueueGenericReset+0x7a>
     d42:	ce 01       	movw	r24, r28
     d44:	08 96       	adiw	r24, 0x08	; 8
     d46:	0e 94 7d 11 	call	0x22fa	; 0x22fa <xTaskRemoveFromEventList>
     d4a:	88 23       	and	r24, r24
     d4c:	41 f0       	breq	.+16     	; 0xd5e <xQueueGenericReset+0x7a>
     d4e:	3a de       	rcall	.-908    	; 0x9c4 <vPortYield>
     d50:	06 c0       	rjmp	.+12     	; 0xd5e <xQueueGenericReset+0x7a>
     d52:	ce 01       	movw	r24, r28
     d54:	08 96       	adiw	r24, 0x08	; 8
     d56:	68 dd       	rcall	.-1328   	; 0x828 <vListInitialise>
     d58:	ce 01       	movw	r24, r28
     d5a:	43 96       	adiw	r24, 0x13	; 19
     d5c:	65 dd       	rcall	.-1334   	; 0x828 <vListInitialise>
     d5e:	0f 90       	pop	r0
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	08 95       	ret

00000d6a <prvInitialiseNewQueue>:
     d6a:	0f 93       	push	r16
     d6c:	1f 93       	push	r17
     d6e:	f8 01       	movw	r30, r16
     d70:	61 11       	cpse	r22, r1
     d72:	03 c0       	rjmp	.+6      	; 0xd7a <prvInitialiseNewQueue+0x10>
     d74:	11 83       	std	Z+1, r17	; 0x01
     d76:	00 83       	st	Z, r16
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <prvInitialiseNewQueue+0x14>
     d7a:	51 83       	std	Z+1, r21	; 0x01
     d7c:	40 83       	st	Z, r20
     d7e:	87 8f       	std	Z+31, r24	; 0x1f
     d80:	60 a3       	std	Z+32, r22	; 0x20
     d82:	61 e0       	ldi	r22, 0x01	; 1
     d84:	cf 01       	movw	r24, r30
     d86:	ae df       	rcall	.-164    	; 0xce4 <xQueueGenericReset>
     d88:	1f 91       	pop	r17
     d8a:	0f 91       	pop	r16
     d8c:	08 95       	ret

00000d8e <xQueueGenericCreate>:
     d8e:	df 92       	push	r13
     d90:	ef 92       	push	r14
     d92:	ff 92       	push	r15
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	f8 2e       	mov	r15, r24
     d9e:	e6 2e       	mov	r14, r22
     da0:	d4 2e       	mov	r13, r20
     da2:	86 9f       	mul	r24, r22
     da4:	c0 01       	movw	r24, r0
     da6:	11 24       	eor	r1, r1
     da8:	83 96       	adiw	r24, 0x23	; 35
     daa:	58 dc       	rcall	.-1872   	; 0x65c <pvPortMalloc>
     dac:	ec 01       	movw	r28, r24
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	41 f0       	breq	.+16     	; 0xdc2 <xQueueGenericCreate+0x34>
     db2:	8c 01       	movw	r16, r24
     db4:	2d 2d       	mov	r18, r13
     db6:	ac 01       	movw	r20, r24
     db8:	4d 5d       	subi	r20, 0xDD	; 221
     dba:	5f 4f       	sbci	r21, 0xFF	; 255
     dbc:	6e 2d       	mov	r22, r14
     dbe:	8f 2d       	mov	r24, r15
     dc0:	d4 df       	rcall	.-88     	; 0xd6a <prvInitialiseNewQueue>
     dc2:	ce 01       	movw	r24, r28
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	ff 90       	pop	r15
     dce:	ef 90       	pop	r14
     dd0:	df 90       	pop	r13
     dd2:	08 95       	ret

00000dd4 <xQueueGenericSend>:
     dd4:	cf 92       	push	r12
     dd6:	df 92       	push	r13
     dd8:	ef 92       	push	r14
     dda:	ff 92       	push	r15
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	29 97       	sbiw	r28, 0x09	; 9
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	7c 01       	movw	r14, r24
     df6:	6b 01       	movw	r12, r22
     df8:	2e 83       	std	Y+6, r18	; 0x06
     dfa:	3f 83       	std	Y+7, r19	; 0x07
     dfc:	48 87       	std	Y+8, r20	; 0x08
     dfe:	59 87       	std	Y+9, r21	; 0x09
     e00:	10 e0       	ldi	r17, 0x00	; 0
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	0f 92       	push	r0
     e08:	f7 01       	movw	r30, r14
     e0a:	96 8d       	ldd	r25, Z+30	; 0x1e
     e0c:	87 8d       	ldd	r24, Z+31	; 0x1f
     e0e:	98 17       	cp	r25, r24
     e10:	10 f0       	brcs	.+4      	; 0xe16 <xQueueGenericSend+0x42>
     e12:	02 30       	cpi	r16, 0x02	; 2
     e14:	b1 f4       	brne	.+44     	; 0xe42 <xQueueGenericSend+0x6e>
     e16:	40 2f       	mov	r20, r16
     e18:	b6 01       	movw	r22, r12
     e1a:	c7 01       	movw	r24, r14
     e1c:	b6 de       	rcall	.-660    	; 0xb8a <prvCopyDataToQueue>
     e1e:	f7 01       	movw	r30, r14
     e20:	93 89       	ldd	r25, Z+19	; 0x13
     e22:	99 23       	and	r25, r25
     e24:	41 f0       	breq	.+16     	; 0xe36 <xQueueGenericSend+0x62>
     e26:	c7 01       	movw	r24, r14
     e28:	43 96       	adiw	r24, 0x13	; 19
     e2a:	0e 94 7d 11 	call	0x22fa	; 0x22fa <xTaskRemoveFromEventList>
     e2e:	88 23       	and	r24, r24
     e30:	21 f0       	breq	.+8      	; 0xe3a <xQueueGenericSend+0x66>
     e32:	c8 dd       	rcall	.-1136   	; 0x9c4 <vPortYield>
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <xQueueGenericSend+0x66>
     e36:	81 11       	cpse	r24, r1
     e38:	c5 dd       	rcall	.-1142   	; 0x9c4 <vPortYield>
     e3a:	0f 90       	pop	r0
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	4a c0       	rjmp	.+148    	; 0xed6 <xQueueGenericSend+0x102>
     e42:	8e 81       	ldd	r24, Y+6	; 0x06
     e44:	9f 81       	ldd	r25, Y+7	; 0x07
     e46:	a8 85       	ldd	r26, Y+8	; 0x08
     e48:	b9 85       	ldd	r27, Y+9	; 0x09
     e4a:	89 2b       	or	r24, r25
     e4c:	8a 2b       	or	r24, r26
     e4e:	8b 2b       	or	r24, r27
     e50:	21 f4       	brne	.+8      	; 0xe5a <xQueueGenericSend+0x86>
     e52:	0f 90       	pop	r0
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	3e c0       	rjmp	.+124    	; 0xed6 <xQueueGenericSend+0x102>
     e5a:	11 11       	cpse	r17, r1
     e5c:	05 c0       	rjmp	.+10     	; 0xe68 <xQueueGenericSend+0x94>
     e5e:	ce 01       	movw	r24, r28
     e60:	01 96       	adiw	r24, 0x01	; 1
     e62:	0e 94 42 12 	call	0x2484	; 0x2484 <vTaskInternalSetTimeOutState>
     e66:	11 e0       	ldi	r17, 0x01	; 1
     e68:	0f 90       	pop	r0
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	ec d6       	rcall	.+3544   	; 0x1c46 <vTaskSuspendAll>
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	0f 92       	push	r0
     e74:	f7 01       	movw	r30, r14
     e76:	81 a1       	ldd	r24, Z+33	; 0x21
     e78:	8f 3f       	cpi	r24, 0xFF	; 255
     e7a:	09 f4       	brne	.+2      	; 0xe7e <xQueueGenericSend+0xaa>
     e7c:	11 a2       	std	Z+33, r1	; 0x21
     e7e:	f7 01       	movw	r30, r14
     e80:	82 a1       	ldd	r24, Z+34	; 0x22
     e82:	8f 3f       	cpi	r24, 0xFF	; 255
     e84:	09 f4       	brne	.+2      	; 0xe88 <xQueueGenericSend+0xb4>
     e86:	12 a2       	std	Z+34, r1	; 0x22
     e88:	0f 90       	pop	r0
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	be 01       	movw	r22, r28
     e8e:	6a 5f       	subi	r22, 0xFA	; 250
     e90:	7f 4f       	sbci	r23, 0xFF	; 255
     e92:	ce 01       	movw	r24, r28
     e94:	01 96       	adiw	r24, 0x01	; 1
     e96:	0e 94 53 12 	call	0x24a6	; 0x24a6 <xTaskCheckForTimeOut>
     e9a:	81 11       	cpse	r24, r1
     e9c:	18 c0       	rjmp	.+48     	; 0xece <xQueueGenericSend+0xfa>
     e9e:	c7 01       	movw	r24, r14
     ea0:	66 de       	rcall	.-820    	; 0xb6e <prvIsQueueFull>
     ea2:	88 23       	and	r24, r24
     ea4:	81 f0       	breq	.+32     	; 0xec6 <xQueueGenericSend+0xf2>
     ea6:	4e 81       	ldd	r20, Y+6	; 0x06
     ea8:	5f 81       	ldd	r21, Y+7	; 0x07
     eaa:	68 85       	ldd	r22, Y+8	; 0x08
     eac:	79 85       	ldd	r23, Y+9	; 0x09
     eae:	c7 01       	movw	r24, r14
     eb0:	08 96       	adiw	r24, 0x08	; 8
     eb2:	0e 94 24 11 	call	0x2248	; 0x2248 <vTaskPlaceOnEventList>
     eb6:	c7 01       	movw	r24, r14
     eb8:	e1 de       	rcall	.-574    	; 0xc7c <prvUnlockQueue>
     eba:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <xTaskResumeAll>
     ebe:	81 11       	cpse	r24, r1
     ec0:	a0 cf       	rjmp	.-192    	; 0xe02 <xQueueGenericSend+0x2e>
     ec2:	80 dd       	rcall	.-1280   	; 0x9c4 <vPortYield>
     ec4:	9e cf       	rjmp	.-196    	; 0xe02 <xQueueGenericSend+0x2e>
     ec6:	c7 01       	movw	r24, r14
     ec8:	d9 de       	rcall	.-590    	; 0xc7c <prvUnlockQueue>
     eca:	fd d7       	rcall	.+4090   	; 0x1ec6 <xTaskResumeAll>
     ecc:	9a cf       	rjmp	.-204    	; 0xe02 <xQueueGenericSend+0x2e>
     ece:	c7 01       	movw	r24, r14
     ed0:	d5 de       	rcall	.-598    	; 0xc7c <prvUnlockQueue>
     ed2:	f9 d7       	rcall	.+4082   	; 0x1ec6 <xTaskResumeAll>
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	29 96       	adiw	r28, 0x09	; 9
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cd bf       	out	0x3d, r28	; 61
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	1f 91       	pop	r17
     ee8:	0f 91       	pop	r16
     eea:	ff 90       	pop	r15
     eec:	ef 90       	pop	r14
     eee:	df 90       	pop	r13
     ef0:	cf 90       	pop	r12
     ef2:	08 95       	ret

00000ef4 <xQueueGenericSendFromISR>:
     ef4:	ef 92       	push	r14
     ef6:	ff 92       	push	r15
     ef8:	0f 93       	push	r16
     efa:	1f 93       	push	r17
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	8a 01       	movw	r16, r20
     f02:	fc 01       	movw	r30, r24
     f04:	56 8d       	ldd	r21, Z+30	; 0x1e
     f06:	37 8d       	ldd	r19, Z+31	; 0x1f
     f08:	53 17       	cp	r21, r19
     f0a:	10 f0       	brcs	.+4      	; 0xf10 <xQueueGenericSendFromISR+0x1c>
     f0c:	22 30       	cpi	r18, 0x02	; 2
     f0e:	f9 f4       	brne	.+62     	; 0xf4e <xQueueGenericSendFromISR+0x5a>
     f10:	42 2f       	mov	r20, r18
     f12:	78 01       	movw	r14, r16
     f14:	ec 01       	movw	r28, r24
     f16:	1a a1       	ldd	r17, Y+34	; 0x22
     f18:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f1a:	ce 01       	movw	r24, r28
     f1c:	36 de       	rcall	.-916    	; 0xb8a <prvCopyDataToQueue>
     f1e:	1f 3f       	cpi	r17, 0xFF	; 255
     f20:	81 f4       	brne	.+32     	; 0xf42 <xQueueGenericSendFromISR+0x4e>
     f22:	8b 89       	ldd	r24, Y+19	; 0x13
     f24:	88 23       	and	r24, r24
     f26:	a9 f0       	breq	.+42     	; 0xf52 <xQueueGenericSendFromISR+0x5e>
     f28:	ce 01       	movw	r24, r28
     f2a:	43 96       	adiw	r24, 0x13	; 19
     f2c:	0e 94 7d 11 	call	0x22fa	; 0x22fa <xTaskRemoveFromEventList>
     f30:	88 23       	and	r24, r24
     f32:	89 f0       	breq	.+34     	; 0xf56 <xQueueGenericSendFromISR+0x62>
     f34:	e1 14       	cp	r14, r1
     f36:	f1 04       	cpc	r15, r1
     f38:	81 f0       	breq	.+32     	; 0xf5a <xQueueGenericSendFromISR+0x66>
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	f7 01       	movw	r30, r14
     f3e:	80 83       	st	Z, r24
     f40:	0d c0       	rjmp	.+26     	; 0xf5c <xQueueGenericSendFromISR+0x68>
     f42:	ff 24       	eor	r15, r15
     f44:	f3 94       	inc	r15
     f46:	f1 0e       	add	r15, r17
     f48:	fa a2       	std	Y+34, r15	; 0x22
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	07 c0       	rjmp	.+14     	; 0xf5c <xQueueGenericSendFromISR+0x68>
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	05 c0       	rjmp	.+10     	; 0xf5c <xQueueGenericSendFromISR+0x68>
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	03 c0       	rjmp	.+6      	; 0xf5c <xQueueGenericSendFromISR+0x68>
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	01 c0       	rjmp	.+2      	; 0xf5c <xQueueGenericSendFromISR+0x68>
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	ff 90       	pop	r15
     f66:	ef 90       	pop	r14
     f68:	08 95       	ret

00000f6a <xQueueReceive>:
     f6a:	cf 92       	push	r12
     f6c:	df 92       	push	r13
     f6e:	ef 92       	push	r14
     f70:	ff 92       	push	r15
     f72:	0f 93       	push	r16
     f74:	1f 93       	push	r17
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	29 97       	sbiw	r28, 0x09	; 9
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	f8 94       	cli
     f84:	de bf       	out	0x3e, r29	; 62
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	cd bf       	out	0x3d, r28	; 61
     f8a:	8c 01       	movw	r16, r24
     f8c:	6b 01       	movw	r12, r22
     f8e:	2e 83       	std	Y+6, r18	; 0x06
     f90:	3f 83       	std	Y+7, r19	; 0x07
     f92:	48 87       	std	Y+8, r20	; 0x08
     f94:	59 87       	std	Y+9, r21	; 0x09
     f96:	e1 2c       	mov	r14, r1
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	0f 92       	push	r0
     f9e:	f8 01       	movw	r30, r16
     fa0:	f6 8c       	ldd	r15, Z+30	; 0x1e
     fa2:	ff 20       	and	r15, r15
     fa4:	99 f0       	breq	.+38     	; 0xfcc <xQueueReceive+0x62>
     fa6:	b6 01       	movw	r22, r12
     fa8:	c8 01       	movw	r24, r16
     faa:	4e de       	rcall	.-868    	; 0xc48 <prvCopyDataFromQueue>
     fac:	fa 94       	dec	r15
     fae:	f8 01       	movw	r30, r16
     fb0:	f6 8e       	std	Z+30, r15	; 0x1e
     fb2:	80 85       	ldd	r24, Z+8	; 0x08
     fb4:	88 23       	and	r24, r24
     fb6:	31 f0       	breq	.+12     	; 0xfc4 <xQueueReceive+0x5a>
     fb8:	c8 01       	movw	r24, r16
     fba:	08 96       	adiw	r24, 0x08	; 8
     fbc:	0e 94 7d 11 	call	0x22fa	; 0x22fa <xTaskRemoveFromEventList>
     fc0:	81 11       	cpse	r24, r1
     fc2:	00 dd       	rcall	.-1536   	; 0x9c4 <vPortYield>
     fc4:	0f 90       	pop	r0
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	4f c0       	rjmp	.+158    	; 0x106a <__EEPROM_REGION_LENGTH__+0x6a>
     fcc:	8e 81       	ldd	r24, Y+6	; 0x06
     fce:	9f 81       	ldd	r25, Y+7	; 0x07
     fd0:	a8 85       	ldd	r26, Y+8	; 0x08
     fd2:	b9 85       	ldd	r27, Y+9	; 0x09
     fd4:	89 2b       	or	r24, r25
     fd6:	8a 2b       	or	r24, r26
     fd8:	8b 2b       	or	r24, r27
     fda:	21 f4       	brne	.+8      	; 0xfe4 <xQueueReceive+0x7a>
     fdc:	0f 90       	pop	r0
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	43 c0       	rjmp	.+134    	; 0x106a <__EEPROM_REGION_LENGTH__+0x6a>
     fe4:	e1 10       	cpse	r14, r1
     fe6:	06 c0       	rjmp	.+12     	; 0xff4 <xQueueReceive+0x8a>
     fe8:	ce 01       	movw	r24, r28
     fea:	01 96       	adiw	r24, 0x01	; 1
     fec:	0e 94 42 12 	call	0x2484	; 0x2484 <vTaskInternalSetTimeOutState>
     ff0:	ee 24       	eor	r14, r14
     ff2:	e3 94       	inc	r14
     ff4:	0f 90       	pop	r0
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	26 d6       	rcall	.+3148   	; 0x1c46 <vTaskSuspendAll>
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	0f 92       	push	r0
    1000:	f8 01       	movw	r30, r16
    1002:	81 a1       	ldd	r24, Z+33	; 0x21
    1004:	8f 3f       	cpi	r24, 0xFF	; 255
    1006:	09 f4       	brne	.+2      	; 0x100a <__EEPROM_REGION_LENGTH__+0xa>
    1008:	11 a2       	std	Z+33, r1	; 0x21
    100a:	f8 01       	movw	r30, r16
    100c:	82 a1       	ldd	r24, Z+34	; 0x22
    100e:	8f 3f       	cpi	r24, 0xFF	; 255
    1010:	09 f4       	brne	.+2      	; 0x1014 <__EEPROM_REGION_LENGTH__+0x14>
    1012:	12 a2       	std	Z+34, r1	; 0x22
    1014:	0f 90       	pop	r0
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	be 01       	movw	r22, r28
    101a:	6a 5f       	subi	r22, 0xFA	; 250
    101c:	7f 4f       	sbci	r23, 0xFF	; 255
    101e:	ce 01       	movw	r24, r28
    1020:	01 96       	adiw	r24, 0x01	; 1
    1022:	0e 94 53 12 	call	0x24a6	; 0x24a6 <xTaskCheckForTimeOut>
    1026:	81 11       	cpse	r24, r1
    1028:	17 c0       	rjmp	.+46     	; 0x1058 <__EEPROM_REGION_LENGTH__+0x58>
    102a:	c8 01       	movw	r24, r16
    102c:	93 dd       	rcall	.-1242   	; 0xb54 <prvIsQueueEmpty>
    102e:	88 23       	and	r24, r24
    1030:	79 f0       	breq	.+30     	; 0x1050 <__EEPROM_REGION_LENGTH__+0x50>
    1032:	4e 81       	ldd	r20, Y+6	; 0x06
    1034:	5f 81       	ldd	r21, Y+7	; 0x07
    1036:	68 85       	ldd	r22, Y+8	; 0x08
    1038:	79 85       	ldd	r23, Y+9	; 0x09
    103a:	c8 01       	movw	r24, r16
    103c:	43 96       	adiw	r24, 0x13	; 19
    103e:	0e 94 24 11 	call	0x2248	; 0x2248 <vTaskPlaceOnEventList>
    1042:	c8 01       	movw	r24, r16
    1044:	1b de       	rcall	.-970    	; 0xc7c <prvUnlockQueue>
    1046:	3f d7       	rcall	.+3710   	; 0x1ec6 <xTaskResumeAll>
    1048:	81 11       	cpse	r24, r1
    104a:	a6 cf       	rjmp	.-180    	; 0xf98 <xQueueReceive+0x2e>
    104c:	bb dc       	rcall	.-1674   	; 0x9c4 <vPortYield>
    104e:	a4 cf       	rjmp	.-184    	; 0xf98 <xQueueReceive+0x2e>
    1050:	c8 01       	movw	r24, r16
    1052:	14 de       	rcall	.-984    	; 0xc7c <prvUnlockQueue>
    1054:	38 d7       	rcall	.+3696   	; 0x1ec6 <xTaskResumeAll>
    1056:	a0 cf       	rjmp	.-192    	; 0xf98 <xQueueReceive+0x2e>
    1058:	c8 01       	movw	r24, r16
    105a:	10 de       	rcall	.-992    	; 0xc7c <prvUnlockQueue>
    105c:	34 d7       	rcall	.+3688   	; 0x1ec6 <xTaskResumeAll>
    105e:	c8 01       	movw	r24, r16
    1060:	79 dd       	rcall	.-1294   	; 0xb54 <prvIsQueueEmpty>
    1062:	88 23       	and	r24, r24
    1064:	09 f4       	brne	.+2      	; 0x1068 <__EEPROM_REGION_LENGTH__+0x68>
    1066:	98 cf       	rjmp	.-208    	; 0xf98 <xQueueReceive+0x2e>
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	29 96       	adiw	r28, 0x09	; 9
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	cd bf       	out	0x3d, r28	; 61
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	1f 91       	pop	r17
    107c:	0f 91       	pop	r16
    107e:	ff 90       	pop	r15
    1080:	ef 90       	pop	r14
    1082:	df 90       	pop	r13
    1084:	cf 90       	pop	r12
    1086:	08 95       	ret

00001088 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	0f 92       	push	r0
    1094:	89 a1       	ldd	r24, Y+33	; 0x21
    1096:	8f 3f       	cpi	r24, 0xFF	; 255
    1098:	09 f4       	brne	.+2      	; 0x109c <vQueueWaitForMessageRestricted+0x14>
    109a:	19 a2       	std	Y+33, r1	; 0x21
    109c:	8a a1       	ldd	r24, Y+34	; 0x22
    109e:	8f 3f       	cpi	r24, 0xFF	; 255
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <vQueueWaitForMessageRestricted+0x1c>
    10a2:	1a a2       	std	Y+34, r1	; 0x22
    10a4:	0f 90       	pop	r0
    10a6:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    10a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10aa:	81 11       	cpse	r24, r1
    10ac:	04 c0       	rjmp	.+8      	; 0x10b6 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    10ae:	ce 01       	movw	r24, r28
    10b0:	43 96       	adiw	r24, 0x13	; 19
    10b2:	0e 94 3b 11 	call	0x2276	; 0x2276 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    10b6:	ce 01       	movw	r24, r28
    10b8:	e1 dd       	rcall	.-1086   	; 0xc7c <prvUnlockQueue>
    }
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	08 95       	ret

000010c0 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    10c0:	fc 01       	movw	r30, r24
    10c2:	44 81       	ldd	r20, Z+4	; 0x04
    10c4:	55 81       	ldd	r21, Z+5	; 0x05
    10c6:	22 81       	ldd	r18, Z+2	; 0x02
    10c8:	33 81       	ldd	r19, Z+3	; 0x03
    10ca:	24 0f       	add	r18, r20
    10cc:	35 1f       	adc	r19, r21
    10ce:	80 81       	ld	r24, Z
    10d0:	91 81       	ldd	r25, Z+1	; 0x01
    10d2:	b9 01       	movw	r22, r18
    10d4:	68 1b       	sub	r22, r24
    10d6:	79 0b       	sbc	r23, r25
    10d8:	cb 01       	movw	r24, r22
    10da:	64 17       	cp	r22, r20
    10dc:	75 07       	cpc	r23, r21
    10de:	10 f0       	brcs	.+4      	; 0x10e4 <prvBytesInBuffer+0x24>
    10e0:	84 1b       	sub	r24, r20
    10e2:	95 0b       	sbc	r25, r21
    10e4:	08 95       	ret

000010e6 <prvInitialiseNewStreamBuffer>:
    10e6:	0f 93       	push	r16
    10e8:	fc 01       	movw	r30, r24
    10ea:	8f e0       	ldi	r24, 0x0F	; 15
    10ec:	df 01       	movw	r26, r30
    10ee:	1d 92       	st	X+, r1
    10f0:	8a 95       	dec	r24
    10f2:	e9 f7       	brne	.-6      	; 0x10ee <prvInitialiseNewStreamBuffer+0x8>
    10f4:	75 87       	std	Z+13, r23	; 0x0d
    10f6:	64 87       	std	Z+12, r22	; 0x0c
    10f8:	55 83       	std	Z+5, r21	; 0x05
    10fa:	44 83       	std	Z+4, r20	; 0x04
    10fc:	37 83       	std	Z+7, r19	; 0x07
    10fe:	26 83       	std	Z+6, r18	; 0x06
    1100:	06 87       	std	Z+14, r16	; 0x0e
    1102:	0f 91       	pop	r16
    1104:	08 95       	ret

00001106 <prvWriteBytesToBuffer>:
    1106:	af 92       	push	r10
    1108:	bf 92       	push	r11
    110a:	cf 92       	push	r12
    110c:	df 92       	push	r13
    110e:	ef 92       	push	r14
    1110:	ff 92       	push	r15
    1112:	0f 93       	push	r16
    1114:	1f 93       	push	r17
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	6c 01       	movw	r12, r24
    111c:	5b 01       	movw	r10, r22
    111e:	7a 01       	movw	r14, r20
    1120:	fc 01       	movw	r30, r24
    1122:	c2 81       	ldd	r28, Z+2	; 0x02
    1124:	d3 81       	ldd	r29, Z+3	; 0x03
    1126:	04 81       	ldd	r16, Z+4	; 0x04
    1128:	15 81       	ldd	r17, Z+5	; 0x05
    112a:	0c 1b       	sub	r16, r28
    112c:	1d 0b       	sbc	r17, r29
    112e:	40 17       	cp	r20, r16
    1130:	51 07       	cpc	r21, r17
    1132:	08 f4       	brcc	.+2      	; 0x1136 <prvWriteBytesToBuffer+0x30>
    1134:	8a 01       	movw	r16, r20
    1136:	f6 01       	movw	r30, r12
    1138:	84 85       	ldd	r24, Z+12	; 0x0c
    113a:	95 85       	ldd	r25, Z+13	; 0x0d
    113c:	a8 01       	movw	r20, r16
    113e:	b5 01       	movw	r22, r10
    1140:	8c 0f       	add	r24, r28
    1142:	9d 1f       	adc	r25, r29
    1144:	0e 94 f7 29 	call	0x53ee	; 0x53ee <memcpy>
    1148:	0e 15       	cp	r16, r14
    114a:	1f 05       	cpc	r17, r15
    114c:	58 f4       	brcc	.+22     	; 0x1164 <prvWriteBytesToBuffer+0x5e>
    114e:	a7 01       	movw	r20, r14
    1150:	40 1b       	sub	r20, r16
    1152:	51 0b       	sbc	r21, r17
    1154:	b5 01       	movw	r22, r10
    1156:	60 0f       	add	r22, r16
    1158:	71 1f       	adc	r23, r17
    115a:	f6 01       	movw	r30, r12
    115c:	84 85       	ldd	r24, Z+12	; 0x0c
    115e:	95 85       	ldd	r25, Z+13	; 0x0d
    1160:	0e 94 f7 29 	call	0x53ee	; 0x53ee <memcpy>
    1164:	ce 01       	movw	r24, r28
    1166:	8e 0d       	add	r24, r14
    1168:	9f 1d       	adc	r25, r15
    116a:	f6 01       	movw	r30, r12
    116c:	24 81       	ldd	r18, Z+4	; 0x04
    116e:	35 81       	ldd	r19, Z+5	; 0x05
    1170:	82 17       	cp	r24, r18
    1172:	93 07       	cpc	r25, r19
    1174:	10 f0       	brcs	.+4      	; 0x117a <prvWriteBytesToBuffer+0x74>
    1176:	82 1b       	sub	r24, r18
    1178:	93 0b       	sbc	r25, r19
    117a:	f6 01       	movw	r30, r12
    117c:	93 83       	std	Z+3, r25	; 0x03
    117e:	82 83       	std	Z+2, r24	; 0x02
    1180:	c7 01       	movw	r24, r14
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	ff 90       	pop	r15
    118c:	ef 90       	pop	r14
    118e:	df 90       	pop	r13
    1190:	cf 90       	pop	r12
    1192:	bf 90       	pop	r11
    1194:	af 90       	pop	r10
    1196:	08 95       	ret

00001198 <prvWriteMessageToBuffer>:
    1198:	cf 92       	push	r12
    119a:	df 92       	push	r13
    119c:	ef 92       	push	r14
    119e:	ff 92       	push	r15
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	1f 92       	push	r1
    11aa:	1f 92       	push	r1
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	7c 01       	movw	r14, r24
    11b2:	6b 01       	movw	r12, r22
    11b4:	5a 83       	std	Y+2, r21	; 0x02
    11b6:	49 83       	std	Y+1, r20	; 0x01
    11b8:	21 15       	cp	r18, r1
    11ba:	31 05       	cpc	r19, r1
    11bc:	c1 f0       	breq	.+48     	; 0x11ee <prvWriteMessageToBuffer+0x56>
    11be:	fc 01       	movw	r30, r24
    11c0:	86 85       	ldd	r24, Z+14	; 0x0e
    11c2:	80 fd       	sbrc	r24, 0
    11c4:	08 c0       	rjmp	.+16     	; 0x11d6 <prvWriteMessageToBuffer+0x3e>
    11c6:	42 17       	cp	r20, r18
    11c8:	53 07       	cpc	r21, r19
    11ca:	08 f4       	brcc	.+2      	; 0x11ce <prvWriteMessageToBuffer+0x36>
    11cc:	9a 01       	movw	r18, r20
    11ce:	3a 83       	std	Y+2, r19	; 0x02
    11d0:	29 83       	std	Y+1, r18	; 0x01
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	0f c0       	rjmp	.+30     	; 0x11f4 <prvWriteMessageToBuffer+0x5c>
    11d6:	20 17       	cp	r18, r16
    11d8:	31 07       	cpc	r19, r17
    11da:	58 f0       	brcs	.+22     	; 0x11f2 <prvWriteMessageToBuffer+0x5a>
    11dc:	42 e0       	ldi	r20, 0x02	; 2
    11de:	50 e0       	ldi	r21, 0x00	; 0
    11e0:	be 01       	movw	r22, r28
    11e2:	6f 5f       	subi	r22, 0xFF	; 255
    11e4:	7f 4f       	sbci	r23, 0xFF	; 255
    11e6:	c7 01       	movw	r24, r14
    11e8:	8e df       	rcall	.-228    	; 0x1106 <prvWriteBytesToBuffer>
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	03 c0       	rjmp	.+6      	; 0x11f4 <prvWriteMessageToBuffer+0x5c>
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	01 c0       	rjmp	.+2      	; 0x11f4 <prvWriteMessageToBuffer+0x5c>
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	88 23       	and	r24, r24
    11f6:	31 f0       	breq	.+12     	; 0x1204 <prvWriteMessageToBuffer+0x6c>
    11f8:	49 81       	ldd	r20, Y+1	; 0x01
    11fa:	5a 81       	ldd	r21, Y+2	; 0x02
    11fc:	b6 01       	movw	r22, r12
    11fe:	c7 01       	movw	r24, r14
    1200:	82 df       	rcall	.-252    	; 0x1106 <prvWriteBytesToBuffer>
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <prvWriteMessageToBuffer+0x70>
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	ff 90       	pop	r15
    1216:	ef 90       	pop	r14
    1218:	df 90       	pop	r13
    121a:	cf 90       	pop	r12
    121c:	08 95       	ret

0000121e <prvReadBytesFromBuffer>:
    121e:	af 92       	push	r10
    1220:	bf 92       	push	r11
    1222:	cf 92       	push	r12
    1224:	df 92       	push	r13
    1226:	ef 92       	push	r14
    1228:	ff 92       	push	r15
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	7c 01       	movw	r14, r24
    1234:	5b 01       	movw	r10, r22
    1236:	e9 01       	movw	r28, r18
    1238:	42 17       	cp	r20, r18
    123a:	53 07       	cpc	r21, r19
    123c:	08 f4       	brcc	.+2      	; 0x1240 <prvReadBytesFromBuffer+0x22>
    123e:	ea 01       	movw	r28, r20
    1240:	20 97       	sbiw	r28, 0x00	; 0
    1242:	81 f1       	breq	.+96     	; 0x12a4 <prvReadBytesFromBuffer+0x86>
    1244:	f7 01       	movw	r30, r14
    1246:	00 81       	ld	r16, Z
    1248:	11 81       	ldd	r17, Z+1	; 0x01
    124a:	84 81       	ldd	r24, Z+4	; 0x04
    124c:	95 81       	ldd	r25, Z+5	; 0x05
    124e:	80 1b       	sub	r24, r16
    1250:	91 0b       	sbc	r25, r17
    1252:	6e 01       	movw	r12, r28
    1254:	8c 17       	cp	r24, r28
    1256:	9d 07       	cpc	r25, r29
    1258:	08 f4       	brcc	.+2      	; 0x125c <prvReadBytesFromBuffer+0x3e>
    125a:	6c 01       	movw	r12, r24
    125c:	f7 01       	movw	r30, r14
    125e:	64 85       	ldd	r22, Z+12	; 0x0c
    1260:	75 85       	ldd	r23, Z+13	; 0x0d
    1262:	60 0f       	add	r22, r16
    1264:	71 1f       	adc	r23, r17
    1266:	a6 01       	movw	r20, r12
    1268:	c5 01       	movw	r24, r10
    126a:	0e 94 f7 29 	call	0x53ee	; 0x53ee <memcpy>
    126e:	cc 16       	cp	r12, r28
    1270:	dd 06       	cpc	r13, r29
    1272:	58 f4       	brcc	.+22     	; 0x128a <prvReadBytesFromBuffer+0x6c>
    1274:	ae 01       	movw	r20, r28
    1276:	4c 19       	sub	r20, r12
    1278:	5d 09       	sbc	r21, r13
    127a:	f7 01       	movw	r30, r14
    127c:	64 85       	ldd	r22, Z+12	; 0x0c
    127e:	75 85       	ldd	r23, Z+13	; 0x0d
    1280:	c5 01       	movw	r24, r10
    1282:	8c 0d       	add	r24, r12
    1284:	9d 1d       	adc	r25, r13
    1286:	0e 94 f7 29 	call	0x53ee	; 0x53ee <memcpy>
    128a:	0c 0f       	add	r16, r28
    128c:	1d 1f       	adc	r17, r29
    128e:	f7 01       	movw	r30, r14
    1290:	84 81       	ldd	r24, Z+4	; 0x04
    1292:	95 81       	ldd	r25, Z+5	; 0x05
    1294:	08 17       	cp	r16, r24
    1296:	19 07       	cpc	r17, r25
    1298:	10 f0       	brcs	.+4      	; 0x129e <prvReadBytesFromBuffer+0x80>
    129a:	08 1b       	sub	r16, r24
    129c:	19 0b       	sbc	r17, r25
    129e:	f7 01       	movw	r30, r14
    12a0:	11 83       	std	Z+1, r17	; 0x01
    12a2:	00 83       	st	Z, r16
    12a4:	ce 01       	movw	r24, r28
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	ff 90       	pop	r15
    12b0:	ef 90       	pop	r14
    12b2:	df 90       	pop	r13
    12b4:	cf 90       	pop	r12
    12b6:	bf 90       	pop	r11
    12b8:	af 90       	pop	r10
    12ba:	08 95       	ret

000012bc <prvReadMessageFromBuffer>:
    12bc:	6f 92       	push	r6
    12be:	7f 92       	push	r7
    12c0:	8f 92       	push	r8
    12c2:	9f 92       	push	r9
    12c4:	af 92       	push	r10
    12c6:	bf 92       	push	r11
    12c8:	cf 92       	push	r12
    12ca:	df 92       	push	r13
    12cc:	ef 92       	push	r14
    12ce:	ff 92       	push	r15
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	1f 92       	push	r1
    12da:	1f 92       	push	r1
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	6c 01       	movw	r12, r24
    12e2:	4b 01       	movw	r8, r22
    12e4:	5a 01       	movw	r10, r20
    12e6:	79 01       	movw	r14, r18
    12e8:	01 15       	cp	r16, r1
    12ea:	11 05       	cpc	r17, r1
    12ec:	b1 f0       	breq	.+44     	; 0x131a <prvReadMessageFromBuffer+0x5e>
    12ee:	fc 01       	movw	r30, r24
    12f0:	60 80       	ld	r6, Z
    12f2:	71 80       	ldd	r7, Z+1	; 0x01
    12f4:	a8 01       	movw	r20, r16
    12f6:	be 01       	movw	r22, r28
    12f8:	6f 5f       	subi	r22, 0xFF	; 255
    12fa:	7f 4f       	sbci	r23, 0xFF	; 255
    12fc:	90 df       	rcall	.-224    	; 0x121e <prvReadBytesFromBuffer>
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	9a 81       	ldd	r25, Y+2	; 0x02
    1302:	e0 1a       	sub	r14, r16
    1304:	f1 0a       	sbc	r15, r17
    1306:	a8 16       	cp	r10, r24
    1308:	b9 06       	cpc	r11, r25
    130a:	30 f4       	brcc	.+12     	; 0x1318 <prvReadMessageFromBuffer+0x5c>
    130c:	f6 01       	movw	r30, r12
    130e:	71 82       	std	Z+1, r7	; 0x01
    1310:	60 82       	st	Z, r6
    1312:	a1 2c       	mov	r10, r1
    1314:	b1 2c       	mov	r11, r1
    1316:	01 c0       	rjmp	.+2      	; 0x131a <prvReadMessageFromBuffer+0x5e>
    1318:	5c 01       	movw	r10, r24
    131a:	97 01       	movw	r18, r14
    131c:	a5 01       	movw	r20, r10
    131e:	b4 01       	movw	r22, r8
    1320:	c6 01       	movw	r24, r12
    1322:	7d df       	rcall	.-262    	; 0x121e <prvReadBytesFromBuffer>
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	ff 90       	pop	r15
    1332:	ef 90       	pop	r14
    1334:	df 90       	pop	r13
    1336:	cf 90       	pop	r12
    1338:	bf 90       	pop	r11
    133a:	af 90       	pop	r10
    133c:	9f 90       	pop	r9
    133e:	8f 90       	pop	r8
    1340:	7f 90       	pop	r7
    1342:	6f 90       	pop	r6
    1344:	08 95       	ret

00001346 <xStreamBufferGenericCreate>:
    1346:	cf 92       	push	r12
    1348:	df 92       	push	r13
    134a:	ef 92       	push	r14
    134c:	ff 92       	push	r15
    134e:	0f 93       	push	r16
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	ec 01       	movw	r28, r24
    1356:	6b 01       	movw	r12, r22
    1358:	41 30       	cpi	r20, 0x01	; 1
    135a:	11 f4       	brne	.+4      	; 0x1360 <xStreamBufferGenericCreate+0x1a>
    135c:	01 e0       	ldi	r16, 0x01	; 1
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <xStreamBufferGenericCreate+0x1c>
    1360:	00 e0       	ldi	r16, 0x00	; 0
    1362:	c1 14       	cp	r12, r1
    1364:	d1 04       	cpc	r13, r1
    1366:	19 f4       	brne	.+6      	; 0x136e <xStreamBufferGenericCreate+0x28>
    1368:	cc 24       	eor	r12, r12
    136a:	c3 94       	inc	r12
    136c:	d1 2c       	mov	r13, r1
    136e:	ce 01       	movw	r24, r28
    1370:	40 96       	adiw	r24, 0x10	; 16
    1372:	c8 17       	cp	r28, r24
    1374:	d9 07       	cpc	r29, r25
    1376:	20 f4       	brcc	.+8      	; 0x1380 <xStreamBufferGenericCreate+0x3a>
    1378:	21 96       	adiw	r28, 0x01	; 1
    137a:	70 d9       	rcall	.-3360   	; 0x65c <pvPortMalloc>
    137c:	7c 01       	movw	r14, r24
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <xStreamBufferGenericCreate+0x3e>
    1380:	e1 2c       	mov	r14, r1
    1382:	f1 2c       	mov	r15, r1
    1384:	e1 14       	cp	r14, r1
    1386:	f1 04       	cpc	r15, r1
    1388:	39 f0       	breq	.+14     	; 0x1398 <xStreamBufferGenericCreate+0x52>
    138a:	96 01       	movw	r18, r12
    138c:	ae 01       	movw	r20, r28
    138e:	b7 01       	movw	r22, r14
    1390:	61 5f       	subi	r22, 0xF1	; 241
    1392:	7f 4f       	sbci	r23, 0xFF	; 255
    1394:	c7 01       	movw	r24, r14
    1396:	a7 de       	rcall	.-690    	; 0x10e6 <prvInitialiseNewStreamBuffer>
    1398:	c7 01       	movw	r24, r14
    139a:	df 91       	pop	r29
    139c:	cf 91       	pop	r28
    139e:	0f 91       	pop	r16
    13a0:	ff 90       	pop	r15
    13a2:	ef 90       	pop	r14
    13a4:	df 90       	pop	r13
    13a6:	cf 90       	pop	r12
    13a8:	08 95       	ret

000013aa <xStreamBufferReset>:
    13aa:	0f 93       	push	r16
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	0f 92       	push	r0
    13b2:	fc 01       	movw	r30, r24
    13b4:	20 85       	ldd	r18, Z+8	; 0x08
    13b6:	31 85       	ldd	r19, Z+9	; 0x09
    13b8:	23 2b       	or	r18, r19
    13ba:	71 f4       	brne	.+28     	; 0x13d8 <xStreamBufferReset+0x2e>
    13bc:	22 85       	ldd	r18, Z+10	; 0x0a
    13be:	33 85       	ldd	r19, Z+11	; 0x0b
    13c0:	23 2b       	or	r18, r19
    13c2:	61 f4       	brne	.+24     	; 0x13dc <xStreamBufferReset+0x32>
    13c4:	26 81       	ldd	r18, Z+6	; 0x06
    13c6:	37 81       	ldd	r19, Z+7	; 0x07
    13c8:	44 81       	ldd	r20, Z+4	; 0x04
    13ca:	55 81       	ldd	r21, Z+5	; 0x05
    13cc:	64 85       	ldd	r22, Z+12	; 0x0c
    13ce:	75 85       	ldd	r23, Z+13	; 0x0d
    13d0:	06 85       	ldd	r16, Z+14	; 0x0e
    13d2:	89 de       	rcall	.-750    	; 0x10e6 <prvInitialiseNewStreamBuffer>
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	03 c0       	rjmp	.+6      	; 0x13de <xStreamBufferReset+0x34>
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	01 c0       	rjmp	.+2      	; 0x13de <xStreamBufferReset+0x34>
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	0f 90       	pop	r0
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	0f 91       	pop	r16
    13e4:	08 95       	ret

000013e6 <xStreamBufferSpacesAvailable>:
    13e6:	fc 01       	movw	r30, r24
    13e8:	24 81       	ldd	r18, Z+4	; 0x04
    13ea:	35 81       	ldd	r19, Z+5	; 0x05
    13ec:	80 81       	ld	r24, Z
    13ee:	91 81       	ldd	r25, Z+1	; 0x01
    13f0:	82 0f       	add	r24, r18
    13f2:	93 1f       	adc	r25, r19
    13f4:	42 81       	ldd	r20, Z+2	; 0x02
    13f6:	53 81       	ldd	r21, Z+3	; 0x03
    13f8:	84 1b       	sub	r24, r20
    13fa:	95 0b       	sbc	r25, r21
    13fc:	01 97       	sbiw	r24, 0x01	; 1
    13fe:	82 17       	cp	r24, r18
    1400:	93 07       	cpc	r25, r19
    1402:	10 f0       	brcs	.+4      	; 0x1408 <xStreamBufferSpacesAvailable+0x22>
    1404:	82 1b       	sub	r24, r18
    1406:	93 0b       	sbc	r25, r19
    1408:	08 95       	ret

0000140a <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    140a:	2f 92       	push	r2
    140c:	3f 92       	push	r3
    140e:	4f 92       	push	r4
    1410:	5f 92       	push	r5
    1412:	6f 92       	push	r6
    1414:	7f 92       	push	r7
    1416:	8f 92       	push	r8
    1418:	9f 92       	push	r9
    141a:	af 92       	push	r10
    141c:	bf 92       	push	r11
    141e:	cf 92       	push	r12
    1420:	df 92       	push	r13
    1422:	ef 92       	push	r14
    1424:	ff 92       	push	r15
    1426:	0f 93       	push	r16
    1428:	1f 93       	push	r17
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	2b 97       	sbiw	r28, 0x0b	; 11
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	4c 01       	movw	r8, r24
    1440:	7b 87       	std	Y+11, r23	; 0x0b
    1442:	6a 87       	std	Y+10, r22	; 0x0a
    1444:	1a 01       	movw	r2, r20
    1446:	0e 83       	std	Y+6, r16	; 0x06
    1448:	1f 83       	std	Y+7, r17	; 0x07
    144a:	28 87       	std	Y+8, r18	; 0x08
    144c:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    144e:	fc 01       	movw	r30, r24
    1450:	84 81       	ldd	r24, Z+4	; 0x04
    1452:	95 81       	ldd	r25, Z+5	; 0x05
    1454:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1456:	26 85       	ldd	r18, Z+14	; 0x0e
    1458:	20 ff       	sbrs	r18, 0
    145a:	0c c0       	rjmp	.+24     	; 0x1474 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    145c:	2a 01       	movw	r4, r20
    145e:	f2 e0       	ldi	r31, 0x02	; 2
    1460:	4f 0e       	add	r4, r31
    1462:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1464:	84 15       	cp	r24, r4
    1466:	95 05       	cpc	r25, r5
    1468:	58 f4       	brcc	.+22     	; 0x1480 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    146a:	1e 82       	std	Y+6, r1	; 0x06
    146c:	1f 82       	std	Y+7, r1	; 0x07
    146e:	18 86       	std	Y+8, r1	; 0x08
    1470:	19 86       	std	Y+9, r1	; 0x09
    1472:	06 c0       	rjmp	.+12     	; 0x1480 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1474:	84 17       	cp	r24, r20
    1476:	95 07       	cpc	r25, r21
    1478:	10 f0       	brcs	.+4      	; 0x147e <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    147a:	2a 01       	movw	r4, r20
    147c:	01 c0       	rjmp	.+2      	; 0x1480 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    147e:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1480:	8e 81       	ldd	r24, Y+6	; 0x06
    1482:	9f 81       	ldd	r25, Y+7	; 0x07
    1484:	a8 85       	ldd	r26, Y+8	; 0x08
    1486:	b9 85       	ldd	r27, Y+9	; 0x09
    1488:	89 2b       	or	r24, r25
    148a:	8a 2b       	or	r24, r26
    148c:	8b 2b       	or	r24, r27
    148e:	09 f4       	brne	.+2      	; 0x1492 <xStreamBufferSend+0x88>
    1490:	36 c0       	rjmp	.+108    	; 0x14fe <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1492:	ce 01       	movw	r24, r28
    1494:	01 96       	adiw	r24, 0x01	; 1
    1496:	e0 d7       	rcall	.+4032   	; 0x2458 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    149e:	c4 01       	movw	r24, r8
    14a0:	a2 df       	rcall	.-188    	; 0x13e6 <xStreamBufferSpacesAvailable>
    14a2:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    14a4:	84 15       	cp	r24, r4
    14a6:	95 05       	cpc	r25, r5
    14a8:	38 f5       	brcc	.+78     	; 0x14f8 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    14aa:	60 e0       	ldi	r22, 0x00	; 0
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    14b4:	0e 94 bd 12 	call	0x257a	; 0x257a <xTaskGetCurrentTaskHandle>
    14b8:	f4 01       	movw	r30, r8
    14ba:	93 87       	std	Z+11, r25	; 0x0b
    14bc:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    14be:	0f 90       	pop	r0
    14c0:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    14c2:	ae 80       	ldd	r10, Y+6	; 0x06
    14c4:	bf 80       	ldd	r11, Y+7	; 0x07
    14c6:	c8 84       	ldd	r12, Y+8	; 0x08
    14c8:	d9 84       	ldd	r13, Y+9	; 0x09
    14ca:	e1 2c       	mov	r14, r1
    14cc:	f1 2c       	mov	r15, r1
    14ce:	00 e0       	ldi	r16, 0x00	; 0
    14d0:	10 e0       	ldi	r17, 0x00	; 0
    14d2:	98 01       	movw	r18, r16
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	50 e0       	ldi	r21, 0x00	; 0
    14d8:	ba 01       	movw	r22, r20
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	0e 94 2b 13 	call	0x2656	; 0x2656 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    14e0:	f4 01       	movw	r30, r8
    14e2:	13 86       	std	Z+11, r1	; 0x0b
    14e4:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    14e6:	be 01       	movw	r22, r28
    14e8:	6a 5f       	subi	r22, 0xFA	; 250
    14ea:	7f 4f       	sbci	r23, 0xFF	; 255
    14ec:	ce 01       	movw	r24, r28
    14ee:	01 96       	adiw	r24, 0x01	; 1
    14f0:	da d7       	rcall	.+4020   	; 0x24a6 <xTaskCheckForTimeOut>
    14f2:	88 23       	and	r24, r24
    14f4:	89 f2       	breq	.-94     	; 0x1498 <xStreamBufferSend+0x8e>
    14f6:	05 c0       	rjmp	.+10     	; 0x1502 <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    14f8:	0f 90       	pop	r0
    14fa:	0f be       	out	0x3f, r0	; 63
                    break;
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    14fe:	61 2c       	mov	r6, r1
    1500:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1502:	61 14       	cp	r6, r1
    1504:	71 04       	cpc	r7, r1
    1506:	19 f4       	brne	.+6      	; 0x150e <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1508:	c4 01       	movw	r24, r8
    150a:	6d df       	rcall	.-294    	; 0x13e6 <xStreamBufferSpacesAvailable>
    150c:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    150e:	82 01       	movw	r16, r4
    1510:	93 01       	movw	r18, r6
    1512:	a1 01       	movw	r20, r2
    1514:	6a 85       	ldd	r22, Y+10	; 0x0a
    1516:	7b 85       	ldd	r23, Y+11	; 0x0b
    1518:	c4 01       	movw	r24, r8
    151a:	3e de       	rcall	.-900    	; 0x1198 <prvWriteMessageToBuffer>
    151c:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    151e:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1520:	e9 f0       	breq	.+58     	; 0x155c <xStreamBufferSend+0x152>
    1522:	c4 01       	movw	r24, r8
    1524:	cd dd       	rcall	.-1126   	; 0x10c0 <prvBytesInBuffer>
    1526:	f4 01       	movw	r30, r8
    1528:	26 81       	ldd	r18, Z+6	; 0x06
    152a:	37 81       	ldd	r19, Z+7	; 0x07
    152c:	82 17       	cp	r24, r18
    152e:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1530:	a8 f0       	brcs	.+42     	; 0x155c <xStreamBufferSend+0x152>
    1532:	89 d3       	rcall	.+1810   	; 0x1c46 <vTaskSuspendAll>
    1534:	f4 01       	movw	r30, r8
    1536:	80 85       	ldd	r24, Z+8	; 0x08
    1538:	91 85       	ldd	r25, Z+9	; 0x09
    153a:	89 2b       	or	r24, r25
    153c:	71 f0       	breq	.+28     	; 0x155a <xStreamBufferSend+0x150>
    153e:	80 85       	ldd	r24, Z+8	; 0x08
    1540:	91 85       	ldd	r25, Z+9	; 0x09
    1542:	e1 2c       	mov	r14, r1
    1544:	f1 2c       	mov	r15, r1
    1546:	00 e0       	ldi	r16, 0x00	; 0
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	a9 01       	movw	r20, r18
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <xTaskGenericNotify>
    1554:	f4 01       	movw	r30, r8
    1556:	11 86       	std	Z+9, r1	; 0x09
    1558:	10 86       	std	Z+8, r1	; 0x08
    155a:	b5 d4       	rcall	.+2410   	; 0x1ec6 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    155c:	c6 01       	movw	r24, r12
    155e:	2b 96       	adiw	r28, 0x0b	; 11
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	0f 91       	pop	r16
    1572:	ff 90       	pop	r15
    1574:	ef 90       	pop	r14
    1576:	df 90       	pop	r13
    1578:	cf 90       	pop	r12
    157a:	bf 90       	pop	r11
    157c:	af 90       	pop	r10
    157e:	9f 90       	pop	r9
    1580:	8f 90       	pop	r8
    1582:	7f 90       	pop	r7
    1584:	6f 90       	pop	r6
    1586:	5f 90       	pop	r5
    1588:	4f 90       	pop	r4
    158a:	3f 90       	pop	r3
    158c:	2f 90       	pop	r2
    158e:	08 95       	ret

00001590 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1590:	af 92       	push	r10
    1592:	bf 92       	push	r11
    1594:	cf 92       	push	r12
    1596:	df 92       	push	r13
    1598:	ef 92       	push	r14
    159a:	ff 92       	push	r15
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	ec 01       	movw	r28, r24
    15a6:	7b 01       	movw	r14, r22
    15a8:	5a 01       	movw	r10, r20
    15aa:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    15ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    15ae:	80 ff       	sbrs	r24, 0
    15b0:	04 c0       	rjmp	.+8      	; 0x15ba <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    15b2:	8a 01       	movw	r16, r20
    15b4:	0e 5f       	subi	r16, 0xFE	; 254
    15b6:	1f 4f       	sbci	r17, 0xFF	; 255
    15b8:	01 c0       	rjmp	.+2      	; 0x15bc <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    15ba:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    15bc:	ce 01       	movw	r24, r28
    15be:	13 df       	rcall	.-474    	; 0x13e6 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    15c0:	9c 01       	movw	r18, r24
    15c2:	a5 01       	movw	r20, r10
    15c4:	b7 01       	movw	r22, r14
    15c6:	ce 01       	movw	r24, r28
    15c8:	e7 dd       	rcall	.-1074   	; 0x1198 <prvWriteMessageToBuffer>
    15ca:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    15cc:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    15ce:	c1 f0       	breq	.+48     	; 0x1600 <xStreamBufferSendFromISR+0x70>
    15d0:	ce 01       	movw	r24, r28
    15d2:	76 dd       	rcall	.-1300   	; 0x10c0 <prvBytesInBuffer>
    15d4:	2e 81       	ldd	r18, Y+6	; 0x06
    15d6:	3f 81       	ldd	r19, Y+7	; 0x07
    15d8:	82 17       	cp	r24, r18
    15da:	93 07       	cpc	r25, r19
    15dc:	88 f0       	brcs	.+34     	; 0x1600 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    15de:	88 85       	ldd	r24, Y+8	; 0x08
    15e0:	99 85       	ldd	r25, Y+9	; 0x09
    15e2:	89 2b       	or	r24, r25
    15e4:	69 f0       	breq	.+26     	; 0x1600 <xStreamBufferSendFromISR+0x70>
    15e6:	88 85       	ldd	r24, Y+8	; 0x08
    15e8:	99 85       	ldd	r25, Y+9	; 0x09
    15ea:	e1 2c       	mov	r14, r1
    15ec:	f1 2c       	mov	r15, r1
    15ee:	00 e0       	ldi	r16, 0x00	; 0
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	a9 01       	movw	r20, r18
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	0e 94 c9 14 	call	0x2992	; 0x2992 <xTaskGenericNotifyFromISR>
    15fc:	19 86       	std	Y+9, r1	; 0x09
    15fe:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1600:	c5 01       	movw	r24, r10
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	1f 91       	pop	r17
    1608:	0f 91       	pop	r16
    160a:	ff 90       	pop	r15
    160c:	ef 90       	pop	r14
    160e:	df 90       	pop	r13
    1610:	cf 90       	pop	r12
    1612:	bf 90       	pop	r11
    1614:	af 90       	pop	r10
    1616:	08 95       	ret

00001618 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1618:	4f 92       	push	r4
    161a:	5f 92       	push	r5
    161c:	6f 92       	push	r6
    161e:	7f 92       	push	r7
    1620:	8f 92       	push	r8
    1622:	9f 92       	push	r9
    1624:	af 92       	push	r10
    1626:	bf 92       	push	r11
    1628:	cf 92       	push	r12
    162a:	df 92       	push	r13
    162c:	ef 92       	push	r14
    162e:	ff 92       	push	r15
    1630:	0f 93       	push	r16
    1632:	1f 93       	push	r17
    1634:	cf 93       	push	r28
    1636:	df 93       	push	r29
    1638:	ec 01       	movw	r28, r24
    163a:	2b 01       	movw	r4, r22
    163c:	3a 01       	movw	r6, r20
    163e:	58 01       	movw	r10, r16
    1640:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1642:	8e 85       	ldd	r24, Y+14	; 0x0e
    1644:	80 ff       	sbrs	r24, 0
    1646:	05 c0       	rjmp	.+10     	; 0x1652 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1648:	68 94       	set
    164a:	88 24       	eor	r8, r8
    164c:	81 f8       	bld	r8, 1
    164e:	91 2c       	mov	r9, r1
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1652:	81 2c       	mov	r8, r1
    1654:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1656:	a1 14       	cp	r10, r1
    1658:	b1 04       	cpc	r11, r1
    165a:	c1 04       	cpc	r12, r1
    165c:	d1 04       	cpc	r13, r1
    165e:	31 f1       	breq	.+76     	; 0x16ac <xStreamBufferReceive+0x94>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1666:	ce 01       	movw	r24, r28
    1668:	2b dd       	rcall	.-1450   	; 0x10c0 <prvBytesInBuffer>
    166a:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    166c:	88 16       	cp	r8, r24
    166e:	99 06       	cpc	r9, r25
    1670:	40 f0       	brcs	.+16     	; 0x1682 <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    167c:	7e d7       	rcall	.+3836   	; 0x257a <xTaskGetCurrentTaskHandle>
    167e:	99 87       	std	Y+9, r25	; 0x09
    1680:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1682:	0f 90       	pop	r0
    1684:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1686:	8e 14       	cp	r8, r14
    1688:	9f 04       	cpc	r9, r15
    168a:	98 f0       	brcs	.+38     	; 0x16b2 <xStreamBufferReceive+0x9a>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    168c:	e1 2c       	mov	r14, r1
    168e:	f1 2c       	mov	r15, r1
    1690:	00 e0       	ldi	r16, 0x00	; 0
    1692:	10 e0       	ldi	r17, 0x00	; 0
    1694:	98 01       	movw	r18, r16
    1696:	40 e0       	ldi	r20, 0x00	; 0
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	ba 01       	movw	r22, r20
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	db d7       	rcall	.+4022   	; 0x2656 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    16a0:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    16a2:	18 86       	std	Y+8, r1	; 0x08
    16a4:	ce 01       	movw	r24, r28
    16a6:	0c dd       	rcall	.-1512   	; 0x10c0 <prvBytesInBuffer>
    16a8:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    16aa:	03 c0       	rjmp	.+6      	; 0x16b2 <xStreamBufferReceive+0x9a>
    16ac:	ce 01       	movw	r24, r28
    16ae:	08 dd       	rcall	.-1520   	; 0x10c0 <prvBytesInBuffer>
    16b0:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    16b2:	8e 14       	cp	r8, r14
    16b4:	9f 04       	cpc	r9, r15
    16b6:	e8 f4       	brcc	.+58     	; 0x16f2 <xStreamBufferReceive+0xda>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    16b8:	84 01       	movw	r16, r8
    16ba:	97 01       	movw	r18, r14
    16bc:	a3 01       	movw	r20, r6
    16be:	b2 01       	movw	r22, r4
    16c0:	ce 01       	movw	r24, r28
    16c2:	fc dd       	rcall	.-1032   	; 0x12bc <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    16c4:	6c 01       	movw	r12, r24
    16c6:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    16c8:	b1 f0       	breq	.+44     	; 0x16f6 <xStreamBufferReceive+0xde>
    16ca:	bd d2       	rcall	.+1402   	; 0x1c46 <vTaskSuspendAll>
    16cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    16ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    16d0:	89 2b       	or	r24, r25
    16d2:	69 f0       	breq	.+26     	; 0x16ee <xStreamBufferReceive+0xd6>
    16d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    16d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    16d8:	e1 2c       	mov	r14, r1
    16da:	f1 2c       	mov	r15, r1
    16dc:	00 e0       	ldi	r16, 0x00	; 0
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	a9 01       	movw	r20, r18
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <xTaskGenericNotify>
    16ea:	1b 86       	std	Y+11, r1	; 0x0b
    16ec:	1a 86       	std	Y+10, r1	; 0x0a
    16ee:	eb d3       	rcall	.+2006   	; 0x1ec6 <xTaskResumeAll>
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <xStreamBufferReceive+0xde>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    16f2:	c1 2c       	mov	r12, r1
    16f4:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    16f6:	c6 01       	movw	r24, r12
    16f8:	df 91       	pop	r29
    16fa:	cf 91       	pop	r28
    16fc:	1f 91       	pop	r17
    16fe:	0f 91       	pop	r16
    1700:	ff 90       	pop	r15
    1702:	ef 90       	pop	r14
    1704:	df 90       	pop	r13
    1706:	cf 90       	pop	r12
    1708:	bf 90       	pop	r11
    170a:	af 90       	pop	r10
    170c:	9f 90       	pop	r9
    170e:	8f 90       	pop	r8
    1710:	7f 90       	pop	r7
    1712:	6f 90       	pop	r6
    1714:	5f 90       	pop	r5
    1716:	4f 90       	pop	r4
    1718:	08 95       	ret

0000171a <prvResetNextTaskUnblockTime>:
    171a:	e0 91 93 15 	lds	r30, 0x1593	; 0x801593 <pxDelayedTaskList>
    171e:	f0 91 94 15 	lds	r31, 0x1594	; 0x801594 <pxDelayedTaskList+0x1>
    1722:	80 81       	ld	r24, Z
    1724:	81 11       	cpse	r24, r1
    1726:	0c c0       	rjmp	.+24     	; 0x1740 <prvResetNextTaskUnblockTime+0x26>
    1728:	8f ef       	ldi	r24, 0xFF	; 255
    172a:	9f ef       	ldi	r25, 0xFF	; 255
    172c:	dc 01       	movw	r26, r24
    172e:	80 93 5d 15 	sts	0x155D, r24	; 0x80155d <xNextTaskUnblockTime>
    1732:	90 93 5e 15 	sts	0x155E, r25	; 0x80155e <xNextTaskUnblockTime+0x1>
    1736:	a0 93 5f 15 	sts	0x155F, r26	; 0x80155f <xNextTaskUnblockTime+0x2>
    173a:	b0 93 60 15 	sts	0x1560, r27	; 0x801560 <xNextTaskUnblockTime+0x3>
    173e:	08 95       	ret
    1740:	e0 91 93 15 	lds	r30, 0x1593	; 0x801593 <pxDelayedTaskList>
    1744:	f0 91 94 15 	lds	r31, 0x1594	; 0x801594 <pxDelayedTaskList+0x1>
    1748:	07 80       	ldd	r0, Z+7	; 0x07
    174a:	f0 85       	ldd	r31, Z+8	; 0x08
    174c:	e0 2d       	mov	r30, r0
    174e:	80 81       	ld	r24, Z
    1750:	91 81       	ldd	r25, Z+1	; 0x01
    1752:	a2 81       	ldd	r26, Z+2	; 0x02
    1754:	b3 81       	ldd	r27, Z+3	; 0x03
    1756:	80 93 5d 15 	sts	0x155D, r24	; 0x80155d <xNextTaskUnblockTime>
    175a:	90 93 5e 15 	sts	0x155E, r25	; 0x80155e <xNextTaskUnblockTime+0x1>
    175e:	a0 93 5f 15 	sts	0x155F, r26	; 0x80155f <xNextTaskUnblockTime+0x2>
    1762:	b0 93 60 15 	sts	0x1560, r27	; 0x801560 <xNextTaskUnblockTime+0x3>
    1766:	08 95       	ret

00001768 <prvDeleteTCB>:
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	ec 01       	movw	r28, r24
    176e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1770:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1772:	1d d8       	rcall	.-4038   	; 0x7ae <vPortFree>
    1774:	ce 01       	movw	r24, r28
    1776:	1b d8       	rcall	.-4042   	; 0x7ae <vPortFree>
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	08 95       	ret

0000177e <prvInitialiseNewTask>:
    177e:	4f 92       	push	r4
    1780:	5f 92       	push	r5
    1782:	6f 92       	push	r6
    1784:	7f 92       	push	r7
    1786:	8f 92       	push	r8
    1788:	9f 92       	push	r9
    178a:	af 92       	push	r10
    178c:	bf 92       	push	r11
    178e:	cf 92       	push	r12
    1790:	df 92       	push	r13
    1792:	ef 92       	push	r14
    1794:	ff 92       	push	r15
    1796:	0f 93       	push	r16
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29
    179c:	2c 01       	movw	r4, r24
    179e:	5b 01       	movw	r10, r22
    17a0:	4a 01       	movw	r8, r20
    17a2:	39 01       	movw	r6, r18
    17a4:	e6 01       	movw	r28, r12
    17a6:	65 ea       	ldi	r22, 0xA5	; 165
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17ae:	0e 94 00 2a 	call	0x5400	; 0x5400 <memset>
    17b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17b6:	21 e0       	ldi	r18, 0x01	; 1
    17b8:	82 1a       	sub	r8, r18
    17ba:	91 08       	sbc	r9, r1
    17bc:	88 0e       	add	r8, r24
    17be:	99 1e       	adc	r9, r25
    17c0:	a1 14       	cp	r10, r1
    17c2:	b1 04       	cpc	r11, r1
    17c4:	89 f4       	brne	.+34     	; 0x17e8 <prvInitialiseNewTask+0x6a>
    17c6:	15 c0       	rjmp	.+42     	; 0x17f2 <prvInitialiseNewTask+0x74>
    17c8:	82 2f       	mov	r24, r18
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	f5 01       	movw	r30, r10
    17ce:	e8 0f       	add	r30, r24
    17d0:	f9 1f       	adc	r31, r25
    17d2:	30 81       	ld	r19, Z
    17d4:	de 01       	movw	r26, r28
    17d6:	a8 0f       	add	r26, r24
    17d8:	b9 1f       	adc	r27, r25
    17da:	5d 96       	adiw	r26, 0x1d	; 29
    17dc:	3c 93       	st	X, r19
    17de:	80 81       	ld	r24, Z
    17e0:	88 23       	and	r24, r24
    17e2:	29 f0       	breq	.+10     	; 0x17ee <prvInitialiseNewTask+0x70>
    17e4:	2f 5f       	subi	r18, 0xFF	; 255
    17e6:	01 c0       	rjmp	.+2      	; 0x17ea <prvInitialiseNewTask+0x6c>
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	20 31       	cpi	r18, 0x10	; 16
    17ec:	68 f3       	brcs	.-38     	; 0x17c8 <prvInitialiseNewTask+0x4a>
    17ee:	1c a6       	std	Y+44, r1	; 0x2c
    17f0:	01 c0       	rjmp	.+2      	; 0x17f4 <prvInitialiseNewTask+0x76>
    17f2:	1d 8e       	std	Y+29, r1	; 0x1d
    17f4:	0a 30       	cpi	r16, 0x0A	; 10
    17f6:	08 f0       	brcs	.+2      	; 0x17fa <prvInitialiseNewTask+0x7c>
    17f8:	09 e0       	ldi	r16, 0x09	; 9
    17fa:	0a 8f       	std	Y+26, r16	; 0x1a
    17fc:	0d a7       	std	Y+45, r16	; 0x2d
    17fe:	1e a6       	std	Y+46, r1	; 0x2e
    1800:	ce 01       	movw	r24, r28
    1802:	02 96       	adiw	r24, 0x02	; 2
    1804:	22 d8       	rcall	.-4028   	; 0x84a <vListInitialiseItem>
    1806:	ce 01       	movw	r24, r28
    1808:	0e 96       	adiw	r24, 0x0e	; 14
    180a:	1f d8       	rcall	.-4034   	; 0x84a <vListInitialiseItem>
    180c:	db 87       	std	Y+11, r29	; 0x0b
    180e:	ca 87       	std	Y+10, r28	; 0x0a
    1810:	8a e0       	ldi	r24, 0x0A	; 10
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	a0 e0       	ldi	r26, 0x00	; 0
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	80 1b       	sub	r24, r16
    181a:	91 09       	sbc	r25, r1
    181c:	a1 09       	sbc	r26, r1
    181e:	b1 09       	sbc	r27, r1
    1820:	8e 87       	std	Y+14, r24	; 0x0e
    1822:	9f 87       	std	Y+15, r25	; 0x0f
    1824:	a8 8b       	std	Y+16, r26	; 0x10
    1826:	b9 8b       	std	Y+17, r27	; 0x11
    1828:	df 8b       	std	Y+23, r29	; 0x17
    182a:	ce 8b       	std	Y+22, r28	; 0x16
    182c:	84 e0       	ldi	r24, 0x04	; 4
    182e:	fe 01       	movw	r30, r28
    1830:	bf 96       	adiw	r30, 0x2f	; 47
    1832:	df 01       	movw	r26, r30
    1834:	1d 92       	st	X+, r1
    1836:	8a 95       	dec	r24
    1838:	e9 f7       	brne	.-6      	; 0x1834 <prvInitialiseNewTask+0xb6>
    183a:	1b aa       	std	Y+51, r1	; 0x33
    183c:	a3 01       	movw	r20, r6
    183e:	b2 01       	movw	r22, r4
    1840:	c4 01       	movw	r24, r8
    1842:	77 d8       	rcall	.-3858   	; 0x932 <pxPortInitialiseStack>
    1844:	99 83       	std	Y+1, r25	; 0x01
    1846:	88 83       	st	Y, r24
    1848:	e1 14       	cp	r14, r1
    184a:	f1 04       	cpc	r15, r1
    184c:	19 f0       	breq	.+6      	; 0x1854 <prvInitialiseNewTask+0xd6>
    184e:	f7 01       	movw	r30, r14
    1850:	d1 83       	std	Z+1, r29	; 0x01
    1852:	c0 83       	st	Z, r28
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	0f 91       	pop	r16
    185a:	ff 90       	pop	r15
    185c:	ef 90       	pop	r14
    185e:	df 90       	pop	r13
    1860:	cf 90       	pop	r12
    1862:	bf 90       	pop	r11
    1864:	af 90       	pop	r10
    1866:	9f 90       	pop	r9
    1868:	8f 90       	pop	r8
    186a:	7f 90       	pop	r7
    186c:	6f 90       	pop	r6
    186e:	5f 90       	pop	r5
    1870:	4f 90       	pop	r4
    1872:	08 95       	ret

00001874 <prvInitialiseTaskLists>:
    1874:	cf 93       	push	r28
    1876:	c0 e0       	ldi	r28, 0x00	; 0
    1878:	09 c0       	rjmp	.+18     	; 0x188c <prvInitialiseTaskLists+0x18>
    187a:	2b e0       	ldi	r18, 0x0B	; 11
    187c:	c2 9f       	mul	r28, r18
    187e:	c0 01       	movw	r24, r0
    1880:	11 24       	eor	r1, r1
    1882:	85 55       	subi	r24, 0x55	; 85
    1884:	9a 4e       	sbci	r25, 0xEA	; 234
    1886:	0e 94 14 04 	call	0x828	; 0x828 <vListInitialise>
    188a:	cf 5f       	subi	r28, 0xFF	; 255
    188c:	ca 30       	cpi	r28, 0x0A	; 10
    188e:	a8 f3       	brcs	.-22     	; 0x187a <prvInitialiseTaskLists+0x6>
    1890:	80 ea       	ldi	r24, 0xA0	; 160
    1892:	95 e1       	ldi	r25, 0x15	; 21
    1894:	0e 94 14 04 	call	0x828	; 0x828 <vListInitialise>
    1898:	85 e9       	ldi	r24, 0x95	; 149
    189a:	95 e1       	ldi	r25, 0x15	; 21
    189c:	0e 94 14 04 	call	0x828	; 0x828 <vListInitialise>
    18a0:	86 e8       	ldi	r24, 0x86	; 134
    18a2:	95 e1       	ldi	r25, 0x15	; 21
    18a4:	0e 94 14 04 	call	0x828	; 0x828 <vListInitialise>
    18a8:	8b e7       	ldi	r24, 0x7B	; 123
    18aa:	95 e1       	ldi	r25, 0x15	; 21
    18ac:	0e 94 14 04 	call	0x828	; 0x828 <vListInitialise>
    18b0:	8f e6       	ldi	r24, 0x6F	; 111
    18b2:	95 e1       	ldi	r25, 0x15	; 21
    18b4:	0e 94 14 04 	call	0x828	; 0x828 <vListInitialise>
    18b8:	80 ea       	ldi	r24, 0xA0	; 160
    18ba:	95 e1       	ldi	r25, 0x15	; 21
    18bc:	90 93 94 15 	sts	0x1594, r25	; 0x801594 <pxDelayedTaskList+0x1>
    18c0:	80 93 93 15 	sts	0x1593, r24	; 0x801593 <pxDelayedTaskList>
    18c4:	85 e9       	ldi	r24, 0x95	; 149
    18c6:	95 e1       	ldi	r25, 0x15	; 21
    18c8:	90 93 92 15 	sts	0x1592, r25	; 0x801592 <pxOverflowDelayedTaskList+0x1>
    18cc:	80 93 91 15 	sts	0x1591, r24	; 0x801591 <pxOverflowDelayedTaskList>
    18d0:	cf 91       	pop	r28
    18d2:	08 95       	ret

000018d4 <prvAddNewTaskToReadyList>:
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	ec 01       	movw	r28, r24
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	0f 92       	push	r0
    18e0:	80 91 6e 15 	lds	r24, 0x156E	; 0x80156e <uxCurrentNumberOfTasks>
    18e4:	8f 5f       	subi	r24, 0xFF	; 255
    18e6:	80 93 6e 15 	sts	0x156E, r24	; 0x80156e <uxCurrentNumberOfTasks>
    18ea:	80 91 19 16 	lds	r24, 0x1619	; 0x801619 <pxCurrentTCB>
    18ee:	90 91 1a 16 	lds	r25, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    18f2:	89 2b       	or	r24, r25
    18f4:	51 f4       	brne	.+20     	; 0x190a <prvAddNewTaskToReadyList+0x36>
    18f6:	d0 93 1a 16 	sts	0x161A, r29	; 0x80161a <pxCurrentTCB+0x1>
    18fa:	c0 93 19 16 	sts	0x1619, r28	; 0x801619 <pxCurrentTCB>
    18fe:	80 91 6e 15 	lds	r24, 0x156E	; 0x80156e <uxCurrentNumberOfTasks>
    1902:	81 30       	cpi	r24, 0x01	; 1
    1904:	91 f4       	brne	.+36     	; 0x192a <prvAddNewTaskToReadyList+0x56>
    1906:	b6 df       	rcall	.-148    	; 0x1874 <prvInitialiseTaskLists>
    1908:	10 c0       	rjmp	.+32     	; 0x192a <prvAddNewTaskToReadyList+0x56>
    190a:	80 91 68 15 	lds	r24, 0x1568	; 0x801568 <xSchedulerRunning>
    190e:	81 11       	cpse	r24, r1
    1910:	0c c0       	rjmp	.+24     	; 0x192a <prvAddNewTaskToReadyList+0x56>
    1912:	e0 91 19 16 	lds	r30, 0x1619	; 0x801619 <pxCurrentTCB>
    1916:	f0 91 1a 16 	lds	r31, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    191a:	92 8d       	ldd	r25, Z+26	; 0x1a
    191c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    191e:	89 17       	cp	r24, r25
    1920:	20 f0       	brcs	.+8      	; 0x192a <prvAddNewTaskToReadyList+0x56>
    1922:	d0 93 1a 16 	sts	0x161A, r29	; 0x80161a <pxCurrentTCB+0x1>
    1926:	c0 93 19 16 	sts	0x1619, r28	; 0x801619 <pxCurrentTCB>
    192a:	80 91 61 15 	lds	r24, 0x1561	; 0x801561 <uxTaskNumber>
    192e:	8f 5f       	subi	r24, 0xFF	; 255
    1930:	80 93 61 15 	sts	0x1561, r24	; 0x801561 <uxTaskNumber>
    1934:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1936:	80 91 69 15 	lds	r24, 0x1569	; 0x801569 <uxTopReadyPriority>
    193a:	8e 17       	cp	r24, r30
    193c:	10 f4       	brcc	.+4      	; 0x1942 <prvAddNewTaskToReadyList+0x6e>
    193e:	e0 93 69 15 	sts	0x1569, r30	; 0x801569 <uxTopReadyPriority>
    1942:	8b e0       	ldi	r24, 0x0B	; 11
    1944:	8e 9f       	mul	r24, r30
    1946:	f0 01       	movw	r30, r0
    1948:	11 24       	eor	r1, r1
    194a:	e5 55       	subi	r30, 0x55	; 85
    194c:	fa 4e       	sbci	r31, 0xEA	; 234
    194e:	01 80       	ldd	r0, Z+1	; 0x01
    1950:	f2 81       	ldd	r31, Z+2	; 0x02
    1952:	e0 2d       	mov	r30, r0
    1954:	ff 83       	std	Y+7, r31	; 0x07
    1956:	ee 83       	std	Y+6, r30	; 0x06
    1958:	26 81       	ldd	r18, Z+6	; 0x06
    195a:	37 81       	ldd	r19, Z+7	; 0x07
    195c:	39 87       	std	Y+9, r19	; 0x09
    195e:	28 87       	std	Y+8, r18	; 0x08
    1960:	a6 81       	ldd	r26, Z+6	; 0x06
    1962:	b7 81       	ldd	r27, Z+7	; 0x07
    1964:	9e 01       	movw	r18, r28
    1966:	2e 5f       	subi	r18, 0xFE	; 254
    1968:	3f 4f       	sbci	r19, 0xFF	; 255
    196a:	15 96       	adiw	r26, 0x05	; 5
    196c:	3c 93       	st	X, r19
    196e:	2e 93       	st	-X, r18
    1970:	14 97       	sbiw	r26, 0x04	; 4
    1972:	37 83       	std	Z+7, r19	; 0x07
    1974:	26 83       	std	Z+6, r18	; 0x06
    1976:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1978:	8e 9f       	mul	r24, r30
    197a:	f0 01       	movw	r30, r0
    197c:	11 24       	eor	r1, r1
    197e:	e5 55       	subi	r30, 0x55	; 85
    1980:	fa 4e       	sbci	r31, 0xEA	; 234
    1982:	fd 87       	std	Y+13, r31	; 0x0d
    1984:	ec 87       	std	Y+12, r30	; 0x0c
    1986:	80 81       	ld	r24, Z
    1988:	8f 5f       	subi	r24, 0xFF	; 255
    198a:	80 83       	st	Z, r24
    198c:	0f 90       	pop	r0
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	80 91 68 15 	lds	r24, 0x1568	; 0x801568 <xSchedulerRunning>
    1994:	88 23       	and	r24, r24
    1996:	49 f0       	breq	.+18     	; 0x19aa <prvAddNewTaskToReadyList+0xd6>
    1998:	e0 91 19 16 	lds	r30, 0x1619	; 0x801619 <pxCurrentTCB>
    199c:	f0 91 1a 16 	lds	r31, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    19a0:	92 8d       	ldd	r25, Z+26	; 0x1a
    19a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19a4:	98 17       	cp	r25, r24
    19a6:	08 f4       	brcc	.+2      	; 0x19aa <prvAddNewTaskToReadyList+0xd6>
    19a8:	0d d8       	rcall	.-4070   	; 0x9c4 <vPortYield>
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	08 95       	ret

000019b0 <prvCheckTasksWaitingTermination>:
    19b0:	cf 93       	push	r28
    19b2:	df 93       	push	r29
    19b4:	1b c0       	rjmp	.+54     	; 0x19ec <prvCheckTasksWaitingTermination+0x3c>
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	0f 92       	push	r0
    19bc:	e0 91 82 15 	lds	r30, 0x1582	; 0x801582 <xTasksWaitingTermination+0x7>
    19c0:	f0 91 83 15 	lds	r31, 0x1583	; 0x801583 <xTasksWaitingTermination+0x8>
    19c4:	c0 85       	ldd	r28, Z+8	; 0x08
    19c6:	d1 85       	ldd	r29, Z+9	; 0x09
    19c8:	ce 01       	movw	r24, r28
    19ca:	02 96       	adiw	r24, 0x02	; 2
    19cc:	0e 94 66 04 	call	0x8cc	; 0x8cc <uxListRemove>
    19d0:	80 91 6e 15 	lds	r24, 0x156E	; 0x80156e <uxCurrentNumberOfTasks>
    19d4:	81 50       	subi	r24, 0x01	; 1
    19d6:	80 93 6e 15 	sts	0x156E, r24	; 0x80156e <uxCurrentNumberOfTasks>
    19da:	80 91 7a 15 	lds	r24, 0x157A	; 0x80157a <uxDeletedTasksWaitingCleanUp>
    19de:	81 50       	subi	r24, 0x01	; 1
    19e0:	80 93 7a 15 	sts	0x157A, r24	; 0x80157a <uxDeletedTasksWaitingCleanUp>
    19e4:	0f 90       	pop	r0
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	ce 01       	movw	r24, r28
    19ea:	be de       	rcall	.-644    	; 0x1768 <prvDeleteTCB>
    19ec:	80 91 7a 15 	lds	r24, 0x157A	; 0x80157a <uxDeletedTasksWaitingCleanUp>
    19f0:	81 11       	cpse	r24, r1
    19f2:	e1 cf       	rjmp	.-62     	; 0x19b6 <prvCheckTasksWaitingTermination+0x6>
    19f4:	df 91       	pop	r29
    19f6:	cf 91       	pop	r28
    19f8:	08 95       	ret

000019fa <prvAddCurrentTaskToDelayedList>:
    19fa:	8f 92       	push	r8
    19fc:	9f 92       	push	r9
    19fe:	af 92       	push	r10
    1a00:	bf 92       	push	r11
    1a02:	cf 92       	push	r12
    1a04:	df 92       	push	r13
    1a06:	ef 92       	push	r14
    1a08:	ff 92       	push	r15
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	6b 01       	movw	r12, r22
    1a10:	7c 01       	movw	r14, r24
    1a12:	c4 2f       	mov	r28, r20
    1a14:	80 90 6a 15 	lds	r8, 0x156A	; 0x80156a <xTickCount>
    1a18:	90 90 6b 15 	lds	r9, 0x156B	; 0x80156b <xTickCount+0x1>
    1a1c:	a0 90 6c 15 	lds	r10, 0x156C	; 0x80156c <xTickCount+0x2>
    1a20:	b0 90 6d 15 	lds	r11, 0x156D	; 0x80156d <xTickCount+0x3>
    1a24:	80 91 19 16 	lds	r24, 0x1619	; 0x801619 <pxCurrentTCB>
    1a28:	90 91 1a 16 	lds	r25, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    1a2c:	02 96       	adiw	r24, 0x02	; 2
    1a2e:	0e 94 66 04 	call	0x8cc	; 0x8cc <uxListRemove>
    1a32:	8f ef       	ldi	r24, 0xFF	; 255
    1a34:	c8 16       	cp	r12, r24
    1a36:	d8 06       	cpc	r13, r24
    1a38:	e8 06       	cpc	r14, r24
    1a3a:	f8 06       	cpc	r15, r24
    1a3c:	b1 f5       	brne	.+108    	; 0x1aaa <prvAddCurrentTaskToDelayedList+0xb0>
    1a3e:	cc 23       	and	r28, r28
    1a40:	a1 f1       	breq	.+104    	; 0x1aaa <prvAddCurrentTaskToDelayedList+0xb0>
    1a42:	ef e6       	ldi	r30, 0x6F	; 111
    1a44:	f5 e1       	ldi	r31, 0x15	; 21
    1a46:	a1 81       	ldd	r26, Z+1	; 0x01
    1a48:	b2 81       	ldd	r27, Z+2	; 0x02
    1a4a:	c0 91 19 16 	lds	r28, 0x1619	; 0x801619 <pxCurrentTCB>
    1a4e:	d0 91 1a 16 	lds	r29, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    1a52:	bf 83       	std	Y+7, r27	; 0x07
    1a54:	ae 83       	std	Y+6, r26	; 0x06
    1a56:	c0 91 19 16 	lds	r28, 0x1619	; 0x801619 <pxCurrentTCB>
    1a5a:	d0 91 1a 16 	lds	r29, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    1a5e:	16 96       	adiw	r26, 0x06	; 6
    1a60:	8d 91       	ld	r24, X+
    1a62:	9c 91       	ld	r25, X
    1a64:	17 97       	sbiw	r26, 0x07	; 7
    1a66:	99 87       	std	Y+9, r25	; 0x09
    1a68:	88 87       	std	Y+8, r24	; 0x08
    1a6a:	16 96       	adiw	r26, 0x06	; 6
    1a6c:	cd 91       	ld	r28, X+
    1a6e:	dc 91       	ld	r29, X
    1a70:	17 97       	sbiw	r26, 0x07	; 7
    1a72:	80 91 19 16 	lds	r24, 0x1619	; 0x801619 <pxCurrentTCB>
    1a76:	90 91 1a 16 	lds	r25, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    1a7a:	02 96       	adiw	r24, 0x02	; 2
    1a7c:	9d 83       	std	Y+5, r25	; 0x05
    1a7e:	8c 83       	std	Y+4, r24	; 0x04
    1a80:	80 91 19 16 	lds	r24, 0x1619	; 0x801619 <pxCurrentTCB>
    1a84:	90 91 1a 16 	lds	r25, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    1a88:	02 96       	adiw	r24, 0x02	; 2
    1a8a:	17 96       	adiw	r26, 0x07	; 7
    1a8c:	9c 93       	st	X, r25
    1a8e:	8e 93       	st	-X, r24
    1a90:	16 97       	sbiw	r26, 0x06	; 6
    1a92:	a0 91 19 16 	lds	r26, 0x1619	; 0x801619 <pxCurrentTCB>
    1a96:	b0 91 1a 16 	lds	r27, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    1a9a:	1d 96       	adiw	r26, 0x0d	; 13
    1a9c:	fc 93       	st	X, r31
    1a9e:	ee 93       	st	-X, r30
    1aa0:	1c 97       	sbiw	r26, 0x0c	; 12
    1aa2:	80 81       	ld	r24, Z
    1aa4:	8f 5f       	subi	r24, 0xFF	; 255
    1aa6:	80 83       	st	Z, r24
    1aa8:	3f c0       	rjmp	.+126    	; 0x1b28 <prvAddCurrentTaskToDelayedList+0x12e>
    1aaa:	c8 0c       	add	r12, r8
    1aac:	d9 1c       	adc	r13, r9
    1aae:	ea 1c       	adc	r14, r10
    1ab0:	fb 1c       	adc	r15, r11
    1ab2:	e0 91 19 16 	lds	r30, 0x1619	; 0x801619 <pxCurrentTCB>
    1ab6:	f0 91 1a 16 	lds	r31, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    1aba:	c2 82       	std	Z+2, r12	; 0x02
    1abc:	d3 82       	std	Z+3, r13	; 0x03
    1abe:	e4 82       	std	Z+4, r14	; 0x04
    1ac0:	f5 82       	std	Z+5, r15	; 0x05
    1ac2:	c8 14       	cp	r12, r8
    1ac4:	d9 04       	cpc	r13, r9
    1ac6:	ea 04       	cpc	r14, r10
    1ac8:	fb 04       	cpc	r15, r11
    1aca:	68 f4       	brcc	.+26     	; 0x1ae6 <prvAddCurrentTaskToDelayedList+0xec>
    1acc:	60 91 19 16 	lds	r22, 0x1619	; 0x801619 <pxCurrentTCB>
    1ad0:	70 91 1a 16 	lds	r23, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    1ad4:	80 91 91 15 	lds	r24, 0x1591	; 0x801591 <pxOverflowDelayedTaskList>
    1ad8:	90 91 92 15 	lds	r25, 0x1592	; 0x801592 <pxOverflowDelayedTaskList+0x1>
    1adc:	6e 5f       	subi	r22, 0xFE	; 254
    1ade:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae0:	0e 94 29 04 	call	0x852	; 0x852 <vListInsert>
    1ae4:	21 c0       	rjmp	.+66     	; 0x1b28 <prvAddCurrentTaskToDelayedList+0x12e>
    1ae6:	60 91 19 16 	lds	r22, 0x1619	; 0x801619 <pxCurrentTCB>
    1aea:	70 91 1a 16 	lds	r23, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    1aee:	80 91 93 15 	lds	r24, 0x1593	; 0x801593 <pxDelayedTaskList>
    1af2:	90 91 94 15 	lds	r25, 0x1594	; 0x801594 <pxDelayedTaskList+0x1>
    1af6:	6e 5f       	subi	r22, 0xFE	; 254
    1af8:	7f 4f       	sbci	r23, 0xFF	; 255
    1afa:	0e 94 29 04 	call	0x852	; 0x852 <vListInsert>
    1afe:	80 91 5d 15 	lds	r24, 0x155D	; 0x80155d <xNextTaskUnblockTime>
    1b02:	90 91 5e 15 	lds	r25, 0x155E	; 0x80155e <xNextTaskUnblockTime+0x1>
    1b06:	a0 91 5f 15 	lds	r26, 0x155F	; 0x80155f <xNextTaskUnblockTime+0x2>
    1b0a:	b0 91 60 15 	lds	r27, 0x1560	; 0x801560 <xNextTaskUnblockTime+0x3>
    1b0e:	c8 16       	cp	r12, r24
    1b10:	d9 06       	cpc	r13, r25
    1b12:	ea 06       	cpc	r14, r26
    1b14:	fb 06       	cpc	r15, r27
    1b16:	40 f4       	brcc	.+16     	; 0x1b28 <prvAddCurrentTaskToDelayedList+0x12e>
    1b18:	c0 92 5d 15 	sts	0x155D, r12	; 0x80155d <xNextTaskUnblockTime>
    1b1c:	d0 92 5e 15 	sts	0x155E, r13	; 0x80155e <xNextTaskUnblockTime+0x1>
    1b20:	e0 92 5f 15 	sts	0x155F, r14	; 0x80155f <xNextTaskUnblockTime+0x2>
    1b24:	f0 92 60 15 	sts	0x1560, r15	; 0x801560 <xNextTaskUnblockTime+0x3>
    1b28:	df 91       	pop	r29
    1b2a:	cf 91       	pop	r28
    1b2c:	ff 90       	pop	r15
    1b2e:	ef 90       	pop	r14
    1b30:	df 90       	pop	r13
    1b32:	cf 90       	pop	r12
    1b34:	bf 90       	pop	r11
    1b36:	af 90       	pop	r10
    1b38:	9f 90       	pop	r9
    1b3a:	8f 90       	pop	r8
    1b3c:	08 95       	ret

00001b3e <xTaskCreate>:
    1b3e:	2f 92       	push	r2
    1b40:	3f 92       	push	r3
    1b42:	4f 92       	push	r4
    1b44:	5f 92       	push	r5
    1b46:	6f 92       	push	r6
    1b48:	7f 92       	push	r7
    1b4a:	8f 92       	push	r8
    1b4c:	9f 92       	push	r9
    1b4e:	af 92       	push	r10
    1b50:	bf 92       	push	r11
    1b52:	cf 92       	push	r12
    1b54:	df 92       	push	r13
    1b56:	ef 92       	push	r14
    1b58:	ff 92       	push	r15
    1b5a:	0f 93       	push	r16
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	3c 01       	movw	r6, r24
    1b62:	1b 01       	movw	r2, r22
    1b64:	4a 01       	movw	r8, r20
    1b66:	29 01       	movw	r4, r18
    1b68:	ca 01       	movw	r24, r20
    1b6a:	0e 94 2e 03 	call	0x65c	; 0x65c <pvPortMalloc>
    1b6e:	6c 01       	movw	r12, r24
    1b70:	89 2b       	or	r24, r25
    1b72:	71 f0       	breq	.+28     	; 0x1b90 <xTaskCreate+0x52>
    1b74:	84 e3       	ldi	r24, 0x34	; 52
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	0e 94 2e 03 	call	0x65c	; 0x65c <pvPortMalloc>
    1b7c:	ec 01       	movw	r28, r24
    1b7e:	89 2b       	or	r24, r25
    1b80:	19 f0       	breq	.+6      	; 0x1b88 <xTaskCreate+0x4a>
    1b82:	dc 8e       	std	Y+28, r13	; 0x1c
    1b84:	cb 8e       	std	Y+27, r12	; 0x1b
    1b86:	06 c0       	rjmp	.+12     	; 0x1b94 <xTaskCreate+0x56>
    1b88:	c6 01       	movw	r24, r12
    1b8a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <vPortFree>
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <xTaskCreate+0x56>
    1b90:	c0 e0       	ldi	r28, 0x00	; 0
    1b92:	d0 e0       	ldi	r29, 0x00	; 0
    1b94:	20 97       	sbiw	r28, 0x00	; 0
    1b96:	61 f0       	breq	.+24     	; 0x1bb0 <xTaskCreate+0x72>
    1b98:	a1 2c       	mov	r10, r1
    1b9a:	b1 2c       	mov	r11, r1
    1b9c:	6e 01       	movw	r12, r28
    1b9e:	92 01       	movw	r18, r4
    1ba0:	a4 01       	movw	r20, r8
    1ba2:	b1 01       	movw	r22, r2
    1ba4:	c3 01       	movw	r24, r6
    1ba6:	eb dd       	rcall	.-1066   	; 0x177e <prvInitialiseNewTask>
    1ba8:	ce 01       	movw	r24, r28
    1baa:	94 de       	rcall	.-728    	; 0x18d4 <prvAddNewTaskToReadyList>
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	01 c0       	rjmp	.+2      	; 0x1bb2 <xTaskCreate+0x74>
    1bb0:	8f ef       	ldi	r24, 0xFF	; 255
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	0f 91       	pop	r16
    1bb8:	ff 90       	pop	r15
    1bba:	ef 90       	pop	r14
    1bbc:	df 90       	pop	r13
    1bbe:	cf 90       	pop	r12
    1bc0:	bf 90       	pop	r11
    1bc2:	af 90       	pop	r10
    1bc4:	9f 90       	pop	r9
    1bc6:	8f 90       	pop	r8
    1bc8:	7f 90       	pop	r7
    1bca:	6f 90       	pop	r6
    1bcc:	5f 90       	pop	r5
    1bce:	4f 90       	pop	r4
    1bd0:	3f 90       	pop	r3
    1bd2:	2f 90       	pop	r2
    1bd4:	08 95       	ret

00001bd6 <vTaskStartScheduler>:
    1bd6:	ef 92       	push	r14
    1bd8:	ff 92       	push	r15
    1bda:	0f 93       	push	r16
    1bdc:	0f 2e       	mov	r0, r31
    1bde:	fb e5       	ldi	r31, 0x5B	; 91
    1be0:	ef 2e       	mov	r14, r31
    1be2:	f5 e1       	ldi	r31, 0x15	; 21
    1be4:	ff 2e       	mov	r15, r31
    1be6:	f0 2d       	mov	r31, r0
    1be8:	00 e0       	ldi	r16, 0x00	; 0
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 ec       	ldi	r20, 0xC0	; 192
    1bf0:	50 e0       	ldi	r21, 0x00	; 0
    1bf2:	6b e2       	ldi	r22, 0x2B	; 43
    1bf4:	74 e0       	ldi	r23, 0x04	; 4
    1bf6:	8d ec       	ldi	r24, 0xCD	; 205
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	a1 df       	rcall	.-190    	; 0x1b3e <xTaskCreate>
    1bfc:	81 30       	cpi	r24, 0x01	; 1
    1bfe:	11 f4       	brne	.+4      	; 0x1c04 <vTaskStartScheduler+0x2e>
    1c00:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <xTimerCreateTimerTask>
    1c04:	81 30       	cpi	r24, 0x01	; 1
    1c06:	c9 f4       	brne	.+50     	; 0x1c3a <vTaskStartScheduler+0x64>
    1c08:	f8 94       	cli
    1c0a:	8f ef       	ldi	r24, 0xFF	; 255
    1c0c:	9f ef       	ldi	r25, 0xFF	; 255
    1c0e:	dc 01       	movw	r26, r24
    1c10:	80 93 5d 15 	sts	0x155D, r24	; 0x80155d <xNextTaskUnblockTime>
    1c14:	90 93 5e 15 	sts	0x155E, r25	; 0x80155e <xNextTaskUnblockTime+0x1>
    1c18:	a0 93 5f 15 	sts	0x155F, r26	; 0x80155f <xNextTaskUnblockTime+0x2>
    1c1c:	b0 93 60 15 	sts	0x1560, r27	; 0x801560 <xNextTaskUnblockTime+0x3>
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	80 93 68 15 	sts	0x1568, r24	; 0x801568 <xSchedulerRunning>
    1c26:	10 92 6a 15 	sts	0x156A, r1	; 0x80156a <xTickCount>
    1c2a:	10 92 6b 15 	sts	0x156B, r1	; 0x80156b <xTickCount+0x1>
    1c2e:	10 92 6c 15 	sts	0x156C, r1	; 0x80156c <xTickCount+0x2>
    1c32:	10 92 6d 15 	sts	0x156D, r1	; 0x80156d <xTickCount+0x3>
    1c36:	0e 94 b0 04 	call	0x960	; 0x960 <xPortStartScheduler>
    1c3a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1c3e:	0f 91       	pop	r16
    1c40:	ff 90       	pop	r15
    1c42:	ef 90       	pop	r14
    1c44:	08 95       	ret

00001c46 <vTaskSuspendAll>:
    1c46:	80 91 5a 15 	lds	r24, 0x155A	; 0x80155a <uxSchedulerSuspended>
    1c4a:	8f 5f       	subi	r24, 0xFF	; 255
    1c4c:	80 93 5a 15 	sts	0x155A, r24	; 0x80155a <uxSchedulerSuspended>
    1c50:	08 95       	ret

00001c52 <xTaskGetTickCount>:
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	0f 92       	push	r0
    1c58:	60 91 6a 15 	lds	r22, 0x156A	; 0x80156a <xTickCount>
    1c5c:	70 91 6b 15 	lds	r23, 0x156B	; 0x80156b <xTickCount+0x1>
    1c60:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <xTickCount+0x2>
    1c64:	90 91 6d 15 	lds	r25, 0x156D	; 0x80156d <xTickCount+0x3>
    1c68:	0f 90       	pop	r0
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	08 95       	ret

00001c6e <xTaskIncrementTick>:
    1c6e:	cf 92       	push	r12
    1c70:	df 92       	push	r13
    1c72:	ef 92       	push	r14
    1c74:	ff 92       	push	r15
    1c76:	cf 93       	push	r28
    1c78:	df 93       	push	r29
    1c7a:	80 91 5a 15 	lds	r24, 0x155A	; 0x80155a <uxSchedulerSuspended>
    1c7e:	81 11       	cpse	r24, r1
    1c80:	05 c1       	rjmp	.+522    	; 0x1e8c <xTaskIncrementTick+0x21e>
    1c82:	c0 90 6a 15 	lds	r12, 0x156A	; 0x80156a <xTickCount>
    1c86:	d0 90 6b 15 	lds	r13, 0x156B	; 0x80156b <xTickCount+0x1>
    1c8a:	e0 90 6c 15 	lds	r14, 0x156C	; 0x80156c <xTickCount+0x2>
    1c8e:	f0 90 6d 15 	lds	r15, 0x156D	; 0x80156d <xTickCount+0x3>
    1c92:	8f ef       	ldi	r24, 0xFF	; 255
    1c94:	c8 1a       	sub	r12, r24
    1c96:	d8 0a       	sbc	r13, r24
    1c98:	e8 0a       	sbc	r14, r24
    1c9a:	f8 0a       	sbc	r15, r24
    1c9c:	c0 92 6a 15 	sts	0x156A, r12	; 0x80156a <xTickCount>
    1ca0:	d0 92 6b 15 	sts	0x156B, r13	; 0x80156b <xTickCount+0x1>
    1ca4:	e0 92 6c 15 	sts	0x156C, r14	; 0x80156c <xTickCount+0x2>
    1ca8:	f0 92 6d 15 	sts	0x156D, r15	; 0x80156d <xTickCount+0x3>
    1cac:	c1 14       	cp	r12, r1
    1cae:	d1 04       	cpc	r13, r1
    1cb0:	e1 04       	cpc	r14, r1
    1cb2:	f1 04       	cpc	r15, r1
    1cb4:	b1 f4       	brne	.+44     	; 0x1ce2 <xTaskIncrementTick+0x74>
    1cb6:	80 91 93 15 	lds	r24, 0x1593	; 0x801593 <pxDelayedTaskList>
    1cba:	90 91 94 15 	lds	r25, 0x1594	; 0x801594 <pxDelayedTaskList+0x1>
    1cbe:	20 91 91 15 	lds	r18, 0x1591	; 0x801591 <pxOverflowDelayedTaskList>
    1cc2:	30 91 92 15 	lds	r19, 0x1592	; 0x801592 <pxOverflowDelayedTaskList+0x1>
    1cc6:	30 93 94 15 	sts	0x1594, r19	; 0x801594 <pxDelayedTaskList+0x1>
    1cca:	20 93 93 15 	sts	0x1593, r18	; 0x801593 <pxDelayedTaskList>
    1cce:	90 93 92 15 	sts	0x1592, r25	; 0x801592 <pxOverflowDelayedTaskList+0x1>
    1cd2:	80 93 91 15 	sts	0x1591, r24	; 0x801591 <pxOverflowDelayedTaskList>
    1cd6:	80 91 62 15 	lds	r24, 0x1562	; 0x801562 <xNumOfOverflows>
    1cda:	8f 5f       	subi	r24, 0xFF	; 255
    1cdc:	80 93 62 15 	sts	0x1562, r24	; 0x801562 <xNumOfOverflows>
    1ce0:	1c dd       	rcall	.-1480   	; 0x171a <prvResetNextTaskUnblockTime>
    1ce2:	80 91 5d 15 	lds	r24, 0x155D	; 0x80155d <xNextTaskUnblockTime>
    1ce6:	90 91 5e 15 	lds	r25, 0x155E	; 0x80155e <xNextTaskUnblockTime+0x1>
    1cea:	a0 91 5f 15 	lds	r26, 0x155F	; 0x80155f <xNextTaskUnblockTime+0x2>
    1cee:	b0 91 60 15 	lds	r27, 0x1560	; 0x801560 <xNextTaskUnblockTime+0x3>
    1cf2:	c8 16       	cp	r12, r24
    1cf4:	d9 06       	cpc	r13, r25
    1cf6:	ea 06       	cpc	r14, r26
    1cf8:	fb 06       	cpc	r15, r27
    1cfa:	20 f4       	brcc	.+8      	; 0x1d04 <xTaskIncrementTick+0x96>
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	b2 c0       	rjmp	.+356    	; 0x1e64 <xTaskIncrementTick+0x1f6>
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	01 c0       	rjmp	.+2      	; 0x1d06 <xTaskIncrementTick+0x98>
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	e0 91 93 15 	lds	r30, 0x1593	; 0x801593 <pxDelayedTaskList>
    1d0a:	f0 91 94 15 	lds	r31, 0x1594	; 0x801594 <pxDelayedTaskList+0x1>
    1d0e:	90 81       	ld	r25, Z
    1d10:	91 11       	cpse	r25, r1
    1d12:	0c c0       	rjmp	.+24     	; 0x1d2c <xTaskIncrementTick+0xbe>
    1d14:	4f ef       	ldi	r20, 0xFF	; 255
    1d16:	5f ef       	ldi	r21, 0xFF	; 255
    1d18:	ba 01       	movw	r22, r20
    1d1a:	40 93 5d 15 	sts	0x155D, r20	; 0x80155d <xNextTaskUnblockTime>
    1d1e:	50 93 5e 15 	sts	0x155E, r21	; 0x80155e <xNextTaskUnblockTime+0x1>
    1d22:	60 93 5f 15 	sts	0x155F, r22	; 0x80155f <xNextTaskUnblockTime+0x2>
    1d26:	70 93 60 15 	sts	0x1560, r23	; 0x801560 <xNextTaskUnblockTime+0x3>
    1d2a:	9c c0       	rjmp	.+312    	; 0x1e64 <xTaskIncrementTick+0x1f6>
    1d2c:	e0 91 93 15 	lds	r30, 0x1593	; 0x801593 <pxDelayedTaskList>
    1d30:	f0 91 94 15 	lds	r31, 0x1594	; 0x801594 <pxDelayedTaskList+0x1>
    1d34:	07 80       	ldd	r0, Z+7	; 0x07
    1d36:	f0 85       	ldd	r31, Z+8	; 0x08
    1d38:	e0 2d       	mov	r30, r0
    1d3a:	00 84       	ldd	r0, Z+8	; 0x08
    1d3c:	f1 85       	ldd	r31, Z+9	; 0x09
    1d3e:	e0 2d       	mov	r30, r0
    1d40:	42 81       	ldd	r20, Z+2	; 0x02
    1d42:	53 81       	ldd	r21, Z+3	; 0x03
    1d44:	64 81       	ldd	r22, Z+4	; 0x04
    1d46:	75 81       	ldd	r23, Z+5	; 0x05
    1d48:	c4 16       	cp	r12, r20
    1d4a:	d5 06       	cpc	r13, r21
    1d4c:	e6 06       	cpc	r14, r22
    1d4e:	f7 06       	cpc	r15, r23
    1d50:	48 f4       	brcc	.+18     	; 0x1d64 <xTaskIncrementTick+0xf6>
    1d52:	40 93 5d 15 	sts	0x155D, r20	; 0x80155d <xNextTaskUnblockTime>
    1d56:	50 93 5e 15 	sts	0x155E, r21	; 0x80155e <xNextTaskUnblockTime+0x1>
    1d5a:	60 93 5f 15 	sts	0x155F, r22	; 0x80155f <xNextTaskUnblockTime+0x2>
    1d5e:	70 93 60 15 	sts	0x1560, r23	; 0x801560 <xNextTaskUnblockTime+0x3>
    1d62:	80 c0       	rjmp	.+256    	; 0x1e64 <xTaskIncrementTick+0x1f6>
    1d64:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d66:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d68:	c6 81       	ldd	r28, Z+6	; 0x06
    1d6a:	d7 81       	ldd	r29, Z+7	; 0x07
    1d6c:	20 85       	ldd	r18, Z+8	; 0x08
    1d6e:	31 85       	ldd	r19, Z+9	; 0x09
    1d70:	3f 83       	std	Y+7, r19	; 0x07
    1d72:	2e 83       	std	Y+6, r18	; 0x06
    1d74:	c0 85       	ldd	r28, Z+8	; 0x08
    1d76:	d1 85       	ldd	r29, Z+9	; 0x09
    1d78:	26 81       	ldd	r18, Z+6	; 0x06
    1d7a:	37 81       	ldd	r19, Z+7	; 0x07
    1d7c:	3d 83       	std	Y+5, r19	; 0x05
    1d7e:	2c 83       	std	Y+4, r18	; 0x04
    1d80:	11 96       	adiw	r26, 0x01	; 1
    1d82:	4d 91       	ld	r20, X+
    1d84:	5c 91       	ld	r21, X
    1d86:	12 97       	sbiw	r26, 0x02	; 2
    1d88:	9f 01       	movw	r18, r30
    1d8a:	2e 5f       	subi	r18, 0xFE	; 254
    1d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8e:	42 17       	cp	r20, r18
    1d90:	53 07       	cpc	r21, r19
    1d92:	31 f4       	brne	.+12     	; 0x1da0 <xTaskIncrementTick+0x132>
    1d94:	40 85       	ldd	r20, Z+8	; 0x08
    1d96:	51 85       	ldd	r21, Z+9	; 0x09
    1d98:	12 96       	adiw	r26, 0x02	; 2
    1d9a:	5c 93       	st	X, r21
    1d9c:	4e 93       	st	-X, r20
    1d9e:	11 97       	sbiw	r26, 0x01	; 1
    1da0:	15 86       	std	Z+13, r1	; 0x0d
    1da2:	14 86       	std	Z+12, r1	; 0x0c
    1da4:	9c 91       	ld	r25, X
    1da6:	91 50       	subi	r25, 0x01	; 1
    1da8:	9c 93       	st	X, r25
    1daa:	a0 8d       	ldd	r26, Z+24	; 0x18
    1dac:	b1 8d       	ldd	r27, Z+25	; 0x19
    1dae:	10 97       	sbiw	r26, 0x00	; 0
    1db0:	09 f1       	breq	.+66     	; 0x1df4 <xTaskIncrementTick+0x186>
    1db2:	c2 89       	ldd	r28, Z+18	; 0x12
    1db4:	d3 89       	ldd	r29, Z+19	; 0x13
    1db6:	44 89       	ldd	r20, Z+20	; 0x14
    1db8:	55 89       	ldd	r21, Z+21	; 0x15
    1dba:	5f 83       	std	Y+7, r21	; 0x07
    1dbc:	4e 83       	std	Y+6, r20	; 0x06
    1dbe:	c4 89       	ldd	r28, Z+20	; 0x14
    1dc0:	d5 89       	ldd	r29, Z+21	; 0x15
    1dc2:	42 89       	ldd	r20, Z+18	; 0x12
    1dc4:	53 89       	ldd	r21, Z+19	; 0x13
    1dc6:	5d 83       	std	Y+5, r21	; 0x05
    1dc8:	4c 83       	std	Y+4, r20	; 0x04
    1dca:	11 96       	adiw	r26, 0x01	; 1
    1dcc:	6d 91       	ld	r22, X+
    1dce:	7c 91       	ld	r23, X
    1dd0:	12 97       	sbiw	r26, 0x02	; 2
    1dd2:	af 01       	movw	r20, r30
    1dd4:	42 5f       	subi	r20, 0xF2	; 242
    1dd6:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd8:	64 17       	cp	r22, r20
    1dda:	75 07       	cpc	r23, r21
    1ddc:	31 f4       	brne	.+12     	; 0x1dea <xTaskIncrementTick+0x17c>
    1dde:	44 89       	ldd	r20, Z+20	; 0x14
    1de0:	55 89       	ldd	r21, Z+21	; 0x15
    1de2:	12 96       	adiw	r26, 0x02	; 2
    1de4:	5c 93       	st	X, r21
    1de6:	4e 93       	st	-X, r20
    1de8:	11 97       	sbiw	r26, 0x01	; 1
    1dea:	11 8e       	std	Z+25, r1	; 0x19
    1dec:	10 8e       	std	Z+24, r1	; 0x18
    1dee:	9c 91       	ld	r25, X
    1df0:	91 50       	subi	r25, 0x01	; 1
    1df2:	9c 93       	st	X, r25
    1df4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1df6:	90 91 69 15 	lds	r25, 0x1569	; 0x801569 <uxTopReadyPriority>
    1dfa:	9a 17       	cp	r25, r26
    1dfc:	10 f4       	brcc	.+4      	; 0x1e02 <xTaskIncrementTick+0x194>
    1dfe:	a0 93 69 15 	sts	0x1569, r26	; 0x801569 <uxTopReadyPriority>
    1e02:	9b e0       	ldi	r25, 0x0B	; 11
    1e04:	9a 9f       	mul	r25, r26
    1e06:	d0 01       	movw	r26, r0
    1e08:	11 24       	eor	r1, r1
    1e0a:	a5 55       	subi	r26, 0x55	; 85
    1e0c:	ba 4e       	sbci	r27, 0xEA	; 234
    1e0e:	11 96       	adiw	r26, 0x01	; 1
    1e10:	0d 90       	ld	r0, X+
    1e12:	bc 91       	ld	r27, X
    1e14:	a0 2d       	mov	r26, r0
    1e16:	b7 83       	std	Z+7, r27	; 0x07
    1e18:	a6 83       	std	Z+6, r26	; 0x06
    1e1a:	16 96       	adiw	r26, 0x06	; 6
    1e1c:	4d 91       	ld	r20, X+
    1e1e:	5c 91       	ld	r21, X
    1e20:	17 97       	sbiw	r26, 0x07	; 7
    1e22:	51 87       	std	Z+9, r21	; 0x09
    1e24:	40 87       	std	Z+8, r20	; 0x08
    1e26:	16 96       	adiw	r26, 0x06	; 6
    1e28:	cd 91       	ld	r28, X+
    1e2a:	dc 91       	ld	r29, X
    1e2c:	17 97       	sbiw	r26, 0x07	; 7
    1e2e:	3d 83       	std	Y+5, r19	; 0x05
    1e30:	2c 83       	std	Y+4, r18	; 0x04
    1e32:	17 96       	adiw	r26, 0x07	; 7
    1e34:	3c 93       	st	X, r19
    1e36:	2e 93       	st	-X, r18
    1e38:	16 97       	sbiw	r26, 0x06	; 6
    1e3a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1e3c:	9a 9f       	mul	r25, r26
    1e3e:	d0 01       	movw	r26, r0
    1e40:	11 24       	eor	r1, r1
    1e42:	a5 55       	subi	r26, 0x55	; 85
    1e44:	ba 4e       	sbci	r27, 0xEA	; 234
    1e46:	b5 87       	std	Z+13, r27	; 0x0d
    1e48:	a4 87       	std	Z+12, r26	; 0x0c
    1e4a:	9c 91       	ld	r25, X
    1e4c:	9f 5f       	subi	r25, 0xFF	; 255
    1e4e:	9c 93       	st	X, r25
    1e50:	22 8d       	ldd	r18, Z+26	; 0x1a
    1e52:	e0 91 19 16 	lds	r30, 0x1619	; 0x801619 <pxCurrentTCB>
    1e56:	f0 91 1a 16 	lds	r31, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    1e5a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e5c:	29 17       	cp	r18, r25
    1e5e:	08 f0       	brcs	.+2      	; 0x1e62 <xTaskIncrementTick+0x1f4>
    1e60:	4f cf       	rjmp	.-354    	; 0x1d00 <xTaskIncrementTick+0x92>
    1e62:	51 cf       	rjmp	.-350    	; 0x1d06 <xTaskIncrementTick+0x98>
    1e64:	e0 91 19 16 	lds	r30, 0x1619	; 0x801619 <pxCurrentTCB>
    1e68:	f0 91 1a 16 	lds	r31, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    1e6c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1e6e:	9b e0       	ldi	r25, 0x0B	; 11
    1e70:	e9 9f       	mul	r30, r25
    1e72:	f0 01       	movw	r30, r0
    1e74:	11 24       	eor	r1, r1
    1e76:	e5 55       	subi	r30, 0x55	; 85
    1e78:	fa 4e       	sbci	r31, 0xEA	; 234
    1e7a:	90 81       	ld	r25, Z
    1e7c:	92 30       	cpi	r25, 0x02	; 2
    1e7e:	08 f0       	brcs	.+2      	; 0x1e82 <xTaskIncrementTick+0x214>
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	90 91 63 15 	lds	r25, 0x1563	; 0x801563 <xYieldPending>
    1e86:	91 11       	cpse	r25, r1
    1e88:	16 c0       	rjmp	.+44     	; 0x1eb6 <xTaskIncrementTick+0x248>
    1e8a:	16 c0       	rjmp	.+44     	; 0x1eb8 <xTaskIncrementTick+0x24a>
    1e8c:	80 91 64 15 	lds	r24, 0x1564	; 0x801564 <xPendedTicks>
    1e90:	90 91 65 15 	lds	r25, 0x1565	; 0x801565 <xPendedTicks+0x1>
    1e94:	a0 91 66 15 	lds	r26, 0x1566	; 0x801566 <xPendedTicks+0x2>
    1e98:	b0 91 67 15 	lds	r27, 0x1567	; 0x801567 <xPendedTicks+0x3>
    1e9c:	01 96       	adiw	r24, 0x01	; 1
    1e9e:	a1 1d       	adc	r26, r1
    1ea0:	b1 1d       	adc	r27, r1
    1ea2:	80 93 64 15 	sts	0x1564, r24	; 0x801564 <xPendedTicks>
    1ea6:	90 93 65 15 	sts	0x1565, r25	; 0x801565 <xPendedTicks+0x1>
    1eaa:	a0 93 66 15 	sts	0x1566, r26	; 0x801566 <xPendedTicks+0x2>
    1eae:	b0 93 67 15 	sts	0x1567, r27	; 0x801567 <xPendedTicks+0x3>
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	01 c0       	rjmp	.+2      	; 0x1eb8 <xTaskIncrementTick+0x24a>
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	df 91       	pop	r29
    1eba:	cf 91       	pop	r28
    1ebc:	ff 90       	pop	r15
    1ebe:	ef 90       	pop	r14
    1ec0:	df 90       	pop	r13
    1ec2:	cf 90       	pop	r12
    1ec4:	08 95       	ret

00001ec6 <xTaskResumeAll>:
    1ec6:	cf 92       	push	r12
    1ec8:	df 92       	push	r13
    1eca:	ef 92       	push	r14
    1ecc:	ff 92       	push	r15
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	0f 92       	push	r0
    1ed8:	80 91 5a 15 	lds	r24, 0x155A	; 0x80155a <uxSchedulerSuspended>
    1edc:	81 50       	subi	r24, 0x01	; 1
    1ede:	80 93 5a 15 	sts	0x155A, r24	; 0x80155a <uxSchedulerSuspended>
    1ee2:	80 91 5a 15 	lds	r24, 0x155A	; 0x80155a <uxSchedulerSuspended>
    1ee6:	81 11       	cpse	r24, r1
    1ee8:	be c0       	rjmp	.+380    	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
    1eea:	80 91 6e 15 	lds	r24, 0x156E	; 0x80156e <uxCurrentNumberOfTasks>
    1eee:	81 11       	cpse	r24, r1
    1ef0:	88 c0       	rjmp	.+272    	; 0x2002 <__DATA_REGION_LENGTH__+0x2>
    1ef2:	bc c0       	rjmp	.+376    	; 0x206c <__DATA_REGION_LENGTH__+0x6c>
    1ef4:	e0 91 8d 15 	lds	r30, 0x158D	; 0x80158d <xPendingReadyList+0x7>
    1ef8:	f0 91 8e 15 	lds	r31, 0x158E	; 0x80158e <xPendingReadyList+0x8>
    1efc:	00 84       	ldd	r0, Z+8	; 0x08
    1efe:	f1 85       	ldd	r31, Z+9	; 0x09
    1f00:	e0 2d       	mov	r30, r0
    1f02:	a0 8d       	ldd	r26, Z+24	; 0x18
    1f04:	b1 8d       	ldd	r27, Z+25	; 0x19
    1f06:	c2 89       	ldd	r28, Z+18	; 0x12
    1f08:	d3 89       	ldd	r29, Z+19	; 0x13
    1f0a:	84 89       	ldd	r24, Z+20	; 0x14
    1f0c:	95 89       	ldd	r25, Z+21	; 0x15
    1f0e:	9f 83       	std	Y+7, r25	; 0x07
    1f10:	8e 83       	std	Y+6, r24	; 0x06
    1f12:	c4 89       	ldd	r28, Z+20	; 0x14
    1f14:	d5 89       	ldd	r29, Z+21	; 0x15
    1f16:	82 89       	ldd	r24, Z+18	; 0x12
    1f18:	93 89       	ldd	r25, Z+19	; 0x13
    1f1a:	9d 83       	std	Y+5, r25	; 0x05
    1f1c:	8c 83       	std	Y+4, r24	; 0x04
    1f1e:	11 96       	adiw	r26, 0x01	; 1
    1f20:	2d 91       	ld	r18, X+
    1f22:	3c 91       	ld	r19, X
    1f24:	12 97       	sbiw	r26, 0x02	; 2
    1f26:	cf 01       	movw	r24, r30
    1f28:	0e 96       	adiw	r24, 0x0e	; 14
    1f2a:	28 17       	cp	r18, r24
    1f2c:	39 07       	cpc	r19, r25
    1f2e:	31 f4       	brne	.+12     	; 0x1f3c <xTaskResumeAll+0x76>
    1f30:	84 89       	ldd	r24, Z+20	; 0x14
    1f32:	95 89       	ldd	r25, Z+21	; 0x15
    1f34:	12 96       	adiw	r26, 0x02	; 2
    1f36:	9c 93       	st	X, r25
    1f38:	8e 93       	st	-X, r24
    1f3a:	11 97       	sbiw	r26, 0x01	; 1
    1f3c:	11 8e       	std	Z+25, r1	; 0x19
    1f3e:	10 8e       	std	Z+24, r1	; 0x18
    1f40:	8c 91       	ld	r24, X
    1f42:	81 50       	subi	r24, 0x01	; 1
    1f44:	8c 93       	st	X, r24
    1f46:	a4 85       	ldd	r26, Z+12	; 0x0c
    1f48:	b5 85       	ldd	r27, Z+13	; 0x0d
    1f4a:	c6 81       	ldd	r28, Z+6	; 0x06
    1f4c:	d7 81       	ldd	r29, Z+7	; 0x07
    1f4e:	80 85       	ldd	r24, Z+8	; 0x08
    1f50:	91 85       	ldd	r25, Z+9	; 0x09
    1f52:	9f 83       	std	Y+7, r25	; 0x07
    1f54:	8e 83       	std	Y+6, r24	; 0x06
    1f56:	c0 85       	ldd	r28, Z+8	; 0x08
    1f58:	d1 85       	ldd	r29, Z+9	; 0x09
    1f5a:	86 81       	ldd	r24, Z+6	; 0x06
    1f5c:	97 81       	ldd	r25, Z+7	; 0x07
    1f5e:	9d 83       	std	Y+5, r25	; 0x05
    1f60:	8c 83       	std	Y+4, r24	; 0x04
    1f62:	11 96       	adiw	r26, 0x01	; 1
    1f64:	8d 91       	ld	r24, X+
    1f66:	9c 91       	ld	r25, X
    1f68:	12 97       	sbiw	r26, 0x02	; 2
    1f6a:	9f 01       	movw	r18, r30
    1f6c:	2e 5f       	subi	r18, 0xFE	; 254
    1f6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f70:	82 17       	cp	r24, r18
    1f72:	93 07       	cpc	r25, r19
    1f74:	31 f4       	brne	.+12     	; 0x1f82 <xTaskResumeAll+0xbc>
    1f76:	80 85       	ldd	r24, Z+8	; 0x08
    1f78:	91 85       	ldd	r25, Z+9	; 0x09
    1f7a:	12 96       	adiw	r26, 0x02	; 2
    1f7c:	9c 93       	st	X, r25
    1f7e:	8e 93       	st	-X, r24
    1f80:	11 97       	sbiw	r26, 0x01	; 1
    1f82:	15 86       	std	Z+13, r1	; 0x0d
    1f84:	14 86       	std	Z+12, r1	; 0x0c
    1f86:	8c 91       	ld	r24, X
    1f88:	81 50       	subi	r24, 0x01	; 1
    1f8a:	8c 93       	st	X, r24
    1f8c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f8e:	80 91 69 15 	lds	r24, 0x1569	; 0x801569 <uxTopReadyPriority>
    1f92:	8a 17       	cp	r24, r26
    1f94:	10 f4       	brcc	.+4      	; 0x1f9a <xTaskResumeAll+0xd4>
    1f96:	a0 93 69 15 	sts	0x1569, r26	; 0x801569 <uxTopReadyPriority>
    1f9a:	8b e0       	ldi	r24, 0x0B	; 11
    1f9c:	8a 9f       	mul	r24, r26
    1f9e:	d0 01       	movw	r26, r0
    1fa0:	11 24       	eor	r1, r1
    1fa2:	a5 55       	subi	r26, 0x55	; 85
    1fa4:	ba 4e       	sbci	r27, 0xEA	; 234
    1fa6:	11 96       	adiw	r26, 0x01	; 1
    1fa8:	0d 90       	ld	r0, X+
    1faa:	bc 91       	ld	r27, X
    1fac:	a0 2d       	mov	r26, r0
    1fae:	b7 83       	std	Z+7, r27	; 0x07
    1fb0:	a6 83       	std	Z+6, r26	; 0x06
    1fb2:	16 96       	adiw	r26, 0x06	; 6
    1fb4:	4d 91       	ld	r20, X+
    1fb6:	5c 91       	ld	r21, X
    1fb8:	17 97       	sbiw	r26, 0x07	; 7
    1fba:	51 87       	std	Z+9, r21	; 0x09
    1fbc:	40 87       	std	Z+8, r20	; 0x08
    1fbe:	16 96       	adiw	r26, 0x06	; 6
    1fc0:	cd 91       	ld	r28, X+
    1fc2:	dc 91       	ld	r29, X
    1fc4:	17 97       	sbiw	r26, 0x07	; 7
    1fc6:	3d 83       	std	Y+5, r19	; 0x05
    1fc8:	2c 83       	std	Y+4, r18	; 0x04
    1fca:	17 96       	adiw	r26, 0x07	; 7
    1fcc:	3c 93       	st	X, r19
    1fce:	2e 93       	st	-X, r18
    1fd0:	16 97       	sbiw	r26, 0x06	; 6
    1fd2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1fd4:	8a 9f       	mul	r24, r26
    1fd6:	d0 01       	movw	r26, r0
    1fd8:	11 24       	eor	r1, r1
    1fda:	a5 55       	subi	r26, 0x55	; 85
    1fdc:	ba 4e       	sbci	r27, 0xEA	; 234
    1fde:	b5 87       	std	Z+13, r27	; 0x0d
    1fe0:	a4 87       	std	Z+12, r26	; 0x0c
    1fe2:	8c 91       	ld	r24, X
    1fe4:	8f 5f       	subi	r24, 0xFF	; 255
    1fe6:	8c 93       	st	X, r24
    1fe8:	92 8d       	ldd	r25, Z+26	; 0x1a
    1fea:	a0 91 19 16 	lds	r26, 0x1619	; 0x801619 <pxCurrentTCB>
    1fee:	b0 91 1a 16 	lds	r27, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    1ff2:	5a 96       	adiw	r26, 0x1a	; 26
    1ff4:	8c 91       	ld	r24, X
    1ff6:	98 17       	cp	r25, r24
    1ff8:	30 f0       	brcs	.+12     	; 0x2006 <__DATA_REGION_LENGTH__+0x6>
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	80 93 63 15 	sts	0x1563, r24	; 0x801563 <xYieldPending>
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <__DATA_REGION_LENGTH__+0x6>
    2002:	e0 e0       	ldi	r30, 0x00	; 0
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 91 86 15 	lds	r24, 0x1586	; 0x801586 <xPendingReadyList>
    200a:	81 11       	cpse	r24, r1
    200c:	73 cf       	rjmp	.-282    	; 0x1ef4 <xTaskResumeAll+0x2e>
    200e:	ef 2b       	or	r30, r31
    2010:	09 f0       	breq	.+2      	; 0x2014 <__DATA_REGION_LENGTH__+0x14>
    2012:	83 db       	rcall	.-2298   	; 0x171a <prvResetNextTaskUnblockTime>
    2014:	c0 90 64 15 	lds	r12, 0x1564	; 0x801564 <xPendedTicks>
    2018:	d0 90 65 15 	lds	r13, 0x1565	; 0x801565 <xPendedTicks+0x1>
    201c:	e0 90 66 15 	lds	r14, 0x1566	; 0x801566 <xPendedTicks+0x2>
    2020:	f0 90 67 15 	lds	r15, 0x1567	; 0x801567 <xPendedTicks+0x3>
    2024:	c1 14       	cp	r12, r1
    2026:	d1 04       	cpc	r13, r1
    2028:	e1 04       	cpc	r14, r1
    202a:	f1 04       	cpc	r15, r1
    202c:	a1 f0       	breq	.+40     	; 0x2056 <__DATA_REGION_LENGTH__+0x56>
    202e:	1f de       	rcall	.-962    	; 0x1c6e <xTaskIncrementTick>
    2030:	88 23       	and	r24, r24
    2032:	19 f0       	breq	.+6      	; 0x203a <__DATA_REGION_LENGTH__+0x3a>
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	80 93 63 15 	sts	0x1563, r24	; 0x801563 <xYieldPending>
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	c8 1a       	sub	r12, r24
    203e:	d1 08       	sbc	r13, r1
    2040:	e1 08       	sbc	r14, r1
    2042:	f1 08       	sbc	r15, r1
    2044:	a1 f7       	brne	.-24     	; 0x202e <__DATA_REGION_LENGTH__+0x2e>
    2046:	10 92 64 15 	sts	0x1564, r1	; 0x801564 <xPendedTicks>
    204a:	10 92 65 15 	sts	0x1565, r1	; 0x801565 <xPendedTicks+0x1>
    204e:	10 92 66 15 	sts	0x1566, r1	; 0x801566 <xPendedTicks+0x2>
    2052:	10 92 67 15 	sts	0x1567, r1	; 0x801567 <xPendedTicks+0x3>
    2056:	80 91 63 15 	lds	r24, 0x1563	; 0x801563 <xYieldPending>
    205a:	88 23       	and	r24, r24
    205c:	31 f0       	breq	.+12     	; 0x206a <__DATA_REGION_LENGTH__+0x6a>
    205e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <vPortYield>
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	03 c0       	rjmp	.+6      	; 0x206c <__DATA_REGION_LENGTH__+0x6c>
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	01 c0       	rjmp	.+2      	; 0x206c <__DATA_REGION_LENGTH__+0x6c>
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	0f 90       	pop	r0
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	df 91       	pop	r29
    2072:	cf 91       	pop	r28
    2074:	ff 90       	pop	r15
    2076:	ef 90       	pop	r14
    2078:	df 90       	pop	r13
    207a:	cf 90       	pop	r12
    207c:	08 95       	ret

0000207e <xTaskDelayUntil>:
    207e:	8f 92       	push	r8
    2080:	9f 92       	push	r9
    2082:	af 92       	push	r10
    2084:	bf 92       	push	r11
    2086:	cf 92       	push	r12
    2088:	df 92       	push	r13
    208a:	ef 92       	push	r14
    208c:	ff 92       	push	r15
    208e:	1f 93       	push	r17
    2090:	cf 93       	push	r28
    2092:	df 93       	push	r29
    2094:	ec 01       	movw	r28, r24
    2096:	6a 01       	movw	r12, r20
    2098:	7b 01       	movw	r14, r22
    209a:	d5 dd       	rcall	.-1110   	; 0x1c46 <vTaskSuspendAll>
    209c:	80 90 6a 15 	lds	r8, 0x156A	; 0x80156a <xTickCount>
    20a0:	90 90 6b 15 	lds	r9, 0x156B	; 0x80156b <xTickCount+0x1>
    20a4:	a0 90 6c 15 	lds	r10, 0x156C	; 0x80156c <xTickCount+0x2>
    20a8:	b0 90 6d 15 	lds	r11, 0x156D	; 0x80156d <xTickCount+0x3>
    20ac:	88 81       	ld	r24, Y
    20ae:	99 81       	ldd	r25, Y+1	; 0x01
    20b0:	aa 81       	ldd	r26, Y+2	; 0x02
    20b2:	bb 81       	ldd	r27, Y+3	; 0x03
    20b4:	ac 01       	movw	r20, r24
    20b6:	bd 01       	movw	r22, r26
    20b8:	4c 0d       	add	r20, r12
    20ba:	5d 1d       	adc	r21, r13
    20bc:	6e 1d       	adc	r22, r14
    20be:	7f 1d       	adc	r23, r15
    20c0:	88 16       	cp	r8, r24
    20c2:	99 06       	cpc	r9, r25
    20c4:	aa 06       	cpc	r10, r26
    20c6:	bb 06       	cpc	r11, r27
    20c8:	60 f4       	brcc	.+24     	; 0x20e2 <xTaskDelayUntil+0x64>
    20ca:	48 17       	cp	r20, r24
    20cc:	59 07       	cpc	r21, r25
    20ce:	6a 07       	cpc	r22, r26
    20d0:	7b 07       	cpc	r23, r27
    20d2:	98 f4       	brcc	.+38     	; 0x20fa <xTaskDelayUntil+0x7c>
    20d4:	84 16       	cp	r8, r20
    20d6:	95 06       	cpc	r9, r21
    20d8:	a6 06       	cpc	r10, r22
    20da:	b7 06       	cpc	r11, r23
    20dc:	80 f0       	brcs	.+32     	; 0x20fe <xTaskDelayUntil+0x80>
    20de:	10 e0       	ldi	r17, 0x00	; 0
    20e0:	13 c0       	rjmp	.+38     	; 0x2108 <xTaskDelayUntil+0x8a>
    20e2:	48 17       	cp	r20, r24
    20e4:	59 07       	cpc	r21, r25
    20e6:	6a 07       	cpc	r22, r26
    20e8:	7b 07       	cpc	r23, r27
    20ea:	58 f0       	brcs	.+22     	; 0x2102 <xTaskDelayUntil+0x84>
    20ec:	84 16       	cp	r8, r20
    20ee:	95 06       	cpc	r9, r21
    20f0:	a6 06       	cpc	r10, r22
    20f2:	b7 06       	cpc	r11, r23
    20f4:	40 f0       	brcs	.+16     	; 0x2106 <xTaskDelayUntil+0x88>
    20f6:	10 e0       	ldi	r17, 0x00	; 0
    20f8:	07 c0       	rjmp	.+14     	; 0x2108 <xTaskDelayUntil+0x8a>
    20fa:	10 e0       	ldi	r17, 0x00	; 0
    20fc:	05 c0       	rjmp	.+10     	; 0x2108 <xTaskDelayUntil+0x8a>
    20fe:	11 e0       	ldi	r17, 0x01	; 1
    2100:	03 c0       	rjmp	.+6      	; 0x2108 <xTaskDelayUntil+0x8a>
    2102:	11 e0       	ldi	r17, 0x01	; 1
    2104:	01 c0       	rjmp	.+2      	; 0x2108 <xTaskDelayUntil+0x8a>
    2106:	11 e0       	ldi	r17, 0x01	; 1
    2108:	48 83       	st	Y, r20
    210a:	59 83       	std	Y+1, r21	; 0x01
    210c:	6a 83       	std	Y+2, r22	; 0x02
    210e:	7b 83       	std	Y+3, r23	; 0x03
    2110:	11 23       	and	r17, r17
    2112:	41 f0       	breq	.+16     	; 0x2124 <xTaskDelayUntil+0xa6>
    2114:	cb 01       	movw	r24, r22
    2116:	ba 01       	movw	r22, r20
    2118:	68 19       	sub	r22, r8
    211a:	79 09       	sbc	r23, r9
    211c:	8a 09       	sbc	r24, r10
    211e:	9b 09       	sbc	r25, r11
    2120:	40 e0       	ldi	r20, 0x00	; 0
    2122:	6b dc       	rcall	.-1834   	; 0x19fa <prvAddCurrentTaskToDelayedList>
    2124:	d0 de       	rcall	.-608    	; 0x1ec6 <xTaskResumeAll>
    2126:	81 11       	cpse	r24, r1
    2128:	02 c0       	rjmp	.+4      	; 0x212e <xTaskDelayUntil+0xb0>
    212a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <vPortYield>
    212e:	81 2f       	mov	r24, r17
    2130:	df 91       	pop	r29
    2132:	cf 91       	pop	r28
    2134:	1f 91       	pop	r17
    2136:	ff 90       	pop	r15
    2138:	ef 90       	pop	r14
    213a:	df 90       	pop	r13
    213c:	cf 90       	pop	r12
    213e:	bf 90       	pop	r11
    2140:	af 90       	pop	r10
    2142:	9f 90       	pop	r9
    2144:	8f 90       	pop	r8
    2146:	08 95       	ret

00002148 <vTaskDelay>:
    2148:	cf 92       	push	r12
    214a:	df 92       	push	r13
    214c:	ef 92       	push	r14
    214e:	ff 92       	push	r15
    2150:	6b 01       	movw	r12, r22
    2152:	7c 01       	movw	r14, r24
    2154:	67 2b       	or	r22, r23
    2156:	68 2b       	or	r22, r24
    2158:	69 2b       	or	r22, r25
    215a:	39 f0       	breq	.+14     	; 0x216a <vTaskDelay+0x22>
    215c:	74 dd       	rcall	.-1304   	; 0x1c46 <vTaskSuspendAll>
    215e:	40 e0       	ldi	r20, 0x00	; 0
    2160:	c7 01       	movw	r24, r14
    2162:	b6 01       	movw	r22, r12
    2164:	4a dc       	rcall	.-1900   	; 0x19fa <prvAddCurrentTaskToDelayedList>
    2166:	af de       	rcall	.-674    	; 0x1ec6 <xTaskResumeAll>
    2168:	01 c0       	rjmp	.+2      	; 0x216c <vTaskDelay+0x24>
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	81 11       	cpse	r24, r1
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <vTaskDelay+0x2c>
    2170:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <vPortYield>
    2174:	ff 90       	pop	r15
    2176:	ef 90       	pop	r14
    2178:	df 90       	pop	r13
    217a:	cf 90       	pop	r12
    217c:	08 95       	ret

0000217e <vTaskSwitchContext>:
    217e:	80 91 5a 15 	lds	r24, 0x155A	; 0x80155a <uxSchedulerSuspended>
    2182:	88 23       	and	r24, r24
    2184:	21 f0       	breq	.+8      	; 0x218e <vTaskSwitchContext+0x10>
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	80 93 63 15 	sts	0x1563, r24	; 0x801563 <xYieldPending>
    218c:	08 95       	ret
    218e:	10 92 63 15 	sts	0x1563, r1	; 0x801563 <xYieldPending>
    2192:	e0 91 19 16 	lds	r30, 0x1619	; 0x801619 <pxCurrentTCB>
    2196:	f0 91 1a 16 	lds	r31, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    219a:	20 81       	ld	r18, Z
    219c:	31 81       	ldd	r19, Z+1	; 0x01
    219e:	e0 91 19 16 	lds	r30, 0x1619	; 0x801619 <pxCurrentTCB>
    21a2:	f0 91 1a 16 	lds	r31, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    21a6:	83 8d       	ldd	r24, Z+27	; 0x1b
    21a8:	94 8d       	ldd	r25, Z+28	; 0x1c
    21aa:	82 17       	cp	r24, r18
    21ac:	93 07       	cpc	r25, r19
    21ae:	60 f0       	brcs	.+24     	; 0x21c8 <vTaskSwitchContext+0x4a>
    21b0:	60 91 19 16 	lds	r22, 0x1619	; 0x801619 <pxCurrentTCB>
    21b4:	70 91 1a 16 	lds	r23, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    21b8:	63 5e       	subi	r22, 0xE3	; 227
    21ba:	7f 4f       	sbci	r23, 0xFF	; 255
    21bc:	80 91 19 16 	lds	r24, 0x1619	; 0x801619 <pxCurrentTCB>
    21c0:	90 91 1a 16 	lds	r25, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    21c4:	0e 94 1d 19 	call	0x323a	; 0x323a <vApplicationStackOverflowHook>
    21c8:	80 91 69 15 	lds	r24, 0x1569	; 0x801569 <uxTopReadyPriority>
    21cc:	01 c0       	rjmp	.+2      	; 0x21d0 <vTaskSwitchContext+0x52>
    21ce:	81 50       	subi	r24, 0x01	; 1
    21d0:	28 2f       	mov	r18, r24
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	9b e0       	ldi	r25, 0x0B	; 11
    21d6:	92 9f       	mul	r25, r18
    21d8:	f0 01       	movw	r30, r0
    21da:	93 9f       	mul	r25, r19
    21dc:	f0 0d       	add	r31, r0
    21de:	11 24       	eor	r1, r1
    21e0:	e5 55       	subi	r30, 0x55	; 85
    21e2:	fa 4e       	sbci	r31, 0xEA	; 234
    21e4:	90 81       	ld	r25, Z
    21e6:	99 23       	and	r25, r25
    21e8:	91 f3       	breq	.-28     	; 0x21ce <vTaskSwitchContext+0x50>
    21ea:	9b e0       	ldi	r25, 0x0B	; 11
    21ec:	92 9f       	mul	r25, r18
    21ee:	a0 01       	movw	r20, r0
    21f0:	93 9f       	mul	r25, r19
    21f2:	50 0d       	add	r21, r0
    21f4:	11 24       	eor	r1, r1
    21f6:	df 01       	movw	r26, r30
    21f8:	01 80       	ldd	r0, Z+1	; 0x01
    21fa:	f2 81       	ldd	r31, Z+2	; 0x02
    21fc:	e0 2d       	mov	r30, r0
    21fe:	04 80       	ldd	r0, Z+4	; 0x04
    2200:	f5 81       	ldd	r31, Z+5	; 0x05
    2202:	e0 2d       	mov	r30, r0
    2204:	12 96       	adiw	r26, 0x02	; 2
    2206:	fc 93       	st	X, r31
    2208:	ee 93       	st	-X, r30
    220a:	11 97       	sbiw	r26, 0x01	; 1
    220c:	42 55       	subi	r20, 0x52	; 82
    220e:	5a 4e       	sbci	r21, 0xEA	; 234
    2210:	e4 17       	cp	r30, r20
    2212:	f5 07       	cpc	r31, r21
    2214:	29 f4       	brne	.+10     	; 0x2220 <__stack+0x21>
    2216:	44 81       	ldd	r20, Z+4	; 0x04
    2218:	55 81       	ldd	r21, Z+5	; 0x05
    221a:	fd 01       	movw	r30, r26
    221c:	52 83       	std	Z+2, r21	; 0x02
    221e:	41 83       	std	Z+1, r20	; 0x01
    2220:	9b e0       	ldi	r25, 0x0B	; 11
    2222:	92 9f       	mul	r25, r18
    2224:	f0 01       	movw	r30, r0
    2226:	93 9f       	mul	r25, r19
    2228:	f0 0d       	add	r31, r0
    222a:	11 24       	eor	r1, r1
    222c:	e5 55       	subi	r30, 0x55	; 85
    222e:	fa 4e       	sbci	r31, 0xEA	; 234
    2230:	01 80       	ldd	r0, Z+1	; 0x01
    2232:	f2 81       	ldd	r31, Z+2	; 0x02
    2234:	e0 2d       	mov	r30, r0
    2236:	20 85       	ldd	r18, Z+8	; 0x08
    2238:	31 85       	ldd	r19, Z+9	; 0x09
    223a:	30 93 1a 16 	sts	0x161A, r19	; 0x80161a <pxCurrentTCB+0x1>
    223e:	20 93 19 16 	sts	0x1619, r18	; 0x801619 <pxCurrentTCB>
    2242:	80 93 69 15 	sts	0x1569, r24	; 0x801569 <uxTopReadyPriority>
    2246:	08 95       	ret

00002248 <vTaskPlaceOnEventList>:
    2248:	cf 92       	push	r12
    224a:	df 92       	push	r13
    224c:	ef 92       	push	r14
    224e:	ff 92       	push	r15
    2250:	6a 01       	movw	r12, r20
    2252:	7b 01       	movw	r14, r22
    2254:	60 91 19 16 	lds	r22, 0x1619	; 0x801619 <pxCurrentTCB>
    2258:	70 91 1a 16 	lds	r23, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    225c:	62 5f       	subi	r22, 0xF2	; 242
    225e:	7f 4f       	sbci	r23, 0xFF	; 255
    2260:	0e 94 29 04 	call	0x852	; 0x852 <vListInsert>
    2264:	41 e0       	ldi	r20, 0x01	; 1
    2266:	c7 01       	movw	r24, r14
    2268:	b6 01       	movw	r22, r12
    226a:	c7 db       	rcall	.-2162   	; 0x19fa <prvAddCurrentTaskToDelayedList>
    226c:	ff 90       	pop	r15
    226e:	ef 90       	pop	r14
    2270:	df 90       	pop	r13
    2272:	cf 90       	pop	r12
    2274:	08 95       	ret

00002276 <vTaskPlaceOnEventListRestricted>:
    2276:	cf 93       	push	r28
    2278:	df 93       	push	r29
    227a:	fc 01       	movw	r30, r24
    227c:	cb 01       	movw	r24, r22
    227e:	ba 01       	movw	r22, r20
    2280:	a1 81       	ldd	r26, Z+1	; 0x01
    2282:	b2 81       	ldd	r27, Z+2	; 0x02
    2284:	c0 91 19 16 	lds	r28, 0x1619	; 0x801619 <pxCurrentTCB>
    2288:	d0 91 1a 16 	lds	r29, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    228c:	bb 8b       	std	Y+19, r27	; 0x13
    228e:	aa 8b       	std	Y+18, r26	; 0x12
    2290:	c0 91 19 16 	lds	r28, 0x1619	; 0x801619 <pxCurrentTCB>
    2294:	d0 91 1a 16 	lds	r29, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    2298:	16 96       	adiw	r26, 0x06	; 6
    229a:	4d 91       	ld	r20, X+
    229c:	5c 91       	ld	r21, X
    229e:	17 97       	sbiw	r26, 0x07	; 7
    22a0:	5d 8b       	std	Y+21, r21	; 0x15
    22a2:	4c 8b       	std	Y+20, r20	; 0x14
    22a4:	16 96       	adiw	r26, 0x06	; 6
    22a6:	cd 91       	ld	r28, X+
    22a8:	dc 91       	ld	r29, X
    22aa:	17 97       	sbiw	r26, 0x07	; 7
    22ac:	40 91 19 16 	lds	r20, 0x1619	; 0x801619 <pxCurrentTCB>
    22b0:	50 91 1a 16 	lds	r21, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    22b4:	42 5f       	subi	r20, 0xF2	; 242
    22b6:	5f 4f       	sbci	r21, 0xFF	; 255
    22b8:	5d 83       	std	Y+5, r21	; 0x05
    22ba:	4c 83       	std	Y+4, r20	; 0x04
    22bc:	40 91 19 16 	lds	r20, 0x1619	; 0x801619 <pxCurrentTCB>
    22c0:	50 91 1a 16 	lds	r21, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    22c4:	42 5f       	subi	r20, 0xF2	; 242
    22c6:	5f 4f       	sbci	r21, 0xFF	; 255
    22c8:	17 96       	adiw	r26, 0x07	; 7
    22ca:	5c 93       	st	X, r21
    22cc:	4e 93       	st	-X, r20
    22ce:	16 97       	sbiw	r26, 0x06	; 6
    22d0:	a0 91 19 16 	lds	r26, 0x1619	; 0x801619 <pxCurrentTCB>
    22d4:	b0 91 1a 16 	lds	r27, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    22d8:	59 96       	adiw	r26, 0x19	; 25
    22da:	fc 93       	st	X, r31
    22dc:	ee 93       	st	-X, r30
    22de:	58 97       	sbiw	r26, 0x18	; 24
    22e0:	30 81       	ld	r19, Z
    22e2:	3f 5f       	subi	r19, 0xFF	; 255
    22e4:	30 83       	st	Z, r19
    22e6:	22 23       	and	r18, r18
    22e8:	19 f0       	breq	.+6      	; 0x22f0 <vTaskPlaceOnEventListRestricted+0x7a>
    22ea:	6f ef       	ldi	r22, 0xFF	; 255
    22ec:	7f ef       	ldi	r23, 0xFF	; 255
    22ee:	cb 01       	movw	r24, r22
    22f0:	42 2f       	mov	r20, r18
    22f2:	83 db       	rcall	.-2298   	; 0x19fa <prvAddCurrentTaskToDelayedList>
    22f4:	df 91       	pop	r29
    22f6:	cf 91       	pop	r28
    22f8:	08 95       	ret

000022fa <xTaskRemoveFromEventList>:
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
    22fe:	dc 01       	movw	r26, r24
    2300:	17 96       	adiw	r26, 0x07	; 7
    2302:	ed 91       	ld	r30, X+
    2304:	fc 91       	ld	r31, X
    2306:	18 97       	sbiw	r26, 0x08	; 8
    2308:	00 84       	ldd	r0, Z+8	; 0x08
    230a:	f1 85       	ldd	r31, Z+9	; 0x09
    230c:	e0 2d       	mov	r30, r0
    230e:	a0 8d       	ldd	r26, Z+24	; 0x18
    2310:	b1 8d       	ldd	r27, Z+25	; 0x19
    2312:	c2 89       	ldd	r28, Z+18	; 0x12
    2314:	d3 89       	ldd	r29, Z+19	; 0x13
    2316:	84 89       	ldd	r24, Z+20	; 0x14
    2318:	95 89       	ldd	r25, Z+21	; 0x15
    231a:	9f 83       	std	Y+7, r25	; 0x07
    231c:	8e 83       	std	Y+6, r24	; 0x06
    231e:	c4 89       	ldd	r28, Z+20	; 0x14
    2320:	d5 89       	ldd	r29, Z+21	; 0x15
    2322:	82 89       	ldd	r24, Z+18	; 0x12
    2324:	93 89       	ldd	r25, Z+19	; 0x13
    2326:	9d 83       	std	Y+5, r25	; 0x05
    2328:	8c 83       	std	Y+4, r24	; 0x04
    232a:	11 96       	adiw	r26, 0x01	; 1
    232c:	8d 91       	ld	r24, X+
    232e:	9c 91       	ld	r25, X
    2330:	12 97       	sbiw	r26, 0x02	; 2
    2332:	9f 01       	movw	r18, r30
    2334:	22 5f       	subi	r18, 0xF2	; 242
    2336:	3f 4f       	sbci	r19, 0xFF	; 255
    2338:	82 17       	cp	r24, r18
    233a:	93 07       	cpc	r25, r19
    233c:	31 f4       	brne	.+12     	; 0x234a <xTaskRemoveFromEventList+0x50>
    233e:	84 89       	ldd	r24, Z+20	; 0x14
    2340:	95 89       	ldd	r25, Z+21	; 0x15
    2342:	12 96       	adiw	r26, 0x02	; 2
    2344:	9c 93       	st	X, r25
    2346:	8e 93       	st	-X, r24
    2348:	11 97       	sbiw	r26, 0x01	; 1
    234a:	11 8e       	std	Z+25, r1	; 0x19
    234c:	10 8e       	std	Z+24, r1	; 0x18
    234e:	8c 91       	ld	r24, X
    2350:	81 50       	subi	r24, 0x01	; 1
    2352:	8c 93       	st	X, r24
    2354:	80 91 5a 15 	lds	r24, 0x155A	; 0x80155a <uxSchedulerSuspended>
    2358:	81 11       	cpse	r24, r1
    235a:	52 c0       	rjmp	.+164    	; 0x2400 <xTaskRemoveFromEventList+0x106>
    235c:	a4 85       	ldd	r26, Z+12	; 0x0c
    235e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2360:	c6 81       	ldd	r28, Z+6	; 0x06
    2362:	d7 81       	ldd	r29, Z+7	; 0x07
    2364:	80 85       	ldd	r24, Z+8	; 0x08
    2366:	91 85       	ldd	r25, Z+9	; 0x09
    2368:	9f 83       	std	Y+7, r25	; 0x07
    236a:	8e 83       	std	Y+6, r24	; 0x06
    236c:	c0 85       	ldd	r28, Z+8	; 0x08
    236e:	d1 85       	ldd	r29, Z+9	; 0x09
    2370:	86 81       	ldd	r24, Z+6	; 0x06
    2372:	97 81       	ldd	r25, Z+7	; 0x07
    2374:	9d 83       	std	Y+5, r25	; 0x05
    2376:	8c 83       	std	Y+4, r24	; 0x04
    2378:	11 96       	adiw	r26, 0x01	; 1
    237a:	8d 91       	ld	r24, X+
    237c:	9c 91       	ld	r25, X
    237e:	12 97       	sbiw	r26, 0x02	; 2
    2380:	9f 01       	movw	r18, r30
    2382:	2e 5f       	subi	r18, 0xFE	; 254
    2384:	3f 4f       	sbci	r19, 0xFF	; 255
    2386:	82 17       	cp	r24, r18
    2388:	93 07       	cpc	r25, r19
    238a:	31 f4       	brne	.+12     	; 0x2398 <xTaskRemoveFromEventList+0x9e>
    238c:	80 85       	ldd	r24, Z+8	; 0x08
    238e:	91 85       	ldd	r25, Z+9	; 0x09
    2390:	12 96       	adiw	r26, 0x02	; 2
    2392:	9c 93       	st	X, r25
    2394:	8e 93       	st	-X, r24
    2396:	11 97       	sbiw	r26, 0x01	; 1
    2398:	15 86       	std	Z+13, r1	; 0x0d
    239a:	14 86       	std	Z+12, r1	; 0x0c
    239c:	8c 91       	ld	r24, X
    239e:	81 50       	subi	r24, 0x01	; 1
    23a0:	8c 93       	st	X, r24
    23a2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    23a4:	80 91 69 15 	lds	r24, 0x1569	; 0x801569 <uxTopReadyPriority>
    23a8:	8a 17       	cp	r24, r26
    23aa:	10 f4       	brcc	.+4      	; 0x23b0 <xTaskRemoveFromEventList+0xb6>
    23ac:	a0 93 69 15 	sts	0x1569, r26	; 0x801569 <uxTopReadyPriority>
    23b0:	8b e0       	ldi	r24, 0x0B	; 11
    23b2:	8a 9f       	mul	r24, r26
    23b4:	d0 01       	movw	r26, r0
    23b6:	11 24       	eor	r1, r1
    23b8:	a5 55       	subi	r26, 0x55	; 85
    23ba:	ba 4e       	sbci	r27, 0xEA	; 234
    23bc:	11 96       	adiw	r26, 0x01	; 1
    23be:	0d 90       	ld	r0, X+
    23c0:	bc 91       	ld	r27, X
    23c2:	a0 2d       	mov	r26, r0
    23c4:	b7 83       	std	Z+7, r27	; 0x07
    23c6:	a6 83       	std	Z+6, r26	; 0x06
    23c8:	16 96       	adiw	r26, 0x06	; 6
    23ca:	4d 91       	ld	r20, X+
    23cc:	5c 91       	ld	r21, X
    23ce:	17 97       	sbiw	r26, 0x07	; 7
    23d0:	51 87       	std	Z+9, r21	; 0x09
    23d2:	40 87       	std	Z+8, r20	; 0x08
    23d4:	16 96       	adiw	r26, 0x06	; 6
    23d6:	cd 91       	ld	r28, X+
    23d8:	dc 91       	ld	r29, X
    23da:	17 97       	sbiw	r26, 0x07	; 7
    23dc:	3d 83       	std	Y+5, r19	; 0x05
    23de:	2c 83       	std	Y+4, r18	; 0x04
    23e0:	17 96       	adiw	r26, 0x07	; 7
    23e2:	3c 93       	st	X, r19
    23e4:	2e 93       	st	-X, r18
    23e6:	16 97       	sbiw	r26, 0x06	; 6
    23e8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    23ea:	8a 9f       	mul	r24, r26
    23ec:	d0 01       	movw	r26, r0
    23ee:	11 24       	eor	r1, r1
    23f0:	a5 55       	subi	r26, 0x55	; 85
    23f2:	ba 4e       	sbci	r27, 0xEA	; 234
    23f4:	b5 87       	std	Z+13, r27	; 0x0d
    23f6:	a4 87       	std	Z+12, r26	; 0x0c
    23f8:	8c 91       	ld	r24, X
    23fa:	8f 5f       	subi	r24, 0xFF	; 255
    23fc:	8c 93       	st	X, r24
    23fe:	1c c0       	rjmp	.+56     	; 0x2438 <xTaskRemoveFromEventList+0x13e>
    2400:	46 e8       	ldi	r20, 0x86	; 134
    2402:	55 e1       	ldi	r21, 0x15	; 21
    2404:	da 01       	movw	r26, r20
    2406:	11 96       	adiw	r26, 0x01	; 1
    2408:	cd 91       	ld	r28, X+
    240a:	dc 91       	ld	r29, X
    240c:	12 97       	sbiw	r26, 0x02	; 2
    240e:	d3 8b       	std	Z+19, r29	; 0x13
    2410:	c2 8b       	std	Z+18, r28	; 0x12
    2412:	8e 81       	ldd	r24, Y+6	; 0x06
    2414:	9f 81       	ldd	r25, Y+7	; 0x07
    2416:	95 8b       	std	Z+21, r25	; 0x15
    2418:	84 8b       	std	Z+20, r24	; 0x14
    241a:	8e 81       	ldd	r24, Y+6	; 0x06
    241c:	9f 81       	ldd	r25, Y+7	; 0x07
    241e:	dc 01       	movw	r26, r24
    2420:	15 96       	adiw	r26, 0x05	; 5
    2422:	3c 93       	st	X, r19
    2424:	2e 93       	st	-X, r18
    2426:	14 97       	sbiw	r26, 0x04	; 4
    2428:	3f 83       	std	Y+7, r19	; 0x07
    242a:	2e 83       	std	Y+6, r18	; 0x06
    242c:	51 8f       	std	Z+25, r21	; 0x19
    242e:	40 8f       	std	Z+24, r20	; 0x18
    2430:	da 01       	movw	r26, r20
    2432:	8c 91       	ld	r24, X
    2434:	8f 5f       	subi	r24, 0xFF	; 255
    2436:	8c 93       	st	X, r24
    2438:	92 8d       	ldd	r25, Z+26	; 0x1a
    243a:	e0 91 19 16 	lds	r30, 0x1619	; 0x801619 <pxCurrentTCB>
    243e:	f0 91 1a 16 	lds	r31, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    2442:	82 8d       	ldd	r24, Z+26	; 0x1a
    2444:	89 17       	cp	r24, r25
    2446:	20 f4       	brcc	.+8      	; 0x2450 <xTaskRemoveFromEventList+0x156>
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	80 93 63 15 	sts	0x1563, r24	; 0x801563 <xYieldPending>
    244e:	01 c0       	rjmp	.+2      	; 0x2452 <xTaskRemoveFromEventList+0x158>
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	08 95       	ret

00002458 <vTaskSetTimeOutState>:
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	0f 92       	push	r0
    245e:	20 91 62 15 	lds	r18, 0x1562	; 0x801562 <xNumOfOverflows>
    2462:	fc 01       	movw	r30, r24
    2464:	20 83       	st	Z, r18
    2466:	40 91 6a 15 	lds	r20, 0x156A	; 0x80156a <xTickCount>
    246a:	50 91 6b 15 	lds	r21, 0x156B	; 0x80156b <xTickCount+0x1>
    246e:	60 91 6c 15 	lds	r22, 0x156C	; 0x80156c <xTickCount+0x2>
    2472:	70 91 6d 15 	lds	r23, 0x156D	; 0x80156d <xTickCount+0x3>
    2476:	41 83       	std	Z+1, r20	; 0x01
    2478:	52 83       	std	Z+2, r21	; 0x02
    247a:	63 83       	std	Z+3, r22	; 0x03
    247c:	74 83       	std	Z+4, r23	; 0x04
    247e:	0f 90       	pop	r0
    2480:	0f be       	out	0x3f, r0	; 63
    2482:	08 95       	ret

00002484 <vTaskInternalSetTimeOutState>:
    2484:	20 91 62 15 	lds	r18, 0x1562	; 0x801562 <xNumOfOverflows>
    2488:	fc 01       	movw	r30, r24
    248a:	20 83       	st	Z, r18
    248c:	40 91 6a 15 	lds	r20, 0x156A	; 0x80156a <xTickCount>
    2490:	50 91 6b 15 	lds	r21, 0x156B	; 0x80156b <xTickCount+0x1>
    2494:	60 91 6c 15 	lds	r22, 0x156C	; 0x80156c <xTickCount+0x2>
    2498:	70 91 6d 15 	lds	r23, 0x156D	; 0x80156d <xTickCount+0x3>
    249c:	41 83       	std	Z+1, r20	; 0x01
    249e:	52 83       	std	Z+2, r21	; 0x02
    24a0:	63 83       	std	Z+3, r22	; 0x03
    24a2:	74 83       	std	Z+4, r23	; 0x04
    24a4:	08 95       	ret

000024a6 <xTaskCheckForTimeOut>:
    24a6:	8f 92       	push	r8
    24a8:	9f 92       	push	r9
    24aa:	af 92       	push	r10
    24ac:	bf 92       	push	r11
    24ae:	cf 92       	push	r12
    24b0:	df 92       	push	r13
    24b2:	ef 92       	push	r14
    24b4:	ff 92       	push	r15
    24b6:	0f 93       	push	r16
    24b8:	1f 93       	push	r17
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	fb 01       	movw	r30, r22
    24c0:	0f b6       	in	r0, 0x3f	; 63
    24c2:	f8 94       	cli
    24c4:	0f 92       	push	r0
    24c6:	c0 90 6a 15 	lds	r12, 0x156A	; 0x80156a <xTickCount>
    24ca:	d0 90 6b 15 	lds	r13, 0x156B	; 0x80156b <xTickCount+0x1>
    24ce:	e0 90 6c 15 	lds	r14, 0x156C	; 0x80156c <xTickCount+0x2>
    24d2:	f0 90 6d 15 	lds	r15, 0x156D	; 0x80156d <xTickCount+0x3>
    24d6:	dc 01       	movw	r26, r24
    24d8:	11 96       	adiw	r26, 0x01	; 1
    24da:	0d 91       	ld	r16, X+
    24dc:	1d 91       	ld	r17, X+
    24de:	2d 91       	ld	r18, X+
    24e0:	3c 91       	ld	r19, X
    24e2:	14 97       	sbiw	r26, 0x04	; 4
    24e4:	46 01       	movw	r8, r12
    24e6:	57 01       	movw	r10, r14
    24e8:	80 1a       	sub	r8, r16
    24ea:	91 0a       	sbc	r9, r17
    24ec:	a2 0a       	sbc	r10, r18
    24ee:	b3 0a       	sbc	r11, r19
    24f0:	40 81       	ld	r20, Z
    24f2:	51 81       	ldd	r21, Z+1	; 0x01
    24f4:	62 81       	ldd	r22, Z+2	; 0x02
    24f6:	73 81       	ldd	r23, Z+3	; 0x03
    24f8:	4f 3f       	cpi	r20, 0xFF	; 255
    24fa:	bf ef       	ldi	r27, 0xFF	; 255
    24fc:	5b 07       	cpc	r21, r27
    24fe:	6b 07       	cpc	r22, r27
    2500:	7b 07       	cpc	r23, r27
    2502:	39 f1       	breq	.+78     	; 0x2552 <xTaskCheckForTimeOut+0xac>
    2504:	ec 01       	movw	r28, r24
    2506:	b8 81       	ld	r27, Y
    2508:	a0 91 62 15 	lds	r26, 0x1562	; 0x801562 <xNumOfOverflows>
    250c:	ba 17       	cp	r27, r26
    250e:	59 f0       	breq	.+22     	; 0x2526 <xTaskCheckForTimeOut+0x80>
    2510:	c0 16       	cp	r12, r16
    2512:	d1 06       	cpc	r13, r17
    2514:	e2 06       	cpc	r14, r18
    2516:	f3 06       	cpc	r15, r19
    2518:	30 f0       	brcs	.+12     	; 0x2526 <xTaskCheckForTimeOut+0x80>
    251a:	10 82       	st	Z, r1
    251c:	11 82       	std	Z+1, r1	; 0x01
    251e:	12 82       	std	Z+2, r1	; 0x02
    2520:	13 82       	std	Z+3, r1	; 0x03
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	17 c0       	rjmp	.+46     	; 0x2554 <xTaskCheckForTimeOut+0xae>
    2526:	84 16       	cp	r8, r20
    2528:	95 06       	cpc	r9, r21
    252a:	a6 06       	cpc	r10, r22
    252c:	b7 06       	cpc	r11, r23
    252e:	58 f4       	brcc	.+22     	; 0x2546 <xTaskCheckForTimeOut+0xa0>
    2530:	48 19       	sub	r20, r8
    2532:	59 09       	sbc	r21, r9
    2534:	6a 09       	sbc	r22, r10
    2536:	7b 09       	sbc	r23, r11
    2538:	40 83       	st	Z, r20
    253a:	51 83       	std	Z+1, r21	; 0x01
    253c:	62 83       	std	Z+2, r22	; 0x02
    253e:	73 83       	std	Z+3, r23	; 0x03
    2540:	a1 df       	rcall	.-190    	; 0x2484 <vTaskInternalSetTimeOutState>
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	07 c0       	rjmp	.+14     	; 0x2554 <xTaskCheckForTimeOut+0xae>
    2546:	10 82       	st	Z, r1
    2548:	11 82       	std	Z+1, r1	; 0x01
    254a:	12 82       	std	Z+2, r1	; 0x02
    254c:	13 82       	std	Z+3, r1	; 0x03
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	01 c0       	rjmp	.+2      	; 0x2554 <xTaskCheckForTimeOut+0xae>
    2552:	80 e0       	ldi	r24, 0x00	; 0
    2554:	0f 90       	pop	r0
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	df 91       	pop	r29
    255a:	cf 91       	pop	r28
    255c:	1f 91       	pop	r17
    255e:	0f 91       	pop	r16
    2560:	ff 90       	pop	r15
    2562:	ef 90       	pop	r14
    2564:	df 90       	pop	r13
    2566:	cf 90       	pop	r12
    2568:	bf 90       	pop	r11
    256a:	af 90       	pop	r10
    256c:	9f 90       	pop	r9
    256e:	8f 90       	pop	r8
    2570:	08 95       	ret

00002572 <vTaskMissedYield>:
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	80 93 63 15 	sts	0x1563, r24	; 0x801563 <xYieldPending>
    2578:	08 95       	ret

0000257a <xTaskGetCurrentTaskHandle>:
    257a:	80 91 19 16 	lds	r24, 0x1619	; 0x801619 <pxCurrentTCB>
    257e:	90 91 1a 16 	lds	r25, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    2582:	08 95       	ret

00002584 <xTaskGetSchedulerState>:
    2584:	80 91 68 15 	lds	r24, 0x1568	; 0x801568 <xSchedulerRunning>
    2588:	88 23       	and	r24, r24
    258a:	31 f0       	breq	.+12     	; 0x2598 <xTaskGetSchedulerState+0x14>
    258c:	80 91 5a 15 	lds	r24, 0x155A	; 0x80155a <uxSchedulerSuspended>
    2590:	81 11       	cpse	r24, r1
    2592:	04 c0       	rjmp	.+8      	; 0x259c <xTaskGetSchedulerState+0x18>
    2594:	82 e0       	ldi	r24, 0x02	; 2
    2596:	08 95       	ret
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	08 95       	ret
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	08 95       	ret

000025a0 <xTaskPriorityDisinherit>:
    25a0:	0f 93       	push	r16
    25a2:	1f 93       	push	r17
    25a4:	cf 93       	push	r28
    25a6:	df 93       	push	r29
    25a8:	fc 01       	movw	r30, r24
    25aa:	89 2b       	or	r24, r25
    25ac:	09 f4       	brne	.+2      	; 0x25b0 <xTaskPriorityDisinherit+0x10>
    25ae:	49 c0       	rjmp	.+146    	; 0x2642 <xTaskPriorityDisinherit+0xa2>
    25b0:	86 a5       	ldd	r24, Z+46	; 0x2e
    25b2:	81 50       	subi	r24, 0x01	; 1
    25b4:	86 a7       	std	Z+46, r24	; 0x2e
    25b6:	22 8d       	ldd	r18, Z+26	; 0x1a
    25b8:	95 a5       	ldd	r25, Z+45	; 0x2d
    25ba:	29 17       	cp	r18, r25
    25bc:	09 f4       	brne	.+2      	; 0x25c0 <xTaskPriorityDisinherit+0x20>
    25be:	43 c0       	rjmp	.+134    	; 0x2646 <xTaskPriorityDisinherit+0xa6>
    25c0:	81 11       	cpse	r24, r1
    25c2:	43 c0       	rjmp	.+134    	; 0x264a <xTaskPriorityDisinherit+0xaa>
    25c4:	ef 01       	movw	r28, r30
    25c6:	8f 01       	movw	r16, r30
    25c8:	0e 5f       	subi	r16, 0xFE	; 254
    25ca:	1f 4f       	sbci	r17, 0xFF	; 255
    25cc:	c8 01       	movw	r24, r16
    25ce:	0e 94 66 04 	call	0x8cc	; 0x8cc <uxListRemove>
    25d2:	ed a5       	ldd	r30, Y+45	; 0x2d
    25d4:	ea 8f       	std	Y+26, r30	; 0x1a
    25d6:	8a e0       	ldi	r24, 0x0A	; 10
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	a0 e0       	ldi	r26, 0x00	; 0
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	8e 1b       	sub	r24, r30
    25e0:	91 09       	sbc	r25, r1
    25e2:	a1 09       	sbc	r26, r1
    25e4:	b1 09       	sbc	r27, r1
    25e6:	8e 87       	std	Y+14, r24	; 0x0e
    25e8:	9f 87       	std	Y+15, r25	; 0x0f
    25ea:	a8 8b       	std	Y+16, r26	; 0x10
    25ec:	b9 8b       	std	Y+17, r27	; 0x11
    25ee:	80 91 69 15 	lds	r24, 0x1569	; 0x801569 <uxTopReadyPriority>
    25f2:	8e 17       	cp	r24, r30
    25f4:	10 f4       	brcc	.+4      	; 0x25fa <xTaskPriorityDisinherit+0x5a>
    25f6:	e0 93 69 15 	sts	0x1569, r30	; 0x801569 <uxTopReadyPriority>
    25fa:	8b e0       	ldi	r24, 0x0B	; 11
    25fc:	8e 9f       	mul	r24, r30
    25fe:	f0 01       	movw	r30, r0
    2600:	11 24       	eor	r1, r1
    2602:	e5 55       	subi	r30, 0x55	; 85
    2604:	fa 4e       	sbci	r31, 0xEA	; 234
    2606:	01 80       	ldd	r0, Z+1	; 0x01
    2608:	f2 81       	ldd	r31, Z+2	; 0x02
    260a:	e0 2d       	mov	r30, r0
    260c:	ff 83       	std	Y+7, r31	; 0x07
    260e:	ee 83       	std	Y+6, r30	; 0x06
    2610:	26 81       	ldd	r18, Z+6	; 0x06
    2612:	37 81       	ldd	r19, Z+7	; 0x07
    2614:	39 87       	std	Y+9, r19	; 0x09
    2616:	28 87       	std	Y+8, r18	; 0x08
    2618:	a6 81       	ldd	r26, Z+6	; 0x06
    261a:	b7 81       	ldd	r27, Z+7	; 0x07
    261c:	15 96       	adiw	r26, 0x05	; 5
    261e:	1c 93       	st	X, r17
    2620:	0e 93       	st	-X, r16
    2622:	14 97       	sbiw	r26, 0x04	; 4
    2624:	17 83       	std	Z+7, r17	; 0x07
    2626:	06 83       	std	Z+6, r16	; 0x06
    2628:	ea 8d       	ldd	r30, Y+26	; 0x1a
    262a:	8e 9f       	mul	r24, r30
    262c:	f0 01       	movw	r30, r0
    262e:	11 24       	eor	r1, r1
    2630:	e5 55       	subi	r30, 0x55	; 85
    2632:	fa 4e       	sbci	r31, 0xEA	; 234
    2634:	fd 87       	std	Y+13, r31	; 0x0d
    2636:	ec 87       	std	Y+12, r30	; 0x0c
    2638:	80 81       	ld	r24, Z
    263a:	8f 5f       	subi	r24, 0xFF	; 255
    263c:	80 83       	st	Z, r24
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	05 c0       	rjmp	.+10     	; 0x264c <xTaskPriorityDisinherit+0xac>
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	03 c0       	rjmp	.+6      	; 0x264c <xTaskPriorityDisinherit+0xac>
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	01 c0       	rjmp	.+2      	; 0x264c <xTaskPriorityDisinherit+0xac>
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	df 91       	pop	r29
    264e:	cf 91       	pop	r28
    2650:	1f 91       	pop	r17
    2652:	0f 91       	pop	r16
    2654:	08 95       	ret

00002656 <xTaskGenericNotifyWait>:
    2656:	4f 92       	push	r4
    2658:	5f 92       	push	r5
    265a:	6f 92       	push	r6
    265c:	7f 92       	push	r7
    265e:	af 92       	push	r10
    2660:	bf 92       	push	r11
    2662:	cf 92       	push	r12
    2664:	df 92       	push	r13
    2666:	ef 92       	push	r14
    2668:	ff 92       	push	r15
    266a:	0f 93       	push	r16
    266c:	1f 93       	push	r17
    266e:	cf 93       	push	r28
    2670:	df 93       	push	r29
    2672:	28 01       	movw	r4, r16
    2674:	39 01       	movw	r6, r18
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	f8 94       	cli
    267a:	0f 92       	push	r0
    267c:	e0 91 19 16 	lds	r30, 0x1619	; 0x801619 <pxCurrentTCB>
    2680:	f0 91 1a 16 	lds	r31, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    2684:	c8 2f       	mov	r28, r24
    2686:	d0 e0       	ldi	r29, 0x00	; 0
    2688:	ec 0f       	add	r30, r28
    268a:	fd 1f       	adc	r31, r29
    268c:	83 a9       	ldd	r24, Z+51	; 0x33
    268e:	82 30       	cpi	r24, 0x02	; 2
    2690:	71 f1       	breq	.+92     	; 0x26ee <xTaskGenericNotifyWait+0x98>
    2692:	e0 91 19 16 	lds	r30, 0x1619	; 0x801619 <pxCurrentTCB>
    2696:	f0 91 1a 16 	lds	r31, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    269a:	ce 01       	movw	r24, r28
    269c:	88 0f       	add	r24, r24
    269e:	99 1f       	adc	r25, r25
    26a0:	88 0f       	add	r24, r24
    26a2:	99 1f       	adc	r25, r25
    26a4:	e8 0f       	add	r30, r24
    26a6:	f9 1f       	adc	r31, r25
    26a8:	87 a5       	ldd	r24, Z+47	; 0x2f
    26aa:	90 a9       	ldd	r25, Z+48	; 0x30
    26ac:	a1 a9       	ldd	r26, Z+49	; 0x31
    26ae:	b2 a9       	ldd	r27, Z+50	; 0x32
    26b0:	40 95       	com	r20
    26b2:	50 95       	com	r21
    26b4:	60 95       	com	r22
    26b6:	70 95       	com	r23
    26b8:	48 23       	and	r20, r24
    26ba:	59 23       	and	r21, r25
    26bc:	6a 23       	and	r22, r26
    26be:	7b 23       	and	r23, r27
    26c0:	47 a7       	std	Z+47, r20	; 0x2f
    26c2:	50 ab       	std	Z+48, r21	; 0x30
    26c4:	61 ab       	std	Z+49, r22	; 0x31
    26c6:	72 ab       	std	Z+50, r23	; 0x32
    26c8:	e0 91 19 16 	lds	r30, 0x1619	; 0x801619 <pxCurrentTCB>
    26cc:	f0 91 1a 16 	lds	r31, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    26d0:	ec 0f       	add	r30, r28
    26d2:	fd 1f       	adc	r31, r29
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	83 ab       	std	Z+51, r24	; 0x33
    26d8:	a1 14       	cp	r10, r1
    26da:	b1 04       	cpc	r11, r1
    26dc:	c1 04       	cpc	r12, r1
    26de:	d1 04       	cpc	r13, r1
    26e0:	31 f0       	breq	.+12     	; 0x26ee <xTaskGenericNotifyWait+0x98>
    26e2:	41 e0       	ldi	r20, 0x01	; 1
    26e4:	c6 01       	movw	r24, r12
    26e6:	b5 01       	movw	r22, r10
    26e8:	88 d9       	rcall	.-3312   	; 0x19fa <prvAddCurrentTaskToDelayedList>
    26ea:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <vPortYield>
    26ee:	0f 90       	pop	r0
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	f8 94       	cli
    26f6:	0f 92       	push	r0
    26f8:	e1 14       	cp	r14, r1
    26fa:	f1 04       	cpc	r15, r1
    26fc:	a1 f0       	breq	.+40     	; 0x2726 <xTaskGenericNotifyWait+0xd0>
    26fe:	e0 91 19 16 	lds	r30, 0x1619	; 0x801619 <pxCurrentTCB>
    2702:	f0 91 1a 16 	lds	r31, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    2706:	ce 01       	movw	r24, r28
    2708:	88 0f       	add	r24, r24
    270a:	99 1f       	adc	r25, r25
    270c:	88 0f       	add	r24, r24
    270e:	99 1f       	adc	r25, r25
    2710:	e8 0f       	add	r30, r24
    2712:	f9 1f       	adc	r31, r25
    2714:	87 a5       	ldd	r24, Z+47	; 0x2f
    2716:	90 a9       	ldd	r25, Z+48	; 0x30
    2718:	a1 a9       	ldd	r26, Z+49	; 0x31
    271a:	b2 a9       	ldd	r27, Z+50	; 0x32
    271c:	f7 01       	movw	r30, r14
    271e:	80 83       	st	Z, r24
    2720:	91 83       	std	Z+1, r25	; 0x01
    2722:	a2 83       	std	Z+2, r26	; 0x02
    2724:	b3 83       	std	Z+3, r27	; 0x03
    2726:	e0 91 19 16 	lds	r30, 0x1619	; 0x801619 <pxCurrentTCB>
    272a:	f0 91 1a 16 	lds	r31, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    272e:	ec 0f       	add	r30, r28
    2730:	fd 1f       	adc	r31, r29
    2732:	83 a9       	ldd	r24, Z+51	; 0x33
    2734:	82 30       	cpi	r24, 0x02	; 2
    2736:	e9 f4       	brne	.+58     	; 0x2772 <xTaskGenericNotifyWait+0x11c>
    2738:	e0 91 19 16 	lds	r30, 0x1619	; 0x801619 <pxCurrentTCB>
    273c:	f0 91 1a 16 	lds	r31, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    2740:	ce 01       	movw	r24, r28
    2742:	88 0f       	add	r24, r24
    2744:	99 1f       	adc	r25, r25
    2746:	88 0f       	add	r24, r24
    2748:	99 1f       	adc	r25, r25
    274a:	e8 0f       	add	r30, r24
    274c:	f9 1f       	adc	r31, r25
    274e:	87 a5       	ldd	r24, Z+47	; 0x2f
    2750:	90 a9       	ldd	r25, Z+48	; 0x30
    2752:	a1 a9       	ldd	r26, Z+49	; 0x31
    2754:	b2 a9       	ldd	r27, Z+50	; 0x32
    2756:	40 94       	com	r4
    2758:	50 94       	com	r5
    275a:	60 94       	com	r6
    275c:	70 94       	com	r7
    275e:	48 22       	and	r4, r24
    2760:	59 22       	and	r5, r25
    2762:	6a 22       	and	r6, r26
    2764:	7b 22       	and	r7, r27
    2766:	47 a6       	std	Z+47, r4	; 0x2f
    2768:	50 aa       	std	Z+48, r5	; 0x30
    276a:	61 aa       	std	Z+49, r6	; 0x31
    276c:	72 aa       	std	Z+50, r7	; 0x32
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	01 c0       	rjmp	.+2      	; 0x2774 <xTaskGenericNotifyWait+0x11e>
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	20 91 19 16 	lds	r18, 0x1619	; 0x801619 <pxCurrentTCB>
    2778:	30 91 1a 16 	lds	r19, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    277c:	c2 0f       	add	r28, r18
    277e:	d3 1f       	adc	r29, r19
    2780:	1b aa       	std	Y+51, r1	; 0x33
    2782:	0f 90       	pop	r0
    2784:	0f be       	out	0x3f, r0	; 63
    2786:	df 91       	pop	r29
    2788:	cf 91       	pop	r28
    278a:	1f 91       	pop	r17
    278c:	0f 91       	pop	r16
    278e:	ff 90       	pop	r15
    2790:	ef 90       	pop	r14
    2792:	df 90       	pop	r13
    2794:	cf 90       	pop	r12
    2796:	bf 90       	pop	r11
    2798:	af 90       	pop	r10
    279a:	7f 90       	pop	r7
    279c:	6f 90       	pop	r6
    279e:	5f 90       	pop	r5
    27a0:	4f 90       	pop	r4
    27a2:	08 95       	ret

000027a4 <xTaskGenericNotify>:
    27a4:	8f 92       	push	r8
    27a6:	9f 92       	push	r9
    27a8:	af 92       	push	r10
    27aa:	bf 92       	push	r11
    27ac:	ef 92       	push	r14
    27ae:	ff 92       	push	r15
    27b0:	0f 93       	push	r16
    27b2:	cf 93       	push	r28
    27b4:	df 93       	push	r29
    27b6:	dc 01       	movw	r26, r24
    27b8:	0f b6       	in	r0, 0x3f	; 63
    27ba:	f8 94       	cli
    27bc:	0f 92       	push	r0
    27be:	e1 14       	cp	r14, r1
    27c0:	f1 04       	cpc	r15, r1
    27c2:	89 f0       	breq	.+34     	; 0x27e6 <xTaskGenericNotify+0x42>
    27c4:	e6 2f       	mov	r30, r22
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	ee 0f       	add	r30, r30
    27ca:	ff 1f       	adc	r31, r31
    27cc:	ee 0f       	add	r30, r30
    27ce:	ff 1f       	adc	r31, r31
    27d0:	e8 0f       	add	r30, r24
    27d2:	f9 1f       	adc	r31, r25
    27d4:	87 a4       	ldd	r8, Z+47	; 0x2f
    27d6:	90 a8       	ldd	r9, Z+48	; 0x30
    27d8:	a1 a8       	ldd	r10, Z+49	; 0x31
    27da:	b2 a8       	ldd	r11, Z+50	; 0x32
    27dc:	f7 01       	movw	r30, r14
    27de:	80 82       	st	Z, r8
    27e0:	91 82       	std	Z+1, r9	; 0x01
    27e2:	a2 82       	std	Z+2, r10	; 0x02
    27e4:	b3 82       	std	Z+3, r11	; 0x03
    27e6:	70 e0       	ldi	r23, 0x00	; 0
    27e8:	fd 01       	movw	r30, r26
    27ea:	e6 0f       	add	r30, r22
    27ec:	f7 1f       	adc	r31, r23
    27ee:	83 a9       	ldd	r24, Z+51	; 0x33
    27f0:	92 e0       	ldi	r25, 0x02	; 2
    27f2:	93 ab       	std	Z+51, r25	; 0x33
    27f4:	02 30       	cpi	r16, 0x02	; 2
    27f6:	01 f1       	breq	.+64     	; 0x2838 <xTaskGenericNotify+0x94>
    27f8:	18 f4       	brcc	.+6      	; 0x2800 <xTaskGenericNotify+0x5c>
    27fa:	01 30       	cpi	r16, 0x01	; 1
    27fc:	31 f0       	breq	.+12     	; 0x280a <xTaskGenericNotify+0x66>
    27fe:	4d c0       	rjmp	.+154    	; 0x289a <xTaskGenericNotify+0xf6>
    2800:	03 30       	cpi	r16, 0x03	; 3
    2802:	79 f1       	breq	.+94     	; 0x2862 <xTaskGenericNotify+0xbe>
    2804:	04 30       	cpi	r16, 0x04	; 4
    2806:	d1 f1       	breq	.+116    	; 0x287c <xTaskGenericNotify+0xd8>
    2808:	48 c0       	rjmp	.+144    	; 0x289a <xTaskGenericNotify+0xf6>
    280a:	66 0f       	add	r22, r22
    280c:	77 1f       	adc	r23, r23
    280e:	66 0f       	add	r22, r22
    2810:	77 1f       	adc	r23, r23
    2812:	fd 01       	movw	r30, r26
    2814:	e6 0f       	add	r30, r22
    2816:	f7 1f       	adc	r31, r23
    2818:	87 a4       	ldd	r8, Z+47	; 0x2f
    281a:	90 a8       	ldd	r9, Z+48	; 0x30
    281c:	a1 a8       	ldd	r10, Z+49	; 0x31
    281e:	b2 a8       	ldd	r11, Z+50	; 0x32
    2820:	ba 01       	movw	r22, r20
    2822:	a9 01       	movw	r20, r18
    2824:	48 29       	or	r20, r8
    2826:	59 29       	or	r21, r9
    2828:	6a 29       	or	r22, r10
    282a:	7b 29       	or	r23, r11
    282c:	47 a7       	std	Z+47, r20	; 0x2f
    282e:	50 ab       	std	Z+48, r21	; 0x30
    2830:	61 ab       	std	Z+49, r22	; 0x31
    2832:	72 ab       	std	Z+50, r23	; 0x32
    2834:	01 e0       	ldi	r16, 0x01	; 1
    2836:	34 c0       	rjmp	.+104    	; 0x28a0 <xTaskGenericNotify+0xfc>
    2838:	66 0f       	add	r22, r22
    283a:	77 1f       	adc	r23, r23
    283c:	66 0f       	add	r22, r22
    283e:	77 1f       	adc	r23, r23
    2840:	fd 01       	movw	r30, r26
    2842:	e6 0f       	add	r30, r22
    2844:	f7 1f       	adc	r31, r23
    2846:	47 a5       	ldd	r20, Z+47	; 0x2f
    2848:	50 a9       	ldd	r21, Z+48	; 0x30
    284a:	61 a9       	ldd	r22, Z+49	; 0x31
    284c:	72 a9       	ldd	r23, Z+50	; 0x32
    284e:	4f 5f       	subi	r20, 0xFF	; 255
    2850:	5f 4f       	sbci	r21, 0xFF	; 255
    2852:	6f 4f       	sbci	r22, 0xFF	; 255
    2854:	7f 4f       	sbci	r23, 0xFF	; 255
    2856:	47 a7       	std	Z+47, r20	; 0x2f
    2858:	50 ab       	std	Z+48, r21	; 0x30
    285a:	61 ab       	std	Z+49, r22	; 0x31
    285c:	72 ab       	std	Z+50, r23	; 0x32
    285e:	01 e0       	ldi	r16, 0x01	; 1
    2860:	1f c0       	rjmp	.+62     	; 0x28a0 <xTaskGenericNotify+0xfc>
    2862:	66 0f       	add	r22, r22
    2864:	77 1f       	adc	r23, r23
    2866:	66 0f       	add	r22, r22
    2868:	77 1f       	adc	r23, r23
    286a:	fd 01       	movw	r30, r26
    286c:	e6 0f       	add	r30, r22
    286e:	f7 1f       	adc	r31, r23
    2870:	27 a7       	std	Z+47, r18	; 0x2f
    2872:	30 ab       	std	Z+48, r19	; 0x30
    2874:	41 ab       	std	Z+49, r20	; 0x31
    2876:	52 ab       	std	Z+50, r21	; 0x32
    2878:	01 e0       	ldi	r16, 0x01	; 1
    287a:	12 c0       	rjmp	.+36     	; 0x28a0 <xTaskGenericNotify+0xfc>
    287c:	82 30       	cpi	r24, 0x02	; 2
    287e:	79 f0       	breq	.+30     	; 0x289e <xTaskGenericNotify+0xfa>
    2880:	66 0f       	add	r22, r22
    2882:	77 1f       	adc	r23, r23
    2884:	66 0f       	add	r22, r22
    2886:	77 1f       	adc	r23, r23
    2888:	fd 01       	movw	r30, r26
    288a:	e6 0f       	add	r30, r22
    288c:	f7 1f       	adc	r31, r23
    288e:	27 a7       	std	Z+47, r18	; 0x2f
    2890:	30 ab       	std	Z+48, r19	; 0x30
    2892:	41 ab       	std	Z+49, r20	; 0x31
    2894:	52 ab       	std	Z+50, r21	; 0x32
    2896:	01 e0       	ldi	r16, 0x01	; 1
    2898:	03 c0       	rjmp	.+6      	; 0x28a0 <xTaskGenericNotify+0xfc>
    289a:	01 e0       	ldi	r16, 0x01	; 1
    289c:	01 c0       	rjmp	.+2      	; 0x28a0 <xTaskGenericNotify+0xfc>
    289e:	00 e0       	ldi	r16, 0x00	; 0
    28a0:	81 30       	cpi	r24, 0x01	; 1
    28a2:	09 f0       	breq	.+2      	; 0x28a6 <xTaskGenericNotify+0x102>
    28a4:	69 c0       	rjmp	.+210    	; 0x2978 <xTaskGenericNotify+0x1d4>
    28a6:	1c 96       	adiw	r26, 0x0c	; 12
    28a8:	ed 91       	ld	r30, X+
    28aa:	fc 91       	ld	r31, X
    28ac:	1d 97       	sbiw	r26, 0x0d	; 13
    28ae:	16 96       	adiw	r26, 0x06	; 6
    28b0:	cd 91       	ld	r28, X+
    28b2:	dc 91       	ld	r29, X
    28b4:	17 97       	sbiw	r26, 0x07	; 7
    28b6:	18 96       	adiw	r26, 0x08	; 8
    28b8:	8d 91       	ld	r24, X+
    28ba:	9c 91       	ld	r25, X
    28bc:	19 97       	sbiw	r26, 0x09	; 9
    28be:	9f 83       	std	Y+7, r25	; 0x07
    28c0:	8e 83       	std	Y+6, r24	; 0x06
    28c2:	18 96       	adiw	r26, 0x08	; 8
    28c4:	cd 91       	ld	r28, X+
    28c6:	dc 91       	ld	r29, X
    28c8:	19 97       	sbiw	r26, 0x09	; 9
    28ca:	16 96       	adiw	r26, 0x06	; 6
    28cc:	8d 91       	ld	r24, X+
    28ce:	9c 91       	ld	r25, X
    28d0:	17 97       	sbiw	r26, 0x07	; 7
    28d2:	9d 83       	std	Y+5, r25	; 0x05
    28d4:	8c 83       	std	Y+4, r24	; 0x04
    28d6:	81 81       	ldd	r24, Z+1	; 0x01
    28d8:	92 81       	ldd	r25, Z+2	; 0x02
    28da:	9d 01       	movw	r18, r26
    28dc:	2e 5f       	subi	r18, 0xFE	; 254
    28de:	3f 4f       	sbci	r19, 0xFF	; 255
    28e0:	82 17       	cp	r24, r18
    28e2:	93 07       	cpc	r25, r19
    28e4:	31 f4       	brne	.+12     	; 0x28f2 <xTaskGenericNotify+0x14e>
    28e6:	18 96       	adiw	r26, 0x08	; 8
    28e8:	8d 91       	ld	r24, X+
    28ea:	9c 91       	ld	r25, X
    28ec:	19 97       	sbiw	r26, 0x09	; 9
    28ee:	92 83       	std	Z+2, r25	; 0x02
    28f0:	81 83       	std	Z+1, r24	; 0x01
    28f2:	1d 96       	adiw	r26, 0x0d	; 13
    28f4:	1c 92       	st	X, r1
    28f6:	1e 92       	st	-X, r1
    28f8:	1c 97       	sbiw	r26, 0x0c	; 12
    28fa:	80 81       	ld	r24, Z
    28fc:	81 50       	subi	r24, 0x01	; 1
    28fe:	80 83       	st	Z, r24
    2900:	5a 96       	adiw	r26, 0x1a	; 26
    2902:	ec 91       	ld	r30, X
    2904:	5a 97       	sbiw	r26, 0x1a	; 26
    2906:	80 91 69 15 	lds	r24, 0x1569	; 0x801569 <uxTopReadyPriority>
    290a:	8e 17       	cp	r24, r30
    290c:	10 f4       	brcc	.+4      	; 0x2912 <xTaskGenericNotify+0x16e>
    290e:	e0 93 69 15 	sts	0x1569, r30	; 0x801569 <uxTopReadyPriority>
    2912:	8b e0       	ldi	r24, 0x0B	; 11
    2914:	8e 9f       	mul	r24, r30
    2916:	f0 01       	movw	r30, r0
    2918:	11 24       	eor	r1, r1
    291a:	e5 55       	subi	r30, 0x55	; 85
    291c:	fa 4e       	sbci	r31, 0xEA	; 234
    291e:	01 80       	ldd	r0, Z+1	; 0x01
    2920:	f2 81       	ldd	r31, Z+2	; 0x02
    2922:	e0 2d       	mov	r30, r0
    2924:	17 96       	adiw	r26, 0x07	; 7
    2926:	fc 93       	st	X, r31
    2928:	ee 93       	st	-X, r30
    292a:	16 97       	sbiw	r26, 0x06	; 6
    292c:	46 81       	ldd	r20, Z+6	; 0x06
    292e:	57 81       	ldd	r21, Z+7	; 0x07
    2930:	19 96       	adiw	r26, 0x09	; 9
    2932:	5c 93       	st	X, r21
    2934:	4e 93       	st	-X, r20
    2936:	18 97       	sbiw	r26, 0x08	; 8
    2938:	c6 81       	ldd	r28, Z+6	; 0x06
    293a:	d7 81       	ldd	r29, Z+7	; 0x07
    293c:	3d 83       	std	Y+5, r19	; 0x05
    293e:	2c 83       	std	Y+4, r18	; 0x04
    2940:	37 83       	std	Z+7, r19	; 0x07
    2942:	26 83       	std	Z+6, r18	; 0x06
    2944:	5a 96       	adiw	r26, 0x1a	; 26
    2946:	ec 91       	ld	r30, X
    2948:	5a 97       	sbiw	r26, 0x1a	; 26
    294a:	8e 9f       	mul	r24, r30
    294c:	f0 01       	movw	r30, r0
    294e:	11 24       	eor	r1, r1
    2950:	e5 55       	subi	r30, 0x55	; 85
    2952:	fa 4e       	sbci	r31, 0xEA	; 234
    2954:	1d 96       	adiw	r26, 0x0d	; 13
    2956:	fc 93       	st	X, r31
    2958:	ee 93       	st	-X, r30
    295a:	1c 97       	sbiw	r26, 0x0c	; 12
    295c:	80 81       	ld	r24, Z
    295e:	8f 5f       	subi	r24, 0xFF	; 255
    2960:	80 83       	st	Z, r24
    2962:	5a 96       	adiw	r26, 0x1a	; 26
    2964:	9c 91       	ld	r25, X
    2966:	e0 91 19 16 	lds	r30, 0x1619	; 0x801619 <pxCurrentTCB>
    296a:	f0 91 1a 16 	lds	r31, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    296e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2970:	89 17       	cp	r24, r25
    2972:	10 f4       	brcc	.+4      	; 0x2978 <xTaskGenericNotify+0x1d4>
    2974:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <vPortYield>
    2978:	0f 90       	pop	r0
    297a:	0f be       	out	0x3f, r0	; 63
    297c:	80 2f       	mov	r24, r16
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
    2982:	0f 91       	pop	r16
    2984:	ff 90       	pop	r15
    2986:	ef 90       	pop	r14
    2988:	bf 90       	pop	r11
    298a:	af 90       	pop	r10
    298c:	9f 90       	pop	r9
    298e:	8f 90       	pop	r8
    2990:	08 95       	ret

00002992 <xTaskGenericNotifyFromISR>:
    2992:	8f 92       	push	r8
    2994:	9f 92       	push	r9
    2996:	af 92       	push	r10
    2998:	bf 92       	push	r11
    299a:	cf 92       	push	r12
    299c:	df 92       	push	r13
    299e:	ef 92       	push	r14
    29a0:	ff 92       	push	r15
    29a2:	0f 93       	push	r16
    29a4:	cf 93       	push	r28
    29a6:	df 93       	push	r29
    29a8:	dc 01       	movw	r26, r24
    29aa:	e1 14       	cp	r14, r1
    29ac:	f1 04       	cpc	r15, r1
    29ae:	89 f0       	breq	.+34     	; 0x29d2 <xTaskGenericNotifyFromISR+0x40>
    29b0:	e6 2f       	mov	r30, r22
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	ee 0f       	add	r30, r30
    29b6:	ff 1f       	adc	r31, r31
    29b8:	ee 0f       	add	r30, r30
    29ba:	ff 1f       	adc	r31, r31
    29bc:	e8 0f       	add	r30, r24
    29be:	f9 1f       	adc	r31, r25
    29c0:	87 a4       	ldd	r8, Z+47	; 0x2f
    29c2:	90 a8       	ldd	r9, Z+48	; 0x30
    29c4:	a1 a8       	ldd	r10, Z+49	; 0x31
    29c6:	b2 a8       	ldd	r11, Z+50	; 0x32
    29c8:	f7 01       	movw	r30, r14
    29ca:	80 82       	st	Z, r8
    29cc:	91 82       	std	Z+1, r9	; 0x01
    29ce:	a2 82       	std	Z+2, r10	; 0x02
    29d0:	b3 82       	std	Z+3, r11	; 0x03
    29d2:	70 e0       	ldi	r23, 0x00	; 0
    29d4:	fd 01       	movw	r30, r26
    29d6:	e6 0f       	add	r30, r22
    29d8:	f7 1f       	adc	r31, r23
    29da:	93 a9       	ldd	r25, Z+51	; 0x33
    29dc:	82 e0       	ldi	r24, 0x02	; 2
    29de:	83 ab       	std	Z+51, r24	; 0x33
    29e0:	02 30       	cpi	r16, 0x02	; 2
    29e2:	01 f1       	breq	.+64     	; 0x2a24 <xTaskGenericNotifyFromISR+0x92>
    29e4:	18 f4       	brcc	.+6      	; 0x29ec <xTaskGenericNotifyFromISR+0x5a>
    29e6:	01 30       	cpi	r16, 0x01	; 1
    29e8:	31 f0       	breq	.+12     	; 0x29f6 <xTaskGenericNotifyFromISR+0x64>
    29ea:	4d c0       	rjmp	.+154    	; 0x2a86 <xTaskGenericNotifyFromISR+0xf4>
    29ec:	03 30       	cpi	r16, 0x03	; 3
    29ee:	79 f1       	breq	.+94     	; 0x2a4e <xTaskGenericNotifyFromISR+0xbc>
    29f0:	04 30       	cpi	r16, 0x04	; 4
    29f2:	d1 f1       	breq	.+116    	; 0x2a68 <xTaskGenericNotifyFromISR+0xd6>
    29f4:	48 c0       	rjmp	.+144    	; 0x2a86 <xTaskGenericNotifyFromISR+0xf4>
    29f6:	66 0f       	add	r22, r22
    29f8:	77 1f       	adc	r23, r23
    29fa:	66 0f       	add	r22, r22
    29fc:	77 1f       	adc	r23, r23
    29fe:	fd 01       	movw	r30, r26
    2a00:	e6 0f       	add	r30, r22
    2a02:	f7 1f       	adc	r31, r23
    2a04:	87 a4       	ldd	r8, Z+47	; 0x2f
    2a06:	90 a8       	ldd	r9, Z+48	; 0x30
    2a08:	a1 a8       	ldd	r10, Z+49	; 0x31
    2a0a:	b2 a8       	ldd	r11, Z+50	; 0x32
    2a0c:	ba 01       	movw	r22, r20
    2a0e:	a9 01       	movw	r20, r18
    2a10:	48 29       	or	r20, r8
    2a12:	59 29       	or	r21, r9
    2a14:	6a 29       	or	r22, r10
    2a16:	7b 29       	or	r23, r11
    2a18:	47 a7       	std	Z+47, r20	; 0x2f
    2a1a:	50 ab       	std	Z+48, r21	; 0x30
    2a1c:	61 ab       	std	Z+49, r22	; 0x31
    2a1e:	72 ab       	std	Z+50, r23	; 0x32
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	34 c0       	rjmp	.+104    	; 0x2a8c <xTaskGenericNotifyFromISR+0xfa>
    2a24:	66 0f       	add	r22, r22
    2a26:	77 1f       	adc	r23, r23
    2a28:	66 0f       	add	r22, r22
    2a2a:	77 1f       	adc	r23, r23
    2a2c:	fd 01       	movw	r30, r26
    2a2e:	e6 0f       	add	r30, r22
    2a30:	f7 1f       	adc	r31, r23
    2a32:	47 a5       	ldd	r20, Z+47	; 0x2f
    2a34:	50 a9       	ldd	r21, Z+48	; 0x30
    2a36:	61 a9       	ldd	r22, Z+49	; 0x31
    2a38:	72 a9       	ldd	r23, Z+50	; 0x32
    2a3a:	4f 5f       	subi	r20, 0xFF	; 255
    2a3c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a3e:	6f 4f       	sbci	r22, 0xFF	; 255
    2a40:	7f 4f       	sbci	r23, 0xFF	; 255
    2a42:	47 a7       	std	Z+47, r20	; 0x2f
    2a44:	50 ab       	std	Z+48, r21	; 0x30
    2a46:	61 ab       	std	Z+49, r22	; 0x31
    2a48:	72 ab       	std	Z+50, r23	; 0x32
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	1f c0       	rjmp	.+62     	; 0x2a8c <xTaskGenericNotifyFromISR+0xfa>
    2a4e:	66 0f       	add	r22, r22
    2a50:	77 1f       	adc	r23, r23
    2a52:	66 0f       	add	r22, r22
    2a54:	77 1f       	adc	r23, r23
    2a56:	fd 01       	movw	r30, r26
    2a58:	e6 0f       	add	r30, r22
    2a5a:	f7 1f       	adc	r31, r23
    2a5c:	27 a7       	std	Z+47, r18	; 0x2f
    2a5e:	30 ab       	std	Z+48, r19	; 0x30
    2a60:	41 ab       	std	Z+49, r20	; 0x31
    2a62:	52 ab       	std	Z+50, r21	; 0x32
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	12 c0       	rjmp	.+36     	; 0x2a8c <xTaskGenericNotifyFromISR+0xfa>
    2a68:	92 30       	cpi	r25, 0x02	; 2
    2a6a:	79 f0       	breq	.+30     	; 0x2a8a <xTaskGenericNotifyFromISR+0xf8>
    2a6c:	66 0f       	add	r22, r22
    2a6e:	77 1f       	adc	r23, r23
    2a70:	66 0f       	add	r22, r22
    2a72:	77 1f       	adc	r23, r23
    2a74:	fd 01       	movw	r30, r26
    2a76:	e6 0f       	add	r30, r22
    2a78:	f7 1f       	adc	r31, r23
    2a7a:	27 a7       	std	Z+47, r18	; 0x2f
    2a7c:	30 ab       	std	Z+48, r19	; 0x30
    2a7e:	41 ab       	std	Z+49, r20	; 0x31
    2a80:	52 ab       	std	Z+50, r21	; 0x32
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	03 c0       	rjmp	.+6      	; 0x2a8c <xTaskGenericNotifyFromISR+0xfa>
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	01 c0       	rjmp	.+2      	; 0x2a8c <xTaskGenericNotifyFromISR+0xfa>
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	91 30       	cpi	r25, 0x01	; 1
    2a8e:	09 f0       	breq	.+2      	; 0x2a92 <xTaskGenericNotifyFromISR+0x100>
    2a90:	96 c0       	rjmp	.+300    	; 0x2bbe <xTaskGenericNotifyFromISR+0x22c>
    2a92:	90 91 5a 15 	lds	r25, 0x155A	; 0x80155a <uxSchedulerSuspended>
    2a96:	91 11       	cpse	r25, r1
    2a98:	5f c0       	rjmp	.+190    	; 0x2b58 <xTaskGenericNotifyFromISR+0x1c6>
    2a9a:	1c 96       	adiw	r26, 0x0c	; 12
    2a9c:	ed 91       	ld	r30, X+
    2a9e:	fc 91       	ld	r31, X
    2aa0:	1d 97       	sbiw	r26, 0x0d	; 13
    2aa2:	16 96       	adiw	r26, 0x06	; 6
    2aa4:	cd 91       	ld	r28, X+
    2aa6:	dc 91       	ld	r29, X
    2aa8:	17 97       	sbiw	r26, 0x07	; 7
    2aaa:	18 96       	adiw	r26, 0x08	; 8
    2aac:	2d 91       	ld	r18, X+
    2aae:	3c 91       	ld	r19, X
    2ab0:	19 97       	sbiw	r26, 0x09	; 9
    2ab2:	3f 83       	std	Y+7, r19	; 0x07
    2ab4:	2e 83       	std	Y+6, r18	; 0x06
    2ab6:	18 96       	adiw	r26, 0x08	; 8
    2ab8:	cd 91       	ld	r28, X+
    2aba:	dc 91       	ld	r29, X
    2abc:	19 97       	sbiw	r26, 0x09	; 9
    2abe:	16 96       	adiw	r26, 0x06	; 6
    2ac0:	2d 91       	ld	r18, X+
    2ac2:	3c 91       	ld	r19, X
    2ac4:	17 97       	sbiw	r26, 0x07	; 7
    2ac6:	3d 83       	std	Y+5, r19	; 0x05
    2ac8:	2c 83       	std	Y+4, r18	; 0x04
    2aca:	41 81       	ldd	r20, Z+1	; 0x01
    2acc:	52 81       	ldd	r21, Z+2	; 0x02
    2ace:	9d 01       	movw	r18, r26
    2ad0:	2e 5f       	subi	r18, 0xFE	; 254
    2ad2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad4:	42 17       	cp	r20, r18
    2ad6:	53 07       	cpc	r21, r19
    2ad8:	31 f4       	brne	.+12     	; 0x2ae6 <xTaskGenericNotifyFromISR+0x154>
    2ada:	18 96       	adiw	r26, 0x08	; 8
    2adc:	4d 91       	ld	r20, X+
    2ade:	5c 91       	ld	r21, X
    2ae0:	19 97       	sbiw	r26, 0x09	; 9
    2ae2:	52 83       	std	Z+2, r21	; 0x02
    2ae4:	41 83       	std	Z+1, r20	; 0x01
    2ae6:	1d 96       	adiw	r26, 0x0d	; 13
    2ae8:	1c 92       	st	X, r1
    2aea:	1e 92       	st	-X, r1
    2aec:	1c 97       	sbiw	r26, 0x0c	; 12
    2aee:	90 81       	ld	r25, Z
    2af0:	91 50       	subi	r25, 0x01	; 1
    2af2:	90 83       	st	Z, r25
    2af4:	5a 96       	adiw	r26, 0x1a	; 26
    2af6:	ec 91       	ld	r30, X
    2af8:	5a 97       	sbiw	r26, 0x1a	; 26
    2afa:	90 91 69 15 	lds	r25, 0x1569	; 0x801569 <uxTopReadyPriority>
    2afe:	9e 17       	cp	r25, r30
    2b00:	10 f4       	brcc	.+4      	; 0x2b06 <xTaskGenericNotifyFromISR+0x174>
    2b02:	e0 93 69 15 	sts	0x1569, r30	; 0x801569 <uxTopReadyPriority>
    2b06:	9b e0       	ldi	r25, 0x0B	; 11
    2b08:	9e 9f       	mul	r25, r30
    2b0a:	f0 01       	movw	r30, r0
    2b0c:	11 24       	eor	r1, r1
    2b0e:	e5 55       	subi	r30, 0x55	; 85
    2b10:	fa 4e       	sbci	r31, 0xEA	; 234
    2b12:	01 80       	ldd	r0, Z+1	; 0x01
    2b14:	f2 81       	ldd	r31, Z+2	; 0x02
    2b16:	e0 2d       	mov	r30, r0
    2b18:	17 96       	adiw	r26, 0x07	; 7
    2b1a:	fc 93       	st	X, r31
    2b1c:	ee 93       	st	-X, r30
    2b1e:	16 97       	sbiw	r26, 0x06	; 6
    2b20:	46 81       	ldd	r20, Z+6	; 0x06
    2b22:	57 81       	ldd	r21, Z+7	; 0x07
    2b24:	19 96       	adiw	r26, 0x09	; 9
    2b26:	5c 93       	st	X, r21
    2b28:	4e 93       	st	-X, r20
    2b2a:	18 97       	sbiw	r26, 0x08	; 8
    2b2c:	c6 81       	ldd	r28, Z+6	; 0x06
    2b2e:	d7 81       	ldd	r29, Z+7	; 0x07
    2b30:	3d 83       	std	Y+5, r19	; 0x05
    2b32:	2c 83       	std	Y+4, r18	; 0x04
    2b34:	37 83       	std	Z+7, r19	; 0x07
    2b36:	26 83       	std	Z+6, r18	; 0x06
    2b38:	5a 96       	adiw	r26, 0x1a	; 26
    2b3a:	ec 91       	ld	r30, X
    2b3c:	5a 97       	sbiw	r26, 0x1a	; 26
    2b3e:	9e 9f       	mul	r25, r30
    2b40:	f0 01       	movw	r30, r0
    2b42:	11 24       	eor	r1, r1
    2b44:	e5 55       	subi	r30, 0x55	; 85
    2b46:	fa 4e       	sbci	r31, 0xEA	; 234
    2b48:	1d 96       	adiw	r26, 0x0d	; 13
    2b4a:	fc 93       	st	X, r31
    2b4c:	ee 93       	st	-X, r30
    2b4e:	1c 97       	sbiw	r26, 0x0c	; 12
    2b50:	90 81       	ld	r25, Z
    2b52:	9f 5f       	subi	r25, 0xFF	; 255
    2b54:	90 83       	st	Z, r25
    2b56:	21 c0       	rjmp	.+66     	; 0x2b9a <xTaskGenericNotifyFromISR+0x208>
    2b58:	66 e8       	ldi	r22, 0x86	; 134
    2b5a:	75 e1       	ldi	r23, 0x15	; 21
    2b5c:	fb 01       	movw	r30, r22
    2b5e:	c1 81       	ldd	r28, Z+1	; 0x01
    2b60:	d2 81       	ldd	r29, Z+2	; 0x02
    2b62:	53 96       	adiw	r26, 0x13	; 19
    2b64:	dc 93       	st	X, r29
    2b66:	ce 93       	st	-X, r28
    2b68:	52 97       	sbiw	r26, 0x12	; 18
    2b6a:	2e 81       	ldd	r18, Y+6	; 0x06
    2b6c:	3f 81       	ldd	r19, Y+7	; 0x07
    2b6e:	55 96       	adiw	r26, 0x15	; 21
    2b70:	3c 93       	st	X, r19
    2b72:	2e 93       	st	-X, r18
    2b74:	54 97       	sbiw	r26, 0x14	; 20
    2b76:	4e 81       	ldd	r20, Y+6	; 0x06
    2b78:	5f 81       	ldd	r21, Y+7	; 0x07
    2b7a:	9d 01       	movw	r18, r26
    2b7c:	22 5f       	subi	r18, 0xF2	; 242
    2b7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b80:	fa 01       	movw	r30, r20
    2b82:	35 83       	std	Z+5, r19	; 0x05
    2b84:	24 83       	std	Z+4, r18	; 0x04
    2b86:	3f 83       	std	Y+7, r19	; 0x07
    2b88:	2e 83       	std	Y+6, r18	; 0x06
    2b8a:	59 96       	adiw	r26, 0x19	; 25
    2b8c:	7c 93       	st	X, r23
    2b8e:	6e 93       	st	-X, r22
    2b90:	58 97       	sbiw	r26, 0x18	; 24
    2b92:	fb 01       	movw	r30, r22
    2b94:	90 81       	ld	r25, Z
    2b96:	9f 5f       	subi	r25, 0xFF	; 255
    2b98:	90 83       	st	Z, r25
    2b9a:	5a 96       	adiw	r26, 0x1a	; 26
    2b9c:	2c 91       	ld	r18, X
    2b9e:	e0 91 19 16 	lds	r30, 0x1619	; 0x801619 <pxCurrentTCB>
    2ba2:	f0 91 1a 16 	lds	r31, 0x161A	; 0x80161a <pxCurrentTCB+0x1>
    2ba6:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ba8:	92 17       	cp	r25, r18
    2baa:	48 f4       	brcc	.+18     	; 0x2bbe <xTaskGenericNotifyFromISR+0x22c>
    2bac:	c1 14       	cp	r12, r1
    2bae:	d1 04       	cpc	r13, r1
    2bb0:	19 f0       	breq	.+6      	; 0x2bb8 <xTaskGenericNotifyFromISR+0x226>
    2bb2:	91 e0       	ldi	r25, 0x01	; 1
    2bb4:	f6 01       	movw	r30, r12
    2bb6:	90 83       	st	Z, r25
    2bb8:	91 e0       	ldi	r25, 0x01	; 1
    2bba:	90 93 63 15 	sts	0x1563, r25	; 0x801563 <xYieldPending>
    2bbe:	df 91       	pop	r29
    2bc0:	cf 91       	pop	r28
    2bc2:	0f 91       	pop	r16
    2bc4:	ff 90       	pop	r15
    2bc6:	ef 90       	pop	r14
    2bc8:	df 90       	pop	r13
    2bca:	cf 90       	pop	r12
    2bcc:	bf 90       	pop	r11
    2bce:	af 90       	pop	r10
    2bd0:	9f 90       	pop	r9
    2bd2:	8f 90       	pop	r8
    2bd4:	08 95       	ret

00002bd6 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2bd6:	00 97       	sbiw	r24, 0x00	; 0
    2bd8:	21 f4       	brne	.+8      	; 0x2be2 <xTaskGenericNotifyStateClear+0xc>
    2bda:	80 91 19 16 	lds	r24, 0x1619	; 0x801619 <pxCurrentTCB>
    2bde:	90 91 1a 16 	lds	r25, 0x161A	; 0x80161a <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2be2:	0f b6       	in	r0, 0x3f	; 63
    2be4:	f8 94       	cli
    2be6:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2be8:	70 e0       	ldi	r23, 0x00	; 0
    2bea:	fc 01       	movw	r30, r24
    2bec:	e6 0f       	add	r30, r22
    2bee:	f7 1f       	adc	r31, r23
    2bf0:	23 a9       	ldd	r18, Z+51	; 0x33
    2bf2:	22 30       	cpi	r18, 0x02	; 2
    2bf4:	31 f4       	brne	.+12     	; 0x2c02 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2bf6:	fc 01       	movw	r30, r24
    2bf8:	e6 0f       	add	r30, r22
    2bfa:	f7 1f       	adc	r31, r23
    2bfc:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	01 c0       	rjmp	.+2      	; 0x2c04 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2c02:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2c04:	0f 90       	pop	r0
    2c06:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2c08:	08 95       	ret

00002c0a <prvGetNextExpireTime>:
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	e0 91 25 16 	lds	r30, 0x1625	; 0x801625 <pxCurrentTimerList>
    2c10:	f0 91 26 16 	lds	r31, 0x1626	; 0x801626 <pxCurrentTimerList+0x1>
    2c14:	80 81       	ld	r24, Z
    2c16:	91 e0       	ldi	r25, 0x01	; 1
    2c18:	81 11       	cpse	r24, r1
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	9c 93       	st	X, r25
    2c1e:	91 11       	cpse	r25, r1
    2c20:	08 c0       	rjmp	.+16     	; 0x2c32 <prvGetNextExpireTime+0x28>
    2c22:	07 80       	ldd	r0, Z+7	; 0x07
    2c24:	f0 85       	ldd	r31, Z+8	; 0x08
    2c26:	e0 2d       	mov	r30, r0
    2c28:	60 81       	ld	r22, Z
    2c2a:	71 81       	ldd	r23, Z+1	; 0x01
    2c2c:	82 81       	ldd	r24, Z+2	; 0x02
    2c2e:	93 81       	ldd	r25, Z+3	; 0x03
    2c30:	08 95       	ret
    2c32:	60 e0       	ldi	r22, 0x00	; 0
    2c34:	70 e0       	ldi	r23, 0x00	; 0
    2c36:	cb 01       	movw	r24, r22
    2c38:	08 95       	ret

00002c3a <prvInsertTimerInActiveList>:
    2c3a:	cf 92       	push	r12
    2c3c:	df 92       	push	r13
    2c3e:	ef 92       	push	r14
    2c40:	ff 92       	push	r15
    2c42:	0f 93       	push	r16
    2c44:	1f 93       	push	r17
    2c46:	fc 01       	movw	r30, r24
    2c48:	42 83       	std	Z+2, r20	; 0x02
    2c4a:	53 83       	std	Z+3, r21	; 0x03
    2c4c:	64 83       	std	Z+4, r22	; 0x04
    2c4e:	75 83       	std	Z+5, r23	; 0x05
    2c50:	93 87       	std	Z+11, r25	; 0x0b
    2c52:	82 87       	std	Z+10, r24	; 0x0a
    2c54:	04 17       	cp	r16, r20
    2c56:	15 07       	cpc	r17, r21
    2c58:	26 07       	cpc	r18, r22
    2c5a:	37 07       	cpc	r19, r23
    2c5c:	c0 f0       	brcs	.+48     	; 0x2c8e <prvInsertTimerInActiveList+0x54>
    2c5e:	0c 19       	sub	r16, r12
    2c60:	1d 09       	sbc	r17, r13
    2c62:	2e 09       	sbc	r18, r14
    2c64:	3f 09       	sbc	r19, r15
    2c66:	86 85       	ldd	r24, Z+14	; 0x0e
    2c68:	97 85       	ldd	r25, Z+15	; 0x0f
    2c6a:	a0 89       	ldd	r26, Z+16	; 0x10
    2c6c:	b1 89       	ldd	r27, Z+17	; 0x11
    2c6e:	08 17       	cp	r16, r24
    2c70:	19 07       	cpc	r17, r25
    2c72:	2a 07       	cpc	r18, r26
    2c74:	3b 07       	cpc	r19, r27
    2c76:	00 f5       	brcc	.+64     	; 0x2cb8 <prvInsertTimerInActiveList+0x7e>
    2c78:	bf 01       	movw	r22, r30
    2c7a:	6e 5f       	subi	r22, 0xFE	; 254
    2c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c7e:	80 91 23 16 	lds	r24, 0x1623	; 0x801623 <pxOverflowTimerList>
    2c82:	90 91 24 16 	lds	r25, 0x1624	; 0x801624 <pxOverflowTimerList+0x1>
    2c86:	0e 94 29 04 	call	0x852	; 0x852 <vListInsert>
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	18 c0       	rjmp	.+48     	; 0x2cbe <prvInsertTimerInActiveList+0x84>
    2c8e:	0c 15       	cp	r16, r12
    2c90:	1d 05       	cpc	r17, r13
    2c92:	2e 05       	cpc	r18, r14
    2c94:	3f 05       	cpc	r19, r15
    2c96:	28 f4       	brcc	.+10     	; 0x2ca2 <prvInsertTimerInActiveList+0x68>
    2c98:	4c 15       	cp	r20, r12
    2c9a:	5d 05       	cpc	r21, r13
    2c9c:	6e 05       	cpc	r22, r14
    2c9e:	7f 05       	cpc	r23, r15
    2ca0:	68 f4       	brcc	.+26     	; 0x2cbc <prvInsertTimerInActiveList+0x82>
    2ca2:	bf 01       	movw	r22, r30
    2ca4:	6e 5f       	subi	r22, 0xFE	; 254
    2ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca8:	80 91 25 16 	lds	r24, 0x1625	; 0x801625 <pxCurrentTimerList>
    2cac:	90 91 26 16 	lds	r25, 0x1626	; 0x801626 <pxCurrentTimerList+0x1>
    2cb0:	0e 94 29 04 	call	0x852	; 0x852 <vListInsert>
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	03 c0       	rjmp	.+6      	; 0x2cbe <prvInsertTimerInActiveList+0x84>
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	01 c0       	rjmp	.+2      	; 0x2cbe <prvInsertTimerInActiveList+0x84>
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	1f 91       	pop	r17
    2cc0:	0f 91       	pop	r16
    2cc2:	ff 90       	pop	r15
    2cc4:	ef 90       	pop	r14
    2cc6:	df 90       	pop	r13
    2cc8:	cf 90       	pop	r12
    2cca:	08 95       	ret

00002ccc <prvCheckForValidListAndQueue>:
    2ccc:	0f b6       	in	r0, 0x3f	; 63
    2cce:	f8 94       	cli
    2cd0:	0f 92       	push	r0
    2cd2:	80 91 21 16 	lds	r24, 0x1621	; 0x801621 <xTimerQueue>
    2cd6:	90 91 22 16 	lds	r25, 0x1622	; 0x801622 <xTimerQueue+0x1>
    2cda:	89 2b       	or	r24, r25
    2cdc:	e9 f4       	brne	.+58     	; 0x2d18 <prvCheckForValidListAndQueue+0x4c>
    2cde:	82 e3       	ldi	r24, 0x32	; 50
    2ce0:	96 e1       	ldi	r25, 0x16	; 22
    2ce2:	0e 94 14 04 	call	0x828	; 0x828 <vListInitialise>
    2ce6:	87 e2       	ldi	r24, 0x27	; 39
    2ce8:	96 e1       	ldi	r25, 0x16	; 22
    2cea:	0e 94 14 04 	call	0x828	; 0x828 <vListInitialise>
    2cee:	82 e3       	ldi	r24, 0x32	; 50
    2cf0:	96 e1       	ldi	r25, 0x16	; 22
    2cf2:	90 93 26 16 	sts	0x1626, r25	; 0x801626 <pxCurrentTimerList+0x1>
    2cf6:	80 93 25 16 	sts	0x1625, r24	; 0x801625 <pxCurrentTimerList>
    2cfa:	87 e2       	ldi	r24, 0x27	; 39
    2cfc:	96 e1       	ldi	r25, 0x16	; 22
    2cfe:	90 93 24 16 	sts	0x1624, r25	; 0x801624 <pxOverflowTimerList+0x1>
    2d02:	80 93 23 16 	sts	0x1623, r24	; 0x801623 <pxOverflowTimerList>
    2d06:	40 e0       	ldi	r20, 0x00	; 0
    2d08:	67 e0       	ldi	r22, 0x07	; 7
    2d0a:	8a e0       	ldi	r24, 0x0A	; 10
    2d0c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <xQueueGenericCreate>
    2d10:	90 93 22 16 	sts	0x1622, r25	; 0x801622 <xTimerQueue+0x1>
    2d14:	80 93 21 16 	sts	0x1621, r24	; 0x801621 <xTimerQueue>
    2d18:	0f 90       	pop	r0
    2d1a:	0f be       	out	0x3f, r0	; 63
    2d1c:	08 95       	ret

00002d1e <xTimerCreateTimerTask>:
    2d1e:	ef 92       	push	r14
    2d20:	ff 92       	push	r15
    2d22:	0f 93       	push	r16
    2d24:	d3 df       	rcall	.-90     	; 0x2ccc <prvCheckForValidListAndQueue>
    2d26:	80 91 21 16 	lds	r24, 0x1621	; 0x801621 <xTimerQueue>
    2d2a:	90 91 22 16 	lds	r25, 0x1622	; 0x801622 <xTimerQueue+0x1>
    2d2e:	89 2b       	or	r24, r25
    2d30:	91 f0       	breq	.+36     	; 0x2d56 <xTimerCreateTimerTask+0x38>
    2d32:	0f 2e       	mov	r0, r31
    2d34:	ff e1       	ldi	r31, 0x1F	; 31
    2d36:	ef 2e       	mov	r14, r31
    2d38:	f6 e1       	ldi	r31, 0x16	; 22
    2d3a:	ff 2e       	mov	r15, r31
    2d3c:	f0 2d       	mov	r31, r0
    2d3e:	03 e0       	ldi	r16, 0x03	; 3
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	40 ec       	ldi	r20, 0xC0	; 192
    2d46:	50 e0       	ldi	r21, 0x00	; 0
    2d48:	60 e3       	ldi	r22, 0x30	; 48
    2d4a:	74 e0       	ldi	r23, 0x04	; 4
    2d4c:	87 ed       	ldi	r24, 0xD7	; 215
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <xTaskCreate>
    2d54:	01 c0       	rjmp	.+2      	; 0x2d58 <xTimerCreateTimerTask+0x3a>
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	0f 91       	pop	r16
    2d5a:	ff 90       	pop	r15
    2d5c:	ef 90       	pop	r14
    2d5e:	08 95       	ret

00002d60 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2d60:	8f 92       	push	r8
    2d62:	9f 92       	push	r9
    2d64:	af 92       	push	r10
    2d66:	bf 92       	push	r11
    2d68:	cf 92       	push	r12
    2d6a:	df 92       	push	r13
    2d6c:	ef 92       	push	r14
    2d6e:	ff 92       	push	r15
    2d70:	0f 93       	push	r16
    2d72:	1f 93       	push	r17
    2d74:	cf 93       	push	r28
    2d76:	df 93       	push	r29
    2d78:	cd b7       	in	r28, 0x3d	; 61
    2d7a:	de b7       	in	r29, 0x3e	; 62
    2d7c:	27 97       	sbiw	r28, 0x07	; 7
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	f8 94       	cli
    2d82:	de bf       	out	0x3e, r29	; 62
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2d88:	e0 91 21 16 	lds	r30, 0x1621	; 0x801621 <xTimerQueue>
    2d8c:	f0 91 22 16 	lds	r31, 0x1622	; 0x801622 <xTimerQueue+0x1>
    2d90:	30 97       	sbiw	r30, 0x00	; 0
    2d92:	81 f1       	breq	.+96     	; 0x2df4 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2d94:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2d96:	2a 83       	std	Y+2, r18	; 0x02
    2d98:	3b 83       	std	Y+3, r19	; 0x03
    2d9a:	4c 83       	std	Y+4, r20	; 0x04
    2d9c:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2d9e:	9f 83       	std	Y+7, r25	; 0x07
    2da0:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2da2:	66 30       	cpi	r22, 0x06	; 6
    2da4:	f4 f4       	brge	.+60     	; 0x2de2 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2da6:	ee db       	rcall	.-2084   	; 0x2584 <xTaskGetSchedulerState>
    2da8:	82 30       	cpi	r24, 0x02	; 2
    2daa:	69 f4       	brne	.+26     	; 0x2dc6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2dac:	00 e0       	ldi	r16, 0x00	; 0
    2dae:	a7 01       	movw	r20, r14
    2db0:	96 01       	movw	r18, r12
    2db2:	be 01       	movw	r22, r28
    2db4:	6f 5f       	subi	r22, 0xFF	; 255
    2db6:	7f 4f       	sbci	r23, 0xFF	; 255
    2db8:	80 91 21 16 	lds	r24, 0x1621	; 0x801621 <xTimerQueue>
    2dbc:	90 91 22 16 	lds	r25, 0x1622	; 0x801622 <xTimerQueue+0x1>
    2dc0:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <xQueueGenericSend>
    2dc4:	18 c0       	rjmp	.+48     	; 0x2df6 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2dc6:	00 e0       	ldi	r16, 0x00	; 0
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	a9 01       	movw	r20, r18
    2dce:	be 01       	movw	r22, r28
    2dd0:	6f 5f       	subi	r22, 0xFF	; 255
    2dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    2dd4:	80 91 21 16 	lds	r24, 0x1621	; 0x801621 <xTimerQueue>
    2dd8:	90 91 22 16 	lds	r25, 0x1622	; 0x801622 <xTimerQueue+0x1>
    2ddc:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <xQueueGenericSend>
    2de0:	0a c0       	rjmp	.+20     	; 0x2df6 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	a8 01       	movw	r20, r16
    2de6:	be 01       	movw	r22, r28
    2de8:	6f 5f       	subi	r22, 0xFF	; 255
    2dea:	7f 4f       	sbci	r23, 0xFF	; 255
    2dec:	cf 01       	movw	r24, r30
    2dee:	0e 94 7a 07 	call	0xef4	; 0xef4 <xQueueGenericSendFromISR>
    2df2:	01 c0       	rjmp	.+2      	; 0x2df6 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2df4:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2df6:	27 96       	adiw	r28, 0x07	; 7
    2df8:	0f b6       	in	r0, 0x3f	; 63
    2dfa:	f8 94       	cli
    2dfc:	de bf       	out	0x3e, r29	; 62
    2dfe:	0f be       	out	0x3f, r0	; 63
    2e00:	cd bf       	out	0x3d, r28	; 61
    2e02:	df 91       	pop	r29
    2e04:	cf 91       	pop	r28
    2e06:	1f 91       	pop	r17
    2e08:	0f 91       	pop	r16
    2e0a:	ff 90       	pop	r15
    2e0c:	ef 90       	pop	r14
    2e0e:	df 90       	pop	r13
    2e10:	cf 90       	pop	r12
    2e12:	bf 90       	pop	r11
    2e14:	af 90       	pop	r10
    2e16:	9f 90       	pop	r9
    2e18:	8f 90       	pop	r8
    2e1a:	08 95       	ret

00002e1c <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2e1c:	8f 92       	push	r8
    2e1e:	9f 92       	push	r9
    2e20:	af 92       	push	r10
    2e22:	bf 92       	push	r11
    2e24:	cf 92       	push	r12
    2e26:	df 92       	push	r13
    2e28:	ef 92       	push	r14
    2e2a:	ff 92       	push	r15
    2e2c:	0f 93       	push	r16
    2e2e:	1f 93       	push	r17
    2e30:	cf 93       	push	r28
    2e32:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2e34:	3b c0       	rjmp	.+118    	; 0x2eac <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2e36:	07 80       	ldd	r0, Z+7	; 0x07
    2e38:	f0 85       	ldd	r31, Z+8	; 0x08
    2e3a:	e0 2d       	mov	r30, r0
    2e3c:	80 80       	ld	r8, Z
    2e3e:	91 80       	ldd	r9, Z+1	; 0x01
    2e40:	a2 80       	ldd	r10, Z+2	; 0x02
    2e42:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2e44:	c0 85       	ldd	r28, Z+8	; 0x08
    2e46:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2e48:	8e 01       	movw	r16, r28
    2e4a:	0e 5f       	subi	r16, 0xFE	; 254
    2e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4e:	c8 01       	movw	r24, r16
    2e50:	0e 94 66 04 	call	0x8cc	; 0x8cc <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2e54:	ec 89       	ldd	r30, Y+20	; 0x14
    2e56:	fd 89       	ldd	r31, Y+21	; 0x15
    2e58:	ce 01       	movw	r24, r28
    2e5a:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2e5c:	8e 89       	ldd	r24, Y+22	; 0x16
    2e5e:	82 ff       	sbrs	r24, 2
    2e60:	25 c0       	rjmp	.+74     	; 0x2eac <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2e62:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e64:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e66:	a8 89       	ldd	r26, Y+16	; 0x10
    2e68:	b9 89       	ldd	r27, Y+17	; 0x11
    2e6a:	88 0d       	add	r24, r8
    2e6c:	99 1d       	adc	r25, r9
    2e6e:	aa 1d       	adc	r26, r10
    2e70:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2e72:	88 16       	cp	r8, r24
    2e74:	99 06       	cpc	r9, r25
    2e76:	aa 06       	cpc	r10, r26
    2e78:	bb 06       	cpc	r11, r27
    2e7a:	70 f4       	brcc	.+28     	; 0x2e98 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2e7c:	8a 83       	std	Y+2, r24	; 0x02
    2e7e:	9b 83       	std	Y+3, r25	; 0x03
    2e80:	ac 83       	std	Y+4, r26	; 0x04
    2e82:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2e84:	db 87       	std	Y+11, r29	; 0x0b
    2e86:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2e88:	b8 01       	movw	r22, r16
    2e8a:	80 91 25 16 	lds	r24, 0x1625	; 0x801625 <pxCurrentTimerList>
    2e8e:	90 91 26 16 	lds	r25, 0x1626	; 0x801626 <pxCurrentTimerList+0x1>
    2e92:	0e 94 29 04 	call	0x852	; 0x852 <vListInsert>
    2e96:	0a c0       	rjmp	.+20     	; 0x2eac <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2e98:	c1 2c       	mov	r12, r1
    2e9a:	d1 2c       	mov	r13, r1
    2e9c:	76 01       	movw	r14, r12
    2e9e:	00 e0       	ldi	r16, 0x00	; 0
    2ea0:	10 e0       	ldi	r17, 0x00	; 0
    2ea2:	a5 01       	movw	r20, r10
    2ea4:	94 01       	movw	r18, r8
    2ea6:	60 e0       	ldi	r22, 0x00	; 0
    2ea8:	ce 01       	movw	r24, r28
    2eaa:	5a df       	rcall	.-332    	; 0x2d60 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2eac:	e0 91 25 16 	lds	r30, 0x1625	; 0x801625 <pxCurrentTimerList>
    2eb0:	f0 91 26 16 	lds	r31, 0x1626	; 0x801626 <pxCurrentTimerList+0x1>
    2eb4:	80 81       	ld	r24, Z
    2eb6:	81 11       	cpse	r24, r1
    2eb8:	be cf       	rjmp	.-132    	; 0x2e36 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2eba:	80 91 23 16 	lds	r24, 0x1623	; 0x801623 <pxOverflowTimerList>
    2ebe:	90 91 24 16 	lds	r25, 0x1624	; 0x801624 <pxOverflowTimerList+0x1>
    2ec2:	90 93 26 16 	sts	0x1626, r25	; 0x801626 <pxCurrentTimerList+0x1>
    2ec6:	80 93 25 16 	sts	0x1625, r24	; 0x801625 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2eca:	f0 93 24 16 	sts	0x1624, r31	; 0x801624 <pxOverflowTimerList+0x1>
    2ece:	e0 93 23 16 	sts	0x1623, r30	; 0x801623 <pxOverflowTimerList>
    }
    2ed2:	df 91       	pop	r29
    2ed4:	cf 91       	pop	r28
    2ed6:	1f 91       	pop	r17
    2ed8:	0f 91       	pop	r16
    2eda:	ff 90       	pop	r15
    2edc:	ef 90       	pop	r14
    2ede:	df 90       	pop	r13
    2ee0:	cf 90       	pop	r12
    2ee2:	bf 90       	pop	r11
    2ee4:	af 90       	pop	r10
    2ee6:	9f 90       	pop	r9
    2ee8:	8f 90       	pop	r8
    2eea:	08 95       	ret

00002eec <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2eec:	cf 92       	push	r12
    2eee:	df 92       	push	r13
    2ef0:	ef 92       	push	r14
    2ef2:	ff 92       	push	r15
    2ef4:	cf 93       	push	r28
    2ef6:	df 93       	push	r29
    2ef8:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2efa:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <xTaskGetTickCount>
    2efe:	6b 01       	movw	r12, r22
    2f00:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2f02:	80 91 1b 16 	lds	r24, 0x161B	; 0x80161b <xLastTime.2436>
    2f06:	90 91 1c 16 	lds	r25, 0x161C	; 0x80161c <xLastTime.2436+0x1>
    2f0a:	a0 91 1d 16 	lds	r26, 0x161D	; 0x80161d <xLastTime.2436+0x2>
    2f0e:	b0 91 1e 16 	lds	r27, 0x161E	; 0x80161e <xLastTime.2436+0x3>
    2f12:	c8 16       	cp	r12, r24
    2f14:	d9 06       	cpc	r13, r25
    2f16:	ea 06       	cpc	r14, r26
    2f18:	fb 06       	cpc	r15, r27
    2f1a:	20 f4       	brcc	.+8      	; 0x2f24 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2f1c:	7f df       	rcall	.-258    	; 0x2e1c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2f1e:	81 e0       	ldi	r24, 0x01	; 1
    2f20:	88 83       	st	Y, r24
    2f22:	01 c0       	rjmp	.+2      	; 0x2f26 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2f24:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2f26:	c0 92 1b 16 	sts	0x161B, r12	; 0x80161b <xLastTime.2436>
    2f2a:	d0 92 1c 16 	sts	0x161C, r13	; 0x80161c <xLastTime.2436+0x1>
    2f2e:	e0 92 1d 16 	sts	0x161D, r14	; 0x80161d <xLastTime.2436+0x2>
    2f32:	f0 92 1e 16 	sts	0x161E, r15	; 0x80161e <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2f36:	c7 01       	movw	r24, r14
    2f38:	b6 01       	movw	r22, r12
    2f3a:	df 91       	pop	r29
    2f3c:	cf 91       	pop	r28
    2f3e:	ff 90       	pop	r15
    2f40:	ef 90       	pop	r14
    2f42:	df 90       	pop	r13
    2f44:	cf 90       	pop	r12
    2f46:	08 95       	ret

00002f48 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2f48:	4f 92       	push	r4
    2f4a:	5f 92       	push	r5
    2f4c:	6f 92       	push	r6
    2f4e:	7f 92       	push	r7
    2f50:	8f 92       	push	r8
    2f52:	9f 92       	push	r9
    2f54:	af 92       	push	r10
    2f56:	bf 92       	push	r11
    2f58:	cf 92       	push	r12
    2f5a:	df 92       	push	r13
    2f5c:	ef 92       	push	r14
    2f5e:	ff 92       	push	r15
    2f60:	0f 93       	push	r16
    2f62:	1f 93       	push	r17
    2f64:	cf 93       	push	r28
    2f66:	df 93       	push	r29
    2f68:	4b 01       	movw	r8, r22
    2f6a:	5c 01       	movw	r10, r24
    2f6c:	29 01       	movw	r4, r18
    2f6e:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2f70:	e0 91 25 16 	lds	r30, 0x1625	; 0x801625 <pxCurrentTimerList>
    2f74:	f0 91 26 16 	lds	r31, 0x1626	; 0x801626 <pxCurrentTimerList+0x1>
    2f78:	07 80       	ldd	r0, Z+7	; 0x07
    2f7a:	f0 85       	ldd	r31, Z+8	; 0x08
    2f7c:	e0 2d       	mov	r30, r0
    2f7e:	c0 85       	ldd	r28, Z+8	; 0x08
    2f80:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2f82:	ce 01       	movw	r24, r28
    2f84:	02 96       	adiw	r24, 0x02	; 2
    2f86:	0e 94 66 04 	call	0x8cc	; 0x8cc <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2f8a:	8e 89       	ldd	r24, Y+22	; 0x16
    2f8c:	82 ff       	sbrs	r24, 2
    2f8e:	1b c0       	rjmp	.+54     	; 0x2fc6 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2f90:	4e 85       	ldd	r20, Y+14	; 0x0e
    2f92:	5f 85       	ldd	r21, Y+15	; 0x0f
    2f94:	68 89       	ldd	r22, Y+16	; 0x10
    2f96:	79 89       	ldd	r23, Y+17	; 0x11
    2f98:	48 0d       	add	r20, r8
    2f9a:	59 1d       	adc	r21, r9
    2f9c:	6a 1d       	adc	r22, r10
    2f9e:	7b 1d       	adc	r23, r11
    2fa0:	75 01       	movw	r14, r10
    2fa2:	64 01       	movw	r12, r8
    2fa4:	93 01       	movw	r18, r6
    2fa6:	82 01       	movw	r16, r4
    2fa8:	ce 01       	movw	r24, r28
    2faa:	47 de       	rcall	.-882    	; 0x2c3a <prvInsertTimerInActiveList>
    2fac:	88 23       	and	r24, r24
    2fae:	69 f0       	breq	.+26     	; 0x2fca <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2fb0:	c1 2c       	mov	r12, r1
    2fb2:	d1 2c       	mov	r13, r1
    2fb4:	76 01       	movw	r14, r12
    2fb6:	00 e0       	ldi	r16, 0x00	; 0
    2fb8:	10 e0       	ldi	r17, 0x00	; 0
    2fba:	a5 01       	movw	r20, r10
    2fbc:	94 01       	movw	r18, r8
    2fbe:	60 e0       	ldi	r22, 0x00	; 0
    2fc0:	ce 01       	movw	r24, r28
    2fc2:	ce de       	rcall	.-612    	; 0x2d60 <xTimerGenericCommand>
    2fc4:	02 c0       	rjmp	.+4      	; 0x2fca <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2fc6:	8e 7f       	andi	r24, 0xFE	; 254
    2fc8:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2fca:	ec 89       	ldd	r30, Y+20	; 0x14
    2fcc:	fd 89       	ldd	r31, Y+21	; 0x15
    2fce:	ce 01       	movw	r24, r28
    2fd0:	19 95       	eicall
    }
    2fd2:	df 91       	pop	r29
    2fd4:	cf 91       	pop	r28
    2fd6:	1f 91       	pop	r17
    2fd8:	0f 91       	pop	r16
    2fda:	ff 90       	pop	r15
    2fdc:	ef 90       	pop	r14
    2fde:	df 90       	pop	r13
    2fe0:	cf 90       	pop	r12
    2fe2:	bf 90       	pop	r11
    2fe4:	af 90       	pop	r10
    2fe6:	9f 90       	pop	r9
    2fe8:	8f 90       	pop	r8
    2fea:	7f 90       	pop	r7
    2fec:	6f 90       	pop	r6
    2fee:	5f 90       	pop	r5
    2ff0:	4f 90       	pop	r4
    2ff2:	08 95       	ret

00002ff4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2ff4:	8f 92       	push	r8
    2ff6:	9f 92       	push	r9
    2ff8:	af 92       	push	r10
    2ffa:	bf 92       	push	r11
    2ffc:	cf 92       	push	r12
    2ffe:	df 92       	push	r13
    3000:	ef 92       	push	r14
    3002:	ff 92       	push	r15
    3004:	1f 93       	push	r17
    3006:	cf 93       	push	r28
    3008:	df 93       	push	r29
    300a:	1f 92       	push	r1
    300c:	cd b7       	in	r28, 0x3d	; 61
    300e:	de b7       	in	r29, 0x3e	; 62
    3010:	6b 01       	movw	r12, r22
    3012:	7c 01       	movw	r14, r24
    3014:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3016:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    301a:	ce 01       	movw	r24, r28
    301c:	01 96       	adiw	r24, 0x01	; 1
    301e:	66 df       	rcall	.-308    	; 0x2eec <prvSampleTimeNow>
    3020:	4b 01       	movw	r8, r22
    3022:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3024:	89 81       	ldd	r24, Y+1	; 0x01
    3026:	81 11       	cpse	r24, r1
    3028:	2d c0       	rjmp	.+90     	; 0x3084 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    302a:	11 11       	cpse	r17, r1
    302c:	0d c0       	rjmp	.+26     	; 0x3048 <prvProcessTimerOrBlockTask+0x54>
    302e:	8c 14       	cp	r8, r12
    3030:	9d 04       	cpc	r9, r13
    3032:	ae 04       	cpc	r10, r14
    3034:	bf 04       	cpc	r11, r15
    3036:	40 f0       	brcs	.+16     	; 0x3048 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3038:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    303c:	a5 01       	movw	r20, r10
    303e:	94 01       	movw	r18, r8
    3040:	c7 01       	movw	r24, r14
    3042:	b6 01       	movw	r22, r12
    3044:	81 df       	rcall	.-254    	; 0x2f48 <prvProcessExpiredTimer>
    3046:	20 c0       	rjmp	.+64     	; 0x3088 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3048:	11 23       	and	r17, r17
    304a:	41 f0       	breq	.+16     	; 0x305c <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    304c:	e0 91 23 16 	lds	r30, 0x1623	; 0x801623 <pxOverflowTimerList>
    3050:	f0 91 24 16 	lds	r31, 0x1624	; 0x801624 <pxOverflowTimerList+0x1>
    3054:	80 81       	ld	r24, Z
    3056:	11 e0       	ldi	r17, 0x01	; 1
    3058:	81 11       	cpse	r24, r1
    305a:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    305c:	b7 01       	movw	r22, r14
    305e:	a6 01       	movw	r20, r12
    3060:	48 19       	sub	r20, r8
    3062:	59 09       	sbc	r21, r9
    3064:	6a 09       	sbc	r22, r10
    3066:	7b 09       	sbc	r23, r11
    3068:	21 2f       	mov	r18, r17
    306a:	80 91 21 16 	lds	r24, 0x1621	; 0x801621 <xTimerQueue>
    306e:	90 91 22 16 	lds	r25, 0x1622	; 0x801622 <xTimerQueue+0x1>
    3072:	0e 94 44 08 	call	0x1088	; 0x1088 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3076:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <xTaskResumeAll>
    307a:	81 11       	cpse	r24, r1
    307c:	05 c0       	rjmp	.+10     	; 0x3088 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    307e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <vPortYield>
    3082:	02 c0       	rjmp	.+4      	; 0x3088 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3084:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <xTaskResumeAll>
            }
        }
    }
    3088:	0f 90       	pop	r0
    308a:	df 91       	pop	r29
    308c:	cf 91       	pop	r28
    308e:	1f 91       	pop	r17
    3090:	ff 90       	pop	r15
    3092:	ef 90       	pop	r14
    3094:	df 90       	pop	r13
    3096:	cf 90       	pop	r12
    3098:	bf 90       	pop	r11
    309a:	af 90       	pop	r10
    309c:	9f 90       	pop	r9
    309e:	8f 90       	pop	r8
    30a0:	08 95       	ret

000030a2 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    30a2:	af 92       	push	r10
    30a4:	bf 92       	push	r11
    30a6:	cf 92       	push	r12
    30a8:	df 92       	push	r13
    30aa:	ef 92       	push	r14
    30ac:	ff 92       	push	r15
    30ae:	0f 93       	push	r16
    30b0:	1f 93       	push	r17
    30b2:	cf 93       	push	r28
    30b4:	df 93       	push	r29
    30b6:	cd b7       	in	r28, 0x3d	; 61
    30b8:	de b7       	in	r29, 0x3e	; 62
    30ba:	28 97       	sbiw	r28, 0x08	; 8
    30bc:	0f b6       	in	r0, 0x3f	; 63
    30be:	f8 94       	cli
    30c0:	de bf       	out	0x3e, r29	; 62
    30c2:	0f be       	out	0x3f, r0	; 63
    30c4:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    30c6:	82 c0       	rjmp	.+260    	; 0x31cc <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    30c8:	89 81       	ldd	r24, Y+1	; 0x01
    30ca:	88 23       	and	r24, r24
    30cc:	0c f4       	brge	.+2      	; 0x30d0 <prvProcessReceivedCommands+0x2e>
    30ce:	7e c0       	rjmp	.+252    	; 0x31cc <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    30d0:	ae 80       	ldd	r10, Y+6	; 0x06
    30d2:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    30d4:	d5 01       	movw	r26, r10
    30d6:	1c 96       	adiw	r26, 0x0c	; 12
    30d8:	8d 91       	ld	r24, X+
    30da:	9c 91       	ld	r25, X
    30dc:	1d 97       	sbiw	r26, 0x0d	; 13
    30de:	89 2b       	or	r24, r25
    30e0:	21 f0       	breq	.+8      	; 0x30ea <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    30e2:	c5 01       	movw	r24, r10
    30e4:	02 96       	adiw	r24, 0x02	; 2
    30e6:	0e 94 66 04 	call	0x8cc	; 0x8cc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    30ea:	ce 01       	movw	r24, r28
    30ec:	08 96       	adiw	r24, 0x08	; 8
    30ee:	fe de       	rcall	.-516    	; 0x2eec <prvSampleTimeNow>
    30f0:	8b 01       	movw	r16, r22
    30f2:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    30f4:	e9 81       	ldd	r30, Y+1	; 0x01
    30f6:	0e 2e       	mov	r0, r30
    30f8:	00 0c       	add	r0, r0
    30fa:	ff 0b       	sbc	r31, r31
    30fc:	ea 30       	cpi	r30, 0x0A	; 10
    30fe:	f1 05       	cpc	r31, r1
    3100:	08 f0       	brcs	.+2      	; 0x3104 <prvProcessReceivedCommands+0x62>
    3102:	64 c0       	rjmp	.+200    	; 0x31cc <prvProcessReceivedCommands+0x12a>
    3104:	88 27       	eor	r24, r24
    3106:	ee 58       	subi	r30, 0x8E	; 142
    3108:	ff 4f       	sbci	r31, 0xFF	; 255
    310a:	8f 4f       	sbci	r24, 0xFF	; 255
    310c:	0c 94 ca 28 	jmp	0x5194	; 0x5194 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3110:	f5 01       	movw	r30, r10
    3112:	86 89       	ldd	r24, Z+22	; 0x16
    3114:	81 60       	ori	r24, 0x01	; 1
    3116:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3118:	ca 80       	ldd	r12, Y+2	; 0x02
    311a:	db 80       	ldd	r13, Y+3	; 0x03
    311c:	ec 80       	ldd	r14, Y+4	; 0x04
    311e:	fd 80       	ldd	r15, Y+5	; 0x05
    3120:	46 85       	ldd	r20, Z+14	; 0x0e
    3122:	57 85       	ldd	r21, Z+15	; 0x0f
    3124:	60 89       	ldd	r22, Z+16	; 0x10
    3126:	71 89       	ldd	r23, Z+17	; 0x11
    3128:	4c 0d       	add	r20, r12
    312a:	5d 1d       	adc	r21, r13
    312c:	6e 1d       	adc	r22, r14
    312e:	7f 1d       	adc	r23, r15
    3130:	c5 01       	movw	r24, r10
    3132:	83 dd       	rcall	.-1274   	; 0x2c3a <prvInsertTimerInActiveList>
    3134:	88 23       	and	r24, r24
    3136:	09 f4       	brne	.+2      	; 0x313a <prvProcessReceivedCommands+0x98>
    3138:	49 c0       	rjmp	.+146    	; 0x31cc <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    313a:	d5 01       	movw	r26, r10
    313c:	54 96       	adiw	r26, 0x14	; 20
    313e:	ed 91       	ld	r30, X+
    3140:	fc 91       	ld	r31, X
    3142:	55 97       	sbiw	r26, 0x15	; 21
    3144:	c5 01       	movw	r24, r10
    3146:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3148:	f5 01       	movw	r30, r10
    314a:	86 89       	ldd	r24, Z+22	; 0x16
    314c:	82 ff       	sbrs	r24, 2
    314e:	3e c0       	rjmp	.+124    	; 0x31cc <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3150:	4a 81       	ldd	r20, Y+2	; 0x02
    3152:	5b 81       	ldd	r21, Y+3	; 0x03
    3154:	6c 81       	ldd	r22, Y+4	; 0x04
    3156:	7d 81       	ldd	r23, Y+5	; 0x05
    3158:	86 85       	ldd	r24, Z+14	; 0x0e
    315a:	97 85       	ldd	r25, Z+15	; 0x0f
    315c:	a0 89       	ldd	r26, Z+16	; 0x10
    315e:	b1 89       	ldd	r27, Z+17	; 0x11
    3160:	9a 01       	movw	r18, r20
    3162:	ab 01       	movw	r20, r22
    3164:	28 0f       	add	r18, r24
    3166:	39 1f       	adc	r19, r25
    3168:	4a 1f       	adc	r20, r26
    316a:	5b 1f       	adc	r21, r27
    316c:	c1 2c       	mov	r12, r1
    316e:	d1 2c       	mov	r13, r1
    3170:	76 01       	movw	r14, r12
    3172:	00 e0       	ldi	r16, 0x00	; 0
    3174:	10 e0       	ldi	r17, 0x00	; 0
    3176:	60 e0       	ldi	r22, 0x00	; 0
    3178:	c5 01       	movw	r24, r10
    317a:	f2 dd       	rcall	.-1052   	; 0x2d60 <xTimerGenericCommand>
    317c:	27 c0       	rjmp	.+78     	; 0x31cc <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    317e:	d5 01       	movw	r26, r10
    3180:	56 96       	adiw	r26, 0x16	; 22
    3182:	8c 91       	ld	r24, X
    3184:	56 97       	sbiw	r26, 0x16	; 22
    3186:	8e 7f       	andi	r24, 0xFE	; 254
    3188:	56 96       	adiw	r26, 0x16	; 22
    318a:	8c 93       	st	X, r24
                        break;
    318c:	1f c0       	rjmp	.+62     	; 0x31cc <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    318e:	f5 01       	movw	r30, r10
    3190:	86 89       	ldd	r24, Z+22	; 0x16
    3192:	81 60       	ori	r24, 0x01	; 1
    3194:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3196:	4a 81       	ldd	r20, Y+2	; 0x02
    3198:	5b 81       	ldd	r21, Y+3	; 0x03
    319a:	6c 81       	ldd	r22, Y+4	; 0x04
    319c:	7d 81       	ldd	r23, Y+5	; 0x05
    319e:	46 87       	std	Z+14, r20	; 0x0e
    31a0:	57 87       	std	Z+15, r21	; 0x0f
    31a2:	60 8b       	std	Z+16, r22	; 0x10
    31a4:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    31a6:	40 0f       	add	r20, r16
    31a8:	51 1f       	adc	r21, r17
    31aa:	62 1f       	adc	r22, r18
    31ac:	73 1f       	adc	r23, r19
    31ae:	68 01       	movw	r12, r16
    31b0:	79 01       	movw	r14, r18
    31b2:	c5 01       	movw	r24, r10
    31b4:	42 dd       	rcall	.-1404   	; 0x2c3a <prvInsertTimerInActiveList>
                        break;
    31b6:	0a c0       	rjmp	.+20     	; 0x31cc <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    31b8:	f5 01       	movw	r30, r10
    31ba:	86 89       	ldd	r24, Z+22	; 0x16
    31bc:	81 fd       	sbrc	r24, 1
    31be:	04 c0       	rjmp	.+8      	; 0x31c8 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    31c0:	c5 01       	movw	r24, r10
    31c2:	0e 94 d7 03 	call	0x7ae	; 0x7ae <vPortFree>
    31c6:	02 c0       	rjmp	.+4      	; 0x31cc <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    31c8:	8e 7f       	andi	r24, 0xFE	; 254
    31ca:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	a9 01       	movw	r20, r18
    31d2:	be 01       	movw	r22, r28
    31d4:	6f 5f       	subi	r22, 0xFF	; 255
    31d6:	7f 4f       	sbci	r23, 0xFF	; 255
    31d8:	80 91 21 16 	lds	r24, 0x1621	; 0x801621 <xTimerQueue>
    31dc:	90 91 22 16 	lds	r25, 0x1622	; 0x801622 <xTimerQueue+0x1>
    31e0:	0e 94 b5 07 	call	0xf6a	; 0xf6a <xQueueReceive>
    31e4:	81 11       	cpse	r24, r1
    31e6:	70 cf       	rjmp	.-288    	; 0x30c8 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    31e8:	28 96       	adiw	r28, 0x08	; 8
    31ea:	0f b6       	in	r0, 0x3f	; 63
    31ec:	f8 94       	cli
    31ee:	de bf       	out	0x3e, r29	; 62
    31f0:	0f be       	out	0x3f, r0	; 63
    31f2:	cd bf       	out	0x3d, r28	; 61
    31f4:	df 91       	pop	r29
    31f6:	cf 91       	pop	r28
    31f8:	1f 91       	pop	r17
    31fa:	0f 91       	pop	r16
    31fc:	ff 90       	pop	r15
    31fe:	ef 90       	pop	r14
    3200:	df 90       	pop	r13
    3202:	cf 90       	pop	r12
    3204:	bf 90       	pop	r11
    3206:	af 90       	pop	r10
    3208:	08 95       	ret

0000320a <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    320a:	08 95       	ret

0000320c <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    320c:	84 b1       	in	r24, 0x04	; 4
    320e:	80 68       	ori	r24, 0x80	; 128
    3210:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3212:	85 b1       	in	r24, 0x05	; 5
    3214:	80 68       	ori	r24, 0x80	; 128
    3216:	85 b9       	out	0x05, r24	; 5
    3218:	08 95       	ret

0000321a <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    321a:	83 b1       	in	r24, 0x03	; 3
    321c:	80 68       	ori	r24, 0x80	; 128
    321e:	83 b9       	out	0x03, r24	; 3
    3220:	08 95       	ret

00003222 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3222:	f4 df       	rcall	.-24     	; 0x320c <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3224:	2f ef       	ldi	r18, 0xFF	; 255
    3226:	80 e7       	ldi	r24, 0x70	; 112
    3228:	92 e0       	ldi	r25, 0x02	; 2
    322a:	21 50       	subi	r18, 0x01	; 1
    322c:	80 40       	sbci	r24, 0x00	; 0
    322e:	90 40       	sbci	r25, 0x00	; 0
    3230:	e1 f7       	brne	.-8      	; 0x322a <vApplicationMallocFailedHook+0x8>
    3232:	00 c0       	rjmp	.+0      	; 0x3234 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3234:	00 00       	nop
    3236:	f1 df       	rcall	.-30     	; 0x321a <prvBlinkMainLed>
    3238:	f5 cf       	rjmp	.-22     	; 0x3224 <vApplicationMallocFailedHook+0x2>

0000323a <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    323a:	e8 df       	rcall	.-48     	; 0x320c <prvSetMainLedOn>
    323c:	2f ef       	ldi	r18, 0xFF	; 255
    323e:	87 ea       	ldi	r24, 0xA7	; 167
    3240:	91 e6       	ldi	r25, 0x61	; 97
    3242:	21 50       	subi	r18, 0x01	; 1
    3244:	80 40       	sbci	r24, 0x00	; 0
    3246:	90 40       	sbci	r25, 0x00	; 0
    3248:	e1 f7       	brne	.-8      	; 0x3242 <vApplicationStackOverflowHook+0x8>
    324a:	00 c0       	rjmp	.+0      	; 0x324c <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    324c:	00 00       	nop
    324e:	e5 df       	rcall	.-54     	; 0x321a <prvBlinkMainLed>
    3250:	f5 cf       	rjmp	.-22     	; 0x323c <vApplicationStackOverflowHook+0x2>

00003252 <humidityTemperatureTask_run>:
int16_t temperature;
int16_t humidity;

void humidityTemperatureTask_run()
{
		if (hih8120_wakeup() == HIH8120_OK) {
    3252:	aa d0       	rcall	.+340    	; 0x33a8 <hih8120_wakeup>
    3254:	81 11       	cpse	r24, r1
    3256:	3f c0       	rjmp	.+126    	; 0x32d6 <humidityTemperatureTask_run+0x84>
			vTaskDelay(pdMS_TO_TICKS(100));
    3258:	66 e0       	ldi	r22, 0x06	; 6
    325a:	70 e0       	ldi	r23, 0x00	; 0
    325c:	80 e0       	ldi	r24, 0x00	; 0
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	0e 94 a4 10 	call	0x2148	; 0x2148 <vTaskDelay>
			
			if (hih8120_measure() == HIH8120_OK) {
    3264:	b6 d0       	rcall	.+364    	; 0x33d2 <hih8120_measure>
    3266:	81 11       	cpse	r24, r1
    3268:	2d c0       	rjmp	.+90     	; 0x32c4 <humidityTemperatureTask_run+0x72>
				vTaskDelay(pdMS_TO_TICKS(50));
    326a:	63 e0       	ldi	r22, 0x03	; 3
    326c:	70 e0       	ldi	r23, 0x00	; 0
    326e:	80 e0       	ldi	r24, 0x00	; 0
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	0e 94 a4 10 	call	0x2148	; 0x2148 <vTaskDelay>
				humidity = hih8120_getHumidityPercent_x10();
    3276:	d3 d0       	rcall	.+422    	; 0x341e <hih8120_getHumidityPercent_x10>
    3278:	90 93 71 17 	sts	0x1771, r25	; 0x801771 <humidity+0x1>
    327c:	80 93 70 17 	sts	0x1770, r24	; 0x801770 <humidity>
				temperature = hih8120_getTemperature_x10();
    3280:	f4 d0       	rcall	.+488    	; 0x346a <hih8120_getTemperature_x10>
    3282:	80 93 6e 17 	sts	0x176E, r24	; 0x80176e <temperature>
    3286:	90 93 6f 17 	sts	0x176F, r25	; 0x80176f <temperature+0x1>
				printf("TEMP: %d\n",temperature);
    328a:	9f 93       	push	r25
    328c:	8f 93       	push	r24
    328e:	88 e3       	ldi	r24, 0x38	; 56
    3290:	94 e0       	ldi	r25, 0x04	; 4
    3292:	9f 93       	push	r25
    3294:	8f 93       	push	r24
    3296:	0e 94 56 2a 	call	0x54ac	; 0x54ac <printf>
				printf("HUMID: %d\n",humidity);
    329a:	80 91 71 17 	lds	r24, 0x1771	; 0x801771 <humidity+0x1>
    329e:	8f 93       	push	r24
    32a0:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <humidity>
    32a4:	8f 93       	push	r24
    32a6:	82 e4       	ldi	r24, 0x42	; 66
    32a8:	94 e0       	ldi	r25, 0x04	; 4
    32aa:	9f 93       	push	r25
    32ac:	8f 93       	push	r24
    32ae:	0e 94 56 2a 	call	0x54ac	; 0x54ac <printf>
    32b2:	8d b7       	in	r24, 0x3d	; 61
    32b4:	9e b7       	in	r25, 0x3e	; 62
    32b6:	08 96       	adiw	r24, 0x08	; 8
    32b8:	0f b6       	in	r0, 0x3f	; 63
    32ba:	f8 94       	cli
    32bc:	9e bf       	out	0x3e, r25	; 62
    32be:	0f be       	out	0x3f, r0	; 63
    32c0:	8d bf       	out	0x3d, r24	; 61
    32c2:	11 c0       	rjmp	.+34     	; 0x32e6 <humidityTemperatureTask_run+0x94>
				} else {
				printf("FAILED: to measure - Humidity-Temperature");
    32c4:	8d e4       	ldi	r24, 0x4D	; 77
    32c6:	94 e0       	ldi	r25, 0x04	; 4
    32c8:	9f 93       	push	r25
    32ca:	8f 93       	push	r24
    32cc:	0e 94 56 2a 	call	0x54ac	; 0x54ac <printf>
    32d0:	0f 90       	pop	r0
    32d2:	0f 90       	pop	r0
    32d4:	08 c0       	rjmp	.+16     	; 0x32e6 <humidityTemperatureTask_run+0x94>
			}
			} else {
			printf("FAILED: to wakeup - Humidity-Temperature");
    32d6:	87 e7       	ldi	r24, 0x77	; 119
    32d8:	94 e0       	ldi	r25, 0x04	; 4
    32da:	9f 93       	push	r25
    32dc:	8f 93       	push	r24
    32de:	0e 94 56 2a 	call	0x54ac	; 0x54ac <printf>
    32e2:	0f 90       	pop	r0
    32e4:	0f 90       	pop	r0
			}
			
	
		vTaskDelay(pdMS_TO_TICKS(6000));
    32e6:	64 e7       	ldi	r22, 0x74	; 116
    32e8:	71 e0       	ldi	r23, 0x01	; 1
    32ea:	80 e0       	ldi	r24, 0x00	; 0
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	0c 94 a4 10 	jmp	0x2148	; 0x2148 <vTaskDelay>

000032f2 <_run>:
// Main task for Temperature-Humidity
static void _run(void* params) {
	// In future we could use this for some INIT value
	
	while (1) {
		humidityTemperatureTask_run();
    32f2:	af df       	rcall	.-162    	; 0x3252 <humidityTemperatureTask_run>
    32f4:	fe cf       	rjmp	.-4      	; 0x32f2 <_run>

000032f6 <humidityTemperatureTask_create>:
	
		vTaskDelay(pdMS_TO_TICKS(6000));
}

// Creating Task
void humidityTemperatureTask_create(){
    32f6:	ef 92       	push	r14
    32f8:	ff 92       	push	r15
    32fa:	0f 93       	push	r16
	xTaskCreate(
    32fc:	e1 2c       	mov	r14, r1
    32fe:	f1 2c       	mov	r15, r1
    3300:	01 e0       	ldi	r16, 0x01	; 1
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	40 ec       	ldi	r20, 0xC0	; 192
    3308:	50 e0       	ldi	r21, 0x00	; 0
    330a:	60 ea       	ldi	r22, 0xA0	; 160
    330c:	74 e0       	ldi	r23, 0x04	; 4
    330e:	89 e7       	ldi	r24, 0x79	; 121
    3310:	99 e1       	ldi	r25, 0x19	; 25
    3312:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <xTaskCreate>
	configMINIMAL_STACK_SIZE,	   // This stack size can be checked & adjusted by reading the Stack Highwater
	NULL,					   	   // (void *pvParameters)
	1,							   //the priority of the task
	NULL							   //No TaskHandle created.
	);
}
    3316:	0f 91       	pop	r16
    3318:	ff 90       	pop	r15
    331a:	ef 90       	pop	r14
    331c:	08 95       	ret

0000331e <_hihTwiCallback>:
    331e:	65 30       	cpi	r22, 0x05	; 5
    3320:	f1 f4       	brne	.+60     	; 0x335e <_hihTwiCallback+0x40>
    3322:	fa 01       	movw	r30, r20
    3324:	80 81       	ld	r24, Z
    3326:	8f 73       	andi	r24, 0x3F	; 63
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	98 2f       	mov	r25, r24
    332c:	88 27       	eor	r24, r24
    332e:	21 81       	ldd	r18, Z+1	; 0x01
    3330:	82 2b       	or	r24, r18
    3332:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3336:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    333a:	82 81       	ldd	r24, Z+2	; 0x02
    333c:	f0 e4       	ldi	r31, 0x40	; 64
    333e:	8f 9f       	mul	r24, r31
    3340:	c0 01       	movw	r24, r0
    3342:	11 24       	eor	r1, r1
    3344:	fa 01       	movw	r30, r20
    3346:	23 81       	ldd	r18, Z+3	; 0x03
    3348:	26 95       	lsr	r18
    334a:	26 95       	lsr	r18
    334c:	82 2b       	or	r24, r18
    334e:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3352:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	80 93 3d 16 	sts	0x163D, r24	; 0x80163d <_measuringIsReady>
    335c:	08 95       	ret
    335e:	64 30       	cpi	r22, 0x04	; 4
    3360:	51 f0       	breq	.+20     	; 0x3376 <_hihTwiCallback+0x58>
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	90 e4       	ldi	r25, 0x40	; 64
    3366:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    336a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    336e:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3372:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3376:	08 95       	ret

00003378 <hih8120_initialise>:
    3378:	0f 93       	push	r16
    337a:	1f 93       	push	r17
    337c:	0f e8       	ldi	r16, 0x8F	; 143
    337e:	19 e1       	ldi	r17, 0x19	; 25
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	34 e2       	ldi	r19, 0x24	; 36
    3384:	44 ef       	ldi	r20, 0xF4	; 244
    3386:	50 e0       	ldi	r21, 0x00	; 0
    3388:	60 e0       	ldi	r22, 0x00	; 0
    338a:	87 e2       	ldi	r24, 0x27	; 39
    338c:	0e 94 10 25 	call	0x4a20	; 0x4a20 <twiCreate>
    3390:	90 93 3f 16 	sts	0x163F, r25	; 0x80163f <_hih8120Handler+0x1>
    3394:	80 93 3e 16 	sts	0x163E, r24	; 0x80163e <_hih8120Handler>
    3398:	21 e0       	ldi	r18, 0x01	; 1
    339a:	89 2b       	or	r24, r25
    339c:	09 f0       	breq	.+2      	; 0x33a0 <hih8120_initialise+0x28>
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	82 2f       	mov	r24, r18
    33a2:	1f 91       	pop	r17
    33a4:	0f 91       	pop	r16
    33a6:	08 95       	ret

000033a8 <hih8120_wakeup>:
    33a8:	80 91 3e 16 	lds	r24, 0x163E	; 0x80163e <_hih8120Handler>
    33ac:	90 91 3f 16 	lds	r25, 0x163F	; 0x80163f <_hih8120Handler+0x1>
    33b0:	00 97       	sbiw	r24, 0x00	; 0
    33b2:	59 f0       	breq	.+22     	; 0x33ca <hih8120_wakeup+0x22>
    33b4:	40 e0       	ldi	r20, 0x00	; 0
    33b6:	60 e0       	ldi	r22, 0x00	; 0
    33b8:	70 e0       	ldi	r23, 0x00	; 0
    33ba:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <twiTransmit>
    33be:	84 30       	cpi	r24, 0x04	; 4
    33c0:	31 f4       	brne	.+12     	; 0x33ce <hih8120_wakeup+0x26>
    33c2:	10 92 3d 16 	sts	0x163D, r1	; 0x80163d <_measuringIsReady>
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	08 95       	ret
    33ca:	82 e0       	ldi	r24, 0x02	; 2
    33cc:	08 95       	ret
    33ce:	83 e0       	ldi	r24, 0x03	; 3
    33d0:	08 95       	ret

000033d2 <hih8120_measure>:
    33d2:	80 91 3e 16 	lds	r24, 0x163E	; 0x80163e <_hih8120Handler>
    33d6:	90 91 3f 16 	lds	r25, 0x163F	; 0x80163f <_hih8120Handler+0x1>
    33da:	00 97       	sbiw	r24, 0x00	; 0
    33dc:	39 f0       	breq	.+14     	; 0x33ec <hih8120_measure+0x1a>
    33de:	64 e0       	ldi	r22, 0x04	; 4
    33e0:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <twiReceive>
    33e4:	85 30       	cpi	r24, 0x05	; 5
    33e6:	21 f0       	breq	.+8      	; 0x33f0 <hih8120_measure+0x1e>
    33e8:	83 e0       	ldi	r24, 0x03	; 3
    33ea:	08 95       	ret
    33ec:	82 e0       	ldi	r24, 0x02	; 2
    33ee:	08 95       	ret
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	08 95       	ret

000033f4 <hih8120_getHumidity>:
    33f4:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    33f8:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    33fc:	80 e0       	ldi	r24, 0x00	; 0
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <__floatunsisf>
    3404:	20 e0       	ldi	r18, 0x00	; 0
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	48 ec       	ldi	r20, 0xC8	; 200
    340a:	52 e4       	ldi	r21, 0x42	; 66
    340c:	0e 94 45 28 	call	0x508a	; 0x508a <__mulsf3>
    3410:	20 e0       	ldi	r18, 0x00	; 0
    3412:	38 ef       	ldi	r19, 0xF8	; 248
    3414:	4f e7       	ldi	r20, 0x7F	; 127
    3416:	56 e4       	ldi	r21, 0x46	; 70
    3418:	0c 94 1e 27 	jmp	0x4e3c	; 0x4e3c <__divsf3>
    341c:	08 95       	ret

0000341e <hih8120_getHumidityPercent_x10>:
    341e:	ea df       	rcall	.-44     	; 0x33f4 <hih8120_getHumidity>
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	40 e2       	ldi	r20, 0x20	; 32
    3426:	51 e4       	ldi	r21, 0x41	; 65
    3428:	0e 94 45 28 	call	0x508a	; 0x508a <__mulsf3>
    342c:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <__fixunssfsi>
    3430:	cb 01       	movw	r24, r22
    3432:	08 95       	ret

00003434 <hih8120_getTemperature>:
    3434:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3438:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <__floatunsisf>
    3444:	20 e0       	ldi	r18, 0x00	; 0
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	45 e2       	ldi	r20, 0x25	; 37
    344a:	53 e4       	ldi	r21, 0x43	; 67
    344c:	0e 94 45 28 	call	0x508a	; 0x508a <__mulsf3>
    3450:	20 e0       	ldi	r18, 0x00	; 0
    3452:	38 ef       	ldi	r19, 0xF8	; 248
    3454:	4f e7       	ldi	r20, 0x7F	; 127
    3456:	56 e4       	ldi	r21, 0x46	; 70
    3458:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <__divsf3>
    345c:	20 e0       	ldi	r18, 0x00	; 0
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	40 e2       	ldi	r20, 0x20	; 32
    3462:	52 e4       	ldi	r21, 0x42	; 66
    3464:	0c 94 b9 26 	jmp	0x4d72	; 0x4d72 <__subsf3>
    3468:	08 95       	ret

0000346a <hih8120_getTemperature_x10>:
    346a:	e4 df       	rcall	.-56     	; 0x3434 <hih8120_getTemperature>
    346c:	20 e0       	ldi	r18, 0x00	; 0
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	40 e2       	ldi	r20, 0x20	; 32
    3472:	51 e4       	ldi	r21, 0x41	; 65
    3474:	0e 94 45 28 	call	0x508a	; 0x508a <__mulsf3>
    3478:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <__fixsfsi>
    347c:	cb 01       	movw	r24, r22
    347e:	08 95       	ret

00003480 <_serialCallBack>:
    3480:	0f 93       	push	r16
    3482:	1f 93       	push	r17
    3484:	cf 93       	push	r28
    3486:	df 93       	push	r29
    3488:	1f 92       	push	r1
    348a:	1f 92       	push	r1
    348c:	cd b7       	in	r28, 0x3d	; 61
    348e:	de b7       	in	r29, 0x3e	; 62
    3490:	8c 01       	movw	r16, r24
    3492:	19 82       	std	Y+1, r1	; 0x01
    3494:	2d c0       	rjmp	.+90     	; 0x34f0 <_serialCallBack+0x70>
    3496:	e0 91 77 16 	lds	r30, 0x1677	; 0x801677 <rec_buf_inp.2878>
    349a:	ec 32       	cpi	r30, 0x2C	; 44
    349c:	50 f4       	brcc	.+20     	; 0x34b2 <_serialCallBack+0x32>
    349e:	81 e0       	ldi	r24, 0x01	; 1
    34a0:	8e 0f       	add	r24, r30
    34a2:	80 93 77 16 	sts	0x1677, r24	; 0x801677 <rec_buf_inp.2878>
    34a6:	f0 e0       	ldi	r31, 0x00	; 0
    34a8:	e7 55       	subi	r30, 0x57	; 87
    34aa:	f9 4e       	sbci	r31, 0xE9	; 233
    34ac:	8a 81       	ldd	r24, Y+2	; 0x02
    34ae:	80 83       	st	Z, r24
    34b0:	02 c0       	rjmp	.+4      	; 0x34b6 <_serialCallBack+0x36>
    34b2:	10 92 77 16 	sts	0x1677, r1	; 0x801677 <rec_buf_inp.2878>
    34b6:	8a 81       	ldd	r24, Y+2	; 0x02
    34b8:	8a 30       	cpi	r24, 0x0A	; 10
    34ba:	d1 f4       	brne	.+52     	; 0x34f0 <_serialCallBack+0x70>
    34bc:	40 91 77 16 	lds	r20, 0x1677	; 0x801677 <rec_buf_inp.2878>
    34c0:	50 e0       	ldi	r21, 0x00	; 0
    34c2:	fa 01       	movw	r30, r20
    34c4:	e9 55       	subi	r30, 0x59	; 89
    34c6:	f9 4e       	sbci	r31, 0xE9	; 233
    34c8:	10 82       	st	Z, r1
    34ca:	41 50       	subi	r20, 0x01	; 1
    34cc:	51 09       	sbc	r21, r1
    34ce:	9e 01       	movw	r18, r28
    34d0:	2f 5f       	subi	r18, 0xFF	; 255
    34d2:	3f 4f       	sbci	r19, 0xFF	; 255
    34d4:	69 ea       	ldi	r22, 0xA9	; 169
    34d6:	76 e1       	ldi	r23, 0x16	; 22
    34d8:	80 91 7a 16 	lds	r24, 0x167A	; 0x80167a <_serialReplyBufferHandle>
    34dc:	90 91 7b 16 	lds	r25, 0x167B	; 0x80167b <_serialReplyBufferHandle+0x1>
    34e0:	0e 94 c8 0a 	call	0x1590	; 0x1590 <xStreamBufferSendFromISR>
    34e4:	89 81       	ldd	r24, Y+1	; 0x01
    34e6:	81 11       	cpse	r24, r1
    34e8:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <vPortYield>
    34ec:	10 92 77 16 	sts	0x1677, r1	; 0x801677 <rec_buf_inp.2878>
    34f0:	be 01       	movw	r22, r28
    34f2:	6e 5f       	subi	r22, 0xFE	; 254
    34f4:	7f 4f       	sbci	r23, 0xFF	; 255
    34f6:	c8 01       	movw	r24, r16
    34f8:	10 d6       	rcall	.+3104   	; 0x411a <serial_getByte>
    34fa:	88 23       	and	r24, r24
    34fc:	61 f2       	breq	.-104    	; 0x3496 <_serialCallBack+0x16>
    34fe:	0f 90       	pop	r0
    3500:	0f 90       	pop	r0
    3502:	df 91       	pop	r29
    3504:	cf 91       	pop	r28
    3506:	1f 91       	pop	r17
    3508:	0f 91       	pop	r16
    350a:	08 95       	ret

0000350c <_uploadMessage>:
    350c:	0f 93       	push	r16
    350e:	1f 93       	push	r17
    3510:	cf 93       	push	r28
    3512:	df 93       	push	r29
    3514:	8c 01       	movw	r16, r24
    3516:	eb 01       	movw	r28, r22
    3518:	80 91 7a 16 	lds	r24, 0x167A	; 0x80167a <_serialReplyBufferHandle>
    351c:	90 91 7b 16 	lds	r25, 0x167B	; 0x80167b <_serialReplyBufferHandle+0x1>
    3520:	0e 94 d5 09 	call	0x13aa	; 0x13aa <xStreamBufferReset>
    3524:	b8 01       	movw	r22, r16
    3526:	80 e4       	ldi	r24, 0x40	; 64
    3528:	96 e1       	ldi	r25, 0x16	; 22
    352a:	0e 94 37 2a 	call	0x546e	; 0x546e <strcpy>
    352e:	20 97       	sbiw	r28, 0x00	; 0
    3530:	79 f0       	breq	.+30     	; 0x3550 <_uploadMessage+0x44>
    3532:	e0 e4       	ldi	r30, 0x40	; 64
    3534:	f6 e1       	ldi	r31, 0x16	; 22
    3536:	01 90       	ld	r0, Z+
    3538:	00 20       	and	r0, r0
    353a:	e9 f7       	brne	.-6      	; 0x3536 <_uploadMessage+0x2a>
    353c:	31 97       	sbiw	r30, 0x01	; 1
    353e:	80 e2       	ldi	r24, 0x20	; 32
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	91 83       	std	Z+1, r25	; 0x01
    3544:	80 83       	st	Z, r24
    3546:	be 01       	movw	r22, r28
    3548:	80 e4       	ldi	r24, 0x40	; 64
    354a:	96 e1       	ldi	r25, 0x16	; 22
    354c:	0e 94 2c 2a 	call	0x5458	; 0x5458 <strcat>
    3550:	e0 e4       	ldi	r30, 0x40	; 64
    3552:	f6 e1       	ldi	r31, 0x16	; 22
    3554:	df 01       	movw	r26, r30
    3556:	0d 90       	ld	r0, X+
    3558:	00 20       	and	r0, r0
    355a:	e9 f7       	brne	.-6      	; 0x3556 <_uploadMessage+0x4a>
    355c:	11 97       	sbiw	r26, 0x01	; 1
    355e:	8d e0       	ldi	r24, 0x0D	; 13
    3560:	9a e0       	ldi	r25, 0x0A	; 10
    3562:	11 96       	adiw	r26, 0x01	; 1
    3564:	9c 93       	st	X, r25
    3566:	8e 93       	st	-X, r24
    3568:	12 96       	adiw	r26, 0x02	; 2
    356a:	1c 92       	st	X, r1
    356c:	01 90       	ld	r0, Z+
    356e:	00 20       	and	r0, r0
    3570:	e9 f7       	brne	.-6      	; 0x356c <_uploadMessage+0x60>
    3572:	31 97       	sbiw	r30, 0x01	; 1
    3574:	e0 54       	subi	r30, 0x40	; 64
    3576:	f6 41       	sbci	r31, 0x16	; 22
    3578:	ae 2f       	mov	r26, r30
    357a:	80 e4       	ldi	r24, 0x40	; 64
    357c:	96 e1       	ldi	r25, 0x16	; 22
    357e:	ac 01       	movw	r20, r24
    3580:	6a 2f       	mov	r22, r26
    3582:	80 91 7c 16 	lds	r24, 0x167C	; 0x80167c <_rn2483_serial>
    3586:	90 91 7d 16 	lds	r25, 0x167D	; 0x80167d <_rn2483_serial+0x1>
    358a:	72 d5       	rcall	.+2788   	; 0x4070 <serial_sendBytes>
    358c:	81 11       	cpse	r24, r1
    358e:	11 c0       	rjmp	.+34     	; 0x35b2 <_uploadMessage+0xa6>
    3590:	08 e2       	ldi	r16, 0x28	; 40
    3592:	15 e0       	ldi	r17, 0x05	; 5
    3594:	20 e0       	ldi	r18, 0x00	; 0
    3596:	30 e0       	ldi	r19, 0x00	; 0
    3598:	4d e2       	ldi	r20, 0x2D	; 45
    359a:	50 e0       	ldi	r21, 0x00	; 0
    359c:	63 e0       	ldi	r22, 0x03	; 3
    359e:	77 e1       	ldi	r23, 0x17	; 23
    35a0:	80 91 7a 16 	lds	r24, 0x167A	; 0x80167a <_serialReplyBufferHandle>
    35a4:	90 91 7b 16 	lds	r25, 0x167B	; 0x80167b <_serialReplyBufferHandle+0x1>
    35a8:	0e 94 0c 0b 	call	0x1618	; 0x1618 <xStreamBufferReceive>
    35ac:	83 e0       	ldi	r24, 0x03	; 3
    35ae:	97 e1       	ldi	r25, 0x17	; 23
    35b0:	02 c0       	rjmp	.+4      	; 0x35b6 <_uploadMessage+0xaa>
    35b2:	80 e0       	ldi	r24, 0x00	; 0
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	df 91       	pop	r29
    35b8:	cf 91       	pop	r28
    35ba:	1f 91       	pop	r17
    35bc:	0f 91       	pop	r16
    35be:	08 95       	ret

000035c0 <_reply2ReturnCode>:
    35c0:	2f 92       	push	r2
    35c2:	3f 92       	push	r3
    35c4:	4f 92       	push	r4
    35c6:	5f 92       	push	r5
    35c8:	6f 92       	push	r6
    35ca:	7f 92       	push	r7
    35cc:	8f 92       	push	r8
    35ce:	9f 92       	push	r9
    35d0:	af 92       	push	r10
    35d2:	bf 92       	push	r11
    35d4:	cf 92       	push	r12
    35d6:	df 92       	push	r13
    35d8:	ef 92       	push	r14
    35da:	ff 92       	push	r15
    35dc:	0f 93       	push	r16
    35de:	1f 93       	push	r17
    35e0:	cf 93       	push	r28
    35e2:	df 93       	push	r29
    35e4:	5c 01       	movw	r10, r24
    35e6:	fc 01       	movw	r30, r24
    35e8:	01 90       	ld	r0, Z+
    35ea:	00 20       	and	r0, r0
    35ec:	e9 f7       	brne	.-6      	; 0x35e8 <_reply2ReturnCode+0x28>
    35ee:	31 97       	sbiw	r30, 0x01	; 1
    35f0:	6f 01       	movw	r12, r30
    35f2:	c8 1a       	sub	r12, r24
    35f4:	d9 0a       	sbc	r13, r25
    35f6:	5c 2c       	mov	r5, r12
    35f8:	0f 2e       	mov	r0, r31
    35fa:	fd e4       	ldi	r31, 0x4D	; 77
    35fc:	8f 2e       	mov	r8, r31
    35fe:	f7 e0       	ldi	r31, 0x07	; 7
    3600:	9f 2e       	mov	r9, r31
    3602:	f0 2d       	mov	r31, r0
    3604:	e1 2c       	mov	r14, r1
    3606:	f1 2c       	mov	r15, r1
    3608:	4c 2c       	mov	r4, r12
    360a:	37 01       	movw	r6, r14
    360c:	f4 01       	movw	r30, r8
    360e:	01 81       	ldd	r16, Z+1	; 0x01
    3610:	12 81       	ldd	r17, Z+2	; 0x02
    3612:	e8 01       	movw	r28, r16
    3614:	09 90       	ld	r0, Y+
    3616:	00 20       	and	r0, r0
    3618:	e9 f7       	brne	.-6      	; 0x3614 <_reply2ReturnCode+0x54>
    361a:	21 97       	sbiw	r28, 0x01	; 1
    361c:	c0 1b       	sub	r28, r16
    361e:	d1 0b       	sbc	r29, r17
    3620:	3c 2e       	mov	r3, r28
    3622:	f9 e0       	ldi	r31, 0x09	; 9
    3624:	cf 16       	cp	r12, r31
    3626:	d1 04       	cpc	r13, r1
    3628:	58 f0       	brcs	.+22     	; 0x3640 <_reply2ReturnCode+0x80>
    362a:	f4 01       	movw	r30, r8
    362c:	20 80       	ld	r2, Z
    362e:	fe e0       	ldi	r31, 0x0E	; 14
    3630:	2f 12       	cpse	r2, r31
    3632:	06 c0       	rjmp	.+12     	; 0x3640 <_reply2ReturnCode+0x80>
    3634:	b8 01       	movw	r22, r16
    3636:	c5 01       	movw	r24, r10
    3638:	0e 94 07 2a 	call	0x540e	; 0x540e <strcasestr>
    363c:	89 2b       	or	r24, r25
    363e:	09 f5       	brne	.+66     	; 0x3682 <_reply2ReturnCode+0xc2>
    3640:	44 2d       	mov	r20, r4
    3642:	35 14       	cp	r3, r5
    3644:	08 f4       	brcc	.+2      	; 0x3648 <_reply2ReturnCode+0x88>
    3646:	4c 2f       	mov	r20, r28
    3648:	50 e0       	ldi	r21, 0x00	; 0
    364a:	b8 01       	movw	r22, r16
    364c:	c5 01       	movw	r24, r10
    364e:	0e 94 3e 2a 	call	0x547c	; 0x547c <strncasecmp>
    3652:	89 2b       	or	r24, r25
    3654:	49 f4       	brne	.+18     	; 0x3668 <_reply2ReturnCode+0xa8>
    3656:	f3 01       	movw	r30, r6
    3658:	ee 0f       	add	r30, r30
    365a:	ff 1f       	adc	r31, r31
    365c:	e6 0d       	add	r30, r6
    365e:	f7 1d       	adc	r31, r7
    3660:	e3 5b       	subi	r30, 0xB3	; 179
    3662:	f8 4f       	sbci	r31, 0xF8	; 248
    3664:	20 80       	ld	r2, Z
    3666:	0d c0       	rjmp	.+26     	; 0x3682 <_reply2ReturnCode+0xc2>
    3668:	8f ef       	ldi	r24, 0xFF	; 255
    366a:	e8 1a       	sub	r14, r24
    366c:	f8 0a       	sbc	r15, r24
    366e:	e3 e0       	ldi	r30, 0x03	; 3
    3670:	8e 0e       	add	r8, r30
    3672:	91 1c       	adc	r9, r1
    3674:	f1 e1       	ldi	r31, 0x11	; 17
    3676:	ef 16       	cp	r14, r31
    3678:	f1 04       	cpc	r15, r1
    367a:	39 f6       	brne	.-114    	; 0x360a <_reply2ReturnCode+0x4a>
    367c:	68 94       	set
    367e:	22 24       	eor	r2, r2
    3680:	24 f8       	bld	r2, 4
    3682:	82 2d       	mov	r24, r2
    3684:	df 91       	pop	r29
    3686:	cf 91       	pop	r28
    3688:	1f 91       	pop	r17
    368a:	0f 91       	pop	r16
    368c:	ff 90       	pop	r15
    368e:	ef 90       	pop	r14
    3690:	df 90       	pop	r13
    3692:	cf 90       	pop	r12
    3694:	bf 90       	pop	r11
    3696:	af 90       	pop	r10
    3698:	9f 90       	pop	r9
    369a:	8f 90       	pop	r8
    369c:	7f 90       	pop	r7
    369e:	6f 90       	pop	r6
    36a0:	5f 90       	pop	r5
    36a2:	4f 90       	pop	r4
    36a4:	3f 90       	pop	r3
    36a6:	2f 90       	pop	r2
    36a8:	08 95       	ret

000036aa <_uploadMessageRc>:
    36aa:	30 df       	rcall	.-416    	; 0x350c <_uploadMessage>
    36ac:	89 cf       	rjmp	.-238    	; 0x35c0 <_reply2ReturnCode>
    36ae:	08 95       	ret

000036b0 <lora_driver_flushBuffers>:
    36b0:	80 91 7a 16 	lds	r24, 0x167A	; 0x80167a <_serialReplyBufferHandle>
    36b4:	90 91 7b 16 	lds	r25, 0x167B	; 0x80167b <_serialReplyBufferHandle+0x1>
    36b8:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <xStreamBufferReset>
    36bc:	08 95       	ret

000036be <lora_driver_initialise>:
    36be:	8f 92       	push	r8
    36c0:	9f 92       	push	r9
    36c2:	af 92       	push	r10
    36c4:	cf 92       	push	r12
    36c6:	ef 92       	push	r14
    36c8:	0f 93       	push	r16
    36ca:	1f 93       	push	r17
    36cc:	cf 93       	push	r28
    36ce:	c8 2f       	mov	r28, r24
    36d0:	8b 01       	movw	r16, r22
    36d2:	41 e0       	ldi	r20, 0x01	; 1
    36d4:	60 e0       	ldi	r22, 0x00	; 0
    36d6:	70 e0       	ldi	r23, 0x00	; 0
    36d8:	88 ec       	ldi	r24, 0xC8	; 200
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	0e 94 a3 09 	call	0x1346	; 0x1346 <xStreamBufferGenericCreate>
    36e0:	90 93 7b 16 	sts	0x167B, r25	; 0x80167b <_serialReplyBufferHandle+0x1>
    36e4:	80 93 7a 16 	sts	0x167A, r24	; 0x80167a <_serialReplyBufferHandle>
    36e8:	10 93 79 16 	sts	0x1679, r17	; 0x801679 <_downlinkMessageBuffer+0x1>
    36ec:	00 93 78 16 	sts	0x1678, r16	; 0x801678 <_downlinkMessageBuffer>
    36f0:	0f 2e       	mov	r0, r31
    36f2:	f0 e4       	ldi	r31, 0x40	; 64
    36f4:	8f 2e       	mov	r8, r31
    36f6:	fa e1       	ldi	r31, 0x1A	; 26
    36f8:	9f 2e       	mov	r9, r31
    36fa:	f0 2d       	mov	r31, r0
    36fc:	68 94       	set
    36fe:	aa 24       	eor	r10, r10
    3700:	a6 f8       	bld	r10, 6
    3702:	68 94       	set
    3704:	cc 24       	eor	r12, r12
    3706:	c6 f8       	bld	r12, 6
    3708:	e1 2c       	mov	r14, r1
    370a:	00 e0       	ldi	r16, 0x00	; 0
    370c:	23 e0       	ldi	r18, 0x03	; 3
    370e:	40 e0       	ldi	r20, 0x00	; 0
    3710:	51 ee       	ldi	r21, 0xE1	; 225
    3712:	60 e0       	ldi	r22, 0x00	; 0
    3714:	70 e0       	ldi	r23, 0x00	; 0
    3716:	8c 2f       	mov	r24, r28
    3718:	de d3       	rcall	.+1980   	; 0x3ed6 <serial_create>
    371a:	90 93 7d 16 	sts	0x167D, r25	; 0x80167d <_rn2483_serial+0x1>
    371e:	80 93 7c 16 	sts	0x167C, r24	; 0x80167c <_rn2483_serial>
    3722:	e7 e0       	ldi	r30, 0x07	; 7
    3724:	f1 e0       	ldi	r31, 0x01	; 1
    3726:	80 81       	ld	r24, Z
    3728:	80 61       	ori	r24, 0x10	; 16
    372a:	80 83       	st	Z, r24
    372c:	cf 91       	pop	r28
    372e:	1f 91       	pop	r17
    3730:	0f 91       	pop	r16
    3732:	ef 90       	pop	r14
    3734:	cf 90       	pop	r12
    3736:	af 90       	pop	r10
    3738:	9f 90       	pop	r9
    373a:	8f 90       	pop	r8
    373c:	08 95       	ret

0000373e <lora_driver_resetRn2483>:
    373e:	88 23       	and	r24, r24
    3740:	31 f0       	breq	.+12     	; 0x374e <lora_driver_resetRn2483+0x10>
    3742:	e8 e0       	ldi	r30, 0x08	; 8
    3744:	f1 e0       	ldi	r31, 0x01	; 1
    3746:	80 81       	ld	r24, Z
    3748:	8f 7e       	andi	r24, 0xEF	; 239
    374a:	80 83       	st	Z, r24
    374c:	08 95       	ret
    374e:	e8 e0       	ldi	r30, 0x08	; 8
    3750:	f1 e0       	ldi	r31, 0x01	; 1
    3752:	80 81       	ld	r24, Z
    3754:	80 61       	ori	r24, 0x10	; 16
    3756:	80 83       	st	Z, r24
    3758:	08 95       	ret

0000375a <lora_driver_rn2483FactoryReset>:
    375a:	60 e0       	ldi	r22, 0x00	; 0
    375c:	70 e0       	ldi	r23, 0x00	; 0
    375e:	83 ed       	ldi	r24, 0xD3	; 211
    3760:	94 e0       	ldi	r25, 0x04	; 4
    3762:	d4 de       	rcall	.-600    	; 0x350c <_uploadMessage>
    3764:	e3 e0       	ldi	r30, 0x03	; 3
    3766:	f7 e1       	ldi	r31, 0x17	; 23
    3768:	01 90       	ld	r0, Z+
    376a:	00 20       	and	r0, r0
    376c:	e9 f7       	brne	.-6      	; 0x3768 <lora_driver_rn2483FactoryReset+0xe>
    376e:	31 97       	sbiw	r30, 0x01	; 1
    3770:	e3 50       	subi	r30, 0x03	; 3
    3772:	f7 41       	sbci	r31, 0x17	; 23
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	75 97       	sbiw	r30, 0x15	; 21
    3778:	08 f0       	brcs	.+2      	; 0x377c <lora_driver_rn2483FactoryReset+0x22>
    377a:	80 e0       	ldi	r24, 0x00	; 0
    377c:	08 95       	ret

0000377e <lora_driver_getRn2483Hweui>:
    377e:	cf 93       	push	r28
    3780:	df 93       	push	r29
    3782:	ec 01       	movw	r28, r24
    3784:	60 e0       	ldi	r22, 0x00	; 0
    3786:	70 e0       	ldi	r23, 0x00	; 0
    3788:	84 ee       	ldi	r24, 0xE4	; 228
    378a:	94 e0       	ldi	r25, 0x04	; 4
    378c:	bf de       	rcall	.-642    	; 0x350c <_uploadMessage>
    378e:	e3 e0       	ldi	r30, 0x03	; 3
    3790:	f7 e1       	ldi	r31, 0x17	; 23
    3792:	01 90       	ld	r0, Z+
    3794:	00 20       	and	r0, r0
    3796:	e9 f7       	brne	.-6      	; 0x3792 <lora_driver_getRn2483Hweui+0x14>
    3798:	e4 51       	subi	r30, 0x14	; 20
    379a:	f7 41       	sbci	r31, 0x17	; 23
    379c:	39 f4       	brne	.+14     	; 0x37ac <lora_driver_getRn2483Hweui+0x2e>
    379e:	63 e0       	ldi	r22, 0x03	; 3
    37a0:	77 e1       	ldi	r23, 0x17	; 23
    37a2:	ce 01       	movw	r24, r28
    37a4:	0e 94 37 2a 	call	0x546e	; 0x546e <strcpy>
    37a8:	80 e0       	ldi	r24, 0x00	; 0
    37aa:	02 c0       	rjmp	.+4      	; 0x37b0 <lora_driver_getRn2483Hweui+0x32>
    37ac:	18 82       	st	Y, r1
    37ae:	81 e0       	ldi	r24, 0x01	; 1
    37b0:	df 91       	pop	r29
    37b2:	cf 91       	pop	r28
    37b4:	08 95       	ret

000037b6 <lora_driver_setDeviceIdentifier>:
    37b6:	fc 01       	movw	r30, r24
    37b8:	01 90       	ld	r0, Z+
    37ba:	00 20       	and	r0, r0
    37bc:	e9 f7       	brne	.-6      	; 0x37b8 <lora_driver_setDeviceIdentifier+0x2>
    37be:	9f 01       	movw	r18, r30
    37c0:	21 51       	subi	r18, 0x11	; 17
    37c2:	31 09       	sbc	r19, r1
    37c4:	28 17       	cp	r18, r24
    37c6:	39 07       	cpc	r19, r25
    37c8:	29 f4       	brne	.+10     	; 0x37d4 <lora_driver_setDeviceIdentifier+0x1e>
    37ca:	bc 01       	movw	r22, r24
    37cc:	82 e1       	ldi	r24, 0x12	; 18
    37ce:	95 e0       	ldi	r25, 0x05	; 5
    37d0:	6c cf       	rjmp	.-296    	; 0x36aa <_uploadMessageRc>
    37d2:	08 95       	ret
    37d4:	89 e0       	ldi	r24, 0x09	; 9
    37d6:	08 95       	ret

000037d8 <lora_driver_setApplicationIdentifier>:
    37d8:	fc 01       	movw	r30, r24
    37da:	01 90       	ld	r0, Z+
    37dc:	00 20       	and	r0, r0
    37de:	e9 f7       	brne	.-6      	; 0x37da <lora_driver_setApplicationIdentifier+0x2>
    37e0:	9f 01       	movw	r18, r30
    37e2:	21 51       	subi	r18, 0x11	; 17
    37e4:	31 09       	sbc	r19, r1
    37e6:	28 17       	cp	r18, r24
    37e8:	39 07       	cpc	r19, r25
    37ea:	29 f4       	brne	.+10     	; 0x37f6 <lora_driver_setApplicationIdentifier+0x1e>
    37ec:	bc 01       	movw	r22, r24
    37ee:	81 e2       	ldi	r24, 0x21	; 33
    37f0:	95 e0       	ldi	r25, 0x05	; 5
    37f2:	5b cf       	rjmp	.-330    	; 0x36aa <_uploadMessageRc>
    37f4:	08 95       	ret
    37f6:	89 e0       	ldi	r24, 0x09	; 9
    37f8:	08 95       	ret

000037fa <lora_driver_setApplicationKey>:
    37fa:	fc 01       	movw	r30, r24
    37fc:	01 90       	ld	r0, Z+
    37fe:	00 20       	and	r0, r0
    3800:	e9 f7       	brne	.-6      	; 0x37fc <lora_driver_setApplicationKey+0x2>
    3802:	9f 01       	movw	r18, r30
    3804:	21 52       	subi	r18, 0x21	; 33
    3806:	31 09       	sbc	r19, r1
    3808:	28 17       	cp	r18, r24
    380a:	39 07       	cpc	r19, r25
    380c:	29 f4       	brne	.+10     	; 0x3818 <lora_driver_setApplicationKey+0x1e>
    380e:	bc 01       	movw	r22, r24
    3810:	80 e3       	ldi	r24, 0x30	; 48
    3812:	95 e0       	ldi	r25, 0x05	; 5
    3814:	4a cf       	rjmp	.-364    	; 0x36aa <_uploadMessageRc>
    3816:	08 95       	ret
    3818:	89 e0       	ldi	r24, 0x09	; 9
    381a:	08 95       	ret

0000381c <lora_driver_saveMac>:
    381c:	60 e0       	ldi	r22, 0x00	; 0
    381e:	70 e0       	ldi	r23, 0x00	; 0
    3820:	8f e6       	ldi	r24, 0x6F	; 111
    3822:	95 e0       	ldi	r25, 0x05	; 5
    3824:	42 cf       	rjmp	.-380    	; 0x36aa <_uploadMessageRc>
    3826:	08 95       	ret

00003828 <lora_driver_join>:
    3828:	0f 93       	push	r16
    382a:	1f 93       	push	r17
    382c:	e8 2f       	mov	r30, r24
    382e:	f0 e0       	ldi	r31, 0x00	; 0
    3830:	ee 0f       	add	r30, r30
    3832:	ff 1f       	adc	r31, r31
    3834:	e7 5b       	subi	r30, 0xB7	; 183
    3836:	f8 4f       	sbci	r31, 0xF8	; 248
    3838:	60 81       	ld	r22, Z
    383a:	71 81       	ldd	r23, Z+1	; 0x01
    383c:	88 e7       	ldi	r24, 0x78	; 120
    383e:	95 e0       	ldi	r25, 0x05	; 5
    3840:	34 df       	rcall	.-408    	; 0x36aa <_uploadMessageRc>
    3842:	81 11       	cpse	r24, r1
    3844:	14 c0       	rjmp	.+40     	; 0x386e <lora_driver_join+0x46>
    3846:	08 e2       	ldi	r16, 0x28	; 40
    3848:	15 e0       	ldi	r17, 0x05	; 5
    384a:	20 e0       	ldi	r18, 0x00	; 0
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	4d e2       	ldi	r20, 0x2D	; 45
    3850:	50 e0       	ldi	r21, 0x00	; 0
    3852:	63 e0       	ldi	r22, 0x03	; 3
    3854:	77 e1       	ldi	r23, 0x17	; 23
    3856:	80 91 7a 16 	lds	r24, 0x167A	; 0x80167a <_serialReplyBufferHandle>
    385a:	90 91 7b 16 	lds	r25, 0x167B	; 0x80167b <_serialReplyBufferHandle+0x1>
    385e:	0e 94 0c 0b 	call	0x1618	; 0x1618 <xStreamBufferReceive>
    3862:	88 23       	and	r24, r24
    3864:	21 f0       	breq	.+8      	; 0x386e <lora_driver_join+0x46>
    3866:	83 e0       	ldi	r24, 0x03	; 3
    3868:	97 e1       	ldi	r25, 0x17	; 23
    386a:	aa de       	rcall	.-684    	; 0x35c0 <_reply2ReturnCode>
    386c:	03 c0       	rjmp	.+6      	; 0x3874 <lora_driver_join+0x4c>
    386e:	83 e0       	ldi	r24, 0x03	; 3
    3870:	97 e1       	ldi	r25, 0x17	; 23
    3872:	a6 de       	rcall	.-692    	; 0x35c0 <_reply2ReturnCode>
    3874:	1f 91       	pop	r17
    3876:	0f 91       	pop	r16
    3878:	08 95       	ret

0000387a <lora_driver_sendUploadMessage>:
    387a:	0f 93       	push	r16
    387c:	1f 93       	push	r17
    387e:	cf 93       	push	r28
    3880:	df 93       	push	r29
    3882:	1f 92       	push	r1
    3884:	cd b7       	in	r28, 0x3d	; 61
    3886:	de b7       	in	r29, 0x3e	; 62
    3888:	db 01       	movw	r26, r22
    388a:	11 96       	adiw	r26, 0x01	; 1
    388c:	9c 91       	ld	r25, X
    388e:	11 97       	sbiw	r26, 0x01	; 1
    3890:	95 31       	cpi	r25, 0x15	; 21
    3892:	08 f0       	brcs	.+2      	; 0x3896 <lora_driver_sendUploadMessage+0x1c>
    3894:	b4 c0       	rjmp	.+360    	; 0x39fe <lora_driver_sendUploadMessage+0x184>
    3896:	99 23       	and	r25, r25
    3898:	81 f1       	breq	.+96     	; 0x38fa <lora_driver_sendUploadMessage+0x80>
    389a:	60 e0       	ldi	r22, 0x00	; 0
    389c:	70 e0       	ldi	r23, 0x00	; 0
    389e:	27 2f       	mov	r18, r23
    38a0:	30 e0       	ldi	r19, 0x00	; 0
    38a2:	46 2f       	mov	r20, r22
    38a4:	50 e0       	ldi	r21, 0x00	; 0
    38a6:	fd 01       	movw	r30, r26
    38a8:	e4 0f       	add	r30, r20
    38aa:	f5 1f       	adc	r31, r21
    38ac:	92 81       	ldd	r25, Z+2	; 0x02
    38ae:	92 95       	swap	r25
    38b0:	9f 70       	andi	r25, 0x0F	; 15
    38b2:	9a 30       	cpi	r25, 0x0A	; 10
    38b4:	10 f0       	brcs	.+4      	; 0x38ba <lora_driver_sendUploadMessage+0x40>
    38b6:	99 5c       	subi	r25, 0xC9	; 201
    38b8:	01 c0       	rjmp	.+2      	; 0x38bc <lora_driver_sendUploadMessage+0x42>
    38ba:	90 5d       	subi	r25, 0xD0	; 208
    38bc:	f9 01       	movw	r30, r18
    38be:	ec 56       	subi	r30, 0x6C	; 108
    38c0:	f9 4e       	sbci	r31, 0xE9	; 233
    38c2:	90 83       	st	Z, r25
    38c4:	2f 5f       	subi	r18, 0xFF	; 255
    38c6:	3f 4f       	sbci	r19, 0xFF	; 255
    38c8:	fd 01       	movw	r30, r26
    38ca:	e4 0f       	add	r30, r20
    38cc:	f5 1f       	adc	r31, r21
    38ce:	92 81       	ldd	r25, Z+2	; 0x02
    38d0:	9f 70       	andi	r25, 0x0F	; 15
    38d2:	49 2f       	mov	r20, r25
    38d4:	50 e0       	ldi	r21, 0x00	; 0
    38d6:	4a 30       	cpi	r20, 0x0A	; 10
    38d8:	51 05       	cpc	r21, r1
    38da:	14 f0       	brlt	.+4      	; 0x38e0 <lora_driver_sendUploadMessage+0x66>
    38dc:	99 5c       	subi	r25, 0xC9	; 201
    38de:	01 c0       	rjmp	.+2      	; 0x38e2 <lora_driver_sendUploadMessage+0x68>
    38e0:	90 5d       	subi	r25, 0xD0	; 208
    38e2:	f9 01       	movw	r30, r18
    38e4:	ec 56       	subi	r30, 0x6C	; 108
    38e6:	f9 4e       	sbci	r31, 0xE9	; 233
    38e8:	90 83       	st	Z, r25
    38ea:	7e 5f       	subi	r23, 0xFE	; 254
    38ec:	6f 5f       	subi	r22, 0xFF	; 255
    38ee:	11 96       	adiw	r26, 0x01	; 1
    38f0:	9c 91       	ld	r25, X
    38f2:	11 97       	sbiw	r26, 0x01	; 1
    38f4:	69 17       	cp	r22, r25
    38f6:	98 f2       	brcs	.-90     	; 0x389e <lora_driver_sendUploadMessage+0x24>
    38f8:	01 c0       	rjmp	.+2      	; 0x38fc <lora_driver_sendUploadMessage+0x82>
    38fa:	70 e0       	ldi	r23, 0x00	; 0
    38fc:	e7 2f       	mov	r30, r23
    38fe:	f0 e0       	ldi	r31, 0x00	; 0
    3900:	ec 56       	subi	r30, 0x6C	; 108
    3902:	f9 4e       	sbci	r31, 0xE9	; 233
    3904:	10 82       	st	Z, r1
    3906:	4c 91       	ld	r20, X
    3908:	81 11       	cpse	r24, r1
    390a:	03 c0       	rjmp	.+6      	; 0x3912 <lora_driver_sendUploadMessage+0x98>
    390c:	81 e8       	ldi	r24, 0x81	; 129
    390e:	95 e0       	ldi	r25, 0x05	; 5
    3910:	02 c0       	rjmp	.+4      	; 0x3916 <lora_driver_sendUploadMessage+0x9c>
    3912:	83 e8       	ldi	r24, 0x83	; 131
    3914:	95 e0       	ldi	r25, 0x05	; 5
    3916:	24 e9       	ldi	r18, 0x94	; 148
    3918:	36 e1       	ldi	r19, 0x16	; 22
    391a:	3f 93       	push	r19
    391c:	2f 93       	push	r18
    391e:	1f 92       	push	r1
    3920:	4f 93       	push	r20
    3922:	9f 93       	push	r25
    3924:	8f 93       	push	r24
    3926:	87 e8       	ldi	r24, 0x87	; 135
    3928:	95 e0       	ldi	r25, 0x05	; 5
    392a:	9f 93       	push	r25
    392c:	8f 93       	push	r24
    392e:	86 ed       	ldi	r24, 0xD6	; 214
    3930:	96 e1       	ldi	r25, 0x16	; 22
    3932:	9f 93       	push	r25
    3934:	8f 93       	push	r24
    3936:	0e 94 99 2a 	call	0x5532	; 0x5532 <sprintf>
    393a:	60 e0       	ldi	r22, 0x00	; 0
    393c:	70 e0       	ldi	r23, 0x00	; 0
    393e:	86 ed       	ldi	r24, 0xD6	; 214
    3940:	96 e1       	ldi	r25, 0x16	; 22
    3942:	b3 de       	rcall	.-666    	; 0x36aa <_uploadMessageRc>
    3944:	0f b6       	in	r0, 0x3f	; 63
    3946:	f8 94       	cli
    3948:	de bf       	out	0x3e, r29	; 62
    394a:	0f be       	out	0x3f, r0	; 63
    394c:	cd bf       	out	0x3d, r28	; 61
    394e:	81 11       	cpse	r24, r1
    3950:	59 c0       	rjmp	.+178    	; 0x3a04 <lora_driver_sendUploadMessage+0x18a>
    3952:	08 e2       	ldi	r16, 0x28	; 40
    3954:	15 e0       	ldi	r17, 0x05	; 5
    3956:	20 e0       	ldi	r18, 0x00	; 0
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	4d e2       	ldi	r20, 0x2D	; 45
    395c:	50 e0       	ldi	r21, 0x00	; 0
    395e:	63 e0       	ldi	r22, 0x03	; 3
    3960:	77 e1       	ldi	r23, 0x17	; 23
    3962:	80 91 7a 16 	lds	r24, 0x167A	; 0x80167a <_serialReplyBufferHandle>
    3966:	90 91 7b 16 	lds	r25, 0x167B	; 0x80167b <_serialReplyBufferHandle+0x1>
    396a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <xStreamBufferReceive>
    396e:	88 23       	and	r24, r24
    3970:	09 f4       	brne	.+2      	; 0x3974 <lora_driver_sendUploadMessage+0xfa>
    3972:	47 c0       	rjmp	.+142    	; 0x3a02 <lora_driver_sendUploadMessage+0x188>
    3974:	83 e0       	ldi	r24, 0x03	; 3
    3976:	97 e1       	ldi	r25, 0x17	; 23
    3978:	23 de       	rcall	.-954    	; 0x35c0 <_reply2ReturnCode>
    397a:	8e 30       	cpi	r24, 0x0E	; 14
    397c:	09 f0       	breq	.+2      	; 0x3980 <lora_driver_sendUploadMessage+0x106>
    397e:	42 c0       	rjmp	.+132    	; 0x3a04 <lora_driver_sendUploadMessage+0x18a>
    3980:	87 e0       	ldi	r24, 0x07	; 7
    3982:	89 83       	std	Y+1, r24	; 0x01
    3984:	80 91 78 16 	lds	r24, 0x1678	; 0x801678 <_downlinkMessageBuffer>
    3988:	90 91 79 16 	lds	r25, 0x1679	; 0x801679 <_downlinkMessageBuffer+0x1>
    398c:	89 2b       	or	r24, r25
    398e:	a9 f1       	breq	.+106    	; 0x39fa <lora_driver_sendUploadMessage+0x180>
    3990:	be 01       	movw	r22, r28
    3992:	6f 5f       	subi	r22, 0xFF	; 255
    3994:	7f 4f       	sbci	r23, 0xFF	; 255
    3996:	83 e0       	ldi	r24, 0x03	; 3
    3998:	97 e1       	ldi	r25, 0x17	; 23
    399a:	68 d1       	rcall	.+720    	; 0x3c6c <decode_port_no>
    399c:	80 93 7e 16 	sts	0x167E, r24	; 0x80167e <_downlinkPayload>
    39a0:	e9 81       	ldd	r30, Y+1	; 0x01
    39a2:	f0 e0       	ldi	r31, 0x00	; 0
    39a4:	ed 5f       	subi	r30, 0xFD	; 253
    39a6:	f8 4e       	sbci	r31, 0xE8	; 232
    39a8:	df 01       	movw	r26, r30
    39aa:	0d 90       	ld	r0, X+
    39ac:	00 20       	and	r0, r0
    39ae:	e9 f7       	brne	.-6      	; 0x39aa <lora_driver_sendUploadMessage+0x130>
    39b0:	11 97       	sbiw	r26, 0x01	; 1
    39b2:	ae 1b       	sub	r26, r30
    39b4:	bf 0b       	sbc	r27, r31
    39b6:	aa 23       	and	r26, r26
    39b8:	91 f0       	breq	.+36     	; 0x39de <lora_driver_sendUploadMessage+0x164>
    39ba:	bb 27       	eor	r27, r27
    39bc:	cd 01       	movw	r24, r26
    39be:	01 97       	sbiw	r24, 0x01	; 1
    39c0:	9c 01       	movw	r18, r24
    39c2:	12 f4       	brpl	.+4      	; 0x39c8 <lora_driver_sendUploadMessage+0x14e>
    39c4:	2f 5f       	subi	r18, 0xFF	; 255
    39c6:	3f 4f       	sbci	r19, 0xFF	; 255
    39c8:	35 95       	asr	r19
    39ca:	27 95       	ror	r18
    39cc:	20 93 7f 16 	sts	0x167F, r18	; 0x80167f <_downlinkPayload+0x1>
    39d0:	af 01       	movw	r20, r30
    39d2:	4f 5f       	subi	r20, 0xFF	; 255
    39d4:	5f 4f       	sbci	r21, 0xFF	; 255
    39d6:	64 e1       	ldi	r22, 0x14	; 20
    39d8:	80 e8       	ldi	r24, 0x80	; 128
    39da:	96 e1       	ldi	r25, 0x16	; 22
    39dc:	73 d1       	rcall	.+742    	; 0x3cc4 <decode_hexadecimal_string_bytes>
    39de:	01 e0       	ldi	r16, 0x01	; 1
    39e0:	10 e0       	ldi	r17, 0x00	; 0
    39e2:	20 e0       	ldi	r18, 0x00	; 0
    39e4:	30 e0       	ldi	r19, 0x00	; 0
    39e6:	46 e1       	ldi	r20, 0x16	; 22
    39e8:	50 e0       	ldi	r21, 0x00	; 0
    39ea:	6e e7       	ldi	r22, 0x7E	; 126
    39ec:	76 e1       	ldi	r23, 0x16	; 22
    39ee:	80 91 78 16 	lds	r24, 0x1678	; 0x801678 <_downlinkMessageBuffer>
    39f2:	90 91 79 16 	lds	r25, 0x1679	; 0x801679 <_downlinkMessageBuffer+0x1>
    39f6:	0e 94 05 0a 	call	0x140a	; 0x140a <xStreamBufferSend>
    39fa:	8e e0       	ldi	r24, 0x0E	; 14
    39fc:	03 c0       	rjmp	.+6      	; 0x3a04 <lora_driver_sendUploadMessage+0x18a>
    39fe:	84 e1       	ldi	r24, 0x14	; 20
    3a00:	01 c0       	rjmp	.+2      	; 0x3a04 <lora_driver_sendUploadMessage+0x18a>
    3a02:	80 e0       	ldi	r24, 0x00	; 0
    3a04:	0f 90       	pop	r0
    3a06:	df 91       	pop	r29
    3a08:	cf 91       	pop	r28
    3a0a:	1f 91       	pop	r17
    3a0c:	0f 91       	pop	r16
    3a0e:	08 95       	ret

00003a10 <lora_driver_setAdaptiveDataRate>:
    3a10:	81 30       	cpi	r24, 0x01	; 1
    3a12:	19 f0       	breq	.+6      	; 0x3a1a <lora_driver_setAdaptiveDataRate+0xa>
    3a14:	67 e9       	ldi	r22, 0x97	; 151
    3a16:	75 e0       	ldi	r23, 0x05	; 5
    3a18:	02 c0       	rjmp	.+4      	; 0x3a1e <lora_driver_setAdaptiveDataRate+0xe>
    3a1a:	60 e7       	ldi	r22, 0x70	; 112
    3a1c:	76 e0       	ldi	r23, 0x06	; 6
    3a1e:	8b e9       	ldi	r24, 0x9B	; 155
    3a20:	95 e0       	ldi	r25, 0x05	; 5
    3a22:	43 ce       	rjmp	.-890    	; 0x36aa <_uploadMessageRc>
    3a24:	08 95       	ret

00003a26 <lora_driver_setReceiveDelay>:
    3a26:	9f 93       	push	r25
    3a28:	8f 93       	push	r24
    3a2a:	8c ec       	ldi	r24, 0xCC	; 204
    3a2c:	95 e0       	ldi	r25, 0x05	; 5
    3a2e:	9f 93       	push	r25
    3a30:	8f 93       	push	r24
    3a32:	86 ed       	ldi	r24, 0xD6	; 214
    3a34:	96 e1       	ldi	r25, 0x16	; 22
    3a36:	9f 93       	push	r25
    3a38:	8f 93       	push	r24
    3a3a:	0e 94 99 2a 	call	0x5532	; 0x5532 <sprintf>
    3a3e:	60 e0       	ldi	r22, 0x00	; 0
    3a40:	70 e0       	ldi	r23, 0x00	; 0
    3a42:	86 ed       	ldi	r24, 0xD6	; 214
    3a44:	96 e1       	ldi	r25, 0x16	; 22
    3a46:	31 de       	rcall	.-926    	; 0x36aa <_uploadMessageRc>
    3a48:	0f 90       	pop	r0
    3a4a:	0f 90       	pop	r0
    3a4c:	0f 90       	pop	r0
    3a4e:	0f 90       	pop	r0
    3a50:	0f 90       	pop	r0
    3a52:	0f 90       	pop	r0
    3a54:	08 95       	ret

00003a56 <lora_driver_configureToEu868>:
    3a56:	2f 92       	push	r2
    3a58:	3f 92       	push	r3
    3a5a:	4f 92       	push	r4
    3a5c:	5f 92       	push	r5
    3a5e:	6f 92       	push	r6
    3a60:	7f 92       	push	r7
    3a62:	8f 92       	push	r8
    3a64:	9f 92       	push	r9
    3a66:	af 92       	push	r10
    3a68:	bf 92       	push	r11
    3a6a:	cf 92       	push	r12
    3a6c:	df 92       	push	r13
    3a6e:	ef 92       	push	r14
    3a70:	ff 92       	push	r15
    3a72:	0f 93       	push	r16
    3a74:	1f 93       	push	r17
    3a76:	cf 93       	push	r28
    3a78:	df 93       	push	r29
    3a7a:	cd b7       	in	r28, 0x3d	; 61
    3a7c:	de b7       	in	r29, 0x3e	; 62
    3a7e:	a0 97       	sbiw	r28, 0x20	; 32
    3a80:	0f b6       	in	r0, 0x3f	; 63
    3a82:	f8 94       	cli
    3a84:	de bf       	out	0x3e, r29	; 62
    3a86:	0f be       	out	0x3f, r0	; 63
    3a88:	cd bf       	out	0x3d, r28	; 61
    3a8a:	69 ef       	ldi	r22, 0xF9	; 249
    3a8c:	75 e0       	ldi	r23, 0x05	; 5
    3a8e:	85 e0       	ldi	r24, 0x05	; 5
    3a90:	96 e0       	ldi	r25, 0x06	; 6
    3a92:	3c dd       	rcall	.-1416   	; 0x350c <_uploadMessage>
    3a94:	95 dd       	rcall	.-1238   	; 0x35c0 <_reply2ReturnCode>
    3a96:	81 11       	cpse	r24, r1
    3a98:	a3 c0       	rjmp	.+326    	; 0x3be0 <lora_driver_configureToEu868+0x18a>
    3a9a:	80 e2       	ldi	r24, 0x20	; 32
    3a9c:	e2 e2       	ldi	r30, 0x22	; 34
    3a9e:	f2 e0       	ldi	r31, 0x02	; 2
    3aa0:	de 01       	movw	r26, r28
    3aa2:	11 96       	adiw	r26, 0x01	; 1
    3aa4:	01 90       	ld	r0, Z+
    3aa6:	0d 92       	st	X+, r0
    3aa8:	8a 95       	dec	r24
    3aaa:	e1 f7       	brne	.-8      	; 0x3aa4 <lora_driver_configureToEu868+0x4e>
    3aac:	9e 01       	movw	r18, r28
    3aae:	2f 5f       	subi	r18, 0xFF	; 255
    3ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ab2:	69 01       	movw	r12, r18
    3ab4:	e1 2c       	mov	r14, r1
    3ab6:	f1 2c       	mov	r15, r1
    3ab8:	0f 2e       	mov	r0, r31
    3aba:	f1 e1       	ldi	r31, 0x11	; 17
    3abc:	af 2e       	mov	r10, r31
    3abe:	f6 e0       	ldi	r31, 0x06	; 6
    3ac0:	bf 2e       	mov	r11, r31
    3ac2:	f0 2d       	mov	r31, r0
    3ac4:	06 ed       	ldi	r16, 0xD6	; 214
    3ac6:	16 e1       	ldi	r17, 0x16	; 22
    3ac8:	0f 2e       	mov	r0, r31
    3aca:	fa e2       	ldi	r31, 0x2A	; 42
    3acc:	4f 2e       	mov	r4, r31
    3ace:	f6 e0       	ldi	r31, 0x06	; 6
    3ad0:	5f 2e       	mov	r5, r31
    3ad2:	f0 2d       	mov	r31, r0
    3ad4:	0f 2e       	mov	r0, r31
    3ad6:	f1 e4       	ldi	r31, 0x41	; 65
    3ad8:	8f 2e       	mov	r8, r31
    3ada:	f6 e0       	ldi	r31, 0x06	; 6
    3adc:	9f 2e       	mov	r9, r31
    3ade:	f0 2d       	mov	r31, r0
    3ae0:	0f 2e       	mov	r0, r31
    3ae2:	fb e5       	ldi	r31, 0x5B	; 91
    3ae4:	6f 2e       	mov	r6, r31
    3ae6:	f6 e0       	ldi	r31, 0x06	; 6
    3ae8:	7f 2e       	mov	r7, r31
    3aea:	f0 2d       	mov	r31, r0
    3aec:	3e 2c       	mov	r3, r14
    3aee:	2f 2c       	mov	r2, r15
    3af0:	ff 92       	push	r15
    3af2:	ef 92       	push	r14
    3af4:	bf 92       	push	r11
    3af6:	af 92       	push	r10
    3af8:	1f 93       	push	r17
    3afa:	0f 93       	push	r16
    3afc:	0e 94 99 2a 	call	0x5532	; 0x5532 <sprintf>
    3b00:	60 e0       	ldi	r22, 0x00	; 0
    3b02:	70 e0       	ldi	r23, 0x00	; 0
    3b04:	c8 01       	movw	r24, r16
    3b06:	02 dd       	rcall	.-1532   	; 0x350c <_uploadMessage>
    3b08:	5b dd       	rcall	.-1354   	; 0x35c0 <_reply2ReturnCode>
    3b0a:	0f 90       	pop	r0
    3b0c:	0f 90       	pop	r0
    3b0e:	0f 90       	pop	r0
    3b10:	0f 90       	pop	r0
    3b12:	0f 90       	pop	r0
    3b14:	0f 90       	pop	r0
    3b16:	81 11       	cpse	r24, r1
    3b18:	63 c0       	rjmp	.+198    	; 0x3be0 <lora_driver_configureToEu868+0x18a>
    3b1a:	32 e0       	ldi	r19, 0x02	; 2
    3b1c:	3e 15       	cp	r19, r14
    3b1e:	e8 f4       	brcc	.+58     	; 0x3b5a <lora_driver_configureToEu868+0x104>
    3b20:	f6 01       	movw	r30, r12
    3b22:	83 81       	ldd	r24, Z+3	; 0x03
    3b24:	8f 93       	push	r24
    3b26:	82 81       	ldd	r24, Z+2	; 0x02
    3b28:	8f 93       	push	r24
    3b2a:	81 81       	ldd	r24, Z+1	; 0x01
    3b2c:	8f 93       	push	r24
    3b2e:	80 81       	ld	r24, Z
    3b30:	8f 93       	push	r24
    3b32:	ff 92       	push	r15
    3b34:	ef 92       	push	r14
    3b36:	5f 92       	push	r5
    3b38:	4f 92       	push	r4
    3b3a:	1f 93       	push	r17
    3b3c:	0f 93       	push	r16
    3b3e:	0e 94 99 2a 	call	0x5532	; 0x5532 <sprintf>
    3b42:	60 e0       	ldi	r22, 0x00	; 0
    3b44:	70 e0       	ldi	r23, 0x00	; 0
    3b46:	c8 01       	movw	r24, r16
    3b48:	e1 dc       	rcall	.-1598   	; 0x350c <_uploadMessage>
    3b4a:	3a dd       	rcall	.-1420   	; 0x35c0 <_reply2ReturnCode>
    3b4c:	0f b6       	in	r0, 0x3f	; 63
    3b4e:	f8 94       	cli
    3b50:	de bf       	out	0x3e, r29	; 62
    3b52:	0f be       	out	0x3f, r0	; 63
    3b54:	cd bf       	out	0x3d, r28	; 61
    3b56:	81 11       	cpse	r24, r1
    3b58:	43 c0       	rjmp	.+134    	; 0x3be0 <lora_driver_configureToEu868+0x18a>
    3b5a:	2f 92       	push	r2
    3b5c:	3f 92       	push	r3
    3b5e:	9f 92       	push	r9
    3b60:	8f 92       	push	r8
    3b62:	1f 93       	push	r17
    3b64:	0f 93       	push	r16
    3b66:	0e 94 99 2a 	call	0x5532	; 0x5532 <sprintf>
    3b6a:	60 e0       	ldi	r22, 0x00	; 0
    3b6c:	70 e0       	ldi	r23, 0x00	; 0
    3b6e:	c8 01       	movw	r24, r16
    3b70:	cd dc       	rcall	.-1638   	; 0x350c <_uploadMessage>
    3b72:	26 dd       	rcall	.-1460   	; 0x35c0 <_reply2ReturnCode>
    3b74:	0f 90       	pop	r0
    3b76:	0f 90       	pop	r0
    3b78:	0f 90       	pop	r0
    3b7a:	0f 90       	pop	r0
    3b7c:	0f 90       	pop	r0
    3b7e:	0f 90       	pop	r0
    3b80:	81 11       	cpse	r24, r1
    3b82:	2e c0       	rjmp	.+92     	; 0x3be0 <lora_driver_configureToEu868+0x18a>
    3b84:	2f 92       	push	r2
    3b86:	3f 92       	push	r3
    3b88:	7f 92       	push	r7
    3b8a:	6f 92       	push	r6
    3b8c:	1f 93       	push	r17
    3b8e:	0f 93       	push	r16
    3b90:	0e 94 99 2a 	call	0x5532	; 0x5532 <sprintf>
    3b94:	60 e0       	ldi	r22, 0x00	; 0
    3b96:	70 e0       	ldi	r23, 0x00	; 0
    3b98:	c8 01       	movw	r24, r16
    3b9a:	b8 dc       	rcall	.-1680   	; 0x350c <_uploadMessage>
    3b9c:	11 dd       	rcall	.-1502   	; 0x35c0 <_reply2ReturnCode>
    3b9e:	0f 90       	pop	r0
    3ba0:	0f 90       	pop	r0
    3ba2:	0f 90       	pop	r0
    3ba4:	0f 90       	pop	r0
    3ba6:	0f 90       	pop	r0
    3ba8:	0f 90       	pop	r0
    3baa:	81 11       	cpse	r24, r1
    3bac:	19 c0       	rjmp	.+50     	; 0x3be0 <lora_driver_configureToEu868+0x18a>
    3bae:	3f ef       	ldi	r19, 0xFF	; 255
    3bb0:	e3 1a       	sub	r14, r19
    3bb2:	f3 0a       	sbc	r15, r19
    3bb4:	84 e0       	ldi	r24, 0x04	; 4
    3bb6:	c8 0e       	add	r12, r24
    3bb8:	d1 1c       	adc	r13, r1
    3bba:	98 e0       	ldi	r25, 0x08	; 8
    3bbc:	e9 16       	cp	r14, r25
    3bbe:	f1 04       	cpc	r15, r1
    3bc0:	09 f0       	breq	.+2      	; 0x3bc4 <lora_driver_configureToEu868+0x16e>
    3bc2:	94 cf       	rjmp	.-216    	; 0x3aec <lora_driver_configureToEu868+0x96>
    3bc4:	60 e0       	ldi	r22, 0x00	; 0
    3bc6:	70 e0       	ldi	r23, 0x00	; 0
    3bc8:	83 e7       	ldi	r24, 0x73	; 115
    3bca:	96 e0       	ldi	r25, 0x06	; 6
    3bcc:	9f dc       	rcall	.-1730   	; 0x350c <_uploadMessage>
    3bce:	f8 dc       	rcall	.-1552   	; 0x35c0 <_reply2ReturnCode>
    3bd0:	81 11       	cpse	r24, r1
    3bd2:	06 c0       	rjmp	.+12     	; 0x3be0 <lora_driver_configureToEu868+0x18a>
    3bd4:	60 e0       	ldi	r22, 0x00	; 0
    3bd6:	70 e0       	ldi	r23, 0x00	; 0
    3bd8:	84 e8       	ldi	r24, 0x84	; 132
    3bda:	96 e0       	ldi	r25, 0x06	; 6
    3bdc:	97 dc       	rcall	.-1746   	; 0x350c <_uploadMessage>
    3bde:	f0 dc       	rcall	.-1568   	; 0x35c0 <_reply2ReturnCode>
    3be0:	a0 96       	adiw	r28, 0x20	; 32
    3be2:	0f b6       	in	r0, 0x3f	; 63
    3be4:	f8 94       	cli
    3be6:	de bf       	out	0x3e, r29	; 62
    3be8:	0f be       	out	0x3f, r0	; 63
    3bea:	cd bf       	out	0x3d, r28	; 61
    3bec:	df 91       	pop	r29
    3bee:	cf 91       	pop	r28
    3bf0:	1f 91       	pop	r17
    3bf2:	0f 91       	pop	r16
    3bf4:	ff 90       	pop	r15
    3bf6:	ef 90       	pop	r14
    3bf8:	df 90       	pop	r13
    3bfa:	cf 90       	pop	r12
    3bfc:	bf 90       	pop	r11
    3bfe:	af 90       	pop	r10
    3c00:	9f 90       	pop	r9
    3c02:	8f 90       	pop	r8
    3c04:	7f 90       	pop	r7
    3c06:	6f 90       	pop	r6
    3c08:	5f 90       	pop	r5
    3c0a:	4f 90       	pop	r4
    3c0c:	3f 90       	pop	r3
    3c0e:	2f 90       	pop	r2
    3c10:	08 95       	ret

00003c12 <lora_driver_setOtaaIdentity>:
    3c12:	ef 92       	push	r14
    3c14:	ff 92       	push	r15
    3c16:	0f 93       	push	r16
    3c18:	1f 93       	push	r17
    3c1a:	cf 93       	push	r28
    3c1c:	df 93       	push	r29
    3c1e:	ec 01       	movw	r28, r24
    3c20:	8b 01       	movw	r16, r22
    3c22:	7a 01       	movw	r14, r20
    3c24:	81 e0       	ldi	r24, 0x01	; 1
    3c26:	f4 de       	rcall	.-536    	; 0x3a10 <lora_driver_setAdaptiveDataRate>
    3c28:	81 11       	cpse	r24, r1
    3c2a:	0d c0       	rjmp	.+26     	; 0x3c46 <lora_driver_setOtaaIdentity+0x34>
    3c2c:	ce 01       	movw	r24, r28
    3c2e:	d4 dd       	rcall	.-1112   	; 0x37d8 <lora_driver_setApplicationIdentifier>
    3c30:	81 11       	cpse	r24, r1
    3c32:	09 c0       	rjmp	.+18     	; 0x3c46 <lora_driver_setOtaaIdentity+0x34>
    3c34:	c8 01       	movw	r24, r16
    3c36:	e1 dd       	rcall	.-1086   	; 0x37fa <lora_driver_setApplicationKey>
    3c38:	81 11       	cpse	r24, r1
    3c3a:	05 c0       	rjmp	.+10     	; 0x3c46 <lora_driver_setOtaaIdentity+0x34>
    3c3c:	c7 01       	movw	r24, r14
    3c3e:	bb dd       	rcall	.-1162   	; 0x37b6 <lora_driver_setDeviceIdentifier>
    3c40:	81 11       	cpse	r24, r1
    3c42:	01 c0       	rjmp	.+2      	; 0x3c46 <lora_driver_setOtaaIdentity+0x34>
    3c44:	eb dd       	rcall	.-1066   	; 0x381c <lora_driver_saveMac>
    3c46:	df 91       	pop	r29
    3c48:	cf 91       	pop	r28
    3c4a:	1f 91       	pop	r17
    3c4c:	0f 91       	pop	r16
    3c4e:	ff 90       	pop	r15
    3c50:	ef 90       	pop	r14
    3c52:	08 95       	ret

00003c54 <lora_driver_mapReturnCodeToText>:
    3c54:	90 e0       	ldi	r25, 0x00	; 0
    3c56:	fc 01       	movw	r30, r24
    3c58:	ee 0f       	add	r30, r30
    3c5a:	ff 1f       	adc	r31, r31
    3c5c:	8e 0f       	add	r24, r30
    3c5e:	9f 1f       	adc	r25, r31
    3c60:	fc 01       	movw	r30, r24
    3c62:	e3 5b       	subi	r30, 0xB3	; 179
    3c64:	f8 4f       	sbci	r31, 0xF8	; 248
    3c66:	81 81       	ldd	r24, Z+1	; 0x01
    3c68:	92 81       	ldd	r25, Z+2	; 0x02
    3c6a:	08 95       	ret

00003c6c <decode_port_no>:
    3c6c:	dc 01       	movw	r26, r24
    3c6e:	00 97       	sbiw	r24, 0x00	; 0
    3c70:	29 f1       	breq	.+74     	; 0x3cbc <decode_port_no+0x50>
    3c72:	fb 01       	movw	r30, r22
    3c74:	20 81       	ld	r18, Z
    3c76:	fc 01       	movw	r30, r24
    3c78:	01 90       	ld	r0, Z+
    3c7a:	00 20       	and	r0, r0
    3c7c:	e9 f7       	brne	.-6      	; 0x3c78 <decode_port_no+0xc>
    3c7e:	31 97       	sbiw	r30, 0x01	; 1
    3c80:	e8 1b       	sub	r30, r24
    3c82:	f9 0b       	sbc	r31, r25
    3c84:	82 2f       	mov	r24, r18
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	e8 17       	cp	r30, r24
    3c8a:	f9 07       	cpc	r31, r25
    3c8c:	c8 f0       	brcs	.+50     	; 0x3cc0 <decode_port_no+0x54>
    3c8e:	80 e0       	ldi	r24, 0x00	; 0
    3c90:	08 c0       	rjmp	.+16     	; 0x3ca2 <decode_port_no+0x36>
    3c92:	88 0f       	add	r24, r24
    3c94:	38 2f       	mov	r19, r24
    3c96:	33 0f       	add	r19, r19
    3c98:	33 0f       	add	r19, r19
    3c9a:	83 0f       	add	r24, r19
    3c9c:	80 53       	subi	r24, 0x30	; 48
    3c9e:	89 0f       	add	r24, r25
    3ca0:	2f 5f       	subi	r18, 0xFF	; 255
    3ca2:	fd 01       	movw	r30, r26
    3ca4:	e2 0f       	add	r30, r18
    3ca6:	f1 1d       	adc	r31, r1
    3ca8:	90 81       	ld	r25, Z
    3caa:	30 ed       	ldi	r19, 0xD0	; 208
    3cac:	39 0f       	add	r19, r25
    3cae:	3a 30       	cpi	r19, 0x0A	; 10
    3cb0:	10 f4       	brcc	.+4      	; 0x3cb6 <decode_port_no+0x4a>
    3cb2:	91 11       	cpse	r25, r1
    3cb4:	ee cf       	rjmp	.-36     	; 0x3c92 <decode_port_no+0x26>
    3cb6:	fb 01       	movw	r30, r22
    3cb8:	20 83       	st	Z, r18
    3cba:	08 95       	ret
    3cbc:	80 e0       	ldi	r24, 0x00	; 0
    3cbe:	08 95       	ret
    3cc0:	80 e0       	ldi	r24, 0x00	; 0
    3cc2:	08 95       	ret

00003cc4 <decode_hexadecimal_string_bytes>:
    3cc4:	0f 93       	push	r16
    3cc6:	1f 93       	push	r17
    3cc8:	cf 93       	push	r28
    3cca:	df 93       	push	r29
    3ccc:	dc 01       	movw	r26, r24
    3cce:	ea 01       	movw	r28, r20
    3cd0:	20 97       	sbiw	r28, 0x00	; 0
    3cd2:	e1 f1       	breq	.+120    	; 0x3d4c <decode_hexadecimal_string_bytes+0x88>
    3cd4:	fa 01       	movw	r30, r20
    3cd6:	01 90       	ld	r0, Z+
    3cd8:	00 20       	and	r0, r0
    3cda:	e9 f7       	brne	.-6      	; 0x3cd6 <decode_hexadecimal_string_bytes+0x12>
    3cdc:	31 97       	sbiw	r30, 0x01	; 1
    3cde:	e4 1b       	sub	r30, r20
    3ce0:	f5 0b       	sbc	r31, r21
    3ce2:	32 97       	sbiw	r30, 0x02	; 2
    3ce4:	10 f5       	brcc	.+68     	; 0x3d2a <decode_hexadecimal_string_bytes+0x66>
    3ce6:	32 c0       	rjmp	.+100    	; 0x3d4c <decode_hexadecimal_string_bytes+0x88>
    3ce8:	8d 01       	movw	r16, r26
    3cea:	04 0f       	add	r16, r20
    3cec:	15 1f       	adc	r17, r21
    3cee:	30 e0       	ldi	r19, 0x00	; 0
    3cf0:	ae 01       	movw	r20, r28
    3cf2:	42 0f       	add	r20, r18
    3cf4:	53 1f       	adc	r21, r19
    3cf6:	fa 01       	movw	r30, r20
    3cf8:	90 81       	ld	r25, Z
    3cfa:	91 34       	cpi	r25, 0x41	; 65
    3cfc:	28 f0       	brcs	.+10     	; 0x3d08 <decode_hexadecimal_string_bytes+0x44>
    3cfe:	97 53       	subi	r25, 0x37	; 55
    3d00:	59 2f       	mov	r21, r25
    3d02:	52 95       	swap	r21
    3d04:	50 7f       	andi	r21, 0xF0	; 240
    3d06:	03 c0       	rjmp	.+6      	; 0x3d0e <decode_hexadecimal_string_bytes+0x4a>
    3d08:	59 2f       	mov	r21, r25
    3d0a:	52 95       	swap	r21
    3d0c:	50 7f       	andi	r21, 0xF0	; 240
    3d0e:	2c 0f       	add	r18, r28
    3d10:	3d 1f       	adc	r19, r29
    3d12:	f9 01       	movw	r30, r18
    3d14:	91 81       	ldd	r25, Z+1	; 0x01
    3d16:	91 34       	cpi	r25, 0x41	; 65
    3d18:	10 f0       	brcs	.+4      	; 0x3d1e <decode_hexadecimal_string_bytes+0x5a>
    3d1a:	97 53       	subi	r25, 0x37	; 55
    3d1c:	01 c0       	rjmp	.+2      	; 0x3d20 <decode_hexadecimal_string_bytes+0x5c>
    3d1e:	90 53       	subi	r25, 0x30	; 48
    3d20:	95 0f       	add	r25, r21
    3d22:	f8 01       	movw	r30, r16
    3d24:	90 83       	st	Z, r25
    3d26:	8f 5f       	subi	r24, 0xFF	; 255
    3d28:	01 c0       	rjmp	.+2      	; 0x3d2c <decode_hexadecimal_string_bytes+0x68>
    3d2a:	80 e0       	ldi	r24, 0x00	; 0
    3d2c:	28 2f       	mov	r18, r24
    3d2e:	22 0f       	add	r18, r18
    3d30:	48 2f       	mov	r20, r24
    3d32:	50 e0       	ldi	r21, 0x00	; 0
    3d34:	fe 01       	movw	r30, r28
    3d36:	01 90       	ld	r0, Z+
    3d38:	00 20       	and	r0, r0
    3d3a:	e9 f7       	brne	.-6      	; 0x3d36 <decode_hexadecimal_string_bytes+0x72>
    3d3c:	31 97       	sbiw	r30, 0x01	; 1
    3d3e:	ec 1b       	sub	r30, r28
    3d40:	fd 0b       	sbc	r31, r29
    3d42:	4e 17       	cp	r20, r30
    3d44:	5f 07       	cpc	r21, r31
    3d46:	10 f4       	brcc	.+4      	; 0x3d4c <decode_hexadecimal_string_bytes+0x88>
    3d48:	86 13       	cpse	r24, r22
    3d4a:	ce cf       	rjmp	.-100    	; 0x3ce8 <decode_hexadecimal_string_bytes+0x24>
    3d4c:	df 91       	pop	r29
    3d4e:	cf 91       	pop	r28
    3d50:	1f 91       	pop	r17
    3d52:	0f 91       	pop	r16
    3d54:	08 95       	ret

00003d56 <_serialCallBack>:
    3d56:	80 91 33 17 	lds	r24, 0x1733	; 0x801733 <crc_sum.1945>
    3d5a:	86 0f       	add	r24, r22
    3d5c:	80 93 33 17 	sts	0x1733, r24	; 0x801733 <crc_sum.1945>
    3d60:	90 91 36 17 	lds	r25, 0x1736	; 0x801736 <_mh_state>
    3d64:	91 30       	cpi	r25, 0x01	; 1
    3d66:	79 f0       	breq	.+30     	; 0x3d86 <_serialCallBack+0x30>
    3d68:	28 f0       	brcs	.+10     	; 0x3d74 <_serialCallBack+0x1e>
    3d6a:	92 30       	cpi	r25, 0x02	; 2
    3d6c:	a9 f0       	breq	.+42     	; 0x3d98 <_serialCallBack+0x42>
    3d6e:	93 30       	cpi	r25, 0x03	; 3
    3d70:	19 f1       	breq	.+70     	; 0x3db8 <_serialCallBack+0x62>
    3d72:	08 95       	ret
    3d74:	6f 3f       	cpi	r22, 0xFF	; 255
    3d76:	09 f0       	breq	.+2      	; 0x3d7a <_serialCallBack+0x24>
    3d78:	48 c0       	rjmp	.+144    	; 0x3e0a <_serialCallBack+0xb4>
    3d7a:	10 92 33 17 	sts	0x1733, r1	; 0x801733 <crc_sum.1945>
    3d7e:	81 e0       	ldi	r24, 0x01	; 1
    3d80:	80 93 36 17 	sts	0x1736, r24	; 0x801736 <_mh_state>
    3d84:	08 95       	ret
    3d86:	66 38       	cpi	r22, 0x86	; 134
    3d88:	09 f0       	breq	.+2      	; 0x3d8c <_serialCallBack+0x36>
    3d8a:	3f c0       	rjmp	.+126    	; 0x3e0a <_serialCallBack+0xb4>
    3d8c:	10 92 32 17 	sts	0x1732, r1	; 0x801732 <inDex.1943>
    3d90:	82 e0       	ldi	r24, 0x02	; 2
    3d92:	80 93 36 17 	sts	0x1736, r24	; 0x801736 <_mh_state>
    3d96:	08 95       	ret
    3d98:	e0 91 32 17 	lds	r30, 0x1732	; 0x801732 <inDex.1943>
    3d9c:	81 e0       	ldi	r24, 0x01	; 1
    3d9e:	8e 0f       	add	r24, r30
    3da0:	80 93 32 17 	sts	0x1732, r24	; 0x801732 <inDex.1943>
    3da4:	f0 e0       	ldi	r31, 0x00	; 0
    3da6:	e0 5d       	subi	r30, 0xD0	; 208
    3da8:	f8 4e       	sbci	r31, 0xE8	; 232
    3daa:	60 83       	st	Z, r22
    3dac:	82 30       	cpi	r24, 0x02	; 2
    3dae:	69 f5       	brne	.+90     	; 0x3e0a <_serialCallBack+0xb4>
    3db0:	83 e0       	ldi	r24, 0x03	; 3
    3db2:	80 93 36 17 	sts	0x1736, r24	; 0x801736 <_mh_state>
    3db6:	08 95       	ret
    3db8:	90 91 32 17 	lds	r25, 0x1732	; 0x801732 <inDex.1943>
    3dbc:	21 e0       	ldi	r18, 0x01	; 1
    3dbe:	29 0f       	add	r18, r25
    3dc0:	20 93 32 17 	sts	0x1732, r18	; 0x801732 <inDex.1943>
    3dc4:	96 30       	cpi	r25, 0x06	; 6
    3dc6:	09 f5       	brne	.+66     	; 0x3e0a <_serialCallBack+0xb4>
    3dc8:	81 11       	cpse	r24, r1
    3dca:	0e c0       	rjmp	.+28     	; 0x3de8 <_serialCallBack+0x92>
    3dcc:	e0 e3       	ldi	r30, 0x30	; 48
    3dce:	f7 e1       	ldi	r31, 0x17	; 23
    3dd0:	80 81       	ld	r24, Z
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	98 2f       	mov	r25, r24
    3dd6:	88 27       	eor	r24, r24
    3dd8:	21 81       	ldd	r18, Z+1	; 0x01
    3dda:	82 0f       	add	r24, r18
    3ddc:	91 1d       	adc	r25, r1
    3dde:	90 93 38 17 	sts	0x1738, r25	; 0x801738 <_ppm+0x1>
    3de2:	80 93 37 17 	sts	0x1737, r24	; 0x801737 <_ppm>
    3de6:	04 c0       	rjmp	.+8      	; 0x3df0 <_serialCallBack+0x9a>
    3de8:	10 92 38 17 	sts	0x1738, r1	; 0x801738 <_ppm+0x1>
    3dec:	10 92 37 17 	sts	0x1737, r1	; 0x801737 <_ppm>
    3df0:	10 92 36 17 	sts	0x1736, r1	; 0x801736 <_mh_state>
    3df4:	e0 91 34 17 	lds	r30, 0x1734	; 0x801734 <_appCallBack>
    3df8:	f0 91 35 17 	lds	r31, 0x1735	; 0x801735 <_appCallBack+0x1>
    3dfc:	30 97       	sbiw	r30, 0x00	; 0
    3dfe:	29 f0       	breq	.+10     	; 0x3e0a <_serialCallBack+0xb4>
    3e00:	80 91 37 17 	lds	r24, 0x1737	; 0x801737 <_ppm>
    3e04:	90 91 38 17 	lds	r25, 0x1738	; 0x801738 <_ppm+0x1>
    3e08:	19 95       	eicall
    3e0a:	08 95       	ret

00003e0c <mh_z19_initialise>:
    3e0c:	8f 92       	push	r8
    3e0e:	9f 92       	push	r9
    3e10:	af 92       	push	r10
    3e12:	cf 92       	push	r12
    3e14:	ef 92       	push	r14
    3e16:	0f 93       	push	r16
    3e18:	0f 2e       	mov	r0, r31
    3e1a:	fb ea       	ldi	r31, 0xAB	; 171
    3e1c:	8f 2e       	mov	r8, r31
    3e1e:	fe e1       	ldi	r31, 0x1E	; 30
    3e20:	9f 2e       	mov	r9, r31
    3e22:	f0 2d       	mov	r31, r0
    3e24:	68 94       	set
    3e26:	aa 24       	eor	r10, r10
    3e28:	a4 f8       	bld	r10, 4
    3e2a:	68 94       	set
    3e2c:	cc 24       	eor	r12, r12
    3e2e:	c4 f8       	bld	r12, 4
    3e30:	e1 2c       	mov	r14, r1
    3e32:	00 e0       	ldi	r16, 0x00	; 0
    3e34:	23 e0       	ldi	r18, 0x03	; 3
    3e36:	40 e8       	ldi	r20, 0x80	; 128
    3e38:	55 e2       	ldi	r21, 0x25	; 37
    3e3a:	60 e0       	ldi	r22, 0x00	; 0
    3e3c:	70 e0       	ldi	r23, 0x00	; 0
    3e3e:	4b d0       	rcall	.+150    	; 0x3ed6 <serial_create>
    3e40:	90 93 3a 17 	sts	0x173A, r25	; 0x80173a <_serial+0x1>
    3e44:	80 93 39 17 	sts	0x1739, r24	; 0x801739 <_serial>
    3e48:	0f 91       	pop	r16
    3e4a:	ef 90       	pop	r14
    3e4c:	cf 90       	pop	r12
    3e4e:	af 90       	pop	r10
    3e50:	9f 90       	pop	r9
    3e52:	8f 90       	pop	r8
    3e54:	08 95       	ret

00003e56 <mh_z19_takeMeassuring>:
    3e56:	cf 93       	push	r28
    3e58:	df 93       	push	r29
    3e5a:	cd b7       	in	r28, 0x3d	; 61
    3e5c:	de b7       	in	r29, 0x3e	; 62
    3e5e:	29 97       	sbiw	r28, 0x09	; 9
    3e60:	0f b6       	in	r0, 0x3f	; 63
    3e62:	f8 94       	cli
    3e64:	de bf       	out	0x3e, r29	; 62
    3e66:	0f be       	out	0x3f, r0	; 63
    3e68:	cd bf       	out	0x3d, r28	; 61
    3e6a:	89 e0       	ldi	r24, 0x09	; 9
    3e6c:	e2 e4       	ldi	r30, 0x42	; 66
    3e6e:	f2 e0       	ldi	r31, 0x02	; 2
    3e70:	9e 01       	movw	r18, r28
    3e72:	2f 5f       	subi	r18, 0xFF	; 255
    3e74:	3f 4f       	sbci	r19, 0xFF	; 255
    3e76:	d9 01       	movw	r26, r18
    3e78:	01 90       	ld	r0, Z+
    3e7a:	0d 92       	st	X+, r0
    3e7c:	8a 95       	dec	r24
    3e7e:	e1 f7       	brne	.-8      	; 0x3e78 <mh_z19_takeMeassuring+0x22>
    3e80:	10 92 38 17 	sts	0x1738, r1	; 0x801738 <_ppm+0x1>
    3e84:	10 92 37 17 	sts	0x1737, r1	; 0x801737 <_ppm>
    3e88:	80 91 39 17 	lds	r24, 0x1739	; 0x801739 <_serial>
    3e8c:	90 91 3a 17 	lds	r25, 0x173A	; 0x80173a <_serial+0x1>
    3e90:	00 97       	sbiw	r24, 0x00	; 0
    3e92:	31 f0       	breq	.+12     	; 0x3ea0 <mh_z19_takeMeassuring+0x4a>
    3e94:	42 2f       	mov	r20, r18
    3e96:	53 2f       	mov	r21, r19
    3e98:	69 e0       	ldi	r22, 0x09	; 9
    3e9a:	ea d0       	rcall	.+468    	; 0x4070 <serial_sendBytes>
    3e9c:	80 e0       	ldi	r24, 0x00	; 0
    3e9e:	01 c0       	rjmp	.+2      	; 0x3ea2 <mh_z19_takeMeassuring+0x4c>
    3ea0:	82 e0       	ldi	r24, 0x02	; 2
    3ea2:	29 96       	adiw	r28, 0x09	; 9
    3ea4:	0f b6       	in	r0, 0x3f	; 63
    3ea6:	f8 94       	cli
    3ea8:	de bf       	out	0x3e, r29	; 62
    3eaa:	0f be       	out	0x3f, r0	; 63
    3eac:	cd bf       	out	0x3d, r28	; 61
    3eae:	df 91       	pop	r29
    3eb0:	cf 91       	pop	r28
    3eb2:	08 95       	ret

00003eb4 <mh_z19_getCo2Ppm>:
    3eb4:	20 91 37 17 	lds	r18, 0x1737	; 0x801737 <_ppm>
    3eb8:	30 91 38 17 	lds	r19, 0x1738	; 0x801738 <_ppm+0x1>
    3ebc:	21 15       	cp	r18, r1
    3ebe:	31 05       	cpc	r19, r1
    3ec0:	29 f4       	brne	.+10     	; 0x3ecc <mh_z19_getCo2Ppm+0x18>
    3ec2:	fc 01       	movw	r30, r24
    3ec4:	11 82       	std	Z+1, r1	; 0x01
    3ec6:	10 82       	st	Z, r1
    3ec8:	81 e0       	ldi	r24, 0x01	; 1
    3eca:	08 95       	ret
    3ecc:	fc 01       	movw	r30, r24
    3ece:	31 83       	std	Z+1, r19	; 0x01
    3ed0:	20 83       	st	Z, r18
    3ed2:	80 e0       	ldi	r24, 0x00	; 0
    3ed4:	08 95       	ret

00003ed6 <serial_create>:
    3ed6:	2f 92       	push	r2
    3ed8:	3f 92       	push	r3
    3eda:	4f 92       	push	r4
    3edc:	5f 92       	push	r5
    3ede:	6f 92       	push	r6
    3ee0:	7f 92       	push	r7
    3ee2:	8f 92       	push	r8
    3ee4:	9f 92       	push	r9
    3ee6:	af 92       	push	r10
    3ee8:	cf 92       	push	r12
    3eea:	ef 92       	push	r14
    3eec:	ff 92       	push	r15
    3eee:	0f 93       	push	r16
    3ef0:	1f 93       	push	r17
    3ef2:	cf 93       	push	r28
    3ef4:	df 93       	push	r29
    3ef6:	cd b7       	in	r28, 0x3d	; 61
    3ef8:	de b7       	in	r29, 0x3e	; 62
    3efa:	f8 2e       	mov	r15, r24
    3efc:	2a 01       	movw	r4, r20
    3efe:	3b 01       	movw	r6, r22
    3f00:	88 e0       	ldi	r24, 0x08	; 8
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <malloc>
    3f08:	8c 01       	movw	r16, r24
    3f0a:	8f 2d       	mov	r24, r15
    3f0c:	90 e0       	ldi	r25, 0x00	; 0
    3f0e:	fc 01       	movw	r30, r24
    3f10:	ee 0f       	add	r30, r30
    3f12:	ff 1f       	adc	r31, r31
    3f14:	e5 5c       	subi	r30, 0xC5	; 197
    3f16:	f8 4e       	sbci	r31, 0xE8	; 232
    3f18:	11 83       	std	Z+1, r17	; 0x01
    3f1a:	00 83       	st	Z, r16
    3f1c:	01 15       	cp	r16, r1
    3f1e:	11 05       	cpc	r17, r1
    3f20:	09 f4       	brne	.+2      	; 0x3f24 <serial_create+0x4e>
    3f22:	69 c0       	rjmp	.+210    	; 0x3ff6 <serial_create+0x120>
    3f24:	88 0f       	add	r24, r24
    3f26:	99 1f       	adc	r25, r25
    3f28:	fc 01       	movw	r30, r24
    3f2a:	e5 5f       	subi	r30, 0xF5	; 245
    3f2c:	fd 4f       	sbci	r31, 0xFD	; 253
    3f2e:	80 81       	ld	r24, Z
    3f30:	91 81       	ldd	r25, Z+1	; 0x01
    3f32:	d8 01       	movw	r26, r16
    3f34:	8d 93       	st	X+, r24
    3f36:	9c 93       	st	X, r25
    3f38:	8c 2d       	mov	r24, r12
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	88 0f       	add	r24, r24
    3f3e:	99 1f       	adc	r25, r25
    3f40:	88 0f       	add	r24, r24
    3f42:	99 1f       	adc	r25, r25
    3f44:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <malloc>
    3f48:	1c 01       	movw	r2, r24
    3f4a:	86 e0       	ldi	r24, 0x06	; 6
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <malloc>
    3f52:	7c 01       	movw	r14, r24
    3f54:	4c 2d       	mov	r20, r12
    3f56:	b1 01       	movw	r22, r2
    3f58:	f0 d6       	rcall	.+3552   	; 0x4d3a <fifo_init>
    3f5a:	f8 01       	movw	r30, r16
    3f5c:	f5 82       	std	Z+5, r15	; 0x05
    3f5e:	e4 82       	std	Z+4, r14	; 0x04
    3f60:	8a 2d       	mov	r24, r10
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	88 0f       	add	r24, r24
    3f66:	99 1f       	adc	r25, r25
    3f68:	88 0f       	add	r24, r24
    3f6a:	99 1f       	adc	r25, r25
    3f6c:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <malloc>
    3f70:	1c 01       	movw	r2, r24
    3f72:	86 e0       	ldi	r24, 0x06	; 6
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <malloc>
    3f7a:	7c 01       	movw	r14, r24
    3f7c:	4a 2d       	mov	r20, r10
    3f7e:	b1 01       	movw	r22, r2
    3f80:	dc d6       	rcall	.+3512   	; 0x4d3a <fifo_init>
    3f82:	d8 01       	movw	r26, r16
    3f84:	13 96       	adiw	r26, 0x03	; 3
    3f86:	fc 92       	st	X, r15
    3f88:	ee 92       	st	-X, r14
    3f8a:	12 97       	sbiw	r26, 0x02	; 2
    3f8c:	17 96       	adiw	r26, 0x07	; 7
    3f8e:	9c 92       	st	X, r9
    3f90:	8e 92       	st	-X, r8
    3f92:	16 97       	sbiw	r26, 0x06	; 6
    3f94:	ff b6       	in	r15, 0x3f	; 63
    3f96:	f8 94       	cli
    3f98:	ed 91       	ld	r30, X+
    3f9a:	fc 91       	ld	r31, X
    3f9c:	11 97       	sbiw	r26, 0x01	; 1
    3f9e:	36 97       	sbiw	r30, 0x06	; 6
    3fa0:	80 81       	ld	r24, Z
    3fa2:	82 60       	ori	r24, 0x02	; 2
    3fa4:	80 83       	st	Z, r24
    3fa6:	8d 90       	ld	r8, X+
    3fa8:	9c 90       	ld	r9, X
    3faa:	c3 01       	movw	r24, r6
    3fac:	b2 01       	movw	r22, r4
    3fae:	df d7       	rcall	.+4030   	; 0x4f6e <__floatunsisf>
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	40 e0       	ldi	r20, 0x00	; 0
    3fb6:	51 e4       	ldi	r21, 0x41	; 65
    3fb8:	0e 94 45 28 	call	0x508a	; 0x508a <__mulsf3>
    3fbc:	9b 01       	movw	r18, r22
    3fbe:	ac 01       	movw	r20, r24
    3fc0:	60 e0       	ldi	r22, 0x00	; 0
    3fc2:	74 e2       	ldi	r23, 0x24	; 36
    3fc4:	84 e7       	ldi	r24, 0x74	; 116
    3fc6:	9b e4       	ldi	r25, 0x4B	; 75
    3fc8:	39 d7       	rcall	.+3698   	; 0x4e3c <__divsf3>
    3fca:	20 e0       	ldi	r18, 0x00	; 0
    3fcc:	30 e0       	ldi	r19, 0x00	; 0
    3fce:	40 e8       	ldi	r20, 0x80	; 128
    3fd0:	5f e3       	ldi	r21, 0x3F	; 63
    3fd2:	cf d6       	rcall	.+3486   	; 0x4d72 <__subsf3>
    3fd4:	a0 d7       	rcall	.+3904   	; 0x4f16 <__fixunssfsi>
    3fd6:	f4 01       	movw	r30, r8
    3fd8:	32 97       	sbiw	r30, 0x02	; 2
    3fda:	60 83       	st	Z, r22
    3fdc:	d8 01       	movw	r26, r16
    3fde:	ed 91       	ld	r30, X+
    3fe0:	fc 91       	ld	r31, X
    3fe2:	11 97       	sbiw	r26, 0x01	; 1
    3fe4:	35 97       	sbiw	r30, 0x05	; 5
    3fe6:	88 e9       	ldi	r24, 0x98	; 152
    3fe8:	80 83       	st	Z, r24
    3fea:	ed 91       	ld	r30, X+
    3fec:	fc 91       	ld	r31, X
    3fee:	34 97       	sbiw	r30, 0x04	; 4
    3ff0:	86 e0       	ldi	r24, 0x06	; 6
    3ff2:	80 83       	st	Z, r24
    3ff4:	ff be       	out	0x3f, r15	; 63
    3ff6:	c8 01       	movw	r24, r16
    3ff8:	df 91       	pop	r29
    3ffa:	cf 91       	pop	r28
    3ffc:	1f 91       	pop	r17
    3ffe:	0f 91       	pop	r16
    4000:	ff 90       	pop	r15
    4002:	ef 90       	pop	r14
    4004:	cf 90       	pop	r12
    4006:	af 90       	pop	r10
    4008:	9f 90       	pop	r9
    400a:	8f 90       	pop	r8
    400c:	7f 90       	pop	r7
    400e:	6f 90       	pop	r6
    4010:	5f 90       	pop	r5
    4012:	4f 90       	pop	r4
    4014:	3f 90       	pop	r3
    4016:	2f 90       	pop	r2
    4018:	08 95       	ret

0000401a <serial_sendByte>:
    401a:	cf 93       	push	r28
    401c:	df 93       	push	r29
    401e:	dc 01       	movw	r26, r24
    4020:	89 2b       	or	r24, r25
    4022:	01 f1       	breq	.+64     	; 0x4064 <serial_sendByte+0x4a>
    4024:	12 96       	adiw	r26, 0x02	; 2
    4026:	ed 91       	ld	r30, X+
    4028:	fc 91       	ld	r31, X
    402a:	13 97       	sbiw	r26, 0x03	; 3
    402c:	93 81       	ldd	r25, Z+3	; 0x03
    402e:	82 81       	ldd	r24, Z+2	; 0x02
    4030:	25 81       	ldd	r18, Z+5	; 0x05
    4032:	98 1b       	sub	r25, r24
    4034:	92 23       	and	r25, r18
    4036:	84 81       	ldd	r24, Z+4	; 0x04
    4038:	98 17       	cp	r25, r24
    403a:	b1 f0       	breq	.+44     	; 0x4068 <serial_sendByte+0x4e>
    403c:	83 81       	ldd	r24, Z+3	; 0x03
    403e:	26 95       	lsr	r18
    4040:	28 23       	and	r18, r24
    4042:	c0 81       	ld	r28, Z
    4044:	d1 81       	ldd	r29, Z+1	; 0x01
    4046:	c2 0f       	add	r28, r18
    4048:	d1 1d       	adc	r29, r1
    404a:	68 83       	st	Y, r22
    404c:	8f 5f       	subi	r24, 0xFF	; 255
    404e:	95 81       	ldd	r25, Z+5	; 0x05
    4050:	89 23       	and	r24, r25
    4052:	83 83       	std	Z+3, r24	; 0x03
    4054:	ed 91       	ld	r30, X+
    4056:	fc 91       	ld	r31, X
    4058:	35 97       	sbiw	r30, 0x05	; 5
    405a:	80 81       	ld	r24, Z
    405c:	80 62       	ori	r24, 0x20	; 32
    405e:	80 83       	st	Z, r24
    4060:	80 e0       	ldi	r24, 0x00	; 0
    4062:	03 c0       	rjmp	.+6      	; 0x406a <serial_sendByte+0x50>
    4064:	81 e0       	ldi	r24, 0x01	; 1
    4066:	01 c0       	rjmp	.+2      	; 0x406a <serial_sendByte+0x50>
    4068:	82 e0       	ldi	r24, 0x02	; 2
    406a:	df 91       	pop	r29
    406c:	cf 91       	pop	r28
    406e:	08 95       	ret

00004070 <serial_sendBytes>:
    4070:	ef 92       	push	r14
    4072:	ff 92       	push	r15
    4074:	0f 93       	push	r16
    4076:	1f 93       	push	r17
    4078:	cf 93       	push	r28
    407a:	df 93       	push	r29
    407c:	7c 01       	movw	r14, r24
    407e:	00 97       	sbiw	r24, 0x00	; 0
    4080:	09 f4       	brne	.+2      	; 0x4084 <serial_sendBytes+0x14>
    4082:	41 c0       	rjmp	.+130    	; 0x4106 <serial_sendBytes+0x96>
    4084:	dc 01       	movw	r26, r24
    4086:	12 96       	adiw	r26, 0x02	; 2
    4088:	ed 91       	ld	r30, X+
    408a:	fc 91       	ld	r31, X
    408c:	13 97       	sbiw	r26, 0x03	; 3
    408e:	93 81       	ldd	r25, Z+3	; 0x03
    4090:	82 81       	ldd	r24, Z+2	; 0x02
    4092:	98 1b       	sub	r25, r24
    4094:	85 81       	ldd	r24, Z+5	; 0x05
    4096:	98 23       	and	r25, r24
    4098:	84 81       	ldd	r24, Z+4	; 0x04
    409a:	89 1b       	sub	r24, r25
    409c:	86 17       	cp	r24, r22
    409e:	a8 f1       	brcs	.+106    	; 0x410a <serial_sendBytes+0x9a>
    40a0:	66 23       	and	r22, r22
    40a2:	41 f1       	breq	.+80     	; 0x40f4 <serial_sendBytes+0x84>
    40a4:	84 2f       	mov	r24, r20
    40a6:	95 2f       	mov	r25, r21
    40a8:	dc 01       	movw	r26, r24
    40aa:	61 50       	subi	r22, 0x01	; 1
    40ac:	46 2f       	mov	r20, r22
    40ae:	50 e0       	ldi	r21, 0x00	; 0
    40b0:	4f 5f       	subi	r20, 0xFF	; 255
    40b2:	5f 4f       	sbci	r21, 0xFF	; 255
    40b4:	48 0f       	add	r20, r24
    40b6:	59 1f       	adc	r21, r25
    40b8:	e7 01       	movw	r28, r14
    40ba:	ea 81       	ldd	r30, Y+2	; 0x02
    40bc:	fb 81       	ldd	r31, Y+3	; 0x03
    40be:	93 81       	ldd	r25, Z+3	; 0x03
    40c0:	82 81       	ldd	r24, Z+2	; 0x02
    40c2:	25 81       	ldd	r18, Z+5	; 0x05
    40c4:	98 1b       	sub	r25, r24
    40c6:	92 23       	and	r25, r18
    40c8:	84 81       	ldd	r24, Z+4	; 0x04
    40ca:	98 17       	cp	r25, r24
    40cc:	79 f0       	breq	.+30     	; 0x40ec <serial_sendBytes+0x7c>
    40ce:	8c 91       	ld	r24, X
    40d0:	93 81       	ldd	r25, Z+3	; 0x03
    40d2:	26 95       	lsr	r18
    40d4:	29 23       	and	r18, r25
    40d6:	60 81       	ld	r22, Z
    40d8:	71 81       	ldd	r23, Z+1	; 0x01
    40da:	8b 01       	movw	r16, r22
    40dc:	02 0f       	add	r16, r18
    40de:	11 1d       	adc	r17, r1
    40e0:	e8 01       	movw	r28, r16
    40e2:	88 83       	st	Y, r24
    40e4:	9f 5f       	subi	r25, 0xFF	; 255
    40e6:	85 81       	ldd	r24, Z+5	; 0x05
    40e8:	98 23       	and	r25, r24
    40ea:	93 83       	std	Z+3, r25	; 0x03
    40ec:	11 96       	adiw	r26, 0x01	; 1
    40ee:	a4 17       	cp	r26, r20
    40f0:	b5 07       	cpc	r27, r21
    40f2:	11 f7       	brne	.-60     	; 0x40b8 <serial_sendBytes+0x48>
    40f4:	d7 01       	movw	r26, r14
    40f6:	ed 91       	ld	r30, X+
    40f8:	fc 91       	ld	r31, X
    40fa:	35 97       	sbiw	r30, 0x05	; 5
    40fc:	80 81       	ld	r24, Z
    40fe:	80 62       	ori	r24, 0x20	; 32
    4100:	80 83       	st	Z, r24
    4102:	80 e0       	ldi	r24, 0x00	; 0
    4104:	03 c0       	rjmp	.+6      	; 0x410c <serial_sendBytes+0x9c>
    4106:	81 e0       	ldi	r24, 0x01	; 1
    4108:	01 c0       	rjmp	.+2      	; 0x410c <serial_sendBytes+0x9c>
    410a:	82 e0       	ldi	r24, 0x02	; 2
    410c:	df 91       	pop	r29
    410e:	cf 91       	pop	r28
    4110:	1f 91       	pop	r17
    4112:	0f 91       	pop	r16
    4114:	ff 90       	pop	r15
    4116:	ef 90       	pop	r14
    4118:	08 95       	ret

0000411a <serial_getByte>:
    411a:	00 97       	sbiw	r24, 0x00	; 0
    411c:	d1 f0       	breq	.+52     	; 0x4152 <serial_getByte+0x38>
    411e:	dc 01       	movw	r26, r24
    4120:	14 96       	adiw	r26, 0x04	; 4
    4122:	ed 91       	ld	r30, X+
    4124:	fc 91       	ld	r31, X
    4126:	15 97       	sbiw	r26, 0x05	; 5
    4128:	93 81       	ldd	r25, Z+3	; 0x03
    412a:	82 81       	ldd	r24, Z+2	; 0x02
    412c:	98 17       	cp	r25, r24
    412e:	99 f0       	breq	.+38     	; 0x4156 <serial_getByte+0x3c>
    4130:	92 81       	ldd	r25, Z+2	; 0x02
    4132:	85 81       	ldd	r24, Z+5	; 0x05
    4134:	86 95       	lsr	r24
    4136:	89 23       	and	r24, r25
    4138:	a0 81       	ld	r26, Z
    413a:	b1 81       	ldd	r27, Z+1	; 0x01
    413c:	a8 0f       	add	r26, r24
    413e:	b1 1d       	adc	r27, r1
    4140:	8c 91       	ld	r24, X
    4142:	db 01       	movw	r26, r22
    4144:	8c 93       	st	X, r24
    4146:	9f 5f       	subi	r25, 0xFF	; 255
    4148:	85 81       	ldd	r24, Z+5	; 0x05
    414a:	98 23       	and	r25, r24
    414c:	92 83       	std	Z+2, r25	; 0x02
    414e:	80 e0       	ldi	r24, 0x00	; 0
    4150:	08 95       	ret
    4152:	81 e0       	ldi	r24, 0x01	; 1
    4154:	08 95       	ret
    4156:	83 e0       	ldi	r24, 0x03	; 3
    4158:	08 95       	ret

0000415a <__vector_25>:
    415a:	1f 92       	push	r1
    415c:	0f 92       	push	r0
    415e:	0f b6       	in	r0, 0x3f	; 63
    4160:	0f 92       	push	r0
    4162:	11 24       	eor	r1, r1
    4164:	0b b6       	in	r0, 0x3b	; 59
    4166:	0f 92       	push	r0
    4168:	2f 93       	push	r18
    416a:	3f 93       	push	r19
    416c:	4f 93       	push	r20
    416e:	5f 93       	push	r21
    4170:	6f 93       	push	r22
    4172:	7f 93       	push	r23
    4174:	8f 93       	push	r24
    4176:	9f 93       	push	r25
    4178:	af 93       	push	r26
    417a:	bf 93       	push	r27
    417c:	cf 93       	push	r28
    417e:	df 93       	push	r29
    4180:	ef 93       	push	r30
    4182:	ff 93       	push	r31
    4184:	a0 91 3b 17 	lds	r26, 0x173B	; 0x80173b <_ser_handle>
    4188:	b0 91 3c 17 	lds	r27, 0x173C	; 0x80173c <_ser_handle+0x1>
    418c:	10 97       	sbiw	r26, 0x00	; 0
    418e:	11 f1       	breq	.+68     	; 0x41d4 <__vector_25+0x7a>
    4190:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4194:	14 96       	adiw	r26, 0x04	; 4
    4196:	ed 91       	ld	r30, X+
    4198:	fc 91       	ld	r31, X
    419a:	15 97       	sbiw	r26, 0x05	; 5
    419c:	93 81       	ldd	r25, Z+3	; 0x03
    419e:	82 81       	ldd	r24, Z+2	; 0x02
    41a0:	25 81       	ldd	r18, Z+5	; 0x05
    41a2:	98 1b       	sub	r25, r24
    41a4:	92 23       	and	r25, r18
    41a6:	84 81       	ldd	r24, Z+4	; 0x04
    41a8:	98 17       	cp	r25, r24
    41aa:	61 f0       	breq	.+24     	; 0x41c4 <__vector_25+0x6a>
    41ac:	83 81       	ldd	r24, Z+3	; 0x03
    41ae:	26 95       	lsr	r18
    41b0:	28 23       	and	r18, r24
    41b2:	c0 81       	ld	r28, Z
    41b4:	d1 81       	ldd	r29, Z+1	; 0x01
    41b6:	c2 0f       	add	r28, r18
    41b8:	d1 1d       	adc	r29, r1
    41ba:	68 83       	st	Y, r22
    41bc:	8f 5f       	subi	r24, 0xFF	; 255
    41be:	95 81       	ldd	r25, Z+5	; 0x05
    41c0:	89 23       	and	r24, r25
    41c2:	83 83       	std	Z+3, r24	; 0x03
    41c4:	16 96       	adiw	r26, 0x06	; 6
    41c6:	ed 91       	ld	r30, X+
    41c8:	fc 91       	ld	r31, X
    41ca:	17 97       	sbiw	r26, 0x07	; 7
    41cc:	30 97       	sbiw	r30, 0x00	; 0
    41ce:	11 f0       	breq	.+4      	; 0x41d4 <__vector_25+0x7a>
    41d0:	cd 01       	movw	r24, r26
    41d2:	19 95       	eicall
    41d4:	ff 91       	pop	r31
    41d6:	ef 91       	pop	r30
    41d8:	df 91       	pop	r29
    41da:	cf 91       	pop	r28
    41dc:	bf 91       	pop	r27
    41de:	af 91       	pop	r26
    41e0:	9f 91       	pop	r25
    41e2:	8f 91       	pop	r24
    41e4:	7f 91       	pop	r23
    41e6:	6f 91       	pop	r22
    41e8:	5f 91       	pop	r21
    41ea:	4f 91       	pop	r20
    41ec:	3f 91       	pop	r19
    41ee:	2f 91       	pop	r18
    41f0:	0f 90       	pop	r0
    41f2:	0b be       	out	0x3b, r0	; 59
    41f4:	0f 90       	pop	r0
    41f6:	0f be       	out	0x3f, r0	; 63
    41f8:	0f 90       	pop	r0
    41fa:	1f 90       	pop	r1
    41fc:	18 95       	reti

000041fe <__vector_26>:
    41fe:	1f 92       	push	r1
    4200:	0f 92       	push	r0
    4202:	0f b6       	in	r0, 0x3f	; 63
    4204:	0f 92       	push	r0
    4206:	11 24       	eor	r1, r1
    4208:	0b b6       	in	r0, 0x3b	; 59
    420a:	0f 92       	push	r0
    420c:	2f 93       	push	r18
    420e:	8f 93       	push	r24
    4210:	9f 93       	push	r25
    4212:	af 93       	push	r26
    4214:	bf 93       	push	r27
    4216:	ef 93       	push	r30
    4218:	ff 93       	push	r31
    421a:	e0 91 3b 17 	lds	r30, 0x173B	; 0x80173b <_ser_handle>
    421e:	f0 91 3c 17 	lds	r31, 0x173C	; 0x80173c <_ser_handle+0x1>
    4222:	30 97       	sbiw	r30, 0x00	; 0
    4224:	b9 f0       	breq	.+46     	; 0x4254 <__vector_26+0x56>
    4226:	02 80       	ldd	r0, Z+2	; 0x02
    4228:	f3 81       	ldd	r31, Z+3	; 0x03
    422a:	e0 2d       	mov	r30, r0
    422c:	93 81       	ldd	r25, Z+3	; 0x03
    422e:	82 81       	ldd	r24, Z+2	; 0x02
    4230:	98 17       	cp	r25, r24
    4232:	b1 f0       	breq	.+44     	; 0x4260 <__vector_26+0x62>
    4234:	92 81       	ldd	r25, Z+2	; 0x02
    4236:	85 81       	ldd	r24, Z+5	; 0x05
    4238:	28 2f       	mov	r18, r24
    423a:	26 95       	lsr	r18
    423c:	29 23       	and	r18, r25
    423e:	a0 81       	ld	r26, Z
    4240:	b1 81       	ldd	r27, Z+1	; 0x01
    4242:	a2 0f       	add	r26, r18
    4244:	b1 1d       	adc	r27, r1
    4246:	2c 91       	ld	r18, X
    4248:	9f 5f       	subi	r25, 0xFF	; 255
    424a:	89 23       	and	r24, r25
    424c:	82 83       	std	Z+2, r24	; 0x02
    424e:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4252:	0b c0       	rjmp	.+22     	; 0x426a <__vector_26+0x6c>
    4254:	e1 ec       	ldi	r30, 0xC1	; 193
    4256:	f0 e0       	ldi	r31, 0x00	; 0
    4258:	80 81       	ld	r24, Z
    425a:	8f 7d       	andi	r24, 0xDF	; 223
    425c:	80 83       	st	Z, r24
    425e:	05 c0       	rjmp	.+10     	; 0x426a <__vector_26+0x6c>
    4260:	e1 ec       	ldi	r30, 0xC1	; 193
    4262:	f0 e0       	ldi	r31, 0x00	; 0
    4264:	80 81       	ld	r24, Z
    4266:	8f 7d       	andi	r24, 0xDF	; 223
    4268:	80 83       	st	Z, r24
    426a:	ff 91       	pop	r31
    426c:	ef 91       	pop	r30
    426e:	bf 91       	pop	r27
    4270:	af 91       	pop	r26
    4272:	9f 91       	pop	r25
    4274:	8f 91       	pop	r24
    4276:	2f 91       	pop	r18
    4278:	0f 90       	pop	r0
    427a:	0b be       	out	0x3b, r0	; 59
    427c:	0f 90       	pop	r0
    427e:	0f be       	out	0x3f, r0	; 63
    4280:	0f 90       	pop	r0
    4282:	1f 90       	pop	r1
    4284:	18 95       	reti

00004286 <__vector_36>:
    4286:	1f 92       	push	r1
    4288:	0f 92       	push	r0
    428a:	0f b6       	in	r0, 0x3f	; 63
    428c:	0f 92       	push	r0
    428e:	11 24       	eor	r1, r1
    4290:	0b b6       	in	r0, 0x3b	; 59
    4292:	0f 92       	push	r0
    4294:	2f 93       	push	r18
    4296:	3f 93       	push	r19
    4298:	4f 93       	push	r20
    429a:	5f 93       	push	r21
    429c:	6f 93       	push	r22
    429e:	7f 93       	push	r23
    42a0:	8f 93       	push	r24
    42a2:	9f 93       	push	r25
    42a4:	af 93       	push	r26
    42a6:	bf 93       	push	r27
    42a8:	cf 93       	push	r28
    42aa:	df 93       	push	r29
    42ac:	ef 93       	push	r30
    42ae:	ff 93       	push	r31
    42b0:	a0 91 3d 17 	lds	r26, 0x173D	; 0x80173d <_ser_handle+0x2>
    42b4:	b0 91 3e 17 	lds	r27, 0x173E	; 0x80173e <_ser_handle+0x3>
    42b8:	10 97       	sbiw	r26, 0x00	; 0
    42ba:	11 f1       	breq	.+68     	; 0x4300 <__vector_36+0x7a>
    42bc:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    42c0:	14 96       	adiw	r26, 0x04	; 4
    42c2:	ed 91       	ld	r30, X+
    42c4:	fc 91       	ld	r31, X
    42c6:	15 97       	sbiw	r26, 0x05	; 5
    42c8:	93 81       	ldd	r25, Z+3	; 0x03
    42ca:	82 81       	ldd	r24, Z+2	; 0x02
    42cc:	25 81       	ldd	r18, Z+5	; 0x05
    42ce:	98 1b       	sub	r25, r24
    42d0:	92 23       	and	r25, r18
    42d2:	84 81       	ldd	r24, Z+4	; 0x04
    42d4:	98 17       	cp	r25, r24
    42d6:	61 f0       	breq	.+24     	; 0x42f0 <__vector_36+0x6a>
    42d8:	83 81       	ldd	r24, Z+3	; 0x03
    42da:	26 95       	lsr	r18
    42dc:	28 23       	and	r18, r24
    42de:	c0 81       	ld	r28, Z
    42e0:	d1 81       	ldd	r29, Z+1	; 0x01
    42e2:	c2 0f       	add	r28, r18
    42e4:	d1 1d       	adc	r29, r1
    42e6:	68 83       	st	Y, r22
    42e8:	8f 5f       	subi	r24, 0xFF	; 255
    42ea:	95 81       	ldd	r25, Z+5	; 0x05
    42ec:	89 23       	and	r24, r25
    42ee:	83 83       	std	Z+3, r24	; 0x03
    42f0:	16 96       	adiw	r26, 0x06	; 6
    42f2:	ed 91       	ld	r30, X+
    42f4:	fc 91       	ld	r31, X
    42f6:	17 97       	sbiw	r26, 0x07	; 7
    42f8:	30 97       	sbiw	r30, 0x00	; 0
    42fa:	11 f0       	breq	.+4      	; 0x4300 <__vector_36+0x7a>
    42fc:	cd 01       	movw	r24, r26
    42fe:	19 95       	eicall
    4300:	ff 91       	pop	r31
    4302:	ef 91       	pop	r30
    4304:	df 91       	pop	r29
    4306:	cf 91       	pop	r28
    4308:	bf 91       	pop	r27
    430a:	af 91       	pop	r26
    430c:	9f 91       	pop	r25
    430e:	8f 91       	pop	r24
    4310:	7f 91       	pop	r23
    4312:	6f 91       	pop	r22
    4314:	5f 91       	pop	r21
    4316:	4f 91       	pop	r20
    4318:	3f 91       	pop	r19
    431a:	2f 91       	pop	r18
    431c:	0f 90       	pop	r0
    431e:	0b be       	out	0x3b, r0	; 59
    4320:	0f 90       	pop	r0
    4322:	0f be       	out	0x3f, r0	; 63
    4324:	0f 90       	pop	r0
    4326:	1f 90       	pop	r1
    4328:	18 95       	reti

0000432a <__vector_37>:
    432a:	1f 92       	push	r1
    432c:	0f 92       	push	r0
    432e:	0f b6       	in	r0, 0x3f	; 63
    4330:	0f 92       	push	r0
    4332:	11 24       	eor	r1, r1
    4334:	0b b6       	in	r0, 0x3b	; 59
    4336:	0f 92       	push	r0
    4338:	2f 93       	push	r18
    433a:	8f 93       	push	r24
    433c:	9f 93       	push	r25
    433e:	af 93       	push	r26
    4340:	bf 93       	push	r27
    4342:	ef 93       	push	r30
    4344:	ff 93       	push	r31
    4346:	e0 91 3d 17 	lds	r30, 0x173D	; 0x80173d <_ser_handle+0x2>
    434a:	f0 91 3e 17 	lds	r31, 0x173E	; 0x80173e <_ser_handle+0x3>
    434e:	30 97       	sbiw	r30, 0x00	; 0
    4350:	b9 f0       	breq	.+46     	; 0x4380 <__vector_37+0x56>
    4352:	02 80       	ldd	r0, Z+2	; 0x02
    4354:	f3 81       	ldd	r31, Z+3	; 0x03
    4356:	e0 2d       	mov	r30, r0
    4358:	93 81       	ldd	r25, Z+3	; 0x03
    435a:	82 81       	ldd	r24, Z+2	; 0x02
    435c:	98 17       	cp	r25, r24
    435e:	b1 f0       	breq	.+44     	; 0x438c <__vector_37+0x62>
    4360:	92 81       	ldd	r25, Z+2	; 0x02
    4362:	85 81       	ldd	r24, Z+5	; 0x05
    4364:	28 2f       	mov	r18, r24
    4366:	26 95       	lsr	r18
    4368:	29 23       	and	r18, r25
    436a:	a0 81       	ld	r26, Z
    436c:	b1 81       	ldd	r27, Z+1	; 0x01
    436e:	a2 0f       	add	r26, r18
    4370:	b1 1d       	adc	r27, r1
    4372:	2c 91       	ld	r18, X
    4374:	9f 5f       	subi	r25, 0xFF	; 255
    4376:	89 23       	and	r24, r25
    4378:	82 83       	std	Z+2, r24	; 0x02
    437a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    437e:	0b c0       	rjmp	.+22     	; 0x4396 <__vector_37+0x6c>
    4380:	e9 ec       	ldi	r30, 0xC9	; 201
    4382:	f0 e0       	ldi	r31, 0x00	; 0
    4384:	80 81       	ld	r24, Z
    4386:	8f 7d       	andi	r24, 0xDF	; 223
    4388:	80 83       	st	Z, r24
    438a:	05 c0       	rjmp	.+10     	; 0x4396 <__vector_37+0x6c>
    438c:	e9 ec       	ldi	r30, 0xC9	; 201
    438e:	f0 e0       	ldi	r31, 0x00	; 0
    4390:	80 81       	ld	r24, Z
    4392:	8f 7d       	andi	r24, 0xDF	; 223
    4394:	80 83       	st	Z, r24
    4396:	ff 91       	pop	r31
    4398:	ef 91       	pop	r30
    439a:	bf 91       	pop	r27
    439c:	af 91       	pop	r26
    439e:	9f 91       	pop	r25
    43a0:	8f 91       	pop	r24
    43a2:	2f 91       	pop	r18
    43a4:	0f 90       	pop	r0
    43a6:	0b be       	out	0x3b, r0	; 59
    43a8:	0f 90       	pop	r0
    43aa:	0f be       	out	0x3f, r0	; 63
    43ac:	0f 90       	pop	r0
    43ae:	1f 90       	pop	r1
    43b0:	18 95       	reti

000043b2 <__vector_51>:
    43b2:	1f 92       	push	r1
    43b4:	0f 92       	push	r0
    43b6:	0f b6       	in	r0, 0x3f	; 63
    43b8:	0f 92       	push	r0
    43ba:	11 24       	eor	r1, r1
    43bc:	0b b6       	in	r0, 0x3b	; 59
    43be:	0f 92       	push	r0
    43c0:	2f 93       	push	r18
    43c2:	3f 93       	push	r19
    43c4:	4f 93       	push	r20
    43c6:	5f 93       	push	r21
    43c8:	6f 93       	push	r22
    43ca:	7f 93       	push	r23
    43cc:	8f 93       	push	r24
    43ce:	9f 93       	push	r25
    43d0:	af 93       	push	r26
    43d2:	bf 93       	push	r27
    43d4:	cf 93       	push	r28
    43d6:	df 93       	push	r29
    43d8:	ef 93       	push	r30
    43da:	ff 93       	push	r31
    43dc:	a0 91 3f 17 	lds	r26, 0x173F	; 0x80173f <_ser_handle+0x4>
    43e0:	b0 91 40 17 	lds	r27, 0x1740	; 0x801740 <_ser_handle+0x5>
    43e4:	10 97       	sbiw	r26, 0x00	; 0
    43e6:	11 f1       	breq	.+68     	; 0x442c <__vector_51+0x7a>
    43e8:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    43ec:	14 96       	adiw	r26, 0x04	; 4
    43ee:	ed 91       	ld	r30, X+
    43f0:	fc 91       	ld	r31, X
    43f2:	15 97       	sbiw	r26, 0x05	; 5
    43f4:	93 81       	ldd	r25, Z+3	; 0x03
    43f6:	82 81       	ldd	r24, Z+2	; 0x02
    43f8:	25 81       	ldd	r18, Z+5	; 0x05
    43fa:	98 1b       	sub	r25, r24
    43fc:	92 23       	and	r25, r18
    43fe:	84 81       	ldd	r24, Z+4	; 0x04
    4400:	98 17       	cp	r25, r24
    4402:	61 f0       	breq	.+24     	; 0x441c <__vector_51+0x6a>
    4404:	83 81       	ldd	r24, Z+3	; 0x03
    4406:	26 95       	lsr	r18
    4408:	28 23       	and	r18, r24
    440a:	c0 81       	ld	r28, Z
    440c:	d1 81       	ldd	r29, Z+1	; 0x01
    440e:	c2 0f       	add	r28, r18
    4410:	d1 1d       	adc	r29, r1
    4412:	68 83       	st	Y, r22
    4414:	8f 5f       	subi	r24, 0xFF	; 255
    4416:	95 81       	ldd	r25, Z+5	; 0x05
    4418:	89 23       	and	r24, r25
    441a:	83 83       	std	Z+3, r24	; 0x03
    441c:	16 96       	adiw	r26, 0x06	; 6
    441e:	ed 91       	ld	r30, X+
    4420:	fc 91       	ld	r31, X
    4422:	17 97       	sbiw	r26, 0x07	; 7
    4424:	30 97       	sbiw	r30, 0x00	; 0
    4426:	11 f0       	breq	.+4      	; 0x442c <__vector_51+0x7a>
    4428:	cd 01       	movw	r24, r26
    442a:	19 95       	eicall
    442c:	ff 91       	pop	r31
    442e:	ef 91       	pop	r30
    4430:	df 91       	pop	r29
    4432:	cf 91       	pop	r28
    4434:	bf 91       	pop	r27
    4436:	af 91       	pop	r26
    4438:	9f 91       	pop	r25
    443a:	8f 91       	pop	r24
    443c:	7f 91       	pop	r23
    443e:	6f 91       	pop	r22
    4440:	5f 91       	pop	r21
    4442:	4f 91       	pop	r20
    4444:	3f 91       	pop	r19
    4446:	2f 91       	pop	r18
    4448:	0f 90       	pop	r0
    444a:	0b be       	out	0x3b, r0	; 59
    444c:	0f 90       	pop	r0
    444e:	0f be       	out	0x3f, r0	; 63
    4450:	0f 90       	pop	r0
    4452:	1f 90       	pop	r1
    4454:	18 95       	reti

00004456 <__vector_52>:
    4456:	1f 92       	push	r1
    4458:	0f 92       	push	r0
    445a:	0f b6       	in	r0, 0x3f	; 63
    445c:	0f 92       	push	r0
    445e:	11 24       	eor	r1, r1
    4460:	0b b6       	in	r0, 0x3b	; 59
    4462:	0f 92       	push	r0
    4464:	2f 93       	push	r18
    4466:	8f 93       	push	r24
    4468:	9f 93       	push	r25
    446a:	af 93       	push	r26
    446c:	bf 93       	push	r27
    446e:	ef 93       	push	r30
    4470:	ff 93       	push	r31
    4472:	e0 91 3f 17 	lds	r30, 0x173F	; 0x80173f <_ser_handle+0x4>
    4476:	f0 91 40 17 	lds	r31, 0x1740	; 0x801740 <_ser_handle+0x5>
    447a:	30 97       	sbiw	r30, 0x00	; 0
    447c:	b9 f0       	breq	.+46     	; 0x44ac <__vector_52+0x56>
    447e:	02 80       	ldd	r0, Z+2	; 0x02
    4480:	f3 81       	ldd	r31, Z+3	; 0x03
    4482:	e0 2d       	mov	r30, r0
    4484:	93 81       	ldd	r25, Z+3	; 0x03
    4486:	82 81       	ldd	r24, Z+2	; 0x02
    4488:	98 17       	cp	r25, r24
    448a:	b1 f0       	breq	.+44     	; 0x44b8 <__vector_52+0x62>
    448c:	92 81       	ldd	r25, Z+2	; 0x02
    448e:	85 81       	ldd	r24, Z+5	; 0x05
    4490:	28 2f       	mov	r18, r24
    4492:	26 95       	lsr	r18
    4494:	29 23       	and	r18, r25
    4496:	a0 81       	ld	r26, Z
    4498:	b1 81       	ldd	r27, Z+1	; 0x01
    449a:	a2 0f       	add	r26, r18
    449c:	b1 1d       	adc	r27, r1
    449e:	2c 91       	ld	r18, X
    44a0:	9f 5f       	subi	r25, 0xFF	; 255
    44a2:	89 23       	and	r24, r25
    44a4:	82 83       	std	Z+2, r24	; 0x02
    44a6:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    44aa:	0b c0       	rjmp	.+22     	; 0x44c2 <__vector_52+0x6c>
    44ac:	e1 ed       	ldi	r30, 0xD1	; 209
    44ae:	f0 e0       	ldi	r31, 0x00	; 0
    44b0:	80 81       	ld	r24, Z
    44b2:	8f 7d       	andi	r24, 0xDF	; 223
    44b4:	80 83       	st	Z, r24
    44b6:	05 c0       	rjmp	.+10     	; 0x44c2 <__vector_52+0x6c>
    44b8:	e1 ed       	ldi	r30, 0xD1	; 209
    44ba:	f0 e0       	ldi	r31, 0x00	; 0
    44bc:	80 81       	ld	r24, Z
    44be:	8f 7d       	andi	r24, 0xDF	; 223
    44c0:	80 83       	st	Z, r24
    44c2:	ff 91       	pop	r31
    44c4:	ef 91       	pop	r30
    44c6:	bf 91       	pop	r27
    44c8:	af 91       	pop	r26
    44ca:	9f 91       	pop	r25
    44cc:	8f 91       	pop	r24
    44ce:	2f 91       	pop	r18
    44d0:	0f 90       	pop	r0
    44d2:	0b be       	out	0x3b, r0	; 59
    44d4:	0f 90       	pop	r0
    44d6:	0f be       	out	0x3f, r0	; 63
    44d8:	0f 90       	pop	r0
    44da:	1f 90       	pop	r1
    44dc:	18 95       	reti

000044de <__vector_54>:
    44de:	1f 92       	push	r1
    44e0:	0f 92       	push	r0
    44e2:	0f b6       	in	r0, 0x3f	; 63
    44e4:	0f 92       	push	r0
    44e6:	11 24       	eor	r1, r1
    44e8:	0b b6       	in	r0, 0x3b	; 59
    44ea:	0f 92       	push	r0
    44ec:	2f 93       	push	r18
    44ee:	3f 93       	push	r19
    44f0:	4f 93       	push	r20
    44f2:	5f 93       	push	r21
    44f4:	6f 93       	push	r22
    44f6:	7f 93       	push	r23
    44f8:	8f 93       	push	r24
    44fa:	9f 93       	push	r25
    44fc:	af 93       	push	r26
    44fe:	bf 93       	push	r27
    4500:	cf 93       	push	r28
    4502:	df 93       	push	r29
    4504:	ef 93       	push	r30
    4506:	ff 93       	push	r31
    4508:	a0 91 41 17 	lds	r26, 0x1741	; 0x801741 <_ser_handle+0x6>
    450c:	b0 91 42 17 	lds	r27, 0x1742	; 0x801742 <_ser_handle+0x7>
    4510:	10 97       	sbiw	r26, 0x00	; 0
    4512:	11 f1       	breq	.+68     	; 0x4558 <__vector_54+0x7a>
    4514:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4518:	14 96       	adiw	r26, 0x04	; 4
    451a:	ed 91       	ld	r30, X+
    451c:	fc 91       	ld	r31, X
    451e:	15 97       	sbiw	r26, 0x05	; 5
    4520:	93 81       	ldd	r25, Z+3	; 0x03
    4522:	82 81       	ldd	r24, Z+2	; 0x02
    4524:	25 81       	ldd	r18, Z+5	; 0x05
    4526:	98 1b       	sub	r25, r24
    4528:	92 23       	and	r25, r18
    452a:	84 81       	ldd	r24, Z+4	; 0x04
    452c:	98 17       	cp	r25, r24
    452e:	61 f0       	breq	.+24     	; 0x4548 <__vector_54+0x6a>
    4530:	83 81       	ldd	r24, Z+3	; 0x03
    4532:	26 95       	lsr	r18
    4534:	28 23       	and	r18, r24
    4536:	c0 81       	ld	r28, Z
    4538:	d1 81       	ldd	r29, Z+1	; 0x01
    453a:	c2 0f       	add	r28, r18
    453c:	d1 1d       	adc	r29, r1
    453e:	68 83       	st	Y, r22
    4540:	8f 5f       	subi	r24, 0xFF	; 255
    4542:	95 81       	ldd	r25, Z+5	; 0x05
    4544:	89 23       	and	r24, r25
    4546:	83 83       	std	Z+3, r24	; 0x03
    4548:	16 96       	adiw	r26, 0x06	; 6
    454a:	ed 91       	ld	r30, X+
    454c:	fc 91       	ld	r31, X
    454e:	17 97       	sbiw	r26, 0x07	; 7
    4550:	30 97       	sbiw	r30, 0x00	; 0
    4552:	11 f0       	breq	.+4      	; 0x4558 <__vector_54+0x7a>
    4554:	cd 01       	movw	r24, r26
    4556:	19 95       	eicall
    4558:	ff 91       	pop	r31
    455a:	ef 91       	pop	r30
    455c:	df 91       	pop	r29
    455e:	cf 91       	pop	r28
    4560:	bf 91       	pop	r27
    4562:	af 91       	pop	r26
    4564:	9f 91       	pop	r25
    4566:	8f 91       	pop	r24
    4568:	7f 91       	pop	r23
    456a:	6f 91       	pop	r22
    456c:	5f 91       	pop	r21
    456e:	4f 91       	pop	r20
    4570:	3f 91       	pop	r19
    4572:	2f 91       	pop	r18
    4574:	0f 90       	pop	r0
    4576:	0b be       	out	0x3b, r0	; 59
    4578:	0f 90       	pop	r0
    457a:	0f be       	out	0x3f, r0	; 63
    457c:	0f 90       	pop	r0
    457e:	1f 90       	pop	r1
    4580:	18 95       	reti

00004582 <__vector_55>:
    4582:	1f 92       	push	r1
    4584:	0f 92       	push	r0
    4586:	0f b6       	in	r0, 0x3f	; 63
    4588:	0f 92       	push	r0
    458a:	11 24       	eor	r1, r1
    458c:	0b b6       	in	r0, 0x3b	; 59
    458e:	0f 92       	push	r0
    4590:	2f 93       	push	r18
    4592:	8f 93       	push	r24
    4594:	9f 93       	push	r25
    4596:	af 93       	push	r26
    4598:	bf 93       	push	r27
    459a:	ef 93       	push	r30
    459c:	ff 93       	push	r31
    459e:	e0 91 41 17 	lds	r30, 0x1741	; 0x801741 <_ser_handle+0x6>
    45a2:	f0 91 42 17 	lds	r31, 0x1742	; 0x801742 <_ser_handle+0x7>
    45a6:	30 97       	sbiw	r30, 0x00	; 0
    45a8:	b9 f0       	breq	.+46     	; 0x45d8 <__vector_55+0x56>
    45aa:	02 80       	ldd	r0, Z+2	; 0x02
    45ac:	f3 81       	ldd	r31, Z+3	; 0x03
    45ae:	e0 2d       	mov	r30, r0
    45b0:	93 81       	ldd	r25, Z+3	; 0x03
    45b2:	82 81       	ldd	r24, Z+2	; 0x02
    45b4:	98 17       	cp	r25, r24
    45b6:	b1 f0       	breq	.+44     	; 0x45e4 <__vector_55+0x62>
    45b8:	92 81       	ldd	r25, Z+2	; 0x02
    45ba:	85 81       	ldd	r24, Z+5	; 0x05
    45bc:	28 2f       	mov	r18, r24
    45be:	26 95       	lsr	r18
    45c0:	29 23       	and	r18, r25
    45c2:	a0 81       	ld	r26, Z
    45c4:	b1 81       	ldd	r27, Z+1	; 0x01
    45c6:	a2 0f       	add	r26, r18
    45c8:	b1 1d       	adc	r27, r1
    45ca:	2c 91       	ld	r18, X
    45cc:	9f 5f       	subi	r25, 0xFF	; 255
    45ce:	89 23       	and	r24, r25
    45d0:	82 83       	std	Z+2, r24	; 0x02
    45d2:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    45d6:	0b c0       	rjmp	.+22     	; 0x45ee <__vector_55+0x6c>
    45d8:	e1 e3       	ldi	r30, 0x31	; 49
    45da:	f1 e0       	ldi	r31, 0x01	; 1
    45dc:	80 81       	ld	r24, Z
    45de:	8f 7d       	andi	r24, 0xDF	; 223
    45e0:	80 83       	st	Z, r24
    45e2:	05 c0       	rjmp	.+10     	; 0x45ee <__vector_55+0x6c>
    45e4:	e1 e3       	ldi	r30, 0x31	; 49
    45e6:	f1 e0       	ldi	r31, 0x01	; 1
    45e8:	80 81       	ld	r24, Z
    45ea:	8f 7d       	andi	r24, 0xDF	; 223
    45ec:	80 83       	st	Z, r24
    45ee:	ff 91       	pop	r31
    45f0:	ef 91       	pop	r30
    45f2:	bf 91       	pop	r27
    45f4:	af 91       	pop	r26
    45f6:	9f 91       	pop	r25
    45f8:	8f 91       	pop	r24
    45fa:	2f 91       	pop	r18
    45fc:	0f 90       	pop	r0
    45fe:	0b be       	out	0x3b, r0	; 59
    4600:	0f 90       	pop	r0
    4602:	0f be       	out	0x3f, r0	; 63
    4604:	0f 90       	pop	r0
    4606:	1f 90       	pop	r1
    4608:	18 95       	reti

0000460a <usart_getchar>:
    460a:	cf 93       	push	r28
    460c:	df 93       	push	r29
    460e:	1f 92       	push	r1
    4610:	cd b7       	in	r28, 0x3d	; 61
    4612:	de b7       	in	r29, 0x3e	; 62
    4614:	be 01       	movw	r22, r28
    4616:	6f 5f       	subi	r22, 0xFF	; 255
    4618:	7f 4f       	sbci	r23, 0xFF	; 255
    461a:	80 91 43 17 	lds	r24, 0x1743	; 0x801743 <_com_serial_instance>
    461e:	90 91 44 17 	lds	r25, 0x1744	; 0x801744 <_com_serial_instance+0x1>
    4622:	7b dd       	rcall	.-1290   	; 0x411a <serial_getByte>
    4624:	81 11       	cpse	r24, r1
    4626:	f6 cf       	rjmp	.-20     	; 0x4614 <usart_getchar+0xa>
    4628:	89 81       	ldd	r24, Y+1	; 0x01
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	0f 90       	pop	r0
    462e:	df 91       	pop	r29
    4630:	cf 91       	pop	r28
    4632:	08 95       	ret

00004634 <usart_putchar>:
    4634:	68 2f       	mov	r22, r24
    4636:	80 91 43 17 	lds	r24, 0x1743	; 0x801743 <_com_serial_instance>
    463a:	90 91 44 17 	lds	r25, 0x1744	; 0x801744 <_com_serial_instance+0x1>
    463e:	ed dc       	rcall	.-1574   	; 0x401a <serial_sendByte>
    4640:	80 e0       	ldi	r24, 0x00	; 0
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	08 95       	ret

00004646 <stdio_initialise>:
    4646:	8f 92       	push	r8
    4648:	9f 92       	push	r9
    464a:	af 92       	push	r10
    464c:	cf 92       	push	r12
    464e:	ef 92       	push	r14
    4650:	0f 93       	push	r16
    4652:	81 2c       	mov	r8, r1
    4654:	91 2c       	mov	r9, r1
    4656:	68 94       	set
    4658:	aa 24       	eor	r10, r10
    465a:	a7 f8       	bld	r10, 7
    465c:	68 94       	set
    465e:	cc 24       	eor	r12, r12
    4660:	c7 f8       	bld	r12, 7
    4662:	e1 2c       	mov	r14, r1
    4664:	00 e0       	ldi	r16, 0x00	; 0
    4666:	23 e0       	ldi	r18, 0x03	; 3
    4668:	40 e0       	ldi	r20, 0x00	; 0
    466a:	51 ee       	ldi	r21, 0xE1	; 225
    466c:	60 e0       	ldi	r22, 0x00	; 0
    466e:	70 e0       	ldi	r23, 0x00	; 0
    4670:	32 dc       	rcall	.-1948   	; 0x3ed6 <serial_create>
    4672:	90 93 44 17 	sts	0x1744, r25	; 0x801744 <_com_serial_instance+0x1>
    4676:	80 93 43 17 	sts	0x1743, r24	; 0x801743 <_com_serial_instance>
    467a:	e6 e7       	ldi	r30, 0x76	; 118
    467c:	f7 e1       	ldi	r31, 0x17	; 23
    467e:	83 e1       	ldi	r24, 0x13	; 19
    4680:	92 e0       	ldi	r25, 0x02	; 2
    4682:	91 83       	std	Z+1, r25	; 0x01
    4684:	80 83       	st	Z, r24
    4686:	93 83       	std	Z+3, r25	; 0x03
    4688:	82 83       	std	Z+2, r24	; 0x02
    468a:	0f 91       	pop	r16
    468c:	ef 90       	pop	r14
    468e:	cf 90       	pop	r12
    4690:	af 90       	pop	r10
    4692:	9f 90       	pop	r9
    4694:	8f 90       	pop	r8
    4696:	08 95       	ret

00004698 <_turn_off>:
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	fc 01       	movw	r30, r24
    469c:	ee 0f       	add	r30, r30
    469e:	ff 1f       	adc	r31, r31
    46a0:	e8 0f       	add	r30, r24
    46a2:	f9 1f       	adc	r31, r25
    46a4:	ee 0f       	add	r30, r30
    46a6:	ff 1f       	adc	r31, r31
    46a8:	eb 5b       	subi	r30, 0xBB	; 187
    46aa:	f8 4e       	sbci	r31, 0xE8	; 232
    46ac:	23 81       	ldd	r18, Z+3	; 0x03
    46ae:	21 11       	cpse	r18, r1
    46b0:	1f c0       	rjmp	.+62     	; 0x46f0 <_turn_off+0x58>
    46b2:	9c 01       	movw	r18, r24
    46b4:	22 0f       	add	r18, r18
    46b6:	33 1f       	adc	r19, r19
    46b8:	f9 01       	movw	r30, r18
    46ba:	e8 0f       	add	r30, r24
    46bc:	f9 1f       	adc	r31, r25
    46be:	ee 0f       	add	r30, r30
    46c0:	ff 1f       	adc	r31, r31
    46c2:	eb 5b       	subi	r30, 0xBB	; 187
    46c4:	f8 4e       	sbci	r31, 0xE8	; 232
    46c6:	a0 81       	ld	r26, Z
    46c8:	b1 81       	ldd	r27, Z+1	; 0x01
    46ca:	4c 91       	ld	r20, X
    46cc:	f9 01       	movw	r30, r18
    46ce:	e8 0f       	add	r30, r24
    46d0:	f9 1f       	adc	r31, r25
    46d2:	ee 0f       	add	r30, r30
    46d4:	ff 1f       	adc	r31, r31
    46d6:	eb 5b       	subi	r30, 0xBB	; 187
    46d8:	f8 4e       	sbci	r31, 0xE8	; 232
    46da:	81 e0       	ldi	r24, 0x01	; 1
    46dc:	90 e0       	ldi	r25, 0x00	; 0
    46de:	02 80       	ldd	r0, Z+2	; 0x02
    46e0:	02 c0       	rjmp	.+4      	; 0x46e6 <_turn_off+0x4e>
    46e2:	88 0f       	add	r24, r24
    46e4:	99 1f       	adc	r25, r25
    46e6:	0a 94       	dec	r0
    46e8:	e2 f7       	brpl	.-8      	; 0x46e2 <_turn_off+0x4a>
    46ea:	84 2b       	or	r24, r20
    46ec:	8c 93       	st	X, r24
    46ee:	08 95       	ret
    46f0:	fc 01       	movw	r30, r24
    46f2:	ee 0f       	add	r30, r30
    46f4:	ff 1f       	adc	r31, r31
    46f6:	df 01       	movw	r26, r30
    46f8:	a8 0f       	add	r26, r24
    46fa:	b9 1f       	adc	r27, r25
    46fc:	aa 0f       	add	r26, r26
    46fe:	bb 1f       	adc	r27, r27
    4700:	ab 5b       	subi	r26, 0xBB	; 187
    4702:	b8 4e       	sbci	r27, 0xE8	; 232
    4704:	0d 90       	ld	r0, X+
    4706:	bc 91       	ld	r27, X
    4708:	a0 2d       	mov	r26, r0
    470a:	2c 91       	ld	r18, X
    470c:	e8 0f       	add	r30, r24
    470e:	f9 1f       	adc	r31, r25
    4710:	ee 0f       	add	r30, r30
    4712:	ff 1f       	adc	r31, r31
    4714:	eb 5b       	subi	r30, 0xBB	; 187
    4716:	f8 4e       	sbci	r31, 0xE8	; 232
    4718:	81 e0       	ldi	r24, 0x01	; 1
    471a:	90 e0       	ldi	r25, 0x00	; 0
    471c:	02 80       	ldd	r0, Z+2	; 0x02
    471e:	02 c0       	rjmp	.+4      	; 0x4724 <_turn_off+0x8c>
    4720:	88 0f       	add	r24, r24
    4722:	99 1f       	adc	r25, r25
    4724:	0a 94       	dec	r0
    4726:	e2 f7       	brpl	.-8      	; 0x4720 <_turn_off+0x88>
    4728:	80 95       	com	r24
    472a:	82 23       	and	r24, r18
    472c:	8c 93       	st	X, r24
    472e:	08 95       	ret

00004730 <_turn_on>:
    4730:	90 e0       	ldi	r25, 0x00	; 0
    4732:	fc 01       	movw	r30, r24
    4734:	ee 0f       	add	r30, r30
    4736:	ff 1f       	adc	r31, r31
    4738:	e8 0f       	add	r30, r24
    473a:	f9 1f       	adc	r31, r25
    473c:	ee 0f       	add	r30, r30
    473e:	ff 1f       	adc	r31, r31
    4740:	eb 5b       	subi	r30, 0xBB	; 187
    4742:	f8 4e       	sbci	r31, 0xE8	; 232
    4744:	23 81       	ldd	r18, Z+3	; 0x03
    4746:	21 11       	cpse	r18, r1
    4748:	20 c0       	rjmp	.+64     	; 0x478a <_turn_on+0x5a>
    474a:	9c 01       	movw	r18, r24
    474c:	22 0f       	add	r18, r18
    474e:	33 1f       	adc	r19, r19
    4750:	f9 01       	movw	r30, r18
    4752:	e8 0f       	add	r30, r24
    4754:	f9 1f       	adc	r31, r25
    4756:	ee 0f       	add	r30, r30
    4758:	ff 1f       	adc	r31, r31
    475a:	eb 5b       	subi	r30, 0xBB	; 187
    475c:	f8 4e       	sbci	r31, 0xE8	; 232
    475e:	a0 81       	ld	r26, Z
    4760:	b1 81       	ldd	r27, Z+1	; 0x01
    4762:	4c 91       	ld	r20, X
    4764:	f9 01       	movw	r30, r18
    4766:	e8 0f       	add	r30, r24
    4768:	f9 1f       	adc	r31, r25
    476a:	ee 0f       	add	r30, r30
    476c:	ff 1f       	adc	r31, r31
    476e:	eb 5b       	subi	r30, 0xBB	; 187
    4770:	f8 4e       	sbci	r31, 0xE8	; 232
    4772:	81 e0       	ldi	r24, 0x01	; 1
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	02 80       	ldd	r0, Z+2	; 0x02
    4778:	02 c0       	rjmp	.+4      	; 0x477e <_turn_on+0x4e>
    477a:	88 0f       	add	r24, r24
    477c:	99 1f       	adc	r25, r25
    477e:	0a 94       	dec	r0
    4780:	e2 f7       	brpl	.-8      	; 0x477a <_turn_on+0x4a>
    4782:	80 95       	com	r24
    4784:	84 23       	and	r24, r20
    4786:	8c 93       	st	X, r24
    4788:	08 95       	ret
    478a:	fc 01       	movw	r30, r24
    478c:	ee 0f       	add	r30, r30
    478e:	ff 1f       	adc	r31, r31
    4790:	df 01       	movw	r26, r30
    4792:	a8 0f       	add	r26, r24
    4794:	b9 1f       	adc	r27, r25
    4796:	aa 0f       	add	r26, r26
    4798:	bb 1f       	adc	r27, r27
    479a:	ab 5b       	subi	r26, 0xBB	; 187
    479c:	b8 4e       	sbci	r27, 0xE8	; 232
    479e:	0d 90       	ld	r0, X+
    47a0:	bc 91       	ld	r27, X
    47a2:	a0 2d       	mov	r26, r0
    47a4:	2c 91       	ld	r18, X
    47a6:	e8 0f       	add	r30, r24
    47a8:	f9 1f       	adc	r31, r25
    47aa:	ee 0f       	add	r30, r30
    47ac:	ff 1f       	adc	r31, r31
    47ae:	eb 5b       	subi	r30, 0xBB	; 187
    47b0:	f8 4e       	sbci	r31, 0xE8	; 232
    47b2:	81 e0       	ldi	r24, 0x01	; 1
    47b4:	90 e0       	ldi	r25, 0x00	; 0
    47b6:	02 80       	ldd	r0, Z+2	; 0x02
    47b8:	02 c0       	rjmp	.+4      	; 0x47be <_turn_on+0x8e>
    47ba:	88 0f       	add	r24, r24
    47bc:	99 1f       	adc	r25, r25
    47be:	0a 94       	dec	r0
    47c0:	e2 f7       	brpl	.-8      	; 0x47ba <_turn_on+0x8a>
    47c2:	82 2b       	or	r24, r18
    47c4:	8c 93       	st	X, r24
    47c6:	08 95       	ret

000047c8 <_hal_led_task>:
    47c8:	cc 24       	eor	r12, r12
    47ca:	c3 94       	inc	r12
    47cc:	d1 2c       	mov	r13, r1
    47ce:	68 94       	set
    47d0:	bb 24       	eor	r11, r11
    47d2:	b2 f8       	bld	r11, 2
    47d4:	c5 e4       	ldi	r28, 0x45	; 69
    47d6:	d7 e1       	ldi	r29, 0x17	; 23
    47d8:	10 e0       	ldi	r17, 0x00	; 0
    47da:	8c 81       	ldd	r24, Y+4	; 0x04
    47dc:	81 30       	cpi	r24, 0x01	; 1
    47de:	81 f0       	breq	.+32     	; 0x4800 <_hal_led_task+0x38>
    47e0:	18 f1       	brcs	.+70     	; 0x4828 <_hal_led_task+0x60>
    47e2:	82 30       	cpi	r24, 0x02	; 2
    47e4:	61 f5       	brne	.+88     	; 0x483e <_hal_led_task+0x76>
    47e6:	e8 81       	ld	r30, Y
    47e8:	f9 81       	ldd	r31, Y+1	; 0x01
    47ea:	20 81       	ld	r18, Z
    47ec:	c6 01       	movw	r24, r12
    47ee:	0a 80       	ldd	r0, Y+2	; 0x02
    47f0:	02 c0       	rjmp	.+4      	; 0x47f6 <_hal_led_task+0x2e>
    47f2:	88 0f       	add	r24, r24
    47f4:	99 1f       	adc	r25, r25
    47f6:	0a 94       	dec	r0
    47f8:	e2 f7       	brpl	.-8      	; 0x47f2 <_hal_led_task+0x2a>
    47fa:	82 27       	eor	r24, r18
    47fc:	80 83       	st	Z, r24
    47fe:	1f c0       	rjmp	.+62     	; 0x483e <_hal_led_task+0x76>
    4800:	8d 81       	ldd	r24, Y+5	; 0x05
    4802:	8f 5f       	subi	r24, 0xFF	; 255
    4804:	86 30       	cpi	r24, 0x06	; 6
    4806:	10 f4       	brcc	.+4      	; 0x480c <_hal_led_task+0x44>
    4808:	8d 83       	std	Y+5, r24	; 0x05
    480a:	19 c0       	rjmp	.+50     	; 0x483e <_hal_led_task+0x76>
    480c:	1d 82       	std	Y+5, r1	; 0x05
    480e:	e8 81       	ld	r30, Y
    4810:	f9 81       	ldd	r31, Y+1	; 0x01
    4812:	20 81       	ld	r18, Z
    4814:	c6 01       	movw	r24, r12
    4816:	0a 80       	ldd	r0, Y+2	; 0x02
    4818:	02 c0       	rjmp	.+4      	; 0x481e <_hal_led_task+0x56>
    481a:	88 0f       	add	r24, r24
    481c:	99 1f       	adc	r25, r25
    481e:	0a 94       	dec	r0
    4820:	e2 f7       	brpl	.-8      	; 0x481a <_hal_led_task+0x52>
    4822:	82 27       	eor	r24, r18
    4824:	80 83       	st	Z, r24
    4826:	0b c0       	rjmp	.+22     	; 0x483e <_hal_led_task+0x76>
    4828:	0d 81       	ldd	r16, Y+5	; 0x05
    482a:	00 23       	and	r16, r16
    482c:	29 f0       	breq	.+10     	; 0x4838 <_hal_led_task+0x70>
    482e:	81 2f       	mov	r24, r17
    4830:	7f df       	rcall	.-258    	; 0x4730 <_turn_on>
    4832:	01 50       	subi	r16, 0x01	; 1
    4834:	0d 83       	std	Y+5, r16	; 0x05
    4836:	03 c0       	rjmp	.+6      	; 0x483e <_hal_led_task+0x76>
    4838:	bc 82       	std	Y+4, r11	; 0x04
    483a:	81 2f       	mov	r24, r17
    483c:	2d df       	rcall	.-422    	; 0x4698 <_turn_off>
    483e:	1f 5f       	subi	r17, 0xFF	; 255
    4840:	26 96       	adiw	r28, 0x06	; 6
    4842:	14 30       	cpi	r17, 0x04	; 4
    4844:	51 f6       	brne	.-108    	; 0x47da <_hal_led_task+0x12>
    4846:	6c e0       	ldi	r22, 0x0C	; 12
    4848:	70 e0       	ldi	r23, 0x00	; 0
    484a:	80 e0       	ldi	r24, 0x00	; 0
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	0e 94 a4 10 	call	0x2148	; 0x2148 <vTaskDelay>
    4852:	c0 cf       	rjmp	.-128    	; 0x47d4 <_hal_led_task+0xc>

00004854 <status_leds_initialise>:
    4854:	ef 92       	push	r14
    4856:	ff 92       	push	r15
    4858:	0f 93       	push	r16
    485a:	1f 93       	push	r17
    485c:	cf 93       	push	r28
    485e:	df 93       	push	r29
    4860:	08 2f       	mov	r16, r24
    4862:	80 e4       	ldi	r24, 0x40	; 64
    4864:	87 b9       	out	0x07, r24	; 7
    4866:	c5 e4       	ldi	r28, 0x45	; 69
    4868:	d7 e1       	ldi	r29, 0x17	; 23
    486a:	0f 2e       	mov	r0, r31
    486c:	f8 e2       	ldi	r31, 0x28	; 40
    486e:	ef 2e       	mov	r14, r31
    4870:	f1 2c       	mov	r15, r1
    4872:	f0 2d       	mov	r31, r0
    4874:	f9 82       	std	Y+1, r15	; 0x01
    4876:	e8 82       	st	Y, r14
    4878:	86 e0       	ldi	r24, 0x06	; 6
    487a:	8a 83       	std	Y+2, r24	; 0x02
    487c:	1b 82       	std	Y+3, r1	; 0x03
    487e:	14 e0       	ldi	r17, 0x04	; 4
    4880:	1c 83       	std	Y+4, r17	; 0x04
    4882:	80 e0       	ldi	r24, 0x00	; 0
    4884:	09 df       	rcall	.-494    	; 0x4698 <_turn_off>
    4886:	80 e8       	ldi	r24, 0x80	; 128
    4888:	87 b9       	out	0x07, r24	; 7
    488a:	ff 82       	std	Y+7, r15	; 0x07
    488c:	ee 82       	std	Y+6, r14	; 0x06
    488e:	87 e0       	ldi	r24, 0x07	; 7
    4890:	88 87       	std	Y+8, r24	; 0x08
    4892:	19 86       	std	Y+9, r1	; 0x09
    4894:	1a 87       	std	Y+10, r17	; 0x0a
    4896:	81 e0       	ldi	r24, 0x01	; 1
    4898:	ff de       	rcall	.-514    	; 0x4698 <_turn_off>
    489a:	80 e2       	ldi	r24, 0x20	; 32
    489c:	83 bb       	out	0x13, r24	; 19
    489e:	84 e3       	ldi	r24, 0x34	; 52
    48a0:	90 e0       	ldi	r25, 0x00	; 0
    48a2:	9d 87       	std	Y+13, r25	; 0x0d
    48a4:	8c 87       	std	Y+12, r24	; 0x0c
    48a6:	85 e0       	ldi	r24, 0x05	; 5
    48a8:	8e 87       	std	Y+14, r24	; 0x0e
    48aa:	1f 86       	std	Y+15, r1	; 0x0f
    48ac:	18 8b       	std	Y+16, r17	; 0x10
    48ae:	82 e0       	ldi	r24, 0x02	; 2
    48b0:	f3 de       	rcall	.-538    	; 0x4698 <_turn_off>
    48b2:	80 e1       	ldi	r24, 0x10	; 16
    48b4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    48b8:	82 e0       	ldi	r24, 0x02	; 2
    48ba:	91 e0       	ldi	r25, 0x01	; 1
    48bc:	9b 8b       	std	Y+19, r25	; 0x13
    48be:	8a 8b       	std	Y+18, r24	; 0x12
    48c0:	1c 8b       	std	Y+20, r17	; 0x14
    48c2:	1d 8a       	std	Y+21, r1	; 0x15
    48c4:	1e 8b       	std	Y+22, r17	; 0x16
    48c6:	83 e0       	ldi	r24, 0x03	; 3
    48c8:	e7 de       	rcall	.-562    	; 0x4698 <_turn_off>
    48ca:	e1 2c       	mov	r14, r1
    48cc:	f1 2c       	mov	r15, r1
    48ce:	20 e0       	ldi	r18, 0x00	; 0
    48d0:	30 e0       	ldi	r19, 0x00	; 0
    48d2:	40 ec       	ldi	r20, 0xC0	; 192
    48d4:	50 e0       	ldi	r21, 0x00	; 0
    48d6:	60 e8       	ldi	r22, 0x80	; 128
    48d8:	77 e0       	ldi	r23, 0x07	; 7
    48da:	84 ee       	ldi	r24, 0xE4	; 228
    48dc:	93 e2       	ldi	r25, 0x23	; 35
    48de:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <xTaskCreate>
    48e2:	df 91       	pop	r29
    48e4:	cf 91       	pop	r28
    48e6:	1f 91       	pop	r17
    48e8:	0f 91       	pop	r16
    48ea:	ff 90       	pop	r15
    48ec:	ef 90       	pop	r14
    48ee:	08 95       	ret

000048f0 <status_leds_slowBlink>:
    48f0:	cf 93       	push	r28
    48f2:	df 93       	push	r29
    48f4:	90 e0       	ldi	r25, 0x00	; 0
    48f6:	fc 01       	movw	r30, r24
    48f8:	ee 0f       	add	r30, r30
    48fa:	ff 1f       	adc	r31, r31
    48fc:	df 01       	movw	r26, r30
    48fe:	a8 0f       	add	r26, r24
    4900:	b9 1f       	adc	r27, r25
    4902:	aa 0f       	add	r26, r26
    4904:	bb 1f       	adc	r27, r27
    4906:	ab 5b       	subi	r26, 0xBB	; 187
    4908:	b8 4e       	sbci	r27, 0xE8	; 232
    490a:	cd 91       	ld	r28, X+
    490c:	dc 91       	ld	r29, X
    490e:	11 97       	sbiw	r26, 0x01	; 1
    4910:	48 81       	ld	r20, Y
    4912:	21 e0       	ldi	r18, 0x01	; 1
    4914:	30 e0       	ldi	r19, 0x00	; 0
    4916:	12 96       	adiw	r26, 0x02	; 2
    4918:	0c 90       	ld	r0, X
    491a:	12 97       	sbiw	r26, 0x02	; 2
    491c:	02 c0       	rjmp	.+4      	; 0x4922 <status_leds_slowBlink+0x32>
    491e:	22 0f       	add	r18, r18
    4920:	33 1f       	adc	r19, r19
    4922:	0a 94       	dec	r0
    4924:	e2 f7       	brpl	.-8      	; 0x491e <status_leds_slowBlink+0x2e>
    4926:	24 27       	eor	r18, r20
    4928:	28 83       	st	Y, r18
    492a:	fd 01       	movw	r30, r26
    492c:	81 e0       	ldi	r24, 0x01	; 1
    492e:	84 83       	std	Z+4, r24	; 0x04
    4930:	df 91       	pop	r29
    4932:	cf 91       	pop	r28
    4934:	08 95       	ret

00004936 <status_leds_fastBlink>:
    4936:	cf 93       	push	r28
    4938:	df 93       	push	r29
    493a:	90 e0       	ldi	r25, 0x00	; 0
    493c:	fc 01       	movw	r30, r24
    493e:	ee 0f       	add	r30, r30
    4940:	ff 1f       	adc	r31, r31
    4942:	df 01       	movw	r26, r30
    4944:	a8 0f       	add	r26, r24
    4946:	b9 1f       	adc	r27, r25
    4948:	aa 0f       	add	r26, r26
    494a:	bb 1f       	adc	r27, r27
    494c:	ab 5b       	subi	r26, 0xBB	; 187
    494e:	b8 4e       	sbci	r27, 0xE8	; 232
    4950:	cd 91       	ld	r28, X+
    4952:	dc 91       	ld	r29, X
    4954:	11 97       	sbiw	r26, 0x01	; 1
    4956:	48 81       	ld	r20, Y
    4958:	21 e0       	ldi	r18, 0x01	; 1
    495a:	30 e0       	ldi	r19, 0x00	; 0
    495c:	12 96       	adiw	r26, 0x02	; 2
    495e:	0c 90       	ld	r0, X
    4960:	12 97       	sbiw	r26, 0x02	; 2
    4962:	02 c0       	rjmp	.+4      	; 0x4968 <status_leds_fastBlink+0x32>
    4964:	22 0f       	add	r18, r18
    4966:	33 1f       	adc	r19, r19
    4968:	0a 94       	dec	r0
    496a:	e2 f7       	brpl	.-8      	; 0x4964 <status_leds_fastBlink+0x2e>
    496c:	24 27       	eor	r18, r20
    496e:	28 83       	st	Y, r18
    4970:	fd 01       	movw	r30, r26
    4972:	82 e0       	ldi	r24, 0x02	; 2
    4974:	84 83       	std	Z+4, r24	; 0x04
    4976:	df 91       	pop	r29
    4978:	cf 91       	pop	r28
    497a:	08 95       	ret

0000497c <status_leds_ledOn>:
    497c:	28 2f       	mov	r18, r24
    497e:	30 e0       	ldi	r19, 0x00	; 0
    4980:	f9 01       	movw	r30, r18
    4982:	ee 0f       	add	r30, r30
    4984:	ff 1f       	adc	r31, r31
    4986:	e2 0f       	add	r30, r18
    4988:	f3 1f       	adc	r31, r19
    498a:	ee 0f       	add	r30, r30
    498c:	ff 1f       	adc	r31, r31
    498e:	eb 5b       	subi	r30, 0xBB	; 187
    4990:	f8 4e       	sbci	r31, 0xE8	; 232
    4992:	93 e0       	ldi	r25, 0x03	; 3
    4994:	94 83       	std	Z+4, r25	; 0x04
    4996:	cc ce       	rjmp	.-616    	; 0x4730 <_turn_on>
    4998:	08 95       	ret

0000499a <status_leds_ledOff>:
    499a:	28 2f       	mov	r18, r24
    499c:	30 e0       	ldi	r19, 0x00	; 0
    499e:	f9 01       	movw	r30, r18
    49a0:	ee 0f       	add	r30, r30
    49a2:	ff 1f       	adc	r31, r31
    49a4:	e2 0f       	add	r30, r18
    49a6:	f3 1f       	adc	r31, r19
    49a8:	ee 0f       	add	r30, r30
    49aa:	ff 1f       	adc	r31, r31
    49ac:	eb 5b       	subi	r30, 0xBB	; 187
    49ae:	f8 4e       	sbci	r31, 0xE8	; 232
    49b0:	94 e0       	ldi	r25, 0x04	; 4
    49b2:	94 83       	std	Z+4, r25	; 0x04
    49b4:	71 ce       	rjmp	.-798    	; 0x4698 <_turn_off>
    49b6:	08 95       	ret

000049b8 <status_leds_longPuls>:
    49b8:	90 e0       	ldi	r25, 0x00	; 0
    49ba:	fc 01       	movw	r30, r24
    49bc:	ee 0f       	add	r30, r30
    49be:	ff 1f       	adc	r31, r31
    49c0:	df 01       	movw	r26, r30
    49c2:	a8 0f       	add	r26, r24
    49c4:	b9 1f       	adc	r27, r25
    49c6:	aa 0f       	add	r26, r26
    49c8:	bb 1f       	adc	r27, r27
    49ca:	ab 5b       	subi	r26, 0xBB	; 187
    49cc:	b8 4e       	sbci	r27, 0xE8	; 232
    49ce:	26 e0       	ldi	r18, 0x06	; 6
    49d0:	15 96       	adiw	r26, 0x05	; 5
    49d2:	2c 93       	st	X, r18
    49d4:	15 97       	sbiw	r26, 0x05	; 5
    49d6:	fd 01       	movw	r30, r26
    49d8:	14 82       	std	Z+4, r1	; 0x04
    49da:	08 95       	ret

000049dc <status_leds_shortPuls>:
    49dc:	90 e0       	ldi	r25, 0x00	; 0
    49de:	fc 01       	movw	r30, r24
    49e0:	ee 0f       	add	r30, r30
    49e2:	ff 1f       	adc	r31, r31
    49e4:	df 01       	movw	r26, r30
    49e6:	a8 0f       	add	r26, r24
    49e8:	b9 1f       	adc	r27, r25
    49ea:	aa 0f       	add	r26, r26
    49ec:	bb 1f       	adc	r27, r27
    49ee:	ab 5b       	subi	r26, 0xBB	; 187
    49f0:	b8 4e       	sbci	r27, 0xE8	; 232
    49f2:	15 96       	adiw	r26, 0x05	; 5
    49f4:	1c 92       	st	X, r1
    49f6:	15 97       	sbiw	r26, 0x05	; 5
    49f8:	fd 01       	movw	r30, r26
    49fa:	14 82       	std	Z+4, r1	; 0x04
    49fc:	08 95       	ret

000049fe <_initTwiInterface>:
    49fe:	80 91 6b 17 	lds	r24, 0x176B	; 0x80176b <_twiIsInitiated>
    4a02:	81 11       	cpse	r24, r1
    4a04:	0c c0       	rjmp	.+24     	; 0x4a1e <_initTwiInterface+0x20>
    4a06:	8c e0       	ldi	r24, 0x0C	; 12
    4a08:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4a0c:	8f ef       	ldi	r24, 0xFF	; 255
    4a0e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4a12:	84 e0       	ldi	r24, 0x04	; 4
    4a14:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4a18:	81 e0       	ldi	r24, 0x01	; 1
    4a1a:	80 93 6b 17 	sts	0x176B, r24	; 0x80176b <_twiIsInitiated>
    4a1e:	08 95       	ret

00004a20 <twiCreate>:
    4a20:	af 92       	push	r10
    4a22:	bf 92       	push	r11
    4a24:	cf 92       	push	r12
    4a26:	df 92       	push	r13
    4a28:	ef 92       	push	r14
    4a2a:	ff 92       	push	r15
    4a2c:	0f 93       	push	r16
    4a2e:	1f 93       	push	r17
    4a30:	cf 93       	push	r28
    4a32:	df 93       	push	r29
    4a34:	a8 2e       	mov	r10, r24
    4a36:	b6 2e       	mov	r11, r22
    4a38:	69 01       	movw	r12, r18
    4a3a:	7a 01       	movw	r14, r20
    4a3c:	84 e0       	ldi	r24, 0x04	; 4
    4a3e:	90 e0       	ldi	r25, 0x00	; 0
    4a40:	b1 d3       	rcall	.+1890   	; 0x51a4 <malloc>
    4a42:	ec 01       	movw	r28, r24
    4a44:	89 2b       	or	r24, r25
    4a46:	61 f1       	breq	.+88     	; 0x4aa0 <twiCreate+0x80>
    4a48:	a8 82       	st	Y, r10
    4a4a:	81 e0       	ldi	r24, 0x01	; 1
    4a4c:	b8 12       	cpse	r11, r24
    4a4e:	12 c0       	rjmp	.+36     	; 0x4a74 <twiCreate+0x54>
    4a50:	c7 01       	movw	r24, r14
    4a52:	b6 01       	movw	r22, r12
    4a54:	20 ea       	ldi	r18, 0xA0	; 160
    4a56:	36 e8       	ldi	r19, 0x86	; 134
    4a58:	41 e0       	ldi	r20, 0x01	; 1
    4a5a:	50 e0       	ldi	r21, 0x00	; 0
    4a5c:	79 d3       	rcall	.+1778   	; 0x5150 <__udivmodsi4>
    4a5e:	da 01       	movw	r26, r20
    4a60:	c9 01       	movw	r24, r18
    4a62:	40 97       	sbiw	r24, 0x10	; 16
    4a64:	a1 09       	sbc	r26, r1
    4a66:	b1 09       	sbc	r27, r1
    4a68:	b6 95       	lsr	r27
    4a6a:	a7 95       	ror	r26
    4a6c:	97 95       	ror	r25
    4a6e:	87 95       	ror	r24
    4a70:	89 83       	std	Y+1, r24	; 0x01
    4a72:	11 c0       	rjmp	.+34     	; 0x4a96 <twiCreate+0x76>
    4a74:	c7 01       	movw	r24, r14
    4a76:	b6 01       	movw	r22, r12
    4a78:	20 e8       	ldi	r18, 0x80	; 128
    4a7a:	3a e1       	ldi	r19, 0x1A	; 26
    4a7c:	46 e0       	ldi	r20, 0x06	; 6
    4a7e:	50 e0       	ldi	r21, 0x00	; 0
    4a80:	67 d3       	rcall	.+1742   	; 0x5150 <__udivmodsi4>
    4a82:	da 01       	movw	r26, r20
    4a84:	c9 01       	movw	r24, r18
    4a86:	40 97       	sbiw	r24, 0x10	; 16
    4a88:	a1 09       	sbc	r26, r1
    4a8a:	b1 09       	sbc	r27, r1
    4a8c:	b6 95       	lsr	r27
    4a8e:	a7 95       	ror	r26
    4a90:	97 95       	ror	r25
    4a92:	87 95       	ror	r24
    4a94:	89 83       	std	Y+1, r24	; 0x01
    4a96:	1b 83       	std	Y+3, r17	; 0x03
    4a98:	0a 83       	std	Y+2, r16	; 0x02
    4a9a:	8c 2f       	mov	r24, r28
    4a9c:	9d 2f       	mov	r25, r29
    4a9e:	02 c0       	rjmp	.+4      	; 0x4aa4 <twiCreate+0x84>
    4aa0:	80 e0       	ldi	r24, 0x00	; 0
    4aa2:	90 e0       	ldi	r25, 0x00	; 0
    4aa4:	df 91       	pop	r29
    4aa6:	cf 91       	pop	r28
    4aa8:	1f 91       	pop	r17
    4aaa:	0f 91       	pop	r16
    4aac:	ff 90       	pop	r15
    4aae:	ef 90       	pop	r14
    4ab0:	df 90       	pop	r13
    4ab2:	cf 90       	pop	r12
    4ab4:	bf 90       	pop	r11
    4ab6:	af 90       	pop	r10
    4ab8:	08 95       	ret

00004aba <twiIsBusy>:
    4aba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4abe:	81 70       	andi	r24, 0x01	; 1
    4ac0:	08 95       	ret

00004ac2 <twiTransmit>:
    4ac2:	ff 92       	push	r15
    4ac4:	0f 93       	push	r16
    4ac6:	1f 93       	push	r17
    4ac8:	cf 93       	push	r28
    4aca:	df 93       	push	r29
    4acc:	00 97       	sbiw	r24, 0x00	; 0
    4ace:	d1 f1       	breq	.+116    	; 0x4b44 <twiTransmit+0x82>
    4ad0:	4a 30       	cpi	r20, 0x0A	; 10
    4ad2:	d0 f5       	brcc	.+116    	; 0x4b48 <twiTransmit+0x86>
    4ad4:	f4 2e       	mov	r15, r20
    4ad6:	8b 01       	movw	r16, r22
    4ad8:	ec 01       	movw	r28, r24
    4ada:	ef df       	rcall	.-34     	; 0x4aba <twiIsBusy>
    4adc:	81 11       	cpse	r24, r1
    4ade:	36 c0       	rjmp	.+108    	; 0x4b4c <twiTransmit+0x8a>
    4ae0:	80 91 5e 17 	lds	r24, 0x175E	; 0x80175e <_twiCurrentHandler>
    4ae4:	90 91 5f 17 	lds	r25, 0x175F	; 0x80175f <_twiCurrentHandler+0x1>
    4ae8:	c8 17       	cp	r28, r24
    4aea:	d9 07       	cpc	r29, r25
    4aec:	41 f0       	breq	.+16     	; 0x4afe <twiTransmit+0x3c>
    4aee:	87 df       	rcall	.-242    	; 0x49fe <_initTwiInterface>
    4af0:	89 81       	ldd	r24, Y+1	; 0x01
    4af2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4af6:	d0 93 5f 17 	sts	0x175F, r29	; 0x80175f <_twiCurrentHandler+0x1>
    4afa:	c0 93 5e 17 	sts	0x175E, r28	; 0x80175e <_twiCurrentHandler>
    4afe:	81 e0       	ldi	r24, 0x01	; 1
    4b00:	8f 0d       	add	r24, r15
    4b02:	80 93 60 17 	sts	0x1760, r24	; 0x801760 <_twiMessageLen>
    4b06:	88 81       	ld	r24, Y
    4b08:	88 0f       	add	r24, r24
    4b0a:	80 93 61 17 	sts	0x1761, r24	; 0x801761 <_twiMessageBuffer>
    4b0e:	ff 20       	and	r15, r15
    4b10:	89 f0       	breq	.+34     	; 0x4b34 <twiTransmit+0x72>
    4b12:	f8 01       	movw	r30, r16
    4b14:	a2 e6       	ldi	r26, 0x62	; 98
    4b16:	b7 e1       	ldi	r27, 0x17	; 23
    4b18:	4f ef       	ldi	r20, 0xFF	; 255
    4b1a:	4f 0d       	add	r20, r15
    4b1c:	64 2f       	mov	r22, r20
    4b1e:	70 e0       	ldi	r23, 0x00	; 0
    4b20:	cb 01       	movw	r24, r22
    4b22:	01 96       	adiw	r24, 0x01	; 1
    4b24:	b8 01       	movw	r22, r16
    4b26:	68 0f       	add	r22, r24
    4b28:	79 1f       	adc	r23, r25
    4b2a:	81 91       	ld	r24, Z+
    4b2c:	8d 93       	st	X+, r24
    4b2e:	e6 17       	cp	r30, r22
    4b30:	f7 07       	cpc	r31, r23
    4b32:	d9 f7       	brne	.-10     	; 0x4b2a <twiTransmit+0x68>
    4b34:	88 ef       	ldi	r24, 0xF8	; 248
    4b36:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4b3a:	85 ea       	ldi	r24, 0xA5	; 165
    4b3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4b40:	84 e0       	ldi	r24, 0x04	; 4
    4b42:	05 c0       	rjmp	.+10     	; 0x4b4e <twiTransmit+0x8c>
    4b44:	86 e0       	ldi	r24, 0x06	; 6
    4b46:	03 c0       	rjmp	.+6      	; 0x4b4e <twiTransmit+0x8c>
    4b48:	87 e0       	ldi	r24, 0x07	; 7
    4b4a:	01 c0       	rjmp	.+2      	; 0x4b4e <twiTransmit+0x8c>
    4b4c:	82 e0       	ldi	r24, 0x02	; 2
    4b4e:	df 91       	pop	r29
    4b50:	cf 91       	pop	r28
    4b52:	1f 91       	pop	r17
    4b54:	0f 91       	pop	r16
    4b56:	ff 90       	pop	r15
    4b58:	08 95       	ret

00004b5a <twiReceive>:
    4b5a:	1f 93       	push	r17
    4b5c:	cf 93       	push	r28
    4b5e:	df 93       	push	r29
    4b60:	00 97       	sbiw	r24, 0x00	; 0
    4b62:	29 f1       	breq	.+74     	; 0x4bae <twiReceive+0x54>
    4b64:	6b 30       	cpi	r22, 0x0B	; 11
    4b66:	28 f5       	brcc	.+74     	; 0x4bb2 <twiReceive+0x58>
    4b68:	16 2f       	mov	r17, r22
    4b6a:	ec 01       	movw	r28, r24
    4b6c:	a6 df       	rcall	.-180    	; 0x4aba <twiIsBusy>
    4b6e:	81 11       	cpse	r24, r1
    4b70:	22 c0       	rjmp	.+68     	; 0x4bb6 <twiReceive+0x5c>
    4b72:	80 91 5e 17 	lds	r24, 0x175E	; 0x80175e <_twiCurrentHandler>
    4b76:	90 91 5f 17 	lds	r25, 0x175F	; 0x80175f <_twiCurrentHandler+0x1>
    4b7a:	c8 17       	cp	r28, r24
    4b7c:	d9 07       	cpc	r29, r25
    4b7e:	41 f0       	breq	.+16     	; 0x4b90 <twiReceive+0x36>
    4b80:	3e df       	rcall	.-388    	; 0x49fe <_initTwiInterface>
    4b82:	89 81       	ldd	r24, Y+1	; 0x01
    4b84:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4b88:	d0 93 5f 17 	sts	0x175F, r29	; 0x80175f <_twiCurrentHandler+0x1>
    4b8c:	c0 93 5e 17 	sts	0x175E, r28	; 0x80175e <_twiCurrentHandler>
    4b90:	10 93 60 17 	sts	0x1760, r17	; 0x801760 <_twiMessageLen>
    4b94:	88 81       	ld	r24, Y
    4b96:	88 0f       	add	r24, r24
    4b98:	81 60       	ori	r24, 0x01	; 1
    4b9a:	80 93 61 17 	sts	0x1761, r24	; 0x801761 <_twiMessageBuffer>
    4b9e:	88 ef       	ldi	r24, 0xF8	; 248
    4ba0:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4ba4:	85 ea       	ldi	r24, 0xA5	; 165
    4ba6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4baa:	85 e0       	ldi	r24, 0x05	; 5
    4bac:	05 c0       	rjmp	.+10     	; 0x4bb8 <twiReceive+0x5e>
    4bae:	86 e0       	ldi	r24, 0x06	; 6
    4bb0:	03 c0       	rjmp	.+6      	; 0x4bb8 <twiReceive+0x5e>
    4bb2:	87 e0       	ldi	r24, 0x07	; 7
    4bb4:	01 c0       	rjmp	.+2      	; 0x4bb8 <twiReceive+0x5e>
    4bb6:	82 e0       	ldi	r24, 0x02	; 2
    4bb8:	df 91       	pop	r29
    4bba:	cf 91       	pop	r28
    4bbc:	1f 91       	pop	r17
    4bbe:	08 95       	ret

00004bc0 <__vector_39>:
    4bc0:	1f 92       	push	r1
    4bc2:	0f 92       	push	r0
    4bc4:	0f b6       	in	r0, 0x3f	; 63
    4bc6:	0f 92       	push	r0
    4bc8:	11 24       	eor	r1, r1
    4bca:	0b b6       	in	r0, 0x3b	; 59
    4bcc:	0f 92       	push	r0
    4bce:	2f 93       	push	r18
    4bd0:	3f 93       	push	r19
    4bd2:	4f 93       	push	r20
    4bd4:	5f 93       	push	r21
    4bd6:	6f 93       	push	r22
    4bd8:	7f 93       	push	r23
    4bda:	8f 93       	push	r24
    4bdc:	9f 93       	push	r25
    4bde:	af 93       	push	r26
    4be0:	bf 93       	push	r27
    4be2:	ef 93       	push	r30
    4be4:	ff 93       	push	r31
    4be6:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4bea:	8e 2f       	mov	r24, r30
    4bec:	90 e0       	ldi	r25, 0x00	; 0
    4bee:	fc 01       	movw	r30, r24
    4bf0:	38 97       	sbiw	r30, 0x08	; 8
    4bf2:	e1 35       	cpi	r30, 0x51	; 81
    4bf4:	f1 05       	cpc	r31, r1
    4bf6:	08 f0       	brcs	.+2      	; 0x4bfa <__vector_39+0x3a>
    4bf8:	75 c0       	rjmp	.+234    	; 0x4ce4 <__vector_39+0x124>
    4bfa:	88 27       	eor	r24, r24
    4bfc:	e4 58       	subi	r30, 0x84	; 132
    4bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4c00:	8f 4f       	sbci	r24, 0xFF	; 255
    4c02:	c8 c2       	rjmp	.+1424   	; 0x5194 <__tablejump2__>
    4c04:	10 92 5d 17 	sts	0x175D, r1	; 0x80175d <_index.1885>
    4c08:	e0 91 5d 17 	lds	r30, 0x175D	; 0x80175d <_index.1885>
    4c0c:	80 91 60 17 	lds	r24, 0x1760	; 0x801760 <_twiMessageLen>
    4c10:	e8 17       	cp	r30, r24
    4c12:	70 f4       	brcc	.+28     	; 0x4c30 <__vector_39+0x70>
    4c14:	81 e0       	ldi	r24, 0x01	; 1
    4c16:	8e 0f       	add	r24, r30
    4c18:	80 93 5d 17 	sts	0x175D, r24	; 0x80175d <_index.1885>
    4c1c:	f0 e0       	ldi	r31, 0x00	; 0
    4c1e:	ef 59       	subi	r30, 0x9F	; 159
    4c20:	f8 4e       	sbci	r31, 0xE8	; 232
    4c22:	80 81       	ld	r24, Z
    4c24:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4c28:	85 e8       	ldi	r24, 0x85	; 133
    4c2a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4c2e:	72 c0       	rjmp	.+228    	; 0x4d14 <__vector_39+0x154>
    4c30:	84 e9       	ldi	r24, 0x94	; 148
    4c32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4c36:	80 91 5e 17 	lds	r24, 0x175E	; 0x80175e <_twiCurrentHandler>
    4c3a:	90 91 5f 17 	lds	r25, 0x175F	; 0x80175f <_twiCurrentHandler+0x1>
    4c3e:	dc 01       	movw	r26, r24
    4c40:	12 96       	adiw	r26, 0x02	; 2
    4c42:	ed 91       	ld	r30, X+
    4c44:	fc 91       	ld	r31, X
    4c46:	13 97       	sbiw	r26, 0x03	; 3
    4c48:	30 97       	sbiw	r30, 0x00	; 0
    4c4a:	09 f4       	brne	.+2      	; 0x4c4e <__vector_39+0x8e>
    4c4c:	63 c0       	rjmp	.+198    	; 0x4d14 <__vector_39+0x154>
    4c4e:	20 e0       	ldi	r18, 0x00	; 0
    4c50:	40 e0       	ldi	r20, 0x00	; 0
    4c52:	50 e0       	ldi	r21, 0x00	; 0
    4c54:	64 e0       	ldi	r22, 0x04	; 4
    4c56:	19 95       	eicall
    4c58:	5d c0       	rjmp	.+186    	; 0x4d14 <__vector_39+0x154>
    4c5a:	e0 91 5d 17 	lds	r30, 0x175D	; 0x80175d <_index.1885>
    4c5e:	81 e0       	ldi	r24, 0x01	; 1
    4c60:	8e 0f       	add	r24, r30
    4c62:	80 93 5d 17 	sts	0x175D, r24	; 0x80175d <_index.1885>
    4c66:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4c6a:	f0 e0       	ldi	r31, 0x00	; 0
    4c6c:	ef 59       	subi	r30, 0x9F	; 159
    4c6e:	f8 4e       	sbci	r31, 0xE8	; 232
    4c70:	80 83       	st	Z, r24
    4c72:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4c76:	80 34       	cpi	r24, 0x40	; 64
    4c78:	11 f4       	brne	.+4      	; 0x4c7e <__vector_39+0xbe>
    4c7a:	10 92 5d 17 	sts	0x175D, r1	; 0x80175d <_index.1885>
    4c7e:	20 91 5d 17 	lds	r18, 0x175D	; 0x80175d <_index.1885>
    4c82:	30 e0       	ldi	r19, 0x00	; 0
    4c84:	80 91 60 17 	lds	r24, 0x1760	; 0x801760 <_twiMessageLen>
    4c88:	90 e0       	ldi	r25, 0x00	; 0
    4c8a:	01 97       	sbiw	r24, 0x01	; 1
    4c8c:	28 17       	cp	r18, r24
    4c8e:	39 07       	cpc	r19, r25
    4c90:	24 f4       	brge	.+8      	; 0x4c9a <__vector_39+0xda>
    4c92:	85 ec       	ldi	r24, 0xC5	; 197
    4c94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4c98:	3d c0       	rjmp	.+122    	; 0x4d14 <__vector_39+0x154>
    4c9a:	85 e8       	ldi	r24, 0x85	; 133
    4c9c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4ca0:	39 c0       	rjmp	.+114    	; 0x4d14 <__vector_39+0x154>
    4ca2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4ca6:	e0 91 5d 17 	lds	r30, 0x175D	; 0x80175d <_index.1885>
    4caa:	f0 e0       	ldi	r31, 0x00	; 0
    4cac:	ef 59       	subi	r30, 0x9F	; 159
    4cae:	f8 4e       	sbci	r31, 0xE8	; 232
    4cb0:	80 83       	st	Z, r24
    4cb2:	84 e9       	ldi	r24, 0x94	; 148
    4cb4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4cb8:	80 91 5e 17 	lds	r24, 0x175E	; 0x80175e <_twiCurrentHandler>
    4cbc:	90 91 5f 17 	lds	r25, 0x175F	; 0x80175f <_twiCurrentHandler+0x1>
    4cc0:	dc 01       	movw	r26, r24
    4cc2:	12 96       	adiw	r26, 0x02	; 2
    4cc4:	ed 91       	ld	r30, X+
    4cc6:	fc 91       	ld	r31, X
    4cc8:	13 97       	sbiw	r26, 0x03	; 3
    4cca:	30 97       	sbiw	r30, 0x00	; 0
    4ccc:	19 f1       	breq	.+70     	; 0x4d14 <__vector_39+0x154>
    4cce:	20 91 60 17 	lds	r18, 0x1760	; 0x801760 <_twiMessageLen>
    4cd2:	41 e6       	ldi	r20, 0x61	; 97
    4cd4:	57 e1       	ldi	r21, 0x17	; 23
    4cd6:	65 e0       	ldi	r22, 0x05	; 5
    4cd8:	19 95       	eicall
    4cda:	1c c0       	rjmp	.+56     	; 0x4d14 <__vector_39+0x154>
    4cdc:	85 ea       	ldi	r24, 0xA5	; 165
    4cde:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4ce2:	18 c0       	rjmp	.+48     	; 0x4d14 <__vector_39+0x154>
    4ce4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4ce8:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4cec:	84 e0       	ldi	r24, 0x04	; 4
    4cee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4cf2:	80 91 5e 17 	lds	r24, 0x175E	; 0x80175e <_twiCurrentHandler>
    4cf6:	90 91 5f 17 	lds	r25, 0x175F	; 0x80175f <_twiCurrentHandler+0x1>
    4cfa:	dc 01       	movw	r26, r24
    4cfc:	12 96       	adiw	r26, 0x02	; 2
    4cfe:	ed 91       	ld	r30, X+
    4d00:	fc 91       	ld	r31, X
    4d02:	13 97       	sbiw	r26, 0x03	; 3
    4d04:	30 97       	sbiw	r30, 0x00	; 0
    4d06:	31 f0       	breq	.+12     	; 0x4d14 <__vector_39+0x154>
    4d08:	20 e0       	ldi	r18, 0x00	; 0
    4d0a:	40 e0       	ldi	r20, 0x00	; 0
    4d0c:	50 e0       	ldi	r21, 0x00	; 0
    4d0e:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    4d12:	19 95       	eicall
    4d14:	ff 91       	pop	r31
    4d16:	ef 91       	pop	r30
    4d18:	bf 91       	pop	r27
    4d1a:	af 91       	pop	r26
    4d1c:	9f 91       	pop	r25
    4d1e:	8f 91       	pop	r24
    4d20:	7f 91       	pop	r23
    4d22:	6f 91       	pop	r22
    4d24:	5f 91       	pop	r21
    4d26:	4f 91       	pop	r20
    4d28:	3f 91       	pop	r19
    4d2a:	2f 91       	pop	r18
    4d2c:	0f 90       	pop	r0
    4d2e:	0b be       	out	0x3b, r0	; 59
    4d30:	0f 90       	pop	r0
    4d32:	0f be       	out	0x3f, r0	; 63
    4d34:	0f 90       	pop	r0
    4d36:	1f 90       	pop	r1
    4d38:	18 95       	reti

00004d3a <fifo_init>:
    4d3a:	fc 01       	movw	r30, r24
    4d3c:	41 11       	cpse	r20, r1
    4d3e:	01 c0       	rjmp	.+2      	; 0x4d42 <fifo_init+0x8>
    4d40:	52 d3       	rcall	.+1700   	; 0x53e6 <abort>
    4d42:	84 2f       	mov	r24, r20
    4d44:	90 e0       	ldi	r25, 0x00	; 0
    4d46:	9c 01       	movw	r18, r24
    4d48:	21 50       	subi	r18, 0x01	; 1
    4d4a:	31 09       	sbc	r19, r1
    4d4c:	82 23       	and	r24, r18
    4d4e:	93 23       	and	r25, r19
    4d50:	89 2b       	or	r24, r25
    4d52:	09 f0       	breq	.+2      	; 0x4d56 <fifo_init+0x1c>
    4d54:	48 d3       	rcall	.+1680   	; 0x53e6 <abort>
    4d56:	41 38       	cpi	r20, 0x81	; 129
    4d58:	08 f0       	brcs	.+2      	; 0x4d5c <fifo_init+0x22>
    4d5a:	45 d3       	rcall	.+1674   	; 0x53e6 <abort>
    4d5c:	12 82       	std	Z+2, r1	; 0x02
    4d5e:	13 82       	std	Z+3, r1	; 0x03
    4d60:	44 83       	std	Z+4, r20	; 0x04
    4d62:	44 0f       	add	r20, r20
    4d64:	41 50       	subi	r20, 0x01	; 1
    4d66:	45 83       	std	Z+5, r20	; 0x05
    4d68:	71 83       	std	Z+1, r23	; 0x01
    4d6a:	60 83       	st	Z, r22
    4d6c:	80 e0       	ldi	r24, 0x00	; 0
    4d6e:	90 e0       	ldi	r25, 0x00	; 0
    4d70:	08 95       	ret

00004d72 <__subsf3>:
    4d72:	50 58       	subi	r21, 0x80	; 128

00004d74 <__addsf3>:
    4d74:	bb 27       	eor	r27, r27
    4d76:	aa 27       	eor	r26, r26
    4d78:	0e d0       	rcall	.+28     	; 0x4d96 <__addsf3x>
    4d7a:	4d c1       	rjmp	.+666    	; 0x5016 <__fp_round>
    4d7c:	3e d1       	rcall	.+636    	; 0x4ffa <__fp_pscA>
    4d7e:	30 f0       	brcs	.+12     	; 0x4d8c <__addsf3+0x18>
    4d80:	43 d1       	rcall	.+646    	; 0x5008 <__fp_pscB>
    4d82:	20 f0       	brcs	.+8      	; 0x4d8c <__addsf3+0x18>
    4d84:	31 f4       	brne	.+12     	; 0x4d92 <__addsf3+0x1e>
    4d86:	9f 3f       	cpi	r25, 0xFF	; 255
    4d88:	11 f4       	brne	.+4      	; 0x4d8e <__addsf3+0x1a>
    4d8a:	1e f4       	brtc	.+6      	; 0x4d92 <__addsf3+0x1e>
    4d8c:	33 c1       	rjmp	.+614    	; 0x4ff4 <__fp_nan>
    4d8e:	0e f4       	brtc	.+2      	; 0x4d92 <__addsf3+0x1e>
    4d90:	e0 95       	com	r30
    4d92:	e7 fb       	bst	r30, 7
    4d94:	29 c1       	rjmp	.+594    	; 0x4fe8 <__fp_inf>

00004d96 <__addsf3x>:
    4d96:	e9 2f       	mov	r30, r25
    4d98:	4f d1       	rcall	.+670    	; 0x5038 <__fp_split3>
    4d9a:	80 f3       	brcs	.-32     	; 0x4d7c <__addsf3+0x8>
    4d9c:	ba 17       	cp	r27, r26
    4d9e:	62 07       	cpc	r22, r18
    4da0:	73 07       	cpc	r23, r19
    4da2:	84 07       	cpc	r24, r20
    4da4:	95 07       	cpc	r25, r21
    4da6:	18 f0       	brcs	.+6      	; 0x4dae <__addsf3x+0x18>
    4da8:	71 f4       	brne	.+28     	; 0x4dc6 <__addsf3x+0x30>
    4daa:	9e f5       	brtc	.+102    	; 0x4e12 <__addsf3x+0x7c>
    4dac:	67 c1       	rjmp	.+718    	; 0x507c <__fp_zero>
    4dae:	0e f4       	brtc	.+2      	; 0x4db2 <__addsf3x+0x1c>
    4db0:	e0 95       	com	r30
    4db2:	0b 2e       	mov	r0, r27
    4db4:	ba 2f       	mov	r27, r26
    4db6:	a0 2d       	mov	r26, r0
    4db8:	0b 01       	movw	r0, r22
    4dba:	b9 01       	movw	r22, r18
    4dbc:	90 01       	movw	r18, r0
    4dbe:	0c 01       	movw	r0, r24
    4dc0:	ca 01       	movw	r24, r20
    4dc2:	a0 01       	movw	r20, r0
    4dc4:	11 24       	eor	r1, r1
    4dc6:	ff 27       	eor	r31, r31
    4dc8:	59 1b       	sub	r21, r25
    4dca:	99 f0       	breq	.+38     	; 0x4df2 <__addsf3x+0x5c>
    4dcc:	59 3f       	cpi	r21, 0xF9	; 249
    4dce:	50 f4       	brcc	.+20     	; 0x4de4 <__addsf3x+0x4e>
    4dd0:	50 3e       	cpi	r21, 0xE0	; 224
    4dd2:	68 f1       	brcs	.+90     	; 0x4e2e <__addsf3x+0x98>
    4dd4:	1a 16       	cp	r1, r26
    4dd6:	f0 40       	sbci	r31, 0x00	; 0
    4dd8:	a2 2f       	mov	r26, r18
    4dda:	23 2f       	mov	r18, r19
    4ddc:	34 2f       	mov	r19, r20
    4dde:	44 27       	eor	r20, r20
    4de0:	58 5f       	subi	r21, 0xF8	; 248
    4de2:	f3 cf       	rjmp	.-26     	; 0x4dca <__addsf3x+0x34>
    4de4:	46 95       	lsr	r20
    4de6:	37 95       	ror	r19
    4de8:	27 95       	ror	r18
    4dea:	a7 95       	ror	r26
    4dec:	f0 40       	sbci	r31, 0x00	; 0
    4dee:	53 95       	inc	r21
    4df0:	c9 f7       	brne	.-14     	; 0x4de4 <__addsf3x+0x4e>
    4df2:	7e f4       	brtc	.+30     	; 0x4e12 <__addsf3x+0x7c>
    4df4:	1f 16       	cp	r1, r31
    4df6:	ba 0b       	sbc	r27, r26
    4df8:	62 0b       	sbc	r22, r18
    4dfa:	73 0b       	sbc	r23, r19
    4dfc:	84 0b       	sbc	r24, r20
    4dfe:	ba f0       	brmi	.+46     	; 0x4e2e <__addsf3x+0x98>
    4e00:	91 50       	subi	r25, 0x01	; 1
    4e02:	a1 f0       	breq	.+40     	; 0x4e2c <__addsf3x+0x96>
    4e04:	ff 0f       	add	r31, r31
    4e06:	bb 1f       	adc	r27, r27
    4e08:	66 1f       	adc	r22, r22
    4e0a:	77 1f       	adc	r23, r23
    4e0c:	88 1f       	adc	r24, r24
    4e0e:	c2 f7       	brpl	.-16     	; 0x4e00 <__addsf3x+0x6a>
    4e10:	0e c0       	rjmp	.+28     	; 0x4e2e <__addsf3x+0x98>
    4e12:	ba 0f       	add	r27, r26
    4e14:	62 1f       	adc	r22, r18
    4e16:	73 1f       	adc	r23, r19
    4e18:	84 1f       	adc	r24, r20
    4e1a:	48 f4       	brcc	.+18     	; 0x4e2e <__addsf3x+0x98>
    4e1c:	87 95       	ror	r24
    4e1e:	77 95       	ror	r23
    4e20:	67 95       	ror	r22
    4e22:	b7 95       	ror	r27
    4e24:	f7 95       	ror	r31
    4e26:	9e 3f       	cpi	r25, 0xFE	; 254
    4e28:	08 f0       	brcs	.+2      	; 0x4e2c <__addsf3x+0x96>
    4e2a:	b3 cf       	rjmp	.-154    	; 0x4d92 <__addsf3+0x1e>
    4e2c:	93 95       	inc	r25
    4e2e:	88 0f       	add	r24, r24
    4e30:	08 f0       	brcs	.+2      	; 0x4e34 <__addsf3x+0x9e>
    4e32:	99 27       	eor	r25, r25
    4e34:	ee 0f       	add	r30, r30
    4e36:	97 95       	ror	r25
    4e38:	87 95       	ror	r24
    4e3a:	08 95       	ret

00004e3c <__divsf3>:
    4e3c:	0c d0       	rcall	.+24     	; 0x4e56 <__divsf3x>
    4e3e:	eb c0       	rjmp	.+470    	; 0x5016 <__fp_round>
    4e40:	e3 d0       	rcall	.+454    	; 0x5008 <__fp_pscB>
    4e42:	40 f0       	brcs	.+16     	; 0x4e54 <__divsf3+0x18>
    4e44:	da d0       	rcall	.+436    	; 0x4ffa <__fp_pscA>
    4e46:	30 f0       	brcs	.+12     	; 0x4e54 <__divsf3+0x18>
    4e48:	21 f4       	brne	.+8      	; 0x4e52 <__divsf3+0x16>
    4e4a:	5f 3f       	cpi	r21, 0xFF	; 255
    4e4c:	19 f0       	breq	.+6      	; 0x4e54 <__divsf3+0x18>
    4e4e:	cc c0       	rjmp	.+408    	; 0x4fe8 <__fp_inf>
    4e50:	51 11       	cpse	r21, r1
    4e52:	15 c1       	rjmp	.+554    	; 0x507e <__fp_szero>
    4e54:	cf c0       	rjmp	.+414    	; 0x4ff4 <__fp_nan>

00004e56 <__divsf3x>:
    4e56:	f0 d0       	rcall	.+480    	; 0x5038 <__fp_split3>
    4e58:	98 f3       	brcs	.-26     	; 0x4e40 <__divsf3+0x4>

00004e5a <__divsf3_pse>:
    4e5a:	99 23       	and	r25, r25
    4e5c:	c9 f3       	breq	.-14     	; 0x4e50 <__divsf3+0x14>
    4e5e:	55 23       	and	r21, r21
    4e60:	b1 f3       	breq	.-20     	; 0x4e4e <__divsf3+0x12>
    4e62:	95 1b       	sub	r25, r21
    4e64:	55 0b       	sbc	r21, r21
    4e66:	bb 27       	eor	r27, r27
    4e68:	aa 27       	eor	r26, r26
    4e6a:	62 17       	cp	r22, r18
    4e6c:	73 07       	cpc	r23, r19
    4e6e:	84 07       	cpc	r24, r20
    4e70:	38 f0       	brcs	.+14     	; 0x4e80 <__divsf3_pse+0x26>
    4e72:	9f 5f       	subi	r25, 0xFF	; 255
    4e74:	5f 4f       	sbci	r21, 0xFF	; 255
    4e76:	22 0f       	add	r18, r18
    4e78:	33 1f       	adc	r19, r19
    4e7a:	44 1f       	adc	r20, r20
    4e7c:	aa 1f       	adc	r26, r26
    4e7e:	a9 f3       	breq	.-22     	; 0x4e6a <__divsf3_pse+0x10>
    4e80:	33 d0       	rcall	.+102    	; 0x4ee8 <__divsf3_pse+0x8e>
    4e82:	0e 2e       	mov	r0, r30
    4e84:	3a f0       	brmi	.+14     	; 0x4e94 <__divsf3_pse+0x3a>
    4e86:	e0 e8       	ldi	r30, 0x80	; 128
    4e88:	30 d0       	rcall	.+96     	; 0x4eea <__divsf3_pse+0x90>
    4e8a:	91 50       	subi	r25, 0x01	; 1
    4e8c:	50 40       	sbci	r21, 0x00	; 0
    4e8e:	e6 95       	lsr	r30
    4e90:	00 1c       	adc	r0, r0
    4e92:	ca f7       	brpl	.-14     	; 0x4e86 <__divsf3_pse+0x2c>
    4e94:	29 d0       	rcall	.+82     	; 0x4ee8 <__divsf3_pse+0x8e>
    4e96:	fe 2f       	mov	r31, r30
    4e98:	27 d0       	rcall	.+78     	; 0x4ee8 <__divsf3_pse+0x8e>
    4e9a:	66 0f       	add	r22, r22
    4e9c:	77 1f       	adc	r23, r23
    4e9e:	88 1f       	adc	r24, r24
    4ea0:	bb 1f       	adc	r27, r27
    4ea2:	26 17       	cp	r18, r22
    4ea4:	37 07       	cpc	r19, r23
    4ea6:	48 07       	cpc	r20, r24
    4ea8:	ab 07       	cpc	r26, r27
    4eaa:	b0 e8       	ldi	r27, 0x80	; 128
    4eac:	09 f0       	breq	.+2      	; 0x4eb0 <__divsf3_pse+0x56>
    4eae:	bb 0b       	sbc	r27, r27
    4eb0:	80 2d       	mov	r24, r0
    4eb2:	bf 01       	movw	r22, r30
    4eb4:	ff 27       	eor	r31, r31
    4eb6:	93 58       	subi	r25, 0x83	; 131
    4eb8:	5f 4f       	sbci	r21, 0xFF	; 255
    4eba:	2a f0       	brmi	.+10     	; 0x4ec6 <__divsf3_pse+0x6c>
    4ebc:	9e 3f       	cpi	r25, 0xFE	; 254
    4ebe:	51 05       	cpc	r21, r1
    4ec0:	68 f0       	brcs	.+26     	; 0x4edc <__divsf3_pse+0x82>
    4ec2:	92 c0       	rjmp	.+292    	; 0x4fe8 <__fp_inf>
    4ec4:	dc c0       	rjmp	.+440    	; 0x507e <__fp_szero>
    4ec6:	5f 3f       	cpi	r21, 0xFF	; 255
    4ec8:	ec f3       	brlt	.-6      	; 0x4ec4 <__divsf3_pse+0x6a>
    4eca:	98 3e       	cpi	r25, 0xE8	; 232
    4ecc:	dc f3       	brlt	.-10     	; 0x4ec4 <__divsf3_pse+0x6a>
    4ece:	86 95       	lsr	r24
    4ed0:	77 95       	ror	r23
    4ed2:	67 95       	ror	r22
    4ed4:	b7 95       	ror	r27
    4ed6:	f7 95       	ror	r31
    4ed8:	9f 5f       	subi	r25, 0xFF	; 255
    4eda:	c9 f7       	brne	.-14     	; 0x4ece <__divsf3_pse+0x74>
    4edc:	88 0f       	add	r24, r24
    4ede:	91 1d       	adc	r25, r1
    4ee0:	96 95       	lsr	r25
    4ee2:	87 95       	ror	r24
    4ee4:	97 f9       	bld	r25, 7
    4ee6:	08 95       	ret
    4ee8:	e1 e0       	ldi	r30, 0x01	; 1
    4eea:	66 0f       	add	r22, r22
    4eec:	77 1f       	adc	r23, r23
    4eee:	88 1f       	adc	r24, r24
    4ef0:	bb 1f       	adc	r27, r27
    4ef2:	62 17       	cp	r22, r18
    4ef4:	73 07       	cpc	r23, r19
    4ef6:	84 07       	cpc	r24, r20
    4ef8:	ba 07       	cpc	r27, r26
    4efa:	20 f0       	brcs	.+8      	; 0x4f04 <__divsf3_pse+0xaa>
    4efc:	62 1b       	sub	r22, r18
    4efe:	73 0b       	sbc	r23, r19
    4f00:	84 0b       	sbc	r24, r20
    4f02:	ba 0b       	sbc	r27, r26
    4f04:	ee 1f       	adc	r30, r30
    4f06:	88 f7       	brcc	.-30     	; 0x4eea <__divsf3_pse+0x90>
    4f08:	e0 95       	com	r30
    4f0a:	08 95       	ret

00004f0c <__fixsfsi>:
    4f0c:	04 d0       	rcall	.+8      	; 0x4f16 <__fixunssfsi>
    4f0e:	68 94       	set
    4f10:	b1 11       	cpse	r27, r1
    4f12:	b5 c0       	rjmp	.+362    	; 0x507e <__fp_szero>
    4f14:	08 95       	ret

00004f16 <__fixunssfsi>:
    4f16:	98 d0       	rcall	.+304    	; 0x5048 <__fp_splitA>
    4f18:	88 f0       	brcs	.+34     	; 0x4f3c <__fixunssfsi+0x26>
    4f1a:	9f 57       	subi	r25, 0x7F	; 127
    4f1c:	90 f0       	brcs	.+36     	; 0x4f42 <__fixunssfsi+0x2c>
    4f1e:	b9 2f       	mov	r27, r25
    4f20:	99 27       	eor	r25, r25
    4f22:	b7 51       	subi	r27, 0x17	; 23
    4f24:	a0 f0       	brcs	.+40     	; 0x4f4e <__fixunssfsi+0x38>
    4f26:	d1 f0       	breq	.+52     	; 0x4f5c <__fixunssfsi+0x46>
    4f28:	66 0f       	add	r22, r22
    4f2a:	77 1f       	adc	r23, r23
    4f2c:	88 1f       	adc	r24, r24
    4f2e:	99 1f       	adc	r25, r25
    4f30:	1a f0       	brmi	.+6      	; 0x4f38 <__fixunssfsi+0x22>
    4f32:	ba 95       	dec	r27
    4f34:	c9 f7       	brne	.-14     	; 0x4f28 <__fixunssfsi+0x12>
    4f36:	12 c0       	rjmp	.+36     	; 0x4f5c <__fixunssfsi+0x46>
    4f38:	b1 30       	cpi	r27, 0x01	; 1
    4f3a:	81 f0       	breq	.+32     	; 0x4f5c <__fixunssfsi+0x46>
    4f3c:	9f d0       	rcall	.+318    	; 0x507c <__fp_zero>
    4f3e:	b1 e0       	ldi	r27, 0x01	; 1
    4f40:	08 95       	ret
    4f42:	9c c0       	rjmp	.+312    	; 0x507c <__fp_zero>
    4f44:	67 2f       	mov	r22, r23
    4f46:	78 2f       	mov	r23, r24
    4f48:	88 27       	eor	r24, r24
    4f4a:	b8 5f       	subi	r27, 0xF8	; 248
    4f4c:	39 f0       	breq	.+14     	; 0x4f5c <__fixunssfsi+0x46>
    4f4e:	b9 3f       	cpi	r27, 0xF9	; 249
    4f50:	cc f3       	brlt	.-14     	; 0x4f44 <__fixunssfsi+0x2e>
    4f52:	86 95       	lsr	r24
    4f54:	77 95       	ror	r23
    4f56:	67 95       	ror	r22
    4f58:	b3 95       	inc	r27
    4f5a:	d9 f7       	brne	.-10     	; 0x4f52 <__fixunssfsi+0x3c>
    4f5c:	3e f4       	brtc	.+14     	; 0x4f6c <__fixunssfsi+0x56>
    4f5e:	90 95       	com	r25
    4f60:	80 95       	com	r24
    4f62:	70 95       	com	r23
    4f64:	61 95       	neg	r22
    4f66:	7f 4f       	sbci	r23, 0xFF	; 255
    4f68:	8f 4f       	sbci	r24, 0xFF	; 255
    4f6a:	9f 4f       	sbci	r25, 0xFF	; 255
    4f6c:	08 95       	ret

00004f6e <__floatunsisf>:
    4f6e:	e8 94       	clt
    4f70:	09 c0       	rjmp	.+18     	; 0x4f84 <__floatsisf+0x12>

00004f72 <__floatsisf>:
    4f72:	97 fb       	bst	r25, 7
    4f74:	3e f4       	brtc	.+14     	; 0x4f84 <__floatsisf+0x12>
    4f76:	90 95       	com	r25
    4f78:	80 95       	com	r24
    4f7a:	70 95       	com	r23
    4f7c:	61 95       	neg	r22
    4f7e:	7f 4f       	sbci	r23, 0xFF	; 255
    4f80:	8f 4f       	sbci	r24, 0xFF	; 255
    4f82:	9f 4f       	sbci	r25, 0xFF	; 255
    4f84:	99 23       	and	r25, r25
    4f86:	a9 f0       	breq	.+42     	; 0x4fb2 <__floatsisf+0x40>
    4f88:	f9 2f       	mov	r31, r25
    4f8a:	96 e9       	ldi	r25, 0x96	; 150
    4f8c:	bb 27       	eor	r27, r27
    4f8e:	93 95       	inc	r25
    4f90:	f6 95       	lsr	r31
    4f92:	87 95       	ror	r24
    4f94:	77 95       	ror	r23
    4f96:	67 95       	ror	r22
    4f98:	b7 95       	ror	r27
    4f9a:	f1 11       	cpse	r31, r1
    4f9c:	f8 cf       	rjmp	.-16     	; 0x4f8e <__floatsisf+0x1c>
    4f9e:	fa f4       	brpl	.+62     	; 0x4fde <__floatsisf+0x6c>
    4fa0:	bb 0f       	add	r27, r27
    4fa2:	11 f4       	brne	.+4      	; 0x4fa8 <__floatsisf+0x36>
    4fa4:	60 ff       	sbrs	r22, 0
    4fa6:	1b c0       	rjmp	.+54     	; 0x4fde <__floatsisf+0x6c>
    4fa8:	6f 5f       	subi	r22, 0xFF	; 255
    4faa:	7f 4f       	sbci	r23, 0xFF	; 255
    4fac:	8f 4f       	sbci	r24, 0xFF	; 255
    4fae:	9f 4f       	sbci	r25, 0xFF	; 255
    4fb0:	16 c0       	rjmp	.+44     	; 0x4fde <__floatsisf+0x6c>
    4fb2:	88 23       	and	r24, r24
    4fb4:	11 f0       	breq	.+4      	; 0x4fba <__floatsisf+0x48>
    4fb6:	96 e9       	ldi	r25, 0x96	; 150
    4fb8:	11 c0       	rjmp	.+34     	; 0x4fdc <__floatsisf+0x6a>
    4fba:	77 23       	and	r23, r23
    4fbc:	21 f0       	breq	.+8      	; 0x4fc6 <__floatsisf+0x54>
    4fbe:	9e e8       	ldi	r25, 0x8E	; 142
    4fc0:	87 2f       	mov	r24, r23
    4fc2:	76 2f       	mov	r23, r22
    4fc4:	05 c0       	rjmp	.+10     	; 0x4fd0 <__floatsisf+0x5e>
    4fc6:	66 23       	and	r22, r22
    4fc8:	71 f0       	breq	.+28     	; 0x4fe6 <__floatsisf+0x74>
    4fca:	96 e8       	ldi	r25, 0x86	; 134
    4fcc:	86 2f       	mov	r24, r22
    4fce:	70 e0       	ldi	r23, 0x00	; 0
    4fd0:	60 e0       	ldi	r22, 0x00	; 0
    4fd2:	2a f0       	brmi	.+10     	; 0x4fde <__floatsisf+0x6c>
    4fd4:	9a 95       	dec	r25
    4fd6:	66 0f       	add	r22, r22
    4fd8:	77 1f       	adc	r23, r23
    4fda:	88 1f       	adc	r24, r24
    4fdc:	da f7       	brpl	.-10     	; 0x4fd4 <__floatsisf+0x62>
    4fde:	88 0f       	add	r24, r24
    4fe0:	96 95       	lsr	r25
    4fe2:	87 95       	ror	r24
    4fe4:	97 f9       	bld	r25, 7
    4fe6:	08 95       	ret

00004fe8 <__fp_inf>:
    4fe8:	97 f9       	bld	r25, 7
    4fea:	9f 67       	ori	r25, 0x7F	; 127
    4fec:	80 e8       	ldi	r24, 0x80	; 128
    4fee:	70 e0       	ldi	r23, 0x00	; 0
    4ff0:	60 e0       	ldi	r22, 0x00	; 0
    4ff2:	08 95       	ret

00004ff4 <__fp_nan>:
    4ff4:	9f ef       	ldi	r25, 0xFF	; 255
    4ff6:	80 ec       	ldi	r24, 0xC0	; 192
    4ff8:	08 95       	ret

00004ffa <__fp_pscA>:
    4ffa:	00 24       	eor	r0, r0
    4ffc:	0a 94       	dec	r0
    4ffe:	16 16       	cp	r1, r22
    5000:	17 06       	cpc	r1, r23
    5002:	18 06       	cpc	r1, r24
    5004:	09 06       	cpc	r0, r25
    5006:	08 95       	ret

00005008 <__fp_pscB>:
    5008:	00 24       	eor	r0, r0
    500a:	0a 94       	dec	r0
    500c:	12 16       	cp	r1, r18
    500e:	13 06       	cpc	r1, r19
    5010:	14 06       	cpc	r1, r20
    5012:	05 06       	cpc	r0, r21
    5014:	08 95       	ret

00005016 <__fp_round>:
    5016:	09 2e       	mov	r0, r25
    5018:	03 94       	inc	r0
    501a:	00 0c       	add	r0, r0
    501c:	11 f4       	brne	.+4      	; 0x5022 <__fp_round+0xc>
    501e:	88 23       	and	r24, r24
    5020:	52 f0       	brmi	.+20     	; 0x5036 <__fp_round+0x20>
    5022:	bb 0f       	add	r27, r27
    5024:	40 f4       	brcc	.+16     	; 0x5036 <__fp_round+0x20>
    5026:	bf 2b       	or	r27, r31
    5028:	11 f4       	brne	.+4      	; 0x502e <__fp_round+0x18>
    502a:	60 ff       	sbrs	r22, 0
    502c:	04 c0       	rjmp	.+8      	; 0x5036 <__fp_round+0x20>
    502e:	6f 5f       	subi	r22, 0xFF	; 255
    5030:	7f 4f       	sbci	r23, 0xFF	; 255
    5032:	8f 4f       	sbci	r24, 0xFF	; 255
    5034:	9f 4f       	sbci	r25, 0xFF	; 255
    5036:	08 95       	ret

00005038 <__fp_split3>:
    5038:	57 fd       	sbrc	r21, 7
    503a:	90 58       	subi	r25, 0x80	; 128
    503c:	44 0f       	add	r20, r20
    503e:	55 1f       	adc	r21, r21
    5040:	59 f0       	breq	.+22     	; 0x5058 <__fp_splitA+0x10>
    5042:	5f 3f       	cpi	r21, 0xFF	; 255
    5044:	71 f0       	breq	.+28     	; 0x5062 <__fp_splitA+0x1a>
    5046:	47 95       	ror	r20

00005048 <__fp_splitA>:
    5048:	88 0f       	add	r24, r24
    504a:	97 fb       	bst	r25, 7
    504c:	99 1f       	adc	r25, r25
    504e:	61 f0       	breq	.+24     	; 0x5068 <__fp_splitA+0x20>
    5050:	9f 3f       	cpi	r25, 0xFF	; 255
    5052:	79 f0       	breq	.+30     	; 0x5072 <__fp_splitA+0x2a>
    5054:	87 95       	ror	r24
    5056:	08 95       	ret
    5058:	12 16       	cp	r1, r18
    505a:	13 06       	cpc	r1, r19
    505c:	14 06       	cpc	r1, r20
    505e:	55 1f       	adc	r21, r21
    5060:	f2 cf       	rjmp	.-28     	; 0x5046 <__fp_split3+0xe>
    5062:	46 95       	lsr	r20
    5064:	f1 df       	rcall	.-30     	; 0x5048 <__fp_splitA>
    5066:	08 c0       	rjmp	.+16     	; 0x5078 <__fp_splitA+0x30>
    5068:	16 16       	cp	r1, r22
    506a:	17 06       	cpc	r1, r23
    506c:	18 06       	cpc	r1, r24
    506e:	99 1f       	adc	r25, r25
    5070:	f1 cf       	rjmp	.-30     	; 0x5054 <__fp_splitA+0xc>
    5072:	86 95       	lsr	r24
    5074:	71 05       	cpc	r23, r1
    5076:	61 05       	cpc	r22, r1
    5078:	08 94       	sec
    507a:	08 95       	ret

0000507c <__fp_zero>:
    507c:	e8 94       	clt

0000507e <__fp_szero>:
    507e:	bb 27       	eor	r27, r27
    5080:	66 27       	eor	r22, r22
    5082:	77 27       	eor	r23, r23
    5084:	cb 01       	movw	r24, r22
    5086:	97 f9       	bld	r25, 7
    5088:	08 95       	ret

0000508a <__mulsf3>:
    508a:	0b d0       	rcall	.+22     	; 0x50a2 <__mulsf3x>
    508c:	c4 cf       	rjmp	.-120    	; 0x5016 <__fp_round>
    508e:	b5 df       	rcall	.-150    	; 0x4ffa <__fp_pscA>
    5090:	28 f0       	brcs	.+10     	; 0x509c <__mulsf3+0x12>
    5092:	ba df       	rcall	.-140    	; 0x5008 <__fp_pscB>
    5094:	18 f0       	brcs	.+6      	; 0x509c <__mulsf3+0x12>
    5096:	95 23       	and	r25, r21
    5098:	09 f0       	breq	.+2      	; 0x509c <__mulsf3+0x12>
    509a:	a6 cf       	rjmp	.-180    	; 0x4fe8 <__fp_inf>
    509c:	ab cf       	rjmp	.-170    	; 0x4ff4 <__fp_nan>
    509e:	11 24       	eor	r1, r1
    50a0:	ee cf       	rjmp	.-36     	; 0x507e <__fp_szero>

000050a2 <__mulsf3x>:
    50a2:	ca df       	rcall	.-108    	; 0x5038 <__fp_split3>
    50a4:	a0 f3       	brcs	.-24     	; 0x508e <__mulsf3+0x4>

000050a6 <__mulsf3_pse>:
    50a6:	95 9f       	mul	r25, r21
    50a8:	d1 f3       	breq	.-12     	; 0x509e <__mulsf3+0x14>
    50aa:	95 0f       	add	r25, r21
    50ac:	50 e0       	ldi	r21, 0x00	; 0
    50ae:	55 1f       	adc	r21, r21
    50b0:	62 9f       	mul	r22, r18
    50b2:	f0 01       	movw	r30, r0
    50b4:	72 9f       	mul	r23, r18
    50b6:	bb 27       	eor	r27, r27
    50b8:	f0 0d       	add	r31, r0
    50ba:	b1 1d       	adc	r27, r1
    50bc:	63 9f       	mul	r22, r19
    50be:	aa 27       	eor	r26, r26
    50c0:	f0 0d       	add	r31, r0
    50c2:	b1 1d       	adc	r27, r1
    50c4:	aa 1f       	adc	r26, r26
    50c6:	64 9f       	mul	r22, r20
    50c8:	66 27       	eor	r22, r22
    50ca:	b0 0d       	add	r27, r0
    50cc:	a1 1d       	adc	r26, r1
    50ce:	66 1f       	adc	r22, r22
    50d0:	82 9f       	mul	r24, r18
    50d2:	22 27       	eor	r18, r18
    50d4:	b0 0d       	add	r27, r0
    50d6:	a1 1d       	adc	r26, r1
    50d8:	62 1f       	adc	r22, r18
    50da:	73 9f       	mul	r23, r19
    50dc:	b0 0d       	add	r27, r0
    50de:	a1 1d       	adc	r26, r1
    50e0:	62 1f       	adc	r22, r18
    50e2:	83 9f       	mul	r24, r19
    50e4:	a0 0d       	add	r26, r0
    50e6:	61 1d       	adc	r22, r1
    50e8:	22 1f       	adc	r18, r18
    50ea:	74 9f       	mul	r23, r20
    50ec:	33 27       	eor	r19, r19
    50ee:	a0 0d       	add	r26, r0
    50f0:	61 1d       	adc	r22, r1
    50f2:	23 1f       	adc	r18, r19
    50f4:	84 9f       	mul	r24, r20
    50f6:	60 0d       	add	r22, r0
    50f8:	21 1d       	adc	r18, r1
    50fa:	82 2f       	mov	r24, r18
    50fc:	76 2f       	mov	r23, r22
    50fe:	6a 2f       	mov	r22, r26
    5100:	11 24       	eor	r1, r1
    5102:	9f 57       	subi	r25, 0x7F	; 127
    5104:	50 40       	sbci	r21, 0x00	; 0
    5106:	8a f0       	brmi	.+34     	; 0x512a <__mulsf3_pse+0x84>
    5108:	e1 f0       	breq	.+56     	; 0x5142 <__mulsf3_pse+0x9c>
    510a:	88 23       	and	r24, r24
    510c:	4a f0       	brmi	.+18     	; 0x5120 <__mulsf3_pse+0x7a>
    510e:	ee 0f       	add	r30, r30
    5110:	ff 1f       	adc	r31, r31
    5112:	bb 1f       	adc	r27, r27
    5114:	66 1f       	adc	r22, r22
    5116:	77 1f       	adc	r23, r23
    5118:	88 1f       	adc	r24, r24
    511a:	91 50       	subi	r25, 0x01	; 1
    511c:	50 40       	sbci	r21, 0x00	; 0
    511e:	a9 f7       	brne	.-22     	; 0x510a <__mulsf3_pse+0x64>
    5120:	9e 3f       	cpi	r25, 0xFE	; 254
    5122:	51 05       	cpc	r21, r1
    5124:	70 f0       	brcs	.+28     	; 0x5142 <__mulsf3_pse+0x9c>
    5126:	60 cf       	rjmp	.-320    	; 0x4fe8 <__fp_inf>
    5128:	aa cf       	rjmp	.-172    	; 0x507e <__fp_szero>
    512a:	5f 3f       	cpi	r21, 0xFF	; 255
    512c:	ec f3       	brlt	.-6      	; 0x5128 <__mulsf3_pse+0x82>
    512e:	98 3e       	cpi	r25, 0xE8	; 232
    5130:	dc f3       	brlt	.-10     	; 0x5128 <__mulsf3_pse+0x82>
    5132:	86 95       	lsr	r24
    5134:	77 95       	ror	r23
    5136:	67 95       	ror	r22
    5138:	b7 95       	ror	r27
    513a:	f7 95       	ror	r31
    513c:	e7 95       	ror	r30
    513e:	9f 5f       	subi	r25, 0xFF	; 255
    5140:	c1 f7       	brne	.-16     	; 0x5132 <__mulsf3_pse+0x8c>
    5142:	fe 2b       	or	r31, r30
    5144:	88 0f       	add	r24, r24
    5146:	91 1d       	adc	r25, r1
    5148:	96 95       	lsr	r25
    514a:	87 95       	ror	r24
    514c:	97 f9       	bld	r25, 7
    514e:	08 95       	ret

00005150 <__udivmodsi4>:
    5150:	a1 e2       	ldi	r26, 0x21	; 33
    5152:	1a 2e       	mov	r1, r26
    5154:	aa 1b       	sub	r26, r26
    5156:	bb 1b       	sub	r27, r27
    5158:	fd 01       	movw	r30, r26
    515a:	0d c0       	rjmp	.+26     	; 0x5176 <__udivmodsi4_ep>

0000515c <__udivmodsi4_loop>:
    515c:	aa 1f       	adc	r26, r26
    515e:	bb 1f       	adc	r27, r27
    5160:	ee 1f       	adc	r30, r30
    5162:	ff 1f       	adc	r31, r31
    5164:	a2 17       	cp	r26, r18
    5166:	b3 07       	cpc	r27, r19
    5168:	e4 07       	cpc	r30, r20
    516a:	f5 07       	cpc	r31, r21
    516c:	20 f0       	brcs	.+8      	; 0x5176 <__udivmodsi4_ep>
    516e:	a2 1b       	sub	r26, r18
    5170:	b3 0b       	sbc	r27, r19
    5172:	e4 0b       	sbc	r30, r20
    5174:	f5 0b       	sbc	r31, r21

00005176 <__udivmodsi4_ep>:
    5176:	66 1f       	adc	r22, r22
    5178:	77 1f       	adc	r23, r23
    517a:	88 1f       	adc	r24, r24
    517c:	99 1f       	adc	r25, r25
    517e:	1a 94       	dec	r1
    5180:	69 f7       	brne	.-38     	; 0x515c <__udivmodsi4_loop>
    5182:	60 95       	com	r22
    5184:	70 95       	com	r23
    5186:	80 95       	com	r24
    5188:	90 95       	com	r25
    518a:	9b 01       	movw	r18, r22
    518c:	ac 01       	movw	r20, r24
    518e:	bd 01       	movw	r22, r26
    5190:	cf 01       	movw	r24, r30
    5192:	08 95       	ret

00005194 <__tablejump2__>:
    5194:	ee 0f       	add	r30, r30
    5196:	ff 1f       	adc	r31, r31
    5198:	88 1f       	adc	r24, r24
    519a:	8b bf       	out	0x3b, r24	; 59
    519c:	07 90       	elpm	r0, Z+
    519e:	f6 91       	elpm	r31, Z
    51a0:	e0 2d       	mov	r30, r0
    51a2:	19 94       	eijmp

000051a4 <malloc>:
    51a4:	0f 93       	push	r16
    51a6:	1f 93       	push	r17
    51a8:	cf 93       	push	r28
    51aa:	df 93       	push	r29
    51ac:	82 30       	cpi	r24, 0x02	; 2
    51ae:	91 05       	cpc	r25, r1
    51b0:	10 f4       	brcc	.+4      	; 0x51b6 <malloc+0x12>
    51b2:	82 e0       	ldi	r24, 0x02	; 2
    51b4:	90 e0       	ldi	r25, 0x00	; 0
    51b6:	e0 91 74 17 	lds	r30, 0x1774	; 0x801774 <__flp>
    51ba:	f0 91 75 17 	lds	r31, 0x1775	; 0x801775 <__flp+0x1>
    51be:	20 e0       	ldi	r18, 0x00	; 0
    51c0:	30 e0       	ldi	r19, 0x00	; 0
    51c2:	a0 e0       	ldi	r26, 0x00	; 0
    51c4:	b0 e0       	ldi	r27, 0x00	; 0
    51c6:	30 97       	sbiw	r30, 0x00	; 0
    51c8:	19 f1       	breq	.+70     	; 0x5210 <malloc+0x6c>
    51ca:	40 81       	ld	r20, Z
    51cc:	51 81       	ldd	r21, Z+1	; 0x01
    51ce:	02 81       	ldd	r16, Z+2	; 0x02
    51d0:	13 81       	ldd	r17, Z+3	; 0x03
    51d2:	48 17       	cp	r20, r24
    51d4:	59 07       	cpc	r21, r25
    51d6:	c8 f0       	brcs	.+50     	; 0x520a <malloc+0x66>
    51d8:	84 17       	cp	r24, r20
    51da:	95 07       	cpc	r25, r21
    51dc:	69 f4       	brne	.+26     	; 0x51f8 <malloc+0x54>
    51de:	10 97       	sbiw	r26, 0x00	; 0
    51e0:	31 f0       	breq	.+12     	; 0x51ee <malloc+0x4a>
    51e2:	12 96       	adiw	r26, 0x02	; 2
    51e4:	0c 93       	st	X, r16
    51e6:	12 97       	sbiw	r26, 0x02	; 2
    51e8:	13 96       	adiw	r26, 0x03	; 3
    51ea:	1c 93       	st	X, r17
    51ec:	27 c0       	rjmp	.+78     	; 0x523c <malloc+0x98>
    51ee:	00 93 74 17 	sts	0x1774, r16	; 0x801774 <__flp>
    51f2:	10 93 75 17 	sts	0x1775, r17	; 0x801775 <__flp+0x1>
    51f6:	22 c0       	rjmp	.+68     	; 0x523c <malloc+0x98>
    51f8:	21 15       	cp	r18, r1
    51fa:	31 05       	cpc	r19, r1
    51fc:	19 f0       	breq	.+6      	; 0x5204 <malloc+0x60>
    51fe:	42 17       	cp	r20, r18
    5200:	53 07       	cpc	r21, r19
    5202:	18 f4       	brcc	.+6      	; 0x520a <malloc+0x66>
    5204:	9a 01       	movw	r18, r20
    5206:	bd 01       	movw	r22, r26
    5208:	ef 01       	movw	r28, r30
    520a:	df 01       	movw	r26, r30
    520c:	f8 01       	movw	r30, r16
    520e:	db cf       	rjmp	.-74     	; 0x51c6 <malloc+0x22>
    5210:	21 15       	cp	r18, r1
    5212:	31 05       	cpc	r19, r1
    5214:	f9 f0       	breq	.+62     	; 0x5254 <malloc+0xb0>
    5216:	28 1b       	sub	r18, r24
    5218:	39 0b       	sbc	r19, r25
    521a:	24 30       	cpi	r18, 0x04	; 4
    521c:	31 05       	cpc	r19, r1
    521e:	80 f4       	brcc	.+32     	; 0x5240 <malloc+0x9c>
    5220:	8a 81       	ldd	r24, Y+2	; 0x02
    5222:	9b 81       	ldd	r25, Y+3	; 0x03
    5224:	61 15       	cp	r22, r1
    5226:	71 05       	cpc	r23, r1
    5228:	21 f0       	breq	.+8      	; 0x5232 <malloc+0x8e>
    522a:	fb 01       	movw	r30, r22
    522c:	93 83       	std	Z+3, r25	; 0x03
    522e:	82 83       	std	Z+2, r24	; 0x02
    5230:	04 c0       	rjmp	.+8      	; 0x523a <malloc+0x96>
    5232:	90 93 75 17 	sts	0x1775, r25	; 0x801775 <__flp+0x1>
    5236:	80 93 74 17 	sts	0x1774, r24	; 0x801774 <__flp>
    523a:	fe 01       	movw	r30, r28
    523c:	32 96       	adiw	r30, 0x02	; 2
    523e:	44 c0       	rjmp	.+136    	; 0x52c8 <malloc+0x124>
    5240:	fe 01       	movw	r30, r28
    5242:	e2 0f       	add	r30, r18
    5244:	f3 1f       	adc	r31, r19
    5246:	81 93       	st	Z+, r24
    5248:	91 93       	st	Z+, r25
    524a:	22 50       	subi	r18, 0x02	; 2
    524c:	31 09       	sbc	r19, r1
    524e:	39 83       	std	Y+1, r19	; 0x01
    5250:	28 83       	st	Y, r18
    5252:	3a c0       	rjmp	.+116    	; 0x52c8 <malloc+0x124>
    5254:	20 91 72 17 	lds	r18, 0x1772	; 0x801772 <__brkval>
    5258:	30 91 73 17 	lds	r19, 0x1773	; 0x801773 <__brkval+0x1>
    525c:	23 2b       	or	r18, r19
    525e:	41 f4       	brne	.+16     	; 0x5270 <malloc+0xcc>
    5260:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5264:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5268:	30 93 73 17 	sts	0x1773, r19	; 0x801773 <__brkval+0x1>
    526c:	20 93 72 17 	sts	0x1772, r18	; 0x801772 <__brkval>
    5270:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5274:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5278:	21 15       	cp	r18, r1
    527a:	31 05       	cpc	r19, r1
    527c:	41 f4       	brne	.+16     	; 0x528e <malloc+0xea>
    527e:	2d b7       	in	r18, 0x3d	; 61
    5280:	3e b7       	in	r19, 0x3e	; 62
    5282:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5286:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    528a:	24 1b       	sub	r18, r20
    528c:	35 0b       	sbc	r19, r21
    528e:	e0 91 72 17 	lds	r30, 0x1772	; 0x801772 <__brkval>
    5292:	f0 91 73 17 	lds	r31, 0x1773	; 0x801773 <__brkval+0x1>
    5296:	e2 17       	cp	r30, r18
    5298:	f3 07       	cpc	r31, r19
    529a:	a0 f4       	brcc	.+40     	; 0x52c4 <malloc+0x120>
    529c:	2e 1b       	sub	r18, r30
    529e:	3f 0b       	sbc	r19, r31
    52a0:	28 17       	cp	r18, r24
    52a2:	39 07       	cpc	r19, r25
    52a4:	78 f0       	brcs	.+30     	; 0x52c4 <malloc+0x120>
    52a6:	ac 01       	movw	r20, r24
    52a8:	4e 5f       	subi	r20, 0xFE	; 254
    52aa:	5f 4f       	sbci	r21, 0xFF	; 255
    52ac:	24 17       	cp	r18, r20
    52ae:	35 07       	cpc	r19, r21
    52b0:	48 f0       	brcs	.+18     	; 0x52c4 <malloc+0x120>
    52b2:	4e 0f       	add	r20, r30
    52b4:	5f 1f       	adc	r21, r31
    52b6:	50 93 73 17 	sts	0x1773, r21	; 0x801773 <__brkval+0x1>
    52ba:	40 93 72 17 	sts	0x1772, r20	; 0x801772 <__brkval>
    52be:	81 93       	st	Z+, r24
    52c0:	91 93       	st	Z+, r25
    52c2:	02 c0       	rjmp	.+4      	; 0x52c8 <malloc+0x124>
    52c4:	e0 e0       	ldi	r30, 0x00	; 0
    52c6:	f0 e0       	ldi	r31, 0x00	; 0
    52c8:	cf 01       	movw	r24, r30
    52ca:	df 91       	pop	r29
    52cc:	cf 91       	pop	r28
    52ce:	1f 91       	pop	r17
    52d0:	0f 91       	pop	r16
    52d2:	08 95       	ret

000052d4 <free>:
    52d4:	cf 93       	push	r28
    52d6:	df 93       	push	r29
    52d8:	00 97       	sbiw	r24, 0x00	; 0
    52da:	09 f4       	brne	.+2      	; 0x52de <free+0xa>
    52dc:	81 c0       	rjmp	.+258    	; 0x53e0 <free+0x10c>
    52de:	fc 01       	movw	r30, r24
    52e0:	32 97       	sbiw	r30, 0x02	; 2
    52e2:	13 82       	std	Z+3, r1	; 0x03
    52e4:	12 82       	std	Z+2, r1	; 0x02
    52e6:	a0 91 74 17 	lds	r26, 0x1774	; 0x801774 <__flp>
    52ea:	b0 91 75 17 	lds	r27, 0x1775	; 0x801775 <__flp+0x1>
    52ee:	10 97       	sbiw	r26, 0x00	; 0
    52f0:	81 f4       	brne	.+32     	; 0x5312 <free+0x3e>
    52f2:	20 81       	ld	r18, Z
    52f4:	31 81       	ldd	r19, Z+1	; 0x01
    52f6:	82 0f       	add	r24, r18
    52f8:	93 1f       	adc	r25, r19
    52fa:	20 91 72 17 	lds	r18, 0x1772	; 0x801772 <__brkval>
    52fe:	30 91 73 17 	lds	r19, 0x1773	; 0x801773 <__brkval+0x1>
    5302:	28 17       	cp	r18, r24
    5304:	39 07       	cpc	r19, r25
    5306:	51 f5       	brne	.+84     	; 0x535c <free+0x88>
    5308:	f0 93 73 17 	sts	0x1773, r31	; 0x801773 <__brkval+0x1>
    530c:	e0 93 72 17 	sts	0x1772, r30	; 0x801772 <__brkval>
    5310:	67 c0       	rjmp	.+206    	; 0x53e0 <free+0x10c>
    5312:	ed 01       	movw	r28, r26
    5314:	20 e0       	ldi	r18, 0x00	; 0
    5316:	30 e0       	ldi	r19, 0x00	; 0
    5318:	ce 17       	cp	r28, r30
    531a:	df 07       	cpc	r29, r31
    531c:	40 f4       	brcc	.+16     	; 0x532e <free+0x5a>
    531e:	4a 81       	ldd	r20, Y+2	; 0x02
    5320:	5b 81       	ldd	r21, Y+3	; 0x03
    5322:	9e 01       	movw	r18, r28
    5324:	41 15       	cp	r20, r1
    5326:	51 05       	cpc	r21, r1
    5328:	f1 f0       	breq	.+60     	; 0x5366 <free+0x92>
    532a:	ea 01       	movw	r28, r20
    532c:	f5 cf       	rjmp	.-22     	; 0x5318 <free+0x44>
    532e:	d3 83       	std	Z+3, r29	; 0x03
    5330:	c2 83       	std	Z+2, r28	; 0x02
    5332:	40 81       	ld	r20, Z
    5334:	51 81       	ldd	r21, Z+1	; 0x01
    5336:	84 0f       	add	r24, r20
    5338:	95 1f       	adc	r25, r21
    533a:	c8 17       	cp	r28, r24
    533c:	d9 07       	cpc	r29, r25
    533e:	59 f4       	brne	.+22     	; 0x5356 <free+0x82>
    5340:	88 81       	ld	r24, Y
    5342:	99 81       	ldd	r25, Y+1	; 0x01
    5344:	84 0f       	add	r24, r20
    5346:	95 1f       	adc	r25, r21
    5348:	02 96       	adiw	r24, 0x02	; 2
    534a:	91 83       	std	Z+1, r25	; 0x01
    534c:	80 83       	st	Z, r24
    534e:	8a 81       	ldd	r24, Y+2	; 0x02
    5350:	9b 81       	ldd	r25, Y+3	; 0x03
    5352:	93 83       	std	Z+3, r25	; 0x03
    5354:	82 83       	std	Z+2, r24	; 0x02
    5356:	21 15       	cp	r18, r1
    5358:	31 05       	cpc	r19, r1
    535a:	29 f4       	brne	.+10     	; 0x5366 <free+0x92>
    535c:	f0 93 75 17 	sts	0x1775, r31	; 0x801775 <__flp+0x1>
    5360:	e0 93 74 17 	sts	0x1774, r30	; 0x801774 <__flp>
    5364:	3d c0       	rjmp	.+122    	; 0x53e0 <free+0x10c>
    5366:	e9 01       	movw	r28, r18
    5368:	fb 83       	std	Y+3, r31	; 0x03
    536a:	ea 83       	std	Y+2, r30	; 0x02
    536c:	49 91       	ld	r20, Y+
    536e:	59 91       	ld	r21, Y+
    5370:	c4 0f       	add	r28, r20
    5372:	d5 1f       	adc	r29, r21
    5374:	ec 17       	cp	r30, r28
    5376:	fd 07       	cpc	r31, r29
    5378:	61 f4       	brne	.+24     	; 0x5392 <free+0xbe>
    537a:	80 81       	ld	r24, Z
    537c:	91 81       	ldd	r25, Z+1	; 0x01
    537e:	84 0f       	add	r24, r20
    5380:	95 1f       	adc	r25, r21
    5382:	02 96       	adiw	r24, 0x02	; 2
    5384:	e9 01       	movw	r28, r18
    5386:	99 83       	std	Y+1, r25	; 0x01
    5388:	88 83       	st	Y, r24
    538a:	82 81       	ldd	r24, Z+2	; 0x02
    538c:	93 81       	ldd	r25, Z+3	; 0x03
    538e:	9b 83       	std	Y+3, r25	; 0x03
    5390:	8a 83       	std	Y+2, r24	; 0x02
    5392:	e0 e0       	ldi	r30, 0x00	; 0
    5394:	f0 e0       	ldi	r31, 0x00	; 0
    5396:	12 96       	adiw	r26, 0x02	; 2
    5398:	8d 91       	ld	r24, X+
    539a:	9c 91       	ld	r25, X
    539c:	13 97       	sbiw	r26, 0x03	; 3
    539e:	00 97       	sbiw	r24, 0x00	; 0
    53a0:	19 f0       	breq	.+6      	; 0x53a8 <free+0xd4>
    53a2:	fd 01       	movw	r30, r26
    53a4:	dc 01       	movw	r26, r24
    53a6:	f7 cf       	rjmp	.-18     	; 0x5396 <free+0xc2>
    53a8:	8d 91       	ld	r24, X+
    53aa:	9c 91       	ld	r25, X
    53ac:	11 97       	sbiw	r26, 0x01	; 1
    53ae:	9d 01       	movw	r18, r26
    53b0:	2e 5f       	subi	r18, 0xFE	; 254
    53b2:	3f 4f       	sbci	r19, 0xFF	; 255
    53b4:	82 0f       	add	r24, r18
    53b6:	93 1f       	adc	r25, r19
    53b8:	20 91 72 17 	lds	r18, 0x1772	; 0x801772 <__brkval>
    53bc:	30 91 73 17 	lds	r19, 0x1773	; 0x801773 <__brkval+0x1>
    53c0:	28 17       	cp	r18, r24
    53c2:	39 07       	cpc	r19, r25
    53c4:	69 f4       	brne	.+26     	; 0x53e0 <free+0x10c>
    53c6:	30 97       	sbiw	r30, 0x00	; 0
    53c8:	29 f4       	brne	.+10     	; 0x53d4 <free+0x100>
    53ca:	10 92 75 17 	sts	0x1775, r1	; 0x801775 <__flp+0x1>
    53ce:	10 92 74 17 	sts	0x1774, r1	; 0x801774 <__flp>
    53d2:	02 c0       	rjmp	.+4      	; 0x53d8 <free+0x104>
    53d4:	13 82       	std	Z+3, r1	; 0x03
    53d6:	12 82       	std	Z+2, r1	; 0x02
    53d8:	b0 93 73 17 	sts	0x1773, r27	; 0x801773 <__brkval+0x1>
    53dc:	a0 93 72 17 	sts	0x1772, r26	; 0x801772 <__brkval>
    53e0:	df 91       	pop	r29
    53e2:	cf 91       	pop	r28
    53e4:	08 95       	ret

000053e6 <abort>:
    53e6:	81 e0       	ldi	r24, 0x01	; 1
    53e8:	90 e0       	ldi	r25, 0x00	; 0
    53ea:	f8 94       	cli
    53ec:	7d c3       	rjmp	.+1786   	; 0x5ae8 <_exit>

000053ee <memcpy>:
    53ee:	fb 01       	movw	r30, r22
    53f0:	dc 01       	movw	r26, r24
    53f2:	02 c0       	rjmp	.+4      	; 0x53f8 <memcpy+0xa>
    53f4:	01 90       	ld	r0, Z+
    53f6:	0d 92       	st	X+, r0
    53f8:	41 50       	subi	r20, 0x01	; 1
    53fa:	50 40       	sbci	r21, 0x00	; 0
    53fc:	d8 f7       	brcc	.-10     	; 0x53f4 <memcpy+0x6>
    53fe:	08 95       	ret

00005400 <memset>:
    5400:	dc 01       	movw	r26, r24
    5402:	01 c0       	rjmp	.+2      	; 0x5406 <memset+0x6>
    5404:	6d 93       	st	X+, r22
    5406:	41 50       	subi	r20, 0x01	; 1
    5408:	50 40       	sbci	r21, 0x00	; 0
    540a:	e0 f7       	brcc	.-8      	; 0x5404 <memset+0x4>
    540c:	08 95       	ret

0000540e <strcasestr>:
    540e:	fb 01       	movw	r30, r22
    5410:	51 91       	ld	r21, Z+
    5412:	55 23       	and	r21, r21
    5414:	b1 f0       	breq	.+44     	; 0x5442 <strcasestr+0x34>
    5416:	bf 01       	movw	r22, r30
    5418:	dc 01       	movw	r26, r24
    541a:	05 2e       	mov	r0, r21
    541c:	4d 91       	ld	r20, X+
    541e:	44 23       	and	r20, r20
    5420:	69 f0       	breq	.+26     	; 0x543c <strcasestr+0x2e>
    5422:	10 d0       	rcall	.+32     	; 0x5444 <strcasestr+0x36>
    5424:	d9 f7       	brne	.-10     	; 0x541c <strcasestr+0xe>
    5426:	cd 01       	movw	r24, r26
    5428:	01 90       	ld	r0, Z+
    542a:	00 20       	and	r0, r0
    542c:	49 f0       	breq	.+18     	; 0x5440 <strcasestr+0x32>
    542e:	4d 91       	ld	r20, X+
    5430:	41 11       	cpse	r20, r1
    5432:	08 d0       	rcall	.+16     	; 0x5444 <strcasestr+0x36>
    5434:	c9 f3       	breq	.-14     	; 0x5428 <strcasestr+0x1a>
    5436:	fb 01       	movw	r30, r22
    5438:	41 11       	cpse	r20, r1
    543a:	ee cf       	rjmp	.-36     	; 0x5418 <strcasestr+0xa>
    543c:	81 e0       	ldi	r24, 0x01	; 1
    543e:	90 e0       	ldi	r25, 0x00	; 0
    5440:	01 97       	sbiw	r24, 0x01	; 1
    5442:	08 95       	ret
    5444:	40 25       	eor	r20, r0
    5446:	39 f0       	breq	.+14     	; 0x5456 <strcasestr+0x48>
    5448:	40 32       	cpi	r20, 0x20	; 32
    544a:	29 f4       	brne	.+10     	; 0x5456 <strcasestr+0x48>
    544c:	40 29       	or	r20, r0
    544e:	4b 57       	subi	r20, 0x7B	; 123
    5450:	46 5e       	subi	r20, 0xE6	; 230
    5452:	08 f0       	brcs	.+2      	; 0x5456 <strcasestr+0x48>
    5454:	18 94       	sez
    5456:	08 95       	ret

00005458 <strcat>:
    5458:	fb 01       	movw	r30, r22
    545a:	dc 01       	movw	r26, r24
    545c:	0d 90       	ld	r0, X+
    545e:	00 20       	and	r0, r0
    5460:	e9 f7       	brne	.-6      	; 0x545c <strcat+0x4>
    5462:	11 97       	sbiw	r26, 0x01	; 1
    5464:	01 90       	ld	r0, Z+
    5466:	0d 92       	st	X+, r0
    5468:	00 20       	and	r0, r0
    546a:	e1 f7       	brne	.-8      	; 0x5464 <strcat+0xc>
    546c:	08 95       	ret

0000546e <strcpy>:
    546e:	fb 01       	movw	r30, r22
    5470:	dc 01       	movw	r26, r24
    5472:	01 90       	ld	r0, Z+
    5474:	0d 92       	st	X+, r0
    5476:	00 20       	and	r0, r0
    5478:	e1 f7       	brne	.-8      	; 0x5472 <strcpy+0x4>
    547a:	08 95       	ret

0000547c <strncasecmp>:
    547c:	fb 01       	movw	r30, r22
    547e:	dc 01       	movw	r26, r24
    5480:	41 50       	subi	r20, 0x01	; 1
    5482:	50 40       	sbci	r21, 0x00	; 0
    5484:	88 f0       	brcs	.+34     	; 0x54a8 <strncasecmp+0x2c>
    5486:	8d 91       	ld	r24, X+
    5488:	81 34       	cpi	r24, 0x41	; 65
    548a:	1c f0       	brlt	.+6      	; 0x5492 <strncasecmp+0x16>
    548c:	8b 35       	cpi	r24, 0x5B	; 91
    548e:	0c f4       	brge	.+2      	; 0x5492 <strncasecmp+0x16>
    5490:	80 5e       	subi	r24, 0xE0	; 224
    5492:	61 91       	ld	r22, Z+
    5494:	61 34       	cpi	r22, 0x41	; 65
    5496:	1c f0       	brlt	.+6      	; 0x549e <strncasecmp+0x22>
    5498:	6b 35       	cpi	r22, 0x5B	; 91
    549a:	0c f4       	brge	.+2      	; 0x549e <strncasecmp+0x22>
    549c:	60 5e       	subi	r22, 0xE0	; 224
    549e:	86 1b       	sub	r24, r22
    54a0:	61 11       	cpse	r22, r1
    54a2:	71 f3       	breq	.-36     	; 0x5480 <strncasecmp+0x4>
    54a4:	99 0b       	sbc	r25, r25
    54a6:	08 95       	ret
    54a8:	88 1b       	sub	r24, r24
    54aa:	fc cf       	rjmp	.-8      	; 0x54a4 <strncasecmp+0x28>

000054ac <printf>:
    54ac:	cf 93       	push	r28
    54ae:	df 93       	push	r29
    54b0:	cd b7       	in	r28, 0x3d	; 61
    54b2:	de b7       	in	r29, 0x3e	; 62
    54b4:	ae 01       	movw	r20, r28
    54b6:	4a 5f       	subi	r20, 0xFA	; 250
    54b8:	5f 4f       	sbci	r21, 0xFF	; 255
    54ba:	fa 01       	movw	r30, r20
    54bc:	61 91       	ld	r22, Z+
    54be:	71 91       	ld	r23, Z+
    54c0:	af 01       	movw	r20, r30
    54c2:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <__iob+0x2>
    54c6:	90 91 79 17 	lds	r25, 0x1779	; 0x801779 <__iob+0x3>
    54ca:	61 d0       	rcall	.+194    	; 0x558e <vfprintf>
    54cc:	df 91       	pop	r29
    54ce:	cf 91       	pop	r28
    54d0:	08 95       	ret

000054d2 <puts>:
    54d2:	0f 93       	push	r16
    54d4:	1f 93       	push	r17
    54d6:	cf 93       	push	r28
    54d8:	df 93       	push	r29
    54da:	e0 91 78 17 	lds	r30, 0x1778	; 0x801778 <__iob+0x2>
    54de:	f0 91 79 17 	lds	r31, 0x1779	; 0x801779 <__iob+0x3>
    54e2:	23 81       	ldd	r18, Z+3	; 0x03
    54e4:	21 ff       	sbrs	r18, 1
    54e6:	1b c0       	rjmp	.+54     	; 0x551e <puts+0x4c>
    54e8:	8c 01       	movw	r16, r24
    54ea:	d0 e0       	ldi	r29, 0x00	; 0
    54ec:	c0 e0       	ldi	r28, 0x00	; 0
    54ee:	f8 01       	movw	r30, r16
    54f0:	81 91       	ld	r24, Z+
    54f2:	8f 01       	movw	r16, r30
    54f4:	60 91 78 17 	lds	r22, 0x1778	; 0x801778 <__iob+0x2>
    54f8:	70 91 79 17 	lds	r23, 0x1779	; 0x801779 <__iob+0x3>
    54fc:	db 01       	movw	r26, r22
    54fe:	18 96       	adiw	r26, 0x08	; 8
    5500:	ed 91       	ld	r30, X+
    5502:	fc 91       	ld	r31, X
    5504:	19 97       	sbiw	r26, 0x09	; 9
    5506:	88 23       	and	r24, r24
    5508:	31 f0       	breq	.+12     	; 0x5516 <puts+0x44>
    550a:	19 95       	eicall
    550c:	89 2b       	or	r24, r25
    550e:	79 f3       	breq	.-34     	; 0x54ee <puts+0x1c>
    5510:	df ef       	ldi	r29, 0xFF	; 255
    5512:	cf ef       	ldi	r28, 0xFF	; 255
    5514:	ec cf       	rjmp	.-40     	; 0x54ee <puts+0x1c>
    5516:	8a e0       	ldi	r24, 0x0A	; 10
    5518:	19 95       	eicall
    551a:	89 2b       	or	r24, r25
    551c:	19 f0       	breq	.+6      	; 0x5524 <puts+0x52>
    551e:	8f ef       	ldi	r24, 0xFF	; 255
    5520:	9f ef       	ldi	r25, 0xFF	; 255
    5522:	02 c0       	rjmp	.+4      	; 0x5528 <puts+0x56>
    5524:	8d 2f       	mov	r24, r29
    5526:	9c 2f       	mov	r25, r28
    5528:	df 91       	pop	r29
    552a:	cf 91       	pop	r28
    552c:	1f 91       	pop	r17
    552e:	0f 91       	pop	r16
    5530:	08 95       	ret

00005532 <sprintf>:
    5532:	0f 93       	push	r16
    5534:	1f 93       	push	r17
    5536:	cf 93       	push	r28
    5538:	df 93       	push	r29
    553a:	cd b7       	in	r28, 0x3d	; 61
    553c:	de b7       	in	r29, 0x3e	; 62
    553e:	2e 97       	sbiw	r28, 0x0e	; 14
    5540:	0f b6       	in	r0, 0x3f	; 63
    5542:	f8 94       	cli
    5544:	de bf       	out	0x3e, r29	; 62
    5546:	0f be       	out	0x3f, r0	; 63
    5548:	cd bf       	out	0x3d, r28	; 61
    554a:	0e 89       	ldd	r16, Y+22	; 0x16
    554c:	1f 89       	ldd	r17, Y+23	; 0x17
    554e:	86 e0       	ldi	r24, 0x06	; 6
    5550:	8c 83       	std	Y+4, r24	; 0x04
    5552:	1a 83       	std	Y+2, r17	; 0x02
    5554:	09 83       	std	Y+1, r16	; 0x01
    5556:	8f ef       	ldi	r24, 0xFF	; 255
    5558:	9f e7       	ldi	r25, 0x7F	; 127
    555a:	9e 83       	std	Y+6, r25	; 0x06
    555c:	8d 83       	std	Y+5, r24	; 0x05
    555e:	ae 01       	movw	r20, r28
    5560:	46 5e       	subi	r20, 0xE6	; 230
    5562:	5f 4f       	sbci	r21, 0xFF	; 255
    5564:	68 8d       	ldd	r22, Y+24	; 0x18
    5566:	79 8d       	ldd	r23, Y+25	; 0x19
    5568:	ce 01       	movw	r24, r28
    556a:	01 96       	adiw	r24, 0x01	; 1
    556c:	10 d0       	rcall	.+32     	; 0x558e <vfprintf>
    556e:	ef 81       	ldd	r30, Y+7	; 0x07
    5570:	f8 85       	ldd	r31, Y+8	; 0x08
    5572:	e0 0f       	add	r30, r16
    5574:	f1 1f       	adc	r31, r17
    5576:	10 82       	st	Z, r1
    5578:	2e 96       	adiw	r28, 0x0e	; 14
    557a:	0f b6       	in	r0, 0x3f	; 63
    557c:	f8 94       	cli
    557e:	de bf       	out	0x3e, r29	; 62
    5580:	0f be       	out	0x3f, r0	; 63
    5582:	cd bf       	out	0x3d, r28	; 61
    5584:	df 91       	pop	r29
    5586:	cf 91       	pop	r28
    5588:	1f 91       	pop	r17
    558a:	0f 91       	pop	r16
    558c:	08 95       	ret

0000558e <vfprintf>:
    558e:	2f 92       	push	r2
    5590:	3f 92       	push	r3
    5592:	4f 92       	push	r4
    5594:	5f 92       	push	r5
    5596:	6f 92       	push	r6
    5598:	7f 92       	push	r7
    559a:	8f 92       	push	r8
    559c:	9f 92       	push	r9
    559e:	af 92       	push	r10
    55a0:	bf 92       	push	r11
    55a2:	cf 92       	push	r12
    55a4:	df 92       	push	r13
    55a6:	ef 92       	push	r14
    55a8:	ff 92       	push	r15
    55aa:	0f 93       	push	r16
    55ac:	1f 93       	push	r17
    55ae:	cf 93       	push	r28
    55b0:	df 93       	push	r29
    55b2:	cd b7       	in	r28, 0x3d	; 61
    55b4:	de b7       	in	r29, 0x3e	; 62
    55b6:	2b 97       	sbiw	r28, 0x0b	; 11
    55b8:	0f b6       	in	r0, 0x3f	; 63
    55ba:	f8 94       	cli
    55bc:	de bf       	out	0x3e, r29	; 62
    55be:	0f be       	out	0x3f, r0	; 63
    55c0:	cd bf       	out	0x3d, r28	; 61
    55c2:	6c 01       	movw	r12, r24
    55c4:	7b 01       	movw	r14, r22
    55c6:	8a 01       	movw	r16, r20
    55c8:	fc 01       	movw	r30, r24
    55ca:	17 82       	std	Z+7, r1	; 0x07
    55cc:	16 82       	std	Z+6, r1	; 0x06
    55ce:	83 81       	ldd	r24, Z+3	; 0x03
    55d0:	81 ff       	sbrs	r24, 1
    55d2:	bf c1       	rjmp	.+894    	; 0x5952 <vfprintf+0x3c4>
    55d4:	ce 01       	movw	r24, r28
    55d6:	01 96       	adiw	r24, 0x01	; 1
    55d8:	3c 01       	movw	r6, r24
    55da:	f6 01       	movw	r30, r12
    55dc:	93 81       	ldd	r25, Z+3	; 0x03
    55de:	f7 01       	movw	r30, r14
    55e0:	93 fd       	sbrc	r25, 3
    55e2:	85 91       	lpm	r24, Z+
    55e4:	93 ff       	sbrs	r25, 3
    55e6:	81 91       	ld	r24, Z+
    55e8:	7f 01       	movw	r14, r30
    55ea:	88 23       	and	r24, r24
    55ec:	09 f4       	brne	.+2      	; 0x55f0 <vfprintf+0x62>
    55ee:	ad c1       	rjmp	.+858    	; 0x594a <vfprintf+0x3bc>
    55f0:	85 32       	cpi	r24, 0x25	; 37
    55f2:	39 f4       	brne	.+14     	; 0x5602 <vfprintf+0x74>
    55f4:	93 fd       	sbrc	r25, 3
    55f6:	85 91       	lpm	r24, Z+
    55f8:	93 ff       	sbrs	r25, 3
    55fa:	81 91       	ld	r24, Z+
    55fc:	7f 01       	movw	r14, r30
    55fe:	85 32       	cpi	r24, 0x25	; 37
    5600:	21 f4       	brne	.+8      	; 0x560a <vfprintf+0x7c>
    5602:	b6 01       	movw	r22, r12
    5604:	90 e0       	ldi	r25, 0x00	; 0
    5606:	d6 d1       	rcall	.+940    	; 0x59b4 <fputc>
    5608:	e8 cf       	rjmp	.-48     	; 0x55da <vfprintf+0x4c>
    560a:	91 2c       	mov	r9, r1
    560c:	21 2c       	mov	r2, r1
    560e:	31 2c       	mov	r3, r1
    5610:	ff e1       	ldi	r31, 0x1F	; 31
    5612:	f3 15       	cp	r31, r3
    5614:	d8 f0       	brcs	.+54     	; 0x564c <vfprintf+0xbe>
    5616:	8b 32       	cpi	r24, 0x2B	; 43
    5618:	79 f0       	breq	.+30     	; 0x5638 <vfprintf+0xaa>
    561a:	38 f4       	brcc	.+14     	; 0x562a <vfprintf+0x9c>
    561c:	80 32       	cpi	r24, 0x20	; 32
    561e:	79 f0       	breq	.+30     	; 0x563e <vfprintf+0xb0>
    5620:	83 32       	cpi	r24, 0x23	; 35
    5622:	a1 f4       	brne	.+40     	; 0x564c <vfprintf+0xbe>
    5624:	23 2d       	mov	r18, r3
    5626:	20 61       	ori	r18, 0x10	; 16
    5628:	1d c0       	rjmp	.+58     	; 0x5664 <vfprintf+0xd6>
    562a:	8d 32       	cpi	r24, 0x2D	; 45
    562c:	61 f0       	breq	.+24     	; 0x5646 <vfprintf+0xb8>
    562e:	80 33       	cpi	r24, 0x30	; 48
    5630:	69 f4       	brne	.+26     	; 0x564c <vfprintf+0xbe>
    5632:	23 2d       	mov	r18, r3
    5634:	21 60       	ori	r18, 0x01	; 1
    5636:	16 c0       	rjmp	.+44     	; 0x5664 <vfprintf+0xd6>
    5638:	83 2d       	mov	r24, r3
    563a:	82 60       	ori	r24, 0x02	; 2
    563c:	38 2e       	mov	r3, r24
    563e:	e3 2d       	mov	r30, r3
    5640:	e4 60       	ori	r30, 0x04	; 4
    5642:	3e 2e       	mov	r3, r30
    5644:	2a c0       	rjmp	.+84     	; 0x569a <vfprintf+0x10c>
    5646:	f3 2d       	mov	r31, r3
    5648:	f8 60       	ori	r31, 0x08	; 8
    564a:	1d c0       	rjmp	.+58     	; 0x5686 <vfprintf+0xf8>
    564c:	37 fc       	sbrc	r3, 7
    564e:	2d c0       	rjmp	.+90     	; 0x56aa <vfprintf+0x11c>
    5650:	20 ed       	ldi	r18, 0xD0	; 208
    5652:	28 0f       	add	r18, r24
    5654:	2a 30       	cpi	r18, 0x0A	; 10
    5656:	40 f0       	brcs	.+16     	; 0x5668 <vfprintf+0xda>
    5658:	8e 32       	cpi	r24, 0x2E	; 46
    565a:	b9 f4       	brne	.+46     	; 0x568a <vfprintf+0xfc>
    565c:	36 fc       	sbrc	r3, 6
    565e:	75 c1       	rjmp	.+746    	; 0x594a <vfprintf+0x3bc>
    5660:	23 2d       	mov	r18, r3
    5662:	20 64       	ori	r18, 0x40	; 64
    5664:	32 2e       	mov	r3, r18
    5666:	19 c0       	rjmp	.+50     	; 0x569a <vfprintf+0x10c>
    5668:	36 fe       	sbrs	r3, 6
    566a:	06 c0       	rjmp	.+12     	; 0x5678 <vfprintf+0xea>
    566c:	8a e0       	ldi	r24, 0x0A	; 10
    566e:	98 9e       	mul	r9, r24
    5670:	20 0d       	add	r18, r0
    5672:	11 24       	eor	r1, r1
    5674:	92 2e       	mov	r9, r18
    5676:	11 c0       	rjmp	.+34     	; 0x569a <vfprintf+0x10c>
    5678:	ea e0       	ldi	r30, 0x0A	; 10
    567a:	2e 9e       	mul	r2, r30
    567c:	20 0d       	add	r18, r0
    567e:	11 24       	eor	r1, r1
    5680:	22 2e       	mov	r2, r18
    5682:	f3 2d       	mov	r31, r3
    5684:	f0 62       	ori	r31, 0x20	; 32
    5686:	3f 2e       	mov	r3, r31
    5688:	08 c0       	rjmp	.+16     	; 0x569a <vfprintf+0x10c>
    568a:	8c 36       	cpi	r24, 0x6C	; 108
    568c:	21 f4       	brne	.+8      	; 0x5696 <vfprintf+0x108>
    568e:	83 2d       	mov	r24, r3
    5690:	80 68       	ori	r24, 0x80	; 128
    5692:	38 2e       	mov	r3, r24
    5694:	02 c0       	rjmp	.+4      	; 0x569a <vfprintf+0x10c>
    5696:	88 36       	cpi	r24, 0x68	; 104
    5698:	41 f4       	brne	.+16     	; 0x56aa <vfprintf+0x11c>
    569a:	f7 01       	movw	r30, r14
    569c:	93 fd       	sbrc	r25, 3
    569e:	85 91       	lpm	r24, Z+
    56a0:	93 ff       	sbrs	r25, 3
    56a2:	81 91       	ld	r24, Z+
    56a4:	7f 01       	movw	r14, r30
    56a6:	81 11       	cpse	r24, r1
    56a8:	b3 cf       	rjmp	.-154    	; 0x5610 <vfprintf+0x82>
    56aa:	98 2f       	mov	r25, r24
    56ac:	9f 7d       	andi	r25, 0xDF	; 223
    56ae:	95 54       	subi	r25, 0x45	; 69
    56b0:	93 30       	cpi	r25, 0x03	; 3
    56b2:	28 f4       	brcc	.+10     	; 0x56be <vfprintf+0x130>
    56b4:	0c 5f       	subi	r16, 0xFC	; 252
    56b6:	1f 4f       	sbci	r17, 0xFF	; 255
    56b8:	9f e3       	ldi	r25, 0x3F	; 63
    56ba:	99 83       	std	Y+1, r25	; 0x01
    56bc:	0d c0       	rjmp	.+26     	; 0x56d8 <vfprintf+0x14a>
    56be:	83 36       	cpi	r24, 0x63	; 99
    56c0:	31 f0       	breq	.+12     	; 0x56ce <vfprintf+0x140>
    56c2:	83 37       	cpi	r24, 0x73	; 115
    56c4:	71 f0       	breq	.+28     	; 0x56e2 <vfprintf+0x154>
    56c6:	83 35       	cpi	r24, 0x53	; 83
    56c8:	09 f0       	breq	.+2      	; 0x56cc <vfprintf+0x13e>
    56ca:	55 c0       	rjmp	.+170    	; 0x5776 <vfprintf+0x1e8>
    56cc:	20 c0       	rjmp	.+64     	; 0x570e <vfprintf+0x180>
    56ce:	f8 01       	movw	r30, r16
    56d0:	80 81       	ld	r24, Z
    56d2:	89 83       	std	Y+1, r24	; 0x01
    56d4:	0e 5f       	subi	r16, 0xFE	; 254
    56d6:	1f 4f       	sbci	r17, 0xFF	; 255
    56d8:	88 24       	eor	r8, r8
    56da:	83 94       	inc	r8
    56dc:	91 2c       	mov	r9, r1
    56de:	53 01       	movw	r10, r6
    56e0:	12 c0       	rjmp	.+36     	; 0x5706 <vfprintf+0x178>
    56e2:	28 01       	movw	r4, r16
    56e4:	f2 e0       	ldi	r31, 0x02	; 2
    56e6:	4f 0e       	add	r4, r31
    56e8:	51 1c       	adc	r5, r1
    56ea:	f8 01       	movw	r30, r16
    56ec:	a0 80       	ld	r10, Z
    56ee:	b1 80       	ldd	r11, Z+1	; 0x01
    56f0:	36 fe       	sbrs	r3, 6
    56f2:	03 c0       	rjmp	.+6      	; 0x56fa <vfprintf+0x16c>
    56f4:	69 2d       	mov	r22, r9
    56f6:	70 e0       	ldi	r23, 0x00	; 0
    56f8:	02 c0       	rjmp	.+4      	; 0x56fe <vfprintf+0x170>
    56fa:	6f ef       	ldi	r22, 0xFF	; 255
    56fc:	7f ef       	ldi	r23, 0xFF	; 255
    56fe:	c5 01       	movw	r24, r10
    5700:	4e d1       	rcall	.+668    	; 0x599e <strnlen>
    5702:	4c 01       	movw	r8, r24
    5704:	82 01       	movw	r16, r4
    5706:	f3 2d       	mov	r31, r3
    5708:	ff 77       	andi	r31, 0x7F	; 127
    570a:	3f 2e       	mov	r3, r31
    570c:	15 c0       	rjmp	.+42     	; 0x5738 <vfprintf+0x1aa>
    570e:	28 01       	movw	r4, r16
    5710:	22 e0       	ldi	r18, 0x02	; 2
    5712:	42 0e       	add	r4, r18
    5714:	51 1c       	adc	r5, r1
    5716:	f8 01       	movw	r30, r16
    5718:	a0 80       	ld	r10, Z
    571a:	b1 80       	ldd	r11, Z+1	; 0x01
    571c:	36 fe       	sbrs	r3, 6
    571e:	03 c0       	rjmp	.+6      	; 0x5726 <vfprintf+0x198>
    5720:	69 2d       	mov	r22, r9
    5722:	70 e0       	ldi	r23, 0x00	; 0
    5724:	02 c0       	rjmp	.+4      	; 0x572a <vfprintf+0x19c>
    5726:	6f ef       	ldi	r22, 0xFF	; 255
    5728:	7f ef       	ldi	r23, 0xFF	; 255
    572a:	c5 01       	movw	r24, r10
    572c:	2d d1       	rcall	.+602    	; 0x5988 <strnlen_P>
    572e:	4c 01       	movw	r8, r24
    5730:	f3 2d       	mov	r31, r3
    5732:	f0 68       	ori	r31, 0x80	; 128
    5734:	3f 2e       	mov	r3, r31
    5736:	82 01       	movw	r16, r4
    5738:	33 fc       	sbrc	r3, 3
    573a:	19 c0       	rjmp	.+50     	; 0x576e <vfprintf+0x1e0>
    573c:	82 2d       	mov	r24, r2
    573e:	90 e0       	ldi	r25, 0x00	; 0
    5740:	88 16       	cp	r8, r24
    5742:	99 06       	cpc	r9, r25
    5744:	a0 f4       	brcc	.+40     	; 0x576e <vfprintf+0x1e0>
    5746:	b6 01       	movw	r22, r12
    5748:	80 e2       	ldi	r24, 0x20	; 32
    574a:	90 e0       	ldi	r25, 0x00	; 0
    574c:	33 d1       	rcall	.+614    	; 0x59b4 <fputc>
    574e:	2a 94       	dec	r2
    5750:	f5 cf       	rjmp	.-22     	; 0x573c <vfprintf+0x1ae>
    5752:	f5 01       	movw	r30, r10
    5754:	37 fc       	sbrc	r3, 7
    5756:	85 91       	lpm	r24, Z+
    5758:	37 fe       	sbrs	r3, 7
    575a:	81 91       	ld	r24, Z+
    575c:	5f 01       	movw	r10, r30
    575e:	b6 01       	movw	r22, r12
    5760:	90 e0       	ldi	r25, 0x00	; 0
    5762:	28 d1       	rcall	.+592    	; 0x59b4 <fputc>
    5764:	21 10       	cpse	r2, r1
    5766:	2a 94       	dec	r2
    5768:	21 e0       	ldi	r18, 0x01	; 1
    576a:	82 1a       	sub	r8, r18
    576c:	91 08       	sbc	r9, r1
    576e:	81 14       	cp	r8, r1
    5770:	91 04       	cpc	r9, r1
    5772:	79 f7       	brne	.-34     	; 0x5752 <vfprintf+0x1c4>
    5774:	e1 c0       	rjmp	.+450    	; 0x5938 <vfprintf+0x3aa>
    5776:	84 36       	cpi	r24, 0x64	; 100
    5778:	11 f0       	breq	.+4      	; 0x577e <vfprintf+0x1f0>
    577a:	89 36       	cpi	r24, 0x69	; 105
    577c:	39 f5       	brne	.+78     	; 0x57cc <vfprintf+0x23e>
    577e:	f8 01       	movw	r30, r16
    5780:	37 fe       	sbrs	r3, 7
    5782:	07 c0       	rjmp	.+14     	; 0x5792 <vfprintf+0x204>
    5784:	60 81       	ld	r22, Z
    5786:	71 81       	ldd	r23, Z+1	; 0x01
    5788:	82 81       	ldd	r24, Z+2	; 0x02
    578a:	93 81       	ldd	r25, Z+3	; 0x03
    578c:	0c 5f       	subi	r16, 0xFC	; 252
    578e:	1f 4f       	sbci	r17, 0xFF	; 255
    5790:	08 c0       	rjmp	.+16     	; 0x57a2 <vfprintf+0x214>
    5792:	60 81       	ld	r22, Z
    5794:	71 81       	ldd	r23, Z+1	; 0x01
    5796:	07 2e       	mov	r0, r23
    5798:	00 0c       	add	r0, r0
    579a:	88 0b       	sbc	r24, r24
    579c:	99 0b       	sbc	r25, r25
    579e:	0e 5f       	subi	r16, 0xFE	; 254
    57a0:	1f 4f       	sbci	r17, 0xFF	; 255
    57a2:	f3 2d       	mov	r31, r3
    57a4:	ff 76       	andi	r31, 0x6F	; 111
    57a6:	3f 2e       	mov	r3, r31
    57a8:	97 ff       	sbrs	r25, 7
    57aa:	09 c0       	rjmp	.+18     	; 0x57be <vfprintf+0x230>
    57ac:	90 95       	com	r25
    57ae:	80 95       	com	r24
    57b0:	70 95       	com	r23
    57b2:	61 95       	neg	r22
    57b4:	7f 4f       	sbci	r23, 0xFF	; 255
    57b6:	8f 4f       	sbci	r24, 0xFF	; 255
    57b8:	9f 4f       	sbci	r25, 0xFF	; 255
    57ba:	f0 68       	ori	r31, 0x80	; 128
    57bc:	3f 2e       	mov	r3, r31
    57be:	2a e0       	ldi	r18, 0x0A	; 10
    57c0:	30 e0       	ldi	r19, 0x00	; 0
    57c2:	a3 01       	movw	r20, r6
    57c4:	33 d1       	rcall	.+614    	; 0x5a2c <__ultoa_invert>
    57c6:	88 2e       	mov	r8, r24
    57c8:	86 18       	sub	r8, r6
    57ca:	44 c0       	rjmp	.+136    	; 0x5854 <vfprintf+0x2c6>
    57cc:	85 37       	cpi	r24, 0x75	; 117
    57ce:	31 f4       	brne	.+12     	; 0x57dc <vfprintf+0x24e>
    57d0:	23 2d       	mov	r18, r3
    57d2:	2f 7e       	andi	r18, 0xEF	; 239
    57d4:	b2 2e       	mov	r11, r18
    57d6:	2a e0       	ldi	r18, 0x0A	; 10
    57d8:	30 e0       	ldi	r19, 0x00	; 0
    57da:	25 c0       	rjmp	.+74     	; 0x5826 <vfprintf+0x298>
    57dc:	93 2d       	mov	r25, r3
    57de:	99 7f       	andi	r25, 0xF9	; 249
    57e0:	b9 2e       	mov	r11, r25
    57e2:	8f 36       	cpi	r24, 0x6F	; 111
    57e4:	c1 f0       	breq	.+48     	; 0x5816 <vfprintf+0x288>
    57e6:	18 f4       	brcc	.+6      	; 0x57ee <vfprintf+0x260>
    57e8:	88 35       	cpi	r24, 0x58	; 88
    57ea:	79 f0       	breq	.+30     	; 0x580a <vfprintf+0x27c>
    57ec:	ae c0       	rjmp	.+348    	; 0x594a <vfprintf+0x3bc>
    57ee:	80 37       	cpi	r24, 0x70	; 112
    57f0:	19 f0       	breq	.+6      	; 0x57f8 <vfprintf+0x26a>
    57f2:	88 37       	cpi	r24, 0x78	; 120
    57f4:	21 f0       	breq	.+8      	; 0x57fe <vfprintf+0x270>
    57f6:	a9 c0       	rjmp	.+338    	; 0x594a <vfprintf+0x3bc>
    57f8:	e9 2f       	mov	r30, r25
    57fa:	e0 61       	ori	r30, 0x10	; 16
    57fc:	be 2e       	mov	r11, r30
    57fe:	b4 fe       	sbrs	r11, 4
    5800:	0d c0       	rjmp	.+26     	; 0x581c <vfprintf+0x28e>
    5802:	fb 2d       	mov	r31, r11
    5804:	f4 60       	ori	r31, 0x04	; 4
    5806:	bf 2e       	mov	r11, r31
    5808:	09 c0       	rjmp	.+18     	; 0x581c <vfprintf+0x28e>
    580a:	34 fe       	sbrs	r3, 4
    580c:	0a c0       	rjmp	.+20     	; 0x5822 <vfprintf+0x294>
    580e:	29 2f       	mov	r18, r25
    5810:	26 60       	ori	r18, 0x06	; 6
    5812:	b2 2e       	mov	r11, r18
    5814:	06 c0       	rjmp	.+12     	; 0x5822 <vfprintf+0x294>
    5816:	28 e0       	ldi	r18, 0x08	; 8
    5818:	30 e0       	ldi	r19, 0x00	; 0
    581a:	05 c0       	rjmp	.+10     	; 0x5826 <vfprintf+0x298>
    581c:	20 e1       	ldi	r18, 0x10	; 16
    581e:	30 e0       	ldi	r19, 0x00	; 0
    5820:	02 c0       	rjmp	.+4      	; 0x5826 <vfprintf+0x298>
    5822:	20 e1       	ldi	r18, 0x10	; 16
    5824:	32 e0       	ldi	r19, 0x02	; 2
    5826:	f8 01       	movw	r30, r16
    5828:	b7 fe       	sbrs	r11, 7
    582a:	07 c0       	rjmp	.+14     	; 0x583a <vfprintf+0x2ac>
    582c:	60 81       	ld	r22, Z
    582e:	71 81       	ldd	r23, Z+1	; 0x01
    5830:	82 81       	ldd	r24, Z+2	; 0x02
    5832:	93 81       	ldd	r25, Z+3	; 0x03
    5834:	0c 5f       	subi	r16, 0xFC	; 252
    5836:	1f 4f       	sbci	r17, 0xFF	; 255
    5838:	06 c0       	rjmp	.+12     	; 0x5846 <vfprintf+0x2b8>
    583a:	60 81       	ld	r22, Z
    583c:	71 81       	ldd	r23, Z+1	; 0x01
    583e:	80 e0       	ldi	r24, 0x00	; 0
    5840:	90 e0       	ldi	r25, 0x00	; 0
    5842:	0e 5f       	subi	r16, 0xFE	; 254
    5844:	1f 4f       	sbci	r17, 0xFF	; 255
    5846:	a3 01       	movw	r20, r6
    5848:	f1 d0       	rcall	.+482    	; 0x5a2c <__ultoa_invert>
    584a:	88 2e       	mov	r8, r24
    584c:	86 18       	sub	r8, r6
    584e:	fb 2d       	mov	r31, r11
    5850:	ff 77       	andi	r31, 0x7F	; 127
    5852:	3f 2e       	mov	r3, r31
    5854:	36 fe       	sbrs	r3, 6
    5856:	0d c0       	rjmp	.+26     	; 0x5872 <vfprintf+0x2e4>
    5858:	23 2d       	mov	r18, r3
    585a:	2e 7f       	andi	r18, 0xFE	; 254
    585c:	a2 2e       	mov	r10, r18
    585e:	89 14       	cp	r8, r9
    5860:	58 f4       	brcc	.+22     	; 0x5878 <vfprintf+0x2ea>
    5862:	34 fe       	sbrs	r3, 4
    5864:	0b c0       	rjmp	.+22     	; 0x587c <vfprintf+0x2ee>
    5866:	32 fc       	sbrc	r3, 2
    5868:	09 c0       	rjmp	.+18     	; 0x587c <vfprintf+0x2ee>
    586a:	83 2d       	mov	r24, r3
    586c:	8e 7e       	andi	r24, 0xEE	; 238
    586e:	a8 2e       	mov	r10, r24
    5870:	05 c0       	rjmp	.+10     	; 0x587c <vfprintf+0x2ee>
    5872:	b8 2c       	mov	r11, r8
    5874:	a3 2c       	mov	r10, r3
    5876:	03 c0       	rjmp	.+6      	; 0x587e <vfprintf+0x2f0>
    5878:	b8 2c       	mov	r11, r8
    587a:	01 c0       	rjmp	.+2      	; 0x587e <vfprintf+0x2f0>
    587c:	b9 2c       	mov	r11, r9
    587e:	a4 fe       	sbrs	r10, 4
    5880:	0f c0       	rjmp	.+30     	; 0x58a0 <vfprintf+0x312>
    5882:	fe 01       	movw	r30, r28
    5884:	e8 0d       	add	r30, r8
    5886:	f1 1d       	adc	r31, r1
    5888:	80 81       	ld	r24, Z
    588a:	80 33       	cpi	r24, 0x30	; 48
    588c:	21 f4       	brne	.+8      	; 0x5896 <vfprintf+0x308>
    588e:	9a 2d       	mov	r25, r10
    5890:	99 7e       	andi	r25, 0xE9	; 233
    5892:	a9 2e       	mov	r10, r25
    5894:	09 c0       	rjmp	.+18     	; 0x58a8 <vfprintf+0x31a>
    5896:	a2 fe       	sbrs	r10, 2
    5898:	06 c0       	rjmp	.+12     	; 0x58a6 <vfprintf+0x318>
    589a:	b3 94       	inc	r11
    589c:	b3 94       	inc	r11
    589e:	04 c0       	rjmp	.+8      	; 0x58a8 <vfprintf+0x31a>
    58a0:	8a 2d       	mov	r24, r10
    58a2:	86 78       	andi	r24, 0x86	; 134
    58a4:	09 f0       	breq	.+2      	; 0x58a8 <vfprintf+0x31a>
    58a6:	b3 94       	inc	r11
    58a8:	a3 fc       	sbrc	r10, 3
    58aa:	10 c0       	rjmp	.+32     	; 0x58cc <vfprintf+0x33e>
    58ac:	a0 fe       	sbrs	r10, 0
    58ae:	06 c0       	rjmp	.+12     	; 0x58bc <vfprintf+0x32e>
    58b0:	b2 14       	cp	r11, r2
    58b2:	80 f4       	brcc	.+32     	; 0x58d4 <vfprintf+0x346>
    58b4:	28 0c       	add	r2, r8
    58b6:	92 2c       	mov	r9, r2
    58b8:	9b 18       	sub	r9, r11
    58ba:	0d c0       	rjmp	.+26     	; 0x58d6 <vfprintf+0x348>
    58bc:	b2 14       	cp	r11, r2
    58be:	58 f4       	brcc	.+22     	; 0x58d6 <vfprintf+0x348>
    58c0:	b6 01       	movw	r22, r12
    58c2:	80 e2       	ldi	r24, 0x20	; 32
    58c4:	90 e0       	ldi	r25, 0x00	; 0
    58c6:	76 d0       	rcall	.+236    	; 0x59b4 <fputc>
    58c8:	b3 94       	inc	r11
    58ca:	f8 cf       	rjmp	.-16     	; 0x58bc <vfprintf+0x32e>
    58cc:	b2 14       	cp	r11, r2
    58ce:	18 f4       	brcc	.+6      	; 0x58d6 <vfprintf+0x348>
    58d0:	2b 18       	sub	r2, r11
    58d2:	02 c0       	rjmp	.+4      	; 0x58d8 <vfprintf+0x34a>
    58d4:	98 2c       	mov	r9, r8
    58d6:	21 2c       	mov	r2, r1
    58d8:	a4 fe       	sbrs	r10, 4
    58da:	0f c0       	rjmp	.+30     	; 0x58fa <vfprintf+0x36c>
    58dc:	b6 01       	movw	r22, r12
    58de:	80 e3       	ldi	r24, 0x30	; 48
    58e0:	90 e0       	ldi	r25, 0x00	; 0
    58e2:	68 d0       	rcall	.+208    	; 0x59b4 <fputc>
    58e4:	a2 fe       	sbrs	r10, 2
    58e6:	16 c0       	rjmp	.+44     	; 0x5914 <vfprintf+0x386>
    58e8:	a1 fc       	sbrc	r10, 1
    58ea:	03 c0       	rjmp	.+6      	; 0x58f2 <vfprintf+0x364>
    58ec:	88 e7       	ldi	r24, 0x78	; 120
    58ee:	90 e0       	ldi	r25, 0x00	; 0
    58f0:	02 c0       	rjmp	.+4      	; 0x58f6 <vfprintf+0x368>
    58f2:	88 e5       	ldi	r24, 0x58	; 88
    58f4:	90 e0       	ldi	r25, 0x00	; 0
    58f6:	b6 01       	movw	r22, r12
    58f8:	0c c0       	rjmp	.+24     	; 0x5912 <vfprintf+0x384>
    58fa:	8a 2d       	mov	r24, r10
    58fc:	86 78       	andi	r24, 0x86	; 134
    58fe:	51 f0       	breq	.+20     	; 0x5914 <vfprintf+0x386>
    5900:	a1 fe       	sbrs	r10, 1
    5902:	02 c0       	rjmp	.+4      	; 0x5908 <vfprintf+0x37a>
    5904:	8b e2       	ldi	r24, 0x2B	; 43
    5906:	01 c0       	rjmp	.+2      	; 0x590a <vfprintf+0x37c>
    5908:	80 e2       	ldi	r24, 0x20	; 32
    590a:	a7 fc       	sbrc	r10, 7
    590c:	8d e2       	ldi	r24, 0x2D	; 45
    590e:	b6 01       	movw	r22, r12
    5910:	90 e0       	ldi	r25, 0x00	; 0
    5912:	50 d0       	rcall	.+160    	; 0x59b4 <fputc>
    5914:	89 14       	cp	r8, r9
    5916:	30 f4       	brcc	.+12     	; 0x5924 <vfprintf+0x396>
    5918:	b6 01       	movw	r22, r12
    591a:	80 e3       	ldi	r24, 0x30	; 48
    591c:	90 e0       	ldi	r25, 0x00	; 0
    591e:	4a d0       	rcall	.+148    	; 0x59b4 <fputc>
    5920:	9a 94       	dec	r9
    5922:	f8 cf       	rjmp	.-16     	; 0x5914 <vfprintf+0x386>
    5924:	8a 94       	dec	r8
    5926:	f3 01       	movw	r30, r6
    5928:	e8 0d       	add	r30, r8
    592a:	f1 1d       	adc	r31, r1
    592c:	80 81       	ld	r24, Z
    592e:	b6 01       	movw	r22, r12
    5930:	90 e0       	ldi	r25, 0x00	; 0
    5932:	40 d0       	rcall	.+128    	; 0x59b4 <fputc>
    5934:	81 10       	cpse	r8, r1
    5936:	f6 cf       	rjmp	.-20     	; 0x5924 <vfprintf+0x396>
    5938:	22 20       	and	r2, r2
    593a:	09 f4       	brne	.+2      	; 0x593e <vfprintf+0x3b0>
    593c:	4e ce       	rjmp	.-868    	; 0x55da <vfprintf+0x4c>
    593e:	b6 01       	movw	r22, r12
    5940:	80 e2       	ldi	r24, 0x20	; 32
    5942:	90 e0       	ldi	r25, 0x00	; 0
    5944:	37 d0       	rcall	.+110    	; 0x59b4 <fputc>
    5946:	2a 94       	dec	r2
    5948:	f7 cf       	rjmp	.-18     	; 0x5938 <vfprintf+0x3aa>
    594a:	f6 01       	movw	r30, r12
    594c:	86 81       	ldd	r24, Z+6	; 0x06
    594e:	97 81       	ldd	r25, Z+7	; 0x07
    5950:	02 c0       	rjmp	.+4      	; 0x5956 <vfprintf+0x3c8>
    5952:	8f ef       	ldi	r24, 0xFF	; 255
    5954:	9f ef       	ldi	r25, 0xFF	; 255
    5956:	2b 96       	adiw	r28, 0x0b	; 11
    5958:	0f b6       	in	r0, 0x3f	; 63
    595a:	f8 94       	cli
    595c:	de bf       	out	0x3e, r29	; 62
    595e:	0f be       	out	0x3f, r0	; 63
    5960:	cd bf       	out	0x3d, r28	; 61
    5962:	df 91       	pop	r29
    5964:	cf 91       	pop	r28
    5966:	1f 91       	pop	r17
    5968:	0f 91       	pop	r16
    596a:	ff 90       	pop	r15
    596c:	ef 90       	pop	r14
    596e:	df 90       	pop	r13
    5970:	cf 90       	pop	r12
    5972:	bf 90       	pop	r11
    5974:	af 90       	pop	r10
    5976:	9f 90       	pop	r9
    5978:	8f 90       	pop	r8
    597a:	7f 90       	pop	r7
    597c:	6f 90       	pop	r6
    597e:	5f 90       	pop	r5
    5980:	4f 90       	pop	r4
    5982:	3f 90       	pop	r3
    5984:	2f 90       	pop	r2
    5986:	08 95       	ret

00005988 <strnlen_P>:
    5988:	fc 01       	movw	r30, r24
    598a:	05 90       	lpm	r0, Z+
    598c:	61 50       	subi	r22, 0x01	; 1
    598e:	70 40       	sbci	r23, 0x00	; 0
    5990:	01 10       	cpse	r0, r1
    5992:	d8 f7       	brcc	.-10     	; 0x598a <strnlen_P+0x2>
    5994:	80 95       	com	r24
    5996:	90 95       	com	r25
    5998:	8e 0f       	add	r24, r30
    599a:	9f 1f       	adc	r25, r31
    599c:	08 95       	ret

0000599e <strnlen>:
    599e:	fc 01       	movw	r30, r24
    59a0:	61 50       	subi	r22, 0x01	; 1
    59a2:	70 40       	sbci	r23, 0x00	; 0
    59a4:	01 90       	ld	r0, Z+
    59a6:	01 10       	cpse	r0, r1
    59a8:	d8 f7       	brcc	.-10     	; 0x59a0 <strnlen+0x2>
    59aa:	80 95       	com	r24
    59ac:	90 95       	com	r25
    59ae:	8e 0f       	add	r24, r30
    59b0:	9f 1f       	adc	r25, r31
    59b2:	08 95       	ret

000059b4 <fputc>:
    59b4:	0f 93       	push	r16
    59b6:	1f 93       	push	r17
    59b8:	cf 93       	push	r28
    59ba:	df 93       	push	r29
    59bc:	fb 01       	movw	r30, r22
    59be:	23 81       	ldd	r18, Z+3	; 0x03
    59c0:	21 fd       	sbrc	r18, 1
    59c2:	03 c0       	rjmp	.+6      	; 0x59ca <fputc+0x16>
    59c4:	8f ef       	ldi	r24, 0xFF	; 255
    59c6:	9f ef       	ldi	r25, 0xFF	; 255
    59c8:	2c c0       	rjmp	.+88     	; 0x5a22 <fputc+0x6e>
    59ca:	22 ff       	sbrs	r18, 2
    59cc:	16 c0       	rjmp	.+44     	; 0x59fa <fputc+0x46>
    59ce:	46 81       	ldd	r20, Z+6	; 0x06
    59d0:	57 81       	ldd	r21, Z+7	; 0x07
    59d2:	24 81       	ldd	r18, Z+4	; 0x04
    59d4:	35 81       	ldd	r19, Z+5	; 0x05
    59d6:	42 17       	cp	r20, r18
    59d8:	53 07       	cpc	r21, r19
    59da:	44 f4       	brge	.+16     	; 0x59ec <fputc+0x38>
    59dc:	a0 81       	ld	r26, Z
    59de:	b1 81       	ldd	r27, Z+1	; 0x01
    59e0:	9d 01       	movw	r18, r26
    59e2:	2f 5f       	subi	r18, 0xFF	; 255
    59e4:	3f 4f       	sbci	r19, 0xFF	; 255
    59e6:	31 83       	std	Z+1, r19	; 0x01
    59e8:	20 83       	st	Z, r18
    59ea:	8c 93       	st	X, r24
    59ec:	26 81       	ldd	r18, Z+6	; 0x06
    59ee:	37 81       	ldd	r19, Z+7	; 0x07
    59f0:	2f 5f       	subi	r18, 0xFF	; 255
    59f2:	3f 4f       	sbci	r19, 0xFF	; 255
    59f4:	37 83       	std	Z+7, r19	; 0x07
    59f6:	26 83       	std	Z+6, r18	; 0x06
    59f8:	14 c0       	rjmp	.+40     	; 0x5a22 <fputc+0x6e>
    59fa:	8b 01       	movw	r16, r22
    59fc:	ec 01       	movw	r28, r24
    59fe:	fb 01       	movw	r30, r22
    5a00:	00 84       	ldd	r0, Z+8	; 0x08
    5a02:	f1 85       	ldd	r31, Z+9	; 0x09
    5a04:	e0 2d       	mov	r30, r0
    5a06:	19 95       	eicall
    5a08:	89 2b       	or	r24, r25
    5a0a:	e1 f6       	brne	.-72     	; 0x59c4 <fputc+0x10>
    5a0c:	d8 01       	movw	r26, r16
    5a0e:	16 96       	adiw	r26, 0x06	; 6
    5a10:	8d 91       	ld	r24, X+
    5a12:	9c 91       	ld	r25, X
    5a14:	17 97       	sbiw	r26, 0x07	; 7
    5a16:	01 96       	adiw	r24, 0x01	; 1
    5a18:	17 96       	adiw	r26, 0x07	; 7
    5a1a:	9c 93       	st	X, r25
    5a1c:	8e 93       	st	-X, r24
    5a1e:	16 97       	sbiw	r26, 0x06	; 6
    5a20:	ce 01       	movw	r24, r28
    5a22:	df 91       	pop	r29
    5a24:	cf 91       	pop	r28
    5a26:	1f 91       	pop	r17
    5a28:	0f 91       	pop	r16
    5a2a:	08 95       	ret

00005a2c <__ultoa_invert>:
    5a2c:	fa 01       	movw	r30, r20
    5a2e:	aa 27       	eor	r26, r26
    5a30:	28 30       	cpi	r18, 0x08	; 8
    5a32:	51 f1       	breq	.+84     	; 0x5a88 <__ultoa_invert+0x5c>
    5a34:	20 31       	cpi	r18, 0x10	; 16
    5a36:	81 f1       	breq	.+96     	; 0x5a98 <__ultoa_invert+0x6c>
    5a38:	e8 94       	clt
    5a3a:	6f 93       	push	r22
    5a3c:	6e 7f       	andi	r22, 0xFE	; 254
    5a3e:	6e 5f       	subi	r22, 0xFE	; 254
    5a40:	7f 4f       	sbci	r23, 0xFF	; 255
    5a42:	8f 4f       	sbci	r24, 0xFF	; 255
    5a44:	9f 4f       	sbci	r25, 0xFF	; 255
    5a46:	af 4f       	sbci	r26, 0xFF	; 255
    5a48:	b1 e0       	ldi	r27, 0x01	; 1
    5a4a:	3e d0       	rcall	.+124    	; 0x5ac8 <__ultoa_invert+0x9c>
    5a4c:	b4 e0       	ldi	r27, 0x04	; 4
    5a4e:	3c d0       	rcall	.+120    	; 0x5ac8 <__ultoa_invert+0x9c>
    5a50:	67 0f       	add	r22, r23
    5a52:	78 1f       	adc	r23, r24
    5a54:	89 1f       	adc	r24, r25
    5a56:	9a 1f       	adc	r25, r26
    5a58:	a1 1d       	adc	r26, r1
    5a5a:	68 0f       	add	r22, r24
    5a5c:	79 1f       	adc	r23, r25
    5a5e:	8a 1f       	adc	r24, r26
    5a60:	91 1d       	adc	r25, r1
    5a62:	a1 1d       	adc	r26, r1
    5a64:	6a 0f       	add	r22, r26
    5a66:	71 1d       	adc	r23, r1
    5a68:	81 1d       	adc	r24, r1
    5a6a:	91 1d       	adc	r25, r1
    5a6c:	a1 1d       	adc	r26, r1
    5a6e:	20 d0       	rcall	.+64     	; 0x5ab0 <__ultoa_invert+0x84>
    5a70:	09 f4       	brne	.+2      	; 0x5a74 <__ultoa_invert+0x48>
    5a72:	68 94       	set
    5a74:	3f 91       	pop	r19
    5a76:	2a e0       	ldi	r18, 0x0A	; 10
    5a78:	26 9f       	mul	r18, r22
    5a7a:	11 24       	eor	r1, r1
    5a7c:	30 19       	sub	r19, r0
    5a7e:	30 5d       	subi	r19, 0xD0	; 208
    5a80:	31 93       	st	Z+, r19
    5a82:	de f6       	brtc	.-74     	; 0x5a3a <__ultoa_invert+0xe>
    5a84:	cf 01       	movw	r24, r30
    5a86:	08 95       	ret
    5a88:	46 2f       	mov	r20, r22
    5a8a:	47 70       	andi	r20, 0x07	; 7
    5a8c:	40 5d       	subi	r20, 0xD0	; 208
    5a8e:	41 93       	st	Z+, r20
    5a90:	b3 e0       	ldi	r27, 0x03	; 3
    5a92:	0f d0       	rcall	.+30     	; 0x5ab2 <__ultoa_invert+0x86>
    5a94:	c9 f7       	brne	.-14     	; 0x5a88 <__ultoa_invert+0x5c>
    5a96:	f6 cf       	rjmp	.-20     	; 0x5a84 <__ultoa_invert+0x58>
    5a98:	46 2f       	mov	r20, r22
    5a9a:	4f 70       	andi	r20, 0x0F	; 15
    5a9c:	40 5d       	subi	r20, 0xD0	; 208
    5a9e:	4a 33       	cpi	r20, 0x3A	; 58
    5aa0:	18 f0       	brcs	.+6      	; 0x5aa8 <__ultoa_invert+0x7c>
    5aa2:	49 5d       	subi	r20, 0xD9	; 217
    5aa4:	31 fd       	sbrc	r19, 1
    5aa6:	40 52       	subi	r20, 0x20	; 32
    5aa8:	41 93       	st	Z+, r20
    5aaa:	02 d0       	rcall	.+4      	; 0x5ab0 <__ultoa_invert+0x84>
    5aac:	a9 f7       	brne	.-22     	; 0x5a98 <__ultoa_invert+0x6c>
    5aae:	ea cf       	rjmp	.-44     	; 0x5a84 <__ultoa_invert+0x58>
    5ab0:	b4 e0       	ldi	r27, 0x04	; 4
    5ab2:	a6 95       	lsr	r26
    5ab4:	97 95       	ror	r25
    5ab6:	87 95       	ror	r24
    5ab8:	77 95       	ror	r23
    5aba:	67 95       	ror	r22
    5abc:	ba 95       	dec	r27
    5abe:	c9 f7       	brne	.-14     	; 0x5ab2 <__ultoa_invert+0x86>
    5ac0:	00 97       	sbiw	r24, 0x00	; 0
    5ac2:	61 05       	cpc	r22, r1
    5ac4:	71 05       	cpc	r23, r1
    5ac6:	08 95       	ret
    5ac8:	9b 01       	movw	r18, r22
    5aca:	ac 01       	movw	r20, r24
    5acc:	0a 2e       	mov	r0, r26
    5ace:	06 94       	lsr	r0
    5ad0:	57 95       	ror	r21
    5ad2:	47 95       	ror	r20
    5ad4:	37 95       	ror	r19
    5ad6:	27 95       	ror	r18
    5ad8:	ba 95       	dec	r27
    5ada:	c9 f7       	brne	.-14     	; 0x5ace <__ultoa_invert+0xa2>
    5adc:	62 0f       	add	r22, r18
    5ade:	73 1f       	adc	r23, r19
    5ae0:	84 1f       	adc	r24, r20
    5ae2:	95 1f       	adc	r25, r21
    5ae4:	a0 1d       	adc	r26, r0
    5ae6:	08 95       	ret

00005ae8 <_exit>:
    5ae8:	f8 94       	cli

00005aea <__stop_program>:
    5aea:	ff cf       	rjmp	.-2      	; 0x5aea <__stop_program>
