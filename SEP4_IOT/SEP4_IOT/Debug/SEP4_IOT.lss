
SEP4_IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000594  00800200  00005de4  00005e78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005de4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001004  00800794  00800794  0000640c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000640c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006468  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ab0  00000000  00000000  000064a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cefe  00000000  00000000  00006f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003362  00000000  00000000  00013e56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000679e  00000000  00000000  000171b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000025fc  00000000  00000000  0001d958  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000045cf  00000000  00000000  0001ff54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bbf0  00000000  00000000  00024523  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a08  00000000  00000000  00030113  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	dc c3       	rjmp	.+1976   	; 0x7ea <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 c1 20 	jmp	0x4182	; 0x4182 <__vector_25>
      68:	0c 94 13 21 	jmp	0x4226	; 0x4226 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 57 21 	jmp	0x42ae	; 0x42ae <__vector_36>
      94:	0c 94 a9 21 	jmp	0x4352	; 0x4352 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 34 27 	jmp	0x4e68	; 0x4e68 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__vector_51>
      d0:	0c 94 3f 22 	jmp	0x447e	; 0x447e <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 83 22 	jmp	0x4506	; 0x4506 <__vector_54>
      dc:	0c 94 d5 22 	jmp	0x45aa	; 0x45aa <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d5 16       	cp	r13, r21
      e6:	d5 16       	cp	r13, r21
      e8:	d5 16       	cp	r13, r21
      ea:	0c 17       	cp	r16, r28
      ec:	14 17       	cp	r17, r20
      ee:	29 17       	cp	r18, r25
      f0:	d5 16       	cp	r13, r21
      f2:	d5 16       	cp	r13, r21
      f4:	0c 17       	cp	r16, r28
      f6:	14 17       	cp	r17, r20
      f8:	56 27       	eor	r21, r22
      fa:	c6 27       	eor	r28, r22
      fc:	c6 27       	eor	r28, r22
      fe:	c6 27       	eor	r28, r22
     100:	c6 27       	eor	r28, r22
     102:	c6 27       	eor	r28, r22
     104:	c6 27       	eor	r28, r22
     106:	c6 27       	eor	r28, r22
     108:	56 27       	eor	r21, r22
     10a:	c6 27       	eor	r28, r22
     10c:	c6 27       	eor	r28, r22
     10e:	c6 27       	eor	r28, r22
     110:	c6 27       	eor	r28, r22
     112:	c6 27       	eor	r28, r22
     114:	c6 27       	eor	r28, r22
     116:	c6 27       	eor	r28, r22
     118:	58 27       	eor	r21, r24
     11a:	c6 27       	eor	r28, r22
     11c:	c6 27       	eor	r28, r22
     11e:	c6 27       	eor	r28, r22
     120:	c6 27       	eor	r28, r22
     122:	c6 27       	eor	r28, r22
     124:	c6 27       	eor	r28, r22
     126:	c6 27       	eor	r28, r22
     128:	c6 27       	eor	r28, r22
     12a:	c6 27       	eor	r28, r22
     12c:	c6 27       	eor	r28, r22
     12e:	c6 27       	eor	r28, r22
     130:	c6 27       	eor	r28, r22
     132:	c6 27       	eor	r28, r22
     134:	c6 27       	eor	r28, r22
     136:	c6 27       	eor	r28, r22
     138:	58 27       	eor	r21, r24
     13a:	c6 27       	eor	r28, r22
     13c:	c6 27       	eor	r28, r22
     13e:	c6 27       	eor	r28, r22
     140:	c6 27       	eor	r28, r22
     142:	c6 27       	eor	r28, r22
     144:	c6 27       	eor	r28, r22
     146:	c6 27       	eor	r28, r22
     148:	c6 27       	eor	r28, r22
     14a:	c6 27       	eor	r28, r22
     14c:	c6 27       	eor	r28, r22
     14e:	c6 27       	eor	r28, r22
     150:	c6 27       	eor	r28, r22
     152:	c6 27       	eor	r28, r22
     154:	c6 27       	eor	r28, r22
     156:	c6 27       	eor	r28, r22
     158:	c2 27       	eor	r28, r18
     15a:	c6 27       	eor	r28, r22
     15c:	c6 27       	eor	r28, r22
     15e:	c6 27       	eor	r28, r22
     160:	c6 27       	eor	r28, r22
     162:	c6 27       	eor	r28, r22
     164:	c6 27       	eor	r28, r22
     166:	c6 27       	eor	r28, r22
     168:	8d 27       	eor	r24, r29
     16a:	c6 27       	eor	r28, r22
     16c:	c6 27       	eor	r28, r22
     16e:	c6 27       	eor	r28, r22
     170:	c6 27       	eor	r28, r22
     172:	c6 27       	eor	r28, r22
     174:	c6 27       	eor	r28, r22
     176:	c6 27       	eor	r28, r22
     178:	c6 27       	eor	r28, r22
     17a:	c6 27       	eor	r28, r22
     17c:	c6 27       	eor	r28, r22
     17e:	c6 27       	eor	r28, r22
     180:	c6 27       	eor	r28, r22
     182:	c6 27       	eor	r28, r22
     184:	c6 27       	eor	r28, r22
     186:	c6 27       	eor	r28, r22
     188:	81 27       	eor	r24, r17
     18a:	c6 27       	eor	r28, r22
     18c:	c6 27       	eor	r28, r22
     18e:	c6 27       	eor	r28, r22
     190:	c6 27       	eor	r28, r22
     192:	c6 27       	eor	r28, r22
     194:	c6 27       	eor	r28, r22
     196:	c6 27       	eor	r28, r22
     198:	a5 27       	eor	r26, r21

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 25 0b 	call	0x164a	; 0x164a <prvCheckTasksWaitingTermination>
     19e:	80 91 a1 15 	lds	r24, 0x15A1	; 0x8015a1 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	5b d2       	rcall	.+1206   	; 0x65e <vPortYield>
     1a8:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 52 14 	call	0x28a4	; 0x28a4 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <prvProcessTimerOrBlockTask>
     1c6:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	17 e0       	ldi	r17, 0x07	; 7
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e4 ee       	ldi	r30, 0xE4	; 228
     1e4:	fd e5       	ldi	r31, 0x5D	; 93
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a4 39       	cpi	r26, 0x94	; 148
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	27 e1       	ldi	r18, 0x17	; 23
     1f8:	a4 e9       	ldi	r26, 0x94	; 148
     1fa:	b7 e0       	ldi	r27, 0x07	; 7
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a8 39       	cpi	r26, 0x98	; 152
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 8a 19 	call	0x3314	; 0x3314 <main>
     20a:	0c 94 f0 2e 	jmp	0x5de0	; 0x5de0 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     210:	e0 ea       	ldi	r30, 0xA0	; 160
     212:	f7 e0       	ldi	r31, 0x07	; 7
     214:	a4 ea       	ldi	r26, 0xA4	; 164
     216:	b7 e0       	ldi	r27, 0x07	; 7
     218:	b1 83       	std	Z+1, r27	; 0x01
     21a:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     21c:	13 82       	std	Z+3, r1	; 0x03
     21e:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     220:	ec e4       	ldi	r30, 0x4C	; 76
     222:	f5 e1       	ldi	r31, 0x15	; 21
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     224:	f0 93 9f 07 	sts	0x079F, r31	; 0x80079f <pxEnd+0x1>
     228:	e0 93 9e 07 	sts	0x079E, r30	; 0x80079e <pxEnd>
    pxEnd->xBlockSize = 0;
     22c:	13 82       	std	Z+3, r1	; 0x03
     22e:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     230:	11 82       	std	Z+1, r1	; 0x01
     232:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     234:	88 ea       	ldi	r24, 0xA8	; 168
     236:	9d e0       	ldi	r25, 0x0D	; 13
     238:	13 96       	adiw	r26, 0x03	; 3
     23a:	9c 93       	st	X, r25
     23c:	8e 93       	st	-X, r24
     23e:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     240:	ed 93       	st	X+, r30
     242:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     244:	90 93 9b 07 	sts	0x079B, r25	; 0x80079b <xMinimumEverFreeBytesRemaining+0x1>
     248:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     24c:	90 93 9d 07 	sts	0x079D, r25	; 0x80079d <xFreeBytesRemaining+0x1>
     250:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	90 e8       	ldi	r25, 0x80	; 128
     258:	90 93 95 07 	sts	0x0795, r25	; 0x800795 <__data_end+0x1>
     25c:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <__data_end>
     260:	08 95       	ret

00000262 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     268:	a0 ea       	ldi	r26, 0xA0	; 160
     26a:	b7 e0       	ldi	r27, 0x07	; 7
     26c:	01 c0       	rjmp	.+2      	; 0x270 <prvInsertBlockIntoFreeList+0xe>
     26e:	df 01       	movw	r26, r30
     270:	ed 91       	ld	r30, X+
     272:	fc 91       	ld	r31, X
     274:	11 97       	sbiw	r26, 0x01	; 1
     276:	ec 17       	cp	r30, r28
     278:	fd 07       	cpc	r31, r29
     27a:	c8 f3       	brcs	.-14     	; 0x26e <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     27c:	12 96       	adiw	r26, 0x02	; 2
     27e:	8d 91       	ld	r24, X+
     280:	9c 91       	ld	r25, X
     282:	13 97       	sbiw	r26, 0x03	; 3
     284:	9d 01       	movw	r18, r26
     286:	28 0f       	add	r18, r24
     288:	39 1f       	adc	r19, r25
     28a:	c2 17       	cp	r28, r18
     28c:	d3 07       	cpc	r29, r19
     28e:	49 f4       	brne	.+18     	; 0x2a2 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     290:	2a 81       	ldd	r18, Y+2	; 0x02
     292:	3b 81       	ldd	r19, Y+3	; 0x03
     294:	82 0f       	add	r24, r18
     296:	93 1f       	adc	r25, r19
     298:	13 96       	adiw	r26, 0x03	; 3
     29a:	9c 93       	st	X, r25
     29c:	8e 93       	st	-X, r24
     29e:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     2a0:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     2a2:	8a 81       	ldd	r24, Y+2	; 0x02
     2a4:	9b 81       	ldd	r25, Y+3	; 0x03
     2a6:	9e 01       	movw	r18, r28
     2a8:	28 0f       	add	r18, r24
     2aa:	39 1f       	adc	r19, r25
     2ac:	e2 17       	cp	r30, r18
     2ae:	f3 07       	cpc	r31, r19
     2b0:	c1 f4       	brne	.+48     	; 0x2e2 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     2b2:	20 91 9e 07 	lds	r18, 0x079E	; 0x80079e <pxEnd>
     2b6:	30 91 9f 07 	lds	r19, 0x079F	; 0x80079f <pxEnd+0x1>
     2ba:	e2 17       	cp	r30, r18
     2bc:	f3 07       	cpc	r31, r19
     2be:	71 f0       	breq	.+28     	; 0x2dc <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     2c0:	22 81       	ldd	r18, Z+2	; 0x02
     2c2:	33 81       	ldd	r19, Z+3	; 0x03
     2c4:	82 0f       	add	r24, r18
     2c6:	93 1f       	adc	r25, r19
     2c8:	9b 83       	std	Y+3, r25	; 0x03
     2ca:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     2cc:	ed 91       	ld	r30, X+
     2ce:	fc 91       	ld	r31, X
     2d0:	11 97       	sbiw	r26, 0x01	; 1
     2d2:	80 81       	ld	r24, Z
     2d4:	91 81       	ldd	r25, Z+1	; 0x01
     2d6:	99 83       	std	Y+1, r25	; 0x01
     2d8:	88 83       	st	Y, r24
     2da:	05 c0       	rjmp	.+10     	; 0x2e6 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     2dc:	39 83       	std	Y+1, r19	; 0x01
     2de:	28 83       	st	Y, r18
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     2e2:	f9 83       	std	Y+1, r31	; 0x01
     2e4:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     2e6:	ca 17       	cp	r28, r26
     2e8:	db 07       	cpc	r29, r27
     2ea:	11 f0       	breq	.+4      	; 0x2f0 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     2ec:	cd 93       	st	X+, r28
     2ee:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     2f6:	ef 92       	push	r14
     2f8:	ff 92       	push	r15
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     304:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     308:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <pxEnd>
     30c:	90 91 9f 07 	lds	r25, 0x079F	; 0x80079f <pxEnd+0x1>
     310:	89 2b       	or	r24, r25
     312:	09 f4       	brne	.+2      	; 0x316 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     314:	7d df       	rcall	.-262    	; 0x210 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     316:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <__data_end>
     31a:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <__data_end+0x1>
     31e:	80 23       	and	r24, r16
     320:	91 23       	and	r25, r17
     322:	89 2b       	or	r24, r25
     324:	09 f0       	breq	.+2      	; 0x328 <pvPortMalloc+0x32>
     326:	76 c0       	rjmp	.+236    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     328:	01 15       	cp	r16, r1
     32a:	11 05       	cpc	r17, r1
     32c:	49 f0       	breq	.+18     	; 0x340 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     32e:	c8 01       	movw	r24, r16
     330:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     332:	08 17       	cp	r16, r24
     334:	19 07       	cpc	r17, r25
     336:	18 f0       	brcs	.+6      	; 0x33e <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     338:	00 e0       	ldi	r16, 0x00	; 0
     33a:	10 e0       	ldi	r17, 0x00	; 0
     33c:	01 c0       	rjmp	.+2      	; 0x340 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     33e:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     340:	01 15       	cp	r16, r1
     342:	11 05       	cpc	r17, r1
     344:	09 f4       	brne	.+2      	; 0x348 <pvPortMalloc+0x52>
     346:	69 c0       	rjmp	.+210    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     348:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <xFreeBytesRemaining>
     34c:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <xFreeBytesRemaining+0x1>
     350:	80 17       	cp	r24, r16
     352:	91 07       	cpc	r25, r17
     354:	08 f4       	brcc	.+2      	; 0x358 <pvPortMalloc+0x62>
     356:	64 c0       	rjmp	.+200    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     358:	c0 91 a0 07 	lds	r28, 0x07A0	; 0x8007a0 <xStart>
     35c:	d0 91 a1 07 	lds	r29, 0x07A1	; 0x8007a1 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     360:	e0 ea       	ldi	r30, 0xA0	; 160
     362:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     364:	02 c0       	rjmp	.+4      	; 0x36a <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     366:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     368:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     36a:	8a 81       	ldd	r24, Y+2	; 0x02
     36c:	9b 81       	ldd	r25, Y+3	; 0x03
     36e:	80 17       	cp	r24, r16
     370:	91 07       	cpc	r25, r17
     372:	20 f4       	brcc	.+8      	; 0x37c <pvPortMalloc+0x86>
     374:	88 81       	ld	r24, Y
     376:	99 81       	ldd	r25, Y+1	; 0x01
     378:	00 97       	sbiw	r24, 0x00	; 0
     37a:	a9 f7       	brne	.-22     	; 0x366 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     37c:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <pxEnd>
     380:	90 91 9f 07 	lds	r25, 0x079F	; 0x80079f <pxEnd+0x1>
     384:	c8 17       	cp	r28, r24
     386:	d9 07       	cpc	r29, r25
     388:	09 f4       	brne	.+2      	; 0x38c <pvPortMalloc+0x96>
     38a:	4d c0       	rjmp	.+154    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     38c:	e0 80       	ld	r14, Z
     38e:	f1 80       	ldd	r15, Z+1	; 0x01
     390:	84 e0       	ldi	r24, 0x04	; 4
     392:	e8 0e       	add	r14, r24
     394:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     396:	88 81       	ld	r24, Y
     398:	99 81       	ldd	r25, Y+1	; 0x01
     39a:	91 83       	std	Z+1, r25	; 0x01
     39c:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     39e:	2a 81       	ldd	r18, Y+2	; 0x02
     3a0:	3b 81       	ldd	r19, Y+3	; 0x03
     3a2:	20 1b       	sub	r18, r16
     3a4:	31 0b       	sbc	r19, r17
     3a6:	29 30       	cpi	r18, 0x09	; 9
     3a8:	31 05       	cpc	r19, r1
     3aa:	48 f0       	brcs	.+18     	; 0x3be <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     3ac:	ce 01       	movw	r24, r28
     3ae:	80 0f       	add	r24, r16
     3b0:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     3b2:	fc 01       	movw	r30, r24
     3b4:	33 83       	std	Z+3, r19	; 0x03
     3b6:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     3b8:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     3ba:	0a 83       	std	Y+2, r16	; 0x02
     3bc:	52 df       	rcall	.-348    	; 0x262 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     3be:	2a 81       	ldd	r18, Y+2	; 0x02
     3c0:	3b 81       	ldd	r19, Y+3	; 0x03
     3c2:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <xFreeBytesRemaining>
     3c6:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <xFreeBytesRemaining+0x1>
     3ca:	82 1b       	sub	r24, r18
     3cc:	93 0b       	sbc	r25, r19
     3ce:	90 93 9d 07 	sts	0x079D, r25	; 0x80079d <xFreeBytesRemaining+0x1>
     3d2:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     3d6:	40 91 9a 07 	lds	r20, 0x079A	; 0x80079a <xMinimumEverFreeBytesRemaining>
     3da:	50 91 9b 07 	lds	r21, 0x079B	; 0x80079b <xMinimumEverFreeBytesRemaining+0x1>
     3de:	84 17       	cp	r24, r20
     3e0:	95 07       	cpc	r25, r21
     3e2:	20 f4       	brcc	.+8      	; 0x3ec <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     3e4:	90 93 9b 07 	sts	0x079B, r25	; 0x80079b <xMinimumEverFreeBytesRemaining+0x1>
     3e8:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     3ec:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <__data_end>
     3f0:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <__data_end+0x1>
     3f4:	28 2b       	or	r18, r24
     3f6:	39 2b       	or	r19, r25
     3f8:	3b 83       	std	Y+3, r19	; 0x03
     3fa:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     3fc:	19 82       	std	Y+1, r1	; 0x01
     3fe:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     400:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <xNumberOfSuccessfulAllocations>
     404:	90 91 99 07 	lds	r25, 0x0799	; 0x800799 <xNumberOfSuccessfulAllocations+0x1>
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	90 93 99 07 	sts	0x0799, r25	; 0x800799 <xNumberOfSuccessfulAllocations+0x1>
     40e:	80 93 98 07 	sts	0x0798, r24	; 0x800798 <xNumberOfSuccessfulAllocations>
     412:	0b c0       	rjmp	.+22     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     414:	e1 2c       	mov	r14, r1
     416:	f1 2c       	mov	r15, r1
     418:	08 c0       	rjmp	.+16     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     41a:	e1 2c       	mov	r14, r1
     41c:	f1 2c       	mov	r15, r1
     41e:	05 c0       	rjmp	.+10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     420:	e1 2c       	mov	r14, r1
     422:	f1 2c       	mov	r15, r1
     424:	02 c0       	rjmp	.+4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     426:	e1 2c       	mov	r14, r1
     428:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     42a:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     42e:	e1 14       	cp	r14, r1
     430:	f1 04       	cpc	r15, r1
     432:	11 f4       	brne	.+4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     434:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     438:	c7 01       	movw	r24, r14
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	ff 90       	pop	r15
     444:	ef 90       	pop	r14
     446:	08 95       	ret

00000448 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     450:	00 97       	sbiw	r24, 0x00	; 0
     452:	91 f1       	breq	.+100    	; 0x4b8 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     454:	ec 01       	movw	r28, r24
     456:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     458:	4a 81       	ldd	r20, Y+2	; 0x02
     45a:	5b 81       	ldd	r21, Y+3	; 0x03
     45c:	20 91 94 07 	lds	r18, 0x0794	; 0x800794 <__data_end>
     460:	30 91 95 07 	lds	r19, 0x0795	; 0x800795 <__data_end+0x1>
     464:	ba 01       	movw	r22, r20
     466:	62 23       	and	r22, r18
     468:	73 23       	and	r23, r19
     46a:	67 2b       	or	r22, r23
     46c:	29 f1       	breq	.+74     	; 0x4b8 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     46e:	68 81       	ld	r22, Y
     470:	79 81       	ldd	r23, Y+1	; 0x01
     472:	67 2b       	or	r22, r23
     474:	09 f5       	brne	.+66     	; 0x4b8 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     476:	20 95       	com	r18
     478:	30 95       	com	r19
     47a:	24 23       	and	r18, r20
     47c:	35 23       	and	r19, r21
     47e:	3b 83       	std	Y+3, r19	; 0x03
     480:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     482:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     486:	8a 81       	ldd	r24, Y+2	; 0x02
     488:	9b 81       	ldd	r25, Y+3	; 0x03
     48a:	20 91 9c 07 	lds	r18, 0x079C	; 0x80079c <xFreeBytesRemaining>
     48e:	30 91 9d 07 	lds	r19, 0x079D	; 0x80079d <xFreeBytesRemaining+0x1>
     492:	82 0f       	add	r24, r18
     494:	93 1f       	adc	r25, r19
     496:	90 93 9d 07 	sts	0x079D, r25	; 0x80079d <xFreeBytesRemaining+0x1>
     49a:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     49e:	ce 01       	movw	r24, r28
     4a0:	e0 de       	rcall	.-576    	; 0x262 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     4a2:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <xNumberOfSuccessfulFrees>
     4a6:	90 91 97 07 	lds	r25, 0x0797	; 0x800797 <xNumberOfSuccessfulFrees+0x1>
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	90 93 97 07 	sts	0x0797, r25	; 0x800797 <xNumberOfSuccessfulFrees+0x1>
     4b0:	80 93 96 07 	sts	0x0796, r24	; 0x800796 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     4b4:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	08 95       	ret

000004c2 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     4c2:	fc 01       	movw	r30, r24
     4c4:	03 96       	adiw	r24, 0x03	; 3
     4c6:	92 83       	std	Z+2, r25	; 0x02
     4c8:	81 83       	std	Z+1, r24	; 0x01
     4ca:	4f ef       	ldi	r20, 0xFF	; 255
     4cc:	5f ef       	ldi	r21, 0xFF	; 255
     4ce:	ba 01       	movw	r22, r20
     4d0:	43 83       	std	Z+3, r20	; 0x03
     4d2:	54 83       	std	Z+4, r21	; 0x04
     4d4:	65 83       	std	Z+5, r22	; 0x05
     4d6:	76 83       	std	Z+6, r23	; 0x06
     4d8:	90 87       	std	Z+8, r25	; 0x08
     4da:	87 83       	std	Z+7, r24	; 0x07
     4dc:	92 87       	std	Z+10, r25	; 0x0a
     4de:	81 87       	std	Z+9, r24	; 0x09
     4e0:	10 82       	st	Z, r1
     4e2:	08 95       	ret

000004e4 <vListInitialiseItem>:
     4e4:	fc 01       	movw	r30, r24
     4e6:	13 86       	std	Z+11, r1	; 0x0b
     4e8:	12 86       	std	Z+10, r1	; 0x0a
     4ea:	08 95       	ret

000004ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     4f6:	08 81       	ld	r16, Y
     4f8:	19 81       	ldd	r17, Y+1	; 0x01
     4fa:	2a 81       	ldd	r18, Y+2	; 0x02
     4fc:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     4fe:	0f 3f       	cpi	r16, 0xFF	; 255
     500:	4f ef       	ldi	r20, 0xFF	; 255
     502:	14 07       	cpc	r17, r20
     504:	24 07       	cpc	r18, r20
     506:	34 07       	cpc	r19, r20
     508:	21 f4       	brne	.+8      	; 0x512 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     50a:	fc 01       	movw	r30, r24
     50c:	a1 85       	ldd	r26, Z+9	; 0x09
     50e:	b2 85       	ldd	r27, Z+10	; 0x0a
     510:	11 c0       	rjmp	.+34     	; 0x534 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     512:	dc 01       	movw	r26, r24
     514:	13 96       	adiw	r26, 0x03	; 3
     516:	01 c0       	rjmp	.+2      	; 0x51a <vListInsert+0x2e>
     518:	df 01       	movw	r26, r30
     51a:	14 96       	adiw	r26, 0x04	; 4
     51c:	ed 91       	ld	r30, X+
     51e:	fc 91       	ld	r31, X
     520:	15 97       	sbiw	r26, 0x05	; 5
     522:	40 81       	ld	r20, Z
     524:	51 81       	ldd	r21, Z+1	; 0x01
     526:	62 81       	ldd	r22, Z+2	; 0x02
     528:	73 81       	ldd	r23, Z+3	; 0x03
     52a:	04 17       	cp	r16, r20
     52c:	15 07       	cpc	r17, r21
     52e:	26 07       	cpc	r18, r22
     530:	37 07       	cpc	r19, r23
     532:	90 f7       	brcc	.-28     	; 0x518 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     534:	14 96       	adiw	r26, 0x04	; 4
     536:	ed 91       	ld	r30, X+
     538:	fc 91       	ld	r31, X
     53a:	15 97       	sbiw	r26, 0x05	; 5
     53c:	fd 83       	std	Y+5, r31	; 0x05
     53e:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     540:	d7 83       	std	Z+7, r29	; 0x07
     542:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     544:	bf 83       	std	Y+7, r27	; 0x07
     546:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     548:	15 96       	adiw	r26, 0x05	; 5
     54a:	dc 93       	st	X, r29
     54c:	ce 93       	st	-X, r28
     54e:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     550:	9b 87       	std	Y+11, r25	; 0x0b
     552:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     554:	fc 01       	movw	r30, r24
     556:	20 81       	ld	r18, Z
     558:	2f 5f       	subi	r18, 0xFF	; 255
     55a:	20 83       	st	Z, r18
}
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	1f 91       	pop	r17
     562:	0f 91       	pop	r16
     564:	08 95       	ret

00000566 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     56c:	a2 85       	ldd	r26, Z+10	; 0x0a
     56e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     570:	c4 81       	ldd	r28, Z+4	; 0x04
     572:	d5 81       	ldd	r29, Z+5	; 0x05
     574:	86 81       	ldd	r24, Z+6	; 0x06
     576:	97 81       	ldd	r25, Z+7	; 0x07
     578:	9f 83       	std	Y+7, r25	; 0x07
     57a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     57c:	c6 81       	ldd	r28, Z+6	; 0x06
     57e:	d7 81       	ldd	r29, Z+7	; 0x07
     580:	84 81       	ldd	r24, Z+4	; 0x04
     582:	95 81       	ldd	r25, Z+5	; 0x05
     584:	9d 83       	std	Y+5, r25	; 0x05
     586:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     588:	11 96       	adiw	r26, 0x01	; 1
     58a:	8d 91       	ld	r24, X+
     58c:	9c 91       	ld	r25, X
     58e:	12 97       	sbiw	r26, 0x02	; 2
     590:	e8 17       	cp	r30, r24
     592:	f9 07       	cpc	r31, r25
     594:	31 f4       	brne	.+12     	; 0x5a2 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     596:	86 81       	ldd	r24, Z+6	; 0x06
     598:	97 81       	ldd	r25, Z+7	; 0x07
     59a:	12 96       	adiw	r26, 0x02	; 2
     59c:	9c 93       	st	X, r25
     59e:	8e 93       	st	-X, r24
     5a0:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     5a2:	13 86       	std	Z+11, r1	; 0x0b
     5a4:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     5a6:	8c 91       	ld	r24, X
     5a8:	81 50       	subi	r24, 0x01	; 1
     5aa:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     5ac:	8c 91       	ld	r24, X
}
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	08 95       	ret

000005b4 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     5b4:	a8 95       	wdr
     5b6:	90 ec       	ldi	r25, 0xC0	; 192
     5b8:	88 e1       	ldi	r24, 0x18	; 24
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	a8 95       	wdr
     5c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     5ca:	08 95       	ret

000005cc <pxPortInitialiseStack>:
     5cc:	fc 01       	movw	r30, r24
     5ce:	60 83       	st	Z, r22
     5d0:	31 97       	sbiw	r30, 0x01	; 1
     5d2:	70 83       	st	Z, r23
     5d4:	31 97       	sbiw	r30, 0x01	; 1
     5d6:	10 82       	st	Z, r1
     5d8:	31 97       	sbiw	r30, 0x01	; 1
     5da:	10 82       	st	Z, r1
     5dc:	31 97       	sbiw	r30, 0x01	; 1
     5de:	20 e8       	ldi	r18, 0x80	; 128
     5e0:	20 83       	st	Z, r18
     5e2:	31 97       	sbiw	r30, 0x01	; 1
     5e4:	10 82       	st	Z, r1
     5e6:	31 97       	sbiw	r30, 0x01	; 1
     5e8:	10 82       	st	Z, r1
     5ea:	31 97       	sbiw	r30, 0x01	; 1
     5ec:	10 82       	st	Z, r1
     5ee:	77 97       	sbiw	r30, 0x17	; 23
     5f0:	40 83       	st	Z, r20
     5f2:	31 97       	sbiw	r30, 0x01	; 1
     5f4:	50 83       	st	Z, r21
     5f6:	86 97       	sbiw	r24, 0x26	; 38
     5f8:	08 95       	ret

000005fa <xPortStartScheduler>:
     5fa:	dc df       	rcall	.-72     	; 0x5b4 <prvSetupTimerInterrupt>
     5fc:	a0 91 0f 16 	lds	r26, 0x160F	; 0x80160f <pxCurrentTCB>
     600:	b0 91 10 16 	lds	r27, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
     604:	cd 91       	ld	r28, X+
     606:	cd bf       	out	0x3d, r28	; 61
     608:	dd 91       	ld	r29, X+
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	ff 91       	pop	r31
     60e:	ef 91       	pop	r30
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	bf 91       	pop	r27
     616:	af 91       	pop	r26
     618:	9f 91       	pop	r25
     61a:	8f 91       	pop	r24
     61c:	7f 91       	pop	r23
     61e:	6f 91       	pop	r22
     620:	5f 91       	pop	r21
     622:	4f 91       	pop	r20
     624:	3f 91       	pop	r19
     626:	2f 91       	pop	r18
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	df 90       	pop	r13
     632:	cf 90       	pop	r12
     634:	bf 90       	pop	r11
     636:	af 90       	pop	r10
     638:	9f 90       	pop	r9
     63a:	8f 90       	pop	r8
     63c:	7f 90       	pop	r7
     63e:	6f 90       	pop	r6
     640:	5f 90       	pop	r5
     642:	4f 90       	pop	r4
     644:	3f 90       	pop	r3
     646:	2f 90       	pop	r2
     648:	1f 90       	pop	r1
     64a:	0f 90       	pop	r0
     64c:	0c be       	out	0x3c, r0	; 60
     64e:	0f 90       	pop	r0
     650:	0b be       	out	0x3b, r0	; 59
     652:	0f 90       	pop	r0
     654:	0f be       	out	0x3f, r0	; 63
     656:	0f 90       	pop	r0
     658:	08 95       	ret
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	08 95       	ret

0000065e <vPortYield>:
     65e:	0f 92       	push	r0
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	f8 94       	cli
     664:	0f 92       	push	r0
     666:	0b b6       	in	r0, 0x3b	; 59
     668:	0f 92       	push	r0
     66a:	0c b6       	in	r0, 0x3c	; 60
     66c:	0f 92       	push	r0
     66e:	1f 92       	push	r1
     670:	11 24       	eor	r1, r1
     672:	2f 92       	push	r2
     674:	3f 92       	push	r3
     676:	4f 92       	push	r4
     678:	5f 92       	push	r5
     67a:	6f 92       	push	r6
     67c:	7f 92       	push	r7
     67e:	8f 92       	push	r8
     680:	9f 92       	push	r9
     682:	af 92       	push	r10
     684:	bf 92       	push	r11
     686:	cf 92       	push	r12
     688:	df 92       	push	r13
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	2f 93       	push	r18
     694:	3f 93       	push	r19
     696:	4f 93       	push	r20
     698:	5f 93       	push	r21
     69a:	6f 93       	push	r22
     69c:	7f 93       	push	r23
     69e:	8f 93       	push	r24
     6a0:	9f 93       	push	r25
     6a2:	af 93       	push	r26
     6a4:	bf 93       	push	r27
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	ef 93       	push	r30
     6ac:	ff 93       	push	r31
     6ae:	a0 91 0f 16 	lds	r26, 0x160F	; 0x80160f <pxCurrentTCB>
     6b2:	b0 91 10 16 	lds	r27, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
     6b6:	0d b6       	in	r0, 0x3d	; 61
     6b8:	0d 92       	st	X+, r0
     6ba:	0e b6       	in	r0, 0x3e	; 62
     6bc:	0d 92       	st	X+, r0
     6be:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <vTaskSwitchContext>
     6c2:	a0 91 0f 16 	lds	r26, 0x160F	; 0x80160f <pxCurrentTCB>
     6c6:	b0 91 10 16 	lds	r27, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
     6ca:	cd 91       	ld	r28, X+
     6cc:	cd bf       	out	0x3d, r28	; 61
     6ce:	dd 91       	ld	r29, X+
     6d0:	de bf       	out	0x3e, r29	; 62
     6d2:	ff 91       	pop	r31
     6d4:	ef 91       	pop	r30
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	bf 91       	pop	r27
     6dc:	af 91       	pop	r26
     6de:	9f 91       	pop	r25
     6e0:	8f 91       	pop	r24
     6e2:	7f 91       	pop	r23
     6e4:	6f 91       	pop	r22
     6e6:	5f 91       	pop	r21
     6e8:	4f 91       	pop	r20
     6ea:	3f 91       	pop	r19
     6ec:	2f 91       	pop	r18
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	ff 90       	pop	r15
     6f4:	ef 90       	pop	r14
     6f6:	df 90       	pop	r13
     6f8:	cf 90       	pop	r12
     6fa:	bf 90       	pop	r11
     6fc:	af 90       	pop	r10
     6fe:	9f 90       	pop	r9
     700:	8f 90       	pop	r8
     702:	7f 90       	pop	r7
     704:	6f 90       	pop	r6
     706:	5f 90       	pop	r5
     708:	4f 90       	pop	r4
     70a:	3f 90       	pop	r3
     70c:	2f 90       	pop	r2
     70e:	1f 90       	pop	r1
     710:	0f 90       	pop	r0
     712:	0c be       	out	0x3c, r0	; 60
     714:	0f 90       	pop	r0
     716:	0b be       	out	0x3b, r0	; 59
     718:	0f 90       	pop	r0
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	0f 90       	pop	r0
     71e:	08 95       	ret

00000720 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     720:	0f 92       	push	r0
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	0f 92       	push	r0
     728:	0b b6       	in	r0, 0x3b	; 59
     72a:	0f 92       	push	r0
     72c:	0c b6       	in	r0, 0x3c	; 60
     72e:	0f 92       	push	r0
     730:	1f 92       	push	r1
     732:	11 24       	eor	r1, r1
     734:	2f 92       	push	r2
     736:	3f 92       	push	r3
     738:	4f 92       	push	r4
     73a:	5f 92       	push	r5
     73c:	6f 92       	push	r6
     73e:	7f 92       	push	r7
     740:	8f 92       	push	r8
     742:	9f 92       	push	r9
     744:	af 92       	push	r10
     746:	bf 92       	push	r11
     748:	cf 92       	push	r12
     74a:	df 92       	push	r13
     74c:	ef 92       	push	r14
     74e:	ff 92       	push	r15
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	2f 93       	push	r18
     756:	3f 93       	push	r19
     758:	4f 93       	push	r20
     75a:	5f 93       	push	r21
     75c:	6f 93       	push	r22
     75e:	7f 93       	push	r23
     760:	8f 93       	push	r24
     762:	9f 93       	push	r25
     764:	af 93       	push	r26
     766:	bf 93       	push	r27
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	ef 93       	push	r30
     76e:	ff 93       	push	r31
     770:	a0 91 0f 16 	lds	r26, 0x160F	; 0x80160f <pxCurrentTCB>
     774:	b0 91 10 16 	lds	r27, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
     778:	0d b6       	in	r0, 0x3d	; 61
     77a:	0d 92       	st	X+, r0
     77c:	0e b6       	in	r0, 0x3e	; 62
     77e:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     780:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     782:	0e 94 84 0c 	call	0x1908	; 0x1908 <xTaskIncrementTick>
     786:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     788:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     78c:	a0 91 0f 16 	lds	r26, 0x160F	; 0x80160f <pxCurrentTCB>
     790:	b0 91 10 16 	lds	r27, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
     794:	cd 91       	ld	r28, X+
     796:	cd bf       	out	0x3d, r28	; 61
     798:	dd 91       	ld	r29, X+
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	ff 91       	pop	r31
     79e:	ef 91       	pop	r30
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	bf 91       	pop	r27
     7a6:	af 91       	pop	r26
     7a8:	9f 91       	pop	r25
     7aa:	8f 91       	pop	r24
     7ac:	7f 91       	pop	r23
     7ae:	6f 91       	pop	r22
     7b0:	5f 91       	pop	r21
     7b2:	4f 91       	pop	r20
     7b4:	3f 91       	pop	r19
     7b6:	2f 91       	pop	r18
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	ff 90       	pop	r15
     7be:	ef 90       	pop	r14
     7c0:	df 90       	pop	r13
     7c2:	cf 90       	pop	r12
     7c4:	bf 90       	pop	r11
     7c6:	af 90       	pop	r10
     7c8:	9f 90       	pop	r9
     7ca:	8f 90       	pop	r8
     7cc:	7f 90       	pop	r7
     7ce:	6f 90       	pop	r6
     7d0:	5f 90       	pop	r5
     7d2:	4f 90       	pop	r4
     7d4:	3f 90       	pop	r3
     7d6:	2f 90       	pop	r2
     7d8:	1f 90       	pop	r1
     7da:	0f 90       	pop	r0
     7dc:	0c be       	out	0x3c, r0	; 60
     7de:	0f 90       	pop	r0
     7e0:	0b be       	out	0x3b, r0	; 59
     7e2:	0f 90       	pop	r0
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     7e8:	08 95       	ret

000007ea <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     7ea:	9a df       	rcall	.-204    	; 0x720 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     7ec:	18 95       	reti

000007ee <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	0f 92       	push	r0
     7f4:	fc 01       	movw	r30, r24
     7f6:	86 8d       	ldd	r24, Z+30	; 0x1e
     7f8:	81 11       	cpse	r24, r1
     7fa:	02 c0       	rjmp	.+4      	; 0x800 <prvIsQueueEmpty+0x12>
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	01 c0       	rjmp	.+2      	; 0x802 <prvIsQueueEmpty+0x14>
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	0f 90       	pop	r0
     804:	0f be       	out	0x3f, r0	; 63
     806:	08 95       	ret

00000808 <prvIsQueueFull>:
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	f8 94       	cli
     80c:	0f 92       	push	r0
     80e:	fc 01       	movw	r30, r24
     810:	26 8d       	ldd	r18, Z+30	; 0x1e
     812:	87 8d       	ldd	r24, Z+31	; 0x1f
     814:	28 13       	cpse	r18, r24
     816:	02 c0       	rjmp	.+4      	; 0x81c <prvIsQueueFull+0x14>
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	01 c0       	rjmp	.+2      	; 0x81e <prvIsQueueFull+0x16>
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	0f 90       	pop	r0
     820:	0f be       	out	0x3f, r0	; 63
     822:	08 95       	ret

00000824 <prvCopyDataToQueue>:
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	ec 01       	movw	r28, r24
     82e:	04 2f       	mov	r16, r20
     830:	1e 8d       	ldd	r17, Y+30	; 0x1e
     832:	48 a1       	ldd	r20, Y+32	; 0x20
     834:	41 11       	cpse	r20, r1
     836:	0c c0       	rjmp	.+24     	; 0x850 <prvCopyDataToQueue+0x2c>
     838:	88 81       	ld	r24, Y
     83a:	99 81       	ldd	r25, Y+1	; 0x01
     83c:	89 2b       	or	r24, r25
     83e:	09 f0       	breq	.+2      	; 0x842 <prvCopyDataToQueue+0x1e>
     840:	42 c0       	rjmp	.+132    	; 0x8c6 <prvCopyDataToQueue+0xa2>
     842:	8c 81       	ldd	r24, Y+4	; 0x04
     844:	9d 81       	ldd	r25, Y+5	; 0x05
     846:	0e 94 1d 11 	call	0x223a	; 0x223a <xTaskPriorityDisinherit>
     84a:	1d 82       	std	Y+5, r1	; 0x05
     84c:	1c 82       	std	Y+4, r1	; 0x04
     84e:	42 c0       	rjmp	.+132    	; 0x8d4 <prvCopyDataToQueue+0xb0>
     850:	01 11       	cpse	r16, r1
     852:	17 c0       	rjmp	.+46     	; 0x882 <prvCopyDataToQueue+0x5e>
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	8a 81       	ldd	r24, Y+2	; 0x02
     858:	9b 81       	ldd	r25, Y+3	; 0x03
     85a:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <memcpy>
     85e:	28 a1       	ldd	r18, Y+32	; 0x20
     860:	8a 81       	ldd	r24, Y+2	; 0x02
     862:	9b 81       	ldd	r25, Y+3	; 0x03
     864:	82 0f       	add	r24, r18
     866:	91 1d       	adc	r25, r1
     868:	9b 83       	std	Y+3, r25	; 0x03
     86a:	8a 83       	std	Y+2, r24	; 0x02
     86c:	2c 81       	ldd	r18, Y+4	; 0x04
     86e:	3d 81       	ldd	r19, Y+5	; 0x05
     870:	82 17       	cp	r24, r18
     872:	93 07       	cpc	r25, r19
     874:	50 f1       	brcs	.+84     	; 0x8ca <prvCopyDataToQueue+0xa6>
     876:	88 81       	ld	r24, Y
     878:	99 81       	ldd	r25, Y+1	; 0x01
     87a:	9b 83       	std	Y+3, r25	; 0x03
     87c:	8a 83       	std	Y+2, r24	; 0x02
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	29 c0       	rjmp	.+82     	; 0x8d4 <prvCopyDataToQueue+0xb0>
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	8e 81       	ldd	r24, Y+6	; 0x06
     886:	9f 81       	ldd	r25, Y+7	; 0x07
     888:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <memcpy>
     88c:	88 a1       	ldd	r24, Y+32	; 0x20
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	91 95       	neg	r25
     892:	81 95       	neg	r24
     894:	91 09       	sbc	r25, r1
     896:	2e 81       	ldd	r18, Y+6	; 0x06
     898:	3f 81       	ldd	r19, Y+7	; 0x07
     89a:	28 0f       	add	r18, r24
     89c:	39 1f       	adc	r19, r25
     89e:	3f 83       	std	Y+7, r19	; 0x07
     8a0:	2e 83       	std	Y+6, r18	; 0x06
     8a2:	48 81       	ld	r20, Y
     8a4:	59 81       	ldd	r21, Y+1	; 0x01
     8a6:	24 17       	cp	r18, r20
     8a8:	35 07       	cpc	r19, r21
     8aa:	30 f4       	brcc	.+12     	; 0x8b8 <prvCopyDataToQueue+0x94>
     8ac:	2c 81       	ldd	r18, Y+4	; 0x04
     8ae:	3d 81       	ldd	r19, Y+5	; 0x05
     8b0:	82 0f       	add	r24, r18
     8b2:	93 1f       	adc	r25, r19
     8b4:	9f 83       	std	Y+7, r25	; 0x07
     8b6:	8e 83       	std	Y+6, r24	; 0x06
     8b8:	02 30       	cpi	r16, 0x02	; 2
     8ba:	49 f4       	brne	.+18     	; 0x8ce <prvCopyDataToQueue+0xaa>
     8bc:	11 23       	and	r17, r17
     8be:	49 f0       	breq	.+18     	; 0x8d2 <prvCopyDataToQueue+0xae>
     8c0:	11 50       	subi	r17, 0x01	; 1
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	07 c0       	rjmp	.+14     	; 0x8d4 <prvCopyDataToQueue+0xb0>
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	05 c0       	rjmp	.+10     	; 0x8d4 <prvCopyDataToQueue+0xb0>
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	03 c0       	rjmp	.+6      	; 0x8d4 <prvCopyDataToQueue+0xb0>
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	01 c0       	rjmp	.+2      	; 0x8d4 <prvCopyDataToQueue+0xb0>
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	1f 5f       	subi	r17, 0xFF	; 255
     8d6:	1e 8f       	std	Y+30, r17	; 0x1e
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	08 95       	ret

000008e2 <prvCopyDataFromQueue>:
     8e2:	fc 01       	movw	r30, r24
     8e4:	40 a1       	ldd	r20, Z+32	; 0x20
     8e6:	44 23       	and	r20, r20
     8e8:	a9 f0       	breq	.+42     	; 0x914 <prvCopyDataFromQueue+0x32>
     8ea:	50 e0       	ldi	r21, 0x00	; 0
     8ec:	26 81       	ldd	r18, Z+6	; 0x06
     8ee:	37 81       	ldd	r19, Z+7	; 0x07
     8f0:	24 0f       	add	r18, r20
     8f2:	35 1f       	adc	r19, r21
     8f4:	37 83       	std	Z+7, r19	; 0x07
     8f6:	26 83       	std	Z+6, r18	; 0x06
     8f8:	84 81       	ldd	r24, Z+4	; 0x04
     8fa:	95 81       	ldd	r25, Z+5	; 0x05
     8fc:	28 17       	cp	r18, r24
     8fe:	39 07       	cpc	r19, r25
     900:	20 f0       	brcs	.+8      	; 0x90a <prvCopyDataFromQueue+0x28>
     902:	80 81       	ld	r24, Z
     904:	91 81       	ldd	r25, Z+1	; 0x01
     906:	97 83       	std	Z+7, r25	; 0x07
     908:	86 83       	std	Z+6, r24	; 0x06
     90a:	cb 01       	movw	r24, r22
     90c:	66 81       	ldd	r22, Z+6	; 0x06
     90e:	77 81       	ldd	r23, Z+7	; 0x07
     910:	0c 94 73 2b 	jmp	0x56e6	; 0x56e6 <memcpy>
     914:	08 95       	ret

00000916 <prvUnlockQueue>:
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	ec 01       	movw	r28, r24
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	f8 94       	cli
     922:	0f 92       	push	r0
     924:	1a a1       	ldd	r17, Y+34	; 0x22
     926:	0b c0       	rjmp	.+22     	; 0x93e <prvUnlockQueue+0x28>
     928:	8b 89       	ldd	r24, Y+19	; 0x13
     92a:	88 23       	and	r24, r24
     92c:	51 f0       	breq	.+20     	; 0x942 <prvUnlockQueue+0x2c>
     92e:	ce 01       	movw	r24, r28
     930:	43 96       	adiw	r24, 0x13	; 19
     932:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskRemoveFromEventList>
     936:	81 11       	cpse	r24, r1
     938:	0e 94 06 11 	call	0x220c	; 0x220c <vTaskMissedYield>
     93c:	11 50       	subi	r17, 0x01	; 1
     93e:	11 16       	cp	r1, r17
     940:	9c f3       	brlt	.-26     	; 0x928 <prvUnlockQueue+0x12>
     942:	8f ef       	ldi	r24, 0xFF	; 255
     944:	8a a3       	std	Y+34, r24	; 0x22
     946:	0f 90       	pop	r0
     948:	0f be       	out	0x3f, r0	; 63
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	f8 94       	cli
     94e:	0f 92       	push	r0
     950:	19 a1       	ldd	r17, Y+33	; 0x21
     952:	0b c0       	rjmp	.+22     	; 0x96a <prvUnlockQueue+0x54>
     954:	88 85       	ldd	r24, Y+8	; 0x08
     956:	88 23       	and	r24, r24
     958:	51 f0       	breq	.+20     	; 0x96e <prvUnlockQueue+0x58>
     95a:	ce 01       	movw	r24, r28
     95c:	08 96       	adiw	r24, 0x08	; 8
     95e:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskRemoveFromEventList>
     962:	81 11       	cpse	r24, r1
     964:	0e 94 06 11 	call	0x220c	; 0x220c <vTaskMissedYield>
     968:	11 50       	subi	r17, 0x01	; 1
     96a:	11 16       	cp	r1, r17
     96c:	9c f3       	brlt	.-26     	; 0x954 <prvUnlockQueue+0x3e>
     96e:	8f ef       	ldi	r24, 0xFF	; 255
     970:	89 a3       	std	Y+33, r24	; 0x21
     972:	0f 90       	pop	r0
     974:	0f be       	out	0x3f, r0	; 63
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	08 95       	ret

0000097e <xQueueGenericReset>:
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	ec 01       	movw	r28, r24
     984:	0f b6       	in	r0, 0x3f	; 63
     986:	f8 94       	cli
     988:	0f 92       	push	r0
     98a:	e8 81       	ld	r30, Y
     98c:	f9 81       	ldd	r31, Y+1	; 0x01
     98e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     990:	28 a1       	ldd	r18, Y+32	; 0x20
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	82 9f       	mul	r24, r18
     998:	a0 01       	movw	r20, r0
     99a:	83 9f       	mul	r24, r19
     99c:	50 0d       	add	r21, r0
     99e:	92 9f       	mul	r25, r18
     9a0:	50 0d       	add	r21, r0
     9a2:	11 24       	eor	r1, r1
     9a4:	4e 0f       	add	r20, r30
     9a6:	5f 1f       	adc	r21, r31
     9a8:	5d 83       	std	Y+5, r21	; 0x05
     9aa:	4c 83       	std	Y+4, r20	; 0x04
     9ac:	1e 8e       	std	Y+30, r1	; 0x1e
     9ae:	fb 83       	std	Y+3, r31	; 0x03
     9b0:	ea 83       	std	Y+2, r30	; 0x02
     9b2:	01 97       	sbiw	r24, 0x01	; 1
     9b4:	28 9f       	mul	r18, r24
     9b6:	a0 01       	movw	r20, r0
     9b8:	29 9f       	mul	r18, r25
     9ba:	50 0d       	add	r21, r0
     9bc:	38 9f       	mul	r19, r24
     9be:	50 0d       	add	r21, r0
     9c0:	11 24       	eor	r1, r1
     9c2:	cf 01       	movw	r24, r30
     9c4:	84 0f       	add	r24, r20
     9c6:	95 1f       	adc	r25, r21
     9c8:	9f 83       	std	Y+7, r25	; 0x07
     9ca:	8e 83       	std	Y+6, r24	; 0x06
     9cc:	8f ef       	ldi	r24, 0xFF	; 255
     9ce:	89 a3       	std	Y+33, r24	; 0x21
     9d0:	8a a3       	std	Y+34, r24	; 0x22
     9d2:	61 11       	cpse	r22, r1
     9d4:	0b c0       	rjmp	.+22     	; 0x9ec <xQueueGenericReset+0x6e>
     9d6:	88 85       	ldd	r24, Y+8	; 0x08
     9d8:	88 23       	and	r24, r24
     9da:	71 f0       	breq	.+28     	; 0x9f8 <xQueueGenericReset+0x7a>
     9dc:	ce 01       	movw	r24, r28
     9de:	08 96       	adiw	r24, 0x08	; 8
     9e0:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskRemoveFromEventList>
     9e4:	88 23       	and	r24, r24
     9e6:	41 f0       	breq	.+16     	; 0x9f8 <xQueueGenericReset+0x7a>
     9e8:	3a de       	rcall	.-908    	; 0x65e <vPortYield>
     9ea:	06 c0       	rjmp	.+12     	; 0x9f8 <xQueueGenericReset+0x7a>
     9ec:	ce 01       	movw	r24, r28
     9ee:	08 96       	adiw	r24, 0x08	; 8
     9f0:	68 dd       	rcall	.-1328   	; 0x4c2 <vListInitialise>
     9f2:	ce 01       	movw	r24, r28
     9f4:	43 96       	adiw	r24, 0x13	; 19
     9f6:	65 dd       	rcall	.-1334   	; 0x4c2 <vListInitialise>
     9f8:	0f 90       	pop	r0
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	08 95       	ret

00000a04 <prvInitialiseNewQueue>:
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	f8 01       	movw	r30, r16
     a0a:	61 11       	cpse	r22, r1
     a0c:	03 c0       	rjmp	.+6      	; 0xa14 <prvInitialiseNewQueue+0x10>
     a0e:	11 83       	std	Z+1, r17	; 0x01
     a10:	00 83       	st	Z, r16
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <prvInitialiseNewQueue+0x14>
     a14:	51 83       	std	Z+1, r21	; 0x01
     a16:	40 83       	st	Z, r20
     a18:	87 8f       	std	Z+31, r24	; 0x1f
     a1a:	60 a3       	std	Z+32, r22	; 0x20
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	cf 01       	movw	r24, r30
     a20:	ae df       	rcall	.-164    	; 0x97e <xQueueGenericReset>
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	08 95       	ret

00000a28 <xQueueGenericCreate>:
     a28:	df 92       	push	r13
     a2a:	ef 92       	push	r14
     a2c:	ff 92       	push	r15
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	f8 2e       	mov	r15, r24
     a38:	e6 2e       	mov	r14, r22
     a3a:	d4 2e       	mov	r13, r20
     a3c:	86 9f       	mul	r24, r22
     a3e:	c0 01       	movw	r24, r0
     a40:	11 24       	eor	r1, r1
     a42:	83 96       	adiw	r24, 0x23	; 35
     a44:	58 dc       	rcall	.-1872   	; 0x2f6 <pvPortMalloc>
     a46:	ec 01       	movw	r28, r24
     a48:	00 97       	sbiw	r24, 0x00	; 0
     a4a:	41 f0       	breq	.+16     	; 0xa5c <xQueueGenericCreate+0x34>
     a4c:	8c 01       	movw	r16, r24
     a4e:	2d 2d       	mov	r18, r13
     a50:	ac 01       	movw	r20, r24
     a52:	4d 5d       	subi	r20, 0xDD	; 221
     a54:	5f 4f       	sbci	r21, 0xFF	; 255
     a56:	6e 2d       	mov	r22, r14
     a58:	8f 2d       	mov	r24, r15
     a5a:	d4 df       	rcall	.-88     	; 0xa04 <prvInitialiseNewQueue>
     a5c:	ce 01       	movw	r24, r28
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	ff 90       	pop	r15
     a68:	ef 90       	pop	r14
     a6a:	df 90       	pop	r13
     a6c:	08 95       	ret

00000a6e <xQueueGenericSend>:
     a6e:	cf 92       	push	r12
     a70:	df 92       	push	r13
     a72:	ef 92       	push	r14
     a74:	ff 92       	push	r15
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	29 97       	sbiw	r28, 0x09	; 9
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	cd bf       	out	0x3d, r28	; 61
     a8e:	7c 01       	movw	r14, r24
     a90:	6b 01       	movw	r12, r22
     a92:	2e 83       	std	Y+6, r18	; 0x06
     a94:	3f 83       	std	Y+7, r19	; 0x07
     a96:	48 87       	std	Y+8, r20	; 0x08
     a98:	59 87       	std	Y+9, r21	; 0x09
     a9a:	10 e0       	ldi	r17, 0x00	; 0
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	0f 92       	push	r0
     aa2:	f7 01       	movw	r30, r14
     aa4:	96 8d       	ldd	r25, Z+30	; 0x1e
     aa6:	87 8d       	ldd	r24, Z+31	; 0x1f
     aa8:	98 17       	cp	r25, r24
     aaa:	10 f0       	brcs	.+4      	; 0xab0 <xQueueGenericSend+0x42>
     aac:	02 30       	cpi	r16, 0x02	; 2
     aae:	b1 f4       	brne	.+44     	; 0xadc <xQueueGenericSend+0x6e>
     ab0:	40 2f       	mov	r20, r16
     ab2:	b6 01       	movw	r22, r12
     ab4:	c7 01       	movw	r24, r14
     ab6:	b6 de       	rcall	.-660    	; 0x824 <prvCopyDataToQueue>
     ab8:	f7 01       	movw	r30, r14
     aba:	93 89       	ldd	r25, Z+19	; 0x13
     abc:	99 23       	and	r25, r25
     abe:	41 f0       	breq	.+16     	; 0xad0 <xQueueGenericSend+0x62>
     ac0:	c7 01       	movw	r24, r14
     ac2:	43 96       	adiw	r24, 0x13	; 19
     ac4:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskRemoveFromEventList>
     ac8:	88 23       	and	r24, r24
     aca:	21 f0       	breq	.+8      	; 0xad4 <xQueueGenericSend+0x66>
     acc:	c8 dd       	rcall	.-1136   	; 0x65e <vPortYield>
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <xQueueGenericSend+0x66>
     ad0:	81 11       	cpse	r24, r1
     ad2:	c5 dd       	rcall	.-1142   	; 0x65e <vPortYield>
     ad4:	0f 90       	pop	r0
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	4a c0       	rjmp	.+148    	; 0xb70 <xQueueGenericSend+0x102>
     adc:	8e 81       	ldd	r24, Y+6	; 0x06
     ade:	9f 81       	ldd	r25, Y+7	; 0x07
     ae0:	a8 85       	ldd	r26, Y+8	; 0x08
     ae2:	b9 85       	ldd	r27, Y+9	; 0x09
     ae4:	89 2b       	or	r24, r25
     ae6:	8a 2b       	or	r24, r26
     ae8:	8b 2b       	or	r24, r27
     aea:	21 f4       	brne	.+8      	; 0xaf4 <xQueueGenericSend+0x86>
     aec:	0f 90       	pop	r0
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	3e c0       	rjmp	.+124    	; 0xb70 <xQueueGenericSend+0x102>
     af4:	11 11       	cpse	r17, r1
     af6:	05 c0       	rjmp	.+10     	; 0xb02 <xQueueGenericSend+0x94>
     af8:	ce 01       	movw	r24, r28
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	0e 94 8f 10 	call	0x211e	; 0x211e <vTaskInternalSetTimeOutState>
     b00:	11 e0       	ldi	r17, 0x01	; 1
     b02:	0f 90       	pop	r0
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	ec d6       	rcall	.+3544   	; 0x18e0 <vTaskSuspendAll>
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	0f 92       	push	r0
     b0e:	f7 01       	movw	r30, r14
     b10:	81 a1       	ldd	r24, Z+33	; 0x21
     b12:	8f 3f       	cpi	r24, 0xFF	; 255
     b14:	09 f4       	brne	.+2      	; 0xb18 <xQueueGenericSend+0xaa>
     b16:	11 a2       	std	Z+33, r1	; 0x21
     b18:	f7 01       	movw	r30, r14
     b1a:	82 a1       	ldd	r24, Z+34	; 0x22
     b1c:	8f 3f       	cpi	r24, 0xFF	; 255
     b1e:	09 f4       	brne	.+2      	; 0xb22 <xQueueGenericSend+0xb4>
     b20:	12 a2       	std	Z+34, r1	; 0x22
     b22:	0f 90       	pop	r0
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	be 01       	movw	r22, r28
     b28:	6a 5f       	subi	r22, 0xFA	; 250
     b2a:	7f 4f       	sbci	r23, 0xFF	; 255
     b2c:	ce 01       	movw	r24, r28
     b2e:	01 96       	adiw	r24, 0x01	; 1
     b30:	0e 94 a0 10 	call	0x2140	; 0x2140 <xTaskCheckForTimeOut>
     b34:	81 11       	cpse	r24, r1
     b36:	18 c0       	rjmp	.+48     	; 0xb68 <xQueueGenericSend+0xfa>
     b38:	c7 01       	movw	r24, r14
     b3a:	66 de       	rcall	.-820    	; 0x808 <prvIsQueueFull>
     b3c:	88 23       	and	r24, r24
     b3e:	81 f0       	breq	.+32     	; 0xb60 <xQueueGenericSend+0xf2>
     b40:	4e 81       	ldd	r20, Y+6	; 0x06
     b42:	5f 81       	ldd	r21, Y+7	; 0x07
     b44:	68 85       	ldd	r22, Y+8	; 0x08
     b46:	79 85       	ldd	r23, Y+9	; 0x09
     b48:	c7 01       	movw	r24, r14
     b4a:	08 96       	adiw	r24, 0x08	; 8
     b4c:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <vTaskPlaceOnEventList>
     b50:	c7 01       	movw	r24, r14
     b52:	e1 de       	rcall	.-574    	; 0x916 <prvUnlockQueue>
     b54:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <xTaskResumeAll>
     b58:	81 11       	cpse	r24, r1
     b5a:	a0 cf       	rjmp	.-192    	; 0xa9c <xQueueGenericSend+0x2e>
     b5c:	80 dd       	rcall	.-1280   	; 0x65e <vPortYield>
     b5e:	9e cf       	rjmp	.-196    	; 0xa9c <xQueueGenericSend+0x2e>
     b60:	c7 01       	movw	r24, r14
     b62:	d9 de       	rcall	.-590    	; 0x916 <prvUnlockQueue>
     b64:	fd d7       	rcall	.+4090   	; 0x1b60 <xTaskResumeAll>
     b66:	9a cf       	rjmp	.-204    	; 0xa9c <xQueueGenericSend+0x2e>
     b68:	c7 01       	movw	r24, r14
     b6a:	d5 de       	rcall	.-598    	; 0x916 <prvUnlockQueue>
     b6c:	f9 d7       	rcall	.+4082   	; 0x1b60 <xTaskResumeAll>
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	29 96       	adiw	r28, 0x09	; 9
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	f8 94       	cli
     b76:	de bf       	out	0x3e, r29	; 62
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	cd bf       	out	0x3d, r28	; 61
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	ff 90       	pop	r15
     b86:	ef 90       	pop	r14
     b88:	df 90       	pop	r13
     b8a:	cf 90       	pop	r12
     b8c:	08 95       	ret

00000b8e <xQueueGenericSendFromISR>:
     b8e:	ef 92       	push	r14
     b90:	ff 92       	push	r15
     b92:	0f 93       	push	r16
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	8a 01       	movw	r16, r20
     b9c:	fc 01       	movw	r30, r24
     b9e:	56 8d       	ldd	r21, Z+30	; 0x1e
     ba0:	37 8d       	ldd	r19, Z+31	; 0x1f
     ba2:	53 17       	cp	r21, r19
     ba4:	10 f0       	brcs	.+4      	; 0xbaa <xQueueGenericSendFromISR+0x1c>
     ba6:	22 30       	cpi	r18, 0x02	; 2
     ba8:	f9 f4       	brne	.+62     	; 0xbe8 <xQueueGenericSendFromISR+0x5a>
     baa:	42 2f       	mov	r20, r18
     bac:	78 01       	movw	r14, r16
     bae:	ec 01       	movw	r28, r24
     bb0:	1a a1       	ldd	r17, Y+34	; 0x22
     bb2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bb4:	ce 01       	movw	r24, r28
     bb6:	36 de       	rcall	.-916    	; 0x824 <prvCopyDataToQueue>
     bb8:	1f 3f       	cpi	r17, 0xFF	; 255
     bba:	81 f4       	brne	.+32     	; 0xbdc <xQueueGenericSendFromISR+0x4e>
     bbc:	8b 89       	ldd	r24, Y+19	; 0x13
     bbe:	88 23       	and	r24, r24
     bc0:	a9 f0       	breq	.+42     	; 0xbec <xQueueGenericSendFromISR+0x5e>
     bc2:	ce 01       	movw	r24, r28
     bc4:	43 96       	adiw	r24, 0x13	; 19
     bc6:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskRemoveFromEventList>
     bca:	88 23       	and	r24, r24
     bcc:	89 f0       	breq	.+34     	; 0xbf0 <xQueueGenericSendFromISR+0x62>
     bce:	e1 14       	cp	r14, r1
     bd0:	f1 04       	cpc	r15, r1
     bd2:	81 f0       	breq	.+32     	; 0xbf4 <xQueueGenericSendFromISR+0x66>
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	f7 01       	movw	r30, r14
     bd8:	80 83       	st	Z, r24
     bda:	0d c0       	rjmp	.+26     	; 0xbf6 <xQueueGenericSendFromISR+0x68>
     bdc:	ff 24       	eor	r15, r15
     bde:	f3 94       	inc	r15
     be0:	f1 0e       	add	r15, r17
     be2:	fa a2       	std	Y+34, r15	; 0x22
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	07 c0       	rjmp	.+14     	; 0xbf6 <xQueueGenericSendFromISR+0x68>
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	05 c0       	rjmp	.+10     	; 0xbf6 <xQueueGenericSendFromISR+0x68>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	03 c0       	rjmp	.+6      	; 0xbf6 <xQueueGenericSendFromISR+0x68>
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	01 c0       	rjmp	.+2      	; 0xbf6 <xQueueGenericSendFromISR+0x68>
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	ff 90       	pop	r15
     c00:	ef 90       	pop	r14
     c02:	08 95       	ret

00000c04 <xQueueReceive>:
     c04:	cf 92       	push	r12
     c06:	df 92       	push	r13
     c08:	ef 92       	push	r14
     c0a:	ff 92       	push	r15
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
     c18:	29 97       	sbiw	r28, 0x09	; 9
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	de bf       	out	0x3e, r29	; 62
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	cd bf       	out	0x3d, r28	; 61
     c24:	8c 01       	movw	r16, r24
     c26:	6b 01       	movw	r12, r22
     c28:	2e 83       	std	Y+6, r18	; 0x06
     c2a:	3f 83       	std	Y+7, r19	; 0x07
     c2c:	48 87       	std	Y+8, r20	; 0x08
     c2e:	59 87       	std	Y+9, r21	; 0x09
     c30:	e1 2c       	mov	r14, r1
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	0f 92       	push	r0
     c38:	f8 01       	movw	r30, r16
     c3a:	f6 8c       	ldd	r15, Z+30	; 0x1e
     c3c:	ff 20       	and	r15, r15
     c3e:	99 f0       	breq	.+38     	; 0xc66 <xQueueReceive+0x62>
     c40:	b6 01       	movw	r22, r12
     c42:	c8 01       	movw	r24, r16
     c44:	4e de       	rcall	.-868    	; 0x8e2 <prvCopyDataFromQueue>
     c46:	fa 94       	dec	r15
     c48:	f8 01       	movw	r30, r16
     c4a:	f6 8e       	std	Z+30, r15	; 0x1e
     c4c:	80 85       	ldd	r24, Z+8	; 0x08
     c4e:	88 23       	and	r24, r24
     c50:	31 f0       	breq	.+12     	; 0xc5e <xQueueReceive+0x5a>
     c52:	c8 01       	movw	r24, r16
     c54:	08 96       	adiw	r24, 0x08	; 8
     c56:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskRemoveFromEventList>
     c5a:	81 11       	cpse	r24, r1
     c5c:	00 dd       	rcall	.-1536   	; 0x65e <vPortYield>
     c5e:	0f 90       	pop	r0
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	4f c0       	rjmp	.+158    	; 0xd04 <xQueueReceive+0x100>
     c66:	8e 81       	ldd	r24, Y+6	; 0x06
     c68:	9f 81       	ldd	r25, Y+7	; 0x07
     c6a:	a8 85       	ldd	r26, Y+8	; 0x08
     c6c:	b9 85       	ldd	r27, Y+9	; 0x09
     c6e:	89 2b       	or	r24, r25
     c70:	8a 2b       	or	r24, r26
     c72:	8b 2b       	or	r24, r27
     c74:	21 f4       	brne	.+8      	; 0xc7e <xQueueReceive+0x7a>
     c76:	0f 90       	pop	r0
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	43 c0       	rjmp	.+134    	; 0xd04 <xQueueReceive+0x100>
     c7e:	e1 10       	cpse	r14, r1
     c80:	06 c0       	rjmp	.+12     	; 0xc8e <xQueueReceive+0x8a>
     c82:	ce 01       	movw	r24, r28
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	0e 94 8f 10 	call	0x211e	; 0x211e <vTaskInternalSetTimeOutState>
     c8a:	ee 24       	eor	r14, r14
     c8c:	e3 94       	inc	r14
     c8e:	0f 90       	pop	r0
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	26 d6       	rcall	.+3148   	; 0x18e0 <vTaskSuspendAll>
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	0f 92       	push	r0
     c9a:	f8 01       	movw	r30, r16
     c9c:	81 a1       	ldd	r24, Z+33	; 0x21
     c9e:	8f 3f       	cpi	r24, 0xFF	; 255
     ca0:	09 f4       	brne	.+2      	; 0xca4 <xQueueReceive+0xa0>
     ca2:	11 a2       	std	Z+33, r1	; 0x21
     ca4:	f8 01       	movw	r30, r16
     ca6:	82 a1       	ldd	r24, Z+34	; 0x22
     ca8:	8f 3f       	cpi	r24, 0xFF	; 255
     caa:	09 f4       	brne	.+2      	; 0xcae <xQueueReceive+0xaa>
     cac:	12 a2       	std	Z+34, r1	; 0x22
     cae:	0f 90       	pop	r0
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	be 01       	movw	r22, r28
     cb4:	6a 5f       	subi	r22, 0xFA	; 250
     cb6:	7f 4f       	sbci	r23, 0xFF	; 255
     cb8:	ce 01       	movw	r24, r28
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	0e 94 a0 10 	call	0x2140	; 0x2140 <xTaskCheckForTimeOut>
     cc0:	81 11       	cpse	r24, r1
     cc2:	17 c0       	rjmp	.+46     	; 0xcf2 <xQueueReceive+0xee>
     cc4:	c8 01       	movw	r24, r16
     cc6:	93 dd       	rcall	.-1242   	; 0x7ee <prvIsQueueEmpty>
     cc8:	88 23       	and	r24, r24
     cca:	79 f0       	breq	.+30     	; 0xcea <xQueueReceive+0xe6>
     ccc:	4e 81       	ldd	r20, Y+6	; 0x06
     cce:	5f 81       	ldd	r21, Y+7	; 0x07
     cd0:	68 85       	ldd	r22, Y+8	; 0x08
     cd2:	79 85       	ldd	r23, Y+9	; 0x09
     cd4:	c8 01       	movw	r24, r16
     cd6:	43 96       	adiw	r24, 0x13	; 19
     cd8:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <vTaskPlaceOnEventList>
     cdc:	c8 01       	movw	r24, r16
     cde:	1b de       	rcall	.-970    	; 0x916 <prvUnlockQueue>
     ce0:	3f d7       	rcall	.+3710   	; 0x1b60 <xTaskResumeAll>
     ce2:	81 11       	cpse	r24, r1
     ce4:	a6 cf       	rjmp	.-180    	; 0xc32 <xQueueReceive+0x2e>
     ce6:	bb dc       	rcall	.-1674   	; 0x65e <vPortYield>
     ce8:	a4 cf       	rjmp	.-184    	; 0xc32 <xQueueReceive+0x2e>
     cea:	c8 01       	movw	r24, r16
     cec:	14 de       	rcall	.-984    	; 0x916 <prvUnlockQueue>
     cee:	38 d7       	rcall	.+3696   	; 0x1b60 <xTaskResumeAll>
     cf0:	a0 cf       	rjmp	.-192    	; 0xc32 <xQueueReceive+0x2e>
     cf2:	c8 01       	movw	r24, r16
     cf4:	10 de       	rcall	.-992    	; 0x916 <prvUnlockQueue>
     cf6:	34 d7       	rcall	.+3688   	; 0x1b60 <xTaskResumeAll>
     cf8:	c8 01       	movw	r24, r16
     cfa:	79 dd       	rcall	.-1294   	; 0x7ee <prvIsQueueEmpty>
     cfc:	88 23       	and	r24, r24
     cfe:	09 f4       	brne	.+2      	; 0xd02 <xQueueReceive+0xfe>
     d00:	98 cf       	rjmp	.-208    	; 0xc32 <xQueueReceive+0x2e>
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	29 96       	adiw	r28, 0x09	; 9
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	de bf       	out	0x3e, r29	; 62
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	cd bf       	out	0x3d, r28	; 61
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	1f 91       	pop	r17
     d16:	0f 91       	pop	r16
     d18:	ff 90       	pop	r15
     d1a:	ef 90       	pop	r14
     d1c:	df 90       	pop	r13
     d1e:	cf 90       	pop	r12
     d20:	08 95       	ret

00000d22 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	0f 92       	push	r0
     d2e:	89 a1       	ldd	r24, Y+33	; 0x21
     d30:	8f 3f       	cpi	r24, 0xFF	; 255
     d32:	09 f4       	brne	.+2      	; 0xd36 <vQueueWaitForMessageRestricted+0x14>
     d34:	19 a2       	std	Y+33, r1	; 0x21
     d36:	8a a1       	ldd	r24, Y+34	; 0x22
     d38:	8f 3f       	cpi	r24, 0xFF	; 255
     d3a:	09 f4       	brne	.+2      	; 0xd3e <vQueueWaitForMessageRestricted+0x1c>
     d3c:	1a a2       	std	Y+34, r1	; 0x22
     d3e:	0f 90       	pop	r0
     d40:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     d42:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d44:	81 11       	cpse	r24, r1
     d46:	04 c0       	rjmp	.+8      	; 0xd50 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     d48:	ce 01       	movw	r24, r28
     d4a:	43 96       	adiw	r24, 0x13	; 19
     d4c:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     d50:	ce 01       	movw	r24, r28
     d52:	e1 dd       	rcall	.-1086   	; 0x916 <prvUnlockQueue>
    }
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	08 95       	ret

00000d5a <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     d5a:	fc 01       	movw	r30, r24
     d5c:	44 81       	ldd	r20, Z+4	; 0x04
     d5e:	55 81       	ldd	r21, Z+5	; 0x05
     d60:	22 81       	ldd	r18, Z+2	; 0x02
     d62:	33 81       	ldd	r19, Z+3	; 0x03
     d64:	24 0f       	add	r18, r20
     d66:	35 1f       	adc	r19, r21
     d68:	80 81       	ld	r24, Z
     d6a:	91 81       	ldd	r25, Z+1	; 0x01
     d6c:	b9 01       	movw	r22, r18
     d6e:	68 1b       	sub	r22, r24
     d70:	79 0b       	sbc	r23, r25
     d72:	cb 01       	movw	r24, r22
     d74:	64 17       	cp	r22, r20
     d76:	75 07       	cpc	r23, r21
     d78:	10 f0       	brcs	.+4      	; 0xd7e <prvBytesInBuffer+0x24>
     d7a:	84 1b       	sub	r24, r20
     d7c:	95 0b       	sbc	r25, r21
     d7e:	08 95       	ret

00000d80 <prvInitialiseNewStreamBuffer>:
     d80:	0f 93       	push	r16
     d82:	fc 01       	movw	r30, r24
     d84:	8f e0       	ldi	r24, 0x0F	; 15
     d86:	df 01       	movw	r26, r30
     d88:	1d 92       	st	X+, r1
     d8a:	8a 95       	dec	r24
     d8c:	e9 f7       	brne	.-6      	; 0xd88 <prvInitialiseNewStreamBuffer+0x8>
     d8e:	75 87       	std	Z+13, r23	; 0x0d
     d90:	64 87       	std	Z+12, r22	; 0x0c
     d92:	55 83       	std	Z+5, r21	; 0x05
     d94:	44 83       	std	Z+4, r20	; 0x04
     d96:	37 83       	std	Z+7, r19	; 0x07
     d98:	26 83       	std	Z+6, r18	; 0x06
     d9a:	06 87       	std	Z+14, r16	; 0x0e
     d9c:	0f 91       	pop	r16
     d9e:	08 95       	ret

00000da0 <prvWriteBytesToBuffer>:
     da0:	af 92       	push	r10
     da2:	bf 92       	push	r11
     da4:	cf 92       	push	r12
     da6:	df 92       	push	r13
     da8:	ef 92       	push	r14
     daa:	ff 92       	push	r15
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	6c 01       	movw	r12, r24
     db6:	5b 01       	movw	r10, r22
     db8:	7a 01       	movw	r14, r20
     dba:	fc 01       	movw	r30, r24
     dbc:	c2 81       	ldd	r28, Z+2	; 0x02
     dbe:	d3 81       	ldd	r29, Z+3	; 0x03
     dc0:	04 81       	ldd	r16, Z+4	; 0x04
     dc2:	15 81       	ldd	r17, Z+5	; 0x05
     dc4:	0c 1b       	sub	r16, r28
     dc6:	1d 0b       	sbc	r17, r29
     dc8:	40 17       	cp	r20, r16
     dca:	51 07       	cpc	r21, r17
     dcc:	08 f4       	brcc	.+2      	; 0xdd0 <prvWriteBytesToBuffer+0x30>
     dce:	8a 01       	movw	r16, r20
     dd0:	f6 01       	movw	r30, r12
     dd2:	84 85       	ldd	r24, Z+12	; 0x0c
     dd4:	95 85       	ldd	r25, Z+13	; 0x0d
     dd6:	a8 01       	movw	r20, r16
     dd8:	b5 01       	movw	r22, r10
     dda:	8c 0f       	add	r24, r28
     ddc:	9d 1f       	adc	r25, r29
     dde:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <memcpy>
     de2:	0e 15       	cp	r16, r14
     de4:	1f 05       	cpc	r17, r15
     de6:	58 f4       	brcc	.+22     	; 0xdfe <prvWriteBytesToBuffer+0x5e>
     de8:	a7 01       	movw	r20, r14
     dea:	40 1b       	sub	r20, r16
     dec:	51 0b       	sbc	r21, r17
     dee:	b5 01       	movw	r22, r10
     df0:	60 0f       	add	r22, r16
     df2:	71 1f       	adc	r23, r17
     df4:	f6 01       	movw	r30, r12
     df6:	84 85       	ldd	r24, Z+12	; 0x0c
     df8:	95 85       	ldd	r25, Z+13	; 0x0d
     dfa:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <memcpy>
     dfe:	ce 01       	movw	r24, r28
     e00:	8e 0d       	add	r24, r14
     e02:	9f 1d       	adc	r25, r15
     e04:	f6 01       	movw	r30, r12
     e06:	24 81       	ldd	r18, Z+4	; 0x04
     e08:	35 81       	ldd	r19, Z+5	; 0x05
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	10 f0       	brcs	.+4      	; 0xe14 <prvWriteBytesToBuffer+0x74>
     e10:	82 1b       	sub	r24, r18
     e12:	93 0b       	sbc	r25, r19
     e14:	f6 01       	movw	r30, r12
     e16:	93 83       	std	Z+3, r25	; 0x03
     e18:	82 83       	std	Z+2, r24	; 0x02
     e1a:	c7 01       	movw	r24, r14
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	1f 91       	pop	r17
     e22:	0f 91       	pop	r16
     e24:	ff 90       	pop	r15
     e26:	ef 90       	pop	r14
     e28:	df 90       	pop	r13
     e2a:	cf 90       	pop	r12
     e2c:	bf 90       	pop	r11
     e2e:	af 90       	pop	r10
     e30:	08 95       	ret

00000e32 <prvWriteMessageToBuffer>:
     e32:	cf 92       	push	r12
     e34:	df 92       	push	r13
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	1f 92       	push	r1
     e44:	1f 92       	push	r1
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	7c 01       	movw	r14, r24
     e4c:	6b 01       	movw	r12, r22
     e4e:	5a 83       	std	Y+2, r21	; 0x02
     e50:	49 83       	std	Y+1, r20	; 0x01
     e52:	21 15       	cp	r18, r1
     e54:	31 05       	cpc	r19, r1
     e56:	c1 f0       	breq	.+48     	; 0xe88 <prvWriteMessageToBuffer+0x56>
     e58:	fc 01       	movw	r30, r24
     e5a:	86 85       	ldd	r24, Z+14	; 0x0e
     e5c:	80 fd       	sbrc	r24, 0
     e5e:	08 c0       	rjmp	.+16     	; 0xe70 <prvWriteMessageToBuffer+0x3e>
     e60:	42 17       	cp	r20, r18
     e62:	53 07       	cpc	r21, r19
     e64:	08 f4       	brcc	.+2      	; 0xe68 <prvWriteMessageToBuffer+0x36>
     e66:	9a 01       	movw	r18, r20
     e68:	3a 83       	std	Y+2, r19	; 0x02
     e6a:	29 83       	std	Y+1, r18	; 0x01
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	0f c0       	rjmp	.+30     	; 0xe8e <prvWriteMessageToBuffer+0x5c>
     e70:	20 17       	cp	r18, r16
     e72:	31 07       	cpc	r19, r17
     e74:	58 f0       	brcs	.+22     	; 0xe8c <prvWriteMessageToBuffer+0x5a>
     e76:	42 e0       	ldi	r20, 0x02	; 2
     e78:	50 e0       	ldi	r21, 0x00	; 0
     e7a:	be 01       	movw	r22, r28
     e7c:	6f 5f       	subi	r22, 0xFF	; 255
     e7e:	7f 4f       	sbci	r23, 0xFF	; 255
     e80:	c7 01       	movw	r24, r14
     e82:	8e df       	rcall	.-228    	; 0xda0 <prvWriteBytesToBuffer>
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	03 c0       	rjmp	.+6      	; 0xe8e <prvWriteMessageToBuffer+0x5c>
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	01 c0       	rjmp	.+2      	; 0xe8e <prvWriteMessageToBuffer+0x5c>
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	88 23       	and	r24, r24
     e90:	31 f0       	breq	.+12     	; 0xe9e <prvWriteMessageToBuffer+0x6c>
     e92:	49 81       	ldd	r20, Y+1	; 0x01
     e94:	5a 81       	ldd	r21, Y+2	; 0x02
     e96:	b6 01       	movw	r22, r12
     e98:	c7 01       	movw	r24, r14
     e9a:	82 df       	rcall	.-252    	; 0xda0 <prvWriteBytesToBuffer>
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <prvWriteMessageToBuffer+0x70>
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	ff 90       	pop	r15
     eb0:	ef 90       	pop	r14
     eb2:	df 90       	pop	r13
     eb4:	cf 90       	pop	r12
     eb6:	08 95       	ret

00000eb8 <prvReadBytesFromBuffer>:
     eb8:	af 92       	push	r10
     eba:	bf 92       	push	r11
     ebc:	cf 92       	push	r12
     ebe:	df 92       	push	r13
     ec0:	ef 92       	push	r14
     ec2:	ff 92       	push	r15
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	7c 01       	movw	r14, r24
     ece:	5b 01       	movw	r10, r22
     ed0:	e9 01       	movw	r28, r18
     ed2:	42 17       	cp	r20, r18
     ed4:	53 07       	cpc	r21, r19
     ed6:	08 f4       	brcc	.+2      	; 0xeda <prvReadBytesFromBuffer+0x22>
     ed8:	ea 01       	movw	r28, r20
     eda:	20 97       	sbiw	r28, 0x00	; 0
     edc:	81 f1       	breq	.+96     	; 0xf3e <prvReadBytesFromBuffer+0x86>
     ede:	f7 01       	movw	r30, r14
     ee0:	00 81       	ld	r16, Z
     ee2:	11 81       	ldd	r17, Z+1	; 0x01
     ee4:	84 81       	ldd	r24, Z+4	; 0x04
     ee6:	95 81       	ldd	r25, Z+5	; 0x05
     ee8:	80 1b       	sub	r24, r16
     eea:	91 0b       	sbc	r25, r17
     eec:	6e 01       	movw	r12, r28
     eee:	8c 17       	cp	r24, r28
     ef0:	9d 07       	cpc	r25, r29
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <prvReadBytesFromBuffer+0x3e>
     ef4:	6c 01       	movw	r12, r24
     ef6:	f7 01       	movw	r30, r14
     ef8:	64 85       	ldd	r22, Z+12	; 0x0c
     efa:	75 85       	ldd	r23, Z+13	; 0x0d
     efc:	60 0f       	add	r22, r16
     efe:	71 1f       	adc	r23, r17
     f00:	a6 01       	movw	r20, r12
     f02:	c5 01       	movw	r24, r10
     f04:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <memcpy>
     f08:	cc 16       	cp	r12, r28
     f0a:	dd 06       	cpc	r13, r29
     f0c:	58 f4       	brcc	.+22     	; 0xf24 <prvReadBytesFromBuffer+0x6c>
     f0e:	ae 01       	movw	r20, r28
     f10:	4c 19       	sub	r20, r12
     f12:	5d 09       	sbc	r21, r13
     f14:	f7 01       	movw	r30, r14
     f16:	64 85       	ldd	r22, Z+12	; 0x0c
     f18:	75 85       	ldd	r23, Z+13	; 0x0d
     f1a:	c5 01       	movw	r24, r10
     f1c:	8c 0d       	add	r24, r12
     f1e:	9d 1d       	adc	r25, r13
     f20:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <memcpy>
     f24:	0c 0f       	add	r16, r28
     f26:	1d 1f       	adc	r17, r29
     f28:	f7 01       	movw	r30, r14
     f2a:	84 81       	ldd	r24, Z+4	; 0x04
     f2c:	95 81       	ldd	r25, Z+5	; 0x05
     f2e:	08 17       	cp	r16, r24
     f30:	19 07       	cpc	r17, r25
     f32:	10 f0       	brcs	.+4      	; 0xf38 <prvReadBytesFromBuffer+0x80>
     f34:	08 1b       	sub	r16, r24
     f36:	19 0b       	sbc	r17, r25
     f38:	f7 01       	movw	r30, r14
     f3a:	11 83       	std	Z+1, r17	; 0x01
     f3c:	00 83       	st	Z, r16
     f3e:	ce 01       	movw	r24, r28
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	ff 90       	pop	r15
     f4a:	ef 90       	pop	r14
     f4c:	df 90       	pop	r13
     f4e:	cf 90       	pop	r12
     f50:	bf 90       	pop	r11
     f52:	af 90       	pop	r10
     f54:	08 95       	ret

00000f56 <prvReadMessageFromBuffer>:
     f56:	6f 92       	push	r6
     f58:	7f 92       	push	r7
     f5a:	8f 92       	push	r8
     f5c:	9f 92       	push	r9
     f5e:	af 92       	push	r10
     f60:	bf 92       	push	r11
     f62:	cf 92       	push	r12
     f64:	df 92       	push	r13
     f66:	ef 92       	push	r14
     f68:	ff 92       	push	r15
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	1f 92       	push	r1
     f74:	1f 92       	push	r1
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	6c 01       	movw	r12, r24
     f7c:	4b 01       	movw	r8, r22
     f7e:	5a 01       	movw	r10, r20
     f80:	79 01       	movw	r14, r18
     f82:	01 15       	cp	r16, r1
     f84:	11 05       	cpc	r17, r1
     f86:	b1 f0       	breq	.+44     	; 0xfb4 <prvReadMessageFromBuffer+0x5e>
     f88:	fc 01       	movw	r30, r24
     f8a:	60 80       	ld	r6, Z
     f8c:	71 80       	ldd	r7, Z+1	; 0x01
     f8e:	a8 01       	movw	r20, r16
     f90:	be 01       	movw	r22, r28
     f92:	6f 5f       	subi	r22, 0xFF	; 255
     f94:	7f 4f       	sbci	r23, 0xFF	; 255
     f96:	90 df       	rcall	.-224    	; 0xeb8 <prvReadBytesFromBuffer>
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	9a 81       	ldd	r25, Y+2	; 0x02
     f9c:	e0 1a       	sub	r14, r16
     f9e:	f1 0a       	sbc	r15, r17
     fa0:	a8 16       	cp	r10, r24
     fa2:	b9 06       	cpc	r11, r25
     fa4:	30 f4       	brcc	.+12     	; 0xfb2 <prvReadMessageFromBuffer+0x5c>
     fa6:	f6 01       	movw	r30, r12
     fa8:	71 82       	std	Z+1, r7	; 0x01
     faa:	60 82       	st	Z, r6
     fac:	a1 2c       	mov	r10, r1
     fae:	b1 2c       	mov	r11, r1
     fb0:	01 c0       	rjmp	.+2      	; 0xfb4 <prvReadMessageFromBuffer+0x5e>
     fb2:	5c 01       	movw	r10, r24
     fb4:	97 01       	movw	r18, r14
     fb6:	a5 01       	movw	r20, r10
     fb8:	b4 01       	movw	r22, r8
     fba:	c6 01       	movw	r24, r12
     fbc:	7d df       	rcall	.-262    	; 0xeb8 <prvReadBytesFromBuffer>
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	df 90       	pop	r13
     fd0:	cf 90       	pop	r12
     fd2:	bf 90       	pop	r11
     fd4:	af 90       	pop	r10
     fd6:	9f 90       	pop	r9
     fd8:	8f 90       	pop	r8
     fda:	7f 90       	pop	r7
     fdc:	6f 90       	pop	r6
     fde:	08 95       	ret

00000fe0 <xStreamBufferGenericCreate>:
     fe0:	cf 92       	push	r12
     fe2:	df 92       	push	r13
     fe4:	ef 92       	push	r14
     fe6:	ff 92       	push	r15
     fe8:	0f 93       	push	r16
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	ec 01       	movw	r28, r24
     ff0:	6b 01       	movw	r12, r22
     ff2:	41 30       	cpi	r20, 0x01	; 1
     ff4:	11 f4       	brne	.+4      	; 0xffa <xStreamBufferGenericCreate+0x1a>
     ff6:	01 e0       	ldi	r16, 0x01	; 1
     ff8:	01 c0       	rjmp	.+2      	; 0xffc <xStreamBufferGenericCreate+0x1c>
     ffa:	00 e0       	ldi	r16, 0x00	; 0
     ffc:	c1 14       	cp	r12, r1
     ffe:	d1 04       	cpc	r13, r1
    1000:	19 f4       	brne	.+6      	; 0x1008 <__EEPROM_REGION_LENGTH__+0x8>
    1002:	cc 24       	eor	r12, r12
    1004:	c3 94       	inc	r12
    1006:	d1 2c       	mov	r13, r1
    1008:	ce 01       	movw	r24, r28
    100a:	40 96       	adiw	r24, 0x10	; 16
    100c:	c8 17       	cp	r28, r24
    100e:	d9 07       	cpc	r29, r25
    1010:	20 f4       	brcc	.+8      	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
    1012:	21 96       	adiw	r28, 0x01	; 1
    1014:	70 d9       	rcall	.-3360   	; 0x2f6 <pvPortMalloc>
    1016:	7c 01       	movw	r14, r24
    1018:	02 c0       	rjmp	.+4      	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
    101a:	e1 2c       	mov	r14, r1
    101c:	f1 2c       	mov	r15, r1
    101e:	e1 14       	cp	r14, r1
    1020:	f1 04       	cpc	r15, r1
    1022:	39 f0       	breq	.+14     	; 0x1032 <__EEPROM_REGION_LENGTH__+0x32>
    1024:	96 01       	movw	r18, r12
    1026:	ae 01       	movw	r20, r28
    1028:	b7 01       	movw	r22, r14
    102a:	61 5f       	subi	r22, 0xF1	; 241
    102c:	7f 4f       	sbci	r23, 0xFF	; 255
    102e:	c7 01       	movw	r24, r14
    1030:	a7 de       	rcall	.-690    	; 0xd80 <prvInitialiseNewStreamBuffer>
    1032:	c7 01       	movw	r24, r14
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	0f 91       	pop	r16
    103a:	ff 90       	pop	r15
    103c:	ef 90       	pop	r14
    103e:	df 90       	pop	r13
    1040:	cf 90       	pop	r12
    1042:	08 95       	ret

00001044 <xStreamBufferReset>:
    1044:	0f 93       	push	r16
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	0f 92       	push	r0
    104c:	fc 01       	movw	r30, r24
    104e:	20 85       	ldd	r18, Z+8	; 0x08
    1050:	31 85       	ldd	r19, Z+9	; 0x09
    1052:	23 2b       	or	r18, r19
    1054:	71 f4       	brne	.+28     	; 0x1072 <xStreamBufferReset+0x2e>
    1056:	22 85       	ldd	r18, Z+10	; 0x0a
    1058:	33 85       	ldd	r19, Z+11	; 0x0b
    105a:	23 2b       	or	r18, r19
    105c:	61 f4       	brne	.+24     	; 0x1076 <xStreamBufferReset+0x32>
    105e:	26 81       	ldd	r18, Z+6	; 0x06
    1060:	37 81       	ldd	r19, Z+7	; 0x07
    1062:	44 81       	ldd	r20, Z+4	; 0x04
    1064:	55 81       	ldd	r21, Z+5	; 0x05
    1066:	64 85       	ldd	r22, Z+12	; 0x0c
    1068:	75 85       	ldd	r23, Z+13	; 0x0d
    106a:	06 85       	ldd	r16, Z+14	; 0x0e
    106c:	89 de       	rcall	.-750    	; 0xd80 <prvInitialiseNewStreamBuffer>
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	03 c0       	rjmp	.+6      	; 0x1078 <xStreamBufferReset+0x34>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	01 c0       	rjmp	.+2      	; 0x1078 <xStreamBufferReset+0x34>
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	0f 90       	pop	r0
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	0f 91       	pop	r16
    107e:	08 95       	ret

00001080 <xStreamBufferSpacesAvailable>:
    1080:	fc 01       	movw	r30, r24
    1082:	24 81       	ldd	r18, Z+4	; 0x04
    1084:	35 81       	ldd	r19, Z+5	; 0x05
    1086:	80 81       	ld	r24, Z
    1088:	91 81       	ldd	r25, Z+1	; 0x01
    108a:	82 0f       	add	r24, r18
    108c:	93 1f       	adc	r25, r19
    108e:	42 81       	ldd	r20, Z+2	; 0x02
    1090:	53 81       	ldd	r21, Z+3	; 0x03
    1092:	84 1b       	sub	r24, r20
    1094:	95 0b       	sbc	r25, r21
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	82 17       	cp	r24, r18
    109a:	93 07       	cpc	r25, r19
    109c:	10 f0       	brcs	.+4      	; 0x10a2 <xStreamBufferSpacesAvailable+0x22>
    109e:	82 1b       	sub	r24, r18
    10a0:	93 0b       	sbc	r25, r19
    10a2:	08 95       	ret

000010a4 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    10a4:	2f 92       	push	r2
    10a6:	3f 92       	push	r3
    10a8:	4f 92       	push	r4
    10aa:	5f 92       	push	r5
    10ac:	6f 92       	push	r6
    10ae:	7f 92       	push	r7
    10b0:	8f 92       	push	r8
    10b2:	9f 92       	push	r9
    10b4:	af 92       	push	r10
    10b6:	bf 92       	push	r11
    10b8:	cf 92       	push	r12
    10ba:	df 92       	push	r13
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	2b 97       	sbiw	r28, 0x0b	; 11
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	4c 01       	movw	r8, r24
    10da:	7b 87       	std	Y+11, r23	; 0x0b
    10dc:	6a 87       	std	Y+10, r22	; 0x0a
    10de:	1a 01       	movw	r2, r20
    10e0:	0e 83       	std	Y+6, r16	; 0x06
    10e2:	1f 83       	std	Y+7, r17	; 0x07
    10e4:	28 87       	std	Y+8, r18	; 0x08
    10e6:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    10e8:	fc 01       	movw	r30, r24
    10ea:	84 81       	ldd	r24, Z+4	; 0x04
    10ec:	95 81       	ldd	r25, Z+5	; 0x05
    10ee:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    10f0:	26 85       	ldd	r18, Z+14	; 0x0e
    10f2:	20 ff       	sbrs	r18, 0
    10f4:	0c c0       	rjmp	.+24     	; 0x110e <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    10f6:	2a 01       	movw	r4, r20
    10f8:	f2 e0       	ldi	r31, 0x02	; 2
    10fa:	4f 0e       	add	r4, r31
    10fc:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    10fe:	84 15       	cp	r24, r4
    1100:	95 05       	cpc	r25, r5
    1102:	58 f4       	brcc	.+22     	; 0x111a <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1104:	1e 82       	std	Y+6, r1	; 0x06
    1106:	1f 82       	std	Y+7, r1	; 0x07
    1108:	18 86       	std	Y+8, r1	; 0x08
    110a:	19 86       	std	Y+9, r1	; 0x09
    110c:	06 c0       	rjmp	.+12     	; 0x111a <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    110e:	84 17       	cp	r24, r20
    1110:	95 07       	cpc	r25, r21
    1112:	10 f0       	brcs	.+4      	; 0x1118 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1114:	2a 01       	movw	r4, r20
    1116:	01 c0       	rjmp	.+2      	; 0x111a <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1118:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    111a:	8e 81       	ldd	r24, Y+6	; 0x06
    111c:	9f 81       	ldd	r25, Y+7	; 0x07
    111e:	a8 85       	ldd	r26, Y+8	; 0x08
    1120:	b9 85       	ldd	r27, Y+9	; 0x09
    1122:	89 2b       	or	r24, r25
    1124:	8a 2b       	or	r24, r26
    1126:	8b 2b       	or	r24, r27
    1128:	09 f4       	brne	.+2      	; 0x112c <xStreamBufferSend+0x88>
    112a:	36 c0       	rjmp	.+108    	; 0x1198 <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    112c:	ce 01       	movw	r24, r28
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	e0 d7       	rcall	.+4032   	; 0x20f2 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1138:	c4 01       	movw	r24, r8
    113a:	a2 df       	rcall	.-188    	; 0x1080 <xStreamBufferSpacesAvailable>
    113c:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    113e:	84 15       	cp	r24, r4
    1140:	95 05       	cpc	r25, r5
    1142:	38 f5       	brcc	.+78     	; 0x1192 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 38 14 	call	0x2870	; 0x2870 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    114e:	0e 94 0a 11 	call	0x2214	; 0x2214 <xTaskGetCurrentTaskHandle>
    1152:	f4 01       	movw	r30, r8
    1154:	93 87       	std	Z+11, r25	; 0x0b
    1156:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1158:	0f 90       	pop	r0
    115a:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    115c:	ae 80       	ldd	r10, Y+6	; 0x06
    115e:	bf 80       	ldd	r11, Y+7	; 0x07
    1160:	c8 84       	ldd	r12, Y+8	; 0x08
    1162:	d9 84       	ldd	r13, Y+9	; 0x09
    1164:	e1 2c       	mov	r14, r1
    1166:	f1 2c       	mov	r15, r1
    1168:	00 e0       	ldi	r16, 0x00	; 0
    116a:	10 e0       	ldi	r17, 0x00	; 0
    116c:	98 01       	movw	r18, r16
    116e:	40 e0       	ldi	r20, 0x00	; 0
    1170:	50 e0       	ldi	r21, 0x00	; 0
    1172:	ba 01       	movw	r22, r20
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	0e 94 78 11 	call	0x22f0	; 0x22f0 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    117a:	f4 01       	movw	r30, r8
    117c:	13 86       	std	Z+11, r1	; 0x0b
    117e:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1180:	be 01       	movw	r22, r28
    1182:	6a 5f       	subi	r22, 0xFA	; 250
    1184:	7f 4f       	sbci	r23, 0xFF	; 255
    1186:	ce 01       	movw	r24, r28
    1188:	01 96       	adiw	r24, 0x01	; 1
    118a:	da d7       	rcall	.+4020   	; 0x2140 <xTaskCheckForTimeOut>
    118c:	88 23       	and	r24, r24
    118e:	89 f2       	breq	.-94     	; 0x1132 <xStreamBufferSend+0x8e>
    1190:	05 c0       	rjmp	.+10     	; 0x119c <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1192:	0f 90       	pop	r0
    1194:	0f be       	out	0x3f, r0	; 63
                    break;
    1196:	02 c0       	rjmp	.+4      	; 0x119c <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1198:	61 2c       	mov	r6, r1
    119a:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    119c:	61 14       	cp	r6, r1
    119e:	71 04       	cpc	r7, r1
    11a0:	19 f4       	brne	.+6      	; 0x11a8 <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    11a2:	c4 01       	movw	r24, r8
    11a4:	6d df       	rcall	.-294    	; 0x1080 <xStreamBufferSpacesAvailable>
    11a6:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    11a8:	82 01       	movw	r16, r4
    11aa:	93 01       	movw	r18, r6
    11ac:	a1 01       	movw	r20, r2
    11ae:	6a 85       	ldd	r22, Y+10	; 0x0a
    11b0:	7b 85       	ldd	r23, Y+11	; 0x0b
    11b2:	c4 01       	movw	r24, r8
    11b4:	3e de       	rcall	.-900    	; 0xe32 <prvWriteMessageToBuffer>
    11b6:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    11b8:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    11ba:	e9 f0       	breq	.+58     	; 0x11f6 <xStreamBufferSend+0x152>
    11bc:	c4 01       	movw	r24, r8
    11be:	cd dd       	rcall	.-1126   	; 0xd5a <prvBytesInBuffer>
    11c0:	f4 01       	movw	r30, r8
    11c2:	26 81       	ldd	r18, Z+6	; 0x06
    11c4:	37 81       	ldd	r19, Z+7	; 0x07
    11c6:	82 17       	cp	r24, r18
    11c8:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    11ca:	a8 f0       	brcs	.+42     	; 0x11f6 <xStreamBufferSend+0x152>
    11cc:	89 d3       	rcall	.+1810   	; 0x18e0 <vTaskSuspendAll>
    11ce:	f4 01       	movw	r30, r8
    11d0:	80 85       	ldd	r24, Z+8	; 0x08
    11d2:	91 85       	ldd	r25, Z+9	; 0x09
    11d4:	89 2b       	or	r24, r25
    11d6:	71 f0       	breq	.+28     	; 0x11f4 <xStreamBufferSend+0x150>
    11d8:	80 85       	ldd	r24, Z+8	; 0x08
    11da:	91 85       	ldd	r25, Z+9	; 0x09
    11dc:	e1 2c       	mov	r14, r1
    11de:	f1 2c       	mov	r15, r1
    11e0:	00 e0       	ldi	r16, 0x00	; 0
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	a9 01       	movw	r20, r18
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	0e 94 1f 12 	call	0x243e	; 0x243e <xTaskGenericNotify>
    11ee:	f4 01       	movw	r30, r8
    11f0:	11 86       	std	Z+9, r1	; 0x09
    11f2:	10 86       	std	Z+8, r1	; 0x08
    11f4:	b5 d4       	rcall	.+2410   	; 0x1b60 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    11f6:	c6 01       	movw	r24, r12
    11f8:	2b 96       	adiw	r28, 0x0b	; 11
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	de bf       	out	0x3e, r29	; 62
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	cd bf       	out	0x3d, r28	; 61
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	ff 90       	pop	r15
    120e:	ef 90       	pop	r14
    1210:	df 90       	pop	r13
    1212:	cf 90       	pop	r12
    1214:	bf 90       	pop	r11
    1216:	af 90       	pop	r10
    1218:	9f 90       	pop	r9
    121a:	8f 90       	pop	r8
    121c:	7f 90       	pop	r7
    121e:	6f 90       	pop	r6
    1220:	5f 90       	pop	r5
    1222:	4f 90       	pop	r4
    1224:	3f 90       	pop	r3
    1226:	2f 90       	pop	r2
    1228:	08 95       	ret

0000122a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    122a:	af 92       	push	r10
    122c:	bf 92       	push	r11
    122e:	cf 92       	push	r12
    1230:	df 92       	push	r13
    1232:	ef 92       	push	r14
    1234:	ff 92       	push	r15
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	ec 01       	movw	r28, r24
    1240:	7b 01       	movw	r14, r22
    1242:	5a 01       	movw	r10, r20
    1244:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1246:	8e 85       	ldd	r24, Y+14	; 0x0e
    1248:	80 ff       	sbrs	r24, 0
    124a:	04 c0       	rjmp	.+8      	; 0x1254 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    124c:	8a 01       	movw	r16, r20
    124e:	0e 5f       	subi	r16, 0xFE	; 254
    1250:	1f 4f       	sbci	r17, 0xFF	; 255
    1252:	01 c0       	rjmp	.+2      	; 0x1256 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1254:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1256:	ce 01       	movw	r24, r28
    1258:	13 df       	rcall	.-474    	; 0x1080 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    125a:	9c 01       	movw	r18, r24
    125c:	a5 01       	movw	r20, r10
    125e:	b7 01       	movw	r22, r14
    1260:	ce 01       	movw	r24, r28
    1262:	e7 dd       	rcall	.-1074   	; 0xe32 <prvWriteMessageToBuffer>
    1264:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1266:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1268:	c1 f0       	breq	.+48     	; 0x129a <xStreamBufferSendFromISR+0x70>
    126a:	ce 01       	movw	r24, r28
    126c:	76 dd       	rcall	.-1300   	; 0xd5a <prvBytesInBuffer>
    126e:	2e 81       	ldd	r18, Y+6	; 0x06
    1270:	3f 81       	ldd	r19, Y+7	; 0x07
    1272:	82 17       	cp	r24, r18
    1274:	93 07       	cpc	r25, r19
    1276:	88 f0       	brcs	.+34     	; 0x129a <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1278:	88 85       	ldd	r24, Y+8	; 0x08
    127a:	99 85       	ldd	r25, Y+9	; 0x09
    127c:	89 2b       	or	r24, r25
    127e:	69 f0       	breq	.+26     	; 0x129a <xStreamBufferSendFromISR+0x70>
    1280:	88 85       	ldd	r24, Y+8	; 0x08
    1282:	99 85       	ldd	r25, Y+9	; 0x09
    1284:	e1 2c       	mov	r14, r1
    1286:	f1 2c       	mov	r15, r1
    1288:	00 e0       	ldi	r16, 0x00	; 0
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	a9 01       	movw	r20, r18
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	0e 94 16 13 	call	0x262c	; 0x262c <xTaskGenericNotifyFromISR>
    1296:	19 86       	std	Y+9, r1	; 0x09
    1298:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    129a:	c5 01       	movw	r24, r10
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	1f 91       	pop	r17
    12a2:	0f 91       	pop	r16
    12a4:	ff 90       	pop	r15
    12a6:	ef 90       	pop	r14
    12a8:	df 90       	pop	r13
    12aa:	cf 90       	pop	r12
    12ac:	bf 90       	pop	r11
    12ae:	af 90       	pop	r10
    12b0:	08 95       	ret

000012b2 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    12b2:	4f 92       	push	r4
    12b4:	5f 92       	push	r5
    12b6:	6f 92       	push	r6
    12b8:	7f 92       	push	r7
    12ba:	8f 92       	push	r8
    12bc:	9f 92       	push	r9
    12be:	af 92       	push	r10
    12c0:	bf 92       	push	r11
    12c2:	cf 92       	push	r12
    12c4:	df 92       	push	r13
    12c6:	ef 92       	push	r14
    12c8:	ff 92       	push	r15
    12ca:	0f 93       	push	r16
    12cc:	1f 93       	push	r17
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	ec 01       	movw	r28, r24
    12d4:	2b 01       	movw	r4, r22
    12d6:	3a 01       	movw	r6, r20
    12d8:	58 01       	movw	r10, r16
    12da:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    12dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    12de:	80 ff       	sbrs	r24, 0
    12e0:	05 c0       	rjmp	.+10     	; 0x12ec <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    12e2:	68 94       	set
    12e4:	88 24       	eor	r8, r8
    12e6:	81 f8       	bld	r8, 1
    12e8:	91 2c       	mov	r9, r1
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    12ec:	81 2c       	mov	r8, r1
    12ee:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    12f0:	a1 14       	cp	r10, r1
    12f2:	b1 04       	cpc	r11, r1
    12f4:	c1 04       	cpc	r12, r1
    12f6:	d1 04       	cpc	r13, r1
    12f8:	31 f1       	breq	.+76     	; 0x1346 <xStreamBufferReceive+0x94>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1300:	ce 01       	movw	r24, r28
    1302:	2b dd       	rcall	.-1450   	; 0xd5a <prvBytesInBuffer>
    1304:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1306:	88 16       	cp	r8, r24
    1308:	99 06       	cpc	r9, r25
    130a:	40 f0       	brcs	.+16     	; 0x131c <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    130c:	60 e0       	ldi	r22, 0x00	; 0
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	0e 94 38 14 	call	0x2870	; 0x2870 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1316:	7e d7       	rcall	.+3836   	; 0x2214 <xTaskGetCurrentTaskHandle>
    1318:	99 87       	std	Y+9, r25	; 0x09
    131a:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    131c:	0f 90       	pop	r0
    131e:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1320:	8e 14       	cp	r8, r14
    1322:	9f 04       	cpc	r9, r15
    1324:	98 f0       	brcs	.+38     	; 0x134c <xStreamBufferReceive+0x9a>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1326:	e1 2c       	mov	r14, r1
    1328:	f1 2c       	mov	r15, r1
    132a:	00 e0       	ldi	r16, 0x00	; 0
    132c:	10 e0       	ldi	r17, 0x00	; 0
    132e:	98 01       	movw	r18, r16
    1330:	40 e0       	ldi	r20, 0x00	; 0
    1332:	50 e0       	ldi	r21, 0x00	; 0
    1334:	ba 01       	movw	r22, r20
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	db d7       	rcall	.+4022   	; 0x22f0 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    133a:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    133c:	18 86       	std	Y+8, r1	; 0x08
    133e:	ce 01       	movw	r24, r28
    1340:	0c dd       	rcall	.-1512   	; 0xd5a <prvBytesInBuffer>
    1342:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1344:	03 c0       	rjmp	.+6      	; 0x134c <xStreamBufferReceive+0x9a>
    1346:	ce 01       	movw	r24, r28
    1348:	08 dd       	rcall	.-1520   	; 0xd5a <prvBytesInBuffer>
    134a:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    134c:	8e 14       	cp	r8, r14
    134e:	9f 04       	cpc	r9, r15
    1350:	e8 f4       	brcc	.+58     	; 0x138c <xStreamBufferReceive+0xda>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1352:	84 01       	movw	r16, r8
    1354:	97 01       	movw	r18, r14
    1356:	a3 01       	movw	r20, r6
    1358:	b2 01       	movw	r22, r4
    135a:	ce 01       	movw	r24, r28
    135c:	fc dd       	rcall	.-1032   	; 0xf56 <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    135e:	6c 01       	movw	r12, r24
    1360:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1362:	b1 f0       	breq	.+44     	; 0x1390 <xStreamBufferReceive+0xde>
    1364:	bd d2       	rcall	.+1402   	; 0x18e0 <vTaskSuspendAll>
    1366:	8a 85       	ldd	r24, Y+10	; 0x0a
    1368:	9b 85       	ldd	r25, Y+11	; 0x0b
    136a:	89 2b       	or	r24, r25
    136c:	69 f0       	breq	.+26     	; 0x1388 <xStreamBufferReceive+0xd6>
    136e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1370:	9b 85       	ldd	r25, Y+11	; 0x0b
    1372:	e1 2c       	mov	r14, r1
    1374:	f1 2c       	mov	r15, r1
    1376:	00 e0       	ldi	r16, 0x00	; 0
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	a9 01       	movw	r20, r18
    137e:	60 e0       	ldi	r22, 0x00	; 0
    1380:	0e 94 1f 12 	call	0x243e	; 0x243e <xTaskGenericNotify>
    1384:	1b 86       	std	Y+11, r1	; 0x0b
    1386:	1a 86       	std	Y+10, r1	; 0x0a
    1388:	eb d3       	rcall	.+2006   	; 0x1b60 <xTaskResumeAll>
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <xStreamBufferReceive+0xde>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    138c:	c1 2c       	mov	r12, r1
    138e:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1390:	c6 01       	movw	r24, r12
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	ff 90       	pop	r15
    139c:	ef 90       	pop	r14
    139e:	df 90       	pop	r13
    13a0:	cf 90       	pop	r12
    13a2:	bf 90       	pop	r11
    13a4:	af 90       	pop	r10
    13a6:	9f 90       	pop	r9
    13a8:	8f 90       	pop	r8
    13aa:	7f 90       	pop	r7
    13ac:	6f 90       	pop	r6
    13ae:	5f 90       	pop	r5
    13b0:	4f 90       	pop	r4
    13b2:	08 95       	ret

000013b4 <prvResetNextTaskUnblockTime>:
    13b4:	e0 91 89 15 	lds	r30, 0x1589	; 0x801589 <pxDelayedTaskList>
    13b8:	f0 91 8a 15 	lds	r31, 0x158A	; 0x80158a <pxDelayedTaskList+0x1>
    13bc:	80 81       	ld	r24, Z
    13be:	81 11       	cpse	r24, r1
    13c0:	0c c0       	rjmp	.+24     	; 0x13da <prvResetNextTaskUnblockTime+0x26>
    13c2:	8f ef       	ldi	r24, 0xFF	; 255
    13c4:	9f ef       	ldi	r25, 0xFF	; 255
    13c6:	dc 01       	movw	r26, r24
    13c8:	80 93 53 15 	sts	0x1553, r24	; 0x801553 <xNextTaskUnblockTime>
    13cc:	90 93 54 15 	sts	0x1554, r25	; 0x801554 <xNextTaskUnblockTime+0x1>
    13d0:	a0 93 55 15 	sts	0x1555, r26	; 0x801555 <xNextTaskUnblockTime+0x2>
    13d4:	b0 93 56 15 	sts	0x1556, r27	; 0x801556 <xNextTaskUnblockTime+0x3>
    13d8:	08 95       	ret
    13da:	e0 91 89 15 	lds	r30, 0x1589	; 0x801589 <pxDelayedTaskList>
    13de:	f0 91 8a 15 	lds	r31, 0x158A	; 0x80158a <pxDelayedTaskList+0x1>
    13e2:	07 80       	ldd	r0, Z+7	; 0x07
    13e4:	f0 85       	ldd	r31, Z+8	; 0x08
    13e6:	e0 2d       	mov	r30, r0
    13e8:	80 81       	ld	r24, Z
    13ea:	91 81       	ldd	r25, Z+1	; 0x01
    13ec:	a2 81       	ldd	r26, Z+2	; 0x02
    13ee:	b3 81       	ldd	r27, Z+3	; 0x03
    13f0:	80 93 53 15 	sts	0x1553, r24	; 0x801553 <xNextTaskUnblockTime>
    13f4:	90 93 54 15 	sts	0x1554, r25	; 0x801554 <xNextTaskUnblockTime+0x1>
    13f8:	a0 93 55 15 	sts	0x1555, r26	; 0x801555 <xNextTaskUnblockTime+0x2>
    13fc:	b0 93 56 15 	sts	0x1556, r27	; 0x801556 <xNextTaskUnblockTime+0x3>
    1400:	08 95       	ret

00001402 <prvDeleteTCB>:
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	ec 01       	movw	r28, r24
    1408:	8b 8d       	ldd	r24, Y+27	; 0x1b
    140a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    140c:	1d d8       	rcall	.-4038   	; 0x448 <vPortFree>
    140e:	ce 01       	movw	r24, r28
    1410:	1b d8       	rcall	.-4042   	; 0x448 <vPortFree>
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	08 95       	ret

00001418 <prvInitialiseNewTask>:
    1418:	4f 92       	push	r4
    141a:	5f 92       	push	r5
    141c:	6f 92       	push	r6
    141e:	7f 92       	push	r7
    1420:	8f 92       	push	r8
    1422:	9f 92       	push	r9
    1424:	af 92       	push	r10
    1426:	bf 92       	push	r11
    1428:	cf 92       	push	r12
    142a:	df 92       	push	r13
    142c:	ef 92       	push	r14
    142e:	ff 92       	push	r15
    1430:	0f 93       	push	r16
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	2c 01       	movw	r4, r24
    1438:	5b 01       	movw	r10, r22
    143a:	4a 01       	movw	r8, r20
    143c:	39 01       	movw	r6, r18
    143e:	e6 01       	movw	r28, r12
    1440:	65 ea       	ldi	r22, 0xA5	; 165
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1446:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1448:	0e 94 7c 2b 	call	0x56f8	; 0x56f8 <memset>
    144c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    144e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1450:	21 e0       	ldi	r18, 0x01	; 1
    1452:	82 1a       	sub	r8, r18
    1454:	91 08       	sbc	r9, r1
    1456:	88 0e       	add	r8, r24
    1458:	99 1e       	adc	r9, r25
    145a:	a1 14       	cp	r10, r1
    145c:	b1 04       	cpc	r11, r1
    145e:	89 f4       	brne	.+34     	; 0x1482 <prvInitialiseNewTask+0x6a>
    1460:	15 c0       	rjmp	.+42     	; 0x148c <prvInitialiseNewTask+0x74>
    1462:	82 2f       	mov	r24, r18
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	f5 01       	movw	r30, r10
    1468:	e8 0f       	add	r30, r24
    146a:	f9 1f       	adc	r31, r25
    146c:	30 81       	ld	r19, Z
    146e:	de 01       	movw	r26, r28
    1470:	a8 0f       	add	r26, r24
    1472:	b9 1f       	adc	r27, r25
    1474:	5d 96       	adiw	r26, 0x1d	; 29
    1476:	3c 93       	st	X, r19
    1478:	80 81       	ld	r24, Z
    147a:	88 23       	and	r24, r24
    147c:	29 f0       	breq	.+10     	; 0x1488 <prvInitialiseNewTask+0x70>
    147e:	2f 5f       	subi	r18, 0xFF	; 255
    1480:	01 c0       	rjmp	.+2      	; 0x1484 <prvInitialiseNewTask+0x6c>
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	20 31       	cpi	r18, 0x10	; 16
    1486:	68 f3       	brcs	.-38     	; 0x1462 <prvInitialiseNewTask+0x4a>
    1488:	1c a6       	std	Y+44, r1	; 0x2c
    148a:	01 c0       	rjmp	.+2      	; 0x148e <prvInitialiseNewTask+0x76>
    148c:	1d 8e       	std	Y+29, r1	; 0x1d
    148e:	0a 30       	cpi	r16, 0x0A	; 10
    1490:	08 f0       	brcs	.+2      	; 0x1494 <prvInitialiseNewTask+0x7c>
    1492:	09 e0       	ldi	r16, 0x09	; 9
    1494:	0a 8f       	std	Y+26, r16	; 0x1a
    1496:	0d a7       	std	Y+45, r16	; 0x2d
    1498:	1e a6       	std	Y+46, r1	; 0x2e
    149a:	ce 01       	movw	r24, r28
    149c:	02 96       	adiw	r24, 0x02	; 2
    149e:	22 d8       	rcall	.-4028   	; 0x4e4 <vListInitialiseItem>
    14a0:	ce 01       	movw	r24, r28
    14a2:	0e 96       	adiw	r24, 0x0e	; 14
    14a4:	1f d8       	rcall	.-4034   	; 0x4e4 <vListInitialiseItem>
    14a6:	db 87       	std	Y+11, r29	; 0x0b
    14a8:	ca 87       	std	Y+10, r28	; 0x0a
    14aa:	8a e0       	ldi	r24, 0x0A	; 10
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	a0 e0       	ldi	r26, 0x00	; 0
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	80 1b       	sub	r24, r16
    14b4:	91 09       	sbc	r25, r1
    14b6:	a1 09       	sbc	r26, r1
    14b8:	b1 09       	sbc	r27, r1
    14ba:	8e 87       	std	Y+14, r24	; 0x0e
    14bc:	9f 87       	std	Y+15, r25	; 0x0f
    14be:	a8 8b       	std	Y+16, r26	; 0x10
    14c0:	b9 8b       	std	Y+17, r27	; 0x11
    14c2:	df 8b       	std	Y+23, r29	; 0x17
    14c4:	ce 8b       	std	Y+22, r28	; 0x16
    14c6:	84 e0       	ldi	r24, 0x04	; 4
    14c8:	fe 01       	movw	r30, r28
    14ca:	bf 96       	adiw	r30, 0x2f	; 47
    14cc:	df 01       	movw	r26, r30
    14ce:	1d 92       	st	X+, r1
    14d0:	8a 95       	dec	r24
    14d2:	e9 f7       	brne	.-6      	; 0x14ce <prvInitialiseNewTask+0xb6>
    14d4:	1b aa       	std	Y+51, r1	; 0x33
    14d6:	a3 01       	movw	r20, r6
    14d8:	b2 01       	movw	r22, r4
    14da:	c4 01       	movw	r24, r8
    14dc:	77 d8       	rcall	.-3858   	; 0x5cc <pxPortInitialiseStack>
    14de:	99 83       	std	Y+1, r25	; 0x01
    14e0:	88 83       	st	Y, r24
    14e2:	e1 14       	cp	r14, r1
    14e4:	f1 04       	cpc	r15, r1
    14e6:	19 f0       	breq	.+6      	; 0x14ee <prvInitialiseNewTask+0xd6>
    14e8:	f7 01       	movw	r30, r14
    14ea:	d1 83       	std	Z+1, r29	; 0x01
    14ec:	c0 83       	st	Z, r28
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	0f 91       	pop	r16
    14f4:	ff 90       	pop	r15
    14f6:	ef 90       	pop	r14
    14f8:	df 90       	pop	r13
    14fa:	cf 90       	pop	r12
    14fc:	bf 90       	pop	r11
    14fe:	af 90       	pop	r10
    1500:	9f 90       	pop	r9
    1502:	8f 90       	pop	r8
    1504:	7f 90       	pop	r7
    1506:	6f 90       	pop	r6
    1508:	5f 90       	pop	r5
    150a:	4f 90       	pop	r4
    150c:	08 95       	ret

0000150e <prvInitialiseTaskLists>:
    150e:	cf 93       	push	r28
    1510:	c0 e0       	ldi	r28, 0x00	; 0
    1512:	09 c0       	rjmp	.+18     	; 0x1526 <prvInitialiseTaskLists+0x18>
    1514:	2b e0       	ldi	r18, 0x0B	; 11
    1516:	c2 9f       	mul	r28, r18
    1518:	c0 01       	movw	r24, r0
    151a:	11 24       	eor	r1, r1
    151c:	8f 55       	subi	r24, 0x5F	; 95
    151e:	9a 4e       	sbci	r25, 0xEA	; 234
    1520:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    1524:	cf 5f       	subi	r28, 0xFF	; 255
    1526:	ca 30       	cpi	r28, 0x0A	; 10
    1528:	a8 f3       	brcs	.-22     	; 0x1514 <prvInitialiseTaskLists+0x6>
    152a:	86 e9       	ldi	r24, 0x96	; 150
    152c:	95 e1       	ldi	r25, 0x15	; 21
    152e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    1532:	8b e8       	ldi	r24, 0x8B	; 139
    1534:	95 e1       	ldi	r25, 0x15	; 21
    1536:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    153a:	8c e7       	ldi	r24, 0x7C	; 124
    153c:	95 e1       	ldi	r25, 0x15	; 21
    153e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    1542:	81 e7       	ldi	r24, 0x71	; 113
    1544:	95 e1       	ldi	r25, 0x15	; 21
    1546:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    154a:	85 e6       	ldi	r24, 0x65	; 101
    154c:	95 e1       	ldi	r25, 0x15	; 21
    154e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    1552:	86 e9       	ldi	r24, 0x96	; 150
    1554:	95 e1       	ldi	r25, 0x15	; 21
    1556:	90 93 8a 15 	sts	0x158A, r25	; 0x80158a <pxDelayedTaskList+0x1>
    155a:	80 93 89 15 	sts	0x1589, r24	; 0x801589 <pxDelayedTaskList>
    155e:	8b e8       	ldi	r24, 0x8B	; 139
    1560:	95 e1       	ldi	r25, 0x15	; 21
    1562:	90 93 88 15 	sts	0x1588, r25	; 0x801588 <pxOverflowDelayedTaskList+0x1>
    1566:	80 93 87 15 	sts	0x1587, r24	; 0x801587 <pxOverflowDelayedTaskList>
    156a:	cf 91       	pop	r28
    156c:	08 95       	ret

0000156e <prvAddNewTaskToReadyList>:
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	ec 01       	movw	r28, r24
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	0f 92       	push	r0
    157a:	80 91 64 15 	lds	r24, 0x1564	; 0x801564 <uxCurrentNumberOfTasks>
    157e:	8f 5f       	subi	r24, 0xFF	; 255
    1580:	80 93 64 15 	sts	0x1564, r24	; 0x801564 <uxCurrentNumberOfTasks>
    1584:	80 91 0f 16 	lds	r24, 0x160F	; 0x80160f <pxCurrentTCB>
    1588:	90 91 10 16 	lds	r25, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    158c:	89 2b       	or	r24, r25
    158e:	51 f4       	brne	.+20     	; 0x15a4 <prvAddNewTaskToReadyList+0x36>
    1590:	d0 93 10 16 	sts	0x1610, r29	; 0x801610 <pxCurrentTCB+0x1>
    1594:	c0 93 0f 16 	sts	0x160F, r28	; 0x80160f <pxCurrentTCB>
    1598:	80 91 64 15 	lds	r24, 0x1564	; 0x801564 <uxCurrentNumberOfTasks>
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	91 f4       	brne	.+36     	; 0x15c4 <prvAddNewTaskToReadyList+0x56>
    15a0:	b6 df       	rcall	.-148    	; 0x150e <prvInitialiseTaskLists>
    15a2:	10 c0       	rjmp	.+32     	; 0x15c4 <prvAddNewTaskToReadyList+0x56>
    15a4:	80 91 5e 15 	lds	r24, 0x155E	; 0x80155e <xSchedulerRunning>
    15a8:	81 11       	cpse	r24, r1
    15aa:	0c c0       	rjmp	.+24     	; 0x15c4 <prvAddNewTaskToReadyList+0x56>
    15ac:	e0 91 0f 16 	lds	r30, 0x160F	; 0x80160f <pxCurrentTCB>
    15b0:	f0 91 10 16 	lds	r31, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    15b4:	92 8d       	ldd	r25, Z+26	; 0x1a
    15b6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15b8:	89 17       	cp	r24, r25
    15ba:	20 f0       	brcs	.+8      	; 0x15c4 <prvAddNewTaskToReadyList+0x56>
    15bc:	d0 93 10 16 	sts	0x1610, r29	; 0x801610 <pxCurrentTCB+0x1>
    15c0:	c0 93 0f 16 	sts	0x160F, r28	; 0x80160f <pxCurrentTCB>
    15c4:	80 91 57 15 	lds	r24, 0x1557	; 0x801557 <uxTaskNumber>
    15c8:	8f 5f       	subi	r24, 0xFF	; 255
    15ca:	80 93 57 15 	sts	0x1557, r24	; 0x801557 <uxTaskNumber>
    15ce:	ea 8d       	ldd	r30, Y+26	; 0x1a
    15d0:	80 91 5f 15 	lds	r24, 0x155F	; 0x80155f <uxTopReadyPriority>
    15d4:	8e 17       	cp	r24, r30
    15d6:	10 f4       	brcc	.+4      	; 0x15dc <prvAddNewTaskToReadyList+0x6e>
    15d8:	e0 93 5f 15 	sts	0x155F, r30	; 0x80155f <uxTopReadyPriority>
    15dc:	8b e0       	ldi	r24, 0x0B	; 11
    15de:	8e 9f       	mul	r24, r30
    15e0:	f0 01       	movw	r30, r0
    15e2:	11 24       	eor	r1, r1
    15e4:	ef 55       	subi	r30, 0x5F	; 95
    15e6:	fa 4e       	sbci	r31, 0xEA	; 234
    15e8:	01 80       	ldd	r0, Z+1	; 0x01
    15ea:	f2 81       	ldd	r31, Z+2	; 0x02
    15ec:	e0 2d       	mov	r30, r0
    15ee:	ff 83       	std	Y+7, r31	; 0x07
    15f0:	ee 83       	std	Y+6, r30	; 0x06
    15f2:	26 81       	ldd	r18, Z+6	; 0x06
    15f4:	37 81       	ldd	r19, Z+7	; 0x07
    15f6:	39 87       	std	Y+9, r19	; 0x09
    15f8:	28 87       	std	Y+8, r18	; 0x08
    15fa:	a6 81       	ldd	r26, Z+6	; 0x06
    15fc:	b7 81       	ldd	r27, Z+7	; 0x07
    15fe:	9e 01       	movw	r18, r28
    1600:	2e 5f       	subi	r18, 0xFE	; 254
    1602:	3f 4f       	sbci	r19, 0xFF	; 255
    1604:	15 96       	adiw	r26, 0x05	; 5
    1606:	3c 93       	st	X, r19
    1608:	2e 93       	st	-X, r18
    160a:	14 97       	sbiw	r26, 0x04	; 4
    160c:	37 83       	std	Z+7, r19	; 0x07
    160e:	26 83       	std	Z+6, r18	; 0x06
    1610:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1612:	8e 9f       	mul	r24, r30
    1614:	f0 01       	movw	r30, r0
    1616:	11 24       	eor	r1, r1
    1618:	ef 55       	subi	r30, 0x5F	; 95
    161a:	fa 4e       	sbci	r31, 0xEA	; 234
    161c:	fd 87       	std	Y+13, r31	; 0x0d
    161e:	ec 87       	std	Y+12, r30	; 0x0c
    1620:	80 81       	ld	r24, Z
    1622:	8f 5f       	subi	r24, 0xFF	; 255
    1624:	80 83       	st	Z, r24
    1626:	0f 90       	pop	r0
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	80 91 5e 15 	lds	r24, 0x155E	; 0x80155e <xSchedulerRunning>
    162e:	88 23       	and	r24, r24
    1630:	49 f0       	breq	.+18     	; 0x1644 <prvAddNewTaskToReadyList+0xd6>
    1632:	e0 91 0f 16 	lds	r30, 0x160F	; 0x80160f <pxCurrentTCB>
    1636:	f0 91 10 16 	lds	r31, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    163a:	92 8d       	ldd	r25, Z+26	; 0x1a
    163c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    163e:	98 17       	cp	r25, r24
    1640:	08 f4       	brcc	.+2      	; 0x1644 <prvAddNewTaskToReadyList+0xd6>
    1642:	0d d8       	rcall	.-4070   	; 0x65e <vPortYield>
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	08 95       	ret

0000164a <prvCheckTasksWaitingTermination>:
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
    164e:	1b c0       	rjmp	.+54     	; 0x1686 <prvCheckTasksWaitingTermination+0x3c>
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	0f 92       	push	r0
    1656:	e0 91 78 15 	lds	r30, 0x1578	; 0x801578 <xTasksWaitingTermination+0x7>
    165a:	f0 91 79 15 	lds	r31, 0x1579	; 0x801579 <xTasksWaitingTermination+0x8>
    165e:	c0 85       	ldd	r28, Z+8	; 0x08
    1660:	d1 85       	ldd	r29, Z+9	; 0x09
    1662:	ce 01       	movw	r24, r28
    1664:	02 96       	adiw	r24, 0x02	; 2
    1666:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
    166a:	80 91 64 15 	lds	r24, 0x1564	; 0x801564 <uxCurrentNumberOfTasks>
    166e:	81 50       	subi	r24, 0x01	; 1
    1670:	80 93 64 15 	sts	0x1564, r24	; 0x801564 <uxCurrentNumberOfTasks>
    1674:	80 91 70 15 	lds	r24, 0x1570	; 0x801570 <uxDeletedTasksWaitingCleanUp>
    1678:	81 50       	subi	r24, 0x01	; 1
    167a:	80 93 70 15 	sts	0x1570, r24	; 0x801570 <uxDeletedTasksWaitingCleanUp>
    167e:	0f 90       	pop	r0
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	ce 01       	movw	r24, r28
    1684:	be de       	rcall	.-644    	; 0x1402 <prvDeleteTCB>
    1686:	80 91 70 15 	lds	r24, 0x1570	; 0x801570 <uxDeletedTasksWaitingCleanUp>
    168a:	81 11       	cpse	r24, r1
    168c:	e1 cf       	rjmp	.-62     	; 0x1650 <prvCheckTasksWaitingTermination+0x6>
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

00001694 <prvAddCurrentTaskToDelayedList>:
    1694:	8f 92       	push	r8
    1696:	9f 92       	push	r9
    1698:	af 92       	push	r10
    169a:	bf 92       	push	r11
    169c:	cf 92       	push	r12
    169e:	df 92       	push	r13
    16a0:	ef 92       	push	r14
    16a2:	ff 92       	push	r15
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	6b 01       	movw	r12, r22
    16aa:	7c 01       	movw	r14, r24
    16ac:	c4 2f       	mov	r28, r20
    16ae:	80 90 60 15 	lds	r8, 0x1560	; 0x801560 <xTickCount>
    16b2:	90 90 61 15 	lds	r9, 0x1561	; 0x801561 <xTickCount+0x1>
    16b6:	a0 90 62 15 	lds	r10, 0x1562	; 0x801562 <xTickCount+0x2>
    16ba:	b0 90 63 15 	lds	r11, 0x1563	; 0x801563 <xTickCount+0x3>
    16be:	80 91 0f 16 	lds	r24, 0x160F	; 0x80160f <pxCurrentTCB>
    16c2:	90 91 10 16 	lds	r25, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    16c6:	02 96       	adiw	r24, 0x02	; 2
    16c8:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
    16cc:	8f ef       	ldi	r24, 0xFF	; 255
    16ce:	c8 16       	cp	r12, r24
    16d0:	d8 06       	cpc	r13, r24
    16d2:	e8 06       	cpc	r14, r24
    16d4:	f8 06       	cpc	r15, r24
    16d6:	b1 f5       	brne	.+108    	; 0x1744 <prvAddCurrentTaskToDelayedList+0xb0>
    16d8:	cc 23       	and	r28, r28
    16da:	a1 f1       	breq	.+104    	; 0x1744 <prvAddCurrentTaskToDelayedList+0xb0>
    16dc:	e5 e6       	ldi	r30, 0x65	; 101
    16de:	f5 e1       	ldi	r31, 0x15	; 21
    16e0:	a1 81       	ldd	r26, Z+1	; 0x01
    16e2:	b2 81       	ldd	r27, Z+2	; 0x02
    16e4:	c0 91 0f 16 	lds	r28, 0x160F	; 0x80160f <pxCurrentTCB>
    16e8:	d0 91 10 16 	lds	r29, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    16ec:	bf 83       	std	Y+7, r27	; 0x07
    16ee:	ae 83       	std	Y+6, r26	; 0x06
    16f0:	c0 91 0f 16 	lds	r28, 0x160F	; 0x80160f <pxCurrentTCB>
    16f4:	d0 91 10 16 	lds	r29, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    16f8:	16 96       	adiw	r26, 0x06	; 6
    16fa:	8d 91       	ld	r24, X+
    16fc:	9c 91       	ld	r25, X
    16fe:	17 97       	sbiw	r26, 0x07	; 7
    1700:	99 87       	std	Y+9, r25	; 0x09
    1702:	88 87       	std	Y+8, r24	; 0x08
    1704:	16 96       	adiw	r26, 0x06	; 6
    1706:	cd 91       	ld	r28, X+
    1708:	dc 91       	ld	r29, X
    170a:	17 97       	sbiw	r26, 0x07	; 7
    170c:	80 91 0f 16 	lds	r24, 0x160F	; 0x80160f <pxCurrentTCB>
    1710:	90 91 10 16 	lds	r25, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    1714:	02 96       	adiw	r24, 0x02	; 2
    1716:	9d 83       	std	Y+5, r25	; 0x05
    1718:	8c 83       	std	Y+4, r24	; 0x04
    171a:	80 91 0f 16 	lds	r24, 0x160F	; 0x80160f <pxCurrentTCB>
    171e:	90 91 10 16 	lds	r25, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    1722:	02 96       	adiw	r24, 0x02	; 2
    1724:	17 96       	adiw	r26, 0x07	; 7
    1726:	9c 93       	st	X, r25
    1728:	8e 93       	st	-X, r24
    172a:	16 97       	sbiw	r26, 0x06	; 6
    172c:	a0 91 0f 16 	lds	r26, 0x160F	; 0x80160f <pxCurrentTCB>
    1730:	b0 91 10 16 	lds	r27, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    1734:	1d 96       	adiw	r26, 0x0d	; 13
    1736:	fc 93       	st	X, r31
    1738:	ee 93       	st	-X, r30
    173a:	1c 97       	sbiw	r26, 0x0c	; 12
    173c:	80 81       	ld	r24, Z
    173e:	8f 5f       	subi	r24, 0xFF	; 255
    1740:	80 83       	st	Z, r24
    1742:	3f c0       	rjmp	.+126    	; 0x17c2 <prvAddCurrentTaskToDelayedList+0x12e>
    1744:	c8 0c       	add	r12, r8
    1746:	d9 1c       	adc	r13, r9
    1748:	ea 1c       	adc	r14, r10
    174a:	fb 1c       	adc	r15, r11
    174c:	e0 91 0f 16 	lds	r30, 0x160F	; 0x80160f <pxCurrentTCB>
    1750:	f0 91 10 16 	lds	r31, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    1754:	c2 82       	std	Z+2, r12	; 0x02
    1756:	d3 82       	std	Z+3, r13	; 0x03
    1758:	e4 82       	std	Z+4, r14	; 0x04
    175a:	f5 82       	std	Z+5, r15	; 0x05
    175c:	c8 14       	cp	r12, r8
    175e:	d9 04       	cpc	r13, r9
    1760:	ea 04       	cpc	r14, r10
    1762:	fb 04       	cpc	r15, r11
    1764:	68 f4       	brcc	.+26     	; 0x1780 <prvAddCurrentTaskToDelayedList+0xec>
    1766:	60 91 0f 16 	lds	r22, 0x160F	; 0x80160f <pxCurrentTCB>
    176a:	70 91 10 16 	lds	r23, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    176e:	80 91 87 15 	lds	r24, 0x1587	; 0x801587 <pxOverflowDelayedTaskList>
    1772:	90 91 88 15 	lds	r25, 0x1588	; 0x801588 <pxOverflowDelayedTaskList+0x1>
    1776:	6e 5f       	subi	r22, 0xFE	; 254
    1778:	7f 4f       	sbci	r23, 0xFF	; 255
    177a:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    177e:	21 c0       	rjmp	.+66     	; 0x17c2 <prvAddCurrentTaskToDelayedList+0x12e>
    1780:	60 91 0f 16 	lds	r22, 0x160F	; 0x80160f <pxCurrentTCB>
    1784:	70 91 10 16 	lds	r23, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    1788:	80 91 89 15 	lds	r24, 0x1589	; 0x801589 <pxDelayedTaskList>
    178c:	90 91 8a 15 	lds	r25, 0x158A	; 0x80158a <pxDelayedTaskList+0x1>
    1790:	6e 5f       	subi	r22, 0xFE	; 254
    1792:	7f 4f       	sbci	r23, 0xFF	; 255
    1794:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    1798:	80 91 53 15 	lds	r24, 0x1553	; 0x801553 <xNextTaskUnblockTime>
    179c:	90 91 54 15 	lds	r25, 0x1554	; 0x801554 <xNextTaskUnblockTime+0x1>
    17a0:	a0 91 55 15 	lds	r26, 0x1555	; 0x801555 <xNextTaskUnblockTime+0x2>
    17a4:	b0 91 56 15 	lds	r27, 0x1556	; 0x801556 <xNextTaskUnblockTime+0x3>
    17a8:	c8 16       	cp	r12, r24
    17aa:	d9 06       	cpc	r13, r25
    17ac:	ea 06       	cpc	r14, r26
    17ae:	fb 06       	cpc	r15, r27
    17b0:	40 f4       	brcc	.+16     	; 0x17c2 <prvAddCurrentTaskToDelayedList+0x12e>
    17b2:	c0 92 53 15 	sts	0x1553, r12	; 0x801553 <xNextTaskUnblockTime>
    17b6:	d0 92 54 15 	sts	0x1554, r13	; 0x801554 <xNextTaskUnblockTime+0x1>
    17ba:	e0 92 55 15 	sts	0x1555, r14	; 0x801555 <xNextTaskUnblockTime+0x2>
    17be:	f0 92 56 15 	sts	0x1556, r15	; 0x801556 <xNextTaskUnblockTime+0x3>
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	ff 90       	pop	r15
    17c8:	ef 90       	pop	r14
    17ca:	df 90       	pop	r13
    17cc:	cf 90       	pop	r12
    17ce:	bf 90       	pop	r11
    17d0:	af 90       	pop	r10
    17d2:	9f 90       	pop	r9
    17d4:	8f 90       	pop	r8
    17d6:	08 95       	ret

000017d8 <xTaskCreate>:
    17d8:	2f 92       	push	r2
    17da:	3f 92       	push	r3
    17dc:	4f 92       	push	r4
    17de:	5f 92       	push	r5
    17e0:	6f 92       	push	r6
    17e2:	7f 92       	push	r7
    17e4:	8f 92       	push	r8
    17e6:	9f 92       	push	r9
    17e8:	af 92       	push	r10
    17ea:	bf 92       	push	r11
    17ec:	cf 92       	push	r12
    17ee:	df 92       	push	r13
    17f0:	ef 92       	push	r14
    17f2:	ff 92       	push	r15
    17f4:	0f 93       	push	r16
    17f6:	cf 93       	push	r28
    17f8:	df 93       	push	r29
    17fa:	3c 01       	movw	r6, r24
    17fc:	1b 01       	movw	r2, r22
    17fe:	4a 01       	movw	r8, r20
    1800:	29 01       	movw	r4, r18
    1802:	ca 01       	movw	r24, r20
    1804:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <pvPortMalloc>
    1808:	6c 01       	movw	r12, r24
    180a:	89 2b       	or	r24, r25
    180c:	71 f0       	breq	.+28     	; 0x182a <xTaskCreate+0x52>
    180e:	84 e3       	ldi	r24, 0x34	; 52
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <pvPortMalloc>
    1816:	ec 01       	movw	r28, r24
    1818:	89 2b       	or	r24, r25
    181a:	19 f0       	breq	.+6      	; 0x1822 <xTaskCreate+0x4a>
    181c:	dc 8e       	std	Y+28, r13	; 0x1c
    181e:	cb 8e       	std	Y+27, r12	; 0x1b
    1820:	06 c0       	rjmp	.+12     	; 0x182e <xTaskCreate+0x56>
    1822:	c6 01       	movw	r24, r12
    1824:	0e 94 24 02 	call	0x448	; 0x448 <vPortFree>
    1828:	02 c0       	rjmp	.+4      	; 0x182e <xTaskCreate+0x56>
    182a:	c0 e0       	ldi	r28, 0x00	; 0
    182c:	d0 e0       	ldi	r29, 0x00	; 0
    182e:	20 97       	sbiw	r28, 0x00	; 0
    1830:	61 f0       	breq	.+24     	; 0x184a <xTaskCreate+0x72>
    1832:	a1 2c       	mov	r10, r1
    1834:	b1 2c       	mov	r11, r1
    1836:	6e 01       	movw	r12, r28
    1838:	92 01       	movw	r18, r4
    183a:	a4 01       	movw	r20, r8
    183c:	b1 01       	movw	r22, r2
    183e:	c3 01       	movw	r24, r6
    1840:	eb dd       	rcall	.-1066   	; 0x1418 <prvInitialiseNewTask>
    1842:	ce 01       	movw	r24, r28
    1844:	94 de       	rcall	.-728    	; 0x156e <prvAddNewTaskToReadyList>
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	01 c0       	rjmp	.+2      	; 0x184c <xTaskCreate+0x74>
    184a:	8f ef       	ldi	r24, 0xFF	; 255
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	0f 91       	pop	r16
    1852:	ff 90       	pop	r15
    1854:	ef 90       	pop	r14
    1856:	df 90       	pop	r13
    1858:	cf 90       	pop	r12
    185a:	bf 90       	pop	r11
    185c:	af 90       	pop	r10
    185e:	9f 90       	pop	r9
    1860:	8f 90       	pop	r8
    1862:	7f 90       	pop	r7
    1864:	6f 90       	pop	r6
    1866:	5f 90       	pop	r5
    1868:	4f 90       	pop	r4
    186a:	3f 90       	pop	r3
    186c:	2f 90       	pop	r2
    186e:	08 95       	ret

00001870 <vTaskStartScheduler>:
    1870:	ef 92       	push	r14
    1872:	ff 92       	push	r15
    1874:	0f 93       	push	r16
    1876:	0f 2e       	mov	r0, r31
    1878:	f1 e5       	ldi	r31, 0x51	; 81
    187a:	ef 2e       	mov	r14, r31
    187c:	f5 e1       	ldi	r31, 0x15	; 21
    187e:	ff 2e       	mov	r15, r31
    1880:	f0 2d       	mov	r31, r0
    1882:	00 e0       	ldi	r16, 0x00	; 0
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 ec       	ldi	r20, 0xC0	; 192
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	6f e6       	ldi	r22, 0x6F	; 111
    188e:	72 e0       	ldi	r23, 0x02	; 2
    1890:	8d ec       	ldi	r24, 0xCD	; 205
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	a1 df       	rcall	.-190    	; 0x17d8 <xTaskCreate>
    1896:	81 30       	cpi	r24, 0x01	; 1
    1898:	11 f4       	brne	.+4      	; 0x189e <vTaskStartScheduler+0x2e>
    189a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <xTimerCreateTimerTask>
    189e:	81 30       	cpi	r24, 0x01	; 1
    18a0:	c9 f4       	brne	.+50     	; 0x18d4 <vTaskStartScheduler+0x64>
    18a2:	f8 94       	cli
    18a4:	8f ef       	ldi	r24, 0xFF	; 255
    18a6:	9f ef       	ldi	r25, 0xFF	; 255
    18a8:	dc 01       	movw	r26, r24
    18aa:	80 93 53 15 	sts	0x1553, r24	; 0x801553 <xNextTaskUnblockTime>
    18ae:	90 93 54 15 	sts	0x1554, r25	; 0x801554 <xNextTaskUnblockTime+0x1>
    18b2:	a0 93 55 15 	sts	0x1555, r26	; 0x801555 <xNextTaskUnblockTime+0x2>
    18b6:	b0 93 56 15 	sts	0x1556, r27	; 0x801556 <xNextTaskUnblockTime+0x3>
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	80 93 5e 15 	sts	0x155E, r24	; 0x80155e <xSchedulerRunning>
    18c0:	10 92 60 15 	sts	0x1560, r1	; 0x801560 <xTickCount>
    18c4:	10 92 61 15 	sts	0x1561, r1	; 0x801561 <xTickCount+0x1>
    18c8:	10 92 62 15 	sts	0x1562, r1	; 0x801562 <xTickCount+0x2>
    18cc:	10 92 63 15 	sts	0x1563, r1	; 0x801563 <xTickCount+0x3>
    18d0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <xPortStartScheduler>
    18d4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    18d8:	0f 91       	pop	r16
    18da:	ff 90       	pop	r15
    18dc:	ef 90       	pop	r14
    18de:	08 95       	ret

000018e0 <vTaskSuspendAll>:
    18e0:	80 91 50 15 	lds	r24, 0x1550	; 0x801550 <uxSchedulerSuspended>
    18e4:	8f 5f       	subi	r24, 0xFF	; 255
    18e6:	80 93 50 15 	sts	0x1550, r24	; 0x801550 <uxSchedulerSuspended>
    18ea:	08 95       	ret

000018ec <xTaskGetTickCount>:
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	0f 92       	push	r0
    18f2:	60 91 60 15 	lds	r22, 0x1560	; 0x801560 <xTickCount>
    18f6:	70 91 61 15 	lds	r23, 0x1561	; 0x801561 <xTickCount+0x1>
    18fa:	80 91 62 15 	lds	r24, 0x1562	; 0x801562 <xTickCount+0x2>
    18fe:	90 91 63 15 	lds	r25, 0x1563	; 0x801563 <xTickCount+0x3>
    1902:	0f 90       	pop	r0
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	08 95       	ret

00001908 <xTaskIncrementTick>:
    1908:	cf 92       	push	r12
    190a:	df 92       	push	r13
    190c:	ef 92       	push	r14
    190e:	ff 92       	push	r15
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
    1914:	80 91 50 15 	lds	r24, 0x1550	; 0x801550 <uxSchedulerSuspended>
    1918:	81 11       	cpse	r24, r1
    191a:	05 c1       	rjmp	.+522    	; 0x1b26 <xTaskIncrementTick+0x21e>
    191c:	c0 90 60 15 	lds	r12, 0x1560	; 0x801560 <xTickCount>
    1920:	d0 90 61 15 	lds	r13, 0x1561	; 0x801561 <xTickCount+0x1>
    1924:	e0 90 62 15 	lds	r14, 0x1562	; 0x801562 <xTickCount+0x2>
    1928:	f0 90 63 15 	lds	r15, 0x1563	; 0x801563 <xTickCount+0x3>
    192c:	8f ef       	ldi	r24, 0xFF	; 255
    192e:	c8 1a       	sub	r12, r24
    1930:	d8 0a       	sbc	r13, r24
    1932:	e8 0a       	sbc	r14, r24
    1934:	f8 0a       	sbc	r15, r24
    1936:	c0 92 60 15 	sts	0x1560, r12	; 0x801560 <xTickCount>
    193a:	d0 92 61 15 	sts	0x1561, r13	; 0x801561 <xTickCount+0x1>
    193e:	e0 92 62 15 	sts	0x1562, r14	; 0x801562 <xTickCount+0x2>
    1942:	f0 92 63 15 	sts	0x1563, r15	; 0x801563 <xTickCount+0x3>
    1946:	c1 14       	cp	r12, r1
    1948:	d1 04       	cpc	r13, r1
    194a:	e1 04       	cpc	r14, r1
    194c:	f1 04       	cpc	r15, r1
    194e:	b1 f4       	brne	.+44     	; 0x197c <xTaskIncrementTick+0x74>
    1950:	80 91 89 15 	lds	r24, 0x1589	; 0x801589 <pxDelayedTaskList>
    1954:	90 91 8a 15 	lds	r25, 0x158A	; 0x80158a <pxDelayedTaskList+0x1>
    1958:	20 91 87 15 	lds	r18, 0x1587	; 0x801587 <pxOverflowDelayedTaskList>
    195c:	30 91 88 15 	lds	r19, 0x1588	; 0x801588 <pxOverflowDelayedTaskList+0x1>
    1960:	30 93 8a 15 	sts	0x158A, r19	; 0x80158a <pxDelayedTaskList+0x1>
    1964:	20 93 89 15 	sts	0x1589, r18	; 0x801589 <pxDelayedTaskList>
    1968:	90 93 88 15 	sts	0x1588, r25	; 0x801588 <pxOverflowDelayedTaskList+0x1>
    196c:	80 93 87 15 	sts	0x1587, r24	; 0x801587 <pxOverflowDelayedTaskList>
    1970:	80 91 58 15 	lds	r24, 0x1558	; 0x801558 <xNumOfOverflows>
    1974:	8f 5f       	subi	r24, 0xFF	; 255
    1976:	80 93 58 15 	sts	0x1558, r24	; 0x801558 <xNumOfOverflows>
    197a:	1c dd       	rcall	.-1480   	; 0x13b4 <prvResetNextTaskUnblockTime>
    197c:	80 91 53 15 	lds	r24, 0x1553	; 0x801553 <xNextTaskUnblockTime>
    1980:	90 91 54 15 	lds	r25, 0x1554	; 0x801554 <xNextTaskUnblockTime+0x1>
    1984:	a0 91 55 15 	lds	r26, 0x1555	; 0x801555 <xNextTaskUnblockTime+0x2>
    1988:	b0 91 56 15 	lds	r27, 0x1556	; 0x801556 <xNextTaskUnblockTime+0x3>
    198c:	c8 16       	cp	r12, r24
    198e:	d9 06       	cpc	r13, r25
    1990:	ea 06       	cpc	r14, r26
    1992:	fb 06       	cpc	r15, r27
    1994:	20 f4       	brcc	.+8      	; 0x199e <xTaskIncrementTick+0x96>
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	b2 c0       	rjmp	.+356    	; 0x1afe <xTaskIncrementTick+0x1f6>
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	01 c0       	rjmp	.+2      	; 0x19a0 <xTaskIncrementTick+0x98>
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	e0 91 89 15 	lds	r30, 0x1589	; 0x801589 <pxDelayedTaskList>
    19a4:	f0 91 8a 15 	lds	r31, 0x158A	; 0x80158a <pxDelayedTaskList+0x1>
    19a8:	90 81       	ld	r25, Z
    19aa:	91 11       	cpse	r25, r1
    19ac:	0c c0       	rjmp	.+24     	; 0x19c6 <xTaskIncrementTick+0xbe>
    19ae:	4f ef       	ldi	r20, 0xFF	; 255
    19b0:	5f ef       	ldi	r21, 0xFF	; 255
    19b2:	ba 01       	movw	r22, r20
    19b4:	40 93 53 15 	sts	0x1553, r20	; 0x801553 <xNextTaskUnblockTime>
    19b8:	50 93 54 15 	sts	0x1554, r21	; 0x801554 <xNextTaskUnblockTime+0x1>
    19bc:	60 93 55 15 	sts	0x1555, r22	; 0x801555 <xNextTaskUnblockTime+0x2>
    19c0:	70 93 56 15 	sts	0x1556, r23	; 0x801556 <xNextTaskUnblockTime+0x3>
    19c4:	9c c0       	rjmp	.+312    	; 0x1afe <xTaskIncrementTick+0x1f6>
    19c6:	e0 91 89 15 	lds	r30, 0x1589	; 0x801589 <pxDelayedTaskList>
    19ca:	f0 91 8a 15 	lds	r31, 0x158A	; 0x80158a <pxDelayedTaskList+0x1>
    19ce:	07 80       	ldd	r0, Z+7	; 0x07
    19d0:	f0 85       	ldd	r31, Z+8	; 0x08
    19d2:	e0 2d       	mov	r30, r0
    19d4:	00 84       	ldd	r0, Z+8	; 0x08
    19d6:	f1 85       	ldd	r31, Z+9	; 0x09
    19d8:	e0 2d       	mov	r30, r0
    19da:	42 81       	ldd	r20, Z+2	; 0x02
    19dc:	53 81       	ldd	r21, Z+3	; 0x03
    19de:	64 81       	ldd	r22, Z+4	; 0x04
    19e0:	75 81       	ldd	r23, Z+5	; 0x05
    19e2:	c4 16       	cp	r12, r20
    19e4:	d5 06       	cpc	r13, r21
    19e6:	e6 06       	cpc	r14, r22
    19e8:	f7 06       	cpc	r15, r23
    19ea:	48 f4       	brcc	.+18     	; 0x19fe <xTaskIncrementTick+0xf6>
    19ec:	40 93 53 15 	sts	0x1553, r20	; 0x801553 <xNextTaskUnblockTime>
    19f0:	50 93 54 15 	sts	0x1554, r21	; 0x801554 <xNextTaskUnblockTime+0x1>
    19f4:	60 93 55 15 	sts	0x1555, r22	; 0x801555 <xNextTaskUnblockTime+0x2>
    19f8:	70 93 56 15 	sts	0x1556, r23	; 0x801556 <xNextTaskUnblockTime+0x3>
    19fc:	80 c0       	rjmp	.+256    	; 0x1afe <xTaskIncrementTick+0x1f6>
    19fe:	a4 85       	ldd	r26, Z+12	; 0x0c
    1a00:	b5 85       	ldd	r27, Z+13	; 0x0d
    1a02:	c6 81       	ldd	r28, Z+6	; 0x06
    1a04:	d7 81       	ldd	r29, Z+7	; 0x07
    1a06:	20 85       	ldd	r18, Z+8	; 0x08
    1a08:	31 85       	ldd	r19, Z+9	; 0x09
    1a0a:	3f 83       	std	Y+7, r19	; 0x07
    1a0c:	2e 83       	std	Y+6, r18	; 0x06
    1a0e:	c0 85       	ldd	r28, Z+8	; 0x08
    1a10:	d1 85       	ldd	r29, Z+9	; 0x09
    1a12:	26 81       	ldd	r18, Z+6	; 0x06
    1a14:	37 81       	ldd	r19, Z+7	; 0x07
    1a16:	3d 83       	std	Y+5, r19	; 0x05
    1a18:	2c 83       	std	Y+4, r18	; 0x04
    1a1a:	11 96       	adiw	r26, 0x01	; 1
    1a1c:	4d 91       	ld	r20, X+
    1a1e:	5c 91       	ld	r21, X
    1a20:	12 97       	sbiw	r26, 0x02	; 2
    1a22:	9f 01       	movw	r18, r30
    1a24:	2e 5f       	subi	r18, 0xFE	; 254
    1a26:	3f 4f       	sbci	r19, 0xFF	; 255
    1a28:	42 17       	cp	r20, r18
    1a2a:	53 07       	cpc	r21, r19
    1a2c:	31 f4       	brne	.+12     	; 0x1a3a <xTaskIncrementTick+0x132>
    1a2e:	40 85       	ldd	r20, Z+8	; 0x08
    1a30:	51 85       	ldd	r21, Z+9	; 0x09
    1a32:	12 96       	adiw	r26, 0x02	; 2
    1a34:	5c 93       	st	X, r21
    1a36:	4e 93       	st	-X, r20
    1a38:	11 97       	sbiw	r26, 0x01	; 1
    1a3a:	15 86       	std	Z+13, r1	; 0x0d
    1a3c:	14 86       	std	Z+12, r1	; 0x0c
    1a3e:	9c 91       	ld	r25, X
    1a40:	91 50       	subi	r25, 0x01	; 1
    1a42:	9c 93       	st	X, r25
    1a44:	a0 8d       	ldd	r26, Z+24	; 0x18
    1a46:	b1 8d       	ldd	r27, Z+25	; 0x19
    1a48:	10 97       	sbiw	r26, 0x00	; 0
    1a4a:	09 f1       	breq	.+66     	; 0x1a8e <xTaskIncrementTick+0x186>
    1a4c:	c2 89       	ldd	r28, Z+18	; 0x12
    1a4e:	d3 89       	ldd	r29, Z+19	; 0x13
    1a50:	44 89       	ldd	r20, Z+20	; 0x14
    1a52:	55 89       	ldd	r21, Z+21	; 0x15
    1a54:	5f 83       	std	Y+7, r21	; 0x07
    1a56:	4e 83       	std	Y+6, r20	; 0x06
    1a58:	c4 89       	ldd	r28, Z+20	; 0x14
    1a5a:	d5 89       	ldd	r29, Z+21	; 0x15
    1a5c:	42 89       	ldd	r20, Z+18	; 0x12
    1a5e:	53 89       	ldd	r21, Z+19	; 0x13
    1a60:	5d 83       	std	Y+5, r21	; 0x05
    1a62:	4c 83       	std	Y+4, r20	; 0x04
    1a64:	11 96       	adiw	r26, 0x01	; 1
    1a66:	6d 91       	ld	r22, X+
    1a68:	7c 91       	ld	r23, X
    1a6a:	12 97       	sbiw	r26, 0x02	; 2
    1a6c:	af 01       	movw	r20, r30
    1a6e:	42 5f       	subi	r20, 0xF2	; 242
    1a70:	5f 4f       	sbci	r21, 0xFF	; 255
    1a72:	64 17       	cp	r22, r20
    1a74:	75 07       	cpc	r23, r21
    1a76:	31 f4       	brne	.+12     	; 0x1a84 <xTaskIncrementTick+0x17c>
    1a78:	44 89       	ldd	r20, Z+20	; 0x14
    1a7a:	55 89       	ldd	r21, Z+21	; 0x15
    1a7c:	12 96       	adiw	r26, 0x02	; 2
    1a7e:	5c 93       	st	X, r21
    1a80:	4e 93       	st	-X, r20
    1a82:	11 97       	sbiw	r26, 0x01	; 1
    1a84:	11 8e       	std	Z+25, r1	; 0x19
    1a86:	10 8e       	std	Z+24, r1	; 0x18
    1a88:	9c 91       	ld	r25, X
    1a8a:	91 50       	subi	r25, 0x01	; 1
    1a8c:	9c 93       	st	X, r25
    1a8e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1a90:	90 91 5f 15 	lds	r25, 0x155F	; 0x80155f <uxTopReadyPriority>
    1a94:	9a 17       	cp	r25, r26
    1a96:	10 f4       	brcc	.+4      	; 0x1a9c <xTaskIncrementTick+0x194>
    1a98:	a0 93 5f 15 	sts	0x155F, r26	; 0x80155f <uxTopReadyPriority>
    1a9c:	9b e0       	ldi	r25, 0x0B	; 11
    1a9e:	9a 9f       	mul	r25, r26
    1aa0:	d0 01       	movw	r26, r0
    1aa2:	11 24       	eor	r1, r1
    1aa4:	af 55       	subi	r26, 0x5F	; 95
    1aa6:	ba 4e       	sbci	r27, 0xEA	; 234
    1aa8:	11 96       	adiw	r26, 0x01	; 1
    1aaa:	0d 90       	ld	r0, X+
    1aac:	bc 91       	ld	r27, X
    1aae:	a0 2d       	mov	r26, r0
    1ab0:	b7 83       	std	Z+7, r27	; 0x07
    1ab2:	a6 83       	std	Z+6, r26	; 0x06
    1ab4:	16 96       	adiw	r26, 0x06	; 6
    1ab6:	4d 91       	ld	r20, X+
    1ab8:	5c 91       	ld	r21, X
    1aba:	17 97       	sbiw	r26, 0x07	; 7
    1abc:	51 87       	std	Z+9, r21	; 0x09
    1abe:	40 87       	std	Z+8, r20	; 0x08
    1ac0:	16 96       	adiw	r26, 0x06	; 6
    1ac2:	cd 91       	ld	r28, X+
    1ac4:	dc 91       	ld	r29, X
    1ac6:	17 97       	sbiw	r26, 0x07	; 7
    1ac8:	3d 83       	std	Y+5, r19	; 0x05
    1aca:	2c 83       	std	Y+4, r18	; 0x04
    1acc:	17 96       	adiw	r26, 0x07	; 7
    1ace:	3c 93       	st	X, r19
    1ad0:	2e 93       	st	-X, r18
    1ad2:	16 97       	sbiw	r26, 0x06	; 6
    1ad4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ad6:	9a 9f       	mul	r25, r26
    1ad8:	d0 01       	movw	r26, r0
    1ada:	11 24       	eor	r1, r1
    1adc:	af 55       	subi	r26, 0x5F	; 95
    1ade:	ba 4e       	sbci	r27, 0xEA	; 234
    1ae0:	b5 87       	std	Z+13, r27	; 0x0d
    1ae2:	a4 87       	std	Z+12, r26	; 0x0c
    1ae4:	9c 91       	ld	r25, X
    1ae6:	9f 5f       	subi	r25, 0xFF	; 255
    1ae8:	9c 93       	st	X, r25
    1aea:	22 8d       	ldd	r18, Z+26	; 0x1a
    1aec:	e0 91 0f 16 	lds	r30, 0x160F	; 0x80160f <pxCurrentTCB>
    1af0:	f0 91 10 16 	lds	r31, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    1af4:	92 8d       	ldd	r25, Z+26	; 0x1a
    1af6:	29 17       	cp	r18, r25
    1af8:	08 f0       	brcs	.+2      	; 0x1afc <xTaskIncrementTick+0x1f4>
    1afa:	4f cf       	rjmp	.-354    	; 0x199a <xTaskIncrementTick+0x92>
    1afc:	51 cf       	rjmp	.-350    	; 0x19a0 <xTaskIncrementTick+0x98>
    1afe:	e0 91 0f 16 	lds	r30, 0x160F	; 0x80160f <pxCurrentTCB>
    1b02:	f0 91 10 16 	lds	r31, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    1b06:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1b08:	9b e0       	ldi	r25, 0x0B	; 11
    1b0a:	e9 9f       	mul	r30, r25
    1b0c:	f0 01       	movw	r30, r0
    1b0e:	11 24       	eor	r1, r1
    1b10:	ef 55       	subi	r30, 0x5F	; 95
    1b12:	fa 4e       	sbci	r31, 0xEA	; 234
    1b14:	90 81       	ld	r25, Z
    1b16:	92 30       	cpi	r25, 0x02	; 2
    1b18:	08 f0       	brcs	.+2      	; 0x1b1c <xTaskIncrementTick+0x214>
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 91 59 15 	lds	r25, 0x1559	; 0x801559 <xYieldPending>
    1b20:	91 11       	cpse	r25, r1
    1b22:	16 c0       	rjmp	.+44     	; 0x1b50 <xTaskIncrementTick+0x248>
    1b24:	16 c0       	rjmp	.+44     	; 0x1b52 <xTaskIncrementTick+0x24a>
    1b26:	80 91 5a 15 	lds	r24, 0x155A	; 0x80155a <xPendedTicks>
    1b2a:	90 91 5b 15 	lds	r25, 0x155B	; 0x80155b <xPendedTicks+0x1>
    1b2e:	a0 91 5c 15 	lds	r26, 0x155C	; 0x80155c <xPendedTicks+0x2>
    1b32:	b0 91 5d 15 	lds	r27, 0x155D	; 0x80155d <xPendedTicks+0x3>
    1b36:	01 96       	adiw	r24, 0x01	; 1
    1b38:	a1 1d       	adc	r26, r1
    1b3a:	b1 1d       	adc	r27, r1
    1b3c:	80 93 5a 15 	sts	0x155A, r24	; 0x80155a <xPendedTicks>
    1b40:	90 93 5b 15 	sts	0x155B, r25	; 0x80155b <xPendedTicks+0x1>
    1b44:	a0 93 5c 15 	sts	0x155C, r26	; 0x80155c <xPendedTicks+0x2>
    1b48:	b0 93 5d 15 	sts	0x155D, r27	; 0x80155d <xPendedTicks+0x3>
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	01 c0       	rjmp	.+2      	; 0x1b52 <xTaskIncrementTick+0x24a>
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	ff 90       	pop	r15
    1b58:	ef 90       	pop	r14
    1b5a:	df 90       	pop	r13
    1b5c:	cf 90       	pop	r12
    1b5e:	08 95       	ret

00001b60 <xTaskResumeAll>:
    1b60:	cf 92       	push	r12
    1b62:	df 92       	push	r13
    1b64:	ef 92       	push	r14
    1b66:	ff 92       	push	r15
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	0f 92       	push	r0
    1b72:	80 91 50 15 	lds	r24, 0x1550	; 0x801550 <uxSchedulerSuspended>
    1b76:	81 50       	subi	r24, 0x01	; 1
    1b78:	80 93 50 15 	sts	0x1550, r24	; 0x801550 <uxSchedulerSuspended>
    1b7c:	80 91 50 15 	lds	r24, 0x1550	; 0x801550 <uxSchedulerSuspended>
    1b80:	81 11       	cpse	r24, r1
    1b82:	be c0       	rjmp	.+380    	; 0x1d00 <xTaskResumeAll+0x1a0>
    1b84:	80 91 64 15 	lds	r24, 0x1564	; 0x801564 <uxCurrentNumberOfTasks>
    1b88:	81 11       	cpse	r24, r1
    1b8a:	88 c0       	rjmp	.+272    	; 0x1c9c <xTaskResumeAll+0x13c>
    1b8c:	bc c0       	rjmp	.+376    	; 0x1d06 <xTaskResumeAll+0x1a6>
    1b8e:	e0 91 83 15 	lds	r30, 0x1583	; 0x801583 <xPendingReadyList+0x7>
    1b92:	f0 91 84 15 	lds	r31, 0x1584	; 0x801584 <xPendingReadyList+0x8>
    1b96:	00 84       	ldd	r0, Z+8	; 0x08
    1b98:	f1 85       	ldd	r31, Z+9	; 0x09
    1b9a:	e0 2d       	mov	r30, r0
    1b9c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1b9e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1ba0:	c2 89       	ldd	r28, Z+18	; 0x12
    1ba2:	d3 89       	ldd	r29, Z+19	; 0x13
    1ba4:	84 89       	ldd	r24, Z+20	; 0x14
    1ba6:	95 89       	ldd	r25, Z+21	; 0x15
    1ba8:	9f 83       	std	Y+7, r25	; 0x07
    1baa:	8e 83       	std	Y+6, r24	; 0x06
    1bac:	c4 89       	ldd	r28, Z+20	; 0x14
    1bae:	d5 89       	ldd	r29, Z+21	; 0x15
    1bb0:	82 89       	ldd	r24, Z+18	; 0x12
    1bb2:	93 89       	ldd	r25, Z+19	; 0x13
    1bb4:	9d 83       	std	Y+5, r25	; 0x05
    1bb6:	8c 83       	std	Y+4, r24	; 0x04
    1bb8:	11 96       	adiw	r26, 0x01	; 1
    1bba:	2d 91       	ld	r18, X+
    1bbc:	3c 91       	ld	r19, X
    1bbe:	12 97       	sbiw	r26, 0x02	; 2
    1bc0:	cf 01       	movw	r24, r30
    1bc2:	0e 96       	adiw	r24, 0x0e	; 14
    1bc4:	28 17       	cp	r18, r24
    1bc6:	39 07       	cpc	r19, r25
    1bc8:	31 f4       	brne	.+12     	; 0x1bd6 <xTaskResumeAll+0x76>
    1bca:	84 89       	ldd	r24, Z+20	; 0x14
    1bcc:	95 89       	ldd	r25, Z+21	; 0x15
    1bce:	12 96       	adiw	r26, 0x02	; 2
    1bd0:	9c 93       	st	X, r25
    1bd2:	8e 93       	st	-X, r24
    1bd4:	11 97       	sbiw	r26, 0x01	; 1
    1bd6:	11 8e       	std	Z+25, r1	; 0x19
    1bd8:	10 8e       	std	Z+24, r1	; 0x18
    1bda:	8c 91       	ld	r24, X
    1bdc:	81 50       	subi	r24, 0x01	; 1
    1bde:	8c 93       	st	X, r24
    1be0:	a4 85       	ldd	r26, Z+12	; 0x0c
    1be2:	b5 85       	ldd	r27, Z+13	; 0x0d
    1be4:	c6 81       	ldd	r28, Z+6	; 0x06
    1be6:	d7 81       	ldd	r29, Z+7	; 0x07
    1be8:	80 85       	ldd	r24, Z+8	; 0x08
    1bea:	91 85       	ldd	r25, Z+9	; 0x09
    1bec:	9f 83       	std	Y+7, r25	; 0x07
    1bee:	8e 83       	std	Y+6, r24	; 0x06
    1bf0:	c0 85       	ldd	r28, Z+8	; 0x08
    1bf2:	d1 85       	ldd	r29, Z+9	; 0x09
    1bf4:	86 81       	ldd	r24, Z+6	; 0x06
    1bf6:	97 81       	ldd	r25, Z+7	; 0x07
    1bf8:	9d 83       	std	Y+5, r25	; 0x05
    1bfa:	8c 83       	std	Y+4, r24	; 0x04
    1bfc:	11 96       	adiw	r26, 0x01	; 1
    1bfe:	8d 91       	ld	r24, X+
    1c00:	9c 91       	ld	r25, X
    1c02:	12 97       	sbiw	r26, 0x02	; 2
    1c04:	9f 01       	movw	r18, r30
    1c06:	2e 5f       	subi	r18, 0xFE	; 254
    1c08:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0a:	82 17       	cp	r24, r18
    1c0c:	93 07       	cpc	r25, r19
    1c0e:	31 f4       	brne	.+12     	; 0x1c1c <xTaskResumeAll+0xbc>
    1c10:	80 85       	ldd	r24, Z+8	; 0x08
    1c12:	91 85       	ldd	r25, Z+9	; 0x09
    1c14:	12 96       	adiw	r26, 0x02	; 2
    1c16:	9c 93       	st	X, r25
    1c18:	8e 93       	st	-X, r24
    1c1a:	11 97       	sbiw	r26, 0x01	; 1
    1c1c:	15 86       	std	Z+13, r1	; 0x0d
    1c1e:	14 86       	std	Z+12, r1	; 0x0c
    1c20:	8c 91       	ld	r24, X
    1c22:	81 50       	subi	r24, 0x01	; 1
    1c24:	8c 93       	st	X, r24
    1c26:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c28:	80 91 5f 15 	lds	r24, 0x155F	; 0x80155f <uxTopReadyPriority>
    1c2c:	8a 17       	cp	r24, r26
    1c2e:	10 f4       	brcc	.+4      	; 0x1c34 <xTaskResumeAll+0xd4>
    1c30:	a0 93 5f 15 	sts	0x155F, r26	; 0x80155f <uxTopReadyPriority>
    1c34:	8b e0       	ldi	r24, 0x0B	; 11
    1c36:	8a 9f       	mul	r24, r26
    1c38:	d0 01       	movw	r26, r0
    1c3a:	11 24       	eor	r1, r1
    1c3c:	af 55       	subi	r26, 0x5F	; 95
    1c3e:	ba 4e       	sbci	r27, 0xEA	; 234
    1c40:	11 96       	adiw	r26, 0x01	; 1
    1c42:	0d 90       	ld	r0, X+
    1c44:	bc 91       	ld	r27, X
    1c46:	a0 2d       	mov	r26, r0
    1c48:	b7 83       	std	Z+7, r27	; 0x07
    1c4a:	a6 83       	std	Z+6, r26	; 0x06
    1c4c:	16 96       	adiw	r26, 0x06	; 6
    1c4e:	4d 91       	ld	r20, X+
    1c50:	5c 91       	ld	r21, X
    1c52:	17 97       	sbiw	r26, 0x07	; 7
    1c54:	51 87       	std	Z+9, r21	; 0x09
    1c56:	40 87       	std	Z+8, r20	; 0x08
    1c58:	16 96       	adiw	r26, 0x06	; 6
    1c5a:	cd 91       	ld	r28, X+
    1c5c:	dc 91       	ld	r29, X
    1c5e:	17 97       	sbiw	r26, 0x07	; 7
    1c60:	3d 83       	std	Y+5, r19	; 0x05
    1c62:	2c 83       	std	Y+4, r18	; 0x04
    1c64:	17 96       	adiw	r26, 0x07	; 7
    1c66:	3c 93       	st	X, r19
    1c68:	2e 93       	st	-X, r18
    1c6a:	16 97       	sbiw	r26, 0x06	; 6
    1c6c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c6e:	8a 9f       	mul	r24, r26
    1c70:	d0 01       	movw	r26, r0
    1c72:	11 24       	eor	r1, r1
    1c74:	af 55       	subi	r26, 0x5F	; 95
    1c76:	ba 4e       	sbci	r27, 0xEA	; 234
    1c78:	b5 87       	std	Z+13, r27	; 0x0d
    1c7a:	a4 87       	std	Z+12, r26	; 0x0c
    1c7c:	8c 91       	ld	r24, X
    1c7e:	8f 5f       	subi	r24, 0xFF	; 255
    1c80:	8c 93       	st	X, r24
    1c82:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c84:	a0 91 0f 16 	lds	r26, 0x160F	; 0x80160f <pxCurrentTCB>
    1c88:	b0 91 10 16 	lds	r27, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    1c8c:	5a 96       	adiw	r26, 0x1a	; 26
    1c8e:	8c 91       	ld	r24, X
    1c90:	98 17       	cp	r25, r24
    1c92:	30 f0       	brcs	.+12     	; 0x1ca0 <xTaskResumeAll+0x140>
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	80 93 59 15 	sts	0x1559, r24	; 0x801559 <xYieldPending>
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <xTaskResumeAll+0x140>
    1c9c:	e0 e0       	ldi	r30, 0x00	; 0
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 91 7c 15 	lds	r24, 0x157C	; 0x80157c <xPendingReadyList>
    1ca4:	81 11       	cpse	r24, r1
    1ca6:	73 cf       	rjmp	.-282    	; 0x1b8e <xTaskResumeAll+0x2e>
    1ca8:	ef 2b       	or	r30, r31
    1caa:	09 f0       	breq	.+2      	; 0x1cae <xTaskResumeAll+0x14e>
    1cac:	83 db       	rcall	.-2298   	; 0x13b4 <prvResetNextTaskUnblockTime>
    1cae:	c0 90 5a 15 	lds	r12, 0x155A	; 0x80155a <xPendedTicks>
    1cb2:	d0 90 5b 15 	lds	r13, 0x155B	; 0x80155b <xPendedTicks+0x1>
    1cb6:	e0 90 5c 15 	lds	r14, 0x155C	; 0x80155c <xPendedTicks+0x2>
    1cba:	f0 90 5d 15 	lds	r15, 0x155D	; 0x80155d <xPendedTicks+0x3>
    1cbe:	c1 14       	cp	r12, r1
    1cc0:	d1 04       	cpc	r13, r1
    1cc2:	e1 04       	cpc	r14, r1
    1cc4:	f1 04       	cpc	r15, r1
    1cc6:	a1 f0       	breq	.+40     	; 0x1cf0 <xTaskResumeAll+0x190>
    1cc8:	1f de       	rcall	.-962    	; 0x1908 <xTaskIncrementTick>
    1cca:	88 23       	and	r24, r24
    1ccc:	19 f0       	breq	.+6      	; 0x1cd4 <xTaskResumeAll+0x174>
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	80 93 59 15 	sts	0x1559, r24	; 0x801559 <xYieldPending>
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	c8 1a       	sub	r12, r24
    1cd8:	d1 08       	sbc	r13, r1
    1cda:	e1 08       	sbc	r14, r1
    1cdc:	f1 08       	sbc	r15, r1
    1cde:	a1 f7       	brne	.-24     	; 0x1cc8 <xTaskResumeAll+0x168>
    1ce0:	10 92 5a 15 	sts	0x155A, r1	; 0x80155a <xPendedTicks>
    1ce4:	10 92 5b 15 	sts	0x155B, r1	; 0x80155b <xPendedTicks+0x1>
    1ce8:	10 92 5c 15 	sts	0x155C, r1	; 0x80155c <xPendedTicks+0x2>
    1cec:	10 92 5d 15 	sts	0x155D, r1	; 0x80155d <xPendedTicks+0x3>
    1cf0:	80 91 59 15 	lds	r24, 0x1559	; 0x801559 <xYieldPending>
    1cf4:	88 23       	and	r24, r24
    1cf6:	31 f0       	breq	.+12     	; 0x1d04 <xTaskResumeAll+0x1a4>
    1cf8:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	03 c0       	rjmp	.+6      	; 0x1d06 <xTaskResumeAll+0x1a6>
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	01 c0       	rjmp	.+2      	; 0x1d06 <xTaskResumeAll+0x1a6>
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	0f 90       	pop	r0
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	df 91       	pop	r29
    1d0c:	cf 91       	pop	r28
    1d0e:	ff 90       	pop	r15
    1d10:	ef 90       	pop	r14
    1d12:	df 90       	pop	r13
    1d14:	cf 90       	pop	r12
    1d16:	08 95       	ret

00001d18 <xTaskDelayUntil>:
    1d18:	8f 92       	push	r8
    1d1a:	9f 92       	push	r9
    1d1c:	af 92       	push	r10
    1d1e:	bf 92       	push	r11
    1d20:	cf 92       	push	r12
    1d22:	df 92       	push	r13
    1d24:	ef 92       	push	r14
    1d26:	ff 92       	push	r15
    1d28:	1f 93       	push	r17
    1d2a:	cf 93       	push	r28
    1d2c:	df 93       	push	r29
    1d2e:	ec 01       	movw	r28, r24
    1d30:	6a 01       	movw	r12, r20
    1d32:	7b 01       	movw	r14, r22
    1d34:	d5 dd       	rcall	.-1110   	; 0x18e0 <vTaskSuspendAll>
    1d36:	80 90 60 15 	lds	r8, 0x1560	; 0x801560 <xTickCount>
    1d3a:	90 90 61 15 	lds	r9, 0x1561	; 0x801561 <xTickCount+0x1>
    1d3e:	a0 90 62 15 	lds	r10, 0x1562	; 0x801562 <xTickCount+0x2>
    1d42:	b0 90 63 15 	lds	r11, 0x1563	; 0x801563 <xTickCount+0x3>
    1d46:	88 81       	ld	r24, Y
    1d48:	99 81       	ldd	r25, Y+1	; 0x01
    1d4a:	aa 81       	ldd	r26, Y+2	; 0x02
    1d4c:	bb 81       	ldd	r27, Y+3	; 0x03
    1d4e:	ac 01       	movw	r20, r24
    1d50:	bd 01       	movw	r22, r26
    1d52:	4c 0d       	add	r20, r12
    1d54:	5d 1d       	adc	r21, r13
    1d56:	6e 1d       	adc	r22, r14
    1d58:	7f 1d       	adc	r23, r15
    1d5a:	88 16       	cp	r8, r24
    1d5c:	99 06       	cpc	r9, r25
    1d5e:	aa 06       	cpc	r10, r26
    1d60:	bb 06       	cpc	r11, r27
    1d62:	60 f4       	brcc	.+24     	; 0x1d7c <xTaskDelayUntil+0x64>
    1d64:	48 17       	cp	r20, r24
    1d66:	59 07       	cpc	r21, r25
    1d68:	6a 07       	cpc	r22, r26
    1d6a:	7b 07       	cpc	r23, r27
    1d6c:	98 f4       	brcc	.+38     	; 0x1d94 <xTaskDelayUntil+0x7c>
    1d6e:	84 16       	cp	r8, r20
    1d70:	95 06       	cpc	r9, r21
    1d72:	a6 06       	cpc	r10, r22
    1d74:	b7 06       	cpc	r11, r23
    1d76:	80 f0       	brcs	.+32     	; 0x1d98 <xTaskDelayUntil+0x80>
    1d78:	10 e0       	ldi	r17, 0x00	; 0
    1d7a:	13 c0       	rjmp	.+38     	; 0x1da2 <xTaskDelayUntil+0x8a>
    1d7c:	48 17       	cp	r20, r24
    1d7e:	59 07       	cpc	r21, r25
    1d80:	6a 07       	cpc	r22, r26
    1d82:	7b 07       	cpc	r23, r27
    1d84:	58 f0       	brcs	.+22     	; 0x1d9c <xTaskDelayUntil+0x84>
    1d86:	84 16       	cp	r8, r20
    1d88:	95 06       	cpc	r9, r21
    1d8a:	a6 06       	cpc	r10, r22
    1d8c:	b7 06       	cpc	r11, r23
    1d8e:	40 f0       	brcs	.+16     	; 0x1da0 <xTaskDelayUntil+0x88>
    1d90:	10 e0       	ldi	r17, 0x00	; 0
    1d92:	07 c0       	rjmp	.+14     	; 0x1da2 <xTaskDelayUntil+0x8a>
    1d94:	10 e0       	ldi	r17, 0x00	; 0
    1d96:	05 c0       	rjmp	.+10     	; 0x1da2 <xTaskDelayUntil+0x8a>
    1d98:	11 e0       	ldi	r17, 0x01	; 1
    1d9a:	03 c0       	rjmp	.+6      	; 0x1da2 <xTaskDelayUntil+0x8a>
    1d9c:	11 e0       	ldi	r17, 0x01	; 1
    1d9e:	01 c0       	rjmp	.+2      	; 0x1da2 <xTaskDelayUntil+0x8a>
    1da0:	11 e0       	ldi	r17, 0x01	; 1
    1da2:	48 83       	st	Y, r20
    1da4:	59 83       	std	Y+1, r21	; 0x01
    1da6:	6a 83       	std	Y+2, r22	; 0x02
    1da8:	7b 83       	std	Y+3, r23	; 0x03
    1daa:	11 23       	and	r17, r17
    1dac:	41 f0       	breq	.+16     	; 0x1dbe <xTaskDelayUntil+0xa6>
    1dae:	cb 01       	movw	r24, r22
    1db0:	ba 01       	movw	r22, r20
    1db2:	68 19       	sub	r22, r8
    1db4:	79 09       	sbc	r23, r9
    1db6:	8a 09       	sbc	r24, r10
    1db8:	9b 09       	sbc	r25, r11
    1dba:	40 e0       	ldi	r20, 0x00	; 0
    1dbc:	6b dc       	rcall	.-1834   	; 0x1694 <prvAddCurrentTaskToDelayedList>
    1dbe:	d0 de       	rcall	.-608    	; 0x1b60 <xTaskResumeAll>
    1dc0:	81 11       	cpse	r24, r1
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <xTaskDelayUntil+0xb0>
    1dc4:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    1dc8:	81 2f       	mov	r24, r17
    1dca:	df 91       	pop	r29
    1dcc:	cf 91       	pop	r28
    1dce:	1f 91       	pop	r17
    1dd0:	ff 90       	pop	r15
    1dd2:	ef 90       	pop	r14
    1dd4:	df 90       	pop	r13
    1dd6:	cf 90       	pop	r12
    1dd8:	bf 90       	pop	r11
    1dda:	af 90       	pop	r10
    1ddc:	9f 90       	pop	r9
    1dde:	8f 90       	pop	r8
    1de0:	08 95       	ret

00001de2 <vTaskDelay>:
    1de2:	cf 92       	push	r12
    1de4:	df 92       	push	r13
    1de6:	ef 92       	push	r14
    1de8:	ff 92       	push	r15
    1dea:	6b 01       	movw	r12, r22
    1dec:	7c 01       	movw	r14, r24
    1dee:	67 2b       	or	r22, r23
    1df0:	68 2b       	or	r22, r24
    1df2:	69 2b       	or	r22, r25
    1df4:	39 f0       	breq	.+14     	; 0x1e04 <vTaskDelay+0x22>
    1df6:	74 dd       	rcall	.-1304   	; 0x18e0 <vTaskSuspendAll>
    1df8:	40 e0       	ldi	r20, 0x00	; 0
    1dfa:	c7 01       	movw	r24, r14
    1dfc:	b6 01       	movw	r22, r12
    1dfe:	4a dc       	rcall	.-1900   	; 0x1694 <prvAddCurrentTaskToDelayedList>
    1e00:	af de       	rcall	.-674    	; 0x1b60 <xTaskResumeAll>
    1e02:	01 c0       	rjmp	.+2      	; 0x1e06 <vTaskDelay+0x24>
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	81 11       	cpse	r24, r1
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <vTaskDelay+0x2c>
    1e0a:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    1e0e:	ff 90       	pop	r15
    1e10:	ef 90       	pop	r14
    1e12:	df 90       	pop	r13
    1e14:	cf 90       	pop	r12
    1e16:	08 95       	ret

00001e18 <vTaskSwitchContext>:
    1e18:	80 91 50 15 	lds	r24, 0x1550	; 0x801550 <uxSchedulerSuspended>
    1e1c:	88 23       	and	r24, r24
    1e1e:	21 f0       	breq	.+8      	; 0x1e28 <vTaskSwitchContext+0x10>
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	80 93 59 15 	sts	0x1559, r24	; 0x801559 <xYieldPending>
    1e26:	08 95       	ret
    1e28:	10 92 59 15 	sts	0x1559, r1	; 0x801559 <xYieldPending>
    1e2c:	e0 91 0f 16 	lds	r30, 0x160F	; 0x80160f <pxCurrentTCB>
    1e30:	f0 91 10 16 	lds	r31, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    1e34:	20 81       	ld	r18, Z
    1e36:	31 81       	ldd	r19, Z+1	; 0x01
    1e38:	e0 91 0f 16 	lds	r30, 0x160F	; 0x80160f <pxCurrentTCB>
    1e3c:	f0 91 10 16 	lds	r31, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    1e40:	83 8d       	ldd	r24, Z+27	; 0x1b
    1e42:	94 8d       	ldd	r25, Z+28	; 0x1c
    1e44:	82 17       	cp	r24, r18
    1e46:	93 07       	cpc	r25, r19
    1e48:	60 f0       	brcs	.+24     	; 0x1e62 <vTaskSwitchContext+0x4a>
    1e4a:	60 91 0f 16 	lds	r22, 0x160F	; 0x80160f <pxCurrentTCB>
    1e4e:	70 91 10 16 	lds	r23, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    1e52:	63 5e       	subi	r22, 0xE3	; 227
    1e54:	7f 4f       	sbci	r23, 0xFF	; 255
    1e56:	80 91 0f 16 	lds	r24, 0x160F	; 0x80160f <pxCurrentTCB>
    1e5a:	90 91 10 16 	lds	r25, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    1e5e:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <vApplicationStackOverflowHook>
    1e62:	80 91 5f 15 	lds	r24, 0x155F	; 0x80155f <uxTopReadyPriority>
    1e66:	01 c0       	rjmp	.+2      	; 0x1e6a <vTaskSwitchContext+0x52>
    1e68:	81 50       	subi	r24, 0x01	; 1
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	9b e0       	ldi	r25, 0x0B	; 11
    1e70:	92 9f       	mul	r25, r18
    1e72:	f0 01       	movw	r30, r0
    1e74:	93 9f       	mul	r25, r19
    1e76:	f0 0d       	add	r31, r0
    1e78:	11 24       	eor	r1, r1
    1e7a:	ef 55       	subi	r30, 0x5F	; 95
    1e7c:	fa 4e       	sbci	r31, 0xEA	; 234
    1e7e:	90 81       	ld	r25, Z
    1e80:	99 23       	and	r25, r25
    1e82:	91 f3       	breq	.-28     	; 0x1e68 <vTaskSwitchContext+0x50>
    1e84:	9b e0       	ldi	r25, 0x0B	; 11
    1e86:	92 9f       	mul	r25, r18
    1e88:	a0 01       	movw	r20, r0
    1e8a:	93 9f       	mul	r25, r19
    1e8c:	50 0d       	add	r21, r0
    1e8e:	11 24       	eor	r1, r1
    1e90:	df 01       	movw	r26, r30
    1e92:	01 80       	ldd	r0, Z+1	; 0x01
    1e94:	f2 81       	ldd	r31, Z+2	; 0x02
    1e96:	e0 2d       	mov	r30, r0
    1e98:	04 80       	ldd	r0, Z+4	; 0x04
    1e9a:	f5 81       	ldd	r31, Z+5	; 0x05
    1e9c:	e0 2d       	mov	r30, r0
    1e9e:	12 96       	adiw	r26, 0x02	; 2
    1ea0:	fc 93       	st	X, r31
    1ea2:	ee 93       	st	-X, r30
    1ea4:	11 97       	sbiw	r26, 0x01	; 1
    1ea6:	4c 55       	subi	r20, 0x5C	; 92
    1ea8:	5a 4e       	sbci	r21, 0xEA	; 234
    1eaa:	e4 17       	cp	r30, r20
    1eac:	f5 07       	cpc	r31, r21
    1eae:	29 f4       	brne	.+10     	; 0x1eba <vTaskSwitchContext+0xa2>
    1eb0:	44 81       	ldd	r20, Z+4	; 0x04
    1eb2:	55 81       	ldd	r21, Z+5	; 0x05
    1eb4:	fd 01       	movw	r30, r26
    1eb6:	52 83       	std	Z+2, r21	; 0x02
    1eb8:	41 83       	std	Z+1, r20	; 0x01
    1eba:	9b e0       	ldi	r25, 0x0B	; 11
    1ebc:	92 9f       	mul	r25, r18
    1ebe:	f0 01       	movw	r30, r0
    1ec0:	93 9f       	mul	r25, r19
    1ec2:	f0 0d       	add	r31, r0
    1ec4:	11 24       	eor	r1, r1
    1ec6:	ef 55       	subi	r30, 0x5F	; 95
    1ec8:	fa 4e       	sbci	r31, 0xEA	; 234
    1eca:	01 80       	ldd	r0, Z+1	; 0x01
    1ecc:	f2 81       	ldd	r31, Z+2	; 0x02
    1ece:	e0 2d       	mov	r30, r0
    1ed0:	20 85       	ldd	r18, Z+8	; 0x08
    1ed2:	31 85       	ldd	r19, Z+9	; 0x09
    1ed4:	30 93 10 16 	sts	0x1610, r19	; 0x801610 <pxCurrentTCB+0x1>
    1ed8:	20 93 0f 16 	sts	0x160F, r18	; 0x80160f <pxCurrentTCB>
    1edc:	80 93 5f 15 	sts	0x155F, r24	; 0x80155f <uxTopReadyPriority>
    1ee0:	08 95       	ret

00001ee2 <vTaskPlaceOnEventList>:
    1ee2:	cf 92       	push	r12
    1ee4:	df 92       	push	r13
    1ee6:	ef 92       	push	r14
    1ee8:	ff 92       	push	r15
    1eea:	6a 01       	movw	r12, r20
    1eec:	7b 01       	movw	r14, r22
    1eee:	60 91 0f 16 	lds	r22, 0x160F	; 0x80160f <pxCurrentTCB>
    1ef2:	70 91 10 16 	lds	r23, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    1ef6:	62 5f       	subi	r22, 0xF2	; 242
    1ef8:	7f 4f       	sbci	r23, 0xFF	; 255
    1efa:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    1efe:	41 e0       	ldi	r20, 0x01	; 1
    1f00:	c7 01       	movw	r24, r14
    1f02:	b6 01       	movw	r22, r12
    1f04:	c7 db       	rcall	.-2162   	; 0x1694 <prvAddCurrentTaskToDelayedList>
    1f06:	ff 90       	pop	r15
    1f08:	ef 90       	pop	r14
    1f0a:	df 90       	pop	r13
    1f0c:	cf 90       	pop	r12
    1f0e:	08 95       	ret

00001f10 <vTaskPlaceOnEventListRestricted>:
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	fc 01       	movw	r30, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	ba 01       	movw	r22, r20
    1f1a:	a1 81       	ldd	r26, Z+1	; 0x01
    1f1c:	b2 81       	ldd	r27, Z+2	; 0x02
    1f1e:	c0 91 0f 16 	lds	r28, 0x160F	; 0x80160f <pxCurrentTCB>
    1f22:	d0 91 10 16 	lds	r29, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    1f26:	bb 8b       	std	Y+19, r27	; 0x13
    1f28:	aa 8b       	std	Y+18, r26	; 0x12
    1f2a:	c0 91 0f 16 	lds	r28, 0x160F	; 0x80160f <pxCurrentTCB>
    1f2e:	d0 91 10 16 	lds	r29, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    1f32:	16 96       	adiw	r26, 0x06	; 6
    1f34:	4d 91       	ld	r20, X+
    1f36:	5c 91       	ld	r21, X
    1f38:	17 97       	sbiw	r26, 0x07	; 7
    1f3a:	5d 8b       	std	Y+21, r21	; 0x15
    1f3c:	4c 8b       	std	Y+20, r20	; 0x14
    1f3e:	16 96       	adiw	r26, 0x06	; 6
    1f40:	cd 91       	ld	r28, X+
    1f42:	dc 91       	ld	r29, X
    1f44:	17 97       	sbiw	r26, 0x07	; 7
    1f46:	40 91 0f 16 	lds	r20, 0x160F	; 0x80160f <pxCurrentTCB>
    1f4a:	50 91 10 16 	lds	r21, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    1f4e:	42 5f       	subi	r20, 0xF2	; 242
    1f50:	5f 4f       	sbci	r21, 0xFF	; 255
    1f52:	5d 83       	std	Y+5, r21	; 0x05
    1f54:	4c 83       	std	Y+4, r20	; 0x04
    1f56:	40 91 0f 16 	lds	r20, 0x160F	; 0x80160f <pxCurrentTCB>
    1f5a:	50 91 10 16 	lds	r21, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    1f5e:	42 5f       	subi	r20, 0xF2	; 242
    1f60:	5f 4f       	sbci	r21, 0xFF	; 255
    1f62:	17 96       	adiw	r26, 0x07	; 7
    1f64:	5c 93       	st	X, r21
    1f66:	4e 93       	st	-X, r20
    1f68:	16 97       	sbiw	r26, 0x06	; 6
    1f6a:	a0 91 0f 16 	lds	r26, 0x160F	; 0x80160f <pxCurrentTCB>
    1f6e:	b0 91 10 16 	lds	r27, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    1f72:	59 96       	adiw	r26, 0x19	; 25
    1f74:	fc 93       	st	X, r31
    1f76:	ee 93       	st	-X, r30
    1f78:	58 97       	sbiw	r26, 0x18	; 24
    1f7a:	30 81       	ld	r19, Z
    1f7c:	3f 5f       	subi	r19, 0xFF	; 255
    1f7e:	30 83       	st	Z, r19
    1f80:	22 23       	and	r18, r18
    1f82:	19 f0       	breq	.+6      	; 0x1f8a <vTaskPlaceOnEventListRestricted+0x7a>
    1f84:	6f ef       	ldi	r22, 0xFF	; 255
    1f86:	7f ef       	ldi	r23, 0xFF	; 255
    1f88:	cb 01       	movw	r24, r22
    1f8a:	42 2f       	mov	r20, r18
    1f8c:	83 db       	rcall	.-2298   	; 0x1694 <prvAddCurrentTaskToDelayedList>
    1f8e:	df 91       	pop	r29
    1f90:	cf 91       	pop	r28
    1f92:	08 95       	ret

00001f94 <xTaskRemoveFromEventList>:
    1f94:	cf 93       	push	r28
    1f96:	df 93       	push	r29
    1f98:	dc 01       	movw	r26, r24
    1f9a:	17 96       	adiw	r26, 0x07	; 7
    1f9c:	ed 91       	ld	r30, X+
    1f9e:	fc 91       	ld	r31, X
    1fa0:	18 97       	sbiw	r26, 0x08	; 8
    1fa2:	00 84       	ldd	r0, Z+8	; 0x08
    1fa4:	f1 85       	ldd	r31, Z+9	; 0x09
    1fa6:	e0 2d       	mov	r30, r0
    1fa8:	a0 8d       	ldd	r26, Z+24	; 0x18
    1faa:	b1 8d       	ldd	r27, Z+25	; 0x19
    1fac:	c2 89       	ldd	r28, Z+18	; 0x12
    1fae:	d3 89       	ldd	r29, Z+19	; 0x13
    1fb0:	84 89       	ldd	r24, Z+20	; 0x14
    1fb2:	95 89       	ldd	r25, Z+21	; 0x15
    1fb4:	9f 83       	std	Y+7, r25	; 0x07
    1fb6:	8e 83       	std	Y+6, r24	; 0x06
    1fb8:	c4 89       	ldd	r28, Z+20	; 0x14
    1fba:	d5 89       	ldd	r29, Z+21	; 0x15
    1fbc:	82 89       	ldd	r24, Z+18	; 0x12
    1fbe:	93 89       	ldd	r25, Z+19	; 0x13
    1fc0:	9d 83       	std	Y+5, r25	; 0x05
    1fc2:	8c 83       	std	Y+4, r24	; 0x04
    1fc4:	11 96       	adiw	r26, 0x01	; 1
    1fc6:	8d 91       	ld	r24, X+
    1fc8:	9c 91       	ld	r25, X
    1fca:	12 97       	sbiw	r26, 0x02	; 2
    1fcc:	9f 01       	movw	r18, r30
    1fce:	22 5f       	subi	r18, 0xF2	; 242
    1fd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd2:	82 17       	cp	r24, r18
    1fd4:	93 07       	cpc	r25, r19
    1fd6:	31 f4       	brne	.+12     	; 0x1fe4 <xTaskRemoveFromEventList+0x50>
    1fd8:	84 89       	ldd	r24, Z+20	; 0x14
    1fda:	95 89       	ldd	r25, Z+21	; 0x15
    1fdc:	12 96       	adiw	r26, 0x02	; 2
    1fde:	9c 93       	st	X, r25
    1fe0:	8e 93       	st	-X, r24
    1fe2:	11 97       	sbiw	r26, 0x01	; 1
    1fe4:	11 8e       	std	Z+25, r1	; 0x19
    1fe6:	10 8e       	std	Z+24, r1	; 0x18
    1fe8:	8c 91       	ld	r24, X
    1fea:	81 50       	subi	r24, 0x01	; 1
    1fec:	8c 93       	st	X, r24
    1fee:	80 91 50 15 	lds	r24, 0x1550	; 0x801550 <uxSchedulerSuspended>
    1ff2:	81 11       	cpse	r24, r1
    1ff4:	52 c0       	rjmp	.+164    	; 0x209a <__DATA_REGION_LENGTH__+0x9a>
    1ff6:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ff8:	b5 85       	ldd	r27, Z+13	; 0x0d
    1ffa:	c6 81       	ldd	r28, Z+6	; 0x06
    1ffc:	d7 81       	ldd	r29, Z+7	; 0x07
    1ffe:	80 85       	ldd	r24, Z+8	; 0x08
    2000:	91 85       	ldd	r25, Z+9	; 0x09
    2002:	9f 83       	std	Y+7, r25	; 0x07
    2004:	8e 83       	std	Y+6, r24	; 0x06
    2006:	c0 85       	ldd	r28, Z+8	; 0x08
    2008:	d1 85       	ldd	r29, Z+9	; 0x09
    200a:	86 81       	ldd	r24, Z+6	; 0x06
    200c:	97 81       	ldd	r25, Z+7	; 0x07
    200e:	9d 83       	std	Y+5, r25	; 0x05
    2010:	8c 83       	std	Y+4, r24	; 0x04
    2012:	11 96       	adiw	r26, 0x01	; 1
    2014:	8d 91       	ld	r24, X+
    2016:	9c 91       	ld	r25, X
    2018:	12 97       	sbiw	r26, 0x02	; 2
    201a:	9f 01       	movw	r18, r30
    201c:	2e 5f       	subi	r18, 0xFE	; 254
    201e:	3f 4f       	sbci	r19, 0xFF	; 255
    2020:	82 17       	cp	r24, r18
    2022:	93 07       	cpc	r25, r19
    2024:	31 f4       	brne	.+12     	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
    2026:	80 85       	ldd	r24, Z+8	; 0x08
    2028:	91 85       	ldd	r25, Z+9	; 0x09
    202a:	12 96       	adiw	r26, 0x02	; 2
    202c:	9c 93       	st	X, r25
    202e:	8e 93       	st	-X, r24
    2030:	11 97       	sbiw	r26, 0x01	; 1
    2032:	15 86       	std	Z+13, r1	; 0x0d
    2034:	14 86       	std	Z+12, r1	; 0x0c
    2036:	8c 91       	ld	r24, X
    2038:	81 50       	subi	r24, 0x01	; 1
    203a:	8c 93       	st	X, r24
    203c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    203e:	80 91 5f 15 	lds	r24, 0x155F	; 0x80155f <uxTopReadyPriority>
    2042:	8a 17       	cp	r24, r26
    2044:	10 f4       	brcc	.+4      	; 0x204a <__DATA_REGION_LENGTH__+0x4a>
    2046:	a0 93 5f 15 	sts	0x155F, r26	; 0x80155f <uxTopReadyPriority>
    204a:	8b e0       	ldi	r24, 0x0B	; 11
    204c:	8a 9f       	mul	r24, r26
    204e:	d0 01       	movw	r26, r0
    2050:	11 24       	eor	r1, r1
    2052:	af 55       	subi	r26, 0x5F	; 95
    2054:	ba 4e       	sbci	r27, 0xEA	; 234
    2056:	11 96       	adiw	r26, 0x01	; 1
    2058:	0d 90       	ld	r0, X+
    205a:	bc 91       	ld	r27, X
    205c:	a0 2d       	mov	r26, r0
    205e:	b7 83       	std	Z+7, r27	; 0x07
    2060:	a6 83       	std	Z+6, r26	; 0x06
    2062:	16 96       	adiw	r26, 0x06	; 6
    2064:	4d 91       	ld	r20, X+
    2066:	5c 91       	ld	r21, X
    2068:	17 97       	sbiw	r26, 0x07	; 7
    206a:	51 87       	std	Z+9, r21	; 0x09
    206c:	40 87       	std	Z+8, r20	; 0x08
    206e:	16 96       	adiw	r26, 0x06	; 6
    2070:	cd 91       	ld	r28, X+
    2072:	dc 91       	ld	r29, X
    2074:	17 97       	sbiw	r26, 0x07	; 7
    2076:	3d 83       	std	Y+5, r19	; 0x05
    2078:	2c 83       	std	Y+4, r18	; 0x04
    207a:	17 96       	adiw	r26, 0x07	; 7
    207c:	3c 93       	st	X, r19
    207e:	2e 93       	st	-X, r18
    2080:	16 97       	sbiw	r26, 0x06	; 6
    2082:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2084:	8a 9f       	mul	r24, r26
    2086:	d0 01       	movw	r26, r0
    2088:	11 24       	eor	r1, r1
    208a:	af 55       	subi	r26, 0x5F	; 95
    208c:	ba 4e       	sbci	r27, 0xEA	; 234
    208e:	b5 87       	std	Z+13, r27	; 0x0d
    2090:	a4 87       	std	Z+12, r26	; 0x0c
    2092:	8c 91       	ld	r24, X
    2094:	8f 5f       	subi	r24, 0xFF	; 255
    2096:	8c 93       	st	X, r24
    2098:	1c c0       	rjmp	.+56     	; 0x20d2 <__DATA_REGION_LENGTH__+0xd2>
    209a:	4c e7       	ldi	r20, 0x7C	; 124
    209c:	55 e1       	ldi	r21, 0x15	; 21
    209e:	da 01       	movw	r26, r20
    20a0:	11 96       	adiw	r26, 0x01	; 1
    20a2:	cd 91       	ld	r28, X+
    20a4:	dc 91       	ld	r29, X
    20a6:	12 97       	sbiw	r26, 0x02	; 2
    20a8:	d3 8b       	std	Z+19, r29	; 0x13
    20aa:	c2 8b       	std	Z+18, r28	; 0x12
    20ac:	8e 81       	ldd	r24, Y+6	; 0x06
    20ae:	9f 81       	ldd	r25, Y+7	; 0x07
    20b0:	95 8b       	std	Z+21, r25	; 0x15
    20b2:	84 8b       	std	Z+20, r24	; 0x14
    20b4:	8e 81       	ldd	r24, Y+6	; 0x06
    20b6:	9f 81       	ldd	r25, Y+7	; 0x07
    20b8:	dc 01       	movw	r26, r24
    20ba:	15 96       	adiw	r26, 0x05	; 5
    20bc:	3c 93       	st	X, r19
    20be:	2e 93       	st	-X, r18
    20c0:	14 97       	sbiw	r26, 0x04	; 4
    20c2:	3f 83       	std	Y+7, r19	; 0x07
    20c4:	2e 83       	std	Y+6, r18	; 0x06
    20c6:	51 8f       	std	Z+25, r21	; 0x19
    20c8:	40 8f       	std	Z+24, r20	; 0x18
    20ca:	da 01       	movw	r26, r20
    20cc:	8c 91       	ld	r24, X
    20ce:	8f 5f       	subi	r24, 0xFF	; 255
    20d0:	8c 93       	st	X, r24
    20d2:	92 8d       	ldd	r25, Z+26	; 0x1a
    20d4:	e0 91 0f 16 	lds	r30, 0x160F	; 0x80160f <pxCurrentTCB>
    20d8:	f0 91 10 16 	lds	r31, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    20dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    20de:	89 17       	cp	r24, r25
    20e0:	20 f4       	brcc	.+8      	; 0x20ea <__DATA_REGION_LENGTH__+0xea>
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	80 93 59 15 	sts	0x1559, r24	; 0x801559 <xYieldPending>
    20e8:	01 c0       	rjmp	.+2      	; 0x20ec <__DATA_REGION_LENGTH__+0xec>
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	08 95       	ret

000020f2 <vTaskSetTimeOutState>:
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	f8 94       	cli
    20f6:	0f 92       	push	r0
    20f8:	20 91 58 15 	lds	r18, 0x1558	; 0x801558 <xNumOfOverflows>
    20fc:	fc 01       	movw	r30, r24
    20fe:	20 83       	st	Z, r18
    2100:	40 91 60 15 	lds	r20, 0x1560	; 0x801560 <xTickCount>
    2104:	50 91 61 15 	lds	r21, 0x1561	; 0x801561 <xTickCount+0x1>
    2108:	60 91 62 15 	lds	r22, 0x1562	; 0x801562 <xTickCount+0x2>
    210c:	70 91 63 15 	lds	r23, 0x1563	; 0x801563 <xTickCount+0x3>
    2110:	41 83       	std	Z+1, r20	; 0x01
    2112:	52 83       	std	Z+2, r21	; 0x02
    2114:	63 83       	std	Z+3, r22	; 0x03
    2116:	74 83       	std	Z+4, r23	; 0x04
    2118:	0f 90       	pop	r0
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	08 95       	ret

0000211e <vTaskInternalSetTimeOutState>:
    211e:	20 91 58 15 	lds	r18, 0x1558	; 0x801558 <xNumOfOverflows>
    2122:	fc 01       	movw	r30, r24
    2124:	20 83       	st	Z, r18
    2126:	40 91 60 15 	lds	r20, 0x1560	; 0x801560 <xTickCount>
    212a:	50 91 61 15 	lds	r21, 0x1561	; 0x801561 <xTickCount+0x1>
    212e:	60 91 62 15 	lds	r22, 0x1562	; 0x801562 <xTickCount+0x2>
    2132:	70 91 63 15 	lds	r23, 0x1563	; 0x801563 <xTickCount+0x3>
    2136:	41 83       	std	Z+1, r20	; 0x01
    2138:	52 83       	std	Z+2, r21	; 0x02
    213a:	63 83       	std	Z+3, r22	; 0x03
    213c:	74 83       	std	Z+4, r23	; 0x04
    213e:	08 95       	ret

00002140 <xTaskCheckForTimeOut>:
    2140:	8f 92       	push	r8
    2142:	9f 92       	push	r9
    2144:	af 92       	push	r10
    2146:	bf 92       	push	r11
    2148:	cf 92       	push	r12
    214a:	df 92       	push	r13
    214c:	ef 92       	push	r14
    214e:	ff 92       	push	r15
    2150:	0f 93       	push	r16
    2152:	1f 93       	push	r17
    2154:	cf 93       	push	r28
    2156:	df 93       	push	r29
    2158:	fb 01       	movw	r30, r22
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	0f 92       	push	r0
    2160:	c0 90 60 15 	lds	r12, 0x1560	; 0x801560 <xTickCount>
    2164:	d0 90 61 15 	lds	r13, 0x1561	; 0x801561 <xTickCount+0x1>
    2168:	e0 90 62 15 	lds	r14, 0x1562	; 0x801562 <xTickCount+0x2>
    216c:	f0 90 63 15 	lds	r15, 0x1563	; 0x801563 <xTickCount+0x3>
    2170:	dc 01       	movw	r26, r24
    2172:	11 96       	adiw	r26, 0x01	; 1
    2174:	0d 91       	ld	r16, X+
    2176:	1d 91       	ld	r17, X+
    2178:	2d 91       	ld	r18, X+
    217a:	3c 91       	ld	r19, X
    217c:	14 97       	sbiw	r26, 0x04	; 4
    217e:	46 01       	movw	r8, r12
    2180:	57 01       	movw	r10, r14
    2182:	80 1a       	sub	r8, r16
    2184:	91 0a       	sbc	r9, r17
    2186:	a2 0a       	sbc	r10, r18
    2188:	b3 0a       	sbc	r11, r19
    218a:	40 81       	ld	r20, Z
    218c:	51 81       	ldd	r21, Z+1	; 0x01
    218e:	62 81       	ldd	r22, Z+2	; 0x02
    2190:	73 81       	ldd	r23, Z+3	; 0x03
    2192:	4f 3f       	cpi	r20, 0xFF	; 255
    2194:	bf ef       	ldi	r27, 0xFF	; 255
    2196:	5b 07       	cpc	r21, r27
    2198:	6b 07       	cpc	r22, r27
    219a:	7b 07       	cpc	r23, r27
    219c:	39 f1       	breq	.+78     	; 0x21ec <xTaskCheckForTimeOut+0xac>
    219e:	ec 01       	movw	r28, r24
    21a0:	b8 81       	ld	r27, Y
    21a2:	a0 91 58 15 	lds	r26, 0x1558	; 0x801558 <xNumOfOverflows>
    21a6:	ba 17       	cp	r27, r26
    21a8:	59 f0       	breq	.+22     	; 0x21c0 <xTaskCheckForTimeOut+0x80>
    21aa:	c0 16       	cp	r12, r16
    21ac:	d1 06       	cpc	r13, r17
    21ae:	e2 06       	cpc	r14, r18
    21b0:	f3 06       	cpc	r15, r19
    21b2:	30 f0       	brcs	.+12     	; 0x21c0 <xTaskCheckForTimeOut+0x80>
    21b4:	10 82       	st	Z, r1
    21b6:	11 82       	std	Z+1, r1	; 0x01
    21b8:	12 82       	std	Z+2, r1	; 0x02
    21ba:	13 82       	std	Z+3, r1	; 0x03
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	17 c0       	rjmp	.+46     	; 0x21ee <xTaskCheckForTimeOut+0xae>
    21c0:	84 16       	cp	r8, r20
    21c2:	95 06       	cpc	r9, r21
    21c4:	a6 06       	cpc	r10, r22
    21c6:	b7 06       	cpc	r11, r23
    21c8:	58 f4       	brcc	.+22     	; 0x21e0 <xTaskCheckForTimeOut+0xa0>
    21ca:	48 19       	sub	r20, r8
    21cc:	59 09       	sbc	r21, r9
    21ce:	6a 09       	sbc	r22, r10
    21d0:	7b 09       	sbc	r23, r11
    21d2:	40 83       	st	Z, r20
    21d4:	51 83       	std	Z+1, r21	; 0x01
    21d6:	62 83       	std	Z+2, r22	; 0x02
    21d8:	73 83       	std	Z+3, r23	; 0x03
    21da:	a1 df       	rcall	.-190    	; 0x211e <vTaskInternalSetTimeOutState>
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	07 c0       	rjmp	.+14     	; 0x21ee <xTaskCheckForTimeOut+0xae>
    21e0:	10 82       	st	Z, r1
    21e2:	11 82       	std	Z+1, r1	; 0x01
    21e4:	12 82       	std	Z+2, r1	; 0x02
    21e6:	13 82       	std	Z+3, r1	; 0x03
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	01 c0       	rjmp	.+2      	; 0x21ee <xTaskCheckForTimeOut+0xae>
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	0f 90       	pop	r0
    21f0:	0f be       	out	0x3f, r0	; 63
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	1f 91       	pop	r17
    21f8:	0f 91       	pop	r16
    21fa:	ff 90       	pop	r15
    21fc:	ef 90       	pop	r14
    21fe:	df 90       	pop	r13
    2200:	cf 90       	pop	r12
    2202:	bf 90       	pop	r11
    2204:	af 90       	pop	r10
    2206:	9f 90       	pop	r9
    2208:	8f 90       	pop	r8
    220a:	08 95       	ret

0000220c <vTaskMissedYield>:
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	80 93 59 15 	sts	0x1559, r24	; 0x801559 <xYieldPending>
    2212:	08 95       	ret

00002214 <xTaskGetCurrentTaskHandle>:
    2214:	80 91 0f 16 	lds	r24, 0x160F	; 0x80160f <pxCurrentTCB>
    2218:	90 91 10 16 	lds	r25, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    221c:	08 95       	ret

0000221e <xTaskGetSchedulerState>:
    221e:	80 91 5e 15 	lds	r24, 0x155E	; 0x80155e <xSchedulerRunning>
    2222:	88 23       	and	r24, r24
    2224:	31 f0       	breq	.+12     	; 0x2232 <xTaskGetSchedulerState+0x14>
    2226:	80 91 50 15 	lds	r24, 0x1550	; 0x801550 <uxSchedulerSuspended>
    222a:	81 11       	cpse	r24, r1
    222c:	04 c0       	rjmp	.+8      	; 0x2236 <xTaskGetSchedulerState+0x18>
    222e:	82 e0       	ldi	r24, 0x02	; 2
    2230:	08 95       	ret
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	08 95       	ret
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	08 95       	ret

0000223a <xTaskPriorityDisinherit>:
    223a:	0f 93       	push	r16
    223c:	1f 93       	push	r17
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	fc 01       	movw	r30, r24
    2244:	89 2b       	or	r24, r25
    2246:	09 f4       	brne	.+2      	; 0x224a <xTaskPriorityDisinherit+0x10>
    2248:	49 c0       	rjmp	.+146    	; 0x22dc <xTaskPriorityDisinherit+0xa2>
    224a:	86 a5       	ldd	r24, Z+46	; 0x2e
    224c:	81 50       	subi	r24, 0x01	; 1
    224e:	86 a7       	std	Z+46, r24	; 0x2e
    2250:	22 8d       	ldd	r18, Z+26	; 0x1a
    2252:	95 a5       	ldd	r25, Z+45	; 0x2d
    2254:	29 17       	cp	r18, r25
    2256:	09 f4       	brne	.+2      	; 0x225a <xTaskPriorityDisinherit+0x20>
    2258:	43 c0       	rjmp	.+134    	; 0x22e0 <xTaskPriorityDisinherit+0xa6>
    225a:	81 11       	cpse	r24, r1
    225c:	43 c0       	rjmp	.+134    	; 0x22e4 <xTaskPriorityDisinherit+0xaa>
    225e:	ef 01       	movw	r28, r30
    2260:	8f 01       	movw	r16, r30
    2262:	0e 5f       	subi	r16, 0xFE	; 254
    2264:	1f 4f       	sbci	r17, 0xFF	; 255
    2266:	c8 01       	movw	r24, r16
    2268:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
    226c:	ed a5       	ldd	r30, Y+45	; 0x2d
    226e:	ea 8f       	std	Y+26, r30	; 0x1a
    2270:	8a e0       	ldi	r24, 0x0A	; 10
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	a0 e0       	ldi	r26, 0x00	; 0
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	8e 1b       	sub	r24, r30
    227a:	91 09       	sbc	r25, r1
    227c:	a1 09       	sbc	r26, r1
    227e:	b1 09       	sbc	r27, r1
    2280:	8e 87       	std	Y+14, r24	; 0x0e
    2282:	9f 87       	std	Y+15, r25	; 0x0f
    2284:	a8 8b       	std	Y+16, r26	; 0x10
    2286:	b9 8b       	std	Y+17, r27	; 0x11
    2288:	80 91 5f 15 	lds	r24, 0x155F	; 0x80155f <uxTopReadyPriority>
    228c:	8e 17       	cp	r24, r30
    228e:	10 f4       	brcc	.+4      	; 0x2294 <xTaskPriorityDisinherit+0x5a>
    2290:	e0 93 5f 15 	sts	0x155F, r30	; 0x80155f <uxTopReadyPriority>
    2294:	8b e0       	ldi	r24, 0x0B	; 11
    2296:	8e 9f       	mul	r24, r30
    2298:	f0 01       	movw	r30, r0
    229a:	11 24       	eor	r1, r1
    229c:	ef 55       	subi	r30, 0x5F	; 95
    229e:	fa 4e       	sbci	r31, 0xEA	; 234
    22a0:	01 80       	ldd	r0, Z+1	; 0x01
    22a2:	f2 81       	ldd	r31, Z+2	; 0x02
    22a4:	e0 2d       	mov	r30, r0
    22a6:	ff 83       	std	Y+7, r31	; 0x07
    22a8:	ee 83       	std	Y+6, r30	; 0x06
    22aa:	26 81       	ldd	r18, Z+6	; 0x06
    22ac:	37 81       	ldd	r19, Z+7	; 0x07
    22ae:	39 87       	std	Y+9, r19	; 0x09
    22b0:	28 87       	std	Y+8, r18	; 0x08
    22b2:	a6 81       	ldd	r26, Z+6	; 0x06
    22b4:	b7 81       	ldd	r27, Z+7	; 0x07
    22b6:	15 96       	adiw	r26, 0x05	; 5
    22b8:	1c 93       	st	X, r17
    22ba:	0e 93       	st	-X, r16
    22bc:	14 97       	sbiw	r26, 0x04	; 4
    22be:	17 83       	std	Z+7, r17	; 0x07
    22c0:	06 83       	std	Z+6, r16	; 0x06
    22c2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    22c4:	8e 9f       	mul	r24, r30
    22c6:	f0 01       	movw	r30, r0
    22c8:	11 24       	eor	r1, r1
    22ca:	ef 55       	subi	r30, 0x5F	; 95
    22cc:	fa 4e       	sbci	r31, 0xEA	; 234
    22ce:	fd 87       	std	Y+13, r31	; 0x0d
    22d0:	ec 87       	std	Y+12, r30	; 0x0c
    22d2:	80 81       	ld	r24, Z
    22d4:	8f 5f       	subi	r24, 0xFF	; 255
    22d6:	80 83       	st	Z, r24
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	05 c0       	rjmp	.+10     	; 0x22e6 <xTaskPriorityDisinherit+0xac>
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	03 c0       	rjmp	.+6      	; 0x22e6 <xTaskPriorityDisinherit+0xac>
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	01 c0       	rjmp	.+2      	; 0x22e6 <xTaskPriorityDisinherit+0xac>
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	1f 91       	pop	r17
    22ec:	0f 91       	pop	r16
    22ee:	08 95       	ret

000022f0 <xTaskGenericNotifyWait>:
    22f0:	4f 92       	push	r4
    22f2:	5f 92       	push	r5
    22f4:	6f 92       	push	r6
    22f6:	7f 92       	push	r7
    22f8:	af 92       	push	r10
    22fa:	bf 92       	push	r11
    22fc:	cf 92       	push	r12
    22fe:	df 92       	push	r13
    2300:	ef 92       	push	r14
    2302:	ff 92       	push	r15
    2304:	0f 93       	push	r16
    2306:	1f 93       	push	r17
    2308:	cf 93       	push	r28
    230a:	df 93       	push	r29
    230c:	28 01       	movw	r4, r16
    230e:	39 01       	movw	r6, r18
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	f8 94       	cli
    2314:	0f 92       	push	r0
    2316:	e0 91 0f 16 	lds	r30, 0x160F	; 0x80160f <pxCurrentTCB>
    231a:	f0 91 10 16 	lds	r31, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    231e:	c8 2f       	mov	r28, r24
    2320:	d0 e0       	ldi	r29, 0x00	; 0
    2322:	ec 0f       	add	r30, r28
    2324:	fd 1f       	adc	r31, r29
    2326:	83 a9       	ldd	r24, Z+51	; 0x33
    2328:	82 30       	cpi	r24, 0x02	; 2
    232a:	71 f1       	breq	.+92     	; 0x2388 <xTaskGenericNotifyWait+0x98>
    232c:	e0 91 0f 16 	lds	r30, 0x160F	; 0x80160f <pxCurrentTCB>
    2330:	f0 91 10 16 	lds	r31, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    2334:	ce 01       	movw	r24, r28
    2336:	88 0f       	add	r24, r24
    2338:	99 1f       	adc	r25, r25
    233a:	88 0f       	add	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	e8 0f       	add	r30, r24
    2340:	f9 1f       	adc	r31, r25
    2342:	87 a5       	ldd	r24, Z+47	; 0x2f
    2344:	90 a9       	ldd	r25, Z+48	; 0x30
    2346:	a1 a9       	ldd	r26, Z+49	; 0x31
    2348:	b2 a9       	ldd	r27, Z+50	; 0x32
    234a:	40 95       	com	r20
    234c:	50 95       	com	r21
    234e:	60 95       	com	r22
    2350:	70 95       	com	r23
    2352:	48 23       	and	r20, r24
    2354:	59 23       	and	r21, r25
    2356:	6a 23       	and	r22, r26
    2358:	7b 23       	and	r23, r27
    235a:	47 a7       	std	Z+47, r20	; 0x2f
    235c:	50 ab       	std	Z+48, r21	; 0x30
    235e:	61 ab       	std	Z+49, r22	; 0x31
    2360:	72 ab       	std	Z+50, r23	; 0x32
    2362:	e0 91 0f 16 	lds	r30, 0x160F	; 0x80160f <pxCurrentTCB>
    2366:	f0 91 10 16 	lds	r31, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    236a:	ec 0f       	add	r30, r28
    236c:	fd 1f       	adc	r31, r29
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	83 ab       	std	Z+51, r24	; 0x33
    2372:	a1 14       	cp	r10, r1
    2374:	b1 04       	cpc	r11, r1
    2376:	c1 04       	cpc	r12, r1
    2378:	d1 04       	cpc	r13, r1
    237a:	31 f0       	breq	.+12     	; 0x2388 <xTaskGenericNotifyWait+0x98>
    237c:	41 e0       	ldi	r20, 0x01	; 1
    237e:	c6 01       	movw	r24, r12
    2380:	b5 01       	movw	r22, r10
    2382:	88 d9       	rcall	.-3312   	; 0x1694 <prvAddCurrentTaskToDelayedList>
    2384:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    2388:	0f 90       	pop	r0
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	f8 94       	cli
    2390:	0f 92       	push	r0
    2392:	e1 14       	cp	r14, r1
    2394:	f1 04       	cpc	r15, r1
    2396:	a1 f0       	breq	.+40     	; 0x23c0 <xTaskGenericNotifyWait+0xd0>
    2398:	e0 91 0f 16 	lds	r30, 0x160F	; 0x80160f <pxCurrentTCB>
    239c:	f0 91 10 16 	lds	r31, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    23a0:	ce 01       	movw	r24, r28
    23a2:	88 0f       	add	r24, r24
    23a4:	99 1f       	adc	r25, r25
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	e8 0f       	add	r30, r24
    23ac:	f9 1f       	adc	r31, r25
    23ae:	87 a5       	ldd	r24, Z+47	; 0x2f
    23b0:	90 a9       	ldd	r25, Z+48	; 0x30
    23b2:	a1 a9       	ldd	r26, Z+49	; 0x31
    23b4:	b2 a9       	ldd	r27, Z+50	; 0x32
    23b6:	f7 01       	movw	r30, r14
    23b8:	80 83       	st	Z, r24
    23ba:	91 83       	std	Z+1, r25	; 0x01
    23bc:	a2 83       	std	Z+2, r26	; 0x02
    23be:	b3 83       	std	Z+3, r27	; 0x03
    23c0:	e0 91 0f 16 	lds	r30, 0x160F	; 0x80160f <pxCurrentTCB>
    23c4:	f0 91 10 16 	lds	r31, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    23c8:	ec 0f       	add	r30, r28
    23ca:	fd 1f       	adc	r31, r29
    23cc:	83 a9       	ldd	r24, Z+51	; 0x33
    23ce:	82 30       	cpi	r24, 0x02	; 2
    23d0:	e9 f4       	brne	.+58     	; 0x240c <xTaskGenericNotifyWait+0x11c>
    23d2:	e0 91 0f 16 	lds	r30, 0x160F	; 0x80160f <pxCurrentTCB>
    23d6:	f0 91 10 16 	lds	r31, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    23da:	ce 01       	movw	r24, r28
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	88 0f       	add	r24, r24
    23e2:	99 1f       	adc	r25, r25
    23e4:	e8 0f       	add	r30, r24
    23e6:	f9 1f       	adc	r31, r25
    23e8:	87 a5       	ldd	r24, Z+47	; 0x2f
    23ea:	90 a9       	ldd	r25, Z+48	; 0x30
    23ec:	a1 a9       	ldd	r26, Z+49	; 0x31
    23ee:	b2 a9       	ldd	r27, Z+50	; 0x32
    23f0:	40 94       	com	r4
    23f2:	50 94       	com	r5
    23f4:	60 94       	com	r6
    23f6:	70 94       	com	r7
    23f8:	48 22       	and	r4, r24
    23fa:	59 22       	and	r5, r25
    23fc:	6a 22       	and	r6, r26
    23fe:	7b 22       	and	r7, r27
    2400:	47 a6       	std	Z+47, r4	; 0x2f
    2402:	50 aa       	std	Z+48, r5	; 0x30
    2404:	61 aa       	std	Z+49, r6	; 0x31
    2406:	72 aa       	std	Z+50, r7	; 0x32
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	01 c0       	rjmp	.+2      	; 0x240e <xTaskGenericNotifyWait+0x11e>
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	20 91 0f 16 	lds	r18, 0x160F	; 0x80160f <pxCurrentTCB>
    2412:	30 91 10 16 	lds	r19, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    2416:	c2 0f       	add	r28, r18
    2418:	d3 1f       	adc	r29, r19
    241a:	1b aa       	std	Y+51, r1	; 0x33
    241c:	0f 90       	pop	r0
    241e:	0f be       	out	0x3f, r0	; 63
    2420:	df 91       	pop	r29
    2422:	cf 91       	pop	r28
    2424:	1f 91       	pop	r17
    2426:	0f 91       	pop	r16
    2428:	ff 90       	pop	r15
    242a:	ef 90       	pop	r14
    242c:	df 90       	pop	r13
    242e:	cf 90       	pop	r12
    2430:	bf 90       	pop	r11
    2432:	af 90       	pop	r10
    2434:	7f 90       	pop	r7
    2436:	6f 90       	pop	r6
    2438:	5f 90       	pop	r5
    243a:	4f 90       	pop	r4
    243c:	08 95       	ret

0000243e <xTaskGenericNotify>:
    243e:	8f 92       	push	r8
    2440:	9f 92       	push	r9
    2442:	af 92       	push	r10
    2444:	bf 92       	push	r11
    2446:	ef 92       	push	r14
    2448:	ff 92       	push	r15
    244a:	0f 93       	push	r16
    244c:	cf 93       	push	r28
    244e:	df 93       	push	r29
    2450:	dc 01       	movw	r26, r24
    2452:	0f b6       	in	r0, 0x3f	; 63
    2454:	f8 94       	cli
    2456:	0f 92       	push	r0
    2458:	e1 14       	cp	r14, r1
    245a:	f1 04       	cpc	r15, r1
    245c:	89 f0       	breq	.+34     	; 0x2480 <xTaskGenericNotify+0x42>
    245e:	e6 2f       	mov	r30, r22
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	ee 0f       	add	r30, r30
    2464:	ff 1f       	adc	r31, r31
    2466:	ee 0f       	add	r30, r30
    2468:	ff 1f       	adc	r31, r31
    246a:	e8 0f       	add	r30, r24
    246c:	f9 1f       	adc	r31, r25
    246e:	87 a4       	ldd	r8, Z+47	; 0x2f
    2470:	90 a8       	ldd	r9, Z+48	; 0x30
    2472:	a1 a8       	ldd	r10, Z+49	; 0x31
    2474:	b2 a8       	ldd	r11, Z+50	; 0x32
    2476:	f7 01       	movw	r30, r14
    2478:	80 82       	st	Z, r8
    247a:	91 82       	std	Z+1, r9	; 0x01
    247c:	a2 82       	std	Z+2, r10	; 0x02
    247e:	b3 82       	std	Z+3, r11	; 0x03
    2480:	70 e0       	ldi	r23, 0x00	; 0
    2482:	fd 01       	movw	r30, r26
    2484:	e6 0f       	add	r30, r22
    2486:	f7 1f       	adc	r31, r23
    2488:	83 a9       	ldd	r24, Z+51	; 0x33
    248a:	92 e0       	ldi	r25, 0x02	; 2
    248c:	93 ab       	std	Z+51, r25	; 0x33
    248e:	02 30       	cpi	r16, 0x02	; 2
    2490:	01 f1       	breq	.+64     	; 0x24d2 <xTaskGenericNotify+0x94>
    2492:	18 f4       	brcc	.+6      	; 0x249a <xTaskGenericNotify+0x5c>
    2494:	01 30       	cpi	r16, 0x01	; 1
    2496:	31 f0       	breq	.+12     	; 0x24a4 <xTaskGenericNotify+0x66>
    2498:	4d c0       	rjmp	.+154    	; 0x2534 <xTaskGenericNotify+0xf6>
    249a:	03 30       	cpi	r16, 0x03	; 3
    249c:	79 f1       	breq	.+94     	; 0x24fc <xTaskGenericNotify+0xbe>
    249e:	04 30       	cpi	r16, 0x04	; 4
    24a0:	d1 f1       	breq	.+116    	; 0x2516 <xTaskGenericNotify+0xd8>
    24a2:	48 c0       	rjmp	.+144    	; 0x2534 <xTaskGenericNotify+0xf6>
    24a4:	66 0f       	add	r22, r22
    24a6:	77 1f       	adc	r23, r23
    24a8:	66 0f       	add	r22, r22
    24aa:	77 1f       	adc	r23, r23
    24ac:	fd 01       	movw	r30, r26
    24ae:	e6 0f       	add	r30, r22
    24b0:	f7 1f       	adc	r31, r23
    24b2:	87 a4       	ldd	r8, Z+47	; 0x2f
    24b4:	90 a8       	ldd	r9, Z+48	; 0x30
    24b6:	a1 a8       	ldd	r10, Z+49	; 0x31
    24b8:	b2 a8       	ldd	r11, Z+50	; 0x32
    24ba:	ba 01       	movw	r22, r20
    24bc:	a9 01       	movw	r20, r18
    24be:	48 29       	or	r20, r8
    24c0:	59 29       	or	r21, r9
    24c2:	6a 29       	or	r22, r10
    24c4:	7b 29       	or	r23, r11
    24c6:	47 a7       	std	Z+47, r20	; 0x2f
    24c8:	50 ab       	std	Z+48, r21	; 0x30
    24ca:	61 ab       	std	Z+49, r22	; 0x31
    24cc:	72 ab       	std	Z+50, r23	; 0x32
    24ce:	01 e0       	ldi	r16, 0x01	; 1
    24d0:	34 c0       	rjmp	.+104    	; 0x253a <xTaskGenericNotify+0xfc>
    24d2:	66 0f       	add	r22, r22
    24d4:	77 1f       	adc	r23, r23
    24d6:	66 0f       	add	r22, r22
    24d8:	77 1f       	adc	r23, r23
    24da:	fd 01       	movw	r30, r26
    24dc:	e6 0f       	add	r30, r22
    24de:	f7 1f       	adc	r31, r23
    24e0:	47 a5       	ldd	r20, Z+47	; 0x2f
    24e2:	50 a9       	ldd	r21, Z+48	; 0x30
    24e4:	61 a9       	ldd	r22, Z+49	; 0x31
    24e6:	72 a9       	ldd	r23, Z+50	; 0x32
    24e8:	4f 5f       	subi	r20, 0xFF	; 255
    24ea:	5f 4f       	sbci	r21, 0xFF	; 255
    24ec:	6f 4f       	sbci	r22, 0xFF	; 255
    24ee:	7f 4f       	sbci	r23, 0xFF	; 255
    24f0:	47 a7       	std	Z+47, r20	; 0x2f
    24f2:	50 ab       	std	Z+48, r21	; 0x30
    24f4:	61 ab       	std	Z+49, r22	; 0x31
    24f6:	72 ab       	std	Z+50, r23	; 0x32
    24f8:	01 e0       	ldi	r16, 0x01	; 1
    24fa:	1f c0       	rjmp	.+62     	; 0x253a <xTaskGenericNotify+0xfc>
    24fc:	66 0f       	add	r22, r22
    24fe:	77 1f       	adc	r23, r23
    2500:	66 0f       	add	r22, r22
    2502:	77 1f       	adc	r23, r23
    2504:	fd 01       	movw	r30, r26
    2506:	e6 0f       	add	r30, r22
    2508:	f7 1f       	adc	r31, r23
    250a:	27 a7       	std	Z+47, r18	; 0x2f
    250c:	30 ab       	std	Z+48, r19	; 0x30
    250e:	41 ab       	std	Z+49, r20	; 0x31
    2510:	52 ab       	std	Z+50, r21	; 0x32
    2512:	01 e0       	ldi	r16, 0x01	; 1
    2514:	12 c0       	rjmp	.+36     	; 0x253a <xTaskGenericNotify+0xfc>
    2516:	82 30       	cpi	r24, 0x02	; 2
    2518:	79 f0       	breq	.+30     	; 0x2538 <xTaskGenericNotify+0xfa>
    251a:	66 0f       	add	r22, r22
    251c:	77 1f       	adc	r23, r23
    251e:	66 0f       	add	r22, r22
    2520:	77 1f       	adc	r23, r23
    2522:	fd 01       	movw	r30, r26
    2524:	e6 0f       	add	r30, r22
    2526:	f7 1f       	adc	r31, r23
    2528:	27 a7       	std	Z+47, r18	; 0x2f
    252a:	30 ab       	std	Z+48, r19	; 0x30
    252c:	41 ab       	std	Z+49, r20	; 0x31
    252e:	52 ab       	std	Z+50, r21	; 0x32
    2530:	01 e0       	ldi	r16, 0x01	; 1
    2532:	03 c0       	rjmp	.+6      	; 0x253a <xTaskGenericNotify+0xfc>
    2534:	01 e0       	ldi	r16, 0x01	; 1
    2536:	01 c0       	rjmp	.+2      	; 0x253a <xTaskGenericNotify+0xfc>
    2538:	00 e0       	ldi	r16, 0x00	; 0
    253a:	81 30       	cpi	r24, 0x01	; 1
    253c:	09 f0       	breq	.+2      	; 0x2540 <xTaskGenericNotify+0x102>
    253e:	69 c0       	rjmp	.+210    	; 0x2612 <xTaskGenericNotify+0x1d4>
    2540:	1c 96       	adiw	r26, 0x0c	; 12
    2542:	ed 91       	ld	r30, X+
    2544:	fc 91       	ld	r31, X
    2546:	1d 97       	sbiw	r26, 0x0d	; 13
    2548:	16 96       	adiw	r26, 0x06	; 6
    254a:	cd 91       	ld	r28, X+
    254c:	dc 91       	ld	r29, X
    254e:	17 97       	sbiw	r26, 0x07	; 7
    2550:	18 96       	adiw	r26, 0x08	; 8
    2552:	8d 91       	ld	r24, X+
    2554:	9c 91       	ld	r25, X
    2556:	19 97       	sbiw	r26, 0x09	; 9
    2558:	9f 83       	std	Y+7, r25	; 0x07
    255a:	8e 83       	std	Y+6, r24	; 0x06
    255c:	18 96       	adiw	r26, 0x08	; 8
    255e:	cd 91       	ld	r28, X+
    2560:	dc 91       	ld	r29, X
    2562:	19 97       	sbiw	r26, 0x09	; 9
    2564:	16 96       	adiw	r26, 0x06	; 6
    2566:	8d 91       	ld	r24, X+
    2568:	9c 91       	ld	r25, X
    256a:	17 97       	sbiw	r26, 0x07	; 7
    256c:	9d 83       	std	Y+5, r25	; 0x05
    256e:	8c 83       	std	Y+4, r24	; 0x04
    2570:	81 81       	ldd	r24, Z+1	; 0x01
    2572:	92 81       	ldd	r25, Z+2	; 0x02
    2574:	9d 01       	movw	r18, r26
    2576:	2e 5f       	subi	r18, 0xFE	; 254
    2578:	3f 4f       	sbci	r19, 0xFF	; 255
    257a:	82 17       	cp	r24, r18
    257c:	93 07       	cpc	r25, r19
    257e:	31 f4       	brne	.+12     	; 0x258c <xTaskGenericNotify+0x14e>
    2580:	18 96       	adiw	r26, 0x08	; 8
    2582:	8d 91       	ld	r24, X+
    2584:	9c 91       	ld	r25, X
    2586:	19 97       	sbiw	r26, 0x09	; 9
    2588:	92 83       	std	Z+2, r25	; 0x02
    258a:	81 83       	std	Z+1, r24	; 0x01
    258c:	1d 96       	adiw	r26, 0x0d	; 13
    258e:	1c 92       	st	X, r1
    2590:	1e 92       	st	-X, r1
    2592:	1c 97       	sbiw	r26, 0x0c	; 12
    2594:	80 81       	ld	r24, Z
    2596:	81 50       	subi	r24, 0x01	; 1
    2598:	80 83       	st	Z, r24
    259a:	5a 96       	adiw	r26, 0x1a	; 26
    259c:	ec 91       	ld	r30, X
    259e:	5a 97       	sbiw	r26, 0x1a	; 26
    25a0:	80 91 5f 15 	lds	r24, 0x155F	; 0x80155f <uxTopReadyPriority>
    25a4:	8e 17       	cp	r24, r30
    25a6:	10 f4       	brcc	.+4      	; 0x25ac <xTaskGenericNotify+0x16e>
    25a8:	e0 93 5f 15 	sts	0x155F, r30	; 0x80155f <uxTopReadyPriority>
    25ac:	8b e0       	ldi	r24, 0x0B	; 11
    25ae:	8e 9f       	mul	r24, r30
    25b0:	f0 01       	movw	r30, r0
    25b2:	11 24       	eor	r1, r1
    25b4:	ef 55       	subi	r30, 0x5F	; 95
    25b6:	fa 4e       	sbci	r31, 0xEA	; 234
    25b8:	01 80       	ldd	r0, Z+1	; 0x01
    25ba:	f2 81       	ldd	r31, Z+2	; 0x02
    25bc:	e0 2d       	mov	r30, r0
    25be:	17 96       	adiw	r26, 0x07	; 7
    25c0:	fc 93       	st	X, r31
    25c2:	ee 93       	st	-X, r30
    25c4:	16 97       	sbiw	r26, 0x06	; 6
    25c6:	46 81       	ldd	r20, Z+6	; 0x06
    25c8:	57 81       	ldd	r21, Z+7	; 0x07
    25ca:	19 96       	adiw	r26, 0x09	; 9
    25cc:	5c 93       	st	X, r21
    25ce:	4e 93       	st	-X, r20
    25d0:	18 97       	sbiw	r26, 0x08	; 8
    25d2:	c6 81       	ldd	r28, Z+6	; 0x06
    25d4:	d7 81       	ldd	r29, Z+7	; 0x07
    25d6:	3d 83       	std	Y+5, r19	; 0x05
    25d8:	2c 83       	std	Y+4, r18	; 0x04
    25da:	37 83       	std	Z+7, r19	; 0x07
    25dc:	26 83       	std	Z+6, r18	; 0x06
    25de:	5a 96       	adiw	r26, 0x1a	; 26
    25e0:	ec 91       	ld	r30, X
    25e2:	5a 97       	sbiw	r26, 0x1a	; 26
    25e4:	8e 9f       	mul	r24, r30
    25e6:	f0 01       	movw	r30, r0
    25e8:	11 24       	eor	r1, r1
    25ea:	ef 55       	subi	r30, 0x5F	; 95
    25ec:	fa 4e       	sbci	r31, 0xEA	; 234
    25ee:	1d 96       	adiw	r26, 0x0d	; 13
    25f0:	fc 93       	st	X, r31
    25f2:	ee 93       	st	-X, r30
    25f4:	1c 97       	sbiw	r26, 0x0c	; 12
    25f6:	80 81       	ld	r24, Z
    25f8:	8f 5f       	subi	r24, 0xFF	; 255
    25fa:	80 83       	st	Z, r24
    25fc:	5a 96       	adiw	r26, 0x1a	; 26
    25fe:	9c 91       	ld	r25, X
    2600:	e0 91 0f 16 	lds	r30, 0x160F	; 0x80160f <pxCurrentTCB>
    2604:	f0 91 10 16 	lds	r31, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    2608:	82 8d       	ldd	r24, Z+26	; 0x1a
    260a:	89 17       	cp	r24, r25
    260c:	10 f4       	brcc	.+4      	; 0x2612 <xTaskGenericNotify+0x1d4>
    260e:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    2612:	0f 90       	pop	r0
    2614:	0f be       	out	0x3f, r0	; 63
    2616:	80 2f       	mov	r24, r16
    2618:	df 91       	pop	r29
    261a:	cf 91       	pop	r28
    261c:	0f 91       	pop	r16
    261e:	ff 90       	pop	r15
    2620:	ef 90       	pop	r14
    2622:	bf 90       	pop	r11
    2624:	af 90       	pop	r10
    2626:	9f 90       	pop	r9
    2628:	8f 90       	pop	r8
    262a:	08 95       	ret

0000262c <xTaskGenericNotifyFromISR>:
    262c:	8f 92       	push	r8
    262e:	9f 92       	push	r9
    2630:	af 92       	push	r10
    2632:	bf 92       	push	r11
    2634:	cf 92       	push	r12
    2636:	df 92       	push	r13
    2638:	ef 92       	push	r14
    263a:	ff 92       	push	r15
    263c:	0f 93       	push	r16
    263e:	cf 93       	push	r28
    2640:	df 93       	push	r29
    2642:	dc 01       	movw	r26, r24
    2644:	e1 14       	cp	r14, r1
    2646:	f1 04       	cpc	r15, r1
    2648:	89 f0       	breq	.+34     	; 0x266c <xTaskGenericNotifyFromISR+0x40>
    264a:	e6 2f       	mov	r30, r22
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	ee 0f       	add	r30, r30
    2650:	ff 1f       	adc	r31, r31
    2652:	ee 0f       	add	r30, r30
    2654:	ff 1f       	adc	r31, r31
    2656:	e8 0f       	add	r30, r24
    2658:	f9 1f       	adc	r31, r25
    265a:	87 a4       	ldd	r8, Z+47	; 0x2f
    265c:	90 a8       	ldd	r9, Z+48	; 0x30
    265e:	a1 a8       	ldd	r10, Z+49	; 0x31
    2660:	b2 a8       	ldd	r11, Z+50	; 0x32
    2662:	f7 01       	movw	r30, r14
    2664:	80 82       	st	Z, r8
    2666:	91 82       	std	Z+1, r9	; 0x01
    2668:	a2 82       	std	Z+2, r10	; 0x02
    266a:	b3 82       	std	Z+3, r11	; 0x03
    266c:	70 e0       	ldi	r23, 0x00	; 0
    266e:	fd 01       	movw	r30, r26
    2670:	e6 0f       	add	r30, r22
    2672:	f7 1f       	adc	r31, r23
    2674:	93 a9       	ldd	r25, Z+51	; 0x33
    2676:	82 e0       	ldi	r24, 0x02	; 2
    2678:	83 ab       	std	Z+51, r24	; 0x33
    267a:	02 30       	cpi	r16, 0x02	; 2
    267c:	01 f1       	breq	.+64     	; 0x26be <xTaskGenericNotifyFromISR+0x92>
    267e:	18 f4       	brcc	.+6      	; 0x2686 <xTaskGenericNotifyFromISR+0x5a>
    2680:	01 30       	cpi	r16, 0x01	; 1
    2682:	31 f0       	breq	.+12     	; 0x2690 <xTaskGenericNotifyFromISR+0x64>
    2684:	4d c0       	rjmp	.+154    	; 0x2720 <xTaskGenericNotifyFromISR+0xf4>
    2686:	03 30       	cpi	r16, 0x03	; 3
    2688:	79 f1       	breq	.+94     	; 0x26e8 <xTaskGenericNotifyFromISR+0xbc>
    268a:	04 30       	cpi	r16, 0x04	; 4
    268c:	d1 f1       	breq	.+116    	; 0x2702 <xTaskGenericNotifyFromISR+0xd6>
    268e:	48 c0       	rjmp	.+144    	; 0x2720 <xTaskGenericNotifyFromISR+0xf4>
    2690:	66 0f       	add	r22, r22
    2692:	77 1f       	adc	r23, r23
    2694:	66 0f       	add	r22, r22
    2696:	77 1f       	adc	r23, r23
    2698:	fd 01       	movw	r30, r26
    269a:	e6 0f       	add	r30, r22
    269c:	f7 1f       	adc	r31, r23
    269e:	87 a4       	ldd	r8, Z+47	; 0x2f
    26a0:	90 a8       	ldd	r9, Z+48	; 0x30
    26a2:	a1 a8       	ldd	r10, Z+49	; 0x31
    26a4:	b2 a8       	ldd	r11, Z+50	; 0x32
    26a6:	ba 01       	movw	r22, r20
    26a8:	a9 01       	movw	r20, r18
    26aa:	48 29       	or	r20, r8
    26ac:	59 29       	or	r21, r9
    26ae:	6a 29       	or	r22, r10
    26b0:	7b 29       	or	r23, r11
    26b2:	47 a7       	std	Z+47, r20	; 0x2f
    26b4:	50 ab       	std	Z+48, r21	; 0x30
    26b6:	61 ab       	std	Z+49, r22	; 0x31
    26b8:	72 ab       	std	Z+50, r23	; 0x32
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	34 c0       	rjmp	.+104    	; 0x2726 <xTaskGenericNotifyFromISR+0xfa>
    26be:	66 0f       	add	r22, r22
    26c0:	77 1f       	adc	r23, r23
    26c2:	66 0f       	add	r22, r22
    26c4:	77 1f       	adc	r23, r23
    26c6:	fd 01       	movw	r30, r26
    26c8:	e6 0f       	add	r30, r22
    26ca:	f7 1f       	adc	r31, r23
    26cc:	47 a5       	ldd	r20, Z+47	; 0x2f
    26ce:	50 a9       	ldd	r21, Z+48	; 0x30
    26d0:	61 a9       	ldd	r22, Z+49	; 0x31
    26d2:	72 a9       	ldd	r23, Z+50	; 0x32
    26d4:	4f 5f       	subi	r20, 0xFF	; 255
    26d6:	5f 4f       	sbci	r21, 0xFF	; 255
    26d8:	6f 4f       	sbci	r22, 0xFF	; 255
    26da:	7f 4f       	sbci	r23, 0xFF	; 255
    26dc:	47 a7       	std	Z+47, r20	; 0x2f
    26de:	50 ab       	std	Z+48, r21	; 0x30
    26e0:	61 ab       	std	Z+49, r22	; 0x31
    26e2:	72 ab       	std	Z+50, r23	; 0x32
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	1f c0       	rjmp	.+62     	; 0x2726 <xTaskGenericNotifyFromISR+0xfa>
    26e8:	66 0f       	add	r22, r22
    26ea:	77 1f       	adc	r23, r23
    26ec:	66 0f       	add	r22, r22
    26ee:	77 1f       	adc	r23, r23
    26f0:	fd 01       	movw	r30, r26
    26f2:	e6 0f       	add	r30, r22
    26f4:	f7 1f       	adc	r31, r23
    26f6:	27 a7       	std	Z+47, r18	; 0x2f
    26f8:	30 ab       	std	Z+48, r19	; 0x30
    26fa:	41 ab       	std	Z+49, r20	; 0x31
    26fc:	52 ab       	std	Z+50, r21	; 0x32
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	12 c0       	rjmp	.+36     	; 0x2726 <xTaskGenericNotifyFromISR+0xfa>
    2702:	92 30       	cpi	r25, 0x02	; 2
    2704:	79 f0       	breq	.+30     	; 0x2724 <xTaskGenericNotifyFromISR+0xf8>
    2706:	66 0f       	add	r22, r22
    2708:	77 1f       	adc	r23, r23
    270a:	66 0f       	add	r22, r22
    270c:	77 1f       	adc	r23, r23
    270e:	fd 01       	movw	r30, r26
    2710:	e6 0f       	add	r30, r22
    2712:	f7 1f       	adc	r31, r23
    2714:	27 a7       	std	Z+47, r18	; 0x2f
    2716:	30 ab       	std	Z+48, r19	; 0x30
    2718:	41 ab       	std	Z+49, r20	; 0x31
    271a:	52 ab       	std	Z+50, r21	; 0x32
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	03 c0       	rjmp	.+6      	; 0x2726 <xTaskGenericNotifyFromISR+0xfa>
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	01 c0       	rjmp	.+2      	; 0x2726 <xTaskGenericNotifyFromISR+0xfa>
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	91 30       	cpi	r25, 0x01	; 1
    2728:	09 f0       	breq	.+2      	; 0x272c <xTaskGenericNotifyFromISR+0x100>
    272a:	96 c0       	rjmp	.+300    	; 0x2858 <xTaskGenericNotifyFromISR+0x22c>
    272c:	90 91 50 15 	lds	r25, 0x1550	; 0x801550 <uxSchedulerSuspended>
    2730:	91 11       	cpse	r25, r1
    2732:	5f c0       	rjmp	.+190    	; 0x27f2 <xTaskGenericNotifyFromISR+0x1c6>
    2734:	1c 96       	adiw	r26, 0x0c	; 12
    2736:	ed 91       	ld	r30, X+
    2738:	fc 91       	ld	r31, X
    273a:	1d 97       	sbiw	r26, 0x0d	; 13
    273c:	16 96       	adiw	r26, 0x06	; 6
    273e:	cd 91       	ld	r28, X+
    2740:	dc 91       	ld	r29, X
    2742:	17 97       	sbiw	r26, 0x07	; 7
    2744:	18 96       	adiw	r26, 0x08	; 8
    2746:	2d 91       	ld	r18, X+
    2748:	3c 91       	ld	r19, X
    274a:	19 97       	sbiw	r26, 0x09	; 9
    274c:	3f 83       	std	Y+7, r19	; 0x07
    274e:	2e 83       	std	Y+6, r18	; 0x06
    2750:	18 96       	adiw	r26, 0x08	; 8
    2752:	cd 91       	ld	r28, X+
    2754:	dc 91       	ld	r29, X
    2756:	19 97       	sbiw	r26, 0x09	; 9
    2758:	16 96       	adiw	r26, 0x06	; 6
    275a:	2d 91       	ld	r18, X+
    275c:	3c 91       	ld	r19, X
    275e:	17 97       	sbiw	r26, 0x07	; 7
    2760:	3d 83       	std	Y+5, r19	; 0x05
    2762:	2c 83       	std	Y+4, r18	; 0x04
    2764:	41 81       	ldd	r20, Z+1	; 0x01
    2766:	52 81       	ldd	r21, Z+2	; 0x02
    2768:	9d 01       	movw	r18, r26
    276a:	2e 5f       	subi	r18, 0xFE	; 254
    276c:	3f 4f       	sbci	r19, 0xFF	; 255
    276e:	42 17       	cp	r20, r18
    2770:	53 07       	cpc	r21, r19
    2772:	31 f4       	brne	.+12     	; 0x2780 <xTaskGenericNotifyFromISR+0x154>
    2774:	18 96       	adiw	r26, 0x08	; 8
    2776:	4d 91       	ld	r20, X+
    2778:	5c 91       	ld	r21, X
    277a:	19 97       	sbiw	r26, 0x09	; 9
    277c:	52 83       	std	Z+2, r21	; 0x02
    277e:	41 83       	std	Z+1, r20	; 0x01
    2780:	1d 96       	adiw	r26, 0x0d	; 13
    2782:	1c 92       	st	X, r1
    2784:	1e 92       	st	-X, r1
    2786:	1c 97       	sbiw	r26, 0x0c	; 12
    2788:	90 81       	ld	r25, Z
    278a:	91 50       	subi	r25, 0x01	; 1
    278c:	90 83       	st	Z, r25
    278e:	5a 96       	adiw	r26, 0x1a	; 26
    2790:	ec 91       	ld	r30, X
    2792:	5a 97       	sbiw	r26, 0x1a	; 26
    2794:	90 91 5f 15 	lds	r25, 0x155F	; 0x80155f <uxTopReadyPriority>
    2798:	9e 17       	cp	r25, r30
    279a:	10 f4       	brcc	.+4      	; 0x27a0 <xTaskGenericNotifyFromISR+0x174>
    279c:	e0 93 5f 15 	sts	0x155F, r30	; 0x80155f <uxTopReadyPriority>
    27a0:	9b e0       	ldi	r25, 0x0B	; 11
    27a2:	9e 9f       	mul	r25, r30
    27a4:	f0 01       	movw	r30, r0
    27a6:	11 24       	eor	r1, r1
    27a8:	ef 55       	subi	r30, 0x5F	; 95
    27aa:	fa 4e       	sbci	r31, 0xEA	; 234
    27ac:	01 80       	ldd	r0, Z+1	; 0x01
    27ae:	f2 81       	ldd	r31, Z+2	; 0x02
    27b0:	e0 2d       	mov	r30, r0
    27b2:	17 96       	adiw	r26, 0x07	; 7
    27b4:	fc 93       	st	X, r31
    27b6:	ee 93       	st	-X, r30
    27b8:	16 97       	sbiw	r26, 0x06	; 6
    27ba:	46 81       	ldd	r20, Z+6	; 0x06
    27bc:	57 81       	ldd	r21, Z+7	; 0x07
    27be:	19 96       	adiw	r26, 0x09	; 9
    27c0:	5c 93       	st	X, r21
    27c2:	4e 93       	st	-X, r20
    27c4:	18 97       	sbiw	r26, 0x08	; 8
    27c6:	c6 81       	ldd	r28, Z+6	; 0x06
    27c8:	d7 81       	ldd	r29, Z+7	; 0x07
    27ca:	3d 83       	std	Y+5, r19	; 0x05
    27cc:	2c 83       	std	Y+4, r18	; 0x04
    27ce:	37 83       	std	Z+7, r19	; 0x07
    27d0:	26 83       	std	Z+6, r18	; 0x06
    27d2:	5a 96       	adiw	r26, 0x1a	; 26
    27d4:	ec 91       	ld	r30, X
    27d6:	5a 97       	sbiw	r26, 0x1a	; 26
    27d8:	9e 9f       	mul	r25, r30
    27da:	f0 01       	movw	r30, r0
    27dc:	11 24       	eor	r1, r1
    27de:	ef 55       	subi	r30, 0x5F	; 95
    27e0:	fa 4e       	sbci	r31, 0xEA	; 234
    27e2:	1d 96       	adiw	r26, 0x0d	; 13
    27e4:	fc 93       	st	X, r31
    27e6:	ee 93       	st	-X, r30
    27e8:	1c 97       	sbiw	r26, 0x0c	; 12
    27ea:	90 81       	ld	r25, Z
    27ec:	9f 5f       	subi	r25, 0xFF	; 255
    27ee:	90 83       	st	Z, r25
    27f0:	21 c0       	rjmp	.+66     	; 0x2834 <xTaskGenericNotifyFromISR+0x208>
    27f2:	6c e7       	ldi	r22, 0x7C	; 124
    27f4:	75 e1       	ldi	r23, 0x15	; 21
    27f6:	fb 01       	movw	r30, r22
    27f8:	c1 81       	ldd	r28, Z+1	; 0x01
    27fa:	d2 81       	ldd	r29, Z+2	; 0x02
    27fc:	53 96       	adiw	r26, 0x13	; 19
    27fe:	dc 93       	st	X, r29
    2800:	ce 93       	st	-X, r28
    2802:	52 97       	sbiw	r26, 0x12	; 18
    2804:	2e 81       	ldd	r18, Y+6	; 0x06
    2806:	3f 81       	ldd	r19, Y+7	; 0x07
    2808:	55 96       	adiw	r26, 0x15	; 21
    280a:	3c 93       	st	X, r19
    280c:	2e 93       	st	-X, r18
    280e:	54 97       	sbiw	r26, 0x14	; 20
    2810:	4e 81       	ldd	r20, Y+6	; 0x06
    2812:	5f 81       	ldd	r21, Y+7	; 0x07
    2814:	9d 01       	movw	r18, r26
    2816:	22 5f       	subi	r18, 0xF2	; 242
    2818:	3f 4f       	sbci	r19, 0xFF	; 255
    281a:	fa 01       	movw	r30, r20
    281c:	35 83       	std	Z+5, r19	; 0x05
    281e:	24 83       	std	Z+4, r18	; 0x04
    2820:	3f 83       	std	Y+7, r19	; 0x07
    2822:	2e 83       	std	Y+6, r18	; 0x06
    2824:	59 96       	adiw	r26, 0x19	; 25
    2826:	7c 93       	st	X, r23
    2828:	6e 93       	st	-X, r22
    282a:	58 97       	sbiw	r26, 0x18	; 24
    282c:	fb 01       	movw	r30, r22
    282e:	90 81       	ld	r25, Z
    2830:	9f 5f       	subi	r25, 0xFF	; 255
    2832:	90 83       	st	Z, r25
    2834:	5a 96       	adiw	r26, 0x1a	; 26
    2836:	2c 91       	ld	r18, X
    2838:	e0 91 0f 16 	lds	r30, 0x160F	; 0x80160f <pxCurrentTCB>
    283c:	f0 91 10 16 	lds	r31, 0x1610	; 0x801610 <pxCurrentTCB+0x1>
    2840:	92 8d       	ldd	r25, Z+26	; 0x1a
    2842:	92 17       	cp	r25, r18
    2844:	48 f4       	brcc	.+18     	; 0x2858 <xTaskGenericNotifyFromISR+0x22c>
    2846:	c1 14       	cp	r12, r1
    2848:	d1 04       	cpc	r13, r1
    284a:	19 f0       	breq	.+6      	; 0x2852 <xTaskGenericNotifyFromISR+0x226>
    284c:	91 e0       	ldi	r25, 0x01	; 1
    284e:	f6 01       	movw	r30, r12
    2850:	90 83       	st	Z, r25
    2852:	91 e0       	ldi	r25, 0x01	; 1
    2854:	90 93 59 15 	sts	0x1559, r25	; 0x801559 <xYieldPending>
    2858:	df 91       	pop	r29
    285a:	cf 91       	pop	r28
    285c:	0f 91       	pop	r16
    285e:	ff 90       	pop	r15
    2860:	ef 90       	pop	r14
    2862:	df 90       	pop	r13
    2864:	cf 90       	pop	r12
    2866:	bf 90       	pop	r11
    2868:	af 90       	pop	r10
    286a:	9f 90       	pop	r9
    286c:	8f 90       	pop	r8
    286e:	08 95       	ret

00002870 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2870:	00 97       	sbiw	r24, 0x00	; 0
    2872:	21 f4       	brne	.+8      	; 0x287c <xTaskGenericNotifyStateClear+0xc>
    2874:	80 91 0f 16 	lds	r24, 0x160F	; 0x80160f <pxCurrentTCB>
    2878:	90 91 10 16 	lds	r25, 0x1610	; 0x801610 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    287c:	0f b6       	in	r0, 0x3f	; 63
    287e:	f8 94       	cli
    2880:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2882:	70 e0       	ldi	r23, 0x00	; 0
    2884:	fc 01       	movw	r30, r24
    2886:	e6 0f       	add	r30, r22
    2888:	f7 1f       	adc	r31, r23
    288a:	23 a9       	ldd	r18, Z+51	; 0x33
    288c:	22 30       	cpi	r18, 0x02	; 2
    288e:	31 f4       	brne	.+12     	; 0x289c <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2890:	fc 01       	movw	r30, r24
    2892:	e6 0f       	add	r30, r22
    2894:	f7 1f       	adc	r31, r23
    2896:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	01 c0       	rjmp	.+2      	; 0x289e <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    289c:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    289e:	0f 90       	pop	r0
    28a0:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    28a2:	08 95       	ret

000028a4 <prvGetNextExpireTime>:
    28a4:	dc 01       	movw	r26, r24
    28a6:	e0 91 1b 16 	lds	r30, 0x161B	; 0x80161b <pxCurrentTimerList>
    28aa:	f0 91 1c 16 	lds	r31, 0x161C	; 0x80161c <pxCurrentTimerList+0x1>
    28ae:	80 81       	ld	r24, Z
    28b0:	91 e0       	ldi	r25, 0x01	; 1
    28b2:	81 11       	cpse	r24, r1
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	9c 93       	st	X, r25
    28b8:	91 11       	cpse	r25, r1
    28ba:	08 c0       	rjmp	.+16     	; 0x28cc <prvGetNextExpireTime+0x28>
    28bc:	07 80       	ldd	r0, Z+7	; 0x07
    28be:	f0 85       	ldd	r31, Z+8	; 0x08
    28c0:	e0 2d       	mov	r30, r0
    28c2:	60 81       	ld	r22, Z
    28c4:	71 81       	ldd	r23, Z+1	; 0x01
    28c6:	82 81       	ldd	r24, Z+2	; 0x02
    28c8:	93 81       	ldd	r25, Z+3	; 0x03
    28ca:	08 95       	ret
    28cc:	60 e0       	ldi	r22, 0x00	; 0
    28ce:	70 e0       	ldi	r23, 0x00	; 0
    28d0:	cb 01       	movw	r24, r22
    28d2:	08 95       	ret

000028d4 <prvInsertTimerInActiveList>:
    28d4:	cf 92       	push	r12
    28d6:	df 92       	push	r13
    28d8:	ef 92       	push	r14
    28da:	ff 92       	push	r15
    28dc:	0f 93       	push	r16
    28de:	1f 93       	push	r17
    28e0:	fc 01       	movw	r30, r24
    28e2:	42 83       	std	Z+2, r20	; 0x02
    28e4:	53 83       	std	Z+3, r21	; 0x03
    28e6:	64 83       	std	Z+4, r22	; 0x04
    28e8:	75 83       	std	Z+5, r23	; 0x05
    28ea:	93 87       	std	Z+11, r25	; 0x0b
    28ec:	82 87       	std	Z+10, r24	; 0x0a
    28ee:	04 17       	cp	r16, r20
    28f0:	15 07       	cpc	r17, r21
    28f2:	26 07       	cpc	r18, r22
    28f4:	37 07       	cpc	r19, r23
    28f6:	c0 f0       	brcs	.+48     	; 0x2928 <prvInsertTimerInActiveList+0x54>
    28f8:	0c 19       	sub	r16, r12
    28fa:	1d 09       	sbc	r17, r13
    28fc:	2e 09       	sbc	r18, r14
    28fe:	3f 09       	sbc	r19, r15
    2900:	86 85       	ldd	r24, Z+14	; 0x0e
    2902:	97 85       	ldd	r25, Z+15	; 0x0f
    2904:	a0 89       	ldd	r26, Z+16	; 0x10
    2906:	b1 89       	ldd	r27, Z+17	; 0x11
    2908:	08 17       	cp	r16, r24
    290a:	19 07       	cpc	r17, r25
    290c:	2a 07       	cpc	r18, r26
    290e:	3b 07       	cpc	r19, r27
    2910:	00 f5       	brcc	.+64     	; 0x2952 <prvInsertTimerInActiveList+0x7e>
    2912:	bf 01       	movw	r22, r30
    2914:	6e 5f       	subi	r22, 0xFE	; 254
    2916:	7f 4f       	sbci	r23, 0xFF	; 255
    2918:	80 91 19 16 	lds	r24, 0x1619	; 0x801619 <pxOverflowTimerList>
    291c:	90 91 1a 16 	lds	r25, 0x161A	; 0x80161a <pxOverflowTimerList+0x1>
    2920:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	18 c0       	rjmp	.+48     	; 0x2958 <prvInsertTimerInActiveList+0x84>
    2928:	0c 15       	cp	r16, r12
    292a:	1d 05       	cpc	r17, r13
    292c:	2e 05       	cpc	r18, r14
    292e:	3f 05       	cpc	r19, r15
    2930:	28 f4       	brcc	.+10     	; 0x293c <prvInsertTimerInActiveList+0x68>
    2932:	4c 15       	cp	r20, r12
    2934:	5d 05       	cpc	r21, r13
    2936:	6e 05       	cpc	r22, r14
    2938:	7f 05       	cpc	r23, r15
    293a:	68 f4       	brcc	.+26     	; 0x2956 <prvInsertTimerInActiveList+0x82>
    293c:	bf 01       	movw	r22, r30
    293e:	6e 5f       	subi	r22, 0xFE	; 254
    2940:	7f 4f       	sbci	r23, 0xFF	; 255
    2942:	80 91 1b 16 	lds	r24, 0x161B	; 0x80161b <pxCurrentTimerList>
    2946:	90 91 1c 16 	lds	r25, 0x161C	; 0x80161c <pxCurrentTimerList+0x1>
    294a:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	03 c0       	rjmp	.+6      	; 0x2958 <prvInsertTimerInActiveList+0x84>
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	01 c0       	rjmp	.+2      	; 0x2958 <prvInsertTimerInActiveList+0x84>
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	1f 91       	pop	r17
    295a:	0f 91       	pop	r16
    295c:	ff 90       	pop	r15
    295e:	ef 90       	pop	r14
    2960:	df 90       	pop	r13
    2962:	cf 90       	pop	r12
    2964:	08 95       	ret

00002966 <prvCheckForValidListAndQueue>:
    2966:	0f b6       	in	r0, 0x3f	; 63
    2968:	f8 94       	cli
    296a:	0f 92       	push	r0
    296c:	80 91 17 16 	lds	r24, 0x1617	; 0x801617 <xTimerQueue>
    2970:	90 91 18 16 	lds	r25, 0x1618	; 0x801618 <xTimerQueue+0x1>
    2974:	89 2b       	or	r24, r25
    2976:	e9 f4       	brne	.+58     	; 0x29b2 <prvCheckForValidListAndQueue+0x4c>
    2978:	88 e2       	ldi	r24, 0x28	; 40
    297a:	96 e1       	ldi	r25, 0x16	; 22
    297c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    2980:	8d e1       	ldi	r24, 0x1D	; 29
    2982:	96 e1       	ldi	r25, 0x16	; 22
    2984:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    2988:	88 e2       	ldi	r24, 0x28	; 40
    298a:	96 e1       	ldi	r25, 0x16	; 22
    298c:	90 93 1c 16 	sts	0x161C, r25	; 0x80161c <pxCurrentTimerList+0x1>
    2990:	80 93 1b 16 	sts	0x161B, r24	; 0x80161b <pxCurrentTimerList>
    2994:	8d e1       	ldi	r24, 0x1D	; 29
    2996:	96 e1       	ldi	r25, 0x16	; 22
    2998:	90 93 1a 16 	sts	0x161A, r25	; 0x80161a <pxOverflowTimerList+0x1>
    299c:	80 93 19 16 	sts	0x1619, r24	; 0x801619 <pxOverflowTimerList>
    29a0:	40 e0       	ldi	r20, 0x00	; 0
    29a2:	67 e0       	ldi	r22, 0x07	; 7
    29a4:	8a e0       	ldi	r24, 0x0A	; 10
    29a6:	0e 94 14 05 	call	0xa28	; 0xa28 <xQueueGenericCreate>
    29aa:	90 93 18 16 	sts	0x1618, r25	; 0x801618 <xTimerQueue+0x1>
    29ae:	80 93 17 16 	sts	0x1617, r24	; 0x801617 <xTimerQueue>
    29b2:	0f 90       	pop	r0
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	08 95       	ret

000029b8 <xTimerCreateTimerTask>:
    29b8:	ef 92       	push	r14
    29ba:	ff 92       	push	r15
    29bc:	0f 93       	push	r16
    29be:	d3 df       	rcall	.-90     	; 0x2966 <prvCheckForValidListAndQueue>
    29c0:	80 91 17 16 	lds	r24, 0x1617	; 0x801617 <xTimerQueue>
    29c4:	90 91 18 16 	lds	r25, 0x1618	; 0x801618 <xTimerQueue+0x1>
    29c8:	89 2b       	or	r24, r25
    29ca:	91 f0       	breq	.+36     	; 0x29f0 <xTimerCreateTimerTask+0x38>
    29cc:	0f 2e       	mov	r0, r31
    29ce:	f5 e1       	ldi	r31, 0x15	; 21
    29d0:	ef 2e       	mov	r14, r31
    29d2:	f6 e1       	ldi	r31, 0x16	; 22
    29d4:	ff 2e       	mov	r15, r31
    29d6:	f0 2d       	mov	r31, r0
    29d8:	03 e0       	ldi	r16, 0x03	; 3
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	40 ec       	ldi	r20, 0xC0	; 192
    29e0:	50 e0       	ldi	r21, 0x00	; 0
    29e2:	64 e7       	ldi	r22, 0x74	; 116
    29e4:	72 e0       	ldi	r23, 0x02	; 2
    29e6:	87 ed       	ldi	r24, 0xD7	; 215
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskCreate>
    29ee:	01 c0       	rjmp	.+2      	; 0x29f2 <xTimerCreateTimerTask+0x3a>
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	0f 91       	pop	r16
    29f4:	ff 90       	pop	r15
    29f6:	ef 90       	pop	r14
    29f8:	08 95       	ret

000029fa <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    29fa:	8f 92       	push	r8
    29fc:	9f 92       	push	r9
    29fe:	af 92       	push	r10
    2a00:	bf 92       	push	r11
    2a02:	cf 92       	push	r12
    2a04:	df 92       	push	r13
    2a06:	ef 92       	push	r14
    2a08:	ff 92       	push	r15
    2a0a:	0f 93       	push	r16
    2a0c:	1f 93       	push	r17
    2a0e:	cf 93       	push	r28
    2a10:	df 93       	push	r29
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
    2a16:	27 97       	sbiw	r28, 0x07	; 7
    2a18:	0f b6       	in	r0, 0x3f	; 63
    2a1a:	f8 94       	cli
    2a1c:	de bf       	out	0x3e, r29	; 62
    2a1e:	0f be       	out	0x3f, r0	; 63
    2a20:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2a22:	e0 91 17 16 	lds	r30, 0x1617	; 0x801617 <xTimerQueue>
    2a26:	f0 91 18 16 	lds	r31, 0x1618	; 0x801618 <xTimerQueue+0x1>
    2a2a:	30 97       	sbiw	r30, 0x00	; 0
    2a2c:	81 f1       	breq	.+96     	; 0x2a8e <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2a2e:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2a30:	2a 83       	std	Y+2, r18	; 0x02
    2a32:	3b 83       	std	Y+3, r19	; 0x03
    2a34:	4c 83       	std	Y+4, r20	; 0x04
    2a36:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2a38:	9f 83       	std	Y+7, r25	; 0x07
    2a3a:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2a3c:	66 30       	cpi	r22, 0x06	; 6
    2a3e:	f4 f4       	brge	.+60     	; 0x2a7c <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2a40:	ee db       	rcall	.-2084   	; 0x221e <xTaskGetSchedulerState>
    2a42:	82 30       	cpi	r24, 0x02	; 2
    2a44:	69 f4       	brne	.+26     	; 0x2a60 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2a46:	00 e0       	ldi	r16, 0x00	; 0
    2a48:	a7 01       	movw	r20, r14
    2a4a:	96 01       	movw	r18, r12
    2a4c:	be 01       	movw	r22, r28
    2a4e:	6f 5f       	subi	r22, 0xFF	; 255
    2a50:	7f 4f       	sbci	r23, 0xFF	; 255
    2a52:	80 91 17 16 	lds	r24, 0x1617	; 0x801617 <xTimerQueue>
    2a56:	90 91 18 16 	lds	r25, 0x1618	; 0x801618 <xTimerQueue+0x1>
    2a5a:	0e 94 37 05 	call	0xa6e	; 0xa6e <xQueueGenericSend>
    2a5e:	18 c0       	rjmp	.+48     	; 0x2a90 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2a60:	00 e0       	ldi	r16, 0x00	; 0
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	a9 01       	movw	r20, r18
    2a68:	be 01       	movw	r22, r28
    2a6a:	6f 5f       	subi	r22, 0xFF	; 255
    2a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a6e:	80 91 17 16 	lds	r24, 0x1617	; 0x801617 <xTimerQueue>
    2a72:	90 91 18 16 	lds	r25, 0x1618	; 0x801618 <xTimerQueue+0x1>
    2a76:	0e 94 37 05 	call	0xa6e	; 0xa6e <xQueueGenericSend>
    2a7a:	0a c0       	rjmp	.+20     	; 0x2a90 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	a8 01       	movw	r20, r16
    2a80:	be 01       	movw	r22, r28
    2a82:	6f 5f       	subi	r22, 0xFF	; 255
    2a84:	7f 4f       	sbci	r23, 0xFF	; 255
    2a86:	cf 01       	movw	r24, r30
    2a88:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xQueueGenericSendFromISR>
    2a8c:	01 c0       	rjmp	.+2      	; 0x2a90 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2a90:	27 96       	adiw	r28, 0x07	; 7
    2a92:	0f b6       	in	r0, 0x3f	; 63
    2a94:	f8 94       	cli
    2a96:	de bf       	out	0x3e, r29	; 62
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	cd bf       	out	0x3d, r28	; 61
    2a9c:	df 91       	pop	r29
    2a9e:	cf 91       	pop	r28
    2aa0:	1f 91       	pop	r17
    2aa2:	0f 91       	pop	r16
    2aa4:	ff 90       	pop	r15
    2aa6:	ef 90       	pop	r14
    2aa8:	df 90       	pop	r13
    2aaa:	cf 90       	pop	r12
    2aac:	bf 90       	pop	r11
    2aae:	af 90       	pop	r10
    2ab0:	9f 90       	pop	r9
    2ab2:	8f 90       	pop	r8
    2ab4:	08 95       	ret

00002ab6 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2ab6:	8f 92       	push	r8
    2ab8:	9f 92       	push	r9
    2aba:	af 92       	push	r10
    2abc:	bf 92       	push	r11
    2abe:	cf 92       	push	r12
    2ac0:	df 92       	push	r13
    2ac2:	ef 92       	push	r14
    2ac4:	ff 92       	push	r15
    2ac6:	0f 93       	push	r16
    2ac8:	1f 93       	push	r17
    2aca:	cf 93       	push	r28
    2acc:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2ace:	3b c0       	rjmp	.+118    	; 0x2b46 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2ad0:	07 80       	ldd	r0, Z+7	; 0x07
    2ad2:	f0 85       	ldd	r31, Z+8	; 0x08
    2ad4:	e0 2d       	mov	r30, r0
    2ad6:	80 80       	ld	r8, Z
    2ad8:	91 80       	ldd	r9, Z+1	; 0x01
    2ada:	a2 80       	ldd	r10, Z+2	; 0x02
    2adc:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2ade:	c0 85       	ldd	r28, Z+8	; 0x08
    2ae0:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2ae2:	8e 01       	movw	r16, r28
    2ae4:	0e 5f       	subi	r16, 0xFE	; 254
    2ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae8:	c8 01       	movw	r24, r16
    2aea:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2aee:	ec 89       	ldd	r30, Y+20	; 0x14
    2af0:	fd 89       	ldd	r31, Y+21	; 0x15
    2af2:	ce 01       	movw	r24, r28
    2af4:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2af6:	8e 89       	ldd	r24, Y+22	; 0x16
    2af8:	82 ff       	sbrs	r24, 2
    2afa:	25 c0       	rjmp	.+74     	; 0x2b46 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2afc:	8e 85       	ldd	r24, Y+14	; 0x0e
    2afe:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b00:	a8 89       	ldd	r26, Y+16	; 0x10
    2b02:	b9 89       	ldd	r27, Y+17	; 0x11
    2b04:	88 0d       	add	r24, r8
    2b06:	99 1d       	adc	r25, r9
    2b08:	aa 1d       	adc	r26, r10
    2b0a:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2b0c:	88 16       	cp	r8, r24
    2b0e:	99 06       	cpc	r9, r25
    2b10:	aa 06       	cpc	r10, r26
    2b12:	bb 06       	cpc	r11, r27
    2b14:	70 f4       	brcc	.+28     	; 0x2b32 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2b16:	8a 83       	std	Y+2, r24	; 0x02
    2b18:	9b 83       	std	Y+3, r25	; 0x03
    2b1a:	ac 83       	std	Y+4, r26	; 0x04
    2b1c:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2b1e:	db 87       	std	Y+11, r29	; 0x0b
    2b20:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2b22:	b8 01       	movw	r22, r16
    2b24:	80 91 1b 16 	lds	r24, 0x161B	; 0x80161b <pxCurrentTimerList>
    2b28:	90 91 1c 16 	lds	r25, 0x161C	; 0x80161c <pxCurrentTimerList+0x1>
    2b2c:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    2b30:	0a c0       	rjmp	.+20     	; 0x2b46 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2b32:	c1 2c       	mov	r12, r1
    2b34:	d1 2c       	mov	r13, r1
    2b36:	76 01       	movw	r14, r12
    2b38:	00 e0       	ldi	r16, 0x00	; 0
    2b3a:	10 e0       	ldi	r17, 0x00	; 0
    2b3c:	a5 01       	movw	r20, r10
    2b3e:	94 01       	movw	r18, r8
    2b40:	60 e0       	ldi	r22, 0x00	; 0
    2b42:	ce 01       	movw	r24, r28
    2b44:	5a df       	rcall	.-332    	; 0x29fa <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2b46:	e0 91 1b 16 	lds	r30, 0x161B	; 0x80161b <pxCurrentTimerList>
    2b4a:	f0 91 1c 16 	lds	r31, 0x161C	; 0x80161c <pxCurrentTimerList+0x1>
    2b4e:	80 81       	ld	r24, Z
    2b50:	81 11       	cpse	r24, r1
    2b52:	be cf       	rjmp	.-132    	; 0x2ad0 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2b54:	80 91 19 16 	lds	r24, 0x1619	; 0x801619 <pxOverflowTimerList>
    2b58:	90 91 1a 16 	lds	r25, 0x161A	; 0x80161a <pxOverflowTimerList+0x1>
    2b5c:	90 93 1c 16 	sts	0x161C, r25	; 0x80161c <pxCurrentTimerList+0x1>
    2b60:	80 93 1b 16 	sts	0x161B, r24	; 0x80161b <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2b64:	f0 93 1a 16 	sts	0x161A, r31	; 0x80161a <pxOverflowTimerList+0x1>
    2b68:	e0 93 19 16 	sts	0x1619, r30	; 0x801619 <pxOverflowTimerList>
    }
    2b6c:	df 91       	pop	r29
    2b6e:	cf 91       	pop	r28
    2b70:	1f 91       	pop	r17
    2b72:	0f 91       	pop	r16
    2b74:	ff 90       	pop	r15
    2b76:	ef 90       	pop	r14
    2b78:	df 90       	pop	r13
    2b7a:	cf 90       	pop	r12
    2b7c:	bf 90       	pop	r11
    2b7e:	af 90       	pop	r10
    2b80:	9f 90       	pop	r9
    2b82:	8f 90       	pop	r8
    2b84:	08 95       	ret

00002b86 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2b86:	cf 92       	push	r12
    2b88:	df 92       	push	r13
    2b8a:	ef 92       	push	r14
    2b8c:	ff 92       	push	r15
    2b8e:	cf 93       	push	r28
    2b90:	df 93       	push	r29
    2b92:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2b94:	0e 94 76 0c 	call	0x18ec	; 0x18ec <xTaskGetTickCount>
    2b98:	6b 01       	movw	r12, r22
    2b9a:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2b9c:	80 91 11 16 	lds	r24, 0x1611	; 0x801611 <xLastTime.2436>
    2ba0:	90 91 12 16 	lds	r25, 0x1612	; 0x801612 <xLastTime.2436+0x1>
    2ba4:	a0 91 13 16 	lds	r26, 0x1613	; 0x801613 <xLastTime.2436+0x2>
    2ba8:	b0 91 14 16 	lds	r27, 0x1614	; 0x801614 <xLastTime.2436+0x3>
    2bac:	c8 16       	cp	r12, r24
    2bae:	d9 06       	cpc	r13, r25
    2bb0:	ea 06       	cpc	r14, r26
    2bb2:	fb 06       	cpc	r15, r27
    2bb4:	20 f4       	brcc	.+8      	; 0x2bbe <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2bb6:	7f df       	rcall	.-258    	; 0x2ab6 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	88 83       	st	Y, r24
    2bbc:	01 c0       	rjmp	.+2      	; 0x2bc0 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2bbe:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2bc0:	c0 92 11 16 	sts	0x1611, r12	; 0x801611 <xLastTime.2436>
    2bc4:	d0 92 12 16 	sts	0x1612, r13	; 0x801612 <xLastTime.2436+0x1>
    2bc8:	e0 92 13 16 	sts	0x1613, r14	; 0x801613 <xLastTime.2436+0x2>
    2bcc:	f0 92 14 16 	sts	0x1614, r15	; 0x801614 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2bd0:	c7 01       	movw	r24, r14
    2bd2:	b6 01       	movw	r22, r12
    2bd4:	df 91       	pop	r29
    2bd6:	cf 91       	pop	r28
    2bd8:	ff 90       	pop	r15
    2bda:	ef 90       	pop	r14
    2bdc:	df 90       	pop	r13
    2bde:	cf 90       	pop	r12
    2be0:	08 95       	ret

00002be2 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2be2:	4f 92       	push	r4
    2be4:	5f 92       	push	r5
    2be6:	6f 92       	push	r6
    2be8:	7f 92       	push	r7
    2bea:	8f 92       	push	r8
    2bec:	9f 92       	push	r9
    2bee:	af 92       	push	r10
    2bf0:	bf 92       	push	r11
    2bf2:	cf 92       	push	r12
    2bf4:	df 92       	push	r13
    2bf6:	ef 92       	push	r14
    2bf8:	ff 92       	push	r15
    2bfa:	0f 93       	push	r16
    2bfc:	1f 93       	push	r17
    2bfe:	cf 93       	push	r28
    2c00:	df 93       	push	r29
    2c02:	4b 01       	movw	r8, r22
    2c04:	5c 01       	movw	r10, r24
    2c06:	29 01       	movw	r4, r18
    2c08:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2c0a:	e0 91 1b 16 	lds	r30, 0x161B	; 0x80161b <pxCurrentTimerList>
    2c0e:	f0 91 1c 16 	lds	r31, 0x161C	; 0x80161c <pxCurrentTimerList+0x1>
    2c12:	07 80       	ldd	r0, Z+7	; 0x07
    2c14:	f0 85       	ldd	r31, Z+8	; 0x08
    2c16:	e0 2d       	mov	r30, r0
    2c18:	c0 85       	ldd	r28, Z+8	; 0x08
    2c1a:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2c1c:	ce 01       	movw	r24, r28
    2c1e:	02 96       	adiw	r24, 0x02	; 2
    2c20:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2c24:	8e 89       	ldd	r24, Y+22	; 0x16
    2c26:	82 ff       	sbrs	r24, 2
    2c28:	1b c0       	rjmp	.+54     	; 0x2c60 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2c2a:	4e 85       	ldd	r20, Y+14	; 0x0e
    2c2c:	5f 85       	ldd	r21, Y+15	; 0x0f
    2c2e:	68 89       	ldd	r22, Y+16	; 0x10
    2c30:	79 89       	ldd	r23, Y+17	; 0x11
    2c32:	48 0d       	add	r20, r8
    2c34:	59 1d       	adc	r21, r9
    2c36:	6a 1d       	adc	r22, r10
    2c38:	7b 1d       	adc	r23, r11
    2c3a:	75 01       	movw	r14, r10
    2c3c:	64 01       	movw	r12, r8
    2c3e:	93 01       	movw	r18, r6
    2c40:	82 01       	movw	r16, r4
    2c42:	ce 01       	movw	r24, r28
    2c44:	47 de       	rcall	.-882    	; 0x28d4 <prvInsertTimerInActiveList>
    2c46:	88 23       	and	r24, r24
    2c48:	69 f0       	breq	.+26     	; 0x2c64 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2c4a:	c1 2c       	mov	r12, r1
    2c4c:	d1 2c       	mov	r13, r1
    2c4e:	76 01       	movw	r14, r12
    2c50:	00 e0       	ldi	r16, 0x00	; 0
    2c52:	10 e0       	ldi	r17, 0x00	; 0
    2c54:	a5 01       	movw	r20, r10
    2c56:	94 01       	movw	r18, r8
    2c58:	60 e0       	ldi	r22, 0x00	; 0
    2c5a:	ce 01       	movw	r24, r28
    2c5c:	ce de       	rcall	.-612    	; 0x29fa <xTimerGenericCommand>
    2c5e:	02 c0       	rjmp	.+4      	; 0x2c64 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2c60:	8e 7f       	andi	r24, 0xFE	; 254
    2c62:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2c64:	ec 89       	ldd	r30, Y+20	; 0x14
    2c66:	fd 89       	ldd	r31, Y+21	; 0x15
    2c68:	ce 01       	movw	r24, r28
    2c6a:	19 95       	eicall
    }
    2c6c:	df 91       	pop	r29
    2c6e:	cf 91       	pop	r28
    2c70:	1f 91       	pop	r17
    2c72:	0f 91       	pop	r16
    2c74:	ff 90       	pop	r15
    2c76:	ef 90       	pop	r14
    2c78:	df 90       	pop	r13
    2c7a:	cf 90       	pop	r12
    2c7c:	bf 90       	pop	r11
    2c7e:	af 90       	pop	r10
    2c80:	9f 90       	pop	r9
    2c82:	8f 90       	pop	r8
    2c84:	7f 90       	pop	r7
    2c86:	6f 90       	pop	r6
    2c88:	5f 90       	pop	r5
    2c8a:	4f 90       	pop	r4
    2c8c:	08 95       	ret

00002c8e <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2c8e:	8f 92       	push	r8
    2c90:	9f 92       	push	r9
    2c92:	af 92       	push	r10
    2c94:	bf 92       	push	r11
    2c96:	cf 92       	push	r12
    2c98:	df 92       	push	r13
    2c9a:	ef 92       	push	r14
    2c9c:	ff 92       	push	r15
    2c9e:	1f 93       	push	r17
    2ca0:	cf 93       	push	r28
    2ca2:	df 93       	push	r29
    2ca4:	1f 92       	push	r1
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    2caa:	6b 01       	movw	r12, r22
    2cac:	7c 01       	movw	r14, r24
    2cae:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2cb0:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2cb4:	ce 01       	movw	r24, r28
    2cb6:	01 96       	adiw	r24, 0x01	; 1
    2cb8:	66 df       	rcall	.-308    	; 0x2b86 <prvSampleTimeNow>
    2cba:	4b 01       	movw	r8, r22
    2cbc:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
    2cc0:	81 11       	cpse	r24, r1
    2cc2:	2d c0       	rjmp	.+90     	; 0x2d1e <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2cc4:	11 11       	cpse	r17, r1
    2cc6:	0d c0       	rjmp	.+26     	; 0x2ce2 <prvProcessTimerOrBlockTask+0x54>
    2cc8:	8c 14       	cp	r8, r12
    2cca:	9d 04       	cpc	r9, r13
    2ccc:	ae 04       	cpc	r10, r14
    2cce:	bf 04       	cpc	r11, r15
    2cd0:	40 f0       	brcs	.+16     	; 0x2ce2 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    2cd2:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2cd6:	a5 01       	movw	r20, r10
    2cd8:	94 01       	movw	r18, r8
    2cda:	c7 01       	movw	r24, r14
    2cdc:	b6 01       	movw	r22, r12
    2cde:	81 df       	rcall	.-254    	; 0x2be2 <prvProcessExpiredTimer>
    2ce0:	20 c0       	rjmp	.+64     	; 0x2d22 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2ce2:	11 23       	and	r17, r17
    2ce4:	41 f0       	breq	.+16     	; 0x2cf6 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2ce6:	e0 91 19 16 	lds	r30, 0x1619	; 0x801619 <pxOverflowTimerList>
    2cea:	f0 91 1a 16 	lds	r31, 0x161A	; 0x80161a <pxOverflowTimerList+0x1>
    2cee:	80 81       	ld	r24, Z
    2cf0:	11 e0       	ldi	r17, 0x01	; 1
    2cf2:	81 11       	cpse	r24, r1
    2cf4:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2cf6:	b7 01       	movw	r22, r14
    2cf8:	a6 01       	movw	r20, r12
    2cfa:	48 19       	sub	r20, r8
    2cfc:	59 09       	sbc	r21, r9
    2cfe:	6a 09       	sbc	r22, r10
    2d00:	7b 09       	sbc	r23, r11
    2d02:	21 2f       	mov	r18, r17
    2d04:	80 91 17 16 	lds	r24, 0x1617	; 0x801617 <xTimerQueue>
    2d08:	90 91 18 16 	lds	r25, 0x1618	; 0x801618 <xTimerQueue+0x1>
    2d0c:	0e 94 91 06 	call	0xd22	; 0xd22 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2d10:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <xTaskResumeAll>
    2d14:	81 11       	cpse	r24, r1
    2d16:	05 c0       	rjmp	.+10     	; 0x2d22 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2d18:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    2d1c:	02 c0       	rjmp	.+4      	; 0x2d22 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2d1e:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <xTaskResumeAll>
            }
        }
    }
    2d22:	0f 90       	pop	r0
    2d24:	df 91       	pop	r29
    2d26:	cf 91       	pop	r28
    2d28:	1f 91       	pop	r17
    2d2a:	ff 90       	pop	r15
    2d2c:	ef 90       	pop	r14
    2d2e:	df 90       	pop	r13
    2d30:	cf 90       	pop	r12
    2d32:	bf 90       	pop	r11
    2d34:	af 90       	pop	r10
    2d36:	9f 90       	pop	r9
    2d38:	8f 90       	pop	r8
    2d3a:	08 95       	ret

00002d3c <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2d3c:	af 92       	push	r10
    2d3e:	bf 92       	push	r11
    2d40:	cf 92       	push	r12
    2d42:	df 92       	push	r13
    2d44:	ef 92       	push	r14
    2d46:	ff 92       	push	r15
    2d48:	0f 93       	push	r16
    2d4a:	1f 93       	push	r17
    2d4c:	cf 93       	push	r28
    2d4e:	df 93       	push	r29
    2d50:	cd b7       	in	r28, 0x3d	; 61
    2d52:	de b7       	in	r29, 0x3e	; 62
    2d54:	28 97       	sbiw	r28, 0x08	; 8
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	de bf       	out	0x3e, r29	; 62
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2d60:	82 c0       	rjmp	.+260    	; 0x2e66 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2d62:	89 81       	ldd	r24, Y+1	; 0x01
    2d64:	88 23       	and	r24, r24
    2d66:	0c f4       	brge	.+2      	; 0x2d6a <prvProcessReceivedCommands+0x2e>
    2d68:	7e c0       	rjmp	.+252    	; 0x2e66 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2d6a:	ae 80       	ldd	r10, Y+6	; 0x06
    2d6c:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2d6e:	d5 01       	movw	r26, r10
    2d70:	1c 96       	adiw	r26, 0x0c	; 12
    2d72:	8d 91       	ld	r24, X+
    2d74:	9c 91       	ld	r25, X
    2d76:	1d 97       	sbiw	r26, 0x0d	; 13
    2d78:	89 2b       	or	r24, r25
    2d7a:	21 f0       	breq	.+8      	; 0x2d84 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2d7c:	c5 01       	movw	r24, r10
    2d7e:	02 96       	adiw	r24, 0x02	; 2
    2d80:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2d84:	ce 01       	movw	r24, r28
    2d86:	08 96       	adiw	r24, 0x08	; 8
    2d88:	fe de       	rcall	.-516    	; 0x2b86 <prvSampleTimeNow>
    2d8a:	8b 01       	movw	r16, r22
    2d8c:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    2d8e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d90:	0e 2e       	mov	r0, r30
    2d92:	00 0c       	add	r0, r0
    2d94:	ff 0b       	sbc	r31, r31
    2d96:	ea 30       	cpi	r30, 0x0A	; 10
    2d98:	f1 05       	cpc	r31, r1
    2d9a:	08 f0       	brcs	.+2      	; 0x2d9e <prvProcessReceivedCommands+0x62>
    2d9c:	64 c0       	rjmp	.+200    	; 0x2e66 <prvProcessReceivedCommands+0x12a>
    2d9e:	88 27       	eor	r24, r24
    2da0:	ee 58       	subi	r30, 0x8E	; 142
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	8f 4f       	sbci	r24, 0xFF	; 255
    2da6:	0c 94 46 2a 	jmp	0x548c	; 0x548c <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2daa:	f5 01       	movw	r30, r10
    2dac:	86 89       	ldd	r24, Z+22	; 0x16
    2dae:	81 60       	ori	r24, 0x01	; 1
    2db0:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2db2:	ca 80       	ldd	r12, Y+2	; 0x02
    2db4:	db 80       	ldd	r13, Y+3	; 0x03
    2db6:	ec 80       	ldd	r14, Y+4	; 0x04
    2db8:	fd 80       	ldd	r15, Y+5	; 0x05
    2dba:	46 85       	ldd	r20, Z+14	; 0x0e
    2dbc:	57 85       	ldd	r21, Z+15	; 0x0f
    2dbe:	60 89       	ldd	r22, Z+16	; 0x10
    2dc0:	71 89       	ldd	r23, Z+17	; 0x11
    2dc2:	4c 0d       	add	r20, r12
    2dc4:	5d 1d       	adc	r21, r13
    2dc6:	6e 1d       	adc	r22, r14
    2dc8:	7f 1d       	adc	r23, r15
    2dca:	c5 01       	movw	r24, r10
    2dcc:	83 dd       	rcall	.-1274   	; 0x28d4 <prvInsertTimerInActiveList>
    2dce:	88 23       	and	r24, r24
    2dd0:	09 f4       	brne	.+2      	; 0x2dd4 <prvProcessReceivedCommands+0x98>
    2dd2:	49 c0       	rjmp	.+146    	; 0x2e66 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2dd4:	d5 01       	movw	r26, r10
    2dd6:	54 96       	adiw	r26, 0x14	; 20
    2dd8:	ed 91       	ld	r30, X+
    2dda:	fc 91       	ld	r31, X
    2ddc:	55 97       	sbiw	r26, 0x15	; 21
    2dde:	c5 01       	movw	r24, r10
    2de0:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2de2:	f5 01       	movw	r30, r10
    2de4:	86 89       	ldd	r24, Z+22	; 0x16
    2de6:	82 ff       	sbrs	r24, 2
    2de8:	3e c0       	rjmp	.+124    	; 0x2e66 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2dea:	4a 81       	ldd	r20, Y+2	; 0x02
    2dec:	5b 81       	ldd	r21, Y+3	; 0x03
    2dee:	6c 81       	ldd	r22, Y+4	; 0x04
    2df0:	7d 81       	ldd	r23, Y+5	; 0x05
    2df2:	86 85       	ldd	r24, Z+14	; 0x0e
    2df4:	97 85       	ldd	r25, Z+15	; 0x0f
    2df6:	a0 89       	ldd	r26, Z+16	; 0x10
    2df8:	b1 89       	ldd	r27, Z+17	; 0x11
    2dfa:	9a 01       	movw	r18, r20
    2dfc:	ab 01       	movw	r20, r22
    2dfe:	28 0f       	add	r18, r24
    2e00:	39 1f       	adc	r19, r25
    2e02:	4a 1f       	adc	r20, r26
    2e04:	5b 1f       	adc	r21, r27
    2e06:	c1 2c       	mov	r12, r1
    2e08:	d1 2c       	mov	r13, r1
    2e0a:	76 01       	movw	r14, r12
    2e0c:	00 e0       	ldi	r16, 0x00	; 0
    2e0e:	10 e0       	ldi	r17, 0x00	; 0
    2e10:	60 e0       	ldi	r22, 0x00	; 0
    2e12:	c5 01       	movw	r24, r10
    2e14:	f2 dd       	rcall	.-1052   	; 0x29fa <xTimerGenericCommand>
    2e16:	27 c0       	rjmp	.+78     	; 0x2e66 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2e18:	d5 01       	movw	r26, r10
    2e1a:	56 96       	adiw	r26, 0x16	; 22
    2e1c:	8c 91       	ld	r24, X
    2e1e:	56 97       	sbiw	r26, 0x16	; 22
    2e20:	8e 7f       	andi	r24, 0xFE	; 254
    2e22:	56 96       	adiw	r26, 0x16	; 22
    2e24:	8c 93       	st	X, r24
                        break;
    2e26:	1f c0       	rjmp	.+62     	; 0x2e66 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2e28:	f5 01       	movw	r30, r10
    2e2a:	86 89       	ldd	r24, Z+22	; 0x16
    2e2c:	81 60       	ori	r24, 0x01	; 1
    2e2e:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2e30:	4a 81       	ldd	r20, Y+2	; 0x02
    2e32:	5b 81       	ldd	r21, Y+3	; 0x03
    2e34:	6c 81       	ldd	r22, Y+4	; 0x04
    2e36:	7d 81       	ldd	r23, Y+5	; 0x05
    2e38:	46 87       	std	Z+14, r20	; 0x0e
    2e3a:	57 87       	std	Z+15, r21	; 0x0f
    2e3c:	60 8b       	std	Z+16, r22	; 0x10
    2e3e:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2e40:	40 0f       	add	r20, r16
    2e42:	51 1f       	adc	r21, r17
    2e44:	62 1f       	adc	r22, r18
    2e46:	73 1f       	adc	r23, r19
    2e48:	68 01       	movw	r12, r16
    2e4a:	79 01       	movw	r14, r18
    2e4c:	c5 01       	movw	r24, r10
    2e4e:	42 dd       	rcall	.-1404   	; 0x28d4 <prvInsertTimerInActiveList>
                        break;
    2e50:	0a c0       	rjmp	.+20     	; 0x2e66 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2e52:	f5 01       	movw	r30, r10
    2e54:	86 89       	ldd	r24, Z+22	; 0x16
    2e56:	81 fd       	sbrc	r24, 1
    2e58:	04 c0       	rjmp	.+8      	; 0x2e62 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    2e5a:	c5 01       	movw	r24, r10
    2e5c:	0e 94 24 02 	call	0x448	; 0x448 <vPortFree>
    2e60:	02 c0       	rjmp	.+4      	; 0x2e66 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2e62:	8e 7f       	andi	r24, 0xFE	; 254
    2e64:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	a9 01       	movw	r20, r18
    2e6c:	be 01       	movw	r22, r28
    2e6e:	6f 5f       	subi	r22, 0xFF	; 255
    2e70:	7f 4f       	sbci	r23, 0xFF	; 255
    2e72:	80 91 17 16 	lds	r24, 0x1617	; 0x801617 <xTimerQueue>
    2e76:	90 91 18 16 	lds	r25, 0x1618	; 0x801618 <xTimerQueue+0x1>
    2e7a:	0e 94 02 06 	call	0xc04	; 0xc04 <xQueueReceive>
    2e7e:	81 11       	cpse	r24, r1
    2e80:	70 cf       	rjmp	.-288    	; 0x2d62 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2e82:	28 96       	adiw	r28, 0x08	; 8
    2e84:	0f b6       	in	r0, 0x3f	; 63
    2e86:	f8 94       	cli
    2e88:	de bf       	out	0x3e, r29	; 62
    2e8a:	0f be       	out	0x3f, r0	; 63
    2e8c:	cd bf       	out	0x3d, r28	; 61
    2e8e:	df 91       	pop	r29
    2e90:	cf 91       	pop	r28
    2e92:	1f 91       	pop	r17
    2e94:	0f 91       	pop	r16
    2e96:	ff 90       	pop	r15
    2e98:	ef 90       	pop	r14
    2e9a:	df 90       	pop	r13
    2e9c:	cf 90       	pop	r12
    2e9e:	bf 90       	pop	r11
    2ea0:	af 90       	pop	r10
    2ea2:	08 95       	ret

00002ea4 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2ea4:	08 95       	ret

00002ea6 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2ea6:	84 b1       	in	r24, 0x04	; 4
    2ea8:	80 68       	ori	r24, 0x80	; 128
    2eaa:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2eac:	85 b1       	in	r24, 0x05	; 5
    2eae:	80 68       	ori	r24, 0x80	; 128
    2eb0:	85 b9       	out	0x05, r24	; 5
    2eb2:	08 95       	ret

00002eb4 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2eb4:	83 b1       	in	r24, 0x03	; 3
    2eb6:	80 68       	ori	r24, 0x80	; 128
    2eb8:	83 b9       	out	0x03, r24	; 3
    2eba:	08 95       	ret

00002ebc <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2ebc:	f4 df       	rcall	.-24     	; 0x2ea6 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2ebe:	2f ef       	ldi	r18, 0xFF	; 255
    2ec0:	80 e7       	ldi	r24, 0x70	; 112
    2ec2:	92 e0       	ldi	r25, 0x02	; 2
    2ec4:	21 50       	subi	r18, 0x01	; 1
    2ec6:	80 40       	sbci	r24, 0x00	; 0
    2ec8:	90 40       	sbci	r25, 0x00	; 0
    2eca:	e1 f7       	brne	.-8      	; 0x2ec4 <vApplicationMallocFailedHook+0x8>
    2ecc:	00 c0       	rjmp	.+0      	; 0x2ece <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2ece:	00 00       	nop
    2ed0:	f1 df       	rcall	.-30     	; 0x2eb4 <prvBlinkMainLed>
    2ed2:	f5 cf       	rjmp	.-22     	; 0x2ebe <vApplicationMallocFailedHook+0x2>

00002ed4 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2ed4:	e8 df       	rcall	.-48     	; 0x2ea6 <prvSetMainLedOn>
    2ed6:	2f ef       	ldi	r18, 0xFF	; 255
    2ed8:	87 ea       	ldi	r24, 0xA7	; 167
    2eda:	91 e6       	ldi	r25, 0x61	; 97
    2edc:	21 50       	subi	r18, 0x01	; 1
    2ede:	80 40       	sbci	r24, 0x00	; 0
    2ee0:	90 40       	sbci	r25, 0x00	; 0
    2ee2:	e1 f7       	brne	.-8      	; 0x2edc <vApplicationStackOverflowHook+0x8>
    2ee4:	00 c0       	rjmp	.+0      	; 0x2ee6 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2ee6:	00 00       	nop
    2ee8:	e5 df       	rcall	.-54     	; 0x2eb4 <prvBlinkMainLed>
    2eea:	f5 cf       	rjmp	.-22     	; 0x2ed6 <vApplicationStackOverflowHook+0x2>

00002eec <co2Task_run>:
// Function responsible for measuring CO2
void co2Task_run()	
{
	mh_z19_returnCode_t rc;
	
		rc = mh_z19_takeMeassuring();
    2eec:	c2 d7       	rcall	.+3972   	; 0x3e72 <mh_z19_takeMeassuring>
		if (rc != MHZ19_OK)
    2eee:	88 23       	and	r24, r24
    2ef0:	21 f0       	breq	.+8      	; 0x2efa <co2Task_run+0xe>
		{
			puts("CO2 MEASURING FAILED");
    2ef2:	8c e7       	ldi	r24, 0x7C	; 124
    2ef4:	92 e0       	ldi	r25, 0x02	; 2
    2ef6:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <puts>
		}
		co2 = mh_z19_getCo2Ppm;
    2efa:	88 e6       	ldi	r24, 0x68	; 104
    2efc:	9f e1       	ldi	r25, 0x1F	; 31
    2efe:	90 93 85 17 	sts	0x1785, r25	; 0x801785 <co2+0x1>
    2f02:	80 93 84 17 	sts	0x1784, r24	; 0x801784 <co2>
		printf("CO2: %d\n",co2);
    2f06:	9f 93       	push	r25
    2f08:	8f 93       	push	r24
    2f0a:	81 e9       	ldi	r24, 0x91	; 145
    2f0c:	92 e0       	ldi	r25, 0x02	; 2
    2f0e:	9f 93       	push	r25
    2f10:	8f 93       	push	r24
    2f12:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <printf>
		vTaskDelay(pdMS_TO_TICKS(6000));
    2f16:	64 e7       	ldi	r22, 0x74	; 116
    2f18:	71 e0       	ldi	r23, 0x01	; 1
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <vTaskDelay>
	
}
    2f22:	0f 90       	pop	r0
    2f24:	0f 90       	pop	r0
    2f26:	0f 90       	pop	r0
    2f28:	0f 90       	pop	r0
    2f2a:	08 95       	ret

00002f2c <_runCO2>:
// Main task for CO2. 
void _runCO2(void* params) {
	// In future we could use this for some INIT values
	
	while (1) {
		co2Task_run();
    2f2c:	df df       	rcall	.-66     	; 0x2eec <co2Task_run>
    2f2e:	fe cf       	rjmp	.-4      	; 0x2f2c <_runCO2>

00002f30 <co2Task_create>:
	
}

// Creating task for CO2
// Being called from main.c
void co2Task_create(){
    2f30:	ef 92       	push	r14
    2f32:	ff 92       	push	r15
    2f34:	0f 93       	push	r16
	xTaskCreate(
    2f36:	e1 2c       	mov	r14, r1
    2f38:	f1 2c       	mov	r15, r1
    2f3a:	01 e0       	ldi	r16, 0x01	; 1
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	40 ec       	ldi	r20, 0xC0	; 192
    2f42:	50 e0       	ldi	r21, 0x00	; 0
    2f44:	6a e9       	ldi	r22, 0x9A	; 154
    2f46:	72 e0       	ldi	r23, 0x02	; 2
    2f48:	86 e9       	ldi	r24, 0x96	; 150
    2f4a:	97 e1       	ldi	r25, 0x17	; 23
    2f4c:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskCreate>
	configMINIMAL_STACK_SIZE,	   // This stack size can be checked & adjusted by reading the Stack Highwater
	NULL,					   	   // (void *pvParameters)
	1,							   //the priority of the task
	NULL							   //No TaskHandle created.
	);
}
    2f50:	0f 91       	pop	r16
    2f52:	ff 90       	pop	r15
    2f54:	ef 90       	pop	r14
    2f56:	08 95       	ret

00002f58 <humidityTemperatureTask_run>:
int16_t humidity;

// Function responsible for measuring Humidity and Temperature.
void humidityTemperatureTask_run()
{
		if (hih8120_wakeup() == HIH8120_OK) {
    2f58:	35 d2       	rcall	.+1130   	; 0x33c4 <hih8120_wakeup>
    2f5a:	81 11       	cpse	r24, r1
    2f5c:	3f c0       	rjmp	.+126    	; 0x2fdc <humidityTemperatureTask_run+0x84>
			vTaskDelay(pdMS_TO_TICKS(100));
    2f5e:	66 e0       	ldi	r22, 0x06	; 6
    2f60:	70 e0       	ldi	r23, 0x00	; 0
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <vTaskDelay>
			
			if (hih8120_measure() == HIH8120_OK) {
    2f6a:	41 d2       	rcall	.+1154   	; 0x33ee <hih8120_measure>
    2f6c:	81 11       	cpse	r24, r1
    2f6e:	2d c0       	rjmp	.+90     	; 0x2fca <humidityTemperatureTask_run+0x72>
				vTaskDelay(pdMS_TO_TICKS(50));
    2f70:	63 e0       	ldi	r22, 0x03	; 3
    2f72:	70 e0       	ldi	r23, 0x00	; 0
    2f74:	80 e0       	ldi	r24, 0x00	; 0
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <vTaskDelay>
				humidity = hih8120_getHumidityPercent_x10();
    2f7c:	5e d2       	rcall	.+1212   	; 0x343a <hih8120_getHumidityPercent_x10>
    2f7e:	90 93 89 17 	sts	0x1789, r25	; 0x801789 <humidity+0x1>
    2f82:	80 93 88 17 	sts	0x1788, r24	; 0x801788 <humidity>
				temperature = hih8120_getTemperature_x10();
    2f86:	7f d2       	rcall	.+1278   	; 0x3486 <hih8120_getTemperature_x10>
    2f88:	80 93 86 17 	sts	0x1786, r24	; 0x801786 <temperature>
    2f8c:	90 93 87 17 	sts	0x1787, r25	; 0x801787 <temperature+0x1>
				printf("TEMP: %d\n",temperature);
    2f90:	9f 93       	push	r25
    2f92:	8f 93       	push	r24
    2f94:	8e e9       	ldi	r24, 0x9E	; 158
    2f96:	92 e0       	ldi	r25, 0x02	; 2
    2f98:	9f 93       	push	r25
    2f9a:	8f 93       	push	r24
    2f9c:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <printf>
				printf("HUMID: %d\n",humidity);
    2fa0:	80 91 89 17 	lds	r24, 0x1789	; 0x801789 <humidity+0x1>
    2fa4:	8f 93       	push	r24
    2fa6:	80 91 88 17 	lds	r24, 0x1788	; 0x801788 <humidity>
    2faa:	8f 93       	push	r24
    2fac:	88 ea       	ldi	r24, 0xA8	; 168
    2fae:	92 e0       	ldi	r25, 0x02	; 2
    2fb0:	9f 93       	push	r25
    2fb2:	8f 93       	push	r24
    2fb4:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <printf>
    2fb8:	8d b7       	in	r24, 0x3d	; 61
    2fba:	9e b7       	in	r25, 0x3e	; 62
    2fbc:	08 96       	adiw	r24, 0x08	; 8
    2fbe:	0f b6       	in	r0, 0x3f	; 63
    2fc0:	f8 94       	cli
    2fc2:	9e bf       	out	0x3e, r25	; 62
    2fc4:	0f be       	out	0x3f, r0	; 63
    2fc6:	8d bf       	out	0x3d, r24	; 61
    2fc8:	11 c0       	rjmp	.+34     	; 0x2fec <humidityTemperatureTask_run+0x94>
				} else {
				printf("FAILED: to measure - Humidity-Temperature");
    2fca:	83 eb       	ldi	r24, 0xB3	; 179
    2fcc:	92 e0       	ldi	r25, 0x02	; 2
    2fce:	9f 93       	push	r25
    2fd0:	8f 93       	push	r24
    2fd2:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <printf>
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	08 c0       	rjmp	.+16     	; 0x2fec <humidityTemperatureTask_run+0x94>
			}
			} else {
			printf("FAILED: to wakeup - Humidity-Temperature");
    2fdc:	8d ed       	ldi	r24, 0xDD	; 221
    2fde:	92 e0       	ldi	r25, 0x02	; 2
    2fe0:	9f 93       	push	r25
    2fe2:	8f 93       	push	r24
    2fe4:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <printf>
    2fe8:	0f 90       	pop	r0
    2fea:	0f 90       	pop	r0
			}
			
	
		vTaskDelay(pdMS_TO_TICKS(6000));
    2fec:	64 e7       	ldi	r22, 0x74	; 116
    2fee:	71 e0       	ldi	r23, 0x01	; 1
    2ff0:	80 e0       	ldi	r24, 0x00	; 0
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <vTaskDelay>

00002ff8 <_run>:
// Main task for Temperature-Humidity
void _run(void* params) {
	// In future we could use this for some INIT values
	
	while (1) {
		humidityTemperatureTask_run();
    2ff8:	af df       	rcall	.-162    	; 0x2f58 <humidityTemperatureTask_run>
    2ffa:	fe cf       	rjmp	.-4      	; 0x2ff8 <_run>

00002ffc <humidityTemperatureTask_create>:
		vTaskDelay(pdMS_TO_TICKS(6000));
}

// Creating task for Humidity and Temperature.
// Being called from main.c
void humidityTemperatureTask_create(){
    2ffc:	ef 92       	push	r14
    2ffe:	ff 92       	push	r15
    3000:	0f 93       	push	r16
	xTaskCreate(
    3002:	e1 2c       	mov	r14, r1
    3004:	f1 2c       	mov	r15, r1
    3006:	01 e0       	ldi	r16, 0x01	; 1
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	40 ec       	ldi	r20, 0xC0	; 192
    300e:	50 e0       	ldi	r21, 0x00	; 0
    3010:	66 e0       	ldi	r22, 0x06	; 6
    3012:	73 e0       	ldi	r23, 0x03	; 3
    3014:	8c ef       	ldi	r24, 0xFC	; 252
    3016:	97 e1       	ldi	r25, 0x17	; 23
    3018:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskCreate>
	configMINIMAL_STACK_SIZE,	   // This stack size can be checked & adjusted by reading the Stack Highwater
	NULL,					   	   // (void *pvParameters)
	1,							   //the priority of the task
	NULL							   //No TaskHandle created.
	);
}
    301c:	0f 91       	pop	r16
    301e:	ff 90       	pop	r15
    3020:	ef 90       	pop	r14
    3022:	08 95       	ret

00003024 <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    3024:	0f 93       	push	r16
    3026:	1f 93       	push	r17
    3028:	cf 93       	push	r28
    302a:	df 93       	push	r29
    302c:	cd b7       	in	r28, 0x3d	; 61
    302e:	de b7       	in	r29, 0x3e	; 62
    3030:	64 97       	sbiw	r28, 0x14	; 20
    3032:	0f b6       	in	r0, 0x3f	; 63
    3034:	f8 94       	cli
    3036:	de bf       	out	0x3e, r29	; 62
    3038:	0f be       	out	0x3f, r0	; 63
    303a:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	0e 94 8c 24 	call	0x4918	; 0x4918 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3042:	99 d3       	rcall	.+1842   	; 0x3776 <lora_driver_rn2483FactoryReset>
    3044:	15 d6       	rcall	.+3114   	; 0x3c70 <lora_driver_mapReturnCodeToText>
    3046:	9f 93       	push	r25
    3048:	8f 93       	push	r24
    304a:	8a e1       	ldi	r24, 0x1A	; 26
    304c:	93 e0       	ldi	r25, 0x03	; 3
    304e:	9f 93       	push	r25
    3050:	8f 93       	push	r24
    3052:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3056:	0d d5       	rcall	.+2586   	; 0x3a72 <lora_driver_configureToEu868>
    3058:	0b d6       	rcall	.+3094   	; 0x3c70 <lora_driver_mapReturnCodeToText>
    305a:	9f 93       	push	r25
    305c:	8f 93       	push	r24
    305e:	8d e2       	ldi	r24, 0x2D	; 45
    3060:	93 e0       	ldi	r25, 0x03	; 3
    3062:	9f 93       	push	r25
    3064:	8f 93       	push	r24
    3066:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <printf>
    306a:	8e 01       	movw	r16, r28
    306c:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    306e:	1f 4f       	sbci	r17, 0xFF	; 255
    3070:	c8 01       	movw	r24, r16
    3072:	93 d3       	rcall	.+1830   	; 0x379a <lora_driver_getRn2483Hweui>
    3074:	fd d5       	rcall	.+3066   	; 0x3c70 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3076:	1f 93       	push	r17
    3078:	0f 93       	push	r16
    307a:	9f 93       	push	r25
    307c:	8f 93       	push	r24
    307e:	86 e4       	ldi	r24, 0x46	; 70
    3080:	93 e0       	ldi	r25, 0x03	; 3
    3082:	9f 93       	push	r25
    3084:	8f 93       	push	r24
    3086:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    308a:	c8 01       	movw	r24, r16
    308c:	a2 d3       	rcall	.+1860   	; 0x37d2 <lora_driver_setDeviceIdentifier>
    308e:	f0 d5       	rcall	.+3040   	; 0x3c70 <lora_driver_mapReturnCodeToText>
    3090:	9f 93       	push	r25
    3092:	8f 93       	push	r24
    3094:	1f 93       	push	r17
    3096:	0f 93       	push	r16
    3098:	8a e5       	ldi	r24, 0x5A	; 90
    309a:	93 e0       	ldi	r25, 0x03	; 3
    309c:	9f 93       	push	r25
    309e:	8f 93       	push	r24
    30a0:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    30a4:	a8 01       	movw	r20, r16
    30a6:	6f e6       	ldi	r22, 0x6F	; 111
    30a8:	73 e0       	ldi	r23, 0x03	; 3
    30aa:	80 e9       	ldi	r24, 0x90	; 144
    30ac:	93 e0       	ldi	r25, 0x03	; 3
    30ae:	bf d5       	rcall	.+2942   	; 0x3c2e <lora_driver_setOtaaIdentity>
    30b0:	df d5       	rcall	.+3006   	; 0x3c70 <lora_driver_mapReturnCodeToText>
    30b2:	9f 93       	push	r25
    30b4:	8f 93       	push	r24
    30b6:	1f 93       	push	r17
    30b8:	0f 93       	push	r16
    30ba:	8f e6       	ldi	r24, 0x6F	; 111
    30bc:	93 e0       	ldi	r25, 0x03	; 3
    30be:	9f 93       	push	r25
    30c0:	8f 93       	push	r24
    30c2:	80 e9       	ldi	r24, 0x90	; 144
    30c4:	93 e0       	ldi	r25, 0x03	; 3
    30c6:	9f 93       	push	r25
    30c8:	8f 93       	push	r24
    30ca:	81 ea       	ldi	r24, 0xA1	; 161
    30cc:	93 e0       	ldi	r25, 0x03	; 3
    30ce:	9f 93       	push	r25
    30d0:	8f 93       	push	r24
    30d2:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    30d6:	b0 d3       	rcall	.+1888   	; 0x3838 <lora_driver_saveMac>
    30d8:	cb d5       	rcall	.+2966   	; 0x3c70 <lora_driver_mapReturnCodeToText>
    30da:	9f 93       	push	r25
    30dc:	8f 93       	push	r24
    30de:	87 ed       	ldi	r24, 0xD7	; 215
    30e0:	93 e0       	ldi	r25, 0x03	; 3
    30e2:	9f 93       	push	r25
    30e4:	8f 93       	push	r24
    30e6:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    30ea:	0f b6       	in	r0, 0x3f	; 63
    30ec:	f8 94       	cli
    30ee:	de bf       	out	0x3e, r29	; 62
    30f0:	0f be       	out	0x3f, r0	; 63
    30f2:	cd bf       	out	0x3d, r28	; 61
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	9a d4       	rcall	.+2356   	; 0x3a2c <lora_driver_setAdaptiveDataRate>
    30f8:	bb d5       	rcall	.+2934   	; 0x3c70 <lora_driver_mapReturnCodeToText>
    30fa:	9f 93       	push	r25
    30fc:	8f 93       	push	r24
    30fe:	86 ee       	ldi	r24, 0xE6	; 230
    3100:	93 e0       	ldi	r25, 0x03	; 3
    3102:	9f 93       	push	r25
    3104:	8f 93       	push	r24
    3106:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    310a:	84 ef       	ldi	r24, 0xF4	; 244
    310c:	91 e0       	ldi	r25, 0x01	; 1
    310e:	99 d4       	rcall	.+2354   	; 0x3a42 <lora_driver_setReceiveDelay>
    3110:	af d5       	rcall	.+2910   	; 0x3c70 <lora_driver_mapReturnCodeToText>
    3112:	9f 93       	push	r25
    3114:	8f 93       	push	r24
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	8f 93       	push	r24
    311a:	84 ef       	ldi	r24, 0xF4	; 244
    311c:	8f 93       	push	r24
    311e:	87 e0       	ldi	r24, 0x07	; 7
    3120:	94 e0       	ldi	r25, 0x04	; 4
    3122:	9f 93       	push	r25
    3124:	8f 93       	push	r24
    3126:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <printf>
    312a:	0f b6       	in	r0, 0x3f	; 63
    312c:	f8 94       	cli
    312e:	de bf       	out	0x3e, r29	; 62
    3130:	0f be       	out	0x3f, r0	; 63
    3132:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3134:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3136:	80 e0       	ldi	r24, 0x00	; 0
    3138:	85 d3       	rcall	.+1802   	; 0x3844 <lora_driver_join>
    313a:	08 2f       	mov	r16, r24
    313c:	99 d5       	rcall	.+2866   	; 0x3c70 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    313e:	9f 93       	push	r25
    3140:	8f 93       	push	r24
    3142:	1f 92       	push	r1
    3144:	1f 93       	push	r17
    3146:	87 e2       	ldi	r24, 0x27	; 39
    3148:	94 e0       	ldi	r25, 0x04	; 4
    314a:	9f 93       	push	r25
    314c:	8f 93       	push	r24
    314e:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <printf>
    3152:	0f 90       	pop	r0
    3154:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3156:	0f 90       	pop	r0
    3158:	0f 90       	pop	r0
    315a:	0f 90       	pop	r0
    315c:	0f 90       	pop	r0
    315e:	08 30       	cpi	r16, 0x08	; 8
    3160:	59 f0       	breq	.+22     	; 0x3178 <_lora_setup+0x154>
    3162:	80 e0       	ldi	r24, 0x00	; 0
    3164:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3168:	66 e3       	ldi	r22, 0x36	; 54
    316a:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <vTaskDelay>
    3174:	11 50       	subi	r17, 0x01	; 1
    3176:	f9 f6       	brne	.-66     	; 0x3136 <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3178:	08 30       	cpi	r16, 0x08	; 8
    317a:	21 f4       	brne	.+8      	; 0x3184 <_lora_setup+0x160>

	if (rc == LORA_ACCEPTED)
    317c:	81 e0       	ldi	r24, 0x01	; 1
    317e:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3182:	09 c0       	rjmp	.+18     	; 0x3196 <_lora_setup+0x172>
    3184:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    3186:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	0e 94 af 24 	call	0x495e	; 0x495e <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3190:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3194:	fd cf       	rjmp	.-6      	; 0x3190 <_lora_setup+0x16c>
    3196:	64 96       	adiw	r28, 0x14	; 20
    3198:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    319a:	f8 94       	cli
    319c:	de bf       	out	0x3e, r29	; 62
    319e:	0f be       	out	0x3f, r0	; 63
    31a0:	cd bf       	out	0x3d, r28	; 61
    31a2:	df 91       	pop	r29
    31a4:	cf 91       	pop	r28
    31a6:	1f 91       	pop	r17
    31a8:	0f 91       	pop	r16
    31aa:	08 95       	ret

000031ac <lora_handler_task>:
    31ac:	cf 93       	push	r28
    31ae:	df 93       	push	r29

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    31b0:	00 d0       	rcall	.+0      	; 0x31b2 <lora_handler_task+0x6>
    31b2:	1f 92       	push	r1
    31b4:	cd b7       	in	r28, 0x3d	; 61
    31b6:	de b7       	in	r29, 0x3e	; 62
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	cf d2       	rcall	.+1438   	; 0x375a <lora_driver_resetRn2483>
	vTaskDelay(2);
    31bc:	62 e0       	ldi	r22, 0x02	; 2
    31be:	70 e0       	ldi	r23, 0x00	; 0
    31c0:	80 e0       	ldi	r24, 0x00	; 0
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <vTaskDelay>
	lora_driver_resetRn2483(0);
    31c8:	80 e0       	ldi	r24, 0x00	; 0
    31ca:	c7 d2       	rcall	.+1422   	; 0x375a <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    31cc:	66 e9       	ldi	r22, 0x96	; 150
    31ce:	70 e0       	ldi	r23, 0x00	; 0
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    31d8:	79 d2       	rcall	.+1266   	; 0x36cc <lora_driver_flushBuffers>

	_lora_setup();
    31da:	24 df       	rcall	.-440    	; 0x3024 <_lora_setup>
    31dc:	e3 e3       	ldi	r30, 0x33	; 51

	_uplink_payload.len = 8;
    31de:	f6 e1       	ldi	r31, 0x16	; 22
    31e0:	88 e0       	ldi	r24, 0x08	; 8
    31e2:	81 83       	std	Z+1, r24	; 0x01
    31e4:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    31e6:	80 83       	st	Z, r24
    31e8:	0e 94 76 0c 	call	0x18ec	; 0x18ec <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    31ec:	69 83       	std	Y+1, r22	; 0x01
    31ee:	7a 83       	std	Y+2, r23	; 0x02
    31f0:	8b 83       	std	Y+3, r24	; 0x03
    31f2:	9c 83       	std	Y+4, r25	; 0x04
    31f4:	48 ea       	ldi	r20, 0xA8	; 168
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    31f6:	58 e4       	ldi	r21, 0x48	; 72
    31f8:	60 e0       	ldi	r22, 0x00	; 0
    31fa:	70 e0       	ldi	r23, 0x00	; 0
    31fc:	ce 01       	movw	r24, r28
    31fe:	01 96       	adiw	r24, 0x01	; 1
    3200:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <xTaskDelayUntil>
    3204:	d0 90 88 17 	lds	r13, 0x1788	; 0x801788 <humidity>

		// Some dummy payload
		uint16_t hum = humidity; // measured humidity
    3208:	c0 90 89 17 	lds	r12, 0x1789	; 0x801789 <humidity+0x1>
    320c:	f0 90 86 17 	lds	r15, 0x1786	; 0x801786 <temperature>
		int16_t temp = temperature; // measured temp
    3210:	e0 90 87 17 	lds	r14, 0x1787	; 0x801787 <temperature+0x1>
    3214:	10 91 84 17 	lds	r17, 0x1784	; 0x801784 <co2>
		uint16_t co2_ppm = co2; // measured CO2
    3218:	00 91 85 17 	lds	r16, 0x1785	; 0x801785 <co2+0x1>
    321c:	ef 92       	push	r14
		
		printf("TEMP BEFORE SEND: %d\n",temperature);
    321e:	ff 92       	push	r15
    3220:	87 e4       	ldi	r24, 0x47	; 71
    3222:	94 e0       	ldi	r25, 0x04	; 4
    3224:	9f 93       	push	r25
    3226:	8f 93       	push	r24
    3228:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <printf>
    322c:	80 91 89 17 	lds	r24, 0x1789	; 0x801789 <humidity+0x1>
		printf("HUMID BEFORE SEND: %d\n",humidity);
    3230:	8f 93       	push	r24
    3232:	80 91 88 17 	lds	r24, 0x1788	; 0x801788 <humidity>
    3236:	8f 93       	push	r24
    3238:	8d e5       	ldi	r24, 0x5D	; 93
    323a:	94 e0       	ldi	r25, 0x04	; 4
    323c:	9f 93       	push	r25
    323e:	8f 93       	push	r24
    3240:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <printf>
    3244:	e3 e3       	ldi	r30, 0x33	; 51

		_uplink_payload.bytes[0] = hum >> 8;
    3246:	f6 e1       	ldi	r31, 0x16	; 22
    3248:	c2 82       	std	Z+2, r12	; 0x02
    324a:	d3 82       	std	Z+3, r13	; 0x03
		_uplink_payload.bytes[1] = hum & 0xFF;
    324c:	e4 82       	std	Z+4, r14	; 0x04
		_uplink_payload.bytes[2] = temp >> 8;
    324e:	f5 82       	std	Z+5, r15	; 0x05
		_uplink_payload.bytes[3] = temp & 0xFF;
    3250:	06 83       	std	Z+6, r16	; 0x06
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    3252:	17 83       	std	Z+7, r17	; 0x07
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    3254:	00 87       	std	Z+8, r16	; 0x08
		_uplink_payload.bytes[6] = co2_ppm >> 8; // TODO change to light from co2_ppm
    3256:	11 87       	std	Z+9, r17	; 0x09
		_uplink_payload.bytes[7] = co2_ppm & 0xFF;
    3258:	83 e0       	ldi	r24, 0x03	; 3

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    325a:	0e 94 02 25 	call	0x4a04	; 0x4a04 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    325e:	63 e3       	ldi	r22, 0x33	; 51
    3260:	76 e1       	ldi	r23, 0x16	; 22
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	18 d3       	rcall	.+1584   	; 0x3896 <lora_driver_sendUploadMessage>
    3266:	04 d5       	rcall	.+2568   	; 0x3c70 <lora_driver_mapReturnCodeToText>
    3268:	9f 93       	push	r25
    326a:	8f 93       	push	r24
    326c:	84 e7       	ldi	r24, 0x74	; 116
    326e:	94 e0       	ldi	r25, 0x04	; 4
    3270:	9f 93       	push	r25
    3272:	8f 93       	push	r24
    3274:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <printf>
    3278:	0f b6       	in	r0, 0x3f	; 63
    327a:	f8 94       	cli
    327c:	de bf       	out	0x3e, r29	; 62
    327e:	0f be       	out	0x3f, r0	; 63
    3280:	cd bf       	out	0x3d, r28	; 61
    3282:	b8 cf       	rjmp	.-144    	; 0x31f4 <lora_handler_task+0x48>

00003284 <lora_handler_initialise>:
    3284:	ef 92       	push	r14
extern int16_t humidity;
extern int16_t co2;
extern float luxValue;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    3286:	ff 92       	push	r15
    3288:	0f 93       	push	r16
	xTaskCreate(
    328a:	e1 2c       	mov	r14, r1
    328c:	f1 2c       	mov	r15, r1
    328e:	08 2f       	mov	r16, r24
    3290:	20 e0       	ldi	r18, 0x00	; 0
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	48 e8       	ldi	r20, 0x88	; 136
    3296:	51 e0       	ldi	r21, 0x01	; 1
    3298:	69 e8       	ldi	r22, 0x89	; 137
    329a:	74 e0       	ldi	r23, 0x04	; 4
    329c:	86 ed       	ldi	r24, 0xD6	; 214
    329e:	98 e1       	ldi	r25, 0x18	; 24
    32a0:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    32a4:	0f 91       	pop	r16
    32a6:	ff 90       	pop	r15
    32a8:	ef 90       	pop	r14
    32aa:	08 95       	ret

000032ac <tsl2591Callback>:
float luxValue;

// Callback function for TSL2591 driver
	void tsl2591Callback(tsl2591_returnCode_t rc)
	{
		switch (rc)
    32ac:	81 30       	cpi	r24, 0x01	; 1
    32ae:	f1 f4       	brne	.+60     	; 0x32ec <tsl2591Callback+0x40>
			{
				// Infrared raw data available, use 'infraredRaw' variable
			}
			*/

			if (TSL2591_OK == tsl2591_getLux(&luxValue))
    32b0:	8a e8       	ldi	r24, 0x8A	; 138
    32b2:	97 e1       	ldi	r25, 0x17	; 23
    32b4:	0e 94 7a 25 	call	0x4af4	; 0x4af4 <tsl2591_getLux>
    32b8:	81 11       	cpse	r24, r1
    32ba:	18 c0       	rjmp	.+48     	; 0x32ec <tsl2591Callback+0x40>
			{
				// Lux value available, use 'luxValue' variable
				printf("Lux: %5.4f\n", luxValue);
    32bc:	80 91 8d 17 	lds	r24, 0x178D	; 0x80178d <luxValue+0x3>
    32c0:	8f 93       	push	r24
    32c2:	80 91 8c 17 	lds	r24, 0x178C	; 0x80178c <luxValue+0x2>
    32c6:	8f 93       	push	r24
    32c8:	80 91 8b 17 	lds	r24, 0x178B	; 0x80178b <luxValue+0x1>
    32cc:	8f 93       	push	r24
    32ce:	80 91 8a 17 	lds	r24, 0x178A	; 0x80178a <luxValue>
    32d2:	8f 93       	push	r24
    32d4:	80 e9       	ldi	r24, 0x90	; 144
    32d6:	94 e0       	ldi	r25, 0x04	; 4
    32d8:	9f 93       	push	r25
    32da:	8f 93       	push	r24
    32dc:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <printf>
    32e0:	0f 90       	pop	r0
    32e2:	0f 90       	pop	r0
    32e4:	0f 90       	pop	r0
    32e6:	0f 90       	pop	r0
    32e8:	0f 90       	pop	r0
    32ea:	0f 90       	pop	r0
    32ec:	08 95       	ret

000032ee <_initDrivers>:
			// Handle other return codes if needed
		}
	}

static void _initDrivers(void) {
	puts("Initializing drivers...");
    32ee:	8c e9       	ldi	r24, 0x9C	; 156
    32f0:	94 e0       	ldi	r25, 0x04	; 4
    32f2:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <puts>
	mh_z19_initialise(ser_USART3);
    32f6:	83 e0       	ldi	r24, 0x03	; 3
    32f8:	97 d5       	rcall	.+2862   	; 0x3e28 <mh_z19_initialise>
	hih8120_initialise();
    32fa:	4c d0       	rcall	.+152    	; 0x3394 <hih8120_initialise>
    32fc:	86 e5       	ldi	r24, 0x56	; 86
	tsl2591_initialise(tsl2591Callback);
    32fe:	99 e1       	ldi	r25, 0x19	; 25
    3300:	0e 94 5f 25 	call	0x4abe	; 0x4abe <tsl2591_initialise>
    3304:	60 e0       	ldi	r22, 0x00	; 0
	
	lora_driver_initialise(ser_USART1, NULL); // Without down-link buffer
    3306:	70 e0       	ldi	r23, 0x00	; 0
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	e7 c1       	rjmp	.+974    	; 0x36da <lora_driver_initialise>
    330c:	08 95       	ret

0000330e <_createTasks>:
    330e:	10 de       	rcall	.-992    	; 0x2f30 <co2Task_create>


static void _createTasks()
{
	co2Task_create();
	humidityTemperatureTask_create();
    3310:	75 ce       	rjmp	.-790    	; 0x2ffc <humidityTemperatureTask_create>
    3312:	08 95       	ret

00003314 <main>:
    3314:	80 e0       	ldi	r24, 0x00	; 0
}


int main(void)
{
	stdio_initialise(ser_USART0);
    3316:	0e 94 37 23 	call	0x466e	; 0x466e <stdio_initialise>
	lora_handler_initialise(3); // Lora task with priority 3
    331a:	83 e0       	ldi	r24, 0x03	; 3
    331c:	b3 df       	rcall	.-154    	; 0x3284 <lora_handler_initialise>
	
	_initDrivers();
    331e:	e7 df       	rcall	.-50     	; 0x32ee <_initDrivers>
	_createTasks();
    3320:	f6 df       	rcall	.-20     	; 0x330e <_createTasks>
    3322:	85 e0       	ldi	r24, 0x05	; 5

	status_leds_initialise(5); // Status LED driver - Priority 5. (LoRaWAN)
    3324:	0e 94 3e 24 	call	0x487c	; 0x487c <status_leds_initialise>
    3328:	84 eb       	ldi	r24, 0xB4	; 180

	printf("Starting...\n");
    332a:	94 e0       	ldi	r25, 0x04	; 4
    332c:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <puts>
    3330:	0e 94 38 0c 	call	0x1870	; 0x1870 <vTaskStartScheduler>
	vTaskStartScheduler();
    3334:	80 e0       	ldi	r24, 0x00	; 0
}
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	08 95       	ret

0000333a <_hihTwiCallback>:
    333a:	65 30       	cpi	r22, 0x05	; 5
    333c:	f1 f4       	brne	.+60     	; 0x337a <_hihTwiCallback+0x40>
    333e:	fa 01       	movw	r30, r20
    3340:	80 81       	ld	r24, Z
    3342:	8f 73       	andi	r24, 0x3F	; 63
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	98 2f       	mov	r25, r24
    3348:	88 27       	eor	r24, r24
    334a:	21 81       	ldd	r18, Z+1	; 0x01
    334c:	82 2b       	or	r24, r18
    334e:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3352:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3356:	82 81       	ldd	r24, Z+2	; 0x02
    3358:	f0 e4       	ldi	r31, 0x40	; 64
    335a:	8f 9f       	mul	r24, r31
    335c:	c0 01       	movw	r24, r0
    335e:	11 24       	eor	r1, r1
    3360:	fa 01       	movw	r30, r20
    3362:	23 81       	ldd	r18, Z+3	; 0x03
    3364:	26 95       	lsr	r18
    3366:	26 95       	lsr	r18
    3368:	82 2b       	or	r24, r18
    336a:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    336e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	80 93 49 16 	sts	0x1649, r24	; 0x801649 <_measuringIsReady>
    3378:	08 95       	ret
    337a:	64 30       	cpi	r22, 0x04	; 4
    337c:	51 f0       	breq	.+20     	; 0x3392 <_hihTwiCallback+0x58>
    337e:	80 e0       	ldi	r24, 0x00	; 0
    3380:	90 e4       	ldi	r25, 0x40	; 64
    3382:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3386:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    338a:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    338e:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3392:	08 95       	ret

00003394 <hih8120_initialise>:
    3394:	0f 93       	push	r16
    3396:	1f 93       	push	r17
    3398:	0d e9       	ldi	r16, 0x9D	; 157
    339a:	19 e1       	ldi	r17, 0x19	; 25
    339c:	20 e0       	ldi	r18, 0x00	; 0
    339e:	34 e2       	ldi	r19, 0x24	; 36
    33a0:	44 ef       	ldi	r20, 0xF4	; 244
    33a2:	50 e0       	ldi	r21, 0x00	; 0
    33a4:	60 e0       	ldi	r22, 0x00	; 0
    33a6:	87 e2       	ldi	r24, 0x27	; 39
    33a8:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <twiCreate>
    33ac:	90 93 4b 16 	sts	0x164B, r25	; 0x80164b <_hih8120Handler+0x1>
    33b0:	80 93 4a 16 	sts	0x164A, r24	; 0x80164a <_hih8120Handler>
    33b4:	21 e0       	ldi	r18, 0x01	; 1
    33b6:	89 2b       	or	r24, r25
    33b8:	09 f0       	breq	.+2      	; 0x33bc <hih8120_initialise+0x28>
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	82 2f       	mov	r24, r18
    33be:	1f 91       	pop	r17
    33c0:	0f 91       	pop	r16
    33c2:	08 95       	ret

000033c4 <hih8120_wakeup>:
    33c4:	80 91 4a 16 	lds	r24, 0x164A	; 0x80164a <_hih8120Handler>
    33c8:	90 91 4b 16 	lds	r25, 0x164B	; 0x80164b <_hih8120Handler+0x1>
    33cc:	00 97       	sbiw	r24, 0x00	; 0
    33ce:	59 f0       	breq	.+22     	; 0x33e6 <hih8120_wakeup+0x22>
    33d0:	40 e0       	ldi	r20, 0x00	; 0
    33d2:	60 e0       	ldi	r22, 0x00	; 0
    33d4:	70 e0       	ldi	r23, 0x00	; 0
    33d6:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <twiTransmit>
    33da:	84 30       	cpi	r24, 0x04	; 4
    33dc:	31 f4       	brne	.+12     	; 0x33ea <hih8120_wakeup+0x26>
    33de:	10 92 49 16 	sts	0x1649, r1	; 0x801649 <_measuringIsReady>
    33e2:	80 e0       	ldi	r24, 0x00	; 0
    33e4:	08 95       	ret
    33e6:	82 e0       	ldi	r24, 0x02	; 2
    33e8:	08 95       	ret
    33ea:	83 e0       	ldi	r24, 0x03	; 3
    33ec:	08 95       	ret

000033ee <hih8120_measure>:
    33ee:	80 91 4a 16 	lds	r24, 0x164A	; 0x80164a <_hih8120Handler>
    33f2:	90 91 4b 16 	lds	r25, 0x164B	; 0x80164b <_hih8120Handler+0x1>
    33f6:	00 97       	sbiw	r24, 0x00	; 0
    33f8:	39 f0       	breq	.+14     	; 0x3408 <hih8120_measure+0x1a>
    33fa:	64 e0       	ldi	r22, 0x04	; 4
    33fc:	0e 94 01 27 	call	0x4e02	; 0x4e02 <twiReceive>
    3400:	85 30       	cpi	r24, 0x05	; 5
    3402:	21 f0       	breq	.+8      	; 0x340c <hih8120_measure+0x1e>
    3404:	83 e0       	ldi	r24, 0x03	; 3
    3406:	08 95       	ret
    3408:	82 e0       	ldi	r24, 0x02	; 2
    340a:	08 95       	ret
    340c:	80 e0       	ldi	r24, 0x00	; 0
    340e:	08 95       	ret

00003410 <hih8120_getHumidity>:
    3410:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3414:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3418:	80 e0       	ldi	r24, 0x00	; 0
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	0e 94 0b 29 	call	0x5216	; 0x5216 <__floatunsisf>
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	48 ec       	ldi	r20, 0xC8	; 200
    3426:	52 e4       	ldi	r21, 0x42	; 66
    3428:	0e 94 9d 29 	call	0x533a	; 0x533a <__mulsf3>
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	38 ef       	ldi	r19, 0xF8	; 248
    3430:	4f e7       	ldi	r20, 0x7F	; 127
    3432:	56 e4       	ldi	r21, 0x46	; 70
    3434:	0c 94 72 28 	jmp	0x50e4	; 0x50e4 <__divsf3>
    3438:	08 95       	ret

0000343a <hih8120_getHumidityPercent_x10>:
    343a:	ea df       	rcall	.-44     	; 0x3410 <hih8120_getHumidity>
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	40 e2       	ldi	r20, 0x20	; 32
    3442:	51 e4       	ldi	r21, 0x41	; 65
    3444:	0e 94 9d 29 	call	0x533a	; 0x533a <__mulsf3>
    3448:	0e 94 df 28 	call	0x51be	; 0x51be <__fixunssfsi>
    344c:	cb 01       	movw	r24, r22
    344e:	08 95       	ret

00003450 <hih8120_getTemperature>:
    3450:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3454:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3458:	80 e0       	ldi	r24, 0x00	; 0
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	0e 94 0b 29 	call	0x5216	; 0x5216 <__floatunsisf>
    3460:	20 e0       	ldi	r18, 0x00	; 0
    3462:	30 e0       	ldi	r19, 0x00	; 0
    3464:	45 e2       	ldi	r20, 0x25	; 37
    3466:	53 e4       	ldi	r21, 0x43	; 67
    3468:	0e 94 9d 29 	call	0x533a	; 0x533a <__mulsf3>
    346c:	20 e0       	ldi	r18, 0x00	; 0
    346e:	38 ef       	ldi	r19, 0xF8	; 248
    3470:	4f e7       	ldi	r20, 0x7F	; 127
    3472:	56 e4       	ldi	r21, 0x46	; 70
    3474:	0e 94 72 28 	call	0x50e4	; 0x50e4 <__divsf3>
    3478:	20 e0       	ldi	r18, 0x00	; 0
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	40 e2       	ldi	r20, 0x20	; 32
    347e:	52 e4       	ldi	r21, 0x42	; 66
    3480:	0c 94 0d 28 	jmp	0x501a	; 0x501a <__subsf3>
    3484:	08 95       	ret

00003486 <hih8120_getTemperature_x10>:
    3486:	e4 df       	rcall	.-56     	; 0x3450 <hih8120_getTemperature>
    3488:	20 e0       	ldi	r18, 0x00	; 0
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	40 e2       	ldi	r20, 0x20	; 32
    348e:	51 e4       	ldi	r21, 0x41	; 65
    3490:	0e 94 9d 29 	call	0x533a	; 0x533a <__mulsf3>
    3494:	0e 94 da 28 	call	0x51b4	; 0x51b4 <__fixsfsi>
    3498:	cb 01       	movw	r24, r22
    349a:	08 95       	ret

0000349c <_serialCallBack>:
    349c:	0f 93       	push	r16
    349e:	1f 93       	push	r17
    34a0:	cf 93       	push	r28
    34a2:	df 93       	push	r29
    34a4:	1f 92       	push	r1
    34a6:	1f 92       	push	r1
    34a8:	cd b7       	in	r28, 0x3d	; 61
    34aa:	de b7       	in	r29, 0x3e	; 62
    34ac:	8c 01       	movw	r16, r24
    34ae:	19 82       	std	Y+1, r1	; 0x01
    34b0:	2d c0       	rjmp	.+90     	; 0x350c <_serialCallBack+0x70>
    34b2:	e0 91 83 16 	lds	r30, 0x1683	; 0x801683 <rec_buf_inp.2878>
    34b6:	ec 32       	cpi	r30, 0x2C	; 44
    34b8:	50 f4       	brcc	.+20     	; 0x34ce <_serialCallBack+0x32>
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	8e 0f       	add	r24, r30
    34be:	80 93 83 16 	sts	0x1683, r24	; 0x801683 <rec_buf_inp.2878>
    34c2:	f0 e0       	ldi	r31, 0x00	; 0
    34c4:	eb 54       	subi	r30, 0x4B	; 75
    34c6:	f9 4e       	sbci	r31, 0xE9	; 233
    34c8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ca:	80 83       	st	Z, r24
    34cc:	02 c0       	rjmp	.+4      	; 0x34d2 <_serialCallBack+0x36>
    34ce:	10 92 83 16 	sts	0x1683, r1	; 0x801683 <rec_buf_inp.2878>
    34d2:	8a 81       	ldd	r24, Y+2	; 0x02
    34d4:	8a 30       	cpi	r24, 0x0A	; 10
    34d6:	d1 f4       	brne	.+52     	; 0x350c <_serialCallBack+0x70>
    34d8:	40 91 83 16 	lds	r20, 0x1683	; 0x801683 <rec_buf_inp.2878>
    34dc:	50 e0       	ldi	r21, 0x00	; 0
    34de:	fa 01       	movw	r30, r20
    34e0:	ed 54       	subi	r30, 0x4D	; 77
    34e2:	f9 4e       	sbci	r31, 0xE9	; 233
    34e4:	10 82       	st	Z, r1
    34e6:	41 50       	subi	r20, 0x01	; 1
    34e8:	51 09       	sbc	r21, r1
    34ea:	9e 01       	movw	r18, r28
    34ec:	2f 5f       	subi	r18, 0xFF	; 255
    34ee:	3f 4f       	sbci	r19, 0xFF	; 255
    34f0:	65 eb       	ldi	r22, 0xB5	; 181
    34f2:	76 e1       	ldi	r23, 0x16	; 22
    34f4:	80 91 86 16 	lds	r24, 0x1686	; 0x801686 <_serialReplyBufferHandle>
    34f8:	90 91 87 16 	lds	r25, 0x1687	; 0x801687 <_serialReplyBufferHandle+0x1>
    34fc:	0e 94 15 09 	call	0x122a	; 0x122a <xStreamBufferSendFromISR>
    3500:	89 81       	ldd	r24, Y+1	; 0x01
    3502:	81 11       	cpse	r24, r1
    3504:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    3508:	10 92 83 16 	sts	0x1683, r1	; 0x801683 <rec_buf_inp.2878>
    350c:	be 01       	movw	r22, r28
    350e:	6e 5f       	subi	r22, 0xFE	; 254
    3510:	7f 4f       	sbci	r23, 0xFF	; 255
    3512:	c8 01       	movw	r24, r16
    3514:	16 d6       	rcall	.+3116   	; 0x4142 <serial_getByte>
    3516:	88 23       	and	r24, r24
    3518:	61 f2       	breq	.-104    	; 0x34b2 <_serialCallBack+0x16>
    351a:	0f 90       	pop	r0
    351c:	0f 90       	pop	r0
    351e:	df 91       	pop	r29
    3520:	cf 91       	pop	r28
    3522:	1f 91       	pop	r17
    3524:	0f 91       	pop	r16
    3526:	08 95       	ret

00003528 <_uploadMessage>:
    3528:	0f 93       	push	r16
    352a:	1f 93       	push	r17
    352c:	cf 93       	push	r28
    352e:	df 93       	push	r29
    3530:	8c 01       	movw	r16, r24
    3532:	eb 01       	movw	r28, r22
    3534:	80 91 86 16 	lds	r24, 0x1686	; 0x801686 <_serialReplyBufferHandle>
    3538:	90 91 87 16 	lds	r25, 0x1687	; 0x801687 <_serialReplyBufferHandle+0x1>
    353c:	0e 94 22 08 	call	0x1044	; 0x1044 <xStreamBufferReset>
    3540:	b8 01       	movw	r22, r16
    3542:	8c e4       	ldi	r24, 0x4C	; 76
    3544:	96 e1       	ldi	r25, 0x16	; 22
    3546:	0e 94 b3 2b 	call	0x5766	; 0x5766 <strcpy>
    354a:	20 97       	sbiw	r28, 0x00	; 0
    354c:	79 f0       	breq	.+30     	; 0x356c <_uploadMessage+0x44>
    354e:	ec e4       	ldi	r30, 0x4C	; 76
    3550:	f6 e1       	ldi	r31, 0x16	; 22
    3552:	01 90       	ld	r0, Z+
    3554:	00 20       	and	r0, r0
    3556:	e9 f7       	brne	.-6      	; 0x3552 <_uploadMessage+0x2a>
    3558:	31 97       	sbiw	r30, 0x01	; 1
    355a:	80 e2       	ldi	r24, 0x20	; 32
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	91 83       	std	Z+1, r25	; 0x01
    3560:	80 83       	st	Z, r24
    3562:	be 01       	movw	r22, r28
    3564:	8c e4       	ldi	r24, 0x4C	; 76
    3566:	96 e1       	ldi	r25, 0x16	; 22
    3568:	0e 94 a8 2b 	call	0x5750	; 0x5750 <strcat>
    356c:	ec e4       	ldi	r30, 0x4C	; 76
    356e:	f6 e1       	ldi	r31, 0x16	; 22
    3570:	df 01       	movw	r26, r30
    3572:	0d 90       	ld	r0, X+
    3574:	00 20       	and	r0, r0
    3576:	e9 f7       	brne	.-6      	; 0x3572 <_uploadMessage+0x4a>
    3578:	11 97       	sbiw	r26, 0x01	; 1
    357a:	8d e0       	ldi	r24, 0x0D	; 13
    357c:	9a e0       	ldi	r25, 0x0A	; 10
    357e:	11 96       	adiw	r26, 0x01	; 1
    3580:	9c 93       	st	X, r25
    3582:	8e 93       	st	-X, r24
    3584:	12 96       	adiw	r26, 0x02	; 2
    3586:	1c 92       	st	X, r1
    3588:	01 90       	ld	r0, Z+
    358a:	00 20       	and	r0, r0
    358c:	e9 f7       	brne	.-6      	; 0x3588 <_uploadMessage+0x60>
    358e:	31 97       	sbiw	r30, 0x01	; 1
    3590:	ec 54       	subi	r30, 0x4C	; 76
    3592:	f6 41       	sbci	r31, 0x16	; 22
    3594:	ae 2f       	mov	r26, r30
    3596:	8c e4       	ldi	r24, 0x4C	; 76
    3598:	96 e1       	ldi	r25, 0x16	; 22
    359a:	ac 01       	movw	r20, r24
    359c:	6a 2f       	mov	r22, r26
    359e:	80 91 88 16 	lds	r24, 0x1688	; 0x801688 <_rn2483_serial>
    35a2:	90 91 89 16 	lds	r25, 0x1689	; 0x801689 <_rn2483_serial+0x1>
    35a6:	78 d5       	rcall	.+2800   	; 0x4098 <serial_sendBytes>
    35a8:	81 11       	cpse	r24, r1
    35aa:	11 c0       	rjmp	.+34     	; 0x35ce <_uploadMessage+0xa6>
    35ac:	08 e2       	ldi	r16, 0x28	; 40
    35ae:	15 e0       	ldi	r17, 0x05	; 5
    35b0:	20 e0       	ldi	r18, 0x00	; 0
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	4d e2       	ldi	r20, 0x2D	; 45
    35b6:	50 e0       	ldi	r21, 0x00	; 0
    35b8:	6f e0       	ldi	r22, 0x0F	; 15
    35ba:	77 e1       	ldi	r23, 0x17	; 23
    35bc:	80 91 86 16 	lds	r24, 0x1686	; 0x801686 <_serialReplyBufferHandle>
    35c0:	90 91 87 16 	lds	r25, 0x1687	; 0x801687 <_serialReplyBufferHandle+0x1>
    35c4:	0e 94 59 09 	call	0x12b2	; 0x12b2 <xStreamBufferReceive>
    35c8:	8f e0       	ldi	r24, 0x0F	; 15
    35ca:	97 e1       	ldi	r25, 0x17	; 23
    35cc:	02 c0       	rjmp	.+4      	; 0x35d2 <_uploadMessage+0xaa>
    35ce:	80 e0       	ldi	r24, 0x00	; 0
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	df 91       	pop	r29
    35d4:	cf 91       	pop	r28
    35d6:	1f 91       	pop	r17
    35d8:	0f 91       	pop	r16
    35da:	08 95       	ret

000035dc <_reply2ReturnCode>:
    35dc:	2f 92       	push	r2
    35de:	3f 92       	push	r3
    35e0:	4f 92       	push	r4
    35e2:	5f 92       	push	r5
    35e4:	6f 92       	push	r6
    35e6:	7f 92       	push	r7
    35e8:	8f 92       	push	r8
    35ea:	9f 92       	push	r9
    35ec:	af 92       	push	r10
    35ee:	bf 92       	push	r11
    35f0:	cf 92       	push	r12
    35f2:	df 92       	push	r13
    35f4:	ef 92       	push	r14
    35f6:	ff 92       	push	r15
    35f8:	0f 93       	push	r16
    35fa:	1f 93       	push	r17
    35fc:	cf 93       	push	r28
    35fe:	df 93       	push	r29
    3600:	5c 01       	movw	r10, r24
    3602:	fc 01       	movw	r30, r24
    3604:	01 90       	ld	r0, Z+
    3606:	00 20       	and	r0, r0
    3608:	e9 f7       	brne	.-6      	; 0x3604 <_reply2ReturnCode+0x28>
    360a:	31 97       	sbiw	r30, 0x01	; 1
    360c:	6f 01       	movw	r12, r30
    360e:	c8 1a       	sub	r12, r24
    3610:	d9 0a       	sbc	r13, r25
    3612:	5c 2c       	mov	r5, r12
    3614:	0f 2e       	mov	r0, r31
    3616:	f9 e5       	ldi	r31, 0x59	; 89
    3618:	8f 2e       	mov	r8, r31
    361a:	f7 e0       	ldi	r31, 0x07	; 7
    361c:	9f 2e       	mov	r9, r31
    361e:	f0 2d       	mov	r31, r0
    3620:	e1 2c       	mov	r14, r1
    3622:	f1 2c       	mov	r15, r1
    3624:	4c 2c       	mov	r4, r12
    3626:	37 01       	movw	r6, r14
    3628:	f4 01       	movw	r30, r8
    362a:	01 81       	ldd	r16, Z+1	; 0x01
    362c:	12 81       	ldd	r17, Z+2	; 0x02
    362e:	e8 01       	movw	r28, r16
    3630:	09 90       	ld	r0, Y+
    3632:	00 20       	and	r0, r0
    3634:	e9 f7       	brne	.-6      	; 0x3630 <_reply2ReturnCode+0x54>
    3636:	21 97       	sbiw	r28, 0x01	; 1
    3638:	c0 1b       	sub	r28, r16
    363a:	d1 0b       	sbc	r29, r17
    363c:	3c 2e       	mov	r3, r28
    363e:	f9 e0       	ldi	r31, 0x09	; 9
    3640:	cf 16       	cp	r12, r31
    3642:	d1 04       	cpc	r13, r1
    3644:	58 f0       	brcs	.+22     	; 0x365c <_reply2ReturnCode+0x80>
    3646:	f4 01       	movw	r30, r8
    3648:	20 80       	ld	r2, Z
    364a:	fe e0       	ldi	r31, 0x0E	; 14
    364c:	2f 12       	cpse	r2, r31
    364e:	06 c0       	rjmp	.+12     	; 0x365c <_reply2ReturnCode+0x80>
    3650:	b8 01       	movw	r22, r16
    3652:	c5 01       	movw	r24, r10
    3654:	0e 94 83 2b 	call	0x5706	; 0x5706 <strcasestr>
    3658:	89 2b       	or	r24, r25
    365a:	09 f5       	brne	.+66     	; 0x369e <_reply2ReturnCode+0xc2>
    365c:	44 2d       	mov	r20, r4
    365e:	35 14       	cp	r3, r5
    3660:	08 f4       	brcc	.+2      	; 0x3664 <_reply2ReturnCode+0x88>
    3662:	4c 2f       	mov	r20, r28
    3664:	50 e0       	ldi	r21, 0x00	; 0
    3666:	b8 01       	movw	r22, r16
    3668:	c5 01       	movw	r24, r10
    366a:	0e 94 ba 2b 	call	0x5774	; 0x5774 <strncasecmp>
    366e:	89 2b       	or	r24, r25
    3670:	49 f4       	brne	.+18     	; 0x3684 <_reply2ReturnCode+0xa8>
    3672:	f3 01       	movw	r30, r6
    3674:	ee 0f       	add	r30, r30
    3676:	ff 1f       	adc	r31, r31
    3678:	e6 0d       	add	r30, r6
    367a:	f7 1d       	adc	r31, r7
    367c:	e7 5a       	subi	r30, 0xA7	; 167
    367e:	f8 4f       	sbci	r31, 0xF8	; 248
    3680:	20 80       	ld	r2, Z
    3682:	0d c0       	rjmp	.+26     	; 0x369e <_reply2ReturnCode+0xc2>
    3684:	8f ef       	ldi	r24, 0xFF	; 255
    3686:	e8 1a       	sub	r14, r24
    3688:	f8 0a       	sbc	r15, r24
    368a:	e3 e0       	ldi	r30, 0x03	; 3
    368c:	8e 0e       	add	r8, r30
    368e:	91 1c       	adc	r9, r1
    3690:	f1 e1       	ldi	r31, 0x11	; 17
    3692:	ef 16       	cp	r14, r31
    3694:	f1 04       	cpc	r15, r1
    3696:	39 f6       	brne	.-114    	; 0x3626 <_reply2ReturnCode+0x4a>
    3698:	68 94       	set
    369a:	22 24       	eor	r2, r2
    369c:	24 f8       	bld	r2, 4
    369e:	82 2d       	mov	r24, r2
    36a0:	df 91       	pop	r29
    36a2:	cf 91       	pop	r28
    36a4:	1f 91       	pop	r17
    36a6:	0f 91       	pop	r16
    36a8:	ff 90       	pop	r15
    36aa:	ef 90       	pop	r14
    36ac:	df 90       	pop	r13
    36ae:	cf 90       	pop	r12
    36b0:	bf 90       	pop	r11
    36b2:	af 90       	pop	r10
    36b4:	9f 90       	pop	r9
    36b6:	8f 90       	pop	r8
    36b8:	7f 90       	pop	r7
    36ba:	6f 90       	pop	r6
    36bc:	5f 90       	pop	r5
    36be:	4f 90       	pop	r4
    36c0:	3f 90       	pop	r3
    36c2:	2f 90       	pop	r2
    36c4:	08 95       	ret

000036c6 <_uploadMessageRc>:
    36c6:	30 df       	rcall	.-416    	; 0x3528 <_uploadMessage>
    36c8:	89 cf       	rjmp	.-238    	; 0x35dc <_reply2ReturnCode>
    36ca:	08 95       	ret

000036cc <lora_driver_flushBuffers>:
    36cc:	80 91 86 16 	lds	r24, 0x1686	; 0x801686 <_serialReplyBufferHandle>
    36d0:	90 91 87 16 	lds	r25, 0x1687	; 0x801687 <_serialReplyBufferHandle+0x1>
    36d4:	0c 94 22 08 	jmp	0x1044	; 0x1044 <xStreamBufferReset>
    36d8:	08 95       	ret

000036da <lora_driver_initialise>:
    36da:	8f 92       	push	r8
    36dc:	9f 92       	push	r9
    36de:	af 92       	push	r10
    36e0:	cf 92       	push	r12
    36e2:	ef 92       	push	r14
    36e4:	0f 93       	push	r16
    36e6:	1f 93       	push	r17
    36e8:	cf 93       	push	r28
    36ea:	c8 2f       	mov	r28, r24
    36ec:	8b 01       	movw	r16, r22
    36ee:	41 e0       	ldi	r20, 0x01	; 1
    36f0:	60 e0       	ldi	r22, 0x00	; 0
    36f2:	70 e0       	ldi	r23, 0x00	; 0
    36f4:	88 ec       	ldi	r24, 0xC8	; 200
    36f6:	90 e0       	ldi	r25, 0x00	; 0
    36f8:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <xStreamBufferGenericCreate>
    36fc:	90 93 87 16 	sts	0x1687, r25	; 0x801687 <_serialReplyBufferHandle+0x1>
    3700:	80 93 86 16 	sts	0x1686, r24	; 0x801686 <_serialReplyBufferHandle>
    3704:	10 93 85 16 	sts	0x1685, r17	; 0x801685 <_downlinkMessageBuffer+0x1>
    3708:	00 93 84 16 	sts	0x1684, r16	; 0x801684 <_downlinkMessageBuffer>
    370c:	0f 2e       	mov	r0, r31
    370e:	fe e4       	ldi	r31, 0x4E	; 78
    3710:	8f 2e       	mov	r8, r31
    3712:	fa e1       	ldi	r31, 0x1A	; 26
    3714:	9f 2e       	mov	r9, r31
    3716:	f0 2d       	mov	r31, r0
    3718:	68 94       	set
    371a:	aa 24       	eor	r10, r10
    371c:	a6 f8       	bld	r10, 6
    371e:	68 94       	set
    3720:	cc 24       	eor	r12, r12
    3722:	c6 f8       	bld	r12, 6
    3724:	e1 2c       	mov	r14, r1
    3726:	00 e0       	ldi	r16, 0x00	; 0
    3728:	23 e0       	ldi	r18, 0x03	; 3
    372a:	40 e0       	ldi	r20, 0x00	; 0
    372c:	51 ee       	ldi	r21, 0xE1	; 225
    372e:	60 e0       	ldi	r22, 0x00	; 0
    3730:	70 e0       	ldi	r23, 0x00	; 0
    3732:	8c 2f       	mov	r24, r28
    3734:	de d3       	rcall	.+1980   	; 0x3ef2 <serial_create>
    3736:	90 93 89 16 	sts	0x1689, r25	; 0x801689 <_rn2483_serial+0x1>
    373a:	80 93 88 16 	sts	0x1688, r24	; 0x801688 <_rn2483_serial>
    373e:	e7 e0       	ldi	r30, 0x07	; 7
    3740:	f1 e0       	ldi	r31, 0x01	; 1
    3742:	80 81       	ld	r24, Z
    3744:	80 61       	ori	r24, 0x10	; 16
    3746:	80 83       	st	Z, r24
    3748:	cf 91       	pop	r28
    374a:	1f 91       	pop	r17
    374c:	0f 91       	pop	r16
    374e:	ef 90       	pop	r14
    3750:	cf 90       	pop	r12
    3752:	af 90       	pop	r10
    3754:	9f 90       	pop	r9
    3756:	8f 90       	pop	r8
    3758:	08 95       	ret

0000375a <lora_driver_resetRn2483>:
    375a:	88 23       	and	r24, r24
    375c:	31 f0       	breq	.+12     	; 0x376a <lora_driver_resetRn2483+0x10>
    375e:	e8 e0       	ldi	r30, 0x08	; 8
    3760:	f1 e0       	ldi	r31, 0x01	; 1
    3762:	80 81       	ld	r24, Z
    3764:	8f 7e       	andi	r24, 0xEF	; 239
    3766:	80 83       	st	Z, r24
    3768:	08 95       	ret
    376a:	e8 e0       	ldi	r30, 0x08	; 8
    376c:	f1 e0       	ldi	r31, 0x01	; 1
    376e:	80 81       	ld	r24, Z
    3770:	80 61       	ori	r24, 0x10	; 16
    3772:	80 83       	st	Z, r24
    3774:	08 95       	ret

00003776 <lora_driver_rn2483FactoryReset>:
    3776:	60 e0       	ldi	r22, 0x00	; 0
    3778:	70 e0       	ldi	r23, 0x00	; 0
    377a:	8f ed       	ldi	r24, 0xDF	; 223
    377c:	94 e0       	ldi	r25, 0x04	; 4
    377e:	d4 de       	rcall	.-600    	; 0x3528 <_uploadMessage>
    3780:	ef e0       	ldi	r30, 0x0F	; 15
    3782:	f7 e1       	ldi	r31, 0x17	; 23
    3784:	01 90       	ld	r0, Z+
    3786:	00 20       	and	r0, r0
    3788:	e9 f7       	brne	.-6      	; 0x3784 <lora_driver_rn2483FactoryReset+0xe>
    378a:	31 97       	sbiw	r30, 0x01	; 1
    378c:	ef 50       	subi	r30, 0x0F	; 15
    378e:	f7 41       	sbci	r31, 0x17	; 23
    3790:	81 e0       	ldi	r24, 0x01	; 1
    3792:	75 97       	sbiw	r30, 0x15	; 21
    3794:	08 f0       	brcs	.+2      	; 0x3798 <lora_driver_rn2483FactoryReset+0x22>
    3796:	80 e0       	ldi	r24, 0x00	; 0
    3798:	08 95       	ret

0000379a <lora_driver_getRn2483Hweui>:
    379a:	cf 93       	push	r28
    379c:	df 93       	push	r29
    379e:	ec 01       	movw	r28, r24
    37a0:	60 e0       	ldi	r22, 0x00	; 0
    37a2:	70 e0       	ldi	r23, 0x00	; 0
    37a4:	80 ef       	ldi	r24, 0xF0	; 240
    37a6:	94 e0       	ldi	r25, 0x04	; 4
    37a8:	bf de       	rcall	.-642    	; 0x3528 <_uploadMessage>
    37aa:	ef e0       	ldi	r30, 0x0F	; 15
    37ac:	f7 e1       	ldi	r31, 0x17	; 23
    37ae:	01 90       	ld	r0, Z+
    37b0:	00 20       	and	r0, r0
    37b2:	e9 f7       	brne	.-6      	; 0x37ae <lora_driver_getRn2483Hweui+0x14>
    37b4:	e0 52       	subi	r30, 0x20	; 32
    37b6:	f7 41       	sbci	r31, 0x17	; 23
    37b8:	39 f4       	brne	.+14     	; 0x37c8 <lora_driver_getRn2483Hweui+0x2e>
    37ba:	6f e0       	ldi	r22, 0x0F	; 15
    37bc:	77 e1       	ldi	r23, 0x17	; 23
    37be:	ce 01       	movw	r24, r28
    37c0:	0e 94 b3 2b 	call	0x5766	; 0x5766 <strcpy>
    37c4:	80 e0       	ldi	r24, 0x00	; 0
    37c6:	02 c0       	rjmp	.+4      	; 0x37cc <lora_driver_getRn2483Hweui+0x32>
    37c8:	18 82       	st	Y, r1
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	df 91       	pop	r29
    37ce:	cf 91       	pop	r28
    37d0:	08 95       	ret

000037d2 <lora_driver_setDeviceIdentifier>:
    37d2:	fc 01       	movw	r30, r24
    37d4:	01 90       	ld	r0, Z+
    37d6:	00 20       	and	r0, r0
    37d8:	e9 f7       	brne	.-6      	; 0x37d4 <lora_driver_setDeviceIdentifier+0x2>
    37da:	9f 01       	movw	r18, r30
    37dc:	21 51       	subi	r18, 0x11	; 17
    37de:	31 09       	sbc	r19, r1
    37e0:	28 17       	cp	r18, r24
    37e2:	39 07       	cpc	r19, r25
    37e4:	29 f4       	brne	.+10     	; 0x37f0 <lora_driver_setDeviceIdentifier+0x1e>
    37e6:	bc 01       	movw	r22, r24
    37e8:	8e e1       	ldi	r24, 0x1E	; 30
    37ea:	95 e0       	ldi	r25, 0x05	; 5
    37ec:	6c cf       	rjmp	.-296    	; 0x36c6 <_uploadMessageRc>
    37ee:	08 95       	ret
    37f0:	89 e0       	ldi	r24, 0x09	; 9
    37f2:	08 95       	ret

000037f4 <lora_driver_setApplicationIdentifier>:
    37f4:	fc 01       	movw	r30, r24
    37f6:	01 90       	ld	r0, Z+
    37f8:	00 20       	and	r0, r0
    37fa:	e9 f7       	brne	.-6      	; 0x37f6 <lora_driver_setApplicationIdentifier+0x2>
    37fc:	9f 01       	movw	r18, r30
    37fe:	21 51       	subi	r18, 0x11	; 17
    3800:	31 09       	sbc	r19, r1
    3802:	28 17       	cp	r18, r24
    3804:	39 07       	cpc	r19, r25
    3806:	29 f4       	brne	.+10     	; 0x3812 <lora_driver_setApplicationIdentifier+0x1e>
    3808:	bc 01       	movw	r22, r24
    380a:	8d e2       	ldi	r24, 0x2D	; 45
    380c:	95 e0       	ldi	r25, 0x05	; 5
    380e:	5b cf       	rjmp	.-330    	; 0x36c6 <_uploadMessageRc>
    3810:	08 95       	ret
    3812:	89 e0       	ldi	r24, 0x09	; 9
    3814:	08 95       	ret

00003816 <lora_driver_setApplicationKey>:
    3816:	fc 01       	movw	r30, r24
    3818:	01 90       	ld	r0, Z+
    381a:	00 20       	and	r0, r0
    381c:	e9 f7       	brne	.-6      	; 0x3818 <lora_driver_setApplicationKey+0x2>
    381e:	9f 01       	movw	r18, r30
    3820:	21 52       	subi	r18, 0x21	; 33
    3822:	31 09       	sbc	r19, r1
    3824:	28 17       	cp	r18, r24
    3826:	39 07       	cpc	r19, r25
    3828:	29 f4       	brne	.+10     	; 0x3834 <lora_driver_setApplicationKey+0x1e>
    382a:	bc 01       	movw	r22, r24
    382c:	8c e3       	ldi	r24, 0x3C	; 60
    382e:	95 e0       	ldi	r25, 0x05	; 5
    3830:	4a cf       	rjmp	.-364    	; 0x36c6 <_uploadMessageRc>
    3832:	08 95       	ret
    3834:	89 e0       	ldi	r24, 0x09	; 9
    3836:	08 95       	ret

00003838 <lora_driver_saveMac>:
    3838:	60 e0       	ldi	r22, 0x00	; 0
    383a:	70 e0       	ldi	r23, 0x00	; 0
    383c:	8b e7       	ldi	r24, 0x7B	; 123
    383e:	95 e0       	ldi	r25, 0x05	; 5
    3840:	42 cf       	rjmp	.-380    	; 0x36c6 <_uploadMessageRc>
    3842:	08 95       	ret

00003844 <lora_driver_join>:
    3844:	0f 93       	push	r16
    3846:	1f 93       	push	r17
    3848:	e8 2f       	mov	r30, r24
    384a:	f0 e0       	ldi	r31, 0x00	; 0
    384c:	ee 0f       	add	r30, r30
    384e:	ff 1f       	adc	r31, r31
    3850:	eb 5a       	subi	r30, 0xAB	; 171
    3852:	f8 4f       	sbci	r31, 0xF8	; 248
    3854:	60 81       	ld	r22, Z
    3856:	71 81       	ldd	r23, Z+1	; 0x01
    3858:	84 e8       	ldi	r24, 0x84	; 132
    385a:	95 e0       	ldi	r25, 0x05	; 5
    385c:	34 df       	rcall	.-408    	; 0x36c6 <_uploadMessageRc>
    385e:	81 11       	cpse	r24, r1
    3860:	14 c0       	rjmp	.+40     	; 0x388a <lora_driver_join+0x46>
    3862:	08 e2       	ldi	r16, 0x28	; 40
    3864:	15 e0       	ldi	r17, 0x05	; 5
    3866:	20 e0       	ldi	r18, 0x00	; 0
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	4d e2       	ldi	r20, 0x2D	; 45
    386c:	50 e0       	ldi	r21, 0x00	; 0
    386e:	6f e0       	ldi	r22, 0x0F	; 15
    3870:	77 e1       	ldi	r23, 0x17	; 23
    3872:	80 91 86 16 	lds	r24, 0x1686	; 0x801686 <_serialReplyBufferHandle>
    3876:	90 91 87 16 	lds	r25, 0x1687	; 0x801687 <_serialReplyBufferHandle+0x1>
    387a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <xStreamBufferReceive>
    387e:	88 23       	and	r24, r24
    3880:	21 f0       	breq	.+8      	; 0x388a <lora_driver_join+0x46>
    3882:	8f e0       	ldi	r24, 0x0F	; 15
    3884:	97 e1       	ldi	r25, 0x17	; 23
    3886:	aa de       	rcall	.-684    	; 0x35dc <_reply2ReturnCode>
    3888:	03 c0       	rjmp	.+6      	; 0x3890 <lora_driver_join+0x4c>
    388a:	8f e0       	ldi	r24, 0x0F	; 15
    388c:	97 e1       	ldi	r25, 0x17	; 23
    388e:	a6 de       	rcall	.-692    	; 0x35dc <_reply2ReturnCode>
    3890:	1f 91       	pop	r17
    3892:	0f 91       	pop	r16
    3894:	08 95       	ret

00003896 <lora_driver_sendUploadMessage>:
    3896:	0f 93       	push	r16
    3898:	1f 93       	push	r17
    389a:	cf 93       	push	r28
    389c:	df 93       	push	r29
    389e:	1f 92       	push	r1
    38a0:	cd b7       	in	r28, 0x3d	; 61
    38a2:	de b7       	in	r29, 0x3e	; 62
    38a4:	db 01       	movw	r26, r22
    38a6:	11 96       	adiw	r26, 0x01	; 1
    38a8:	9c 91       	ld	r25, X
    38aa:	11 97       	sbiw	r26, 0x01	; 1
    38ac:	95 31       	cpi	r25, 0x15	; 21
    38ae:	08 f0       	brcs	.+2      	; 0x38b2 <lora_driver_sendUploadMessage+0x1c>
    38b0:	b4 c0       	rjmp	.+360    	; 0x3a1a <lora_driver_sendUploadMessage+0x184>
    38b2:	99 23       	and	r25, r25
    38b4:	81 f1       	breq	.+96     	; 0x3916 <lora_driver_sendUploadMessage+0x80>
    38b6:	60 e0       	ldi	r22, 0x00	; 0
    38b8:	70 e0       	ldi	r23, 0x00	; 0
    38ba:	27 2f       	mov	r18, r23
    38bc:	30 e0       	ldi	r19, 0x00	; 0
    38be:	46 2f       	mov	r20, r22
    38c0:	50 e0       	ldi	r21, 0x00	; 0
    38c2:	fd 01       	movw	r30, r26
    38c4:	e4 0f       	add	r30, r20
    38c6:	f5 1f       	adc	r31, r21
    38c8:	92 81       	ldd	r25, Z+2	; 0x02
    38ca:	92 95       	swap	r25
    38cc:	9f 70       	andi	r25, 0x0F	; 15
    38ce:	9a 30       	cpi	r25, 0x0A	; 10
    38d0:	10 f0       	brcs	.+4      	; 0x38d6 <lora_driver_sendUploadMessage+0x40>
    38d2:	99 5c       	subi	r25, 0xC9	; 201
    38d4:	01 c0       	rjmp	.+2      	; 0x38d8 <lora_driver_sendUploadMessage+0x42>
    38d6:	90 5d       	subi	r25, 0xD0	; 208
    38d8:	f9 01       	movw	r30, r18
    38da:	e0 56       	subi	r30, 0x60	; 96
    38dc:	f9 4e       	sbci	r31, 0xE9	; 233
    38de:	90 83       	st	Z, r25
    38e0:	2f 5f       	subi	r18, 0xFF	; 255
    38e2:	3f 4f       	sbci	r19, 0xFF	; 255
    38e4:	fd 01       	movw	r30, r26
    38e6:	e4 0f       	add	r30, r20
    38e8:	f5 1f       	adc	r31, r21
    38ea:	92 81       	ldd	r25, Z+2	; 0x02
    38ec:	9f 70       	andi	r25, 0x0F	; 15
    38ee:	49 2f       	mov	r20, r25
    38f0:	50 e0       	ldi	r21, 0x00	; 0
    38f2:	4a 30       	cpi	r20, 0x0A	; 10
    38f4:	51 05       	cpc	r21, r1
    38f6:	14 f0       	brlt	.+4      	; 0x38fc <lora_driver_sendUploadMessage+0x66>
    38f8:	99 5c       	subi	r25, 0xC9	; 201
    38fa:	01 c0       	rjmp	.+2      	; 0x38fe <lora_driver_sendUploadMessage+0x68>
    38fc:	90 5d       	subi	r25, 0xD0	; 208
    38fe:	f9 01       	movw	r30, r18
    3900:	e0 56       	subi	r30, 0x60	; 96
    3902:	f9 4e       	sbci	r31, 0xE9	; 233
    3904:	90 83       	st	Z, r25
    3906:	7e 5f       	subi	r23, 0xFE	; 254
    3908:	6f 5f       	subi	r22, 0xFF	; 255
    390a:	11 96       	adiw	r26, 0x01	; 1
    390c:	9c 91       	ld	r25, X
    390e:	11 97       	sbiw	r26, 0x01	; 1
    3910:	69 17       	cp	r22, r25
    3912:	98 f2       	brcs	.-90     	; 0x38ba <lora_driver_sendUploadMessage+0x24>
    3914:	01 c0       	rjmp	.+2      	; 0x3918 <lora_driver_sendUploadMessage+0x82>
    3916:	70 e0       	ldi	r23, 0x00	; 0
    3918:	e7 2f       	mov	r30, r23
    391a:	f0 e0       	ldi	r31, 0x00	; 0
    391c:	e0 56       	subi	r30, 0x60	; 96
    391e:	f9 4e       	sbci	r31, 0xE9	; 233
    3920:	10 82       	st	Z, r1
    3922:	4c 91       	ld	r20, X
    3924:	81 11       	cpse	r24, r1
    3926:	03 c0       	rjmp	.+6      	; 0x392e <lora_driver_sendUploadMessage+0x98>
    3928:	8d e8       	ldi	r24, 0x8D	; 141
    392a:	95 e0       	ldi	r25, 0x05	; 5
    392c:	02 c0       	rjmp	.+4      	; 0x3932 <lora_driver_sendUploadMessage+0x9c>
    392e:	8f e8       	ldi	r24, 0x8F	; 143
    3930:	95 e0       	ldi	r25, 0x05	; 5
    3932:	20 ea       	ldi	r18, 0xA0	; 160
    3934:	36 e1       	ldi	r19, 0x16	; 22
    3936:	3f 93       	push	r19
    3938:	2f 93       	push	r18
    393a:	1f 92       	push	r1
    393c:	4f 93       	push	r20
    393e:	9f 93       	push	r25
    3940:	8f 93       	push	r24
    3942:	83 e9       	ldi	r24, 0x93	; 147
    3944:	95 e0       	ldi	r25, 0x05	; 5
    3946:	9f 93       	push	r25
    3948:	8f 93       	push	r24
    394a:	82 ee       	ldi	r24, 0xE2	; 226
    394c:	96 e1       	ldi	r25, 0x16	; 22
    394e:	9f 93       	push	r25
    3950:	8f 93       	push	r24
    3952:	0e 94 15 2c 	call	0x582a	; 0x582a <sprintf>
    3956:	60 e0       	ldi	r22, 0x00	; 0
    3958:	70 e0       	ldi	r23, 0x00	; 0
    395a:	82 ee       	ldi	r24, 0xE2	; 226
    395c:	96 e1       	ldi	r25, 0x16	; 22
    395e:	b3 de       	rcall	.-666    	; 0x36c6 <_uploadMessageRc>
    3960:	0f b6       	in	r0, 0x3f	; 63
    3962:	f8 94       	cli
    3964:	de bf       	out	0x3e, r29	; 62
    3966:	0f be       	out	0x3f, r0	; 63
    3968:	cd bf       	out	0x3d, r28	; 61
    396a:	81 11       	cpse	r24, r1
    396c:	59 c0       	rjmp	.+178    	; 0x3a20 <lora_driver_sendUploadMessage+0x18a>
    396e:	08 e2       	ldi	r16, 0x28	; 40
    3970:	15 e0       	ldi	r17, 0x05	; 5
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	4d e2       	ldi	r20, 0x2D	; 45
    3978:	50 e0       	ldi	r21, 0x00	; 0
    397a:	6f e0       	ldi	r22, 0x0F	; 15
    397c:	77 e1       	ldi	r23, 0x17	; 23
    397e:	80 91 86 16 	lds	r24, 0x1686	; 0x801686 <_serialReplyBufferHandle>
    3982:	90 91 87 16 	lds	r25, 0x1687	; 0x801687 <_serialReplyBufferHandle+0x1>
    3986:	0e 94 59 09 	call	0x12b2	; 0x12b2 <xStreamBufferReceive>
    398a:	88 23       	and	r24, r24
    398c:	09 f4       	brne	.+2      	; 0x3990 <lora_driver_sendUploadMessage+0xfa>
    398e:	47 c0       	rjmp	.+142    	; 0x3a1e <lora_driver_sendUploadMessage+0x188>
    3990:	8f e0       	ldi	r24, 0x0F	; 15
    3992:	97 e1       	ldi	r25, 0x17	; 23
    3994:	23 de       	rcall	.-954    	; 0x35dc <_reply2ReturnCode>
    3996:	8e 30       	cpi	r24, 0x0E	; 14
    3998:	09 f0       	breq	.+2      	; 0x399c <lora_driver_sendUploadMessage+0x106>
    399a:	42 c0       	rjmp	.+132    	; 0x3a20 <lora_driver_sendUploadMessage+0x18a>
    399c:	87 e0       	ldi	r24, 0x07	; 7
    399e:	89 83       	std	Y+1, r24	; 0x01
    39a0:	80 91 84 16 	lds	r24, 0x1684	; 0x801684 <_downlinkMessageBuffer>
    39a4:	90 91 85 16 	lds	r25, 0x1685	; 0x801685 <_downlinkMessageBuffer+0x1>
    39a8:	89 2b       	or	r24, r25
    39aa:	a9 f1       	breq	.+106    	; 0x3a16 <lora_driver_sendUploadMessage+0x180>
    39ac:	be 01       	movw	r22, r28
    39ae:	6f 5f       	subi	r22, 0xFF	; 255
    39b0:	7f 4f       	sbci	r23, 0xFF	; 255
    39b2:	8f e0       	ldi	r24, 0x0F	; 15
    39b4:	97 e1       	ldi	r25, 0x17	; 23
    39b6:	68 d1       	rcall	.+720    	; 0x3c88 <decode_port_no>
    39b8:	80 93 8a 16 	sts	0x168A, r24	; 0x80168a <_downlinkPayload>
    39bc:	e9 81       	ldd	r30, Y+1	; 0x01
    39be:	f0 e0       	ldi	r31, 0x00	; 0
    39c0:	e1 5f       	subi	r30, 0xF1	; 241
    39c2:	f8 4e       	sbci	r31, 0xE8	; 232
    39c4:	df 01       	movw	r26, r30
    39c6:	0d 90       	ld	r0, X+
    39c8:	00 20       	and	r0, r0
    39ca:	e9 f7       	brne	.-6      	; 0x39c6 <lora_driver_sendUploadMessage+0x130>
    39cc:	11 97       	sbiw	r26, 0x01	; 1
    39ce:	ae 1b       	sub	r26, r30
    39d0:	bf 0b       	sbc	r27, r31
    39d2:	aa 23       	and	r26, r26
    39d4:	91 f0       	breq	.+36     	; 0x39fa <lora_driver_sendUploadMessage+0x164>
    39d6:	bb 27       	eor	r27, r27
    39d8:	cd 01       	movw	r24, r26
    39da:	01 97       	sbiw	r24, 0x01	; 1
    39dc:	9c 01       	movw	r18, r24
    39de:	12 f4       	brpl	.+4      	; 0x39e4 <lora_driver_sendUploadMessage+0x14e>
    39e0:	2f 5f       	subi	r18, 0xFF	; 255
    39e2:	3f 4f       	sbci	r19, 0xFF	; 255
    39e4:	35 95       	asr	r19
    39e6:	27 95       	ror	r18
    39e8:	20 93 8b 16 	sts	0x168B, r18	; 0x80168b <_downlinkPayload+0x1>
    39ec:	af 01       	movw	r20, r30
    39ee:	4f 5f       	subi	r20, 0xFF	; 255
    39f0:	5f 4f       	sbci	r21, 0xFF	; 255
    39f2:	64 e1       	ldi	r22, 0x14	; 20
    39f4:	8c e8       	ldi	r24, 0x8C	; 140
    39f6:	96 e1       	ldi	r25, 0x16	; 22
    39f8:	73 d1       	rcall	.+742    	; 0x3ce0 <decode_hexadecimal_string_bytes>
    39fa:	01 e0       	ldi	r16, 0x01	; 1
    39fc:	10 e0       	ldi	r17, 0x00	; 0
    39fe:	20 e0       	ldi	r18, 0x00	; 0
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	46 e1       	ldi	r20, 0x16	; 22
    3a04:	50 e0       	ldi	r21, 0x00	; 0
    3a06:	6a e8       	ldi	r22, 0x8A	; 138
    3a08:	76 e1       	ldi	r23, 0x16	; 22
    3a0a:	80 91 84 16 	lds	r24, 0x1684	; 0x801684 <_downlinkMessageBuffer>
    3a0e:	90 91 85 16 	lds	r25, 0x1685	; 0x801685 <_downlinkMessageBuffer+0x1>
    3a12:	0e 94 52 08 	call	0x10a4	; 0x10a4 <xStreamBufferSend>
    3a16:	8e e0       	ldi	r24, 0x0E	; 14
    3a18:	03 c0       	rjmp	.+6      	; 0x3a20 <lora_driver_sendUploadMessage+0x18a>
    3a1a:	84 e1       	ldi	r24, 0x14	; 20
    3a1c:	01 c0       	rjmp	.+2      	; 0x3a20 <lora_driver_sendUploadMessage+0x18a>
    3a1e:	80 e0       	ldi	r24, 0x00	; 0
    3a20:	0f 90       	pop	r0
    3a22:	df 91       	pop	r29
    3a24:	cf 91       	pop	r28
    3a26:	1f 91       	pop	r17
    3a28:	0f 91       	pop	r16
    3a2a:	08 95       	ret

00003a2c <lora_driver_setAdaptiveDataRate>:
    3a2c:	81 30       	cpi	r24, 0x01	; 1
    3a2e:	19 f0       	breq	.+6      	; 0x3a36 <lora_driver_setAdaptiveDataRate+0xa>
    3a30:	63 ea       	ldi	r22, 0xA3	; 163
    3a32:	75 e0       	ldi	r23, 0x05	; 5
    3a34:	02 c0       	rjmp	.+4      	; 0x3a3a <lora_driver_setAdaptiveDataRate+0xe>
    3a36:	6c e7       	ldi	r22, 0x7C	; 124
    3a38:	76 e0       	ldi	r23, 0x06	; 6
    3a3a:	87 ea       	ldi	r24, 0xA7	; 167
    3a3c:	95 e0       	ldi	r25, 0x05	; 5
    3a3e:	43 ce       	rjmp	.-890    	; 0x36c6 <_uploadMessageRc>
    3a40:	08 95       	ret

00003a42 <lora_driver_setReceiveDelay>:
    3a42:	9f 93       	push	r25
    3a44:	8f 93       	push	r24
    3a46:	88 ed       	ldi	r24, 0xD8	; 216
    3a48:	95 e0       	ldi	r25, 0x05	; 5
    3a4a:	9f 93       	push	r25
    3a4c:	8f 93       	push	r24
    3a4e:	82 ee       	ldi	r24, 0xE2	; 226
    3a50:	96 e1       	ldi	r25, 0x16	; 22
    3a52:	9f 93       	push	r25
    3a54:	8f 93       	push	r24
    3a56:	0e 94 15 2c 	call	0x582a	; 0x582a <sprintf>
    3a5a:	60 e0       	ldi	r22, 0x00	; 0
    3a5c:	70 e0       	ldi	r23, 0x00	; 0
    3a5e:	82 ee       	ldi	r24, 0xE2	; 226
    3a60:	96 e1       	ldi	r25, 0x16	; 22
    3a62:	31 de       	rcall	.-926    	; 0x36c6 <_uploadMessageRc>
    3a64:	0f 90       	pop	r0
    3a66:	0f 90       	pop	r0
    3a68:	0f 90       	pop	r0
    3a6a:	0f 90       	pop	r0
    3a6c:	0f 90       	pop	r0
    3a6e:	0f 90       	pop	r0
    3a70:	08 95       	ret

00003a72 <lora_driver_configureToEu868>:
    3a72:	2f 92       	push	r2
    3a74:	3f 92       	push	r3
    3a76:	4f 92       	push	r4
    3a78:	5f 92       	push	r5
    3a7a:	6f 92       	push	r6
    3a7c:	7f 92       	push	r7
    3a7e:	8f 92       	push	r8
    3a80:	9f 92       	push	r9
    3a82:	af 92       	push	r10
    3a84:	bf 92       	push	r11
    3a86:	cf 92       	push	r12
    3a88:	df 92       	push	r13
    3a8a:	ef 92       	push	r14
    3a8c:	ff 92       	push	r15
    3a8e:	0f 93       	push	r16
    3a90:	1f 93       	push	r17
    3a92:	cf 93       	push	r28
    3a94:	df 93       	push	r29
    3a96:	cd b7       	in	r28, 0x3d	; 61
    3a98:	de b7       	in	r29, 0x3e	; 62
    3a9a:	a0 97       	sbiw	r28, 0x20	; 32
    3a9c:	0f b6       	in	r0, 0x3f	; 63
    3a9e:	f8 94       	cli
    3aa0:	de bf       	out	0x3e, r29	; 62
    3aa2:	0f be       	out	0x3f, r0	; 63
    3aa4:	cd bf       	out	0x3d, r28	; 61
    3aa6:	65 e0       	ldi	r22, 0x05	; 5
    3aa8:	76 e0       	ldi	r23, 0x06	; 6
    3aaa:	81 e1       	ldi	r24, 0x11	; 17
    3aac:	96 e0       	ldi	r25, 0x06	; 6
    3aae:	3c dd       	rcall	.-1416   	; 0x3528 <_uploadMessage>
    3ab0:	95 dd       	rcall	.-1238   	; 0x35dc <_reply2ReturnCode>
    3ab2:	81 11       	cpse	r24, r1
    3ab4:	a3 c0       	rjmp	.+326    	; 0x3bfc <lora_driver_configureToEu868+0x18a>
    3ab6:	80 e2       	ldi	r24, 0x20	; 32
    3ab8:	e2 e2       	ldi	r30, 0x22	; 34
    3aba:	f2 e0       	ldi	r31, 0x02	; 2
    3abc:	de 01       	movw	r26, r28
    3abe:	11 96       	adiw	r26, 0x01	; 1
    3ac0:	01 90       	ld	r0, Z+
    3ac2:	0d 92       	st	X+, r0
    3ac4:	8a 95       	dec	r24
    3ac6:	e1 f7       	brne	.-8      	; 0x3ac0 <lora_driver_configureToEu868+0x4e>
    3ac8:	9e 01       	movw	r18, r28
    3aca:	2f 5f       	subi	r18, 0xFF	; 255
    3acc:	3f 4f       	sbci	r19, 0xFF	; 255
    3ace:	69 01       	movw	r12, r18
    3ad0:	e1 2c       	mov	r14, r1
    3ad2:	f1 2c       	mov	r15, r1
    3ad4:	0f 2e       	mov	r0, r31
    3ad6:	fd e1       	ldi	r31, 0x1D	; 29
    3ad8:	af 2e       	mov	r10, r31
    3ada:	f6 e0       	ldi	r31, 0x06	; 6
    3adc:	bf 2e       	mov	r11, r31
    3ade:	f0 2d       	mov	r31, r0
    3ae0:	02 ee       	ldi	r16, 0xE2	; 226
    3ae2:	16 e1       	ldi	r17, 0x16	; 22
    3ae4:	0f 2e       	mov	r0, r31
    3ae6:	f6 e3       	ldi	r31, 0x36	; 54
    3ae8:	4f 2e       	mov	r4, r31
    3aea:	f6 e0       	ldi	r31, 0x06	; 6
    3aec:	5f 2e       	mov	r5, r31
    3aee:	f0 2d       	mov	r31, r0
    3af0:	0f 2e       	mov	r0, r31
    3af2:	fd e4       	ldi	r31, 0x4D	; 77
    3af4:	8f 2e       	mov	r8, r31
    3af6:	f6 e0       	ldi	r31, 0x06	; 6
    3af8:	9f 2e       	mov	r9, r31
    3afa:	f0 2d       	mov	r31, r0
    3afc:	0f 2e       	mov	r0, r31
    3afe:	f7 e6       	ldi	r31, 0x67	; 103
    3b00:	6f 2e       	mov	r6, r31
    3b02:	f6 e0       	ldi	r31, 0x06	; 6
    3b04:	7f 2e       	mov	r7, r31
    3b06:	f0 2d       	mov	r31, r0
    3b08:	3e 2c       	mov	r3, r14
    3b0a:	2f 2c       	mov	r2, r15
    3b0c:	ff 92       	push	r15
    3b0e:	ef 92       	push	r14
    3b10:	bf 92       	push	r11
    3b12:	af 92       	push	r10
    3b14:	1f 93       	push	r17
    3b16:	0f 93       	push	r16
    3b18:	0e 94 15 2c 	call	0x582a	; 0x582a <sprintf>
    3b1c:	60 e0       	ldi	r22, 0x00	; 0
    3b1e:	70 e0       	ldi	r23, 0x00	; 0
    3b20:	c8 01       	movw	r24, r16
    3b22:	02 dd       	rcall	.-1532   	; 0x3528 <_uploadMessage>
    3b24:	5b dd       	rcall	.-1354   	; 0x35dc <_reply2ReturnCode>
    3b26:	0f 90       	pop	r0
    3b28:	0f 90       	pop	r0
    3b2a:	0f 90       	pop	r0
    3b2c:	0f 90       	pop	r0
    3b2e:	0f 90       	pop	r0
    3b30:	0f 90       	pop	r0
    3b32:	81 11       	cpse	r24, r1
    3b34:	63 c0       	rjmp	.+198    	; 0x3bfc <lora_driver_configureToEu868+0x18a>
    3b36:	32 e0       	ldi	r19, 0x02	; 2
    3b38:	3e 15       	cp	r19, r14
    3b3a:	e8 f4       	brcc	.+58     	; 0x3b76 <lora_driver_configureToEu868+0x104>
    3b3c:	f6 01       	movw	r30, r12
    3b3e:	83 81       	ldd	r24, Z+3	; 0x03
    3b40:	8f 93       	push	r24
    3b42:	82 81       	ldd	r24, Z+2	; 0x02
    3b44:	8f 93       	push	r24
    3b46:	81 81       	ldd	r24, Z+1	; 0x01
    3b48:	8f 93       	push	r24
    3b4a:	80 81       	ld	r24, Z
    3b4c:	8f 93       	push	r24
    3b4e:	ff 92       	push	r15
    3b50:	ef 92       	push	r14
    3b52:	5f 92       	push	r5
    3b54:	4f 92       	push	r4
    3b56:	1f 93       	push	r17
    3b58:	0f 93       	push	r16
    3b5a:	0e 94 15 2c 	call	0x582a	; 0x582a <sprintf>
    3b5e:	60 e0       	ldi	r22, 0x00	; 0
    3b60:	70 e0       	ldi	r23, 0x00	; 0
    3b62:	c8 01       	movw	r24, r16
    3b64:	e1 dc       	rcall	.-1598   	; 0x3528 <_uploadMessage>
    3b66:	3a dd       	rcall	.-1420   	; 0x35dc <_reply2ReturnCode>
    3b68:	0f b6       	in	r0, 0x3f	; 63
    3b6a:	f8 94       	cli
    3b6c:	de bf       	out	0x3e, r29	; 62
    3b6e:	0f be       	out	0x3f, r0	; 63
    3b70:	cd bf       	out	0x3d, r28	; 61
    3b72:	81 11       	cpse	r24, r1
    3b74:	43 c0       	rjmp	.+134    	; 0x3bfc <lora_driver_configureToEu868+0x18a>
    3b76:	2f 92       	push	r2
    3b78:	3f 92       	push	r3
    3b7a:	9f 92       	push	r9
    3b7c:	8f 92       	push	r8
    3b7e:	1f 93       	push	r17
    3b80:	0f 93       	push	r16
    3b82:	0e 94 15 2c 	call	0x582a	; 0x582a <sprintf>
    3b86:	60 e0       	ldi	r22, 0x00	; 0
    3b88:	70 e0       	ldi	r23, 0x00	; 0
    3b8a:	c8 01       	movw	r24, r16
    3b8c:	cd dc       	rcall	.-1638   	; 0x3528 <_uploadMessage>
    3b8e:	26 dd       	rcall	.-1460   	; 0x35dc <_reply2ReturnCode>
    3b90:	0f 90       	pop	r0
    3b92:	0f 90       	pop	r0
    3b94:	0f 90       	pop	r0
    3b96:	0f 90       	pop	r0
    3b98:	0f 90       	pop	r0
    3b9a:	0f 90       	pop	r0
    3b9c:	81 11       	cpse	r24, r1
    3b9e:	2e c0       	rjmp	.+92     	; 0x3bfc <lora_driver_configureToEu868+0x18a>
    3ba0:	2f 92       	push	r2
    3ba2:	3f 92       	push	r3
    3ba4:	7f 92       	push	r7
    3ba6:	6f 92       	push	r6
    3ba8:	1f 93       	push	r17
    3baa:	0f 93       	push	r16
    3bac:	0e 94 15 2c 	call	0x582a	; 0x582a <sprintf>
    3bb0:	60 e0       	ldi	r22, 0x00	; 0
    3bb2:	70 e0       	ldi	r23, 0x00	; 0
    3bb4:	c8 01       	movw	r24, r16
    3bb6:	b8 dc       	rcall	.-1680   	; 0x3528 <_uploadMessage>
    3bb8:	11 dd       	rcall	.-1502   	; 0x35dc <_reply2ReturnCode>
    3bba:	0f 90       	pop	r0
    3bbc:	0f 90       	pop	r0
    3bbe:	0f 90       	pop	r0
    3bc0:	0f 90       	pop	r0
    3bc2:	0f 90       	pop	r0
    3bc4:	0f 90       	pop	r0
    3bc6:	81 11       	cpse	r24, r1
    3bc8:	19 c0       	rjmp	.+50     	; 0x3bfc <lora_driver_configureToEu868+0x18a>
    3bca:	3f ef       	ldi	r19, 0xFF	; 255
    3bcc:	e3 1a       	sub	r14, r19
    3bce:	f3 0a       	sbc	r15, r19
    3bd0:	84 e0       	ldi	r24, 0x04	; 4
    3bd2:	c8 0e       	add	r12, r24
    3bd4:	d1 1c       	adc	r13, r1
    3bd6:	98 e0       	ldi	r25, 0x08	; 8
    3bd8:	e9 16       	cp	r14, r25
    3bda:	f1 04       	cpc	r15, r1
    3bdc:	09 f0       	breq	.+2      	; 0x3be0 <lora_driver_configureToEu868+0x16e>
    3bde:	94 cf       	rjmp	.-216    	; 0x3b08 <lora_driver_configureToEu868+0x96>
    3be0:	60 e0       	ldi	r22, 0x00	; 0
    3be2:	70 e0       	ldi	r23, 0x00	; 0
    3be4:	8f e7       	ldi	r24, 0x7F	; 127
    3be6:	96 e0       	ldi	r25, 0x06	; 6
    3be8:	9f dc       	rcall	.-1730   	; 0x3528 <_uploadMessage>
    3bea:	f8 dc       	rcall	.-1552   	; 0x35dc <_reply2ReturnCode>
    3bec:	81 11       	cpse	r24, r1
    3bee:	06 c0       	rjmp	.+12     	; 0x3bfc <lora_driver_configureToEu868+0x18a>
    3bf0:	60 e0       	ldi	r22, 0x00	; 0
    3bf2:	70 e0       	ldi	r23, 0x00	; 0
    3bf4:	80 e9       	ldi	r24, 0x90	; 144
    3bf6:	96 e0       	ldi	r25, 0x06	; 6
    3bf8:	97 dc       	rcall	.-1746   	; 0x3528 <_uploadMessage>
    3bfa:	f0 dc       	rcall	.-1568   	; 0x35dc <_reply2ReturnCode>
    3bfc:	a0 96       	adiw	r28, 0x20	; 32
    3bfe:	0f b6       	in	r0, 0x3f	; 63
    3c00:	f8 94       	cli
    3c02:	de bf       	out	0x3e, r29	; 62
    3c04:	0f be       	out	0x3f, r0	; 63
    3c06:	cd bf       	out	0x3d, r28	; 61
    3c08:	df 91       	pop	r29
    3c0a:	cf 91       	pop	r28
    3c0c:	1f 91       	pop	r17
    3c0e:	0f 91       	pop	r16
    3c10:	ff 90       	pop	r15
    3c12:	ef 90       	pop	r14
    3c14:	df 90       	pop	r13
    3c16:	cf 90       	pop	r12
    3c18:	bf 90       	pop	r11
    3c1a:	af 90       	pop	r10
    3c1c:	9f 90       	pop	r9
    3c1e:	8f 90       	pop	r8
    3c20:	7f 90       	pop	r7
    3c22:	6f 90       	pop	r6
    3c24:	5f 90       	pop	r5
    3c26:	4f 90       	pop	r4
    3c28:	3f 90       	pop	r3
    3c2a:	2f 90       	pop	r2
    3c2c:	08 95       	ret

00003c2e <lora_driver_setOtaaIdentity>:
    3c2e:	ef 92       	push	r14
    3c30:	ff 92       	push	r15
    3c32:	0f 93       	push	r16
    3c34:	1f 93       	push	r17
    3c36:	cf 93       	push	r28
    3c38:	df 93       	push	r29
    3c3a:	ec 01       	movw	r28, r24
    3c3c:	8b 01       	movw	r16, r22
    3c3e:	7a 01       	movw	r14, r20
    3c40:	81 e0       	ldi	r24, 0x01	; 1
    3c42:	f4 de       	rcall	.-536    	; 0x3a2c <lora_driver_setAdaptiveDataRate>
    3c44:	81 11       	cpse	r24, r1
    3c46:	0d c0       	rjmp	.+26     	; 0x3c62 <lora_driver_setOtaaIdentity+0x34>
    3c48:	ce 01       	movw	r24, r28
    3c4a:	d4 dd       	rcall	.-1112   	; 0x37f4 <lora_driver_setApplicationIdentifier>
    3c4c:	81 11       	cpse	r24, r1
    3c4e:	09 c0       	rjmp	.+18     	; 0x3c62 <lora_driver_setOtaaIdentity+0x34>
    3c50:	c8 01       	movw	r24, r16
    3c52:	e1 dd       	rcall	.-1086   	; 0x3816 <lora_driver_setApplicationKey>
    3c54:	81 11       	cpse	r24, r1
    3c56:	05 c0       	rjmp	.+10     	; 0x3c62 <lora_driver_setOtaaIdentity+0x34>
    3c58:	c7 01       	movw	r24, r14
    3c5a:	bb dd       	rcall	.-1162   	; 0x37d2 <lora_driver_setDeviceIdentifier>
    3c5c:	81 11       	cpse	r24, r1
    3c5e:	01 c0       	rjmp	.+2      	; 0x3c62 <lora_driver_setOtaaIdentity+0x34>
    3c60:	eb dd       	rcall	.-1066   	; 0x3838 <lora_driver_saveMac>
    3c62:	df 91       	pop	r29
    3c64:	cf 91       	pop	r28
    3c66:	1f 91       	pop	r17
    3c68:	0f 91       	pop	r16
    3c6a:	ff 90       	pop	r15
    3c6c:	ef 90       	pop	r14
    3c6e:	08 95       	ret

00003c70 <lora_driver_mapReturnCodeToText>:
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	fc 01       	movw	r30, r24
    3c74:	ee 0f       	add	r30, r30
    3c76:	ff 1f       	adc	r31, r31
    3c78:	8e 0f       	add	r24, r30
    3c7a:	9f 1f       	adc	r25, r31
    3c7c:	fc 01       	movw	r30, r24
    3c7e:	e7 5a       	subi	r30, 0xA7	; 167
    3c80:	f8 4f       	sbci	r31, 0xF8	; 248
    3c82:	81 81       	ldd	r24, Z+1	; 0x01
    3c84:	92 81       	ldd	r25, Z+2	; 0x02
    3c86:	08 95       	ret

00003c88 <decode_port_no>:
    3c88:	dc 01       	movw	r26, r24
    3c8a:	00 97       	sbiw	r24, 0x00	; 0
    3c8c:	29 f1       	breq	.+74     	; 0x3cd8 <decode_port_no+0x50>
    3c8e:	fb 01       	movw	r30, r22
    3c90:	20 81       	ld	r18, Z
    3c92:	fc 01       	movw	r30, r24
    3c94:	01 90       	ld	r0, Z+
    3c96:	00 20       	and	r0, r0
    3c98:	e9 f7       	brne	.-6      	; 0x3c94 <decode_port_no+0xc>
    3c9a:	31 97       	sbiw	r30, 0x01	; 1
    3c9c:	e8 1b       	sub	r30, r24
    3c9e:	f9 0b       	sbc	r31, r25
    3ca0:	82 2f       	mov	r24, r18
    3ca2:	90 e0       	ldi	r25, 0x00	; 0
    3ca4:	e8 17       	cp	r30, r24
    3ca6:	f9 07       	cpc	r31, r25
    3ca8:	c8 f0       	brcs	.+50     	; 0x3cdc <decode_port_no+0x54>
    3caa:	80 e0       	ldi	r24, 0x00	; 0
    3cac:	08 c0       	rjmp	.+16     	; 0x3cbe <decode_port_no+0x36>
    3cae:	88 0f       	add	r24, r24
    3cb0:	38 2f       	mov	r19, r24
    3cb2:	33 0f       	add	r19, r19
    3cb4:	33 0f       	add	r19, r19
    3cb6:	83 0f       	add	r24, r19
    3cb8:	80 53       	subi	r24, 0x30	; 48
    3cba:	89 0f       	add	r24, r25
    3cbc:	2f 5f       	subi	r18, 0xFF	; 255
    3cbe:	fd 01       	movw	r30, r26
    3cc0:	e2 0f       	add	r30, r18
    3cc2:	f1 1d       	adc	r31, r1
    3cc4:	90 81       	ld	r25, Z
    3cc6:	30 ed       	ldi	r19, 0xD0	; 208
    3cc8:	39 0f       	add	r19, r25
    3cca:	3a 30       	cpi	r19, 0x0A	; 10
    3ccc:	10 f4       	brcc	.+4      	; 0x3cd2 <decode_port_no+0x4a>
    3cce:	91 11       	cpse	r25, r1
    3cd0:	ee cf       	rjmp	.-36     	; 0x3cae <decode_port_no+0x26>
    3cd2:	fb 01       	movw	r30, r22
    3cd4:	20 83       	st	Z, r18
    3cd6:	08 95       	ret
    3cd8:	80 e0       	ldi	r24, 0x00	; 0
    3cda:	08 95       	ret
    3cdc:	80 e0       	ldi	r24, 0x00	; 0
    3cde:	08 95       	ret

00003ce0 <decode_hexadecimal_string_bytes>:
    3ce0:	0f 93       	push	r16
    3ce2:	1f 93       	push	r17
    3ce4:	cf 93       	push	r28
    3ce6:	df 93       	push	r29
    3ce8:	dc 01       	movw	r26, r24
    3cea:	ea 01       	movw	r28, r20
    3cec:	20 97       	sbiw	r28, 0x00	; 0
    3cee:	e1 f1       	breq	.+120    	; 0x3d68 <decode_hexadecimal_string_bytes+0x88>
    3cf0:	fa 01       	movw	r30, r20
    3cf2:	01 90       	ld	r0, Z+
    3cf4:	00 20       	and	r0, r0
    3cf6:	e9 f7       	brne	.-6      	; 0x3cf2 <decode_hexadecimal_string_bytes+0x12>
    3cf8:	31 97       	sbiw	r30, 0x01	; 1
    3cfa:	e4 1b       	sub	r30, r20
    3cfc:	f5 0b       	sbc	r31, r21
    3cfe:	32 97       	sbiw	r30, 0x02	; 2
    3d00:	10 f5       	brcc	.+68     	; 0x3d46 <decode_hexadecimal_string_bytes+0x66>
    3d02:	32 c0       	rjmp	.+100    	; 0x3d68 <decode_hexadecimal_string_bytes+0x88>
    3d04:	8d 01       	movw	r16, r26
    3d06:	04 0f       	add	r16, r20
    3d08:	15 1f       	adc	r17, r21
    3d0a:	30 e0       	ldi	r19, 0x00	; 0
    3d0c:	ae 01       	movw	r20, r28
    3d0e:	42 0f       	add	r20, r18
    3d10:	53 1f       	adc	r21, r19
    3d12:	fa 01       	movw	r30, r20
    3d14:	90 81       	ld	r25, Z
    3d16:	91 34       	cpi	r25, 0x41	; 65
    3d18:	28 f0       	brcs	.+10     	; 0x3d24 <decode_hexadecimal_string_bytes+0x44>
    3d1a:	97 53       	subi	r25, 0x37	; 55
    3d1c:	59 2f       	mov	r21, r25
    3d1e:	52 95       	swap	r21
    3d20:	50 7f       	andi	r21, 0xF0	; 240
    3d22:	03 c0       	rjmp	.+6      	; 0x3d2a <decode_hexadecimal_string_bytes+0x4a>
    3d24:	59 2f       	mov	r21, r25
    3d26:	52 95       	swap	r21
    3d28:	50 7f       	andi	r21, 0xF0	; 240
    3d2a:	2c 0f       	add	r18, r28
    3d2c:	3d 1f       	adc	r19, r29
    3d2e:	f9 01       	movw	r30, r18
    3d30:	91 81       	ldd	r25, Z+1	; 0x01
    3d32:	91 34       	cpi	r25, 0x41	; 65
    3d34:	10 f0       	brcs	.+4      	; 0x3d3a <decode_hexadecimal_string_bytes+0x5a>
    3d36:	97 53       	subi	r25, 0x37	; 55
    3d38:	01 c0       	rjmp	.+2      	; 0x3d3c <decode_hexadecimal_string_bytes+0x5c>
    3d3a:	90 53       	subi	r25, 0x30	; 48
    3d3c:	95 0f       	add	r25, r21
    3d3e:	f8 01       	movw	r30, r16
    3d40:	90 83       	st	Z, r25
    3d42:	8f 5f       	subi	r24, 0xFF	; 255
    3d44:	01 c0       	rjmp	.+2      	; 0x3d48 <decode_hexadecimal_string_bytes+0x68>
    3d46:	80 e0       	ldi	r24, 0x00	; 0
    3d48:	28 2f       	mov	r18, r24
    3d4a:	22 0f       	add	r18, r18
    3d4c:	48 2f       	mov	r20, r24
    3d4e:	50 e0       	ldi	r21, 0x00	; 0
    3d50:	fe 01       	movw	r30, r28
    3d52:	01 90       	ld	r0, Z+
    3d54:	00 20       	and	r0, r0
    3d56:	e9 f7       	brne	.-6      	; 0x3d52 <decode_hexadecimal_string_bytes+0x72>
    3d58:	31 97       	sbiw	r30, 0x01	; 1
    3d5a:	ec 1b       	sub	r30, r28
    3d5c:	fd 0b       	sbc	r31, r29
    3d5e:	4e 17       	cp	r20, r30
    3d60:	5f 07       	cpc	r21, r31
    3d62:	10 f4       	brcc	.+4      	; 0x3d68 <decode_hexadecimal_string_bytes+0x88>
    3d64:	86 13       	cpse	r24, r22
    3d66:	ce cf       	rjmp	.-100    	; 0x3d04 <decode_hexadecimal_string_bytes+0x24>
    3d68:	df 91       	pop	r29
    3d6a:	cf 91       	pop	r28
    3d6c:	1f 91       	pop	r17
    3d6e:	0f 91       	pop	r16
    3d70:	08 95       	ret

00003d72 <_serialCallBack>:
    3d72:	80 91 3f 17 	lds	r24, 0x173F	; 0x80173f <crc_sum.1945>
    3d76:	86 0f       	add	r24, r22
    3d78:	80 93 3f 17 	sts	0x173F, r24	; 0x80173f <crc_sum.1945>
    3d7c:	90 91 42 17 	lds	r25, 0x1742	; 0x801742 <_mh_state>
    3d80:	91 30       	cpi	r25, 0x01	; 1
    3d82:	79 f0       	breq	.+30     	; 0x3da2 <_serialCallBack+0x30>
    3d84:	28 f0       	brcs	.+10     	; 0x3d90 <_serialCallBack+0x1e>
    3d86:	92 30       	cpi	r25, 0x02	; 2
    3d88:	a9 f0       	breq	.+42     	; 0x3db4 <_serialCallBack+0x42>
    3d8a:	93 30       	cpi	r25, 0x03	; 3
    3d8c:	19 f1       	breq	.+70     	; 0x3dd4 <_serialCallBack+0x62>
    3d8e:	08 95       	ret
    3d90:	6f 3f       	cpi	r22, 0xFF	; 255
    3d92:	09 f0       	breq	.+2      	; 0x3d96 <_serialCallBack+0x24>
    3d94:	48 c0       	rjmp	.+144    	; 0x3e26 <_serialCallBack+0xb4>
    3d96:	10 92 3f 17 	sts	0x173F, r1	; 0x80173f <crc_sum.1945>
    3d9a:	81 e0       	ldi	r24, 0x01	; 1
    3d9c:	80 93 42 17 	sts	0x1742, r24	; 0x801742 <_mh_state>
    3da0:	08 95       	ret
    3da2:	66 38       	cpi	r22, 0x86	; 134
    3da4:	09 f0       	breq	.+2      	; 0x3da8 <_serialCallBack+0x36>
    3da6:	3f c0       	rjmp	.+126    	; 0x3e26 <_serialCallBack+0xb4>
    3da8:	10 92 3e 17 	sts	0x173E, r1	; 0x80173e <inDex.1943>
    3dac:	82 e0       	ldi	r24, 0x02	; 2
    3dae:	80 93 42 17 	sts	0x1742, r24	; 0x801742 <_mh_state>
    3db2:	08 95       	ret
    3db4:	e0 91 3e 17 	lds	r30, 0x173E	; 0x80173e <inDex.1943>
    3db8:	81 e0       	ldi	r24, 0x01	; 1
    3dba:	8e 0f       	add	r24, r30
    3dbc:	80 93 3e 17 	sts	0x173E, r24	; 0x80173e <inDex.1943>
    3dc0:	f0 e0       	ldi	r31, 0x00	; 0
    3dc2:	e4 5c       	subi	r30, 0xC4	; 196
    3dc4:	f8 4e       	sbci	r31, 0xE8	; 232
    3dc6:	60 83       	st	Z, r22
    3dc8:	82 30       	cpi	r24, 0x02	; 2
    3dca:	69 f5       	brne	.+90     	; 0x3e26 <_serialCallBack+0xb4>
    3dcc:	83 e0       	ldi	r24, 0x03	; 3
    3dce:	80 93 42 17 	sts	0x1742, r24	; 0x801742 <_mh_state>
    3dd2:	08 95       	ret
    3dd4:	90 91 3e 17 	lds	r25, 0x173E	; 0x80173e <inDex.1943>
    3dd8:	21 e0       	ldi	r18, 0x01	; 1
    3dda:	29 0f       	add	r18, r25
    3ddc:	20 93 3e 17 	sts	0x173E, r18	; 0x80173e <inDex.1943>
    3de0:	96 30       	cpi	r25, 0x06	; 6
    3de2:	09 f5       	brne	.+66     	; 0x3e26 <_serialCallBack+0xb4>
    3de4:	81 11       	cpse	r24, r1
    3de6:	0e c0       	rjmp	.+28     	; 0x3e04 <_serialCallBack+0x92>
    3de8:	ec e3       	ldi	r30, 0x3C	; 60
    3dea:	f7 e1       	ldi	r31, 0x17	; 23
    3dec:	80 81       	ld	r24, Z
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	98 2f       	mov	r25, r24
    3df2:	88 27       	eor	r24, r24
    3df4:	21 81       	ldd	r18, Z+1	; 0x01
    3df6:	82 0f       	add	r24, r18
    3df8:	91 1d       	adc	r25, r1
    3dfa:	90 93 44 17 	sts	0x1744, r25	; 0x801744 <_ppm+0x1>
    3dfe:	80 93 43 17 	sts	0x1743, r24	; 0x801743 <_ppm>
    3e02:	04 c0       	rjmp	.+8      	; 0x3e0c <_serialCallBack+0x9a>
    3e04:	10 92 44 17 	sts	0x1744, r1	; 0x801744 <_ppm+0x1>
    3e08:	10 92 43 17 	sts	0x1743, r1	; 0x801743 <_ppm>
    3e0c:	10 92 42 17 	sts	0x1742, r1	; 0x801742 <_mh_state>
    3e10:	e0 91 40 17 	lds	r30, 0x1740	; 0x801740 <_appCallBack>
    3e14:	f0 91 41 17 	lds	r31, 0x1741	; 0x801741 <_appCallBack+0x1>
    3e18:	30 97       	sbiw	r30, 0x00	; 0
    3e1a:	29 f0       	breq	.+10     	; 0x3e26 <_serialCallBack+0xb4>
    3e1c:	80 91 43 17 	lds	r24, 0x1743	; 0x801743 <_ppm>
    3e20:	90 91 44 17 	lds	r25, 0x1744	; 0x801744 <_ppm+0x1>
    3e24:	19 95       	eicall
    3e26:	08 95       	ret

00003e28 <mh_z19_initialise>:
    3e28:	8f 92       	push	r8
    3e2a:	9f 92       	push	r9
    3e2c:	af 92       	push	r10
    3e2e:	cf 92       	push	r12
    3e30:	ef 92       	push	r14
    3e32:	0f 93       	push	r16
    3e34:	0f 2e       	mov	r0, r31
    3e36:	f9 eb       	ldi	r31, 0xB9	; 185
    3e38:	8f 2e       	mov	r8, r31
    3e3a:	fe e1       	ldi	r31, 0x1E	; 30
    3e3c:	9f 2e       	mov	r9, r31
    3e3e:	f0 2d       	mov	r31, r0
    3e40:	68 94       	set
    3e42:	aa 24       	eor	r10, r10
    3e44:	a4 f8       	bld	r10, 4
    3e46:	68 94       	set
    3e48:	cc 24       	eor	r12, r12
    3e4a:	c4 f8       	bld	r12, 4
    3e4c:	e1 2c       	mov	r14, r1
    3e4e:	00 e0       	ldi	r16, 0x00	; 0
    3e50:	23 e0       	ldi	r18, 0x03	; 3
    3e52:	40 e8       	ldi	r20, 0x80	; 128
    3e54:	55 e2       	ldi	r21, 0x25	; 37
    3e56:	60 e0       	ldi	r22, 0x00	; 0
    3e58:	70 e0       	ldi	r23, 0x00	; 0
    3e5a:	4b d0       	rcall	.+150    	; 0x3ef2 <serial_create>
    3e5c:	90 93 46 17 	sts	0x1746, r25	; 0x801746 <_serial+0x1>
    3e60:	80 93 45 17 	sts	0x1745, r24	; 0x801745 <_serial>
    3e64:	0f 91       	pop	r16
    3e66:	ef 90       	pop	r14
    3e68:	cf 90       	pop	r12
    3e6a:	af 90       	pop	r10
    3e6c:	9f 90       	pop	r9
    3e6e:	8f 90       	pop	r8
    3e70:	08 95       	ret

00003e72 <mh_z19_takeMeassuring>:
    3e72:	cf 93       	push	r28
    3e74:	df 93       	push	r29
    3e76:	cd b7       	in	r28, 0x3d	; 61
    3e78:	de b7       	in	r29, 0x3e	; 62
    3e7a:	29 97       	sbiw	r28, 0x09	; 9
    3e7c:	0f b6       	in	r0, 0x3f	; 63
    3e7e:	f8 94       	cli
    3e80:	de bf       	out	0x3e, r29	; 62
    3e82:	0f be       	out	0x3f, r0	; 63
    3e84:	cd bf       	out	0x3d, r28	; 61
    3e86:	89 e0       	ldi	r24, 0x09	; 9
    3e88:	e2 e4       	ldi	r30, 0x42	; 66
    3e8a:	f2 e0       	ldi	r31, 0x02	; 2
    3e8c:	9e 01       	movw	r18, r28
    3e8e:	2f 5f       	subi	r18, 0xFF	; 255
    3e90:	3f 4f       	sbci	r19, 0xFF	; 255
    3e92:	d9 01       	movw	r26, r18
    3e94:	01 90       	ld	r0, Z+
    3e96:	0d 92       	st	X+, r0
    3e98:	8a 95       	dec	r24
    3e9a:	e1 f7       	brne	.-8      	; 0x3e94 <mh_z19_takeMeassuring+0x22>
    3e9c:	10 92 44 17 	sts	0x1744, r1	; 0x801744 <_ppm+0x1>
    3ea0:	10 92 43 17 	sts	0x1743, r1	; 0x801743 <_ppm>
    3ea4:	80 91 45 17 	lds	r24, 0x1745	; 0x801745 <_serial>
    3ea8:	90 91 46 17 	lds	r25, 0x1746	; 0x801746 <_serial+0x1>
    3eac:	00 97       	sbiw	r24, 0x00	; 0
    3eae:	31 f0       	breq	.+12     	; 0x3ebc <mh_z19_takeMeassuring+0x4a>
    3eb0:	42 2f       	mov	r20, r18
    3eb2:	53 2f       	mov	r21, r19
    3eb4:	69 e0       	ldi	r22, 0x09	; 9
    3eb6:	f0 d0       	rcall	.+480    	; 0x4098 <serial_sendBytes>
    3eb8:	80 e0       	ldi	r24, 0x00	; 0
    3eba:	01 c0       	rjmp	.+2      	; 0x3ebe <mh_z19_takeMeassuring+0x4c>
    3ebc:	82 e0       	ldi	r24, 0x02	; 2
    3ebe:	29 96       	adiw	r28, 0x09	; 9
    3ec0:	0f b6       	in	r0, 0x3f	; 63
    3ec2:	f8 94       	cli
    3ec4:	de bf       	out	0x3e, r29	; 62
    3ec6:	0f be       	out	0x3f, r0	; 63
    3ec8:	cd bf       	out	0x3d, r28	; 61
    3eca:	df 91       	pop	r29
    3ecc:	cf 91       	pop	r28
    3ece:	08 95       	ret

00003ed0 <mh_z19_getCo2Ppm>:
    3ed0:	20 91 43 17 	lds	r18, 0x1743	; 0x801743 <_ppm>
    3ed4:	30 91 44 17 	lds	r19, 0x1744	; 0x801744 <_ppm+0x1>
    3ed8:	21 15       	cp	r18, r1
    3eda:	31 05       	cpc	r19, r1
    3edc:	29 f4       	brne	.+10     	; 0x3ee8 <mh_z19_getCo2Ppm+0x18>
    3ede:	fc 01       	movw	r30, r24
    3ee0:	11 82       	std	Z+1, r1	; 0x01
    3ee2:	10 82       	st	Z, r1
    3ee4:	81 e0       	ldi	r24, 0x01	; 1
    3ee6:	08 95       	ret
    3ee8:	fc 01       	movw	r30, r24
    3eea:	31 83       	std	Z+1, r19	; 0x01
    3eec:	20 83       	st	Z, r18
    3eee:	80 e0       	ldi	r24, 0x00	; 0
    3ef0:	08 95       	ret

00003ef2 <serial_create>:
    3ef2:	2f 92       	push	r2
    3ef4:	3f 92       	push	r3
    3ef6:	4f 92       	push	r4
    3ef8:	5f 92       	push	r5
    3efa:	6f 92       	push	r6
    3efc:	7f 92       	push	r7
    3efe:	8f 92       	push	r8
    3f00:	9f 92       	push	r9
    3f02:	af 92       	push	r10
    3f04:	cf 92       	push	r12
    3f06:	ef 92       	push	r14
    3f08:	ff 92       	push	r15
    3f0a:	0f 93       	push	r16
    3f0c:	1f 93       	push	r17
    3f0e:	cf 93       	push	r28
    3f10:	df 93       	push	r29
    3f12:	cd b7       	in	r28, 0x3d	; 61
    3f14:	de b7       	in	r29, 0x3e	; 62
    3f16:	f8 2e       	mov	r15, r24
    3f18:	2a 01       	movw	r4, r20
    3f1a:	3b 01       	movw	r6, r22
    3f1c:	88 e0       	ldi	r24, 0x08	; 8
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	0e 94 4e 2a 	call	0x549c	; 0x549c <malloc>
    3f24:	8c 01       	movw	r16, r24
    3f26:	8f 2d       	mov	r24, r15
    3f28:	90 e0       	ldi	r25, 0x00	; 0
    3f2a:	fc 01       	movw	r30, r24
    3f2c:	ee 0f       	add	r30, r30
    3f2e:	ff 1f       	adc	r31, r31
    3f30:	e9 5b       	subi	r30, 0xB9	; 185
    3f32:	f8 4e       	sbci	r31, 0xE8	; 232
    3f34:	11 83       	std	Z+1, r17	; 0x01
    3f36:	00 83       	st	Z, r16
    3f38:	01 15       	cp	r16, r1
    3f3a:	11 05       	cpc	r17, r1
    3f3c:	09 f4       	brne	.+2      	; 0x3f40 <serial_create+0x4e>
    3f3e:	6f c0       	rjmp	.+222    	; 0x401e <serial_create+0x12c>
    3f40:	88 0f       	add	r24, r24
    3f42:	99 1f       	adc	r25, r25
    3f44:	fc 01       	movw	r30, r24
    3f46:	e5 5f       	subi	r30, 0xF5	; 245
    3f48:	fd 4f       	sbci	r31, 0xFD	; 253
    3f4a:	80 81       	ld	r24, Z
    3f4c:	91 81       	ldd	r25, Z+1	; 0x01
    3f4e:	d8 01       	movw	r26, r16
    3f50:	8d 93       	st	X+, r24
    3f52:	9c 93       	st	X, r25
    3f54:	8c 2d       	mov	r24, r12
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	88 0f       	add	r24, r24
    3f5a:	99 1f       	adc	r25, r25
    3f5c:	88 0f       	add	r24, r24
    3f5e:	99 1f       	adc	r25, r25
    3f60:	0e 94 4e 2a 	call	0x549c	; 0x549c <malloc>
    3f64:	1c 01       	movw	r2, r24
    3f66:	86 e0       	ldi	r24, 0x06	; 6
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	0e 94 4e 2a 	call	0x549c	; 0x549c <malloc>
    3f6e:	7c 01       	movw	r14, r24
    3f70:	4c 2d       	mov	r20, r12
    3f72:	b1 01       	movw	r22, r2
    3f74:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <fifo_init>
    3f78:	f8 01       	movw	r30, r16
    3f7a:	f5 82       	std	Z+5, r15	; 0x05
    3f7c:	e4 82       	std	Z+4, r14	; 0x04
    3f7e:	8a 2d       	mov	r24, r10
    3f80:	90 e0       	ldi	r25, 0x00	; 0
    3f82:	88 0f       	add	r24, r24
    3f84:	99 1f       	adc	r25, r25
    3f86:	88 0f       	add	r24, r24
    3f88:	99 1f       	adc	r25, r25
    3f8a:	0e 94 4e 2a 	call	0x549c	; 0x549c <malloc>
    3f8e:	1c 01       	movw	r2, r24
    3f90:	86 e0       	ldi	r24, 0x06	; 6
    3f92:	90 e0       	ldi	r25, 0x00	; 0
    3f94:	0e 94 4e 2a 	call	0x549c	; 0x549c <malloc>
    3f98:	7c 01       	movw	r14, r24
    3f9a:	4a 2d       	mov	r20, r10
    3f9c:	b1 01       	movw	r22, r2
    3f9e:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <fifo_init>
    3fa2:	d8 01       	movw	r26, r16
    3fa4:	13 96       	adiw	r26, 0x03	; 3
    3fa6:	fc 92       	st	X, r15
    3fa8:	ee 92       	st	-X, r14
    3faa:	12 97       	sbiw	r26, 0x02	; 2
    3fac:	17 96       	adiw	r26, 0x07	; 7
    3fae:	9c 92       	st	X, r9
    3fb0:	8e 92       	st	-X, r8
    3fb2:	16 97       	sbiw	r26, 0x06	; 6
    3fb4:	ff b6       	in	r15, 0x3f	; 63
    3fb6:	f8 94       	cli
    3fb8:	ed 91       	ld	r30, X+
    3fba:	fc 91       	ld	r31, X
    3fbc:	11 97       	sbiw	r26, 0x01	; 1
    3fbe:	36 97       	sbiw	r30, 0x06	; 6
    3fc0:	80 81       	ld	r24, Z
    3fc2:	82 60       	ori	r24, 0x02	; 2
    3fc4:	80 83       	st	Z, r24
    3fc6:	8d 90       	ld	r8, X+
    3fc8:	9c 90       	ld	r9, X
    3fca:	c3 01       	movw	r24, r6
    3fcc:	b2 01       	movw	r22, r4
    3fce:	0e 94 0b 29 	call	0x5216	; 0x5216 <__floatunsisf>
    3fd2:	20 e0       	ldi	r18, 0x00	; 0
    3fd4:	30 e0       	ldi	r19, 0x00	; 0
    3fd6:	40 e0       	ldi	r20, 0x00	; 0
    3fd8:	51 e4       	ldi	r21, 0x41	; 65
    3fda:	0e 94 9d 29 	call	0x533a	; 0x533a <__mulsf3>
    3fde:	9b 01       	movw	r18, r22
    3fe0:	ac 01       	movw	r20, r24
    3fe2:	60 e0       	ldi	r22, 0x00	; 0
    3fe4:	74 e2       	ldi	r23, 0x24	; 36
    3fe6:	84 e7       	ldi	r24, 0x74	; 116
    3fe8:	9b e4       	ldi	r25, 0x4B	; 75
    3fea:	0e 94 72 28 	call	0x50e4	; 0x50e4 <__divsf3>
    3fee:	20 e0       	ldi	r18, 0x00	; 0
    3ff0:	30 e0       	ldi	r19, 0x00	; 0
    3ff2:	40 e8       	ldi	r20, 0x80	; 128
    3ff4:	5f e3       	ldi	r21, 0x3F	; 63
    3ff6:	0e 94 0d 28 	call	0x501a	; 0x501a <__subsf3>
    3ffa:	0e 94 df 28 	call	0x51be	; 0x51be <__fixunssfsi>
    3ffe:	f4 01       	movw	r30, r8
    4000:	32 97       	sbiw	r30, 0x02	; 2
    4002:	60 83       	st	Z, r22
    4004:	d8 01       	movw	r26, r16
    4006:	ed 91       	ld	r30, X+
    4008:	fc 91       	ld	r31, X
    400a:	11 97       	sbiw	r26, 0x01	; 1
    400c:	35 97       	sbiw	r30, 0x05	; 5
    400e:	88 e9       	ldi	r24, 0x98	; 152
    4010:	80 83       	st	Z, r24
    4012:	ed 91       	ld	r30, X+
    4014:	fc 91       	ld	r31, X
    4016:	34 97       	sbiw	r30, 0x04	; 4
    4018:	86 e0       	ldi	r24, 0x06	; 6
    401a:	80 83       	st	Z, r24
    401c:	ff be       	out	0x3f, r15	; 63
    401e:	c8 01       	movw	r24, r16
    4020:	df 91       	pop	r29
    4022:	cf 91       	pop	r28
    4024:	1f 91       	pop	r17
    4026:	0f 91       	pop	r16
    4028:	ff 90       	pop	r15
    402a:	ef 90       	pop	r14
    402c:	cf 90       	pop	r12
    402e:	af 90       	pop	r10
    4030:	9f 90       	pop	r9
    4032:	8f 90       	pop	r8
    4034:	7f 90       	pop	r7
    4036:	6f 90       	pop	r6
    4038:	5f 90       	pop	r5
    403a:	4f 90       	pop	r4
    403c:	3f 90       	pop	r3
    403e:	2f 90       	pop	r2
    4040:	08 95       	ret

00004042 <serial_sendByte>:
    4042:	cf 93       	push	r28
    4044:	df 93       	push	r29
    4046:	dc 01       	movw	r26, r24
    4048:	89 2b       	or	r24, r25
    404a:	01 f1       	breq	.+64     	; 0x408c <serial_sendByte+0x4a>
    404c:	12 96       	adiw	r26, 0x02	; 2
    404e:	ed 91       	ld	r30, X+
    4050:	fc 91       	ld	r31, X
    4052:	13 97       	sbiw	r26, 0x03	; 3
    4054:	93 81       	ldd	r25, Z+3	; 0x03
    4056:	82 81       	ldd	r24, Z+2	; 0x02
    4058:	25 81       	ldd	r18, Z+5	; 0x05
    405a:	98 1b       	sub	r25, r24
    405c:	92 23       	and	r25, r18
    405e:	84 81       	ldd	r24, Z+4	; 0x04
    4060:	98 17       	cp	r25, r24
    4062:	b1 f0       	breq	.+44     	; 0x4090 <serial_sendByte+0x4e>
    4064:	83 81       	ldd	r24, Z+3	; 0x03
    4066:	26 95       	lsr	r18
    4068:	28 23       	and	r18, r24
    406a:	c0 81       	ld	r28, Z
    406c:	d1 81       	ldd	r29, Z+1	; 0x01
    406e:	c2 0f       	add	r28, r18
    4070:	d1 1d       	adc	r29, r1
    4072:	68 83       	st	Y, r22
    4074:	8f 5f       	subi	r24, 0xFF	; 255
    4076:	95 81       	ldd	r25, Z+5	; 0x05
    4078:	89 23       	and	r24, r25
    407a:	83 83       	std	Z+3, r24	; 0x03
    407c:	ed 91       	ld	r30, X+
    407e:	fc 91       	ld	r31, X
    4080:	35 97       	sbiw	r30, 0x05	; 5
    4082:	80 81       	ld	r24, Z
    4084:	80 62       	ori	r24, 0x20	; 32
    4086:	80 83       	st	Z, r24
    4088:	80 e0       	ldi	r24, 0x00	; 0
    408a:	03 c0       	rjmp	.+6      	; 0x4092 <serial_sendByte+0x50>
    408c:	81 e0       	ldi	r24, 0x01	; 1
    408e:	01 c0       	rjmp	.+2      	; 0x4092 <serial_sendByte+0x50>
    4090:	82 e0       	ldi	r24, 0x02	; 2
    4092:	df 91       	pop	r29
    4094:	cf 91       	pop	r28
    4096:	08 95       	ret

00004098 <serial_sendBytes>:
    4098:	ef 92       	push	r14
    409a:	ff 92       	push	r15
    409c:	0f 93       	push	r16
    409e:	1f 93       	push	r17
    40a0:	cf 93       	push	r28
    40a2:	df 93       	push	r29
    40a4:	7c 01       	movw	r14, r24
    40a6:	00 97       	sbiw	r24, 0x00	; 0
    40a8:	09 f4       	brne	.+2      	; 0x40ac <serial_sendBytes+0x14>
    40aa:	41 c0       	rjmp	.+130    	; 0x412e <serial_sendBytes+0x96>
    40ac:	dc 01       	movw	r26, r24
    40ae:	12 96       	adiw	r26, 0x02	; 2
    40b0:	ed 91       	ld	r30, X+
    40b2:	fc 91       	ld	r31, X
    40b4:	13 97       	sbiw	r26, 0x03	; 3
    40b6:	93 81       	ldd	r25, Z+3	; 0x03
    40b8:	82 81       	ldd	r24, Z+2	; 0x02
    40ba:	98 1b       	sub	r25, r24
    40bc:	85 81       	ldd	r24, Z+5	; 0x05
    40be:	98 23       	and	r25, r24
    40c0:	84 81       	ldd	r24, Z+4	; 0x04
    40c2:	89 1b       	sub	r24, r25
    40c4:	86 17       	cp	r24, r22
    40c6:	a8 f1       	brcs	.+106    	; 0x4132 <serial_sendBytes+0x9a>
    40c8:	66 23       	and	r22, r22
    40ca:	41 f1       	breq	.+80     	; 0x411c <serial_sendBytes+0x84>
    40cc:	84 2f       	mov	r24, r20
    40ce:	95 2f       	mov	r25, r21
    40d0:	dc 01       	movw	r26, r24
    40d2:	61 50       	subi	r22, 0x01	; 1
    40d4:	46 2f       	mov	r20, r22
    40d6:	50 e0       	ldi	r21, 0x00	; 0
    40d8:	4f 5f       	subi	r20, 0xFF	; 255
    40da:	5f 4f       	sbci	r21, 0xFF	; 255
    40dc:	48 0f       	add	r20, r24
    40de:	59 1f       	adc	r21, r25
    40e0:	e7 01       	movw	r28, r14
    40e2:	ea 81       	ldd	r30, Y+2	; 0x02
    40e4:	fb 81       	ldd	r31, Y+3	; 0x03
    40e6:	93 81       	ldd	r25, Z+3	; 0x03
    40e8:	82 81       	ldd	r24, Z+2	; 0x02
    40ea:	25 81       	ldd	r18, Z+5	; 0x05
    40ec:	98 1b       	sub	r25, r24
    40ee:	92 23       	and	r25, r18
    40f0:	84 81       	ldd	r24, Z+4	; 0x04
    40f2:	98 17       	cp	r25, r24
    40f4:	79 f0       	breq	.+30     	; 0x4114 <serial_sendBytes+0x7c>
    40f6:	8c 91       	ld	r24, X
    40f8:	93 81       	ldd	r25, Z+3	; 0x03
    40fa:	26 95       	lsr	r18
    40fc:	29 23       	and	r18, r25
    40fe:	60 81       	ld	r22, Z
    4100:	71 81       	ldd	r23, Z+1	; 0x01
    4102:	8b 01       	movw	r16, r22
    4104:	02 0f       	add	r16, r18
    4106:	11 1d       	adc	r17, r1
    4108:	e8 01       	movw	r28, r16
    410a:	88 83       	st	Y, r24
    410c:	9f 5f       	subi	r25, 0xFF	; 255
    410e:	85 81       	ldd	r24, Z+5	; 0x05
    4110:	98 23       	and	r25, r24
    4112:	93 83       	std	Z+3, r25	; 0x03
    4114:	11 96       	adiw	r26, 0x01	; 1
    4116:	a4 17       	cp	r26, r20
    4118:	b5 07       	cpc	r27, r21
    411a:	11 f7       	brne	.-60     	; 0x40e0 <serial_sendBytes+0x48>
    411c:	d7 01       	movw	r26, r14
    411e:	ed 91       	ld	r30, X+
    4120:	fc 91       	ld	r31, X
    4122:	35 97       	sbiw	r30, 0x05	; 5
    4124:	80 81       	ld	r24, Z
    4126:	80 62       	ori	r24, 0x20	; 32
    4128:	80 83       	st	Z, r24
    412a:	80 e0       	ldi	r24, 0x00	; 0
    412c:	03 c0       	rjmp	.+6      	; 0x4134 <serial_sendBytes+0x9c>
    412e:	81 e0       	ldi	r24, 0x01	; 1
    4130:	01 c0       	rjmp	.+2      	; 0x4134 <serial_sendBytes+0x9c>
    4132:	82 e0       	ldi	r24, 0x02	; 2
    4134:	df 91       	pop	r29
    4136:	cf 91       	pop	r28
    4138:	1f 91       	pop	r17
    413a:	0f 91       	pop	r16
    413c:	ff 90       	pop	r15
    413e:	ef 90       	pop	r14
    4140:	08 95       	ret

00004142 <serial_getByte>:
    4142:	00 97       	sbiw	r24, 0x00	; 0
    4144:	d1 f0       	breq	.+52     	; 0x417a <serial_getByte+0x38>
    4146:	dc 01       	movw	r26, r24
    4148:	14 96       	adiw	r26, 0x04	; 4
    414a:	ed 91       	ld	r30, X+
    414c:	fc 91       	ld	r31, X
    414e:	15 97       	sbiw	r26, 0x05	; 5
    4150:	93 81       	ldd	r25, Z+3	; 0x03
    4152:	82 81       	ldd	r24, Z+2	; 0x02
    4154:	98 17       	cp	r25, r24
    4156:	99 f0       	breq	.+38     	; 0x417e <serial_getByte+0x3c>
    4158:	92 81       	ldd	r25, Z+2	; 0x02
    415a:	85 81       	ldd	r24, Z+5	; 0x05
    415c:	86 95       	lsr	r24
    415e:	89 23       	and	r24, r25
    4160:	a0 81       	ld	r26, Z
    4162:	b1 81       	ldd	r27, Z+1	; 0x01
    4164:	a8 0f       	add	r26, r24
    4166:	b1 1d       	adc	r27, r1
    4168:	8c 91       	ld	r24, X
    416a:	db 01       	movw	r26, r22
    416c:	8c 93       	st	X, r24
    416e:	9f 5f       	subi	r25, 0xFF	; 255
    4170:	85 81       	ldd	r24, Z+5	; 0x05
    4172:	98 23       	and	r25, r24
    4174:	92 83       	std	Z+2, r25	; 0x02
    4176:	80 e0       	ldi	r24, 0x00	; 0
    4178:	08 95       	ret
    417a:	81 e0       	ldi	r24, 0x01	; 1
    417c:	08 95       	ret
    417e:	83 e0       	ldi	r24, 0x03	; 3
    4180:	08 95       	ret

00004182 <__vector_25>:
    4182:	1f 92       	push	r1
    4184:	0f 92       	push	r0
    4186:	0f b6       	in	r0, 0x3f	; 63
    4188:	0f 92       	push	r0
    418a:	11 24       	eor	r1, r1
    418c:	0b b6       	in	r0, 0x3b	; 59
    418e:	0f 92       	push	r0
    4190:	2f 93       	push	r18
    4192:	3f 93       	push	r19
    4194:	4f 93       	push	r20
    4196:	5f 93       	push	r21
    4198:	6f 93       	push	r22
    419a:	7f 93       	push	r23
    419c:	8f 93       	push	r24
    419e:	9f 93       	push	r25
    41a0:	af 93       	push	r26
    41a2:	bf 93       	push	r27
    41a4:	cf 93       	push	r28
    41a6:	df 93       	push	r29
    41a8:	ef 93       	push	r30
    41aa:	ff 93       	push	r31
    41ac:	a0 91 47 17 	lds	r26, 0x1747	; 0x801747 <_ser_handle>
    41b0:	b0 91 48 17 	lds	r27, 0x1748	; 0x801748 <_ser_handle+0x1>
    41b4:	10 97       	sbiw	r26, 0x00	; 0
    41b6:	11 f1       	breq	.+68     	; 0x41fc <__vector_25+0x7a>
    41b8:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    41bc:	14 96       	adiw	r26, 0x04	; 4
    41be:	ed 91       	ld	r30, X+
    41c0:	fc 91       	ld	r31, X
    41c2:	15 97       	sbiw	r26, 0x05	; 5
    41c4:	93 81       	ldd	r25, Z+3	; 0x03
    41c6:	82 81       	ldd	r24, Z+2	; 0x02
    41c8:	25 81       	ldd	r18, Z+5	; 0x05
    41ca:	98 1b       	sub	r25, r24
    41cc:	92 23       	and	r25, r18
    41ce:	84 81       	ldd	r24, Z+4	; 0x04
    41d0:	98 17       	cp	r25, r24
    41d2:	61 f0       	breq	.+24     	; 0x41ec <__vector_25+0x6a>
    41d4:	83 81       	ldd	r24, Z+3	; 0x03
    41d6:	26 95       	lsr	r18
    41d8:	28 23       	and	r18, r24
    41da:	c0 81       	ld	r28, Z
    41dc:	d1 81       	ldd	r29, Z+1	; 0x01
    41de:	c2 0f       	add	r28, r18
    41e0:	d1 1d       	adc	r29, r1
    41e2:	68 83       	st	Y, r22
    41e4:	8f 5f       	subi	r24, 0xFF	; 255
    41e6:	95 81       	ldd	r25, Z+5	; 0x05
    41e8:	89 23       	and	r24, r25
    41ea:	83 83       	std	Z+3, r24	; 0x03
    41ec:	16 96       	adiw	r26, 0x06	; 6
    41ee:	ed 91       	ld	r30, X+
    41f0:	fc 91       	ld	r31, X
    41f2:	17 97       	sbiw	r26, 0x07	; 7
    41f4:	30 97       	sbiw	r30, 0x00	; 0
    41f6:	11 f0       	breq	.+4      	; 0x41fc <__vector_25+0x7a>
    41f8:	cd 01       	movw	r24, r26
    41fa:	19 95       	eicall
    41fc:	ff 91       	pop	r31
    41fe:	ef 91       	pop	r30
    4200:	df 91       	pop	r29
    4202:	cf 91       	pop	r28
    4204:	bf 91       	pop	r27
    4206:	af 91       	pop	r26
    4208:	9f 91       	pop	r25
    420a:	8f 91       	pop	r24
    420c:	7f 91       	pop	r23
    420e:	6f 91       	pop	r22
    4210:	5f 91       	pop	r21
    4212:	4f 91       	pop	r20
    4214:	3f 91       	pop	r19
    4216:	2f 91       	pop	r18
    4218:	0f 90       	pop	r0
    421a:	0b be       	out	0x3b, r0	; 59
    421c:	0f 90       	pop	r0
    421e:	0f be       	out	0x3f, r0	; 63
    4220:	0f 90       	pop	r0
    4222:	1f 90       	pop	r1
    4224:	18 95       	reti

00004226 <__vector_26>:
    4226:	1f 92       	push	r1
    4228:	0f 92       	push	r0
    422a:	0f b6       	in	r0, 0x3f	; 63
    422c:	0f 92       	push	r0
    422e:	11 24       	eor	r1, r1
    4230:	0b b6       	in	r0, 0x3b	; 59
    4232:	0f 92       	push	r0
    4234:	2f 93       	push	r18
    4236:	8f 93       	push	r24
    4238:	9f 93       	push	r25
    423a:	af 93       	push	r26
    423c:	bf 93       	push	r27
    423e:	ef 93       	push	r30
    4240:	ff 93       	push	r31
    4242:	e0 91 47 17 	lds	r30, 0x1747	; 0x801747 <_ser_handle>
    4246:	f0 91 48 17 	lds	r31, 0x1748	; 0x801748 <_ser_handle+0x1>
    424a:	30 97       	sbiw	r30, 0x00	; 0
    424c:	b9 f0       	breq	.+46     	; 0x427c <__vector_26+0x56>
    424e:	02 80       	ldd	r0, Z+2	; 0x02
    4250:	f3 81       	ldd	r31, Z+3	; 0x03
    4252:	e0 2d       	mov	r30, r0
    4254:	93 81       	ldd	r25, Z+3	; 0x03
    4256:	82 81       	ldd	r24, Z+2	; 0x02
    4258:	98 17       	cp	r25, r24
    425a:	b1 f0       	breq	.+44     	; 0x4288 <__vector_26+0x62>
    425c:	92 81       	ldd	r25, Z+2	; 0x02
    425e:	85 81       	ldd	r24, Z+5	; 0x05
    4260:	28 2f       	mov	r18, r24
    4262:	26 95       	lsr	r18
    4264:	29 23       	and	r18, r25
    4266:	a0 81       	ld	r26, Z
    4268:	b1 81       	ldd	r27, Z+1	; 0x01
    426a:	a2 0f       	add	r26, r18
    426c:	b1 1d       	adc	r27, r1
    426e:	2c 91       	ld	r18, X
    4270:	9f 5f       	subi	r25, 0xFF	; 255
    4272:	89 23       	and	r24, r25
    4274:	82 83       	std	Z+2, r24	; 0x02
    4276:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    427a:	0b c0       	rjmp	.+22     	; 0x4292 <__vector_26+0x6c>
    427c:	e1 ec       	ldi	r30, 0xC1	; 193
    427e:	f0 e0       	ldi	r31, 0x00	; 0
    4280:	80 81       	ld	r24, Z
    4282:	8f 7d       	andi	r24, 0xDF	; 223
    4284:	80 83       	st	Z, r24
    4286:	05 c0       	rjmp	.+10     	; 0x4292 <__vector_26+0x6c>
    4288:	e1 ec       	ldi	r30, 0xC1	; 193
    428a:	f0 e0       	ldi	r31, 0x00	; 0
    428c:	80 81       	ld	r24, Z
    428e:	8f 7d       	andi	r24, 0xDF	; 223
    4290:	80 83       	st	Z, r24
    4292:	ff 91       	pop	r31
    4294:	ef 91       	pop	r30
    4296:	bf 91       	pop	r27
    4298:	af 91       	pop	r26
    429a:	9f 91       	pop	r25
    429c:	8f 91       	pop	r24
    429e:	2f 91       	pop	r18
    42a0:	0f 90       	pop	r0
    42a2:	0b be       	out	0x3b, r0	; 59
    42a4:	0f 90       	pop	r0
    42a6:	0f be       	out	0x3f, r0	; 63
    42a8:	0f 90       	pop	r0
    42aa:	1f 90       	pop	r1
    42ac:	18 95       	reti

000042ae <__vector_36>:
    42ae:	1f 92       	push	r1
    42b0:	0f 92       	push	r0
    42b2:	0f b6       	in	r0, 0x3f	; 63
    42b4:	0f 92       	push	r0
    42b6:	11 24       	eor	r1, r1
    42b8:	0b b6       	in	r0, 0x3b	; 59
    42ba:	0f 92       	push	r0
    42bc:	2f 93       	push	r18
    42be:	3f 93       	push	r19
    42c0:	4f 93       	push	r20
    42c2:	5f 93       	push	r21
    42c4:	6f 93       	push	r22
    42c6:	7f 93       	push	r23
    42c8:	8f 93       	push	r24
    42ca:	9f 93       	push	r25
    42cc:	af 93       	push	r26
    42ce:	bf 93       	push	r27
    42d0:	cf 93       	push	r28
    42d2:	df 93       	push	r29
    42d4:	ef 93       	push	r30
    42d6:	ff 93       	push	r31
    42d8:	a0 91 49 17 	lds	r26, 0x1749	; 0x801749 <_ser_handle+0x2>
    42dc:	b0 91 4a 17 	lds	r27, 0x174A	; 0x80174a <_ser_handle+0x3>
    42e0:	10 97       	sbiw	r26, 0x00	; 0
    42e2:	11 f1       	breq	.+68     	; 0x4328 <__vector_36+0x7a>
    42e4:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    42e8:	14 96       	adiw	r26, 0x04	; 4
    42ea:	ed 91       	ld	r30, X+
    42ec:	fc 91       	ld	r31, X
    42ee:	15 97       	sbiw	r26, 0x05	; 5
    42f0:	93 81       	ldd	r25, Z+3	; 0x03
    42f2:	82 81       	ldd	r24, Z+2	; 0x02
    42f4:	25 81       	ldd	r18, Z+5	; 0x05
    42f6:	98 1b       	sub	r25, r24
    42f8:	92 23       	and	r25, r18
    42fa:	84 81       	ldd	r24, Z+4	; 0x04
    42fc:	98 17       	cp	r25, r24
    42fe:	61 f0       	breq	.+24     	; 0x4318 <__vector_36+0x6a>
    4300:	83 81       	ldd	r24, Z+3	; 0x03
    4302:	26 95       	lsr	r18
    4304:	28 23       	and	r18, r24
    4306:	c0 81       	ld	r28, Z
    4308:	d1 81       	ldd	r29, Z+1	; 0x01
    430a:	c2 0f       	add	r28, r18
    430c:	d1 1d       	adc	r29, r1
    430e:	68 83       	st	Y, r22
    4310:	8f 5f       	subi	r24, 0xFF	; 255
    4312:	95 81       	ldd	r25, Z+5	; 0x05
    4314:	89 23       	and	r24, r25
    4316:	83 83       	std	Z+3, r24	; 0x03
    4318:	16 96       	adiw	r26, 0x06	; 6
    431a:	ed 91       	ld	r30, X+
    431c:	fc 91       	ld	r31, X
    431e:	17 97       	sbiw	r26, 0x07	; 7
    4320:	30 97       	sbiw	r30, 0x00	; 0
    4322:	11 f0       	breq	.+4      	; 0x4328 <__vector_36+0x7a>
    4324:	cd 01       	movw	r24, r26
    4326:	19 95       	eicall
    4328:	ff 91       	pop	r31
    432a:	ef 91       	pop	r30
    432c:	df 91       	pop	r29
    432e:	cf 91       	pop	r28
    4330:	bf 91       	pop	r27
    4332:	af 91       	pop	r26
    4334:	9f 91       	pop	r25
    4336:	8f 91       	pop	r24
    4338:	7f 91       	pop	r23
    433a:	6f 91       	pop	r22
    433c:	5f 91       	pop	r21
    433e:	4f 91       	pop	r20
    4340:	3f 91       	pop	r19
    4342:	2f 91       	pop	r18
    4344:	0f 90       	pop	r0
    4346:	0b be       	out	0x3b, r0	; 59
    4348:	0f 90       	pop	r0
    434a:	0f be       	out	0x3f, r0	; 63
    434c:	0f 90       	pop	r0
    434e:	1f 90       	pop	r1
    4350:	18 95       	reti

00004352 <__vector_37>:
    4352:	1f 92       	push	r1
    4354:	0f 92       	push	r0
    4356:	0f b6       	in	r0, 0x3f	; 63
    4358:	0f 92       	push	r0
    435a:	11 24       	eor	r1, r1
    435c:	0b b6       	in	r0, 0x3b	; 59
    435e:	0f 92       	push	r0
    4360:	2f 93       	push	r18
    4362:	8f 93       	push	r24
    4364:	9f 93       	push	r25
    4366:	af 93       	push	r26
    4368:	bf 93       	push	r27
    436a:	ef 93       	push	r30
    436c:	ff 93       	push	r31
    436e:	e0 91 49 17 	lds	r30, 0x1749	; 0x801749 <_ser_handle+0x2>
    4372:	f0 91 4a 17 	lds	r31, 0x174A	; 0x80174a <_ser_handle+0x3>
    4376:	30 97       	sbiw	r30, 0x00	; 0
    4378:	b9 f0       	breq	.+46     	; 0x43a8 <__vector_37+0x56>
    437a:	02 80       	ldd	r0, Z+2	; 0x02
    437c:	f3 81       	ldd	r31, Z+3	; 0x03
    437e:	e0 2d       	mov	r30, r0
    4380:	93 81       	ldd	r25, Z+3	; 0x03
    4382:	82 81       	ldd	r24, Z+2	; 0x02
    4384:	98 17       	cp	r25, r24
    4386:	b1 f0       	breq	.+44     	; 0x43b4 <__vector_37+0x62>
    4388:	92 81       	ldd	r25, Z+2	; 0x02
    438a:	85 81       	ldd	r24, Z+5	; 0x05
    438c:	28 2f       	mov	r18, r24
    438e:	26 95       	lsr	r18
    4390:	29 23       	and	r18, r25
    4392:	a0 81       	ld	r26, Z
    4394:	b1 81       	ldd	r27, Z+1	; 0x01
    4396:	a2 0f       	add	r26, r18
    4398:	b1 1d       	adc	r27, r1
    439a:	2c 91       	ld	r18, X
    439c:	9f 5f       	subi	r25, 0xFF	; 255
    439e:	89 23       	and	r24, r25
    43a0:	82 83       	std	Z+2, r24	; 0x02
    43a2:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    43a6:	0b c0       	rjmp	.+22     	; 0x43be <__vector_37+0x6c>
    43a8:	e9 ec       	ldi	r30, 0xC9	; 201
    43aa:	f0 e0       	ldi	r31, 0x00	; 0
    43ac:	80 81       	ld	r24, Z
    43ae:	8f 7d       	andi	r24, 0xDF	; 223
    43b0:	80 83       	st	Z, r24
    43b2:	05 c0       	rjmp	.+10     	; 0x43be <__vector_37+0x6c>
    43b4:	e9 ec       	ldi	r30, 0xC9	; 201
    43b6:	f0 e0       	ldi	r31, 0x00	; 0
    43b8:	80 81       	ld	r24, Z
    43ba:	8f 7d       	andi	r24, 0xDF	; 223
    43bc:	80 83       	st	Z, r24
    43be:	ff 91       	pop	r31
    43c0:	ef 91       	pop	r30
    43c2:	bf 91       	pop	r27
    43c4:	af 91       	pop	r26
    43c6:	9f 91       	pop	r25
    43c8:	8f 91       	pop	r24
    43ca:	2f 91       	pop	r18
    43cc:	0f 90       	pop	r0
    43ce:	0b be       	out	0x3b, r0	; 59
    43d0:	0f 90       	pop	r0
    43d2:	0f be       	out	0x3f, r0	; 63
    43d4:	0f 90       	pop	r0
    43d6:	1f 90       	pop	r1
    43d8:	18 95       	reti

000043da <__vector_51>:
    43da:	1f 92       	push	r1
    43dc:	0f 92       	push	r0
    43de:	0f b6       	in	r0, 0x3f	; 63
    43e0:	0f 92       	push	r0
    43e2:	11 24       	eor	r1, r1
    43e4:	0b b6       	in	r0, 0x3b	; 59
    43e6:	0f 92       	push	r0
    43e8:	2f 93       	push	r18
    43ea:	3f 93       	push	r19
    43ec:	4f 93       	push	r20
    43ee:	5f 93       	push	r21
    43f0:	6f 93       	push	r22
    43f2:	7f 93       	push	r23
    43f4:	8f 93       	push	r24
    43f6:	9f 93       	push	r25
    43f8:	af 93       	push	r26
    43fa:	bf 93       	push	r27
    43fc:	cf 93       	push	r28
    43fe:	df 93       	push	r29
    4400:	ef 93       	push	r30
    4402:	ff 93       	push	r31
    4404:	a0 91 4b 17 	lds	r26, 0x174B	; 0x80174b <_ser_handle+0x4>
    4408:	b0 91 4c 17 	lds	r27, 0x174C	; 0x80174c <_ser_handle+0x5>
    440c:	10 97       	sbiw	r26, 0x00	; 0
    440e:	11 f1       	breq	.+68     	; 0x4454 <__vector_51+0x7a>
    4410:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4414:	14 96       	adiw	r26, 0x04	; 4
    4416:	ed 91       	ld	r30, X+
    4418:	fc 91       	ld	r31, X
    441a:	15 97       	sbiw	r26, 0x05	; 5
    441c:	93 81       	ldd	r25, Z+3	; 0x03
    441e:	82 81       	ldd	r24, Z+2	; 0x02
    4420:	25 81       	ldd	r18, Z+5	; 0x05
    4422:	98 1b       	sub	r25, r24
    4424:	92 23       	and	r25, r18
    4426:	84 81       	ldd	r24, Z+4	; 0x04
    4428:	98 17       	cp	r25, r24
    442a:	61 f0       	breq	.+24     	; 0x4444 <__vector_51+0x6a>
    442c:	83 81       	ldd	r24, Z+3	; 0x03
    442e:	26 95       	lsr	r18
    4430:	28 23       	and	r18, r24
    4432:	c0 81       	ld	r28, Z
    4434:	d1 81       	ldd	r29, Z+1	; 0x01
    4436:	c2 0f       	add	r28, r18
    4438:	d1 1d       	adc	r29, r1
    443a:	68 83       	st	Y, r22
    443c:	8f 5f       	subi	r24, 0xFF	; 255
    443e:	95 81       	ldd	r25, Z+5	; 0x05
    4440:	89 23       	and	r24, r25
    4442:	83 83       	std	Z+3, r24	; 0x03
    4444:	16 96       	adiw	r26, 0x06	; 6
    4446:	ed 91       	ld	r30, X+
    4448:	fc 91       	ld	r31, X
    444a:	17 97       	sbiw	r26, 0x07	; 7
    444c:	30 97       	sbiw	r30, 0x00	; 0
    444e:	11 f0       	breq	.+4      	; 0x4454 <__vector_51+0x7a>
    4450:	cd 01       	movw	r24, r26
    4452:	19 95       	eicall
    4454:	ff 91       	pop	r31
    4456:	ef 91       	pop	r30
    4458:	df 91       	pop	r29
    445a:	cf 91       	pop	r28
    445c:	bf 91       	pop	r27
    445e:	af 91       	pop	r26
    4460:	9f 91       	pop	r25
    4462:	8f 91       	pop	r24
    4464:	7f 91       	pop	r23
    4466:	6f 91       	pop	r22
    4468:	5f 91       	pop	r21
    446a:	4f 91       	pop	r20
    446c:	3f 91       	pop	r19
    446e:	2f 91       	pop	r18
    4470:	0f 90       	pop	r0
    4472:	0b be       	out	0x3b, r0	; 59
    4474:	0f 90       	pop	r0
    4476:	0f be       	out	0x3f, r0	; 63
    4478:	0f 90       	pop	r0
    447a:	1f 90       	pop	r1
    447c:	18 95       	reti

0000447e <__vector_52>:
    447e:	1f 92       	push	r1
    4480:	0f 92       	push	r0
    4482:	0f b6       	in	r0, 0x3f	; 63
    4484:	0f 92       	push	r0
    4486:	11 24       	eor	r1, r1
    4488:	0b b6       	in	r0, 0x3b	; 59
    448a:	0f 92       	push	r0
    448c:	2f 93       	push	r18
    448e:	8f 93       	push	r24
    4490:	9f 93       	push	r25
    4492:	af 93       	push	r26
    4494:	bf 93       	push	r27
    4496:	ef 93       	push	r30
    4498:	ff 93       	push	r31
    449a:	e0 91 4b 17 	lds	r30, 0x174B	; 0x80174b <_ser_handle+0x4>
    449e:	f0 91 4c 17 	lds	r31, 0x174C	; 0x80174c <_ser_handle+0x5>
    44a2:	30 97       	sbiw	r30, 0x00	; 0
    44a4:	b9 f0       	breq	.+46     	; 0x44d4 <__vector_52+0x56>
    44a6:	02 80       	ldd	r0, Z+2	; 0x02
    44a8:	f3 81       	ldd	r31, Z+3	; 0x03
    44aa:	e0 2d       	mov	r30, r0
    44ac:	93 81       	ldd	r25, Z+3	; 0x03
    44ae:	82 81       	ldd	r24, Z+2	; 0x02
    44b0:	98 17       	cp	r25, r24
    44b2:	b1 f0       	breq	.+44     	; 0x44e0 <__vector_52+0x62>
    44b4:	92 81       	ldd	r25, Z+2	; 0x02
    44b6:	85 81       	ldd	r24, Z+5	; 0x05
    44b8:	28 2f       	mov	r18, r24
    44ba:	26 95       	lsr	r18
    44bc:	29 23       	and	r18, r25
    44be:	a0 81       	ld	r26, Z
    44c0:	b1 81       	ldd	r27, Z+1	; 0x01
    44c2:	a2 0f       	add	r26, r18
    44c4:	b1 1d       	adc	r27, r1
    44c6:	2c 91       	ld	r18, X
    44c8:	9f 5f       	subi	r25, 0xFF	; 255
    44ca:	89 23       	and	r24, r25
    44cc:	82 83       	std	Z+2, r24	; 0x02
    44ce:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    44d2:	0b c0       	rjmp	.+22     	; 0x44ea <__vector_52+0x6c>
    44d4:	e1 ed       	ldi	r30, 0xD1	; 209
    44d6:	f0 e0       	ldi	r31, 0x00	; 0
    44d8:	80 81       	ld	r24, Z
    44da:	8f 7d       	andi	r24, 0xDF	; 223
    44dc:	80 83       	st	Z, r24
    44de:	05 c0       	rjmp	.+10     	; 0x44ea <__vector_52+0x6c>
    44e0:	e1 ed       	ldi	r30, 0xD1	; 209
    44e2:	f0 e0       	ldi	r31, 0x00	; 0
    44e4:	80 81       	ld	r24, Z
    44e6:	8f 7d       	andi	r24, 0xDF	; 223
    44e8:	80 83       	st	Z, r24
    44ea:	ff 91       	pop	r31
    44ec:	ef 91       	pop	r30
    44ee:	bf 91       	pop	r27
    44f0:	af 91       	pop	r26
    44f2:	9f 91       	pop	r25
    44f4:	8f 91       	pop	r24
    44f6:	2f 91       	pop	r18
    44f8:	0f 90       	pop	r0
    44fa:	0b be       	out	0x3b, r0	; 59
    44fc:	0f 90       	pop	r0
    44fe:	0f be       	out	0x3f, r0	; 63
    4500:	0f 90       	pop	r0
    4502:	1f 90       	pop	r1
    4504:	18 95       	reti

00004506 <__vector_54>:
    4506:	1f 92       	push	r1
    4508:	0f 92       	push	r0
    450a:	0f b6       	in	r0, 0x3f	; 63
    450c:	0f 92       	push	r0
    450e:	11 24       	eor	r1, r1
    4510:	0b b6       	in	r0, 0x3b	; 59
    4512:	0f 92       	push	r0
    4514:	2f 93       	push	r18
    4516:	3f 93       	push	r19
    4518:	4f 93       	push	r20
    451a:	5f 93       	push	r21
    451c:	6f 93       	push	r22
    451e:	7f 93       	push	r23
    4520:	8f 93       	push	r24
    4522:	9f 93       	push	r25
    4524:	af 93       	push	r26
    4526:	bf 93       	push	r27
    4528:	cf 93       	push	r28
    452a:	df 93       	push	r29
    452c:	ef 93       	push	r30
    452e:	ff 93       	push	r31
    4530:	a0 91 4d 17 	lds	r26, 0x174D	; 0x80174d <_ser_handle+0x6>
    4534:	b0 91 4e 17 	lds	r27, 0x174E	; 0x80174e <_ser_handle+0x7>
    4538:	10 97       	sbiw	r26, 0x00	; 0
    453a:	11 f1       	breq	.+68     	; 0x4580 <__vector_54+0x7a>
    453c:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4540:	14 96       	adiw	r26, 0x04	; 4
    4542:	ed 91       	ld	r30, X+
    4544:	fc 91       	ld	r31, X
    4546:	15 97       	sbiw	r26, 0x05	; 5
    4548:	93 81       	ldd	r25, Z+3	; 0x03
    454a:	82 81       	ldd	r24, Z+2	; 0x02
    454c:	25 81       	ldd	r18, Z+5	; 0x05
    454e:	98 1b       	sub	r25, r24
    4550:	92 23       	and	r25, r18
    4552:	84 81       	ldd	r24, Z+4	; 0x04
    4554:	98 17       	cp	r25, r24
    4556:	61 f0       	breq	.+24     	; 0x4570 <__vector_54+0x6a>
    4558:	83 81       	ldd	r24, Z+3	; 0x03
    455a:	26 95       	lsr	r18
    455c:	28 23       	and	r18, r24
    455e:	c0 81       	ld	r28, Z
    4560:	d1 81       	ldd	r29, Z+1	; 0x01
    4562:	c2 0f       	add	r28, r18
    4564:	d1 1d       	adc	r29, r1
    4566:	68 83       	st	Y, r22
    4568:	8f 5f       	subi	r24, 0xFF	; 255
    456a:	95 81       	ldd	r25, Z+5	; 0x05
    456c:	89 23       	and	r24, r25
    456e:	83 83       	std	Z+3, r24	; 0x03
    4570:	16 96       	adiw	r26, 0x06	; 6
    4572:	ed 91       	ld	r30, X+
    4574:	fc 91       	ld	r31, X
    4576:	17 97       	sbiw	r26, 0x07	; 7
    4578:	30 97       	sbiw	r30, 0x00	; 0
    457a:	11 f0       	breq	.+4      	; 0x4580 <__vector_54+0x7a>
    457c:	cd 01       	movw	r24, r26
    457e:	19 95       	eicall
    4580:	ff 91       	pop	r31
    4582:	ef 91       	pop	r30
    4584:	df 91       	pop	r29
    4586:	cf 91       	pop	r28
    4588:	bf 91       	pop	r27
    458a:	af 91       	pop	r26
    458c:	9f 91       	pop	r25
    458e:	8f 91       	pop	r24
    4590:	7f 91       	pop	r23
    4592:	6f 91       	pop	r22
    4594:	5f 91       	pop	r21
    4596:	4f 91       	pop	r20
    4598:	3f 91       	pop	r19
    459a:	2f 91       	pop	r18
    459c:	0f 90       	pop	r0
    459e:	0b be       	out	0x3b, r0	; 59
    45a0:	0f 90       	pop	r0
    45a2:	0f be       	out	0x3f, r0	; 63
    45a4:	0f 90       	pop	r0
    45a6:	1f 90       	pop	r1
    45a8:	18 95       	reti

000045aa <__vector_55>:
    45aa:	1f 92       	push	r1
    45ac:	0f 92       	push	r0
    45ae:	0f b6       	in	r0, 0x3f	; 63
    45b0:	0f 92       	push	r0
    45b2:	11 24       	eor	r1, r1
    45b4:	0b b6       	in	r0, 0x3b	; 59
    45b6:	0f 92       	push	r0
    45b8:	2f 93       	push	r18
    45ba:	8f 93       	push	r24
    45bc:	9f 93       	push	r25
    45be:	af 93       	push	r26
    45c0:	bf 93       	push	r27
    45c2:	ef 93       	push	r30
    45c4:	ff 93       	push	r31
    45c6:	e0 91 4d 17 	lds	r30, 0x174D	; 0x80174d <_ser_handle+0x6>
    45ca:	f0 91 4e 17 	lds	r31, 0x174E	; 0x80174e <_ser_handle+0x7>
    45ce:	30 97       	sbiw	r30, 0x00	; 0
    45d0:	b9 f0       	breq	.+46     	; 0x4600 <__vector_55+0x56>
    45d2:	02 80       	ldd	r0, Z+2	; 0x02
    45d4:	f3 81       	ldd	r31, Z+3	; 0x03
    45d6:	e0 2d       	mov	r30, r0
    45d8:	93 81       	ldd	r25, Z+3	; 0x03
    45da:	82 81       	ldd	r24, Z+2	; 0x02
    45dc:	98 17       	cp	r25, r24
    45de:	b1 f0       	breq	.+44     	; 0x460c <__vector_55+0x62>
    45e0:	92 81       	ldd	r25, Z+2	; 0x02
    45e2:	85 81       	ldd	r24, Z+5	; 0x05
    45e4:	28 2f       	mov	r18, r24
    45e6:	26 95       	lsr	r18
    45e8:	29 23       	and	r18, r25
    45ea:	a0 81       	ld	r26, Z
    45ec:	b1 81       	ldd	r27, Z+1	; 0x01
    45ee:	a2 0f       	add	r26, r18
    45f0:	b1 1d       	adc	r27, r1
    45f2:	2c 91       	ld	r18, X
    45f4:	9f 5f       	subi	r25, 0xFF	; 255
    45f6:	89 23       	and	r24, r25
    45f8:	82 83       	std	Z+2, r24	; 0x02
    45fa:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    45fe:	0b c0       	rjmp	.+22     	; 0x4616 <__vector_55+0x6c>
    4600:	e1 e3       	ldi	r30, 0x31	; 49
    4602:	f1 e0       	ldi	r31, 0x01	; 1
    4604:	80 81       	ld	r24, Z
    4606:	8f 7d       	andi	r24, 0xDF	; 223
    4608:	80 83       	st	Z, r24
    460a:	05 c0       	rjmp	.+10     	; 0x4616 <__vector_55+0x6c>
    460c:	e1 e3       	ldi	r30, 0x31	; 49
    460e:	f1 e0       	ldi	r31, 0x01	; 1
    4610:	80 81       	ld	r24, Z
    4612:	8f 7d       	andi	r24, 0xDF	; 223
    4614:	80 83       	st	Z, r24
    4616:	ff 91       	pop	r31
    4618:	ef 91       	pop	r30
    461a:	bf 91       	pop	r27
    461c:	af 91       	pop	r26
    461e:	9f 91       	pop	r25
    4620:	8f 91       	pop	r24
    4622:	2f 91       	pop	r18
    4624:	0f 90       	pop	r0
    4626:	0b be       	out	0x3b, r0	; 59
    4628:	0f 90       	pop	r0
    462a:	0f be       	out	0x3f, r0	; 63
    462c:	0f 90       	pop	r0
    462e:	1f 90       	pop	r1
    4630:	18 95       	reti

00004632 <usart_getchar>:
    4632:	cf 93       	push	r28
    4634:	df 93       	push	r29
    4636:	1f 92       	push	r1
    4638:	cd b7       	in	r28, 0x3d	; 61
    463a:	de b7       	in	r29, 0x3e	; 62
    463c:	be 01       	movw	r22, r28
    463e:	6f 5f       	subi	r22, 0xFF	; 255
    4640:	7f 4f       	sbci	r23, 0xFF	; 255
    4642:	80 91 4f 17 	lds	r24, 0x174F	; 0x80174f <_com_serial_instance>
    4646:	90 91 50 17 	lds	r25, 0x1750	; 0x801750 <_com_serial_instance+0x1>
    464a:	7b dd       	rcall	.-1290   	; 0x4142 <serial_getByte>
    464c:	81 11       	cpse	r24, r1
    464e:	f6 cf       	rjmp	.-20     	; 0x463c <usart_getchar+0xa>
    4650:	89 81       	ldd	r24, Y+1	; 0x01
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	0f 90       	pop	r0
    4656:	df 91       	pop	r29
    4658:	cf 91       	pop	r28
    465a:	08 95       	ret

0000465c <usart_putchar>:
    465c:	68 2f       	mov	r22, r24
    465e:	80 91 4f 17 	lds	r24, 0x174F	; 0x80174f <_com_serial_instance>
    4662:	90 91 50 17 	lds	r25, 0x1750	; 0x801750 <_com_serial_instance+0x1>
    4666:	ed dc       	rcall	.-1574   	; 0x4042 <serial_sendByte>
    4668:	80 e0       	ldi	r24, 0x00	; 0
    466a:	90 e0       	ldi	r25, 0x00	; 0
    466c:	08 95       	ret

0000466e <stdio_initialise>:
    466e:	8f 92       	push	r8
    4670:	9f 92       	push	r9
    4672:	af 92       	push	r10
    4674:	cf 92       	push	r12
    4676:	ef 92       	push	r14
    4678:	0f 93       	push	r16
    467a:	81 2c       	mov	r8, r1
    467c:	91 2c       	mov	r9, r1
    467e:	68 94       	set
    4680:	aa 24       	eor	r10, r10
    4682:	a7 f8       	bld	r10, 7
    4684:	68 94       	set
    4686:	cc 24       	eor	r12, r12
    4688:	c7 f8       	bld	r12, 7
    468a:	e1 2c       	mov	r14, r1
    468c:	00 e0       	ldi	r16, 0x00	; 0
    468e:	23 e0       	ldi	r18, 0x03	; 3
    4690:	40 e0       	ldi	r20, 0x00	; 0
    4692:	51 ee       	ldi	r21, 0xE1	; 225
    4694:	60 e0       	ldi	r22, 0x00	; 0
    4696:	70 e0       	ldi	r23, 0x00	; 0
    4698:	2c dc       	rcall	.-1960   	; 0x3ef2 <serial_create>
    469a:	90 93 50 17 	sts	0x1750, r25	; 0x801750 <_com_serial_instance+0x1>
    469e:	80 93 4f 17 	sts	0x174F, r24	; 0x80174f <_com_serial_instance>
    46a2:	e2 e9       	ldi	r30, 0x92	; 146
    46a4:	f7 e1       	ldi	r31, 0x17	; 23
    46a6:	83 e1       	ldi	r24, 0x13	; 19
    46a8:	92 e0       	ldi	r25, 0x02	; 2
    46aa:	91 83       	std	Z+1, r25	; 0x01
    46ac:	80 83       	st	Z, r24
    46ae:	93 83       	std	Z+3, r25	; 0x03
    46b0:	82 83       	std	Z+2, r24	; 0x02
    46b2:	0f 91       	pop	r16
    46b4:	ef 90       	pop	r14
    46b6:	cf 90       	pop	r12
    46b8:	af 90       	pop	r10
    46ba:	9f 90       	pop	r9
    46bc:	8f 90       	pop	r8
    46be:	08 95       	ret

000046c0 <_turn_off>:
    46c0:	90 e0       	ldi	r25, 0x00	; 0
    46c2:	fc 01       	movw	r30, r24
    46c4:	ee 0f       	add	r30, r30
    46c6:	ff 1f       	adc	r31, r31
    46c8:	e8 0f       	add	r30, r24
    46ca:	f9 1f       	adc	r31, r25
    46cc:	ee 0f       	add	r30, r30
    46ce:	ff 1f       	adc	r31, r31
    46d0:	ef 5a       	subi	r30, 0xAF	; 175
    46d2:	f8 4e       	sbci	r31, 0xE8	; 232
    46d4:	23 81       	ldd	r18, Z+3	; 0x03
    46d6:	21 11       	cpse	r18, r1
    46d8:	1f c0       	rjmp	.+62     	; 0x4718 <_turn_off+0x58>
    46da:	9c 01       	movw	r18, r24
    46dc:	22 0f       	add	r18, r18
    46de:	33 1f       	adc	r19, r19
    46e0:	f9 01       	movw	r30, r18
    46e2:	e8 0f       	add	r30, r24
    46e4:	f9 1f       	adc	r31, r25
    46e6:	ee 0f       	add	r30, r30
    46e8:	ff 1f       	adc	r31, r31
    46ea:	ef 5a       	subi	r30, 0xAF	; 175
    46ec:	f8 4e       	sbci	r31, 0xE8	; 232
    46ee:	a0 81       	ld	r26, Z
    46f0:	b1 81       	ldd	r27, Z+1	; 0x01
    46f2:	4c 91       	ld	r20, X
    46f4:	f9 01       	movw	r30, r18
    46f6:	e8 0f       	add	r30, r24
    46f8:	f9 1f       	adc	r31, r25
    46fa:	ee 0f       	add	r30, r30
    46fc:	ff 1f       	adc	r31, r31
    46fe:	ef 5a       	subi	r30, 0xAF	; 175
    4700:	f8 4e       	sbci	r31, 0xE8	; 232
    4702:	81 e0       	ldi	r24, 0x01	; 1
    4704:	90 e0       	ldi	r25, 0x00	; 0
    4706:	02 80       	ldd	r0, Z+2	; 0x02
    4708:	02 c0       	rjmp	.+4      	; 0x470e <_turn_off+0x4e>
    470a:	88 0f       	add	r24, r24
    470c:	99 1f       	adc	r25, r25
    470e:	0a 94       	dec	r0
    4710:	e2 f7       	brpl	.-8      	; 0x470a <_turn_off+0x4a>
    4712:	84 2b       	or	r24, r20
    4714:	8c 93       	st	X, r24
    4716:	08 95       	ret
    4718:	fc 01       	movw	r30, r24
    471a:	ee 0f       	add	r30, r30
    471c:	ff 1f       	adc	r31, r31
    471e:	df 01       	movw	r26, r30
    4720:	a8 0f       	add	r26, r24
    4722:	b9 1f       	adc	r27, r25
    4724:	aa 0f       	add	r26, r26
    4726:	bb 1f       	adc	r27, r27
    4728:	af 5a       	subi	r26, 0xAF	; 175
    472a:	b8 4e       	sbci	r27, 0xE8	; 232
    472c:	0d 90       	ld	r0, X+
    472e:	bc 91       	ld	r27, X
    4730:	a0 2d       	mov	r26, r0
    4732:	2c 91       	ld	r18, X
    4734:	e8 0f       	add	r30, r24
    4736:	f9 1f       	adc	r31, r25
    4738:	ee 0f       	add	r30, r30
    473a:	ff 1f       	adc	r31, r31
    473c:	ef 5a       	subi	r30, 0xAF	; 175
    473e:	f8 4e       	sbci	r31, 0xE8	; 232
    4740:	81 e0       	ldi	r24, 0x01	; 1
    4742:	90 e0       	ldi	r25, 0x00	; 0
    4744:	02 80       	ldd	r0, Z+2	; 0x02
    4746:	02 c0       	rjmp	.+4      	; 0x474c <_turn_off+0x8c>
    4748:	88 0f       	add	r24, r24
    474a:	99 1f       	adc	r25, r25
    474c:	0a 94       	dec	r0
    474e:	e2 f7       	brpl	.-8      	; 0x4748 <_turn_off+0x88>
    4750:	80 95       	com	r24
    4752:	82 23       	and	r24, r18
    4754:	8c 93       	st	X, r24
    4756:	08 95       	ret

00004758 <_turn_on>:
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	fc 01       	movw	r30, r24
    475c:	ee 0f       	add	r30, r30
    475e:	ff 1f       	adc	r31, r31
    4760:	e8 0f       	add	r30, r24
    4762:	f9 1f       	adc	r31, r25
    4764:	ee 0f       	add	r30, r30
    4766:	ff 1f       	adc	r31, r31
    4768:	ef 5a       	subi	r30, 0xAF	; 175
    476a:	f8 4e       	sbci	r31, 0xE8	; 232
    476c:	23 81       	ldd	r18, Z+3	; 0x03
    476e:	21 11       	cpse	r18, r1
    4770:	20 c0       	rjmp	.+64     	; 0x47b2 <_turn_on+0x5a>
    4772:	9c 01       	movw	r18, r24
    4774:	22 0f       	add	r18, r18
    4776:	33 1f       	adc	r19, r19
    4778:	f9 01       	movw	r30, r18
    477a:	e8 0f       	add	r30, r24
    477c:	f9 1f       	adc	r31, r25
    477e:	ee 0f       	add	r30, r30
    4780:	ff 1f       	adc	r31, r31
    4782:	ef 5a       	subi	r30, 0xAF	; 175
    4784:	f8 4e       	sbci	r31, 0xE8	; 232
    4786:	a0 81       	ld	r26, Z
    4788:	b1 81       	ldd	r27, Z+1	; 0x01
    478a:	4c 91       	ld	r20, X
    478c:	f9 01       	movw	r30, r18
    478e:	e8 0f       	add	r30, r24
    4790:	f9 1f       	adc	r31, r25
    4792:	ee 0f       	add	r30, r30
    4794:	ff 1f       	adc	r31, r31
    4796:	ef 5a       	subi	r30, 0xAF	; 175
    4798:	f8 4e       	sbci	r31, 0xE8	; 232
    479a:	81 e0       	ldi	r24, 0x01	; 1
    479c:	90 e0       	ldi	r25, 0x00	; 0
    479e:	02 80       	ldd	r0, Z+2	; 0x02
    47a0:	02 c0       	rjmp	.+4      	; 0x47a6 <_turn_on+0x4e>
    47a2:	88 0f       	add	r24, r24
    47a4:	99 1f       	adc	r25, r25
    47a6:	0a 94       	dec	r0
    47a8:	e2 f7       	brpl	.-8      	; 0x47a2 <_turn_on+0x4a>
    47aa:	80 95       	com	r24
    47ac:	84 23       	and	r24, r20
    47ae:	8c 93       	st	X, r24
    47b0:	08 95       	ret
    47b2:	fc 01       	movw	r30, r24
    47b4:	ee 0f       	add	r30, r30
    47b6:	ff 1f       	adc	r31, r31
    47b8:	df 01       	movw	r26, r30
    47ba:	a8 0f       	add	r26, r24
    47bc:	b9 1f       	adc	r27, r25
    47be:	aa 0f       	add	r26, r26
    47c0:	bb 1f       	adc	r27, r27
    47c2:	af 5a       	subi	r26, 0xAF	; 175
    47c4:	b8 4e       	sbci	r27, 0xE8	; 232
    47c6:	0d 90       	ld	r0, X+
    47c8:	bc 91       	ld	r27, X
    47ca:	a0 2d       	mov	r26, r0
    47cc:	2c 91       	ld	r18, X
    47ce:	e8 0f       	add	r30, r24
    47d0:	f9 1f       	adc	r31, r25
    47d2:	ee 0f       	add	r30, r30
    47d4:	ff 1f       	adc	r31, r31
    47d6:	ef 5a       	subi	r30, 0xAF	; 175
    47d8:	f8 4e       	sbci	r31, 0xE8	; 232
    47da:	81 e0       	ldi	r24, 0x01	; 1
    47dc:	90 e0       	ldi	r25, 0x00	; 0
    47de:	02 80       	ldd	r0, Z+2	; 0x02
    47e0:	02 c0       	rjmp	.+4      	; 0x47e6 <_turn_on+0x8e>
    47e2:	88 0f       	add	r24, r24
    47e4:	99 1f       	adc	r25, r25
    47e6:	0a 94       	dec	r0
    47e8:	e2 f7       	brpl	.-8      	; 0x47e2 <_turn_on+0x8a>
    47ea:	82 2b       	or	r24, r18
    47ec:	8c 93       	st	X, r24
    47ee:	08 95       	ret

000047f0 <_hal_led_task>:
    47f0:	cc 24       	eor	r12, r12
    47f2:	c3 94       	inc	r12
    47f4:	d1 2c       	mov	r13, r1
    47f6:	68 94       	set
    47f8:	bb 24       	eor	r11, r11
    47fa:	b2 f8       	bld	r11, 2
    47fc:	c1 e5       	ldi	r28, 0x51	; 81
    47fe:	d7 e1       	ldi	r29, 0x17	; 23
    4800:	10 e0       	ldi	r17, 0x00	; 0
    4802:	8c 81       	ldd	r24, Y+4	; 0x04
    4804:	81 30       	cpi	r24, 0x01	; 1
    4806:	81 f0       	breq	.+32     	; 0x4828 <_hal_led_task+0x38>
    4808:	18 f1       	brcs	.+70     	; 0x4850 <_hal_led_task+0x60>
    480a:	82 30       	cpi	r24, 0x02	; 2
    480c:	61 f5       	brne	.+88     	; 0x4866 <_hal_led_task+0x76>
    480e:	e8 81       	ld	r30, Y
    4810:	f9 81       	ldd	r31, Y+1	; 0x01
    4812:	20 81       	ld	r18, Z
    4814:	c6 01       	movw	r24, r12
    4816:	0a 80       	ldd	r0, Y+2	; 0x02
    4818:	02 c0       	rjmp	.+4      	; 0x481e <_hal_led_task+0x2e>
    481a:	88 0f       	add	r24, r24
    481c:	99 1f       	adc	r25, r25
    481e:	0a 94       	dec	r0
    4820:	e2 f7       	brpl	.-8      	; 0x481a <_hal_led_task+0x2a>
    4822:	82 27       	eor	r24, r18
    4824:	80 83       	st	Z, r24
    4826:	1f c0       	rjmp	.+62     	; 0x4866 <_hal_led_task+0x76>
    4828:	8d 81       	ldd	r24, Y+5	; 0x05
    482a:	8f 5f       	subi	r24, 0xFF	; 255
    482c:	86 30       	cpi	r24, 0x06	; 6
    482e:	10 f4       	brcc	.+4      	; 0x4834 <_hal_led_task+0x44>
    4830:	8d 83       	std	Y+5, r24	; 0x05
    4832:	19 c0       	rjmp	.+50     	; 0x4866 <_hal_led_task+0x76>
    4834:	1d 82       	std	Y+5, r1	; 0x05
    4836:	e8 81       	ld	r30, Y
    4838:	f9 81       	ldd	r31, Y+1	; 0x01
    483a:	20 81       	ld	r18, Z
    483c:	c6 01       	movw	r24, r12
    483e:	0a 80       	ldd	r0, Y+2	; 0x02
    4840:	02 c0       	rjmp	.+4      	; 0x4846 <_hal_led_task+0x56>
    4842:	88 0f       	add	r24, r24
    4844:	99 1f       	adc	r25, r25
    4846:	0a 94       	dec	r0
    4848:	e2 f7       	brpl	.-8      	; 0x4842 <_hal_led_task+0x52>
    484a:	82 27       	eor	r24, r18
    484c:	80 83       	st	Z, r24
    484e:	0b c0       	rjmp	.+22     	; 0x4866 <_hal_led_task+0x76>
    4850:	0d 81       	ldd	r16, Y+5	; 0x05
    4852:	00 23       	and	r16, r16
    4854:	29 f0       	breq	.+10     	; 0x4860 <_hal_led_task+0x70>
    4856:	81 2f       	mov	r24, r17
    4858:	7f df       	rcall	.-258    	; 0x4758 <_turn_on>
    485a:	01 50       	subi	r16, 0x01	; 1
    485c:	0d 83       	std	Y+5, r16	; 0x05
    485e:	03 c0       	rjmp	.+6      	; 0x4866 <_hal_led_task+0x76>
    4860:	bc 82       	std	Y+4, r11	; 0x04
    4862:	81 2f       	mov	r24, r17
    4864:	2d df       	rcall	.-422    	; 0x46c0 <_turn_off>
    4866:	1f 5f       	subi	r17, 0xFF	; 255
    4868:	26 96       	adiw	r28, 0x06	; 6
    486a:	14 30       	cpi	r17, 0x04	; 4
    486c:	51 f6       	brne	.-108    	; 0x4802 <_hal_led_task+0x12>
    486e:	6c e0       	ldi	r22, 0x0C	; 12
    4870:	70 e0       	ldi	r23, 0x00	; 0
    4872:	80 e0       	ldi	r24, 0x00	; 0
    4874:	90 e0       	ldi	r25, 0x00	; 0
    4876:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <vTaskDelay>
    487a:	c0 cf       	rjmp	.-128    	; 0x47fc <_hal_led_task+0xc>

0000487c <status_leds_initialise>:
    487c:	ef 92       	push	r14
    487e:	ff 92       	push	r15
    4880:	0f 93       	push	r16
    4882:	1f 93       	push	r17
    4884:	cf 93       	push	r28
    4886:	df 93       	push	r29
    4888:	08 2f       	mov	r16, r24
    488a:	80 e4       	ldi	r24, 0x40	; 64
    488c:	87 b9       	out	0x07, r24	; 7
    488e:	c1 e5       	ldi	r28, 0x51	; 81
    4890:	d7 e1       	ldi	r29, 0x17	; 23
    4892:	0f 2e       	mov	r0, r31
    4894:	f8 e2       	ldi	r31, 0x28	; 40
    4896:	ef 2e       	mov	r14, r31
    4898:	f1 2c       	mov	r15, r1
    489a:	f0 2d       	mov	r31, r0
    489c:	f9 82       	std	Y+1, r15	; 0x01
    489e:	e8 82       	st	Y, r14
    48a0:	86 e0       	ldi	r24, 0x06	; 6
    48a2:	8a 83       	std	Y+2, r24	; 0x02
    48a4:	1b 82       	std	Y+3, r1	; 0x03
    48a6:	14 e0       	ldi	r17, 0x04	; 4
    48a8:	1c 83       	std	Y+4, r17	; 0x04
    48aa:	80 e0       	ldi	r24, 0x00	; 0
    48ac:	09 df       	rcall	.-494    	; 0x46c0 <_turn_off>
    48ae:	80 e8       	ldi	r24, 0x80	; 128
    48b0:	87 b9       	out	0x07, r24	; 7
    48b2:	ff 82       	std	Y+7, r15	; 0x07
    48b4:	ee 82       	std	Y+6, r14	; 0x06
    48b6:	87 e0       	ldi	r24, 0x07	; 7
    48b8:	88 87       	std	Y+8, r24	; 0x08
    48ba:	19 86       	std	Y+9, r1	; 0x09
    48bc:	1a 87       	std	Y+10, r17	; 0x0a
    48be:	81 e0       	ldi	r24, 0x01	; 1
    48c0:	ff de       	rcall	.-514    	; 0x46c0 <_turn_off>
    48c2:	80 e2       	ldi	r24, 0x20	; 32
    48c4:	83 bb       	out	0x13, r24	; 19
    48c6:	84 e3       	ldi	r24, 0x34	; 52
    48c8:	90 e0       	ldi	r25, 0x00	; 0
    48ca:	9d 87       	std	Y+13, r25	; 0x0d
    48cc:	8c 87       	std	Y+12, r24	; 0x0c
    48ce:	85 e0       	ldi	r24, 0x05	; 5
    48d0:	8e 87       	std	Y+14, r24	; 0x0e
    48d2:	1f 86       	std	Y+15, r1	; 0x0f
    48d4:	18 8b       	std	Y+16, r17	; 0x10
    48d6:	82 e0       	ldi	r24, 0x02	; 2
    48d8:	f3 de       	rcall	.-538    	; 0x46c0 <_turn_off>
    48da:	80 e1       	ldi	r24, 0x10	; 16
    48dc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    48e0:	82 e0       	ldi	r24, 0x02	; 2
    48e2:	91 e0       	ldi	r25, 0x01	; 1
    48e4:	9b 8b       	std	Y+19, r25	; 0x13
    48e6:	8a 8b       	std	Y+18, r24	; 0x12
    48e8:	1c 8b       	std	Y+20, r17	; 0x14
    48ea:	1d 8a       	std	Y+21, r1	; 0x15
    48ec:	1e 8b       	std	Y+22, r17	; 0x16
    48ee:	83 e0       	ldi	r24, 0x03	; 3
    48f0:	e7 de       	rcall	.-562    	; 0x46c0 <_turn_off>
    48f2:	e1 2c       	mov	r14, r1
    48f4:	f1 2c       	mov	r15, r1
    48f6:	20 e0       	ldi	r18, 0x00	; 0
    48f8:	30 e0       	ldi	r19, 0x00	; 0
    48fa:	40 ec       	ldi	r20, 0xC0	; 192
    48fc:	50 e0       	ldi	r21, 0x00	; 0
    48fe:	6c e8       	ldi	r22, 0x8C	; 140
    4900:	77 e0       	ldi	r23, 0x07	; 7
    4902:	88 ef       	ldi	r24, 0xF8	; 248
    4904:	93 e2       	ldi	r25, 0x23	; 35
    4906:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskCreate>
    490a:	df 91       	pop	r29
    490c:	cf 91       	pop	r28
    490e:	1f 91       	pop	r17
    4910:	0f 91       	pop	r16
    4912:	ff 90       	pop	r15
    4914:	ef 90       	pop	r14
    4916:	08 95       	ret

00004918 <status_leds_slowBlink>:
    4918:	cf 93       	push	r28
    491a:	df 93       	push	r29
    491c:	90 e0       	ldi	r25, 0x00	; 0
    491e:	fc 01       	movw	r30, r24
    4920:	ee 0f       	add	r30, r30
    4922:	ff 1f       	adc	r31, r31
    4924:	df 01       	movw	r26, r30
    4926:	a8 0f       	add	r26, r24
    4928:	b9 1f       	adc	r27, r25
    492a:	aa 0f       	add	r26, r26
    492c:	bb 1f       	adc	r27, r27
    492e:	af 5a       	subi	r26, 0xAF	; 175
    4930:	b8 4e       	sbci	r27, 0xE8	; 232
    4932:	cd 91       	ld	r28, X+
    4934:	dc 91       	ld	r29, X
    4936:	11 97       	sbiw	r26, 0x01	; 1
    4938:	48 81       	ld	r20, Y
    493a:	21 e0       	ldi	r18, 0x01	; 1
    493c:	30 e0       	ldi	r19, 0x00	; 0
    493e:	12 96       	adiw	r26, 0x02	; 2
    4940:	0c 90       	ld	r0, X
    4942:	12 97       	sbiw	r26, 0x02	; 2
    4944:	02 c0       	rjmp	.+4      	; 0x494a <status_leds_slowBlink+0x32>
    4946:	22 0f       	add	r18, r18
    4948:	33 1f       	adc	r19, r19
    494a:	0a 94       	dec	r0
    494c:	e2 f7       	brpl	.-8      	; 0x4946 <status_leds_slowBlink+0x2e>
    494e:	24 27       	eor	r18, r20
    4950:	28 83       	st	Y, r18
    4952:	fd 01       	movw	r30, r26
    4954:	81 e0       	ldi	r24, 0x01	; 1
    4956:	84 83       	std	Z+4, r24	; 0x04
    4958:	df 91       	pop	r29
    495a:	cf 91       	pop	r28
    495c:	08 95       	ret

0000495e <status_leds_fastBlink>:
    495e:	cf 93       	push	r28
    4960:	df 93       	push	r29
    4962:	90 e0       	ldi	r25, 0x00	; 0
    4964:	fc 01       	movw	r30, r24
    4966:	ee 0f       	add	r30, r30
    4968:	ff 1f       	adc	r31, r31
    496a:	df 01       	movw	r26, r30
    496c:	a8 0f       	add	r26, r24
    496e:	b9 1f       	adc	r27, r25
    4970:	aa 0f       	add	r26, r26
    4972:	bb 1f       	adc	r27, r27
    4974:	af 5a       	subi	r26, 0xAF	; 175
    4976:	b8 4e       	sbci	r27, 0xE8	; 232
    4978:	cd 91       	ld	r28, X+
    497a:	dc 91       	ld	r29, X
    497c:	11 97       	sbiw	r26, 0x01	; 1
    497e:	48 81       	ld	r20, Y
    4980:	21 e0       	ldi	r18, 0x01	; 1
    4982:	30 e0       	ldi	r19, 0x00	; 0
    4984:	12 96       	adiw	r26, 0x02	; 2
    4986:	0c 90       	ld	r0, X
    4988:	12 97       	sbiw	r26, 0x02	; 2
    498a:	02 c0       	rjmp	.+4      	; 0x4990 <status_leds_fastBlink+0x32>
    498c:	22 0f       	add	r18, r18
    498e:	33 1f       	adc	r19, r19
    4990:	0a 94       	dec	r0
    4992:	e2 f7       	brpl	.-8      	; 0x498c <status_leds_fastBlink+0x2e>
    4994:	24 27       	eor	r18, r20
    4996:	28 83       	st	Y, r18
    4998:	fd 01       	movw	r30, r26
    499a:	82 e0       	ldi	r24, 0x02	; 2
    499c:	84 83       	std	Z+4, r24	; 0x04
    499e:	df 91       	pop	r29
    49a0:	cf 91       	pop	r28
    49a2:	08 95       	ret

000049a4 <status_leds_ledOn>:
    49a4:	28 2f       	mov	r18, r24
    49a6:	30 e0       	ldi	r19, 0x00	; 0
    49a8:	f9 01       	movw	r30, r18
    49aa:	ee 0f       	add	r30, r30
    49ac:	ff 1f       	adc	r31, r31
    49ae:	e2 0f       	add	r30, r18
    49b0:	f3 1f       	adc	r31, r19
    49b2:	ee 0f       	add	r30, r30
    49b4:	ff 1f       	adc	r31, r31
    49b6:	ef 5a       	subi	r30, 0xAF	; 175
    49b8:	f8 4e       	sbci	r31, 0xE8	; 232
    49ba:	93 e0       	ldi	r25, 0x03	; 3
    49bc:	94 83       	std	Z+4, r25	; 0x04
    49be:	cc ce       	rjmp	.-616    	; 0x4758 <_turn_on>
    49c0:	08 95       	ret

000049c2 <status_leds_ledOff>:
    49c2:	28 2f       	mov	r18, r24
    49c4:	30 e0       	ldi	r19, 0x00	; 0
    49c6:	f9 01       	movw	r30, r18
    49c8:	ee 0f       	add	r30, r30
    49ca:	ff 1f       	adc	r31, r31
    49cc:	e2 0f       	add	r30, r18
    49ce:	f3 1f       	adc	r31, r19
    49d0:	ee 0f       	add	r30, r30
    49d2:	ff 1f       	adc	r31, r31
    49d4:	ef 5a       	subi	r30, 0xAF	; 175
    49d6:	f8 4e       	sbci	r31, 0xE8	; 232
    49d8:	94 e0       	ldi	r25, 0x04	; 4
    49da:	94 83       	std	Z+4, r25	; 0x04
    49dc:	71 ce       	rjmp	.-798    	; 0x46c0 <_turn_off>
    49de:	08 95       	ret

000049e0 <status_leds_longPuls>:
    49e0:	90 e0       	ldi	r25, 0x00	; 0
    49e2:	fc 01       	movw	r30, r24
    49e4:	ee 0f       	add	r30, r30
    49e6:	ff 1f       	adc	r31, r31
    49e8:	df 01       	movw	r26, r30
    49ea:	a8 0f       	add	r26, r24
    49ec:	b9 1f       	adc	r27, r25
    49ee:	aa 0f       	add	r26, r26
    49f0:	bb 1f       	adc	r27, r27
    49f2:	af 5a       	subi	r26, 0xAF	; 175
    49f4:	b8 4e       	sbci	r27, 0xE8	; 232
    49f6:	26 e0       	ldi	r18, 0x06	; 6
    49f8:	15 96       	adiw	r26, 0x05	; 5
    49fa:	2c 93       	st	X, r18
    49fc:	15 97       	sbiw	r26, 0x05	; 5
    49fe:	fd 01       	movw	r30, r26
    4a00:	14 82       	std	Z+4, r1	; 0x04
    4a02:	08 95       	ret

00004a04 <status_leds_shortPuls>:
    4a04:	90 e0       	ldi	r25, 0x00	; 0
    4a06:	fc 01       	movw	r30, r24
    4a08:	ee 0f       	add	r30, r30
    4a0a:	ff 1f       	adc	r31, r31
    4a0c:	df 01       	movw	r26, r30
    4a0e:	a8 0f       	add	r26, r24
    4a10:	b9 1f       	adc	r27, r25
    4a12:	aa 0f       	add	r26, r26
    4a14:	bb 1f       	adc	r27, r27
    4a16:	af 5a       	subi	r26, 0xAF	; 175
    4a18:	b8 4e       	sbci	r27, 0xE8	; 232
    4a1a:	15 96       	adiw	r26, 0x05	; 5
    4a1c:	1c 92       	st	X, r1
    4a1e:	15 97       	sbiw	r26, 0x05	; 5
    4a20:	fd 01       	movw	r30, r26
    4a22:	14 82       	std	Z+4, r1	; 0x04
    4a24:	08 95       	ret

00004a26 <_callBack>:
    4a26:	e0 91 71 17 	lds	r30, 0x1771	; 0x801771 <_callBackFunction>
    4a2a:	f0 91 72 17 	lds	r31, 0x1772	; 0x801772 <_callBackFunction+0x1>
    4a2e:	30 97       	sbiw	r30, 0x00	; 0
    4a30:	09 f0       	breq	.+2      	; 0x4a34 <_callBack+0xe>
    4a32:	19 95       	eicall
    4a34:	08 95       	ret

00004a36 <_tsl2591TwiCallback>:
    4a36:	64 50       	subi	r22, 0x04	; 4
    4a38:	62 30       	cpi	r22, 0x02	; 2
    4a3a:	08 f0       	brcs	.+2      	; 0x4a3e <_tsl2591TwiCallback+0x8>
    4a3c:	3b c0       	rjmp	.+118    	; 0x4ab4 <_tsl2591TwiCallback+0x7e>
    4a3e:	20 91 70 17 	lds	r18, 0x1770	; 0x801770 <_nextState>
    4a42:	22 30       	cpi	r18, 0x02	; 2
    4a44:	79 f0       	breq	.+30     	; 0x4a64 <_tsl2591TwiCallback+0x2e>
    4a46:	18 f4       	brcc	.+6      	; 0x4a4e <_tsl2591TwiCallback+0x18>
    4a48:	21 30       	cpi	r18, 0x01	; 1
    4a4a:	31 f0       	breq	.+12     	; 0x4a58 <_tsl2591TwiCallback+0x22>
    4a4c:	30 c0       	rjmp	.+96     	; 0x4aae <_tsl2591TwiCallback+0x78>
    4a4e:	23 30       	cpi	r18, 0x03	; 3
    4a50:	81 f0       	breq	.+32     	; 0x4a72 <_tsl2591TwiCallback+0x3c>
    4a52:	24 30       	cpi	r18, 0x04	; 4
    4a54:	a1 f0       	breq	.+40     	; 0x4a7e <_tsl2591TwiCallback+0x48>
    4a56:	2b c0       	rjmp	.+86     	; 0x4aae <_tsl2591TwiCallback+0x78>
    4a58:	22 e0       	ldi	r18, 0x02	; 2
    4a5a:	20 93 70 17 	sts	0x1770, r18	; 0x801770 <_nextState>
    4a5e:	61 e0       	ldi	r22, 0x01	; 1
    4a60:	d0 c1       	rjmp	.+928    	; 0x4e02 <twiReceive>
    4a62:	08 95       	ret
    4a64:	fa 01       	movw	r30, r20
    4a66:	80 81       	ld	r24, Z
    4a68:	80 93 6d 17 	sts	0x176D, r24	; 0x80176d <_deviceId>
    4a6c:	82 e0       	ldi	r24, 0x02	; 2
    4a6e:	db cf       	rjmp	.-74     	; 0x4a26 <_callBack>
    4a70:	08 95       	ret
    4a72:	24 e0       	ldi	r18, 0x04	; 4
    4a74:	20 93 70 17 	sts	0x1770, r18	; 0x801770 <_nextState>
    4a78:	64 e0       	ldi	r22, 0x04	; 4
    4a7a:	c3 c1       	rjmp	.+902    	; 0x4e02 <twiReceive>
    4a7c:	08 95       	ret
    4a7e:	fa 01       	movw	r30, r20
    4a80:	81 81       	ldd	r24, Z+1	; 0x01
    4a82:	90 e0       	ldi	r25, 0x00	; 0
    4a84:	98 2f       	mov	r25, r24
    4a86:	88 27       	eor	r24, r24
    4a88:	20 81       	ld	r18, Z
    4a8a:	82 2b       	or	r24, r18
    4a8c:	90 93 6c 17 	sts	0x176C, r25	; 0x80176c <_fullSpectrumRaw+0x1>
    4a90:	80 93 6b 17 	sts	0x176B, r24	; 0x80176b <_fullSpectrumRaw>
    4a94:	83 81       	ldd	r24, Z+3	; 0x03
    4a96:	90 e0       	ldi	r25, 0x00	; 0
    4a98:	98 2f       	mov	r25, r24
    4a9a:	88 27       	eor	r24, r24
    4a9c:	22 81       	ldd	r18, Z+2	; 0x02
    4a9e:	82 2b       	or	r24, r18
    4aa0:	90 93 6a 17 	sts	0x176A, r25	; 0x80176a <_infraredRaw+0x1>
    4aa4:	80 93 69 17 	sts	0x1769, r24	; 0x801769 <_infraredRaw>
    4aa8:	81 e0       	ldi	r24, 0x01	; 1
    4aaa:	bd cf       	rjmp	.-134    	; 0x4a26 <_callBack>
    4aac:	08 95       	ret
    4aae:	80 e0       	ldi	r24, 0x00	; 0
    4ab0:	ba cf       	rjmp	.-140    	; 0x4a26 <_callBack>
    4ab2:	08 95       	ret
    4ab4:	10 92 70 17 	sts	0x1770, r1	; 0x801770 <_nextState>
    4ab8:	86 e0       	ldi	r24, 0x06	; 6
    4aba:	b5 cf       	rjmp	.-150    	; 0x4a26 <_callBack>
    4abc:	08 95       	ret

00004abe <tsl2591_initialise>:
    4abe:	0f 93       	push	r16
    4ac0:	1f 93       	push	r17
    4ac2:	90 93 72 17 	sts	0x1772, r25	; 0x801772 <_callBackFunction+0x1>
    4ac6:	80 93 71 17 	sts	0x1771, r24	; 0x801771 <_callBackFunction>
    4aca:	0b e1       	ldi	r16, 0x1B	; 27
    4acc:	15 e2       	ldi	r17, 0x25	; 37
    4ace:	20 e0       	ldi	r18, 0x00	; 0
    4ad0:	34 e2       	ldi	r19, 0x24	; 36
    4ad2:	44 ef       	ldi	r20, 0xF4	; 244
    4ad4:	50 e0       	ldi	r21, 0x00	; 0
    4ad6:	60 e0       	ldi	r22, 0x00	; 0
    4ad8:	89 e2       	ldi	r24, 0x29	; 41
    4ada:	f6 d0       	rcall	.+492    	; 0x4cc8 <twiCreate>
    4adc:	90 93 74 17 	sts	0x1774, r25	; 0x801774 <_twiHandler+0x1>
    4ae0:	80 93 73 17 	sts	0x1773, r24	; 0x801773 <_twiHandler>
    4ae4:	89 2b       	or	r24, r25
    4ae6:	11 f0       	breq	.+4      	; 0x4aec <tsl2591_initialise+0x2e>
    4ae8:	80 e0       	ldi	r24, 0x00	; 0
    4aea:	01 c0       	rjmp	.+2      	; 0x4aee <tsl2591_initialise+0x30>
    4aec:	88 e0       	ldi	r24, 0x08	; 8
    4aee:	1f 91       	pop	r17
    4af0:	0f 91       	pop	r16
    4af2:	08 95       	ret

00004af4 <tsl2591_getLux>:
    4af4:	2f 92       	push	r2
    4af6:	3f 92       	push	r3
    4af8:	4f 92       	push	r4
    4afa:	5f 92       	push	r5
    4afc:	6f 92       	push	r6
    4afe:	7f 92       	push	r7
    4b00:	8f 92       	push	r8
    4b02:	9f 92       	push	r9
    4b04:	af 92       	push	r10
    4b06:	bf 92       	push	r11
    4b08:	cf 92       	push	r12
    4b0a:	df 92       	push	r13
    4b0c:	ef 92       	push	r14
    4b0e:	ff 92       	push	r15
    4b10:	0f 93       	push	r16
    4b12:	1f 93       	push	r17
    4b14:	cf 93       	push	r28
    4b16:	df 93       	push	r29
    4b18:	c0 91 69 17 	lds	r28, 0x1769	; 0x801769 <_infraredRaw>
    4b1c:	d0 91 6a 17 	lds	r29, 0x176A	; 0x80176a <_infraredRaw+0x1>
    4b20:	cf 3f       	cpi	r28, 0xFF	; 255
    4b22:	2f ef       	ldi	r18, 0xFF	; 255
    4b24:	d2 07       	cpc	r29, r18
    4b26:	41 f0       	breq	.+16     	; 0x4b38 <tsl2591_getLux+0x44>
    4b28:	60 91 6b 17 	lds	r22, 0x176B	; 0x80176b <_fullSpectrumRaw>
    4b2c:	70 91 6c 17 	lds	r23, 0x176C	; 0x80176c <_fullSpectrumRaw+0x1>
    4b30:	6f 3f       	cpi	r22, 0xFF	; 255
    4b32:	ef ef       	ldi	r30, 0xFF	; 255
    4b34:	7e 07       	cpc	r23, r30
    4b36:	59 f4       	brne	.+22     	; 0x4b4e <tsl2591_getLux+0x5a>
    4b38:	4f ef       	ldi	r20, 0xFF	; 255
    4b3a:	5f ef       	ldi	r21, 0xFF	; 255
    4b3c:	6f e7       	ldi	r22, 0x7F	; 127
    4b3e:	7f e7       	ldi	r23, 0x7F	; 127
    4b40:	fc 01       	movw	r30, r24
    4b42:	40 83       	st	Z, r20
    4b44:	51 83       	std	Z+1, r21	; 0x01
    4b46:	62 83       	std	Z+2, r22	; 0x02
    4b48:	73 83       	std	Z+3, r23	; 0x03
    4b4a:	83 e0       	ldi	r24, 0x03	; 3
    4b4c:	99 c0       	rjmp	.+306    	; 0x4c80 <tsl2591_getLux+0x18c>
    4b4e:	1c 01       	movw	r2, r24
    4b50:	80 e0       	ldi	r24, 0x00	; 0
    4b52:	90 e0       	ldi	r25, 0x00	; 0
    4b54:	60 d3       	rcall	.+1728   	; 0x5216 <__floatunsisf>
    4b56:	2b 01       	movw	r4, r22
    4b58:	3c 01       	movw	r6, r24
    4b5a:	be 01       	movw	r22, r28
    4b5c:	80 e0       	ldi	r24, 0x00	; 0
    4b5e:	90 e0       	ldi	r25, 0x00	; 0
    4b60:	5a d3       	rcall	.+1716   	; 0x5216 <__floatunsisf>
    4b62:	4b 01       	movw	r8, r22
    4b64:	5c 01       	movw	r10, r24
    4b66:	80 91 6e 17 	lds	r24, 0x176E	; 0x80176e <_currentIntegrationTime>
    4b6a:	90 e0       	ldi	r25, 0x00	; 0
    4b6c:	01 96       	adiw	r24, 0x01	; 1
    4b6e:	24 e6       	ldi	r18, 0x64	; 100
    4b70:	28 9f       	mul	r18, r24
    4b72:	b0 01       	movw	r22, r0
    4b74:	29 9f       	mul	r18, r25
    4b76:	70 0d       	add	r23, r0
    4b78:	11 24       	eor	r1, r1
    4b7a:	80 91 6f 17 	lds	r24, 0x176F	; 0x80176f <_currentGain>
    4b7e:	80 32       	cpi	r24, 0x20	; 32
    4b80:	69 f0       	breq	.+26     	; 0x4b9c <tsl2591_getLux+0xa8>
    4b82:	80 33       	cpi	r24, 0x30	; 48
    4b84:	a1 f0       	breq	.+40     	; 0x4bae <tsl2591_getLux+0xba>
    4b86:	80 31       	cpi	r24, 0x10	; 16
    4b88:	e1 f4       	brne	.+56     	; 0x4bc2 <tsl2591_getLux+0xce>
    4b8a:	0f 2e       	mov	r0, r31
    4b8c:	c1 2c       	mov	r12, r1
    4b8e:	d1 2c       	mov	r13, r1
    4b90:	f8 ec       	ldi	r31, 0xC8	; 200
    4b92:	ef 2e       	mov	r14, r31
    4b94:	f1 e4       	ldi	r31, 0x41	; 65
    4b96:	ff 2e       	mov	r15, r31
    4b98:	f0 2d       	mov	r31, r0
    4b9a:	1b c0       	rjmp	.+54     	; 0x4bd2 <tsl2591_getLux+0xde>
    4b9c:	0f 2e       	mov	r0, r31
    4b9e:	c1 2c       	mov	r12, r1
    4ba0:	d1 2c       	mov	r13, r1
    4ba2:	f6 ed       	ldi	r31, 0xD6	; 214
    4ba4:	ef 2e       	mov	r14, r31
    4ba6:	f3 e4       	ldi	r31, 0x43	; 67
    4ba8:	ff 2e       	mov	r15, r31
    4baa:	f0 2d       	mov	r31, r0
    4bac:	12 c0       	rjmp	.+36     	; 0x4bd2 <tsl2591_getLux+0xde>
    4bae:	0f 2e       	mov	r0, r31
    4bb0:	c1 2c       	mov	r12, r1
    4bb2:	f0 e5       	ldi	r31, 0x50	; 80
    4bb4:	df 2e       	mov	r13, r31
    4bb6:	fa e1       	ldi	r31, 0x1A	; 26
    4bb8:	ef 2e       	mov	r14, r31
    4bba:	f6 e4       	ldi	r31, 0x46	; 70
    4bbc:	ff 2e       	mov	r15, r31
    4bbe:	f0 2d       	mov	r31, r0
    4bc0:	08 c0       	rjmp	.+16     	; 0x4bd2 <tsl2591_getLux+0xde>
    4bc2:	0f 2e       	mov	r0, r31
    4bc4:	c1 2c       	mov	r12, r1
    4bc6:	d1 2c       	mov	r13, r1
    4bc8:	f0 e8       	ldi	r31, 0x80	; 128
    4bca:	ef 2e       	mov	r14, r31
    4bcc:	ff e3       	ldi	r31, 0x3F	; 63
    4bce:	ff 2e       	mov	r15, r31
    4bd0:	f0 2d       	mov	r31, r0
    4bd2:	07 2e       	mov	r0, r23
    4bd4:	00 0c       	add	r0, r0
    4bd6:	88 0b       	sbc	r24, r24
    4bd8:	99 0b       	sbc	r25, r25
    4bda:	1f d3       	rcall	.+1598   	; 0x521a <__floatsisf>
    4bdc:	a7 01       	movw	r20, r14
    4bde:	96 01       	movw	r18, r12
    4be0:	ac d3       	rcall	.+1880   	; 0x533a <__mulsf3>
    4be2:	20 e0       	ldi	r18, 0x00	; 0
    4be4:	30 e0       	ldi	r19, 0x00	; 0
    4be6:	4c ec       	ldi	r20, 0xCC	; 204
    4be8:	53 e4       	ldi	r21, 0x43	; 67
    4bea:	7c d2       	rcall	.+1272   	; 0x50e4 <__divsf3>
    4bec:	6b 01       	movw	r12, r22
    4bee:	7c 01       	movw	r14, r24
    4bf0:	25 e8       	ldi	r18, 0x85	; 133
    4bf2:	3b ee       	ldi	r19, 0xEB	; 235
    4bf4:	41 ed       	ldi	r20, 0xD1	; 209
    4bf6:	5f e3       	ldi	r21, 0x3F	; 63
    4bf8:	c5 01       	movw	r24, r10
    4bfa:	b4 01       	movw	r22, r8
    4bfc:	9e d3       	rcall	.+1852   	; 0x533a <__mulsf3>
    4bfe:	9b 01       	movw	r18, r22
    4c00:	ac 01       	movw	r20, r24
    4c02:	c3 01       	movw	r24, r6
    4c04:	b2 01       	movw	r22, r4
    4c06:	09 d2       	rcall	.+1042   	; 0x501a <__subsf3>
    4c08:	a7 01       	movw	r20, r14
    4c0a:	96 01       	movw	r18, r12
    4c0c:	6b d2       	rcall	.+1238   	; 0x50e4 <__divsf3>
    4c0e:	16 2f       	mov	r17, r22
    4c10:	d7 2f       	mov	r29, r23
    4c12:	c8 2f       	mov	r28, r24
    4c14:	09 2f       	mov	r16, r25
    4c16:	2d e3       	ldi	r18, 0x3D	; 61
    4c18:	3a e0       	ldi	r19, 0x0A	; 10
    4c1a:	47 e1       	ldi	r20, 0x17	; 23
    4c1c:	5f e3       	ldi	r21, 0x3F	; 63
    4c1e:	c3 01       	movw	r24, r6
    4c20:	b2 01       	movw	r22, r4
    4c22:	8b d3       	rcall	.+1814   	; 0x533a <__mulsf3>
    4c24:	2b 01       	movw	r4, r22
    4c26:	3c 01       	movw	r6, r24
    4c28:	26 ef       	ldi	r18, 0xF6	; 246
    4c2a:	38 e2       	ldi	r19, 0x28	; 40
    4c2c:	4c e5       	ldi	r20, 0x5C	; 92
    4c2e:	5f e3       	ldi	r21, 0x3F	; 63
    4c30:	c5 01       	movw	r24, r10
    4c32:	b4 01       	movw	r22, r8
    4c34:	82 d3       	rcall	.+1796   	; 0x533a <__mulsf3>
    4c36:	9b 01       	movw	r18, r22
    4c38:	ac 01       	movw	r20, r24
    4c3a:	c3 01       	movw	r24, r6
    4c3c:	b2 01       	movw	r22, r4
    4c3e:	ed d1       	rcall	.+986    	; 0x501a <__subsf3>
    4c40:	a7 01       	movw	r20, r14
    4c42:	96 01       	movw	r18, r12
    4c44:	4f d2       	rcall	.+1182   	; 0x50e4 <__divsf3>
    4c46:	c6 2e       	mov	r12, r22
    4c48:	d7 2e       	mov	r13, r23
    4c4a:	e8 2e       	mov	r14, r24
    4c4c:	f9 2e       	mov	r15, r25
    4c4e:	26 2f       	mov	r18, r22
    4c50:	37 2f       	mov	r19, r23
    4c52:	48 2f       	mov	r20, r24
    4c54:	59 2f       	mov	r21, r25
    4c56:	61 2f       	mov	r22, r17
    4c58:	7d 2f       	mov	r23, r29
    4c5a:	8c 2f       	mov	r24, r28
    4c5c:	90 2f       	mov	r25, r16
    4c5e:	69 d3       	rcall	.+1746   	; 0x5332 <__gesf2>
    4c60:	18 16       	cp	r1, r24
    4c62:	24 f0       	brlt	.+8      	; 0x4c6c <tsl2591_getLux+0x178>
    4c64:	1c 2d       	mov	r17, r12
    4c66:	dd 2d       	mov	r29, r13
    4c68:	ce 2d       	mov	r28, r14
    4c6a:	0f 2d       	mov	r16, r15
    4c6c:	41 2f       	mov	r20, r17
    4c6e:	5d 2f       	mov	r21, r29
    4c70:	6c 2f       	mov	r22, r28
    4c72:	70 2f       	mov	r23, r16
    4c74:	f1 01       	movw	r30, r2
    4c76:	40 83       	st	Z, r20
    4c78:	51 83       	std	Z+1, r21	; 0x01
    4c7a:	62 83       	std	Z+2, r22	; 0x02
    4c7c:	73 83       	std	Z+3, r23	; 0x03
    4c7e:	80 e0       	ldi	r24, 0x00	; 0
    4c80:	df 91       	pop	r29
    4c82:	cf 91       	pop	r28
    4c84:	1f 91       	pop	r17
    4c86:	0f 91       	pop	r16
    4c88:	ff 90       	pop	r15
    4c8a:	ef 90       	pop	r14
    4c8c:	df 90       	pop	r13
    4c8e:	cf 90       	pop	r12
    4c90:	bf 90       	pop	r11
    4c92:	af 90       	pop	r10
    4c94:	9f 90       	pop	r9
    4c96:	8f 90       	pop	r8
    4c98:	7f 90       	pop	r7
    4c9a:	6f 90       	pop	r6
    4c9c:	5f 90       	pop	r5
    4c9e:	4f 90       	pop	r4
    4ca0:	3f 90       	pop	r3
    4ca2:	2f 90       	pop	r2
    4ca4:	08 95       	ret

00004ca6 <_initTwiInterface>:
    4ca6:	80 91 83 17 	lds	r24, 0x1783	; 0x801783 <_twiIsInitiated>
    4caa:	81 11       	cpse	r24, r1
    4cac:	0c c0       	rjmp	.+24     	; 0x4cc6 <_initTwiInterface+0x20>
    4cae:	8c e0       	ldi	r24, 0x0C	; 12
    4cb0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4cb4:	8f ef       	ldi	r24, 0xFF	; 255
    4cb6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4cba:	84 e0       	ldi	r24, 0x04	; 4
    4cbc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4cc0:	81 e0       	ldi	r24, 0x01	; 1
    4cc2:	80 93 83 17 	sts	0x1783, r24	; 0x801783 <_twiIsInitiated>
    4cc6:	08 95       	ret

00004cc8 <twiCreate>:
    4cc8:	af 92       	push	r10
    4cca:	bf 92       	push	r11
    4ccc:	cf 92       	push	r12
    4cce:	df 92       	push	r13
    4cd0:	ef 92       	push	r14
    4cd2:	ff 92       	push	r15
    4cd4:	0f 93       	push	r16
    4cd6:	1f 93       	push	r17
    4cd8:	cf 93       	push	r28
    4cda:	df 93       	push	r29
    4cdc:	a8 2e       	mov	r10, r24
    4cde:	b6 2e       	mov	r11, r22
    4ce0:	69 01       	movw	r12, r18
    4ce2:	7a 01       	movw	r14, r20
    4ce4:	84 e0       	ldi	r24, 0x04	; 4
    4ce6:	90 e0       	ldi	r25, 0x00	; 0
    4ce8:	d9 d3       	rcall	.+1970   	; 0x549c <malloc>
    4cea:	ec 01       	movw	r28, r24
    4cec:	89 2b       	or	r24, r25
    4cee:	61 f1       	breq	.+88     	; 0x4d48 <twiCreate+0x80>
    4cf0:	a8 82       	st	Y, r10
    4cf2:	81 e0       	ldi	r24, 0x01	; 1
    4cf4:	b8 12       	cpse	r11, r24
    4cf6:	12 c0       	rjmp	.+36     	; 0x4d1c <twiCreate+0x54>
    4cf8:	c7 01       	movw	r24, r14
    4cfa:	b6 01       	movw	r22, r12
    4cfc:	20 ea       	ldi	r18, 0xA0	; 160
    4cfe:	36 e8       	ldi	r19, 0x86	; 134
    4d00:	41 e0       	ldi	r20, 0x01	; 1
    4d02:	50 e0       	ldi	r21, 0x00	; 0
    4d04:	a1 d3       	rcall	.+1858   	; 0x5448 <__udivmodsi4>
    4d06:	da 01       	movw	r26, r20
    4d08:	c9 01       	movw	r24, r18
    4d0a:	40 97       	sbiw	r24, 0x10	; 16
    4d0c:	a1 09       	sbc	r26, r1
    4d0e:	b1 09       	sbc	r27, r1
    4d10:	b6 95       	lsr	r27
    4d12:	a7 95       	ror	r26
    4d14:	97 95       	ror	r25
    4d16:	87 95       	ror	r24
    4d18:	89 83       	std	Y+1, r24	; 0x01
    4d1a:	11 c0       	rjmp	.+34     	; 0x4d3e <twiCreate+0x76>
    4d1c:	c7 01       	movw	r24, r14
    4d1e:	b6 01       	movw	r22, r12
    4d20:	20 e8       	ldi	r18, 0x80	; 128
    4d22:	3a e1       	ldi	r19, 0x1A	; 26
    4d24:	46 e0       	ldi	r20, 0x06	; 6
    4d26:	50 e0       	ldi	r21, 0x00	; 0
    4d28:	8f d3       	rcall	.+1822   	; 0x5448 <__udivmodsi4>
    4d2a:	da 01       	movw	r26, r20
    4d2c:	c9 01       	movw	r24, r18
    4d2e:	40 97       	sbiw	r24, 0x10	; 16
    4d30:	a1 09       	sbc	r26, r1
    4d32:	b1 09       	sbc	r27, r1
    4d34:	b6 95       	lsr	r27
    4d36:	a7 95       	ror	r26
    4d38:	97 95       	ror	r25
    4d3a:	87 95       	ror	r24
    4d3c:	89 83       	std	Y+1, r24	; 0x01
    4d3e:	1b 83       	std	Y+3, r17	; 0x03
    4d40:	0a 83       	std	Y+2, r16	; 0x02
    4d42:	8c 2f       	mov	r24, r28
    4d44:	9d 2f       	mov	r25, r29
    4d46:	02 c0       	rjmp	.+4      	; 0x4d4c <twiCreate+0x84>
    4d48:	80 e0       	ldi	r24, 0x00	; 0
    4d4a:	90 e0       	ldi	r25, 0x00	; 0
    4d4c:	df 91       	pop	r29
    4d4e:	cf 91       	pop	r28
    4d50:	1f 91       	pop	r17
    4d52:	0f 91       	pop	r16
    4d54:	ff 90       	pop	r15
    4d56:	ef 90       	pop	r14
    4d58:	df 90       	pop	r13
    4d5a:	cf 90       	pop	r12
    4d5c:	bf 90       	pop	r11
    4d5e:	af 90       	pop	r10
    4d60:	08 95       	ret

00004d62 <twiIsBusy>:
    4d62:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4d66:	81 70       	andi	r24, 0x01	; 1
    4d68:	08 95       	ret

00004d6a <twiTransmit>:
    4d6a:	ff 92       	push	r15
    4d6c:	0f 93       	push	r16
    4d6e:	1f 93       	push	r17
    4d70:	cf 93       	push	r28
    4d72:	df 93       	push	r29
    4d74:	00 97       	sbiw	r24, 0x00	; 0
    4d76:	d1 f1       	breq	.+116    	; 0x4dec <twiTransmit+0x82>
    4d78:	4a 30       	cpi	r20, 0x0A	; 10
    4d7a:	d0 f5       	brcc	.+116    	; 0x4df0 <twiTransmit+0x86>
    4d7c:	f4 2e       	mov	r15, r20
    4d7e:	8b 01       	movw	r16, r22
    4d80:	ec 01       	movw	r28, r24
    4d82:	ef df       	rcall	.-34     	; 0x4d62 <twiIsBusy>
    4d84:	81 11       	cpse	r24, r1
    4d86:	36 c0       	rjmp	.+108    	; 0x4df4 <twiTransmit+0x8a>
    4d88:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <_twiCurrentHandler>
    4d8c:	90 91 77 17 	lds	r25, 0x1777	; 0x801777 <_twiCurrentHandler+0x1>
    4d90:	c8 17       	cp	r28, r24
    4d92:	d9 07       	cpc	r29, r25
    4d94:	41 f0       	breq	.+16     	; 0x4da6 <twiTransmit+0x3c>
    4d96:	87 df       	rcall	.-242    	; 0x4ca6 <_initTwiInterface>
    4d98:	89 81       	ldd	r24, Y+1	; 0x01
    4d9a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4d9e:	d0 93 77 17 	sts	0x1777, r29	; 0x801777 <_twiCurrentHandler+0x1>
    4da2:	c0 93 76 17 	sts	0x1776, r28	; 0x801776 <_twiCurrentHandler>
    4da6:	81 e0       	ldi	r24, 0x01	; 1
    4da8:	8f 0d       	add	r24, r15
    4daa:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <_twiMessageLen>
    4dae:	88 81       	ld	r24, Y
    4db0:	88 0f       	add	r24, r24
    4db2:	80 93 79 17 	sts	0x1779, r24	; 0x801779 <_twiMessageBuffer>
    4db6:	ff 20       	and	r15, r15
    4db8:	89 f0       	breq	.+34     	; 0x4ddc <twiTransmit+0x72>
    4dba:	f8 01       	movw	r30, r16
    4dbc:	aa e7       	ldi	r26, 0x7A	; 122
    4dbe:	b7 e1       	ldi	r27, 0x17	; 23
    4dc0:	4f ef       	ldi	r20, 0xFF	; 255
    4dc2:	4f 0d       	add	r20, r15
    4dc4:	64 2f       	mov	r22, r20
    4dc6:	70 e0       	ldi	r23, 0x00	; 0
    4dc8:	cb 01       	movw	r24, r22
    4dca:	01 96       	adiw	r24, 0x01	; 1
    4dcc:	b8 01       	movw	r22, r16
    4dce:	68 0f       	add	r22, r24
    4dd0:	79 1f       	adc	r23, r25
    4dd2:	81 91       	ld	r24, Z+
    4dd4:	8d 93       	st	X+, r24
    4dd6:	e6 17       	cp	r30, r22
    4dd8:	f7 07       	cpc	r31, r23
    4dda:	d9 f7       	brne	.-10     	; 0x4dd2 <twiTransmit+0x68>
    4ddc:	88 ef       	ldi	r24, 0xF8	; 248
    4dde:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4de2:	85 ea       	ldi	r24, 0xA5	; 165
    4de4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4de8:	84 e0       	ldi	r24, 0x04	; 4
    4dea:	05 c0       	rjmp	.+10     	; 0x4df6 <twiTransmit+0x8c>
    4dec:	86 e0       	ldi	r24, 0x06	; 6
    4dee:	03 c0       	rjmp	.+6      	; 0x4df6 <twiTransmit+0x8c>
    4df0:	87 e0       	ldi	r24, 0x07	; 7
    4df2:	01 c0       	rjmp	.+2      	; 0x4df6 <twiTransmit+0x8c>
    4df4:	82 e0       	ldi	r24, 0x02	; 2
    4df6:	df 91       	pop	r29
    4df8:	cf 91       	pop	r28
    4dfa:	1f 91       	pop	r17
    4dfc:	0f 91       	pop	r16
    4dfe:	ff 90       	pop	r15
    4e00:	08 95       	ret

00004e02 <twiReceive>:
    4e02:	1f 93       	push	r17
    4e04:	cf 93       	push	r28
    4e06:	df 93       	push	r29
    4e08:	00 97       	sbiw	r24, 0x00	; 0
    4e0a:	29 f1       	breq	.+74     	; 0x4e56 <twiReceive+0x54>
    4e0c:	6b 30       	cpi	r22, 0x0B	; 11
    4e0e:	28 f5       	brcc	.+74     	; 0x4e5a <twiReceive+0x58>
    4e10:	16 2f       	mov	r17, r22
    4e12:	ec 01       	movw	r28, r24
    4e14:	a6 df       	rcall	.-180    	; 0x4d62 <twiIsBusy>
    4e16:	81 11       	cpse	r24, r1
    4e18:	22 c0       	rjmp	.+68     	; 0x4e5e <twiReceive+0x5c>
    4e1a:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <_twiCurrentHandler>
    4e1e:	90 91 77 17 	lds	r25, 0x1777	; 0x801777 <_twiCurrentHandler+0x1>
    4e22:	c8 17       	cp	r28, r24
    4e24:	d9 07       	cpc	r29, r25
    4e26:	41 f0       	breq	.+16     	; 0x4e38 <twiReceive+0x36>
    4e28:	3e df       	rcall	.-388    	; 0x4ca6 <_initTwiInterface>
    4e2a:	89 81       	ldd	r24, Y+1	; 0x01
    4e2c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4e30:	d0 93 77 17 	sts	0x1777, r29	; 0x801777 <_twiCurrentHandler+0x1>
    4e34:	c0 93 76 17 	sts	0x1776, r28	; 0x801776 <_twiCurrentHandler>
    4e38:	10 93 78 17 	sts	0x1778, r17	; 0x801778 <_twiMessageLen>
    4e3c:	88 81       	ld	r24, Y
    4e3e:	88 0f       	add	r24, r24
    4e40:	81 60       	ori	r24, 0x01	; 1
    4e42:	80 93 79 17 	sts	0x1779, r24	; 0x801779 <_twiMessageBuffer>
    4e46:	88 ef       	ldi	r24, 0xF8	; 248
    4e48:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4e4c:	85 ea       	ldi	r24, 0xA5	; 165
    4e4e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4e52:	85 e0       	ldi	r24, 0x05	; 5
    4e54:	05 c0       	rjmp	.+10     	; 0x4e60 <twiReceive+0x5e>
    4e56:	86 e0       	ldi	r24, 0x06	; 6
    4e58:	03 c0       	rjmp	.+6      	; 0x4e60 <twiReceive+0x5e>
    4e5a:	87 e0       	ldi	r24, 0x07	; 7
    4e5c:	01 c0       	rjmp	.+2      	; 0x4e60 <twiReceive+0x5e>
    4e5e:	82 e0       	ldi	r24, 0x02	; 2
    4e60:	df 91       	pop	r29
    4e62:	cf 91       	pop	r28
    4e64:	1f 91       	pop	r17
    4e66:	08 95       	ret

00004e68 <__vector_39>:
    4e68:	1f 92       	push	r1
    4e6a:	0f 92       	push	r0
    4e6c:	0f b6       	in	r0, 0x3f	; 63
    4e6e:	0f 92       	push	r0
    4e70:	11 24       	eor	r1, r1
    4e72:	0b b6       	in	r0, 0x3b	; 59
    4e74:	0f 92       	push	r0
    4e76:	2f 93       	push	r18
    4e78:	3f 93       	push	r19
    4e7a:	4f 93       	push	r20
    4e7c:	5f 93       	push	r21
    4e7e:	6f 93       	push	r22
    4e80:	7f 93       	push	r23
    4e82:	8f 93       	push	r24
    4e84:	9f 93       	push	r25
    4e86:	af 93       	push	r26
    4e88:	bf 93       	push	r27
    4e8a:	ef 93       	push	r30
    4e8c:	ff 93       	push	r31
    4e8e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4e92:	8e 2f       	mov	r24, r30
    4e94:	90 e0       	ldi	r25, 0x00	; 0
    4e96:	fc 01       	movw	r30, r24
    4e98:	38 97       	sbiw	r30, 0x08	; 8
    4e9a:	e1 35       	cpi	r30, 0x51	; 81
    4e9c:	f1 05       	cpc	r31, r1
    4e9e:	08 f0       	brcs	.+2      	; 0x4ea2 <__vector_39+0x3a>
    4ea0:	75 c0       	rjmp	.+234    	; 0x4f8c <__vector_39+0x124>
    4ea2:	88 27       	eor	r24, r24
    4ea4:	e4 58       	subi	r30, 0x84	; 132
    4ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea8:	8f 4f       	sbci	r24, 0xFF	; 255
    4eaa:	f0 c2       	rjmp	.+1504   	; 0x548c <__tablejump2__>
    4eac:	10 92 75 17 	sts	0x1775, r1	; 0x801775 <_index.1885>
    4eb0:	e0 91 75 17 	lds	r30, 0x1775	; 0x801775 <_index.1885>
    4eb4:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <_twiMessageLen>
    4eb8:	e8 17       	cp	r30, r24
    4eba:	70 f4       	brcc	.+28     	; 0x4ed8 <__vector_39+0x70>
    4ebc:	81 e0       	ldi	r24, 0x01	; 1
    4ebe:	8e 0f       	add	r24, r30
    4ec0:	80 93 75 17 	sts	0x1775, r24	; 0x801775 <_index.1885>
    4ec4:	f0 e0       	ldi	r31, 0x00	; 0
    4ec6:	e7 58       	subi	r30, 0x87	; 135
    4ec8:	f8 4e       	sbci	r31, 0xE8	; 232
    4eca:	80 81       	ld	r24, Z
    4ecc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4ed0:	85 e8       	ldi	r24, 0x85	; 133
    4ed2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4ed6:	72 c0       	rjmp	.+228    	; 0x4fbc <__vector_39+0x154>
    4ed8:	84 e9       	ldi	r24, 0x94	; 148
    4eda:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4ede:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <_twiCurrentHandler>
    4ee2:	90 91 77 17 	lds	r25, 0x1777	; 0x801777 <_twiCurrentHandler+0x1>
    4ee6:	dc 01       	movw	r26, r24
    4ee8:	12 96       	adiw	r26, 0x02	; 2
    4eea:	ed 91       	ld	r30, X+
    4eec:	fc 91       	ld	r31, X
    4eee:	13 97       	sbiw	r26, 0x03	; 3
    4ef0:	30 97       	sbiw	r30, 0x00	; 0
    4ef2:	09 f4       	brne	.+2      	; 0x4ef6 <__vector_39+0x8e>
    4ef4:	63 c0       	rjmp	.+198    	; 0x4fbc <__vector_39+0x154>
    4ef6:	20 e0       	ldi	r18, 0x00	; 0
    4ef8:	40 e0       	ldi	r20, 0x00	; 0
    4efa:	50 e0       	ldi	r21, 0x00	; 0
    4efc:	64 e0       	ldi	r22, 0x04	; 4
    4efe:	19 95       	eicall
    4f00:	5d c0       	rjmp	.+186    	; 0x4fbc <__vector_39+0x154>
    4f02:	e0 91 75 17 	lds	r30, 0x1775	; 0x801775 <_index.1885>
    4f06:	81 e0       	ldi	r24, 0x01	; 1
    4f08:	8e 0f       	add	r24, r30
    4f0a:	80 93 75 17 	sts	0x1775, r24	; 0x801775 <_index.1885>
    4f0e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4f12:	f0 e0       	ldi	r31, 0x00	; 0
    4f14:	e7 58       	subi	r30, 0x87	; 135
    4f16:	f8 4e       	sbci	r31, 0xE8	; 232
    4f18:	80 83       	st	Z, r24
    4f1a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4f1e:	80 34       	cpi	r24, 0x40	; 64
    4f20:	11 f4       	brne	.+4      	; 0x4f26 <__vector_39+0xbe>
    4f22:	10 92 75 17 	sts	0x1775, r1	; 0x801775 <_index.1885>
    4f26:	20 91 75 17 	lds	r18, 0x1775	; 0x801775 <_index.1885>
    4f2a:	30 e0       	ldi	r19, 0x00	; 0
    4f2c:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <_twiMessageLen>
    4f30:	90 e0       	ldi	r25, 0x00	; 0
    4f32:	01 97       	sbiw	r24, 0x01	; 1
    4f34:	28 17       	cp	r18, r24
    4f36:	39 07       	cpc	r19, r25
    4f38:	24 f4       	brge	.+8      	; 0x4f42 <__vector_39+0xda>
    4f3a:	85 ec       	ldi	r24, 0xC5	; 197
    4f3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f40:	3d c0       	rjmp	.+122    	; 0x4fbc <__vector_39+0x154>
    4f42:	85 e8       	ldi	r24, 0x85	; 133
    4f44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f48:	39 c0       	rjmp	.+114    	; 0x4fbc <__vector_39+0x154>
    4f4a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4f4e:	e0 91 75 17 	lds	r30, 0x1775	; 0x801775 <_index.1885>
    4f52:	f0 e0       	ldi	r31, 0x00	; 0
    4f54:	e7 58       	subi	r30, 0x87	; 135
    4f56:	f8 4e       	sbci	r31, 0xE8	; 232
    4f58:	80 83       	st	Z, r24
    4f5a:	84 e9       	ldi	r24, 0x94	; 148
    4f5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f60:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <_twiCurrentHandler>
    4f64:	90 91 77 17 	lds	r25, 0x1777	; 0x801777 <_twiCurrentHandler+0x1>
    4f68:	dc 01       	movw	r26, r24
    4f6a:	12 96       	adiw	r26, 0x02	; 2
    4f6c:	ed 91       	ld	r30, X+
    4f6e:	fc 91       	ld	r31, X
    4f70:	13 97       	sbiw	r26, 0x03	; 3
    4f72:	30 97       	sbiw	r30, 0x00	; 0
    4f74:	19 f1       	breq	.+70     	; 0x4fbc <__vector_39+0x154>
    4f76:	20 91 78 17 	lds	r18, 0x1778	; 0x801778 <_twiMessageLen>
    4f7a:	49 e7       	ldi	r20, 0x79	; 121
    4f7c:	57 e1       	ldi	r21, 0x17	; 23
    4f7e:	65 e0       	ldi	r22, 0x05	; 5
    4f80:	19 95       	eicall
    4f82:	1c c0       	rjmp	.+56     	; 0x4fbc <__vector_39+0x154>
    4f84:	85 ea       	ldi	r24, 0xA5	; 165
    4f86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f8a:	18 c0       	rjmp	.+48     	; 0x4fbc <__vector_39+0x154>
    4f8c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4f90:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4f94:	84 e0       	ldi	r24, 0x04	; 4
    4f96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f9a:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <_twiCurrentHandler>
    4f9e:	90 91 77 17 	lds	r25, 0x1777	; 0x801777 <_twiCurrentHandler+0x1>
    4fa2:	dc 01       	movw	r26, r24
    4fa4:	12 96       	adiw	r26, 0x02	; 2
    4fa6:	ed 91       	ld	r30, X+
    4fa8:	fc 91       	ld	r31, X
    4faa:	13 97       	sbiw	r26, 0x03	; 3
    4fac:	30 97       	sbiw	r30, 0x00	; 0
    4fae:	31 f0       	breq	.+12     	; 0x4fbc <__vector_39+0x154>
    4fb0:	20 e0       	ldi	r18, 0x00	; 0
    4fb2:	40 e0       	ldi	r20, 0x00	; 0
    4fb4:	50 e0       	ldi	r21, 0x00	; 0
    4fb6:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    4fba:	19 95       	eicall
    4fbc:	ff 91       	pop	r31
    4fbe:	ef 91       	pop	r30
    4fc0:	bf 91       	pop	r27
    4fc2:	af 91       	pop	r26
    4fc4:	9f 91       	pop	r25
    4fc6:	8f 91       	pop	r24
    4fc8:	7f 91       	pop	r23
    4fca:	6f 91       	pop	r22
    4fcc:	5f 91       	pop	r21
    4fce:	4f 91       	pop	r20
    4fd0:	3f 91       	pop	r19
    4fd2:	2f 91       	pop	r18
    4fd4:	0f 90       	pop	r0
    4fd6:	0b be       	out	0x3b, r0	; 59
    4fd8:	0f 90       	pop	r0
    4fda:	0f be       	out	0x3f, r0	; 63
    4fdc:	0f 90       	pop	r0
    4fde:	1f 90       	pop	r1
    4fe0:	18 95       	reti

00004fe2 <fifo_init>:
    4fe2:	fc 01       	movw	r30, r24
    4fe4:	41 11       	cpse	r20, r1
    4fe6:	01 c0       	rjmp	.+2      	; 0x4fea <fifo_init+0x8>
    4fe8:	7a d3       	rcall	.+1780   	; 0x56de <abort>
    4fea:	84 2f       	mov	r24, r20
    4fec:	90 e0       	ldi	r25, 0x00	; 0
    4fee:	9c 01       	movw	r18, r24
    4ff0:	21 50       	subi	r18, 0x01	; 1
    4ff2:	31 09       	sbc	r19, r1
    4ff4:	82 23       	and	r24, r18
    4ff6:	93 23       	and	r25, r19
    4ff8:	89 2b       	or	r24, r25
    4ffa:	09 f0       	breq	.+2      	; 0x4ffe <fifo_init+0x1c>
    4ffc:	70 d3       	rcall	.+1760   	; 0x56de <abort>
    4ffe:	41 38       	cpi	r20, 0x81	; 129
    5000:	08 f0       	brcs	.+2      	; 0x5004 <fifo_init+0x22>
    5002:	6d d3       	rcall	.+1754   	; 0x56de <abort>
    5004:	12 82       	std	Z+2, r1	; 0x02
    5006:	13 82       	std	Z+3, r1	; 0x03
    5008:	44 83       	std	Z+4, r20	; 0x04
    500a:	44 0f       	add	r20, r20
    500c:	41 50       	subi	r20, 0x01	; 1
    500e:	45 83       	std	Z+5, r20	; 0x05
    5010:	71 83       	std	Z+1, r23	; 0x01
    5012:	60 83       	st	Z, r22
    5014:	80 e0       	ldi	r24, 0x00	; 0
    5016:	90 e0       	ldi	r25, 0x00	; 0
    5018:	08 95       	ret

0000501a <__subsf3>:
    501a:	50 58       	subi	r21, 0x80	; 128

0000501c <__addsf3>:
    501c:	bb 27       	eor	r27, r27
    501e:	aa 27       	eor	r26, r26
    5020:	0e d0       	rcall	.+28     	; 0x503e <__addsf3x>
    5022:	4d c1       	rjmp	.+666    	; 0x52be <__fp_round>
    5024:	3e d1       	rcall	.+636    	; 0x52a2 <__fp_pscA>
    5026:	30 f0       	brcs	.+12     	; 0x5034 <__addsf3+0x18>
    5028:	43 d1       	rcall	.+646    	; 0x52b0 <__fp_pscB>
    502a:	20 f0       	brcs	.+8      	; 0x5034 <__addsf3+0x18>
    502c:	31 f4       	brne	.+12     	; 0x503a <__addsf3+0x1e>
    502e:	9f 3f       	cpi	r25, 0xFF	; 255
    5030:	11 f4       	brne	.+4      	; 0x5036 <__addsf3+0x1a>
    5032:	1e f4       	brtc	.+6      	; 0x503a <__addsf3+0x1e>
    5034:	33 c1       	rjmp	.+614    	; 0x529c <__fp_nan>
    5036:	0e f4       	brtc	.+2      	; 0x503a <__addsf3+0x1e>
    5038:	e0 95       	com	r30
    503a:	e7 fb       	bst	r30, 7
    503c:	29 c1       	rjmp	.+594    	; 0x5290 <__fp_inf>

0000503e <__addsf3x>:
    503e:	e9 2f       	mov	r30, r25
    5040:	4f d1       	rcall	.+670    	; 0x52e0 <__fp_split3>
    5042:	80 f3       	brcs	.-32     	; 0x5024 <__addsf3+0x8>
    5044:	ba 17       	cp	r27, r26
    5046:	62 07       	cpc	r22, r18
    5048:	73 07       	cpc	r23, r19
    504a:	84 07       	cpc	r24, r20
    504c:	95 07       	cpc	r25, r21
    504e:	18 f0       	brcs	.+6      	; 0x5056 <__addsf3x+0x18>
    5050:	71 f4       	brne	.+28     	; 0x506e <__addsf3x+0x30>
    5052:	9e f5       	brtc	.+102    	; 0x50ba <__addsf3x+0x7c>
    5054:	67 c1       	rjmp	.+718    	; 0x5324 <__fp_zero>
    5056:	0e f4       	brtc	.+2      	; 0x505a <__addsf3x+0x1c>
    5058:	e0 95       	com	r30
    505a:	0b 2e       	mov	r0, r27
    505c:	ba 2f       	mov	r27, r26
    505e:	a0 2d       	mov	r26, r0
    5060:	0b 01       	movw	r0, r22
    5062:	b9 01       	movw	r22, r18
    5064:	90 01       	movw	r18, r0
    5066:	0c 01       	movw	r0, r24
    5068:	ca 01       	movw	r24, r20
    506a:	a0 01       	movw	r20, r0
    506c:	11 24       	eor	r1, r1
    506e:	ff 27       	eor	r31, r31
    5070:	59 1b       	sub	r21, r25
    5072:	99 f0       	breq	.+38     	; 0x509a <__addsf3x+0x5c>
    5074:	59 3f       	cpi	r21, 0xF9	; 249
    5076:	50 f4       	brcc	.+20     	; 0x508c <__addsf3x+0x4e>
    5078:	50 3e       	cpi	r21, 0xE0	; 224
    507a:	68 f1       	brcs	.+90     	; 0x50d6 <__addsf3x+0x98>
    507c:	1a 16       	cp	r1, r26
    507e:	f0 40       	sbci	r31, 0x00	; 0
    5080:	a2 2f       	mov	r26, r18
    5082:	23 2f       	mov	r18, r19
    5084:	34 2f       	mov	r19, r20
    5086:	44 27       	eor	r20, r20
    5088:	58 5f       	subi	r21, 0xF8	; 248
    508a:	f3 cf       	rjmp	.-26     	; 0x5072 <__addsf3x+0x34>
    508c:	46 95       	lsr	r20
    508e:	37 95       	ror	r19
    5090:	27 95       	ror	r18
    5092:	a7 95       	ror	r26
    5094:	f0 40       	sbci	r31, 0x00	; 0
    5096:	53 95       	inc	r21
    5098:	c9 f7       	brne	.-14     	; 0x508c <__addsf3x+0x4e>
    509a:	7e f4       	brtc	.+30     	; 0x50ba <__addsf3x+0x7c>
    509c:	1f 16       	cp	r1, r31
    509e:	ba 0b       	sbc	r27, r26
    50a0:	62 0b       	sbc	r22, r18
    50a2:	73 0b       	sbc	r23, r19
    50a4:	84 0b       	sbc	r24, r20
    50a6:	ba f0       	brmi	.+46     	; 0x50d6 <__addsf3x+0x98>
    50a8:	91 50       	subi	r25, 0x01	; 1
    50aa:	a1 f0       	breq	.+40     	; 0x50d4 <__addsf3x+0x96>
    50ac:	ff 0f       	add	r31, r31
    50ae:	bb 1f       	adc	r27, r27
    50b0:	66 1f       	adc	r22, r22
    50b2:	77 1f       	adc	r23, r23
    50b4:	88 1f       	adc	r24, r24
    50b6:	c2 f7       	brpl	.-16     	; 0x50a8 <__addsf3x+0x6a>
    50b8:	0e c0       	rjmp	.+28     	; 0x50d6 <__addsf3x+0x98>
    50ba:	ba 0f       	add	r27, r26
    50bc:	62 1f       	adc	r22, r18
    50be:	73 1f       	adc	r23, r19
    50c0:	84 1f       	adc	r24, r20
    50c2:	48 f4       	brcc	.+18     	; 0x50d6 <__addsf3x+0x98>
    50c4:	87 95       	ror	r24
    50c6:	77 95       	ror	r23
    50c8:	67 95       	ror	r22
    50ca:	b7 95       	ror	r27
    50cc:	f7 95       	ror	r31
    50ce:	9e 3f       	cpi	r25, 0xFE	; 254
    50d0:	08 f0       	brcs	.+2      	; 0x50d4 <__addsf3x+0x96>
    50d2:	b3 cf       	rjmp	.-154    	; 0x503a <__addsf3+0x1e>
    50d4:	93 95       	inc	r25
    50d6:	88 0f       	add	r24, r24
    50d8:	08 f0       	brcs	.+2      	; 0x50dc <__addsf3x+0x9e>
    50da:	99 27       	eor	r25, r25
    50dc:	ee 0f       	add	r30, r30
    50de:	97 95       	ror	r25
    50e0:	87 95       	ror	r24
    50e2:	08 95       	ret

000050e4 <__divsf3>:
    50e4:	0c d0       	rcall	.+24     	; 0x50fe <__divsf3x>
    50e6:	eb c0       	rjmp	.+470    	; 0x52be <__fp_round>
    50e8:	e3 d0       	rcall	.+454    	; 0x52b0 <__fp_pscB>
    50ea:	40 f0       	brcs	.+16     	; 0x50fc <__divsf3+0x18>
    50ec:	da d0       	rcall	.+436    	; 0x52a2 <__fp_pscA>
    50ee:	30 f0       	brcs	.+12     	; 0x50fc <__divsf3+0x18>
    50f0:	21 f4       	brne	.+8      	; 0x50fa <__divsf3+0x16>
    50f2:	5f 3f       	cpi	r21, 0xFF	; 255
    50f4:	19 f0       	breq	.+6      	; 0x50fc <__divsf3+0x18>
    50f6:	cc c0       	rjmp	.+408    	; 0x5290 <__fp_inf>
    50f8:	51 11       	cpse	r21, r1
    50fa:	15 c1       	rjmp	.+554    	; 0x5326 <__fp_szero>
    50fc:	cf c0       	rjmp	.+414    	; 0x529c <__fp_nan>

000050fe <__divsf3x>:
    50fe:	f0 d0       	rcall	.+480    	; 0x52e0 <__fp_split3>
    5100:	98 f3       	brcs	.-26     	; 0x50e8 <__divsf3+0x4>

00005102 <__divsf3_pse>:
    5102:	99 23       	and	r25, r25
    5104:	c9 f3       	breq	.-14     	; 0x50f8 <__divsf3+0x14>
    5106:	55 23       	and	r21, r21
    5108:	b1 f3       	breq	.-20     	; 0x50f6 <__divsf3+0x12>
    510a:	95 1b       	sub	r25, r21
    510c:	55 0b       	sbc	r21, r21
    510e:	bb 27       	eor	r27, r27
    5110:	aa 27       	eor	r26, r26
    5112:	62 17       	cp	r22, r18
    5114:	73 07       	cpc	r23, r19
    5116:	84 07       	cpc	r24, r20
    5118:	38 f0       	brcs	.+14     	; 0x5128 <__divsf3_pse+0x26>
    511a:	9f 5f       	subi	r25, 0xFF	; 255
    511c:	5f 4f       	sbci	r21, 0xFF	; 255
    511e:	22 0f       	add	r18, r18
    5120:	33 1f       	adc	r19, r19
    5122:	44 1f       	adc	r20, r20
    5124:	aa 1f       	adc	r26, r26
    5126:	a9 f3       	breq	.-22     	; 0x5112 <__divsf3_pse+0x10>
    5128:	33 d0       	rcall	.+102    	; 0x5190 <__divsf3_pse+0x8e>
    512a:	0e 2e       	mov	r0, r30
    512c:	3a f0       	brmi	.+14     	; 0x513c <__divsf3_pse+0x3a>
    512e:	e0 e8       	ldi	r30, 0x80	; 128
    5130:	30 d0       	rcall	.+96     	; 0x5192 <__divsf3_pse+0x90>
    5132:	91 50       	subi	r25, 0x01	; 1
    5134:	50 40       	sbci	r21, 0x00	; 0
    5136:	e6 95       	lsr	r30
    5138:	00 1c       	adc	r0, r0
    513a:	ca f7       	brpl	.-14     	; 0x512e <__divsf3_pse+0x2c>
    513c:	29 d0       	rcall	.+82     	; 0x5190 <__divsf3_pse+0x8e>
    513e:	fe 2f       	mov	r31, r30
    5140:	27 d0       	rcall	.+78     	; 0x5190 <__divsf3_pse+0x8e>
    5142:	66 0f       	add	r22, r22
    5144:	77 1f       	adc	r23, r23
    5146:	88 1f       	adc	r24, r24
    5148:	bb 1f       	adc	r27, r27
    514a:	26 17       	cp	r18, r22
    514c:	37 07       	cpc	r19, r23
    514e:	48 07       	cpc	r20, r24
    5150:	ab 07       	cpc	r26, r27
    5152:	b0 e8       	ldi	r27, 0x80	; 128
    5154:	09 f0       	breq	.+2      	; 0x5158 <__divsf3_pse+0x56>
    5156:	bb 0b       	sbc	r27, r27
    5158:	80 2d       	mov	r24, r0
    515a:	bf 01       	movw	r22, r30
    515c:	ff 27       	eor	r31, r31
    515e:	93 58       	subi	r25, 0x83	; 131
    5160:	5f 4f       	sbci	r21, 0xFF	; 255
    5162:	2a f0       	brmi	.+10     	; 0x516e <__divsf3_pse+0x6c>
    5164:	9e 3f       	cpi	r25, 0xFE	; 254
    5166:	51 05       	cpc	r21, r1
    5168:	68 f0       	brcs	.+26     	; 0x5184 <__divsf3_pse+0x82>
    516a:	92 c0       	rjmp	.+292    	; 0x5290 <__fp_inf>
    516c:	dc c0       	rjmp	.+440    	; 0x5326 <__fp_szero>
    516e:	5f 3f       	cpi	r21, 0xFF	; 255
    5170:	ec f3       	brlt	.-6      	; 0x516c <__divsf3_pse+0x6a>
    5172:	98 3e       	cpi	r25, 0xE8	; 232
    5174:	dc f3       	brlt	.-10     	; 0x516c <__divsf3_pse+0x6a>
    5176:	86 95       	lsr	r24
    5178:	77 95       	ror	r23
    517a:	67 95       	ror	r22
    517c:	b7 95       	ror	r27
    517e:	f7 95       	ror	r31
    5180:	9f 5f       	subi	r25, 0xFF	; 255
    5182:	c9 f7       	brne	.-14     	; 0x5176 <__divsf3_pse+0x74>
    5184:	88 0f       	add	r24, r24
    5186:	91 1d       	adc	r25, r1
    5188:	96 95       	lsr	r25
    518a:	87 95       	ror	r24
    518c:	97 f9       	bld	r25, 7
    518e:	08 95       	ret
    5190:	e1 e0       	ldi	r30, 0x01	; 1
    5192:	66 0f       	add	r22, r22
    5194:	77 1f       	adc	r23, r23
    5196:	88 1f       	adc	r24, r24
    5198:	bb 1f       	adc	r27, r27
    519a:	62 17       	cp	r22, r18
    519c:	73 07       	cpc	r23, r19
    519e:	84 07       	cpc	r24, r20
    51a0:	ba 07       	cpc	r27, r26
    51a2:	20 f0       	brcs	.+8      	; 0x51ac <__divsf3_pse+0xaa>
    51a4:	62 1b       	sub	r22, r18
    51a6:	73 0b       	sbc	r23, r19
    51a8:	84 0b       	sbc	r24, r20
    51aa:	ba 0b       	sbc	r27, r26
    51ac:	ee 1f       	adc	r30, r30
    51ae:	88 f7       	brcc	.-30     	; 0x5192 <__divsf3_pse+0x90>
    51b0:	e0 95       	com	r30
    51b2:	08 95       	ret

000051b4 <__fixsfsi>:
    51b4:	04 d0       	rcall	.+8      	; 0x51be <__fixunssfsi>
    51b6:	68 94       	set
    51b8:	b1 11       	cpse	r27, r1
    51ba:	b5 c0       	rjmp	.+362    	; 0x5326 <__fp_szero>
    51bc:	08 95       	ret

000051be <__fixunssfsi>:
    51be:	98 d0       	rcall	.+304    	; 0x52f0 <__fp_splitA>
    51c0:	88 f0       	brcs	.+34     	; 0x51e4 <__fixunssfsi+0x26>
    51c2:	9f 57       	subi	r25, 0x7F	; 127
    51c4:	90 f0       	brcs	.+36     	; 0x51ea <__fixunssfsi+0x2c>
    51c6:	b9 2f       	mov	r27, r25
    51c8:	99 27       	eor	r25, r25
    51ca:	b7 51       	subi	r27, 0x17	; 23
    51cc:	a0 f0       	brcs	.+40     	; 0x51f6 <__fixunssfsi+0x38>
    51ce:	d1 f0       	breq	.+52     	; 0x5204 <__fixunssfsi+0x46>
    51d0:	66 0f       	add	r22, r22
    51d2:	77 1f       	adc	r23, r23
    51d4:	88 1f       	adc	r24, r24
    51d6:	99 1f       	adc	r25, r25
    51d8:	1a f0       	brmi	.+6      	; 0x51e0 <__fixunssfsi+0x22>
    51da:	ba 95       	dec	r27
    51dc:	c9 f7       	brne	.-14     	; 0x51d0 <__fixunssfsi+0x12>
    51de:	12 c0       	rjmp	.+36     	; 0x5204 <__fixunssfsi+0x46>
    51e0:	b1 30       	cpi	r27, 0x01	; 1
    51e2:	81 f0       	breq	.+32     	; 0x5204 <__fixunssfsi+0x46>
    51e4:	9f d0       	rcall	.+318    	; 0x5324 <__fp_zero>
    51e6:	b1 e0       	ldi	r27, 0x01	; 1
    51e8:	08 95       	ret
    51ea:	9c c0       	rjmp	.+312    	; 0x5324 <__fp_zero>
    51ec:	67 2f       	mov	r22, r23
    51ee:	78 2f       	mov	r23, r24
    51f0:	88 27       	eor	r24, r24
    51f2:	b8 5f       	subi	r27, 0xF8	; 248
    51f4:	39 f0       	breq	.+14     	; 0x5204 <__fixunssfsi+0x46>
    51f6:	b9 3f       	cpi	r27, 0xF9	; 249
    51f8:	cc f3       	brlt	.-14     	; 0x51ec <__fixunssfsi+0x2e>
    51fa:	86 95       	lsr	r24
    51fc:	77 95       	ror	r23
    51fe:	67 95       	ror	r22
    5200:	b3 95       	inc	r27
    5202:	d9 f7       	brne	.-10     	; 0x51fa <__fixunssfsi+0x3c>
    5204:	3e f4       	brtc	.+14     	; 0x5214 <__fixunssfsi+0x56>
    5206:	90 95       	com	r25
    5208:	80 95       	com	r24
    520a:	70 95       	com	r23
    520c:	61 95       	neg	r22
    520e:	7f 4f       	sbci	r23, 0xFF	; 255
    5210:	8f 4f       	sbci	r24, 0xFF	; 255
    5212:	9f 4f       	sbci	r25, 0xFF	; 255
    5214:	08 95       	ret

00005216 <__floatunsisf>:
    5216:	e8 94       	clt
    5218:	09 c0       	rjmp	.+18     	; 0x522c <__floatsisf+0x12>

0000521a <__floatsisf>:
    521a:	97 fb       	bst	r25, 7
    521c:	3e f4       	brtc	.+14     	; 0x522c <__floatsisf+0x12>
    521e:	90 95       	com	r25
    5220:	80 95       	com	r24
    5222:	70 95       	com	r23
    5224:	61 95       	neg	r22
    5226:	7f 4f       	sbci	r23, 0xFF	; 255
    5228:	8f 4f       	sbci	r24, 0xFF	; 255
    522a:	9f 4f       	sbci	r25, 0xFF	; 255
    522c:	99 23       	and	r25, r25
    522e:	a9 f0       	breq	.+42     	; 0x525a <__floatsisf+0x40>
    5230:	f9 2f       	mov	r31, r25
    5232:	96 e9       	ldi	r25, 0x96	; 150
    5234:	bb 27       	eor	r27, r27
    5236:	93 95       	inc	r25
    5238:	f6 95       	lsr	r31
    523a:	87 95       	ror	r24
    523c:	77 95       	ror	r23
    523e:	67 95       	ror	r22
    5240:	b7 95       	ror	r27
    5242:	f1 11       	cpse	r31, r1
    5244:	f8 cf       	rjmp	.-16     	; 0x5236 <__floatsisf+0x1c>
    5246:	fa f4       	brpl	.+62     	; 0x5286 <__floatsisf+0x6c>
    5248:	bb 0f       	add	r27, r27
    524a:	11 f4       	brne	.+4      	; 0x5250 <__floatsisf+0x36>
    524c:	60 ff       	sbrs	r22, 0
    524e:	1b c0       	rjmp	.+54     	; 0x5286 <__floatsisf+0x6c>
    5250:	6f 5f       	subi	r22, 0xFF	; 255
    5252:	7f 4f       	sbci	r23, 0xFF	; 255
    5254:	8f 4f       	sbci	r24, 0xFF	; 255
    5256:	9f 4f       	sbci	r25, 0xFF	; 255
    5258:	16 c0       	rjmp	.+44     	; 0x5286 <__floatsisf+0x6c>
    525a:	88 23       	and	r24, r24
    525c:	11 f0       	breq	.+4      	; 0x5262 <__floatsisf+0x48>
    525e:	96 e9       	ldi	r25, 0x96	; 150
    5260:	11 c0       	rjmp	.+34     	; 0x5284 <__floatsisf+0x6a>
    5262:	77 23       	and	r23, r23
    5264:	21 f0       	breq	.+8      	; 0x526e <__floatsisf+0x54>
    5266:	9e e8       	ldi	r25, 0x8E	; 142
    5268:	87 2f       	mov	r24, r23
    526a:	76 2f       	mov	r23, r22
    526c:	05 c0       	rjmp	.+10     	; 0x5278 <__floatsisf+0x5e>
    526e:	66 23       	and	r22, r22
    5270:	71 f0       	breq	.+28     	; 0x528e <__floatsisf+0x74>
    5272:	96 e8       	ldi	r25, 0x86	; 134
    5274:	86 2f       	mov	r24, r22
    5276:	70 e0       	ldi	r23, 0x00	; 0
    5278:	60 e0       	ldi	r22, 0x00	; 0
    527a:	2a f0       	brmi	.+10     	; 0x5286 <__floatsisf+0x6c>
    527c:	9a 95       	dec	r25
    527e:	66 0f       	add	r22, r22
    5280:	77 1f       	adc	r23, r23
    5282:	88 1f       	adc	r24, r24
    5284:	da f7       	brpl	.-10     	; 0x527c <__floatsisf+0x62>
    5286:	88 0f       	add	r24, r24
    5288:	96 95       	lsr	r25
    528a:	87 95       	ror	r24
    528c:	97 f9       	bld	r25, 7
    528e:	08 95       	ret

00005290 <__fp_inf>:
    5290:	97 f9       	bld	r25, 7
    5292:	9f 67       	ori	r25, 0x7F	; 127
    5294:	80 e8       	ldi	r24, 0x80	; 128
    5296:	70 e0       	ldi	r23, 0x00	; 0
    5298:	60 e0       	ldi	r22, 0x00	; 0
    529a:	08 95       	ret

0000529c <__fp_nan>:
    529c:	9f ef       	ldi	r25, 0xFF	; 255
    529e:	80 ec       	ldi	r24, 0xC0	; 192
    52a0:	08 95       	ret

000052a2 <__fp_pscA>:
    52a2:	00 24       	eor	r0, r0
    52a4:	0a 94       	dec	r0
    52a6:	16 16       	cp	r1, r22
    52a8:	17 06       	cpc	r1, r23
    52aa:	18 06       	cpc	r1, r24
    52ac:	09 06       	cpc	r0, r25
    52ae:	08 95       	ret

000052b0 <__fp_pscB>:
    52b0:	00 24       	eor	r0, r0
    52b2:	0a 94       	dec	r0
    52b4:	12 16       	cp	r1, r18
    52b6:	13 06       	cpc	r1, r19
    52b8:	14 06       	cpc	r1, r20
    52ba:	05 06       	cpc	r0, r21
    52bc:	08 95       	ret

000052be <__fp_round>:
    52be:	09 2e       	mov	r0, r25
    52c0:	03 94       	inc	r0
    52c2:	00 0c       	add	r0, r0
    52c4:	11 f4       	brne	.+4      	; 0x52ca <__fp_round+0xc>
    52c6:	88 23       	and	r24, r24
    52c8:	52 f0       	brmi	.+20     	; 0x52de <__fp_round+0x20>
    52ca:	bb 0f       	add	r27, r27
    52cc:	40 f4       	brcc	.+16     	; 0x52de <__fp_round+0x20>
    52ce:	bf 2b       	or	r27, r31
    52d0:	11 f4       	brne	.+4      	; 0x52d6 <__fp_round+0x18>
    52d2:	60 ff       	sbrs	r22, 0
    52d4:	04 c0       	rjmp	.+8      	; 0x52de <__fp_round+0x20>
    52d6:	6f 5f       	subi	r22, 0xFF	; 255
    52d8:	7f 4f       	sbci	r23, 0xFF	; 255
    52da:	8f 4f       	sbci	r24, 0xFF	; 255
    52dc:	9f 4f       	sbci	r25, 0xFF	; 255
    52de:	08 95       	ret

000052e0 <__fp_split3>:
    52e0:	57 fd       	sbrc	r21, 7
    52e2:	90 58       	subi	r25, 0x80	; 128
    52e4:	44 0f       	add	r20, r20
    52e6:	55 1f       	adc	r21, r21
    52e8:	59 f0       	breq	.+22     	; 0x5300 <__fp_splitA+0x10>
    52ea:	5f 3f       	cpi	r21, 0xFF	; 255
    52ec:	71 f0       	breq	.+28     	; 0x530a <__fp_splitA+0x1a>
    52ee:	47 95       	ror	r20

000052f0 <__fp_splitA>:
    52f0:	88 0f       	add	r24, r24
    52f2:	97 fb       	bst	r25, 7
    52f4:	99 1f       	adc	r25, r25
    52f6:	61 f0       	breq	.+24     	; 0x5310 <__fp_splitA+0x20>
    52f8:	9f 3f       	cpi	r25, 0xFF	; 255
    52fa:	79 f0       	breq	.+30     	; 0x531a <__fp_splitA+0x2a>
    52fc:	87 95       	ror	r24
    52fe:	08 95       	ret
    5300:	12 16       	cp	r1, r18
    5302:	13 06       	cpc	r1, r19
    5304:	14 06       	cpc	r1, r20
    5306:	55 1f       	adc	r21, r21
    5308:	f2 cf       	rjmp	.-28     	; 0x52ee <__fp_split3+0xe>
    530a:	46 95       	lsr	r20
    530c:	f1 df       	rcall	.-30     	; 0x52f0 <__fp_splitA>
    530e:	08 c0       	rjmp	.+16     	; 0x5320 <__fp_splitA+0x30>
    5310:	16 16       	cp	r1, r22
    5312:	17 06       	cpc	r1, r23
    5314:	18 06       	cpc	r1, r24
    5316:	99 1f       	adc	r25, r25
    5318:	f1 cf       	rjmp	.-30     	; 0x52fc <__fp_splitA+0xc>
    531a:	86 95       	lsr	r24
    531c:	71 05       	cpc	r23, r1
    531e:	61 05       	cpc	r22, r1
    5320:	08 94       	sec
    5322:	08 95       	ret

00005324 <__fp_zero>:
    5324:	e8 94       	clt

00005326 <__fp_szero>:
    5326:	bb 27       	eor	r27, r27
    5328:	66 27       	eor	r22, r22
    532a:	77 27       	eor	r23, r23
    532c:	cb 01       	movw	r24, r22
    532e:	97 f9       	bld	r25, 7
    5330:	08 95       	ret

00005332 <__gesf2>:
    5332:	66 d0       	rcall	.+204    	; 0x5400 <__fp_cmp>
    5334:	08 f4       	brcc	.+2      	; 0x5338 <__gesf2+0x6>
    5336:	8f ef       	ldi	r24, 0xFF	; 255
    5338:	08 95       	ret

0000533a <__mulsf3>:
    533a:	0b d0       	rcall	.+22     	; 0x5352 <__mulsf3x>
    533c:	c0 cf       	rjmp	.-128    	; 0x52be <__fp_round>
    533e:	b1 df       	rcall	.-158    	; 0x52a2 <__fp_pscA>
    5340:	28 f0       	brcs	.+10     	; 0x534c <__mulsf3+0x12>
    5342:	b6 df       	rcall	.-148    	; 0x52b0 <__fp_pscB>
    5344:	18 f0       	brcs	.+6      	; 0x534c <__mulsf3+0x12>
    5346:	95 23       	and	r25, r21
    5348:	09 f0       	breq	.+2      	; 0x534c <__mulsf3+0x12>
    534a:	a2 cf       	rjmp	.-188    	; 0x5290 <__fp_inf>
    534c:	a7 cf       	rjmp	.-178    	; 0x529c <__fp_nan>
    534e:	11 24       	eor	r1, r1
    5350:	ea cf       	rjmp	.-44     	; 0x5326 <__fp_szero>

00005352 <__mulsf3x>:
    5352:	c6 df       	rcall	.-116    	; 0x52e0 <__fp_split3>
    5354:	a0 f3       	brcs	.-24     	; 0x533e <__mulsf3+0x4>

00005356 <__mulsf3_pse>:
    5356:	95 9f       	mul	r25, r21
    5358:	d1 f3       	breq	.-12     	; 0x534e <__mulsf3+0x14>
    535a:	95 0f       	add	r25, r21
    535c:	50 e0       	ldi	r21, 0x00	; 0
    535e:	55 1f       	adc	r21, r21
    5360:	62 9f       	mul	r22, r18
    5362:	f0 01       	movw	r30, r0
    5364:	72 9f       	mul	r23, r18
    5366:	bb 27       	eor	r27, r27
    5368:	f0 0d       	add	r31, r0
    536a:	b1 1d       	adc	r27, r1
    536c:	63 9f       	mul	r22, r19
    536e:	aa 27       	eor	r26, r26
    5370:	f0 0d       	add	r31, r0
    5372:	b1 1d       	adc	r27, r1
    5374:	aa 1f       	adc	r26, r26
    5376:	64 9f       	mul	r22, r20
    5378:	66 27       	eor	r22, r22
    537a:	b0 0d       	add	r27, r0
    537c:	a1 1d       	adc	r26, r1
    537e:	66 1f       	adc	r22, r22
    5380:	82 9f       	mul	r24, r18
    5382:	22 27       	eor	r18, r18
    5384:	b0 0d       	add	r27, r0
    5386:	a1 1d       	adc	r26, r1
    5388:	62 1f       	adc	r22, r18
    538a:	73 9f       	mul	r23, r19
    538c:	b0 0d       	add	r27, r0
    538e:	a1 1d       	adc	r26, r1
    5390:	62 1f       	adc	r22, r18
    5392:	83 9f       	mul	r24, r19
    5394:	a0 0d       	add	r26, r0
    5396:	61 1d       	adc	r22, r1
    5398:	22 1f       	adc	r18, r18
    539a:	74 9f       	mul	r23, r20
    539c:	33 27       	eor	r19, r19
    539e:	a0 0d       	add	r26, r0
    53a0:	61 1d       	adc	r22, r1
    53a2:	23 1f       	adc	r18, r19
    53a4:	84 9f       	mul	r24, r20
    53a6:	60 0d       	add	r22, r0
    53a8:	21 1d       	adc	r18, r1
    53aa:	82 2f       	mov	r24, r18
    53ac:	76 2f       	mov	r23, r22
    53ae:	6a 2f       	mov	r22, r26
    53b0:	11 24       	eor	r1, r1
    53b2:	9f 57       	subi	r25, 0x7F	; 127
    53b4:	50 40       	sbci	r21, 0x00	; 0
    53b6:	8a f0       	brmi	.+34     	; 0x53da <__mulsf3_pse+0x84>
    53b8:	e1 f0       	breq	.+56     	; 0x53f2 <__mulsf3_pse+0x9c>
    53ba:	88 23       	and	r24, r24
    53bc:	4a f0       	brmi	.+18     	; 0x53d0 <__mulsf3_pse+0x7a>
    53be:	ee 0f       	add	r30, r30
    53c0:	ff 1f       	adc	r31, r31
    53c2:	bb 1f       	adc	r27, r27
    53c4:	66 1f       	adc	r22, r22
    53c6:	77 1f       	adc	r23, r23
    53c8:	88 1f       	adc	r24, r24
    53ca:	91 50       	subi	r25, 0x01	; 1
    53cc:	50 40       	sbci	r21, 0x00	; 0
    53ce:	a9 f7       	brne	.-22     	; 0x53ba <__mulsf3_pse+0x64>
    53d0:	9e 3f       	cpi	r25, 0xFE	; 254
    53d2:	51 05       	cpc	r21, r1
    53d4:	70 f0       	brcs	.+28     	; 0x53f2 <__mulsf3_pse+0x9c>
    53d6:	5c cf       	rjmp	.-328    	; 0x5290 <__fp_inf>
    53d8:	a6 cf       	rjmp	.-180    	; 0x5326 <__fp_szero>
    53da:	5f 3f       	cpi	r21, 0xFF	; 255
    53dc:	ec f3       	brlt	.-6      	; 0x53d8 <__mulsf3_pse+0x82>
    53de:	98 3e       	cpi	r25, 0xE8	; 232
    53e0:	dc f3       	brlt	.-10     	; 0x53d8 <__mulsf3_pse+0x82>
    53e2:	86 95       	lsr	r24
    53e4:	77 95       	ror	r23
    53e6:	67 95       	ror	r22
    53e8:	b7 95       	ror	r27
    53ea:	f7 95       	ror	r31
    53ec:	e7 95       	ror	r30
    53ee:	9f 5f       	subi	r25, 0xFF	; 255
    53f0:	c1 f7       	brne	.-16     	; 0x53e2 <__mulsf3_pse+0x8c>
    53f2:	fe 2b       	or	r31, r30
    53f4:	88 0f       	add	r24, r24
    53f6:	91 1d       	adc	r25, r1
    53f8:	96 95       	lsr	r25
    53fa:	87 95       	ror	r24
    53fc:	97 f9       	bld	r25, 7
    53fe:	08 95       	ret

00005400 <__fp_cmp>:
    5400:	99 0f       	add	r25, r25
    5402:	00 08       	sbc	r0, r0
    5404:	55 0f       	add	r21, r21
    5406:	aa 0b       	sbc	r26, r26
    5408:	e0 e8       	ldi	r30, 0x80	; 128
    540a:	fe ef       	ldi	r31, 0xFE	; 254
    540c:	16 16       	cp	r1, r22
    540e:	17 06       	cpc	r1, r23
    5410:	e8 07       	cpc	r30, r24
    5412:	f9 07       	cpc	r31, r25
    5414:	c0 f0       	brcs	.+48     	; 0x5446 <__fp_cmp+0x46>
    5416:	12 16       	cp	r1, r18
    5418:	13 06       	cpc	r1, r19
    541a:	e4 07       	cpc	r30, r20
    541c:	f5 07       	cpc	r31, r21
    541e:	98 f0       	brcs	.+38     	; 0x5446 <__fp_cmp+0x46>
    5420:	62 1b       	sub	r22, r18
    5422:	73 0b       	sbc	r23, r19
    5424:	84 0b       	sbc	r24, r20
    5426:	95 0b       	sbc	r25, r21
    5428:	39 f4       	brne	.+14     	; 0x5438 <__fp_cmp+0x38>
    542a:	0a 26       	eor	r0, r26
    542c:	61 f0       	breq	.+24     	; 0x5446 <__fp_cmp+0x46>
    542e:	23 2b       	or	r18, r19
    5430:	24 2b       	or	r18, r20
    5432:	25 2b       	or	r18, r21
    5434:	21 f4       	brne	.+8      	; 0x543e <__fp_cmp+0x3e>
    5436:	08 95       	ret
    5438:	0a 26       	eor	r0, r26
    543a:	09 f4       	brne	.+2      	; 0x543e <__fp_cmp+0x3e>
    543c:	a1 40       	sbci	r26, 0x01	; 1
    543e:	a6 95       	lsr	r26
    5440:	8f ef       	ldi	r24, 0xFF	; 255
    5442:	81 1d       	adc	r24, r1
    5444:	81 1d       	adc	r24, r1
    5446:	08 95       	ret

00005448 <__udivmodsi4>:
    5448:	a1 e2       	ldi	r26, 0x21	; 33
    544a:	1a 2e       	mov	r1, r26
    544c:	aa 1b       	sub	r26, r26
    544e:	bb 1b       	sub	r27, r27
    5450:	fd 01       	movw	r30, r26
    5452:	0d c0       	rjmp	.+26     	; 0x546e <__udivmodsi4_ep>

00005454 <__udivmodsi4_loop>:
    5454:	aa 1f       	adc	r26, r26
    5456:	bb 1f       	adc	r27, r27
    5458:	ee 1f       	adc	r30, r30
    545a:	ff 1f       	adc	r31, r31
    545c:	a2 17       	cp	r26, r18
    545e:	b3 07       	cpc	r27, r19
    5460:	e4 07       	cpc	r30, r20
    5462:	f5 07       	cpc	r31, r21
    5464:	20 f0       	brcs	.+8      	; 0x546e <__udivmodsi4_ep>
    5466:	a2 1b       	sub	r26, r18
    5468:	b3 0b       	sbc	r27, r19
    546a:	e4 0b       	sbc	r30, r20
    546c:	f5 0b       	sbc	r31, r21

0000546e <__udivmodsi4_ep>:
    546e:	66 1f       	adc	r22, r22
    5470:	77 1f       	adc	r23, r23
    5472:	88 1f       	adc	r24, r24
    5474:	99 1f       	adc	r25, r25
    5476:	1a 94       	dec	r1
    5478:	69 f7       	brne	.-38     	; 0x5454 <__udivmodsi4_loop>
    547a:	60 95       	com	r22
    547c:	70 95       	com	r23
    547e:	80 95       	com	r24
    5480:	90 95       	com	r25
    5482:	9b 01       	movw	r18, r22
    5484:	ac 01       	movw	r20, r24
    5486:	bd 01       	movw	r22, r26
    5488:	cf 01       	movw	r24, r30
    548a:	08 95       	ret

0000548c <__tablejump2__>:
    548c:	ee 0f       	add	r30, r30
    548e:	ff 1f       	adc	r31, r31
    5490:	88 1f       	adc	r24, r24
    5492:	8b bf       	out	0x3b, r24	; 59
    5494:	07 90       	elpm	r0, Z+
    5496:	f6 91       	elpm	r31, Z
    5498:	e0 2d       	mov	r30, r0
    549a:	19 94       	eijmp

0000549c <malloc>:
    549c:	0f 93       	push	r16
    549e:	1f 93       	push	r17
    54a0:	cf 93       	push	r28
    54a2:	df 93       	push	r29
    54a4:	82 30       	cpi	r24, 0x02	; 2
    54a6:	91 05       	cpc	r25, r1
    54a8:	10 f4       	brcc	.+4      	; 0x54ae <malloc+0x12>
    54aa:	82 e0       	ldi	r24, 0x02	; 2
    54ac:	90 e0       	ldi	r25, 0x00	; 0
    54ae:	e0 91 90 17 	lds	r30, 0x1790	; 0x801790 <__flp>
    54b2:	f0 91 91 17 	lds	r31, 0x1791	; 0x801791 <__flp+0x1>
    54b6:	20 e0       	ldi	r18, 0x00	; 0
    54b8:	30 e0       	ldi	r19, 0x00	; 0
    54ba:	a0 e0       	ldi	r26, 0x00	; 0
    54bc:	b0 e0       	ldi	r27, 0x00	; 0
    54be:	30 97       	sbiw	r30, 0x00	; 0
    54c0:	19 f1       	breq	.+70     	; 0x5508 <malloc+0x6c>
    54c2:	40 81       	ld	r20, Z
    54c4:	51 81       	ldd	r21, Z+1	; 0x01
    54c6:	02 81       	ldd	r16, Z+2	; 0x02
    54c8:	13 81       	ldd	r17, Z+3	; 0x03
    54ca:	48 17       	cp	r20, r24
    54cc:	59 07       	cpc	r21, r25
    54ce:	c8 f0       	brcs	.+50     	; 0x5502 <malloc+0x66>
    54d0:	84 17       	cp	r24, r20
    54d2:	95 07       	cpc	r25, r21
    54d4:	69 f4       	brne	.+26     	; 0x54f0 <malloc+0x54>
    54d6:	10 97       	sbiw	r26, 0x00	; 0
    54d8:	31 f0       	breq	.+12     	; 0x54e6 <malloc+0x4a>
    54da:	12 96       	adiw	r26, 0x02	; 2
    54dc:	0c 93       	st	X, r16
    54de:	12 97       	sbiw	r26, 0x02	; 2
    54e0:	13 96       	adiw	r26, 0x03	; 3
    54e2:	1c 93       	st	X, r17
    54e4:	27 c0       	rjmp	.+78     	; 0x5534 <malloc+0x98>
    54e6:	00 93 90 17 	sts	0x1790, r16	; 0x801790 <__flp>
    54ea:	10 93 91 17 	sts	0x1791, r17	; 0x801791 <__flp+0x1>
    54ee:	22 c0       	rjmp	.+68     	; 0x5534 <malloc+0x98>
    54f0:	21 15       	cp	r18, r1
    54f2:	31 05       	cpc	r19, r1
    54f4:	19 f0       	breq	.+6      	; 0x54fc <malloc+0x60>
    54f6:	42 17       	cp	r20, r18
    54f8:	53 07       	cpc	r21, r19
    54fa:	18 f4       	brcc	.+6      	; 0x5502 <malloc+0x66>
    54fc:	9a 01       	movw	r18, r20
    54fe:	bd 01       	movw	r22, r26
    5500:	ef 01       	movw	r28, r30
    5502:	df 01       	movw	r26, r30
    5504:	f8 01       	movw	r30, r16
    5506:	db cf       	rjmp	.-74     	; 0x54be <malloc+0x22>
    5508:	21 15       	cp	r18, r1
    550a:	31 05       	cpc	r19, r1
    550c:	f9 f0       	breq	.+62     	; 0x554c <malloc+0xb0>
    550e:	28 1b       	sub	r18, r24
    5510:	39 0b       	sbc	r19, r25
    5512:	24 30       	cpi	r18, 0x04	; 4
    5514:	31 05       	cpc	r19, r1
    5516:	80 f4       	brcc	.+32     	; 0x5538 <malloc+0x9c>
    5518:	8a 81       	ldd	r24, Y+2	; 0x02
    551a:	9b 81       	ldd	r25, Y+3	; 0x03
    551c:	61 15       	cp	r22, r1
    551e:	71 05       	cpc	r23, r1
    5520:	21 f0       	breq	.+8      	; 0x552a <malloc+0x8e>
    5522:	fb 01       	movw	r30, r22
    5524:	93 83       	std	Z+3, r25	; 0x03
    5526:	82 83       	std	Z+2, r24	; 0x02
    5528:	04 c0       	rjmp	.+8      	; 0x5532 <malloc+0x96>
    552a:	90 93 91 17 	sts	0x1791, r25	; 0x801791 <__flp+0x1>
    552e:	80 93 90 17 	sts	0x1790, r24	; 0x801790 <__flp>
    5532:	fe 01       	movw	r30, r28
    5534:	32 96       	adiw	r30, 0x02	; 2
    5536:	44 c0       	rjmp	.+136    	; 0x55c0 <malloc+0x124>
    5538:	fe 01       	movw	r30, r28
    553a:	e2 0f       	add	r30, r18
    553c:	f3 1f       	adc	r31, r19
    553e:	81 93       	st	Z+, r24
    5540:	91 93       	st	Z+, r25
    5542:	22 50       	subi	r18, 0x02	; 2
    5544:	31 09       	sbc	r19, r1
    5546:	39 83       	std	Y+1, r19	; 0x01
    5548:	28 83       	st	Y, r18
    554a:	3a c0       	rjmp	.+116    	; 0x55c0 <malloc+0x124>
    554c:	20 91 8e 17 	lds	r18, 0x178E	; 0x80178e <__brkval>
    5550:	30 91 8f 17 	lds	r19, 0x178F	; 0x80178f <__brkval+0x1>
    5554:	23 2b       	or	r18, r19
    5556:	41 f4       	brne	.+16     	; 0x5568 <malloc+0xcc>
    5558:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    555c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5560:	30 93 8f 17 	sts	0x178F, r19	; 0x80178f <__brkval+0x1>
    5564:	20 93 8e 17 	sts	0x178E, r18	; 0x80178e <__brkval>
    5568:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    556c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5570:	21 15       	cp	r18, r1
    5572:	31 05       	cpc	r19, r1
    5574:	41 f4       	brne	.+16     	; 0x5586 <malloc+0xea>
    5576:	2d b7       	in	r18, 0x3d	; 61
    5578:	3e b7       	in	r19, 0x3e	; 62
    557a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    557e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5582:	24 1b       	sub	r18, r20
    5584:	35 0b       	sbc	r19, r21
    5586:	e0 91 8e 17 	lds	r30, 0x178E	; 0x80178e <__brkval>
    558a:	f0 91 8f 17 	lds	r31, 0x178F	; 0x80178f <__brkval+0x1>
    558e:	e2 17       	cp	r30, r18
    5590:	f3 07       	cpc	r31, r19
    5592:	a0 f4       	brcc	.+40     	; 0x55bc <malloc+0x120>
    5594:	2e 1b       	sub	r18, r30
    5596:	3f 0b       	sbc	r19, r31
    5598:	28 17       	cp	r18, r24
    559a:	39 07       	cpc	r19, r25
    559c:	78 f0       	brcs	.+30     	; 0x55bc <malloc+0x120>
    559e:	ac 01       	movw	r20, r24
    55a0:	4e 5f       	subi	r20, 0xFE	; 254
    55a2:	5f 4f       	sbci	r21, 0xFF	; 255
    55a4:	24 17       	cp	r18, r20
    55a6:	35 07       	cpc	r19, r21
    55a8:	48 f0       	brcs	.+18     	; 0x55bc <malloc+0x120>
    55aa:	4e 0f       	add	r20, r30
    55ac:	5f 1f       	adc	r21, r31
    55ae:	50 93 8f 17 	sts	0x178F, r21	; 0x80178f <__brkval+0x1>
    55b2:	40 93 8e 17 	sts	0x178E, r20	; 0x80178e <__brkval>
    55b6:	81 93       	st	Z+, r24
    55b8:	91 93       	st	Z+, r25
    55ba:	02 c0       	rjmp	.+4      	; 0x55c0 <malloc+0x124>
    55bc:	e0 e0       	ldi	r30, 0x00	; 0
    55be:	f0 e0       	ldi	r31, 0x00	; 0
    55c0:	cf 01       	movw	r24, r30
    55c2:	df 91       	pop	r29
    55c4:	cf 91       	pop	r28
    55c6:	1f 91       	pop	r17
    55c8:	0f 91       	pop	r16
    55ca:	08 95       	ret

000055cc <free>:
    55cc:	cf 93       	push	r28
    55ce:	df 93       	push	r29
    55d0:	00 97       	sbiw	r24, 0x00	; 0
    55d2:	09 f4       	brne	.+2      	; 0x55d6 <free+0xa>
    55d4:	81 c0       	rjmp	.+258    	; 0x56d8 <free+0x10c>
    55d6:	fc 01       	movw	r30, r24
    55d8:	32 97       	sbiw	r30, 0x02	; 2
    55da:	13 82       	std	Z+3, r1	; 0x03
    55dc:	12 82       	std	Z+2, r1	; 0x02
    55de:	a0 91 90 17 	lds	r26, 0x1790	; 0x801790 <__flp>
    55e2:	b0 91 91 17 	lds	r27, 0x1791	; 0x801791 <__flp+0x1>
    55e6:	10 97       	sbiw	r26, 0x00	; 0
    55e8:	81 f4       	brne	.+32     	; 0x560a <free+0x3e>
    55ea:	20 81       	ld	r18, Z
    55ec:	31 81       	ldd	r19, Z+1	; 0x01
    55ee:	82 0f       	add	r24, r18
    55f0:	93 1f       	adc	r25, r19
    55f2:	20 91 8e 17 	lds	r18, 0x178E	; 0x80178e <__brkval>
    55f6:	30 91 8f 17 	lds	r19, 0x178F	; 0x80178f <__brkval+0x1>
    55fa:	28 17       	cp	r18, r24
    55fc:	39 07       	cpc	r19, r25
    55fe:	51 f5       	brne	.+84     	; 0x5654 <free+0x88>
    5600:	f0 93 8f 17 	sts	0x178F, r31	; 0x80178f <__brkval+0x1>
    5604:	e0 93 8e 17 	sts	0x178E, r30	; 0x80178e <__brkval>
    5608:	67 c0       	rjmp	.+206    	; 0x56d8 <free+0x10c>
    560a:	ed 01       	movw	r28, r26
    560c:	20 e0       	ldi	r18, 0x00	; 0
    560e:	30 e0       	ldi	r19, 0x00	; 0
    5610:	ce 17       	cp	r28, r30
    5612:	df 07       	cpc	r29, r31
    5614:	40 f4       	brcc	.+16     	; 0x5626 <free+0x5a>
    5616:	4a 81       	ldd	r20, Y+2	; 0x02
    5618:	5b 81       	ldd	r21, Y+3	; 0x03
    561a:	9e 01       	movw	r18, r28
    561c:	41 15       	cp	r20, r1
    561e:	51 05       	cpc	r21, r1
    5620:	f1 f0       	breq	.+60     	; 0x565e <free+0x92>
    5622:	ea 01       	movw	r28, r20
    5624:	f5 cf       	rjmp	.-22     	; 0x5610 <free+0x44>
    5626:	d3 83       	std	Z+3, r29	; 0x03
    5628:	c2 83       	std	Z+2, r28	; 0x02
    562a:	40 81       	ld	r20, Z
    562c:	51 81       	ldd	r21, Z+1	; 0x01
    562e:	84 0f       	add	r24, r20
    5630:	95 1f       	adc	r25, r21
    5632:	c8 17       	cp	r28, r24
    5634:	d9 07       	cpc	r29, r25
    5636:	59 f4       	brne	.+22     	; 0x564e <free+0x82>
    5638:	88 81       	ld	r24, Y
    563a:	99 81       	ldd	r25, Y+1	; 0x01
    563c:	84 0f       	add	r24, r20
    563e:	95 1f       	adc	r25, r21
    5640:	02 96       	adiw	r24, 0x02	; 2
    5642:	91 83       	std	Z+1, r25	; 0x01
    5644:	80 83       	st	Z, r24
    5646:	8a 81       	ldd	r24, Y+2	; 0x02
    5648:	9b 81       	ldd	r25, Y+3	; 0x03
    564a:	93 83       	std	Z+3, r25	; 0x03
    564c:	82 83       	std	Z+2, r24	; 0x02
    564e:	21 15       	cp	r18, r1
    5650:	31 05       	cpc	r19, r1
    5652:	29 f4       	brne	.+10     	; 0x565e <free+0x92>
    5654:	f0 93 91 17 	sts	0x1791, r31	; 0x801791 <__flp+0x1>
    5658:	e0 93 90 17 	sts	0x1790, r30	; 0x801790 <__flp>
    565c:	3d c0       	rjmp	.+122    	; 0x56d8 <free+0x10c>
    565e:	e9 01       	movw	r28, r18
    5660:	fb 83       	std	Y+3, r31	; 0x03
    5662:	ea 83       	std	Y+2, r30	; 0x02
    5664:	49 91       	ld	r20, Y+
    5666:	59 91       	ld	r21, Y+
    5668:	c4 0f       	add	r28, r20
    566a:	d5 1f       	adc	r29, r21
    566c:	ec 17       	cp	r30, r28
    566e:	fd 07       	cpc	r31, r29
    5670:	61 f4       	brne	.+24     	; 0x568a <free+0xbe>
    5672:	80 81       	ld	r24, Z
    5674:	91 81       	ldd	r25, Z+1	; 0x01
    5676:	84 0f       	add	r24, r20
    5678:	95 1f       	adc	r25, r21
    567a:	02 96       	adiw	r24, 0x02	; 2
    567c:	e9 01       	movw	r28, r18
    567e:	99 83       	std	Y+1, r25	; 0x01
    5680:	88 83       	st	Y, r24
    5682:	82 81       	ldd	r24, Z+2	; 0x02
    5684:	93 81       	ldd	r25, Z+3	; 0x03
    5686:	9b 83       	std	Y+3, r25	; 0x03
    5688:	8a 83       	std	Y+2, r24	; 0x02
    568a:	e0 e0       	ldi	r30, 0x00	; 0
    568c:	f0 e0       	ldi	r31, 0x00	; 0
    568e:	12 96       	adiw	r26, 0x02	; 2
    5690:	8d 91       	ld	r24, X+
    5692:	9c 91       	ld	r25, X
    5694:	13 97       	sbiw	r26, 0x03	; 3
    5696:	00 97       	sbiw	r24, 0x00	; 0
    5698:	19 f0       	breq	.+6      	; 0x56a0 <free+0xd4>
    569a:	fd 01       	movw	r30, r26
    569c:	dc 01       	movw	r26, r24
    569e:	f7 cf       	rjmp	.-18     	; 0x568e <free+0xc2>
    56a0:	8d 91       	ld	r24, X+
    56a2:	9c 91       	ld	r25, X
    56a4:	11 97       	sbiw	r26, 0x01	; 1
    56a6:	9d 01       	movw	r18, r26
    56a8:	2e 5f       	subi	r18, 0xFE	; 254
    56aa:	3f 4f       	sbci	r19, 0xFF	; 255
    56ac:	82 0f       	add	r24, r18
    56ae:	93 1f       	adc	r25, r19
    56b0:	20 91 8e 17 	lds	r18, 0x178E	; 0x80178e <__brkval>
    56b4:	30 91 8f 17 	lds	r19, 0x178F	; 0x80178f <__brkval+0x1>
    56b8:	28 17       	cp	r18, r24
    56ba:	39 07       	cpc	r19, r25
    56bc:	69 f4       	brne	.+26     	; 0x56d8 <free+0x10c>
    56be:	30 97       	sbiw	r30, 0x00	; 0
    56c0:	29 f4       	brne	.+10     	; 0x56cc <free+0x100>
    56c2:	10 92 91 17 	sts	0x1791, r1	; 0x801791 <__flp+0x1>
    56c6:	10 92 90 17 	sts	0x1790, r1	; 0x801790 <__flp>
    56ca:	02 c0       	rjmp	.+4      	; 0x56d0 <free+0x104>
    56cc:	13 82       	std	Z+3, r1	; 0x03
    56ce:	12 82       	std	Z+2, r1	; 0x02
    56d0:	b0 93 8f 17 	sts	0x178F, r27	; 0x80178f <__brkval+0x1>
    56d4:	a0 93 8e 17 	sts	0x178E, r26	; 0x80178e <__brkval>
    56d8:	df 91       	pop	r29
    56da:	cf 91       	pop	r28
    56dc:	08 95       	ret

000056de <abort>:
    56de:	81 e0       	ldi	r24, 0x01	; 1
    56e0:	90 e0       	ldi	r25, 0x00	; 0
    56e2:	f8 94       	cli
    56e4:	7d c3       	rjmp	.+1786   	; 0x5de0 <_exit>

000056e6 <memcpy>:
    56e6:	fb 01       	movw	r30, r22
    56e8:	dc 01       	movw	r26, r24
    56ea:	02 c0       	rjmp	.+4      	; 0x56f0 <memcpy+0xa>
    56ec:	01 90       	ld	r0, Z+
    56ee:	0d 92       	st	X+, r0
    56f0:	41 50       	subi	r20, 0x01	; 1
    56f2:	50 40       	sbci	r21, 0x00	; 0
    56f4:	d8 f7       	brcc	.-10     	; 0x56ec <memcpy+0x6>
    56f6:	08 95       	ret

000056f8 <memset>:
    56f8:	dc 01       	movw	r26, r24
    56fa:	01 c0       	rjmp	.+2      	; 0x56fe <memset+0x6>
    56fc:	6d 93       	st	X+, r22
    56fe:	41 50       	subi	r20, 0x01	; 1
    5700:	50 40       	sbci	r21, 0x00	; 0
    5702:	e0 f7       	brcc	.-8      	; 0x56fc <memset+0x4>
    5704:	08 95       	ret

00005706 <strcasestr>:
    5706:	fb 01       	movw	r30, r22
    5708:	51 91       	ld	r21, Z+
    570a:	55 23       	and	r21, r21
    570c:	b1 f0       	breq	.+44     	; 0x573a <strcasestr+0x34>
    570e:	bf 01       	movw	r22, r30
    5710:	dc 01       	movw	r26, r24
    5712:	05 2e       	mov	r0, r21
    5714:	4d 91       	ld	r20, X+
    5716:	44 23       	and	r20, r20
    5718:	69 f0       	breq	.+26     	; 0x5734 <strcasestr+0x2e>
    571a:	10 d0       	rcall	.+32     	; 0x573c <strcasestr+0x36>
    571c:	d9 f7       	brne	.-10     	; 0x5714 <strcasestr+0xe>
    571e:	cd 01       	movw	r24, r26
    5720:	01 90       	ld	r0, Z+
    5722:	00 20       	and	r0, r0
    5724:	49 f0       	breq	.+18     	; 0x5738 <strcasestr+0x32>
    5726:	4d 91       	ld	r20, X+
    5728:	41 11       	cpse	r20, r1
    572a:	08 d0       	rcall	.+16     	; 0x573c <strcasestr+0x36>
    572c:	c9 f3       	breq	.-14     	; 0x5720 <strcasestr+0x1a>
    572e:	fb 01       	movw	r30, r22
    5730:	41 11       	cpse	r20, r1
    5732:	ee cf       	rjmp	.-36     	; 0x5710 <strcasestr+0xa>
    5734:	81 e0       	ldi	r24, 0x01	; 1
    5736:	90 e0       	ldi	r25, 0x00	; 0
    5738:	01 97       	sbiw	r24, 0x01	; 1
    573a:	08 95       	ret
    573c:	40 25       	eor	r20, r0
    573e:	39 f0       	breq	.+14     	; 0x574e <strcasestr+0x48>
    5740:	40 32       	cpi	r20, 0x20	; 32
    5742:	29 f4       	brne	.+10     	; 0x574e <strcasestr+0x48>
    5744:	40 29       	or	r20, r0
    5746:	4b 57       	subi	r20, 0x7B	; 123
    5748:	46 5e       	subi	r20, 0xE6	; 230
    574a:	08 f0       	brcs	.+2      	; 0x574e <strcasestr+0x48>
    574c:	18 94       	sez
    574e:	08 95       	ret

00005750 <strcat>:
    5750:	fb 01       	movw	r30, r22
    5752:	dc 01       	movw	r26, r24
    5754:	0d 90       	ld	r0, X+
    5756:	00 20       	and	r0, r0
    5758:	e9 f7       	brne	.-6      	; 0x5754 <strcat+0x4>
    575a:	11 97       	sbiw	r26, 0x01	; 1
    575c:	01 90       	ld	r0, Z+
    575e:	0d 92       	st	X+, r0
    5760:	00 20       	and	r0, r0
    5762:	e1 f7       	brne	.-8      	; 0x575c <strcat+0xc>
    5764:	08 95       	ret

00005766 <strcpy>:
    5766:	fb 01       	movw	r30, r22
    5768:	dc 01       	movw	r26, r24
    576a:	01 90       	ld	r0, Z+
    576c:	0d 92       	st	X+, r0
    576e:	00 20       	and	r0, r0
    5770:	e1 f7       	brne	.-8      	; 0x576a <strcpy+0x4>
    5772:	08 95       	ret

00005774 <strncasecmp>:
    5774:	fb 01       	movw	r30, r22
    5776:	dc 01       	movw	r26, r24
    5778:	41 50       	subi	r20, 0x01	; 1
    577a:	50 40       	sbci	r21, 0x00	; 0
    577c:	88 f0       	brcs	.+34     	; 0x57a0 <strncasecmp+0x2c>
    577e:	8d 91       	ld	r24, X+
    5780:	81 34       	cpi	r24, 0x41	; 65
    5782:	1c f0       	brlt	.+6      	; 0x578a <strncasecmp+0x16>
    5784:	8b 35       	cpi	r24, 0x5B	; 91
    5786:	0c f4       	brge	.+2      	; 0x578a <strncasecmp+0x16>
    5788:	80 5e       	subi	r24, 0xE0	; 224
    578a:	61 91       	ld	r22, Z+
    578c:	61 34       	cpi	r22, 0x41	; 65
    578e:	1c f0       	brlt	.+6      	; 0x5796 <strncasecmp+0x22>
    5790:	6b 35       	cpi	r22, 0x5B	; 91
    5792:	0c f4       	brge	.+2      	; 0x5796 <strncasecmp+0x22>
    5794:	60 5e       	subi	r22, 0xE0	; 224
    5796:	86 1b       	sub	r24, r22
    5798:	61 11       	cpse	r22, r1
    579a:	71 f3       	breq	.-36     	; 0x5778 <strncasecmp+0x4>
    579c:	99 0b       	sbc	r25, r25
    579e:	08 95       	ret
    57a0:	88 1b       	sub	r24, r24
    57a2:	fc cf       	rjmp	.-8      	; 0x579c <strncasecmp+0x28>

000057a4 <printf>:
    57a4:	cf 93       	push	r28
    57a6:	df 93       	push	r29
    57a8:	cd b7       	in	r28, 0x3d	; 61
    57aa:	de b7       	in	r29, 0x3e	; 62
    57ac:	ae 01       	movw	r20, r28
    57ae:	4a 5f       	subi	r20, 0xFA	; 250
    57b0:	5f 4f       	sbci	r21, 0xFF	; 255
    57b2:	fa 01       	movw	r30, r20
    57b4:	61 91       	ld	r22, Z+
    57b6:	71 91       	ld	r23, Z+
    57b8:	af 01       	movw	r20, r30
    57ba:	80 91 94 17 	lds	r24, 0x1794	; 0x801794 <__iob+0x2>
    57be:	90 91 95 17 	lds	r25, 0x1795	; 0x801795 <__iob+0x3>
    57c2:	61 d0       	rcall	.+194    	; 0x5886 <vfprintf>
    57c4:	df 91       	pop	r29
    57c6:	cf 91       	pop	r28
    57c8:	08 95       	ret

000057ca <puts>:
    57ca:	0f 93       	push	r16
    57cc:	1f 93       	push	r17
    57ce:	cf 93       	push	r28
    57d0:	df 93       	push	r29
    57d2:	e0 91 94 17 	lds	r30, 0x1794	; 0x801794 <__iob+0x2>
    57d6:	f0 91 95 17 	lds	r31, 0x1795	; 0x801795 <__iob+0x3>
    57da:	23 81       	ldd	r18, Z+3	; 0x03
    57dc:	21 ff       	sbrs	r18, 1
    57de:	1b c0       	rjmp	.+54     	; 0x5816 <puts+0x4c>
    57e0:	8c 01       	movw	r16, r24
    57e2:	d0 e0       	ldi	r29, 0x00	; 0
    57e4:	c0 e0       	ldi	r28, 0x00	; 0
    57e6:	f8 01       	movw	r30, r16
    57e8:	81 91       	ld	r24, Z+
    57ea:	8f 01       	movw	r16, r30
    57ec:	60 91 94 17 	lds	r22, 0x1794	; 0x801794 <__iob+0x2>
    57f0:	70 91 95 17 	lds	r23, 0x1795	; 0x801795 <__iob+0x3>
    57f4:	db 01       	movw	r26, r22
    57f6:	18 96       	adiw	r26, 0x08	; 8
    57f8:	ed 91       	ld	r30, X+
    57fa:	fc 91       	ld	r31, X
    57fc:	19 97       	sbiw	r26, 0x09	; 9
    57fe:	88 23       	and	r24, r24
    5800:	31 f0       	breq	.+12     	; 0x580e <puts+0x44>
    5802:	19 95       	eicall
    5804:	89 2b       	or	r24, r25
    5806:	79 f3       	breq	.-34     	; 0x57e6 <puts+0x1c>
    5808:	df ef       	ldi	r29, 0xFF	; 255
    580a:	cf ef       	ldi	r28, 0xFF	; 255
    580c:	ec cf       	rjmp	.-40     	; 0x57e6 <puts+0x1c>
    580e:	8a e0       	ldi	r24, 0x0A	; 10
    5810:	19 95       	eicall
    5812:	89 2b       	or	r24, r25
    5814:	19 f0       	breq	.+6      	; 0x581c <puts+0x52>
    5816:	8f ef       	ldi	r24, 0xFF	; 255
    5818:	9f ef       	ldi	r25, 0xFF	; 255
    581a:	02 c0       	rjmp	.+4      	; 0x5820 <puts+0x56>
    581c:	8d 2f       	mov	r24, r29
    581e:	9c 2f       	mov	r25, r28
    5820:	df 91       	pop	r29
    5822:	cf 91       	pop	r28
    5824:	1f 91       	pop	r17
    5826:	0f 91       	pop	r16
    5828:	08 95       	ret

0000582a <sprintf>:
    582a:	0f 93       	push	r16
    582c:	1f 93       	push	r17
    582e:	cf 93       	push	r28
    5830:	df 93       	push	r29
    5832:	cd b7       	in	r28, 0x3d	; 61
    5834:	de b7       	in	r29, 0x3e	; 62
    5836:	2e 97       	sbiw	r28, 0x0e	; 14
    5838:	0f b6       	in	r0, 0x3f	; 63
    583a:	f8 94       	cli
    583c:	de bf       	out	0x3e, r29	; 62
    583e:	0f be       	out	0x3f, r0	; 63
    5840:	cd bf       	out	0x3d, r28	; 61
    5842:	0e 89       	ldd	r16, Y+22	; 0x16
    5844:	1f 89       	ldd	r17, Y+23	; 0x17
    5846:	86 e0       	ldi	r24, 0x06	; 6
    5848:	8c 83       	std	Y+4, r24	; 0x04
    584a:	1a 83       	std	Y+2, r17	; 0x02
    584c:	09 83       	std	Y+1, r16	; 0x01
    584e:	8f ef       	ldi	r24, 0xFF	; 255
    5850:	9f e7       	ldi	r25, 0x7F	; 127
    5852:	9e 83       	std	Y+6, r25	; 0x06
    5854:	8d 83       	std	Y+5, r24	; 0x05
    5856:	ae 01       	movw	r20, r28
    5858:	46 5e       	subi	r20, 0xE6	; 230
    585a:	5f 4f       	sbci	r21, 0xFF	; 255
    585c:	68 8d       	ldd	r22, Y+24	; 0x18
    585e:	79 8d       	ldd	r23, Y+25	; 0x19
    5860:	ce 01       	movw	r24, r28
    5862:	01 96       	adiw	r24, 0x01	; 1
    5864:	10 d0       	rcall	.+32     	; 0x5886 <vfprintf>
    5866:	ef 81       	ldd	r30, Y+7	; 0x07
    5868:	f8 85       	ldd	r31, Y+8	; 0x08
    586a:	e0 0f       	add	r30, r16
    586c:	f1 1f       	adc	r31, r17
    586e:	10 82       	st	Z, r1
    5870:	2e 96       	adiw	r28, 0x0e	; 14
    5872:	0f b6       	in	r0, 0x3f	; 63
    5874:	f8 94       	cli
    5876:	de bf       	out	0x3e, r29	; 62
    5878:	0f be       	out	0x3f, r0	; 63
    587a:	cd bf       	out	0x3d, r28	; 61
    587c:	df 91       	pop	r29
    587e:	cf 91       	pop	r28
    5880:	1f 91       	pop	r17
    5882:	0f 91       	pop	r16
    5884:	08 95       	ret

00005886 <vfprintf>:
    5886:	2f 92       	push	r2
    5888:	3f 92       	push	r3
    588a:	4f 92       	push	r4
    588c:	5f 92       	push	r5
    588e:	6f 92       	push	r6
    5890:	7f 92       	push	r7
    5892:	8f 92       	push	r8
    5894:	9f 92       	push	r9
    5896:	af 92       	push	r10
    5898:	bf 92       	push	r11
    589a:	cf 92       	push	r12
    589c:	df 92       	push	r13
    589e:	ef 92       	push	r14
    58a0:	ff 92       	push	r15
    58a2:	0f 93       	push	r16
    58a4:	1f 93       	push	r17
    58a6:	cf 93       	push	r28
    58a8:	df 93       	push	r29
    58aa:	cd b7       	in	r28, 0x3d	; 61
    58ac:	de b7       	in	r29, 0x3e	; 62
    58ae:	2b 97       	sbiw	r28, 0x0b	; 11
    58b0:	0f b6       	in	r0, 0x3f	; 63
    58b2:	f8 94       	cli
    58b4:	de bf       	out	0x3e, r29	; 62
    58b6:	0f be       	out	0x3f, r0	; 63
    58b8:	cd bf       	out	0x3d, r28	; 61
    58ba:	6c 01       	movw	r12, r24
    58bc:	7b 01       	movw	r14, r22
    58be:	8a 01       	movw	r16, r20
    58c0:	fc 01       	movw	r30, r24
    58c2:	17 82       	std	Z+7, r1	; 0x07
    58c4:	16 82       	std	Z+6, r1	; 0x06
    58c6:	83 81       	ldd	r24, Z+3	; 0x03
    58c8:	81 ff       	sbrs	r24, 1
    58ca:	bf c1       	rjmp	.+894    	; 0x5c4a <vfprintf+0x3c4>
    58cc:	ce 01       	movw	r24, r28
    58ce:	01 96       	adiw	r24, 0x01	; 1
    58d0:	3c 01       	movw	r6, r24
    58d2:	f6 01       	movw	r30, r12
    58d4:	93 81       	ldd	r25, Z+3	; 0x03
    58d6:	f7 01       	movw	r30, r14
    58d8:	93 fd       	sbrc	r25, 3
    58da:	85 91       	lpm	r24, Z+
    58dc:	93 ff       	sbrs	r25, 3
    58de:	81 91       	ld	r24, Z+
    58e0:	7f 01       	movw	r14, r30
    58e2:	88 23       	and	r24, r24
    58e4:	09 f4       	brne	.+2      	; 0x58e8 <vfprintf+0x62>
    58e6:	ad c1       	rjmp	.+858    	; 0x5c42 <vfprintf+0x3bc>
    58e8:	85 32       	cpi	r24, 0x25	; 37
    58ea:	39 f4       	brne	.+14     	; 0x58fa <vfprintf+0x74>
    58ec:	93 fd       	sbrc	r25, 3
    58ee:	85 91       	lpm	r24, Z+
    58f0:	93 ff       	sbrs	r25, 3
    58f2:	81 91       	ld	r24, Z+
    58f4:	7f 01       	movw	r14, r30
    58f6:	85 32       	cpi	r24, 0x25	; 37
    58f8:	21 f4       	brne	.+8      	; 0x5902 <vfprintf+0x7c>
    58fa:	b6 01       	movw	r22, r12
    58fc:	90 e0       	ldi	r25, 0x00	; 0
    58fe:	d6 d1       	rcall	.+940    	; 0x5cac <fputc>
    5900:	e8 cf       	rjmp	.-48     	; 0x58d2 <vfprintf+0x4c>
    5902:	91 2c       	mov	r9, r1
    5904:	21 2c       	mov	r2, r1
    5906:	31 2c       	mov	r3, r1
    5908:	ff e1       	ldi	r31, 0x1F	; 31
    590a:	f3 15       	cp	r31, r3
    590c:	d8 f0       	brcs	.+54     	; 0x5944 <vfprintf+0xbe>
    590e:	8b 32       	cpi	r24, 0x2B	; 43
    5910:	79 f0       	breq	.+30     	; 0x5930 <vfprintf+0xaa>
    5912:	38 f4       	brcc	.+14     	; 0x5922 <vfprintf+0x9c>
    5914:	80 32       	cpi	r24, 0x20	; 32
    5916:	79 f0       	breq	.+30     	; 0x5936 <vfprintf+0xb0>
    5918:	83 32       	cpi	r24, 0x23	; 35
    591a:	a1 f4       	brne	.+40     	; 0x5944 <vfprintf+0xbe>
    591c:	23 2d       	mov	r18, r3
    591e:	20 61       	ori	r18, 0x10	; 16
    5920:	1d c0       	rjmp	.+58     	; 0x595c <vfprintf+0xd6>
    5922:	8d 32       	cpi	r24, 0x2D	; 45
    5924:	61 f0       	breq	.+24     	; 0x593e <vfprintf+0xb8>
    5926:	80 33       	cpi	r24, 0x30	; 48
    5928:	69 f4       	brne	.+26     	; 0x5944 <vfprintf+0xbe>
    592a:	23 2d       	mov	r18, r3
    592c:	21 60       	ori	r18, 0x01	; 1
    592e:	16 c0       	rjmp	.+44     	; 0x595c <vfprintf+0xd6>
    5930:	83 2d       	mov	r24, r3
    5932:	82 60       	ori	r24, 0x02	; 2
    5934:	38 2e       	mov	r3, r24
    5936:	e3 2d       	mov	r30, r3
    5938:	e4 60       	ori	r30, 0x04	; 4
    593a:	3e 2e       	mov	r3, r30
    593c:	2a c0       	rjmp	.+84     	; 0x5992 <vfprintf+0x10c>
    593e:	f3 2d       	mov	r31, r3
    5940:	f8 60       	ori	r31, 0x08	; 8
    5942:	1d c0       	rjmp	.+58     	; 0x597e <vfprintf+0xf8>
    5944:	37 fc       	sbrc	r3, 7
    5946:	2d c0       	rjmp	.+90     	; 0x59a2 <vfprintf+0x11c>
    5948:	20 ed       	ldi	r18, 0xD0	; 208
    594a:	28 0f       	add	r18, r24
    594c:	2a 30       	cpi	r18, 0x0A	; 10
    594e:	40 f0       	brcs	.+16     	; 0x5960 <vfprintf+0xda>
    5950:	8e 32       	cpi	r24, 0x2E	; 46
    5952:	b9 f4       	brne	.+46     	; 0x5982 <vfprintf+0xfc>
    5954:	36 fc       	sbrc	r3, 6
    5956:	75 c1       	rjmp	.+746    	; 0x5c42 <vfprintf+0x3bc>
    5958:	23 2d       	mov	r18, r3
    595a:	20 64       	ori	r18, 0x40	; 64
    595c:	32 2e       	mov	r3, r18
    595e:	19 c0       	rjmp	.+50     	; 0x5992 <vfprintf+0x10c>
    5960:	36 fe       	sbrs	r3, 6
    5962:	06 c0       	rjmp	.+12     	; 0x5970 <vfprintf+0xea>
    5964:	8a e0       	ldi	r24, 0x0A	; 10
    5966:	98 9e       	mul	r9, r24
    5968:	20 0d       	add	r18, r0
    596a:	11 24       	eor	r1, r1
    596c:	92 2e       	mov	r9, r18
    596e:	11 c0       	rjmp	.+34     	; 0x5992 <vfprintf+0x10c>
    5970:	ea e0       	ldi	r30, 0x0A	; 10
    5972:	2e 9e       	mul	r2, r30
    5974:	20 0d       	add	r18, r0
    5976:	11 24       	eor	r1, r1
    5978:	22 2e       	mov	r2, r18
    597a:	f3 2d       	mov	r31, r3
    597c:	f0 62       	ori	r31, 0x20	; 32
    597e:	3f 2e       	mov	r3, r31
    5980:	08 c0       	rjmp	.+16     	; 0x5992 <vfprintf+0x10c>
    5982:	8c 36       	cpi	r24, 0x6C	; 108
    5984:	21 f4       	brne	.+8      	; 0x598e <vfprintf+0x108>
    5986:	83 2d       	mov	r24, r3
    5988:	80 68       	ori	r24, 0x80	; 128
    598a:	38 2e       	mov	r3, r24
    598c:	02 c0       	rjmp	.+4      	; 0x5992 <vfprintf+0x10c>
    598e:	88 36       	cpi	r24, 0x68	; 104
    5990:	41 f4       	brne	.+16     	; 0x59a2 <vfprintf+0x11c>
    5992:	f7 01       	movw	r30, r14
    5994:	93 fd       	sbrc	r25, 3
    5996:	85 91       	lpm	r24, Z+
    5998:	93 ff       	sbrs	r25, 3
    599a:	81 91       	ld	r24, Z+
    599c:	7f 01       	movw	r14, r30
    599e:	81 11       	cpse	r24, r1
    59a0:	b3 cf       	rjmp	.-154    	; 0x5908 <vfprintf+0x82>
    59a2:	98 2f       	mov	r25, r24
    59a4:	9f 7d       	andi	r25, 0xDF	; 223
    59a6:	95 54       	subi	r25, 0x45	; 69
    59a8:	93 30       	cpi	r25, 0x03	; 3
    59aa:	28 f4       	brcc	.+10     	; 0x59b6 <vfprintf+0x130>
    59ac:	0c 5f       	subi	r16, 0xFC	; 252
    59ae:	1f 4f       	sbci	r17, 0xFF	; 255
    59b0:	9f e3       	ldi	r25, 0x3F	; 63
    59b2:	99 83       	std	Y+1, r25	; 0x01
    59b4:	0d c0       	rjmp	.+26     	; 0x59d0 <vfprintf+0x14a>
    59b6:	83 36       	cpi	r24, 0x63	; 99
    59b8:	31 f0       	breq	.+12     	; 0x59c6 <vfprintf+0x140>
    59ba:	83 37       	cpi	r24, 0x73	; 115
    59bc:	71 f0       	breq	.+28     	; 0x59da <vfprintf+0x154>
    59be:	83 35       	cpi	r24, 0x53	; 83
    59c0:	09 f0       	breq	.+2      	; 0x59c4 <vfprintf+0x13e>
    59c2:	55 c0       	rjmp	.+170    	; 0x5a6e <vfprintf+0x1e8>
    59c4:	20 c0       	rjmp	.+64     	; 0x5a06 <vfprintf+0x180>
    59c6:	f8 01       	movw	r30, r16
    59c8:	80 81       	ld	r24, Z
    59ca:	89 83       	std	Y+1, r24	; 0x01
    59cc:	0e 5f       	subi	r16, 0xFE	; 254
    59ce:	1f 4f       	sbci	r17, 0xFF	; 255
    59d0:	88 24       	eor	r8, r8
    59d2:	83 94       	inc	r8
    59d4:	91 2c       	mov	r9, r1
    59d6:	53 01       	movw	r10, r6
    59d8:	12 c0       	rjmp	.+36     	; 0x59fe <vfprintf+0x178>
    59da:	28 01       	movw	r4, r16
    59dc:	f2 e0       	ldi	r31, 0x02	; 2
    59de:	4f 0e       	add	r4, r31
    59e0:	51 1c       	adc	r5, r1
    59e2:	f8 01       	movw	r30, r16
    59e4:	a0 80       	ld	r10, Z
    59e6:	b1 80       	ldd	r11, Z+1	; 0x01
    59e8:	36 fe       	sbrs	r3, 6
    59ea:	03 c0       	rjmp	.+6      	; 0x59f2 <vfprintf+0x16c>
    59ec:	69 2d       	mov	r22, r9
    59ee:	70 e0       	ldi	r23, 0x00	; 0
    59f0:	02 c0       	rjmp	.+4      	; 0x59f6 <vfprintf+0x170>
    59f2:	6f ef       	ldi	r22, 0xFF	; 255
    59f4:	7f ef       	ldi	r23, 0xFF	; 255
    59f6:	c5 01       	movw	r24, r10
    59f8:	4e d1       	rcall	.+668    	; 0x5c96 <strnlen>
    59fa:	4c 01       	movw	r8, r24
    59fc:	82 01       	movw	r16, r4
    59fe:	f3 2d       	mov	r31, r3
    5a00:	ff 77       	andi	r31, 0x7F	; 127
    5a02:	3f 2e       	mov	r3, r31
    5a04:	15 c0       	rjmp	.+42     	; 0x5a30 <vfprintf+0x1aa>
    5a06:	28 01       	movw	r4, r16
    5a08:	22 e0       	ldi	r18, 0x02	; 2
    5a0a:	42 0e       	add	r4, r18
    5a0c:	51 1c       	adc	r5, r1
    5a0e:	f8 01       	movw	r30, r16
    5a10:	a0 80       	ld	r10, Z
    5a12:	b1 80       	ldd	r11, Z+1	; 0x01
    5a14:	36 fe       	sbrs	r3, 6
    5a16:	03 c0       	rjmp	.+6      	; 0x5a1e <vfprintf+0x198>
    5a18:	69 2d       	mov	r22, r9
    5a1a:	70 e0       	ldi	r23, 0x00	; 0
    5a1c:	02 c0       	rjmp	.+4      	; 0x5a22 <vfprintf+0x19c>
    5a1e:	6f ef       	ldi	r22, 0xFF	; 255
    5a20:	7f ef       	ldi	r23, 0xFF	; 255
    5a22:	c5 01       	movw	r24, r10
    5a24:	2d d1       	rcall	.+602    	; 0x5c80 <strnlen_P>
    5a26:	4c 01       	movw	r8, r24
    5a28:	f3 2d       	mov	r31, r3
    5a2a:	f0 68       	ori	r31, 0x80	; 128
    5a2c:	3f 2e       	mov	r3, r31
    5a2e:	82 01       	movw	r16, r4
    5a30:	33 fc       	sbrc	r3, 3
    5a32:	19 c0       	rjmp	.+50     	; 0x5a66 <vfprintf+0x1e0>
    5a34:	82 2d       	mov	r24, r2
    5a36:	90 e0       	ldi	r25, 0x00	; 0
    5a38:	88 16       	cp	r8, r24
    5a3a:	99 06       	cpc	r9, r25
    5a3c:	a0 f4       	brcc	.+40     	; 0x5a66 <vfprintf+0x1e0>
    5a3e:	b6 01       	movw	r22, r12
    5a40:	80 e2       	ldi	r24, 0x20	; 32
    5a42:	90 e0       	ldi	r25, 0x00	; 0
    5a44:	33 d1       	rcall	.+614    	; 0x5cac <fputc>
    5a46:	2a 94       	dec	r2
    5a48:	f5 cf       	rjmp	.-22     	; 0x5a34 <vfprintf+0x1ae>
    5a4a:	f5 01       	movw	r30, r10
    5a4c:	37 fc       	sbrc	r3, 7
    5a4e:	85 91       	lpm	r24, Z+
    5a50:	37 fe       	sbrs	r3, 7
    5a52:	81 91       	ld	r24, Z+
    5a54:	5f 01       	movw	r10, r30
    5a56:	b6 01       	movw	r22, r12
    5a58:	90 e0       	ldi	r25, 0x00	; 0
    5a5a:	28 d1       	rcall	.+592    	; 0x5cac <fputc>
    5a5c:	21 10       	cpse	r2, r1
    5a5e:	2a 94       	dec	r2
    5a60:	21 e0       	ldi	r18, 0x01	; 1
    5a62:	82 1a       	sub	r8, r18
    5a64:	91 08       	sbc	r9, r1
    5a66:	81 14       	cp	r8, r1
    5a68:	91 04       	cpc	r9, r1
    5a6a:	79 f7       	brne	.-34     	; 0x5a4a <vfprintf+0x1c4>
    5a6c:	e1 c0       	rjmp	.+450    	; 0x5c30 <vfprintf+0x3aa>
    5a6e:	84 36       	cpi	r24, 0x64	; 100
    5a70:	11 f0       	breq	.+4      	; 0x5a76 <vfprintf+0x1f0>
    5a72:	89 36       	cpi	r24, 0x69	; 105
    5a74:	39 f5       	brne	.+78     	; 0x5ac4 <vfprintf+0x23e>
    5a76:	f8 01       	movw	r30, r16
    5a78:	37 fe       	sbrs	r3, 7
    5a7a:	07 c0       	rjmp	.+14     	; 0x5a8a <vfprintf+0x204>
    5a7c:	60 81       	ld	r22, Z
    5a7e:	71 81       	ldd	r23, Z+1	; 0x01
    5a80:	82 81       	ldd	r24, Z+2	; 0x02
    5a82:	93 81       	ldd	r25, Z+3	; 0x03
    5a84:	0c 5f       	subi	r16, 0xFC	; 252
    5a86:	1f 4f       	sbci	r17, 0xFF	; 255
    5a88:	08 c0       	rjmp	.+16     	; 0x5a9a <vfprintf+0x214>
    5a8a:	60 81       	ld	r22, Z
    5a8c:	71 81       	ldd	r23, Z+1	; 0x01
    5a8e:	07 2e       	mov	r0, r23
    5a90:	00 0c       	add	r0, r0
    5a92:	88 0b       	sbc	r24, r24
    5a94:	99 0b       	sbc	r25, r25
    5a96:	0e 5f       	subi	r16, 0xFE	; 254
    5a98:	1f 4f       	sbci	r17, 0xFF	; 255
    5a9a:	f3 2d       	mov	r31, r3
    5a9c:	ff 76       	andi	r31, 0x6F	; 111
    5a9e:	3f 2e       	mov	r3, r31
    5aa0:	97 ff       	sbrs	r25, 7
    5aa2:	09 c0       	rjmp	.+18     	; 0x5ab6 <vfprintf+0x230>
    5aa4:	90 95       	com	r25
    5aa6:	80 95       	com	r24
    5aa8:	70 95       	com	r23
    5aaa:	61 95       	neg	r22
    5aac:	7f 4f       	sbci	r23, 0xFF	; 255
    5aae:	8f 4f       	sbci	r24, 0xFF	; 255
    5ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ab2:	f0 68       	ori	r31, 0x80	; 128
    5ab4:	3f 2e       	mov	r3, r31
    5ab6:	2a e0       	ldi	r18, 0x0A	; 10
    5ab8:	30 e0       	ldi	r19, 0x00	; 0
    5aba:	a3 01       	movw	r20, r6
    5abc:	33 d1       	rcall	.+614    	; 0x5d24 <__ultoa_invert>
    5abe:	88 2e       	mov	r8, r24
    5ac0:	86 18       	sub	r8, r6
    5ac2:	44 c0       	rjmp	.+136    	; 0x5b4c <vfprintf+0x2c6>
    5ac4:	85 37       	cpi	r24, 0x75	; 117
    5ac6:	31 f4       	brne	.+12     	; 0x5ad4 <vfprintf+0x24e>
    5ac8:	23 2d       	mov	r18, r3
    5aca:	2f 7e       	andi	r18, 0xEF	; 239
    5acc:	b2 2e       	mov	r11, r18
    5ace:	2a e0       	ldi	r18, 0x0A	; 10
    5ad0:	30 e0       	ldi	r19, 0x00	; 0
    5ad2:	25 c0       	rjmp	.+74     	; 0x5b1e <vfprintf+0x298>
    5ad4:	93 2d       	mov	r25, r3
    5ad6:	99 7f       	andi	r25, 0xF9	; 249
    5ad8:	b9 2e       	mov	r11, r25
    5ada:	8f 36       	cpi	r24, 0x6F	; 111
    5adc:	c1 f0       	breq	.+48     	; 0x5b0e <vfprintf+0x288>
    5ade:	18 f4       	brcc	.+6      	; 0x5ae6 <vfprintf+0x260>
    5ae0:	88 35       	cpi	r24, 0x58	; 88
    5ae2:	79 f0       	breq	.+30     	; 0x5b02 <vfprintf+0x27c>
    5ae4:	ae c0       	rjmp	.+348    	; 0x5c42 <vfprintf+0x3bc>
    5ae6:	80 37       	cpi	r24, 0x70	; 112
    5ae8:	19 f0       	breq	.+6      	; 0x5af0 <vfprintf+0x26a>
    5aea:	88 37       	cpi	r24, 0x78	; 120
    5aec:	21 f0       	breq	.+8      	; 0x5af6 <vfprintf+0x270>
    5aee:	a9 c0       	rjmp	.+338    	; 0x5c42 <vfprintf+0x3bc>
    5af0:	e9 2f       	mov	r30, r25
    5af2:	e0 61       	ori	r30, 0x10	; 16
    5af4:	be 2e       	mov	r11, r30
    5af6:	b4 fe       	sbrs	r11, 4
    5af8:	0d c0       	rjmp	.+26     	; 0x5b14 <vfprintf+0x28e>
    5afa:	fb 2d       	mov	r31, r11
    5afc:	f4 60       	ori	r31, 0x04	; 4
    5afe:	bf 2e       	mov	r11, r31
    5b00:	09 c0       	rjmp	.+18     	; 0x5b14 <vfprintf+0x28e>
    5b02:	34 fe       	sbrs	r3, 4
    5b04:	0a c0       	rjmp	.+20     	; 0x5b1a <vfprintf+0x294>
    5b06:	29 2f       	mov	r18, r25
    5b08:	26 60       	ori	r18, 0x06	; 6
    5b0a:	b2 2e       	mov	r11, r18
    5b0c:	06 c0       	rjmp	.+12     	; 0x5b1a <vfprintf+0x294>
    5b0e:	28 e0       	ldi	r18, 0x08	; 8
    5b10:	30 e0       	ldi	r19, 0x00	; 0
    5b12:	05 c0       	rjmp	.+10     	; 0x5b1e <vfprintf+0x298>
    5b14:	20 e1       	ldi	r18, 0x10	; 16
    5b16:	30 e0       	ldi	r19, 0x00	; 0
    5b18:	02 c0       	rjmp	.+4      	; 0x5b1e <vfprintf+0x298>
    5b1a:	20 e1       	ldi	r18, 0x10	; 16
    5b1c:	32 e0       	ldi	r19, 0x02	; 2
    5b1e:	f8 01       	movw	r30, r16
    5b20:	b7 fe       	sbrs	r11, 7
    5b22:	07 c0       	rjmp	.+14     	; 0x5b32 <vfprintf+0x2ac>
    5b24:	60 81       	ld	r22, Z
    5b26:	71 81       	ldd	r23, Z+1	; 0x01
    5b28:	82 81       	ldd	r24, Z+2	; 0x02
    5b2a:	93 81       	ldd	r25, Z+3	; 0x03
    5b2c:	0c 5f       	subi	r16, 0xFC	; 252
    5b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    5b30:	06 c0       	rjmp	.+12     	; 0x5b3e <vfprintf+0x2b8>
    5b32:	60 81       	ld	r22, Z
    5b34:	71 81       	ldd	r23, Z+1	; 0x01
    5b36:	80 e0       	ldi	r24, 0x00	; 0
    5b38:	90 e0       	ldi	r25, 0x00	; 0
    5b3a:	0e 5f       	subi	r16, 0xFE	; 254
    5b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    5b3e:	a3 01       	movw	r20, r6
    5b40:	f1 d0       	rcall	.+482    	; 0x5d24 <__ultoa_invert>
    5b42:	88 2e       	mov	r8, r24
    5b44:	86 18       	sub	r8, r6
    5b46:	fb 2d       	mov	r31, r11
    5b48:	ff 77       	andi	r31, 0x7F	; 127
    5b4a:	3f 2e       	mov	r3, r31
    5b4c:	36 fe       	sbrs	r3, 6
    5b4e:	0d c0       	rjmp	.+26     	; 0x5b6a <vfprintf+0x2e4>
    5b50:	23 2d       	mov	r18, r3
    5b52:	2e 7f       	andi	r18, 0xFE	; 254
    5b54:	a2 2e       	mov	r10, r18
    5b56:	89 14       	cp	r8, r9
    5b58:	58 f4       	brcc	.+22     	; 0x5b70 <vfprintf+0x2ea>
    5b5a:	34 fe       	sbrs	r3, 4
    5b5c:	0b c0       	rjmp	.+22     	; 0x5b74 <vfprintf+0x2ee>
    5b5e:	32 fc       	sbrc	r3, 2
    5b60:	09 c0       	rjmp	.+18     	; 0x5b74 <vfprintf+0x2ee>
    5b62:	83 2d       	mov	r24, r3
    5b64:	8e 7e       	andi	r24, 0xEE	; 238
    5b66:	a8 2e       	mov	r10, r24
    5b68:	05 c0       	rjmp	.+10     	; 0x5b74 <vfprintf+0x2ee>
    5b6a:	b8 2c       	mov	r11, r8
    5b6c:	a3 2c       	mov	r10, r3
    5b6e:	03 c0       	rjmp	.+6      	; 0x5b76 <vfprintf+0x2f0>
    5b70:	b8 2c       	mov	r11, r8
    5b72:	01 c0       	rjmp	.+2      	; 0x5b76 <vfprintf+0x2f0>
    5b74:	b9 2c       	mov	r11, r9
    5b76:	a4 fe       	sbrs	r10, 4
    5b78:	0f c0       	rjmp	.+30     	; 0x5b98 <vfprintf+0x312>
    5b7a:	fe 01       	movw	r30, r28
    5b7c:	e8 0d       	add	r30, r8
    5b7e:	f1 1d       	adc	r31, r1
    5b80:	80 81       	ld	r24, Z
    5b82:	80 33       	cpi	r24, 0x30	; 48
    5b84:	21 f4       	brne	.+8      	; 0x5b8e <vfprintf+0x308>
    5b86:	9a 2d       	mov	r25, r10
    5b88:	99 7e       	andi	r25, 0xE9	; 233
    5b8a:	a9 2e       	mov	r10, r25
    5b8c:	09 c0       	rjmp	.+18     	; 0x5ba0 <vfprintf+0x31a>
    5b8e:	a2 fe       	sbrs	r10, 2
    5b90:	06 c0       	rjmp	.+12     	; 0x5b9e <vfprintf+0x318>
    5b92:	b3 94       	inc	r11
    5b94:	b3 94       	inc	r11
    5b96:	04 c0       	rjmp	.+8      	; 0x5ba0 <vfprintf+0x31a>
    5b98:	8a 2d       	mov	r24, r10
    5b9a:	86 78       	andi	r24, 0x86	; 134
    5b9c:	09 f0       	breq	.+2      	; 0x5ba0 <vfprintf+0x31a>
    5b9e:	b3 94       	inc	r11
    5ba0:	a3 fc       	sbrc	r10, 3
    5ba2:	10 c0       	rjmp	.+32     	; 0x5bc4 <vfprintf+0x33e>
    5ba4:	a0 fe       	sbrs	r10, 0
    5ba6:	06 c0       	rjmp	.+12     	; 0x5bb4 <vfprintf+0x32e>
    5ba8:	b2 14       	cp	r11, r2
    5baa:	80 f4       	brcc	.+32     	; 0x5bcc <vfprintf+0x346>
    5bac:	28 0c       	add	r2, r8
    5bae:	92 2c       	mov	r9, r2
    5bb0:	9b 18       	sub	r9, r11
    5bb2:	0d c0       	rjmp	.+26     	; 0x5bce <vfprintf+0x348>
    5bb4:	b2 14       	cp	r11, r2
    5bb6:	58 f4       	brcc	.+22     	; 0x5bce <vfprintf+0x348>
    5bb8:	b6 01       	movw	r22, r12
    5bba:	80 e2       	ldi	r24, 0x20	; 32
    5bbc:	90 e0       	ldi	r25, 0x00	; 0
    5bbe:	76 d0       	rcall	.+236    	; 0x5cac <fputc>
    5bc0:	b3 94       	inc	r11
    5bc2:	f8 cf       	rjmp	.-16     	; 0x5bb4 <vfprintf+0x32e>
    5bc4:	b2 14       	cp	r11, r2
    5bc6:	18 f4       	brcc	.+6      	; 0x5bce <vfprintf+0x348>
    5bc8:	2b 18       	sub	r2, r11
    5bca:	02 c0       	rjmp	.+4      	; 0x5bd0 <vfprintf+0x34a>
    5bcc:	98 2c       	mov	r9, r8
    5bce:	21 2c       	mov	r2, r1
    5bd0:	a4 fe       	sbrs	r10, 4
    5bd2:	0f c0       	rjmp	.+30     	; 0x5bf2 <vfprintf+0x36c>
    5bd4:	b6 01       	movw	r22, r12
    5bd6:	80 e3       	ldi	r24, 0x30	; 48
    5bd8:	90 e0       	ldi	r25, 0x00	; 0
    5bda:	68 d0       	rcall	.+208    	; 0x5cac <fputc>
    5bdc:	a2 fe       	sbrs	r10, 2
    5bde:	16 c0       	rjmp	.+44     	; 0x5c0c <vfprintf+0x386>
    5be0:	a1 fc       	sbrc	r10, 1
    5be2:	03 c0       	rjmp	.+6      	; 0x5bea <vfprintf+0x364>
    5be4:	88 e7       	ldi	r24, 0x78	; 120
    5be6:	90 e0       	ldi	r25, 0x00	; 0
    5be8:	02 c0       	rjmp	.+4      	; 0x5bee <vfprintf+0x368>
    5bea:	88 e5       	ldi	r24, 0x58	; 88
    5bec:	90 e0       	ldi	r25, 0x00	; 0
    5bee:	b6 01       	movw	r22, r12
    5bf0:	0c c0       	rjmp	.+24     	; 0x5c0a <vfprintf+0x384>
    5bf2:	8a 2d       	mov	r24, r10
    5bf4:	86 78       	andi	r24, 0x86	; 134
    5bf6:	51 f0       	breq	.+20     	; 0x5c0c <vfprintf+0x386>
    5bf8:	a1 fe       	sbrs	r10, 1
    5bfa:	02 c0       	rjmp	.+4      	; 0x5c00 <vfprintf+0x37a>
    5bfc:	8b e2       	ldi	r24, 0x2B	; 43
    5bfe:	01 c0       	rjmp	.+2      	; 0x5c02 <vfprintf+0x37c>
    5c00:	80 e2       	ldi	r24, 0x20	; 32
    5c02:	a7 fc       	sbrc	r10, 7
    5c04:	8d e2       	ldi	r24, 0x2D	; 45
    5c06:	b6 01       	movw	r22, r12
    5c08:	90 e0       	ldi	r25, 0x00	; 0
    5c0a:	50 d0       	rcall	.+160    	; 0x5cac <fputc>
    5c0c:	89 14       	cp	r8, r9
    5c0e:	30 f4       	brcc	.+12     	; 0x5c1c <vfprintf+0x396>
    5c10:	b6 01       	movw	r22, r12
    5c12:	80 e3       	ldi	r24, 0x30	; 48
    5c14:	90 e0       	ldi	r25, 0x00	; 0
    5c16:	4a d0       	rcall	.+148    	; 0x5cac <fputc>
    5c18:	9a 94       	dec	r9
    5c1a:	f8 cf       	rjmp	.-16     	; 0x5c0c <vfprintf+0x386>
    5c1c:	8a 94       	dec	r8
    5c1e:	f3 01       	movw	r30, r6
    5c20:	e8 0d       	add	r30, r8
    5c22:	f1 1d       	adc	r31, r1
    5c24:	80 81       	ld	r24, Z
    5c26:	b6 01       	movw	r22, r12
    5c28:	90 e0       	ldi	r25, 0x00	; 0
    5c2a:	40 d0       	rcall	.+128    	; 0x5cac <fputc>
    5c2c:	81 10       	cpse	r8, r1
    5c2e:	f6 cf       	rjmp	.-20     	; 0x5c1c <vfprintf+0x396>
    5c30:	22 20       	and	r2, r2
    5c32:	09 f4       	brne	.+2      	; 0x5c36 <vfprintf+0x3b0>
    5c34:	4e ce       	rjmp	.-868    	; 0x58d2 <vfprintf+0x4c>
    5c36:	b6 01       	movw	r22, r12
    5c38:	80 e2       	ldi	r24, 0x20	; 32
    5c3a:	90 e0       	ldi	r25, 0x00	; 0
    5c3c:	37 d0       	rcall	.+110    	; 0x5cac <fputc>
    5c3e:	2a 94       	dec	r2
    5c40:	f7 cf       	rjmp	.-18     	; 0x5c30 <vfprintf+0x3aa>
    5c42:	f6 01       	movw	r30, r12
    5c44:	86 81       	ldd	r24, Z+6	; 0x06
    5c46:	97 81       	ldd	r25, Z+7	; 0x07
    5c48:	02 c0       	rjmp	.+4      	; 0x5c4e <vfprintf+0x3c8>
    5c4a:	8f ef       	ldi	r24, 0xFF	; 255
    5c4c:	9f ef       	ldi	r25, 0xFF	; 255
    5c4e:	2b 96       	adiw	r28, 0x0b	; 11
    5c50:	0f b6       	in	r0, 0x3f	; 63
    5c52:	f8 94       	cli
    5c54:	de bf       	out	0x3e, r29	; 62
    5c56:	0f be       	out	0x3f, r0	; 63
    5c58:	cd bf       	out	0x3d, r28	; 61
    5c5a:	df 91       	pop	r29
    5c5c:	cf 91       	pop	r28
    5c5e:	1f 91       	pop	r17
    5c60:	0f 91       	pop	r16
    5c62:	ff 90       	pop	r15
    5c64:	ef 90       	pop	r14
    5c66:	df 90       	pop	r13
    5c68:	cf 90       	pop	r12
    5c6a:	bf 90       	pop	r11
    5c6c:	af 90       	pop	r10
    5c6e:	9f 90       	pop	r9
    5c70:	8f 90       	pop	r8
    5c72:	7f 90       	pop	r7
    5c74:	6f 90       	pop	r6
    5c76:	5f 90       	pop	r5
    5c78:	4f 90       	pop	r4
    5c7a:	3f 90       	pop	r3
    5c7c:	2f 90       	pop	r2
    5c7e:	08 95       	ret

00005c80 <strnlen_P>:
    5c80:	fc 01       	movw	r30, r24
    5c82:	05 90       	lpm	r0, Z+
    5c84:	61 50       	subi	r22, 0x01	; 1
    5c86:	70 40       	sbci	r23, 0x00	; 0
    5c88:	01 10       	cpse	r0, r1
    5c8a:	d8 f7       	brcc	.-10     	; 0x5c82 <strnlen_P+0x2>
    5c8c:	80 95       	com	r24
    5c8e:	90 95       	com	r25
    5c90:	8e 0f       	add	r24, r30
    5c92:	9f 1f       	adc	r25, r31
    5c94:	08 95       	ret

00005c96 <strnlen>:
    5c96:	fc 01       	movw	r30, r24
    5c98:	61 50       	subi	r22, 0x01	; 1
    5c9a:	70 40       	sbci	r23, 0x00	; 0
    5c9c:	01 90       	ld	r0, Z+
    5c9e:	01 10       	cpse	r0, r1
    5ca0:	d8 f7       	brcc	.-10     	; 0x5c98 <strnlen+0x2>
    5ca2:	80 95       	com	r24
    5ca4:	90 95       	com	r25
    5ca6:	8e 0f       	add	r24, r30
    5ca8:	9f 1f       	adc	r25, r31
    5caa:	08 95       	ret

00005cac <fputc>:
    5cac:	0f 93       	push	r16
    5cae:	1f 93       	push	r17
    5cb0:	cf 93       	push	r28
    5cb2:	df 93       	push	r29
    5cb4:	fb 01       	movw	r30, r22
    5cb6:	23 81       	ldd	r18, Z+3	; 0x03
    5cb8:	21 fd       	sbrc	r18, 1
    5cba:	03 c0       	rjmp	.+6      	; 0x5cc2 <fputc+0x16>
    5cbc:	8f ef       	ldi	r24, 0xFF	; 255
    5cbe:	9f ef       	ldi	r25, 0xFF	; 255
    5cc0:	2c c0       	rjmp	.+88     	; 0x5d1a <fputc+0x6e>
    5cc2:	22 ff       	sbrs	r18, 2
    5cc4:	16 c0       	rjmp	.+44     	; 0x5cf2 <fputc+0x46>
    5cc6:	46 81       	ldd	r20, Z+6	; 0x06
    5cc8:	57 81       	ldd	r21, Z+7	; 0x07
    5cca:	24 81       	ldd	r18, Z+4	; 0x04
    5ccc:	35 81       	ldd	r19, Z+5	; 0x05
    5cce:	42 17       	cp	r20, r18
    5cd0:	53 07       	cpc	r21, r19
    5cd2:	44 f4       	brge	.+16     	; 0x5ce4 <fputc+0x38>
    5cd4:	a0 81       	ld	r26, Z
    5cd6:	b1 81       	ldd	r27, Z+1	; 0x01
    5cd8:	9d 01       	movw	r18, r26
    5cda:	2f 5f       	subi	r18, 0xFF	; 255
    5cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    5cde:	31 83       	std	Z+1, r19	; 0x01
    5ce0:	20 83       	st	Z, r18
    5ce2:	8c 93       	st	X, r24
    5ce4:	26 81       	ldd	r18, Z+6	; 0x06
    5ce6:	37 81       	ldd	r19, Z+7	; 0x07
    5ce8:	2f 5f       	subi	r18, 0xFF	; 255
    5cea:	3f 4f       	sbci	r19, 0xFF	; 255
    5cec:	37 83       	std	Z+7, r19	; 0x07
    5cee:	26 83       	std	Z+6, r18	; 0x06
    5cf0:	14 c0       	rjmp	.+40     	; 0x5d1a <fputc+0x6e>
    5cf2:	8b 01       	movw	r16, r22
    5cf4:	ec 01       	movw	r28, r24
    5cf6:	fb 01       	movw	r30, r22
    5cf8:	00 84       	ldd	r0, Z+8	; 0x08
    5cfa:	f1 85       	ldd	r31, Z+9	; 0x09
    5cfc:	e0 2d       	mov	r30, r0
    5cfe:	19 95       	eicall
    5d00:	89 2b       	or	r24, r25
    5d02:	e1 f6       	brne	.-72     	; 0x5cbc <fputc+0x10>
    5d04:	d8 01       	movw	r26, r16
    5d06:	16 96       	adiw	r26, 0x06	; 6
    5d08:	8d 91       	ld	r24, X+
    5d0a:	9c 91       	ld	r25, X
    5d0c:	17 97       	sbiw	r26, 0x07	; 7
    5d0e:	01 96       	adiw	r24, 0x01	; 1
    5d10:	17 96       	adiw	r26, 0x07	; 7
    5d12:	9c 93       	st	X, r25
    5d14:	8e 93       	st	-X, r24
    5d16:	16 97       	sbiw	r26, 0x06	; 6
    5d18:	ce 01       	movw	r24, r28
    5d1a:	df 91       	pop	r29
    5d1c:	cf 91       	pop	r28
    5d1e:	1f 91       	pop	r17
    5d20:	0f 91       	pop	r16
    5d22:	08 95       	ret

00005d24 <__ultoa_invert>:
    5d24:	fa 01       	movw	r30, r20
    5d26:	aa 27       	eor	r26, r26
    5d28:	28 30       	cpi	r18, 0x08	; 8
    5d2a:	51 f1       	breq	.+84     	; 0x5d80 <__ultoa_invert+0x5c>
    5d2c:	20 31       	cpi	r18, 0x10	; 16
    5d2e:	81 f1       	breq	.+96     	; 0x5d90 <__ultoa_invert+0x6c>
    5d30:	e8 94       	clt
    5d32:	6f 93       	push	r22
    5d34:	6e 7f       	andi	r22, 0xFE	; 254
    5d36:	6e 5f       	subi	r22, 0xFE	; 254
    5d38:	7f 4f       	sbci	r23, 0xFF	; 255
    5d3a:	8f 4f       	sbci	r24, 0xFF	; 255
    5d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d3e:	af 4f       	sbci	r26, 0xFF	; 255
    5d40:	b1 e0       	ldi	r27, 0x01	; 1
    5d42:	3e d0       	rcall	.+124    	; 0x5dc0 <__ultoa_invert+0x9c>
    5d44:	b4 e0       	ldi	r27, 0x04	; 4
    5d46:	3c d0       	rcall	.+120    	; 0x5dc0 <__ultoa_invert+0x9c>
    5d48:	67 0f       	add	r22, r23
    5d4a:	78 1f       	adc	r23, r24
    5d4c:	89 1f       	adc	r24, r25
    5d4e:	9a 1f       	adc	r25, r26
    5d50:	a1 1d       	adc	r26, r1
    5d52:	68 0f       	add	r22, r24
    5d54:	79 1f       	adc	r23, r25
    5d56:	8a 1f       	adc	r24, r26
    5d58:	91 1d       	adc	r25, r1
    5d5a:	a1 1d       	adc	r26, r1
    5d5c:	6a 0f       	add	r22, r26
    5d5e:	71 1d       	adc	r23, r1
    5d60:	81 1d       	adc	r24, r1
    5d62:	91 1d       	adc	r25, r1
    5d64:	a1 1d       	adc	r26, r1
    5d66:	20 d0       	rcall	.+64     	; 0x5da8 <__ultoa_invert+0x84>
    5d68:	09 f4       	brne	.+2      	; 0x5d6c <__ultoa_invert+0x48>
    5d6a:	68 94       	set
    5d6c:	3f 91       	pop	r19
    5d6e:	2a e0       	ldi	r18, 0x0A	; 10
    5d70:	26 9f       	mul	r18, r22
    5d72:	11 24       	eor	r1, r1
    5d74:	30 19       	sub	r19, r0
    5d76:	30 5d       	subi	r19, 0xD0	; 208
    5d78:	31 93       	st	Z+, r19
    5d7a:	de f6       	brtc	.-74     	; 0x5d32 <__ultoa_invert+0xe>
    5d7c:	cf 01       	movw	r24, r30
    5d7e:	08 95       	ret
    5d80:	46 2f       	mov	r20, r22
    5d82:	47 70       	andi	r20, 0x07	; 7
    5d84:	40 5d       	subi	r20, 0xD0	; 208
    5d86:	41 93       	st	Z+, r20
    5d88:	b3 e0       	ldi	r27, 0x03	; 3
    5d8a:	0f d0       	rcall	.+30     	; 0x5daa <__ultoa_invert+0x86>
    5d8c:	c9 f7       	brne	.-14     	; 0x5d80 <__ultoa_invert+0x5c>
    5d8e:	f6 cf       	rjmp	.-20     	; 0x5d7c <__ultoa_invert+0x58>
    5d90:	46 2f       	mov	r20, r22
    5d92:	4f 70       	andi	r20, 0x0F	; 15
    5d94:	40 5d       	subi	r20, 0xD0	; 208
    5d96:	4a 33       	cpi	r20, 0x3A	; 58
    5d98:	18 f0       	brcs	.+6      	; 0x5da0 <__ultoa_invert+0x7c>
    5d9a:	49 5d       	subi	r20, 0xD9	; 217
    5d9c:	31 fd       	sbrc	r19, 1
    5d9e:	40 52       	subi	r20, 0x20	; 32
    5da0:	41 93       	st	Z+, r20
    5da2:	02 d0       	rcall	.+4      	; 0x5da8 <__ultoa_invert+0x84>
    5da4:	a9 f7       	brne	.-22     	; 0x5d90 <__ultoa_invert+0x6c>
    5da6:	ea cf       	rjmp	.-44     	; 0x5d7c <__ultoa_invert+0x58>
    5da8:	b4 e0       	ldi	r27, 0x04	; 4
    5daa:	a6 95       	lsr	r26
    5dac:	97 95       	ror	r25
    5dae:	87 95       	ror	r24
    5db0:	77 95       	ror	r23
    5db2:	67 95       	ror	r22
    5db4:	ba 95       	dec	r27
    5db6:	c9 f7       	brne	.-14     	; 0x5daa <__ultoa_invert+0x86>
    5db8:	00 97       	sbiw	r24, 0x00	; 0
    5dba:	61 05       	cpc	r22, r1
    5dbc:	71 05       	cpc	r23, r1
    5dbe:	08 95       	ret
    5dc0:	9b 01       	movw	r18, r22
    5dc2:	ac 01       	movw	r20, r24
    5dc4:	0a 2e       	mov	r0, r26
    5dc6:	06 94       	lsr	r0
    5dc8:	57 95       	ror	r21
    5dca:	47 95       	ror	r20
    5dcc:	37 95       	ror	r19
    5dce:	27 95       	ror	r18
    5dd0:	ba 95       	dec	r27
    5dd2:	c9 f7       	brne	.-14     	; 0x5dc6 <__ultoa_invert+0xa2>
    5dd4:	62 0f       	add	r22, r18
    5dd6:	73 1f       	adc	r23, r19
    5dd8:	84 1f       	adc	r24, r20
    5dda:	95 1f       	adc	r25, r21
    5ddc:	a0 1d       	adc	r26, r0
    5dde:	08 95       	ret

00005de0 <_exit>:
    5de0:	f8 94       	cli

00005de2 <__stop_program>:
    5de2:	ff cf       	rjmp	.-2      	; 0x5de2 <__stop_program>
