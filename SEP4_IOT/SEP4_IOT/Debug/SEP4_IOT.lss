
SEP4_IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004f2  00800200  000055c4  00005658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000055c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000fe2  008006f2  008006f2  00005b4a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005b4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005ba8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000960  00000000  00000000  00005be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000be7e  00000000  00000000  00006548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d89  00000000  00000000  000123c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005d8f  00000000  00000000  0001514f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002290  00000000  00000000  0001aee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003c0d  00000000  00000000  0001d170  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000afb3  00000000  00000000  00020d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008f8  00000000  00000000  0002bd30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	dc c3       	rjmp	.+1976   	; 0x7ea <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 b2 1e 	jmp	0x3d64	; 0x3d64 <__vector_25>
      68:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 48 1f 	jmp	0x3e90	; 0x3e90 <__vector_36>
      94:	0c 94 9a 1f 	jmp	0x3f34	; 0x3f34 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 51 23 	jmp	0x46a2	; 0x46a2 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 de 1f 	jmp	0x3fbc	; 0x3fbc <__vector_51>
      d0:	0c 94 30 20 	jmp	0x4060	; 0x4060 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 74 20 	jmp	0x40e8	; 0x40e8 <__vector_54>
      dc:	0c 94 c6 20 	jmp	0x418c	; 0x418c <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d5 16       	cp	r13, r21
      e6:	d5 16       	cp	r13, r21
      e8:	d5 16       	cp	r13, r21
      ea:	0c 17       	cp	r16, r28
      ec:	14 17       	cp	r17, r20
      ee:	29 17       	cp	r18, r25
      f0:	d5 16       	cp	r13, r21
      f2:	d5 16       	cp	r13, r21
      f4:	0c 17       	cp	r16, r28
      f6:	14 17       	cp	r17, r20
      f8:	73 23       	and	r23, r19
      fa:	e3 23       	and	r30, r19
      fc:	e3 23       	and	r30, r19
      fe:	e3 23       	and	r30, r19
     100:	e3 23       	and	r30, r19
     102:	e3 23       	and	r30, r19
     104:	e3 23       	and	r30, r19
     106:	e3 23       	and	r30, r19
     108:	73 23       	and	r23, r19
     10a:	e3 23       	and	r30, r19
     10c:	e3 23       	and	r30, r19
     10e:	e3 23       	and	r30, r19
     110:	e3 23       	and	r30, r19
     112:	e3 23       	and	r30, r19
     114:	e3 23       	and	r30, r19
     116:	e3 23       	and	r30, r19
     118:	75 23       	and	r23, r21
     11a:	e3 23       	and	r30, r19
     11c:	e3 23       	and	r30, r19
     11e:	e3 23       	and	r30, r19
     120:	e3 23       	and	r30, r19
     122:	e3 23       	and	r30, r19
     124:	e3 23       	and	r30, r19
     126:	e3 23       	and	r30, r19
     128:	e3 23       	and	r30, r19
     12a:	e3 23       	and	r30, r19
     12c:	e3 23       	and	r30, r19
     12e:	e3 23       	and	r30, r19
     130:	e3 23       	and	r30, r19
     132:	e3 23       	and	r30, r19
     134:	e3 23       	and	r30, r19
     136:	e3 23       	and	r30, r19
     138:	75 23       	and	r23, r21
     13a:	e3 23       	and	r30, r19
     13c:	e3 23       	and	r30, r19
     13e:	e3 23       	and	r30, r19
     140:	e3 23       	and	r30, r19
     142:	e3 23       	and	r30, r19
     144:	e3 23       	and	r30, r19
     146:	e3 23       	and	r30, r19
     148:	e3 23       	and	r30, r19
     14a:	e3 23       	and	r30, r19
     14c:	e3 23       	and	r30, r19
     14e:	e3 23       	and	r30, r19
     150:	e3 23       	and	r30, r19
     152:	e3 23       	and	r30, r19
     154:	e3 23       	and	r30, r19
     156:	e3 23       	and	r30, r19
     158:	df 23       	and	r29, r31
     15a:	e3 23       	and	r30, r19
     15c:	e3 23       	and	r30, r19
     15e:	e3 23       	and	r30, r19
     160:	e3 23       	and	r30, r19
     162:	e3 23       	and	r30, r19
     164:	e3 23       	and	r30, r19
     166:	e3 23       	and	r30, r19
     168:	aa 23       	and	r26, r26
     16a:	e3 23       	and	r30, r19
     16c:	e3 23       	and	r30, r19
     16e:	e3 23       	and	r30, r19
     170:	e3 23       	and	r30, r19
     172:	e3 23       	and	r30, r19
     174:	e3 23       	and	r30, r19
     176:	e3 23       	and	r30, r19
     178:	e3 23       	and	r30, r19
     17a:	e3 23       	and	r30, r19
     17c:	e3 23       	and	r30, r19
     17e:	e3 23       	and	r30, r19
     180:	e3 23       	and	r30, r19
     182:	e3 23       	and	r30, r19
     184:	e3 23       	and	r30, r19
     186:	e3 23       	and	r30, r19
     188:	9e 23       	and	r25, r30
     18a:	e3 23       	and	r30, r19
     18c:	e3 23       	and	r30, r19
     18e:	e3 23       	and	r30, r19
     190:	e3 23       	and	r30, r19
     192:	e3 23       	and	r30, r19
     194:	e3 23       	and	r30, r19
     196:	e3 23       	and	r30, r19
     198:	c2 23       	and	r28, r18

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 25 0b 	call	0x164a	; 0x164a <prvCheckTasksWaitingTermination>
     19e:	80 91 ff 14 	lds	r24, 0x14FF	; 0x8014ff <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	5b d2       	rcall	.+1206   	; 0x65e <vPortYield>
     1a8:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 52 14 	call	0x28a4	; 0x28a4 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <prvProcessTimerOrBlockTask>
     1c6:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	16 e0       	ldi	r17, 0x06	; 6
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e4 ec       	ldi	r30, 0xC4	; 196
     1e4:	f5 e5       	ldi	r31, 0x55	; 85
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a2 3f       	cpi	r26, 0xF2	; 242
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	26 e1       	ldi	r18, 0x16	; 22
     1f8:	a2 ef       	ldi	r26, 0xF2	; 242
     1fa:	b6 e0       	ldi	r27, 0x06	; 6
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a4 3d       	cpi	r26, 0xD4	; 212
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 b9 18 	call	0x3172	; 0x3172 <main>
     20a:	0c 94 e0 2a 	jmp	0x55c0	; 0x55c0 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     210:	ee ef       	ldi	r30, 0xFE	; 254
     212:	f6 e0       	ldi	r31, 0x06	; 6
     214:	a2 e0       	ldi	r26, 0x02	; 2
     216:	b7 e0       	ldi	r27, 0x07	; 7
     218:	b1 83       	std	Z+1, r27	; 0x01
     21a:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     21c:	13 82       	std	Z+3, r1	; 0x03
     21e:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     220:	ea ea       	ldi	r30, 0xAA	; 170
     222:	f4 e1       	ldi	r31, 0x14	; 20
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     224:	f0 93 fd 06 	sts	0x06FD, r31	; 0x8006fd <pxEnd+0x1>
     228:	e0 93 fc 06 	sts	0x06FC, r30	; 0x8006fc <pxEnd>
    pxEnd->xBlockSize = 0;
     22c:	13 82       	std	Z+3, r1	; 0x03
     22e:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     230:	11 82       	std	Z+1, r1	; 0x01
     232:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     234:	88 ea       	ldi	r24, 0xA8	; 168
     236:	9d e0       	ldi	r25, 0x0D	; 13
     238:	13 96       	adiw	r26, 0x03	; 3
     23a:	9c 93       	st	X, r25
     23c:	8e 93       	st	-X, r24
     23e:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     240:	ed 93       	st	X+, r30
     242:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     244:	90 93 f9 06 	sts	0x06F9, r25	; 0x8006f9 <xMinimumEverFreeBytesRemaining+0x1>
     248:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     24c:	90 93 fb 06 	sts	0x06FB, r25	; 0x8006fb <xFreeBytesRemaining+0x1>
     250:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	90 e8       	ldi	r25, 0x80	; 128
     258:	90 93 f3 06 	sts	0x06F3, r25	; 0x8006f3 <__data_end+0x1>
     25c:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <__data_end>
     260:	08 95       	ret

00000262 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     268:	ae ef       	ldi	r26, 0xFE	; 254
     26a:	b6 e0       	ldi	r27, 0x06	; 6
     26c:	01 c0       	rjmp	.+2      	; 0x270 <prvInsertBlockIntoFreeList+0xe>
     26e:	df 01       	movw	r26, r30
     270:	ed 91       	ld	r30, X+
     272:	fc 91       	ld	r31, X
     274:	11 97       	sbiw	r26, 0x01	; 1
     276:	ec 17       	cp	r30, r28
     278:	fd 07       	cpc	r31, r29
     27a:	c8 f3       	brcs	.-14     	; 0x26e <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     27c:	12 96       	adiw	r26, 0x02	; 2
     27e:	8d 91       	ld	r24, X+
     280:	9c 91       	ld	r25, X
     282:	13 97       	sbiw	r26, 0x03	; 3
     284:	9d 01       	movw	r18, r26
     286:	28 0f       	add	r18, r24
     288:	39 1f       	adc	r19, r25
     28a:	c2 17       	cp	r28, r18
     28c:	d3 07       	cpc	r29, r19
     28e:	49 f4       	brne	.+18     	; 0x2a2 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     290:	2a 81       	ldd	r18, Y+2	; 0x02
     292:	3b 81       	ldd	r19, Y+3	; 0x03
     294:	82 0f       	add	r24, r18
     296:	93 1f       	adc	r25, r19
     298:	13 96       	adiw	r26, 0x03	; 3
     29a:	9c 93       	st	X, r25
     29c:	8e 93       	st	-X, r24
     29e:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     2a0:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     2a2:	8a 81       	ldd	r24, Y+2	; 0x02
     2a4:	9b 81       	ldd	r25, Y+3	; 0x03
     2a6:	9e 01       	movw	r18, r28
     2a8:	28 0f       	add	r18, r24
     2aa:	39 1f       	adc	r19, r25
     2ac:	e2 17       	cp	r30, r18
     2ae:	f3 07       	cpc	r31, r19
     2b0:	c1 f4       	brne	.+48     	; 0x2e2 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     2b2:	20 91 fc 06 	lds	r18, 0x06FC	; 0x8006fc <pxEnd>
     2b6:	30 91 fd 06 	lds	r19, 0x06FD	; 0x8006fd <pxEnd+0x1>
     2ba:	e2 17       	cp	r30, r18
     2bc:	f3 07       	cpc	r31, r19
     2be:	71 f0       	breq	.+28     	; 0x2dc <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     2c0:	22 81       	ldd	r18, Z+2	; 0x02
     2c2:	33 81       	ldd	r19, Z+3	; 0x03
     2c4:	82 0f       	add	r24, r18
     2c6:	93 1f       	adc	r25, r19
     2c8:	9b 83       	std	Y+3, r25	; 0x03
     2ca:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     2cc:	ed 91       	ld	r30, X+
     2ce:	fc 91       	ld	r31, X
     2d0:	11 97       	sbiw	r26, 0x01	; 1
     2d2:	80 81       	ld	r24, Z
     2d4:	91 81       	ldd	r25, Z+1	; 0x01
     2d6:	99 83       	std	Y+1, r25	; 0x01
     2d8:	88 83       	st	Y, r24
     2da:	05 c0       	rjmp	.+10     	; 0x2e6 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     2dc:	39 83       	std	Y+1, r19	; 0x01
     2de:	28 83       	st	Y, r18
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     2e2:	f9 83       	std	Y+1, r31	; 0x01
     2e4:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     2e6:	ca 17       	cp	r28, r26
     2e8:	db 07       	cpc	r29, r27
     2ea:	11 f0       	breq	.+4      	; 0x2f0 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     2ec:	cd 93       	st	X+, r28
     2ee:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     2f6:	ef 92       	push	r14
     2f8:	ff 92       	push	r15
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     304:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     308:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <pxEnd>
     30c:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <pxEnd+0x1>
     310:	89 2b       	or	r24, r25
     312:	09 f4       	brne	.+2      	; 0x316 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     314:	7d df       	rcall	.-262    	; 0x210 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     316:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <__data_end>
     31a:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <__data_end+0x1>
     31e:	80 23       	and	r24, r16
     320:	91 23       	and	r25, r17
     322:	89 2b       	or	r24, r25
     324:	09 f0       	breq	.+2      	; 0x328 <pvPortMalloc+0x32>
     326:	76 c0       	rjmp	.+236    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     328:	01 15       	cp	r16, r1
     32a:	11 05       	cpc	r17, r1
     32c:	49 f0       	breq	.+18     	; 0x340 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     32e:	c8 01       	movw	r24, r16
     330:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     332:	08 17       	cp	r16, r24
     334:	19 07       	cpc	r17, r25
     336:	18 f0       	brcs	.+6      	; 0x33e <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     338:	00 e0       	ldi	r16, 0x00	; 0
     33a:	10 e0       	ldi	r17, 0x00	; 0
     33c:	01 c0       	rjmp	.+2      	; 0x340 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     33e:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     340:	01 15       	cp	r16, r1
     342:	11 05       	cpc	r17, r1
     344:	09 f4       	brne	.+2      	; 0x348 <pvPortMalloc+0x52>
     346:	69 c0       	rjmp	.+210    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     348:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <xFreeBytesRemaining>
     34c:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <xFreeBytesRemaining+0x1>
     350:	80 17       	cp	r24, r16
     352:	91 07       	cpc	r25, r17
     354:	08 f4       	brcc	.+2      	; 0x358 <pvPortMalloc+0x62>
     356:	64 c0       	rjmp	.+200    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     358:	c0 91 fe 06 	lds	r28, 0x06FE	; 0x8006fe <xStart>
     35c:	d0 91 ff 06 	lds	r29, 0x06FF	; 0x8006ff <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     360:	ee ef       	ldi	r30, 0xFE	; 254
     362:	f6 e0       	ldi	r31, 0x06	; 6
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     364:	02 c0       	rjmp	.+4      	; 0x36a <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     366:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     368:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     36a:	8a 81       	ldd	r24, Y+2	; 0x02
     36c:	9b 81       	ldd	r25, Y+3	; 0x03
     36e:	80 17       	cp	r24, r16
     370:	91 07       	cpc	r25, r17
     372:	20 f4       	brcc	.+8      	; 0x37c <pvPortMalloc+0x86>
     374:	88 81       	ld	r24, Y
     376:	99 81       	ldd	r25, Y+1	; 0x01
     378:	00 97       	sbiw	r24, 0x00	; 0
     37a:	a9 f7       	brne	.-22     	; 0x366 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     37c:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <pxEnd>
     380:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <pxEnd+0x1>
     384:	c8 17       	cp	r28, r24
     386:	d9 07       	cpc	r29, r25
     388:	09 f4       	brne	.+2      	; 0x38c <pvPortMalloc+0x96>
     38a:	4d c0       	rjmp	.+154    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     38c:	e0 80       	ld	r14, Z
     38e:	f1 80       	ldd	r15, Z+1	; 0x01
     390:	84 e0       	ldi	r24, 0x04	; 4
     392:	e8 0e       	add	r14, r24
     394:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     396:	88 81       	ld	r24, Y
     398:	99 81       	ldd	r25, Y+1	; 0x01
     39a:	91 83       	std	Z+1, r25	; 0x01
     39c:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     39e:	2a 81       	ldd	r18, Y+2	; 0x02
     3a0:	3b 81       	ldd	r19, Y+3	; 0x03
     3a2:	20 1b       	sub	r18, r16
     3a4:	31 0b       	sbc	r19, r17
     3a6:	29 30       	cpi	r18, 0x09	; 9
     3a8:	31 05       	cpc	r19, r1
     3aa:	48 f0       	brcs	.+18     	; 0x3be <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     3ac:	ce 01       	movw	r24, r28
     3ae:	80 0f       	add	r24, r16
     3b0:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     3b2:	fc 01       	movw	r30, r24
     3b4:	33 83       	std	Z+3, r19	; 0x03
     3b6:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     3b8:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     3ba:	0a 83       	std	Y+2, r16	; 0x02
     3bc:	52 df       	rcall	.-348    	; 0x262 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     3be:	2a 81       	ldd	r18, Y+2	; 0x02
     3c0:	3b 81       	ldd	r19, Y+3	; 0x03
     3c2:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <xFreeBytesRemaining>
     3c6:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <xFreeBytesRemaining+0x1>
     3ca:	82 1b       	sub	r24, r18
     3cc:	93 0b       	sbc	r25, r19
     3ce:	90 93 fb 06 	sts	0x06FB, r25	; 0x8006fb <xFreeBytesRemaining+0x1>
     3d2:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     3d6:	40 91 f8 06 	lds	r20, 0x06F8	; 0x8006f8 <xMinimumEverFreeBytesRemaining>
     3da:	50 91 f9 06 	lds	r21, 0x06F9	; 0x8006f9 <xMinimumEverFreeBytesRemaining+0x1>
     3de:	84 17       	cp	r24, r20
     3e0:	95 07       	cpc	r25, r21
     3e2:	20 f4       	brcc	.+8      	; 0x3ec <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     3e4:	90 93 f9 06 	sts	0x06F9, r25	; 0x8006f9 <xMinimumEverFreeBytesRemaining+0x1>
     3e8:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     3ec:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <__data_end>
     3f0:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <__data_end+0x1>
     3f4:	28 2b       	or	r18, r24
     3f6:	39 2b       	or	r19, r25
     3f8:	3b 83       	std	Y+3, r19	; 0x03
     3fa:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     3fc:	19 82       	std	Y+1, r1	; 0x01
     3fe:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     400:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <xNumberOfSuccessfulAllocations>
     404:	90 91 f7 06 	lds	r25, 0x06F7	; 0x8006f7 <xNumberOfSuccessfulAllocations+0x1>
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	90 93 f7 06 	sts	0x06F7, r25	; 0x8006f7 <xNumberOfSuccessfulAllocations+0x1>
     40e:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <xNumberOfSuccessfulAllocations>
     412:	0b c0       	rjmp	.+22     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     414:	e1 2c       	mov	r14, r1
     416:	f1 2c       	mov	r15, r1
     418:	08 c0       	rjmp	.+16     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     41a:	e1 2c       	mov	r14, r1
     41c:	f1 2c       	mov	r15, r1
     41e:	05 c0       	rjmp	.+10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     420:	e1 2c       	mov	r14, r1
     422:	f1 2c       	mov	r15, r1
     424:	02 c0       	rjmp	.+4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     426:	e1 2c       	mov	r14, r1
     428:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     42a:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     42e:	e1 14       	cp	r14, r1
     430:	f1 04       	cpc	r15, r1
     432:	11 f4       	brne	.+4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     434:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     438:	c7 01       	movw	r24, r14
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	ff 90       	pop	r15
     444:	ef 90       	pop	r14
     446:	08 95       	ret

00000448 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     450:	00 97       	sbiw	r24, 0x00	; 0
     452:	91 f1       	breq	.+100    	; 0x4b8 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     454:	ec 01       	movw	r28, r24
     456:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     458:	4a 81       	ldd	r20, Y+2	; 0x02
     45a:	5b 81       	ldd	r21, Y+3	; 0x03
     45c:	20 91 f2 06 	lds	r18, 0x06F2	; 0x8006f2 <__data_end>
     460:	30 91 f3 06 	lds	r19, 0x06F3	; 0x8006f3 <__data_end+0x1>
     464:	ba 01       	movw	r22, r20
     466:	62 23       	and	r22, r18
     468:	73 23       	and	r23, r19
     46a:	67 2b       	or	r22, r23
     46c:	29 f1       	breq	.+74     	; 0x4b8 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     46e:	68 81       	ld	r22, Y
     470:	79 81       	ldd	r23, Y+1	; 0x01
     472:	67 2b       	or	r22, r23
     474:	09 f5       	brne	.+66     	; 0x4b8 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     476:	20 95       	com	r18
     478:	30 95       	com	r19
     47a:	24 23       	and	r18, r20
     47c:	35 23       	and	r19, r21
     47e:	3b 83       	std	Y+3, r19	; 0x03
     480:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     482:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     486:	8a 81       	ldd	r24, Y+2	; 0x02
     488:	9b 81       	ldd	r25, Y+3	; 0x03
     48a:	20 91 fa 06 	lds	r18, 0x06FA	; 0x8006fa <xFreeBytesRemaining>
     48e:	30 91 fb 06 	lds	r19, 0x06FB	; 0x8006fb <xFreeBytesRemaining+0x1>
     492:	82 0f       	add	r24, r18
     494:	93 1f       	adc	r25, r19
     496:	90 93 fb 06 	sts	0x06FB, r25	; 0x8006fb <xFreeBytesRemaining+0x1>
     49a:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     49e:	ce 01       	movw	r24, r28
     4a0:	e0 de       	rcall	.-576    	; 0x262 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     4a2:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <xNumberOfSuccessfulFrees>
     4a6:	90 91 f5 06 	lds	r25, 0x06F5	; 0x8006f5 <xNumberOfSuccessfulFrees+0x1>
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	90 93 f5 06 	sts	0x06F5, r25	; 0x8006f5 <xNumberOfSuccessfulFrees+0x1>
     4b0:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     4b4:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	08 95       	ret

000004c2 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     4c2:	fc 01       	movw	r30, r24
     4c4:	03 96       	adiw	r24, 0x03	; 3
     4c6:	92 83       	std	Z+2, r25	; 0x02
     4c8:	81 83       	std	Z+1, r24	; 0x01
     4ca:	4f ef       	ldi	r20, 0xFF	; 255
     4cc:	5f ef       	ldi	r21, 0xFF	; 255
     4ce:	ba 01       	movw	r22, r20
     4d0:	43 83       	std	Z+3, r20	; 0x03
     4d2:	54 83       	std	Z+4, r21	; 0x04
     4d4:	65 83       	std	Z+5, r22	; 0x05
     4d6:	76 83       	std	Z+6, r23	; 0x06
     4d8:	90 87       	std	Z+8, r25	; 0x08
     4da:	87 83       	std	Z+7, r24	; 0x07
     4dc:	92 87       	std	Z+10, r25	; 0x0a
     4de:	81 87       	std	Z+9, r24	; 0x09
     4e0:	10 82       	st	Z, r1
     4e2:	08 95       	ret

000004e4 <vListInitialiseItem>:
     4e4:	fc 01       	movw	r30, r24
     4e6:	13 86       	std	Z+11, r1	; 0x0b
     4e8:	12 86       	std	Z+10, r1	; 0x0a
     4ea:	08 95       	ret

000004ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     4f6:	08 81       	ld	r16, Y
     4f8:	19 81       	ldd	r17, Y+1	; 0x01
     4fa:	2a 81       	ldd	r18, Y+2	; 0x02
     4fc:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     4fe:	0f 3f       	cpi	r16, 0xFF	; 255
     500:	4f ef       	ldi	r20, 0xFF	; 255
     502:	14 07       	cpc	r17, r20
     504:	24 07       	cpc	r18, r20
     506:	34 07       	cpc	r19, r20
     508:	21 f4       	brne	.+8      	; 0x512 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     50a:	fc 01       	movw	r30, r24
     50c:	a1 85       	ldd	r26, Z+9	; 0x09
     50e:	b2 85       	ldd	r27, Z+10	; 0x0a
     510:	11 c0       	rjmp	.+34     	; 0x534 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     512:	dc 01       	movw	r26, r24
     514:	13 96       	adiw	r26, 0x03	; 3
     516:	01 c0       	rjmp	.+2      	; 0x51a <vListInsert+0x2e>
     518:	df 01       	movw	r26, r30
     51a:	14 96       	adiw	r26, 0x04	; 4
     51c:	ed 91       	ld	r30, X+
     51e:	fc 91       	ld	r31, X
     520:	15 97       	sbiw	r26, 0x05	; 5
     522:	40 81       	ld	r20, Z
     524:	51 81       	ldd	r21, Z+1	; 0x01
     526:	62 81       	ldd	r22, Z+2	; 0x02
     528:	73 81       	ldd	r23, Z+3	; 0x03
     52a:	04 17       	cp	r16, r20
     52c:	15 07       	cpc	r17, r21
     52e:	26 07       	cpc	r18, r22
     530:	37 07       	cpc	r19, r23
     532:	90 f7       	brcc	.-28     	; 0x518 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     534:	14 96       	adiw	r26, 0x04	; 4
     536:	ed 91       	ld	r30, X+
     538:	fc 91       	ld	r31, X
     53a:	15 97       	sbiw	r26, 0x05	; 5
     53c:	fd 83       	std	Y+5, r31	; 0x05
     53e:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     540:	d7 83       	std	Z+7, r29	; 0x07
     542:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     544:	bf 83       	std	Y+7, r27	; 0x07
     546:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     548:	15 96       	adiw	r26, 0x05	; 5
     54a:	dc 93       	st	X, r29
     54c:	ce 93       	st	-X, r28
     54e:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     550:	9b 87       	std	Y+11, r25	; 0x0b
     552:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     554:	fc 01       	movw	r30, r24
     556:	20 81       	ld	r18, Z
     558:	2f 5f       	subi	r18, 0xFF	; 255
     55a:	20 83       	st	Z, r18
}
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	1f 91       	pop	r17
     562:	0f 91       	pop	r16
     564:	08 95       	ret

00000566 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     56c:	a2 85       	ldd	r26, Z+10	; 0x0a
     56e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     570:	c4 81       	ldd	r28, Z+4	; 0x04
     572:	d5 81       	ldd	r29, Z+5	; 0x05
     574:	86 81       	ldd	r24, Z+6	; 0x06
     576:	97 81       	ldd	r25, Z+7	; 0x07
     578:	9f 83       	std	Y+7, r25	; 0x07
     57a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     57c:	c6 81       	ldd	r28, Z+6	; 0x06
     57e:	d7 81       	ldd	r29, Z+7	; 0x07
     580:	84 81       	ldd	r24, Z+4	; 0x04
     582:	95 81       	ldd	r25, Z+5	; 0x05
     584:	9d 83       	std	Y+5, r25	; 0x05
     586:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     588:	11 96       	adiw	r26, 0x01	; 1
     58a:	8d 91       	ld	r24, X+
     58c:	9c 91       	ld	r25, X
     58e:	12 97       	sbiw	r26, 0x02	; 2
     590:	e8 17       	cp	r30, r24
     592:	f9 07       	cpc	r31, r25
     594:	31 f4       	brne	.+12     	; 0x5a2 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     596:	86 81       	ldd	r24, Z+6	; 0x06
     598:	97 81       	ldd	r25, Z+7	; 0x07
     59a:	12 96       	adiw	r26, 0x02	; 2
     59c:	9c 93       	st	X, r25
     59e:	8e 93       	st	-X, r24
     5a0:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     5a2:	13 86       	std	Z+11, r1	; 0x0b
     5a4:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     5a6:	8c 91       	ld	r24, X
     5a8:	81 50       	subi	r24, 0x01	; 1
     5aa:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     5ac:	8c 91       	ld	r24, X
}
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	08 95       	ret

000005b4 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     5b4:	a8 95       	wdr
     5b6:	90 ec       	ldi	r25, 0xC0	; 192
     5b8:	88 e1       	ldi	r24, 0x18	; 24
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	a8 95       	wdr
     5c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     5ca:	08 95       	ret

000005cc <pxPortInitialiseStack>:
     5cc:	fc 01       	movw	r30, r24
     5ce:	60 83       	st	Z, r22
     5d0:	31 97       	sbiw	r30, 0x01	; 1
     5d2:	70 83       	st	Z, r23
     5d4:	31 97       	sbiw	r30, 0x01	; 1
     5d6:	10 82       	st	Z, r1
     5d8:	31 97       	sbiw	r30, 0x01	; 1
     5da:	10 82       	st	Z, r1
     5dc:	31 97       	sbiw	r30, 0x01	; 1
     5de:	20 e8       	ldi	r18, 0x80	; 128
     5e0:	20 83       	st	Z, r18
     5e2:	31 97       	sbiw	r30, 0x01	; 1
     5e4:	10 82       	st	Z, r1
     5e6:	31 97       	sbiw	r30, 0x01	; 1
     5e8:	10 82       	st	Z, r1
     5ea:	31 97       	sbiw	r30, 0x01	; 1
     5ec:	10 82       	st	Z, r1
     5ee:	77 97       	sbiw	r30, 0x17	; 23
     5f0:	40 83       	st	Z, r20
     5f2:	31 97       	sbiw	r30, 0x01	; 1
     5f4:	50 83       	st	Z, r21
     5f6:	86 97       	sbiw	r24, 0x26	; 38
     5f8:	08 95       	ret

000005fa <xPortStartScheduler>:
     5fa:	dc df       	rcall	.-72     	; 0x5b4 <prvSetupTimerInterrupt>
     5fc:	a0 91 6d 15 	lds	r26, 0x156D	; 0x80156d <pxCurrentTCB>
     600:	b0 91 6e 15 	lds	r27, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
     604:	cd 91       	ld	r28, X+
     606:	cd bf       	out	0x3d, r28	; 61
     608:	dd 91       	ld	r29, X+
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	ff 91       	pop	r31
     60e:	ef 91       	pop	r30
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	bf 91       	pop	r27
     616:	af 91       	pop	r26
     618:	9f 91       	pop	r25
     61a:	8f 91       	pop	r24
     61c:	7f 91       	pop	r23
     61e:	6f 91       	pop	r22
     620:	5f 91       	pop	r21
     622:	4f 91       	pop	r20
     624:	3f 91       	pop	r19
     626:	2f 91       	pop	r18
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	df 90       	pop	r13
     632:	cf 90       	pop	r12
     634:	bf 90       	pop	r11
     636:	af 90       	pop	r10
     638:	9f 90       	pop	r9
     63a:	8f 90       	pop	r8
     63c:	7f 90       	pop	r7
     63e:	6f 90       	pop	r6
     640:	5f 90       	pop	r5
     642:	4f 90       	pop	r4
     644:	3f 90       	pop	r3
     646:	2f 90       	pop	r2
     648:	1f 90       	pop	r1
     64a:	0f 90       	pop	r0
     64c:	0c be       	out	0x3c, r0	; 60
     64e:	0f 90       	pop	r0
     650:	0b be       	out	0x3b, r0	; 59
     652:	0f 90       	pop	r0
     654:	0f be       	out	0x3f, r0	; 63
     656:	0f 90       	pop	r0
     658:	08 95       	ret
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	08 95       	ret

0000065e <vPortYield>:
     65e:	0f 92       	push	r0
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	f8 94       	cli
     664:	0f 92       	push	r0
     666:	0b b6       	in	r0, 0x3b	; 59
     668:	0f 92       	push	r0
     66a:	0c b6       	in	r0, 0x3c	; 60
     66c:	0f 92       	push	r0
     66e:	1f 92       	push	r1
     670:	11 24       	eor	r1, r1
     672:	2f 92       	push	r2
     674:	3f 92       	push	r3
     676:	4f 92       	push	r4
     678:	5f 92       	push	r5
     67a:	6f 92       	push	r6
     67c:	7f 92       	push	r7
     67e:	8f 92       	push	r8
     680:	9f 92       	push	r9
     682:	af 92       	push	r10
     684:	bf 92       	push	r11
     686:	cf 92       	push	r12
     688:	df 92       	push	r13
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	2f 93       	push	r18
     694:	3f 93       	push	r19
     696:	4f 93       	push	r20
     698:	5f 93       	push	r21
     69a:	6f 93       	push	r22
     69c:	7f 93       	push	r23
     69e:	8f 93       	push	r24
     6a0:	9f 93       	push	r25
     6a2:	af 93       	push	r26
     6a4:	bf 93       	push	r27
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	ef 93       	push	r30
     6ac:	ff 93       	push	r31
     6ae:	a0 91 6d 15 	lds	r26, 0x156D	; 0x80156d <pxCurrentTCB>
     6b2:	b0 91 6e 15 	lds	r27, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
     6b6:	0d b6       	in	r0, 0x3d	; 61
     6b8:	0d 92       	st	X+, r0
     6ba:	0e b6       	in	r0, 0x3e	; 62
     6bc:	0d 92       	st	X+, r0
     6be:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <vTaskSwitchContext>
     6c2:	a0 91 6d 15 	lds	r26, 0x156D	; 0x80156d <pxCurrentTCB>
     6c6:	b0 91 6e 15 	lds	r27, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
     6ca:	cd 91       	ld	r28, X+
     6cc:	cd bf       	out	0x3d, r28	; 61
     6ce:	dd 91       	ld	r29, X+
     6d0:	de bf       	out	0x3e, r29	; 62
     6d2:	ff 91       	pop	r31
     6d4:	ef 91       	pop	r30
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	bf 91       	pop	r27
     6dc:	af 91       	pop	r26
     6de:	9f 91       	pop	r25
     6e0:	8f 91       	pop	r24
     6e2:	7f 91       	pop	r23
     6e4:	6f 91       	pop	r22
     6e6:	5f 91       	pop	r21
     6e8:	4f 91       	pop	r20
     6ea:	3f 91       	pop	r19
     6ec:	2f 91       	pop	r18
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	ff 90       	pop	r15
     6f4:	ef 90       	pop	r14
     6f6:	df 90       	pop	r13
     6f8:	cf 90       	pop	r12
     6fa:	bf 90       	pop	r11
     6fc:	af 90       	pop	r10
     6fe:	9f 90       	pop	r9
     700:	8f 90       	pop	r8
     702:	7f 90       	pop	r7
     704:	6f 90       	pop	r6
     706:	5f 90       	pop	r5
     708:	4f 90       	pop	r4
     70a:	3f 90       	pop	r3
     70c:	2f 90       	pop	r2
     70e:	1f 90       	pop	r1
     710:	0f 90       	pop	r0
     712:	0c be       	out	0x3c, r0	; 60
     714:	0f 90       	pop	r0
     716:	0b be       	out	0x3b, r0	; 59
     718:	0f 90       	pop	r0
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	0f 90       	pop	r0
     71e:	08 95       	ret

00000720 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     720:	0f 92       	push	r0
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	0f 92       	push	r0
     728:	0b b6       	in	r0, 0x3b	; 59
     72a:	0f 92       	push	r0
     72c:	0c b6       	in	r0, 0x3c	; 60
     72e:	0f 92       	push	r0
     730:	1f 92       	push	r1
     732:	11 24       	eor	r1, r1
     734:	2f 92       	push	r2
     736:	3f 92       	push	r3
     738:	4f 92       	push	r4
     73a:	5f 92       	push	r5
     73c:	6f 92       	push	r6
     73e:	7f 92       	push	r7
     740:	8f 92       	push	r8
     742:	9f 92       	push	r9
     744:	af 92       	push	r10
     746:	bf 92       	push	r11
     748:	cf 92       	push	r12
     74a:	df 92       	push	r13
     74c:	ef 92       	push	r14
     74e:	ff 92       	push	r15
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	2f 93       	push	r18
     756:	3f 93       	push	r19
     758:	4f 93       	push	r20
     75a:	5f 93       	push	r21
     75c:	6f 93       	push	r22
     75e:	7f 93       	push	r23
     760:	8f 93       	push	r24
     762:	9f 93       	push	r25
     764:	af 93       	push	r26
     766:	bf 93       	push	r27
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	ef 93       	push	r30
     76e:	ff 93       	push	r31
     770:	a0 91 6d 15 	lds	r26, 0x156D	; 0x80156d <pxCurrentTCB>
     774:	b0 91 6e 15 	lds	r27, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
     778:	0d b6       	in	r0, 0x3d	; 61
     77a:	0d 92       	st	X+, r0
     77c:	0e b6       	in	r0, 0x3e	; 62
     77e:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     780:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     782:	0e 94 84 0c 	call	0x1908	; 0x1908 <xTaskIncrementTick>
     786:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     788:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     78c:	a0 91 6d 15 	lds	r26, 0x156D	; 0x80156d <pxCurrentTCB>
     790:	b0 91 6e 15 	lds	r27, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
     794:	cd 91       	ld	r28, X+
     796:	cd bf       	out	0x3d, r28	; 61
     798:	dd 91       	ld	r29, X+
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	ff 91       	pop	r31
     79e:	ef 91       	pop	r30
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	bf 91       	pop	r27
     7a6:	af 91       	pop	r26
     7a8:	9f 91       	pop	r25
     7aa:	8f 91       	pop	r24
     7ac:	7f 91       	pop	r23
     7ae:	6f 91       	pop	r22
     7b0:	5f 91       	pop	r21
     7b2:	4f 91       	pop	r20
     7b4:	3f 91       	pop	r19
     7b6:	2f 91       	pop	r18
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	ff 90       	pop	r15
     7be:	ef 90       	pop	r14
     7c0:	df 90       	pop	r13
     7c2:	cf 90       	pop	r12
     7c4:	bf 90       	pop	r11
     7c6:	af 90       	pop	r10
     7c8:	9f 90       	pop	r9
     7ca:	8f 90       	pop	r8
     7cc:	7f 90       	pop	r7
     7ce:	6f 90       	pop	r6
     7d0:	5f 90       	pop	r5
     7d2:	4f 90       	pop	r4
     7d4:	3f 90       	pop	r3
     7d6:	2f 90       	pop	r2
     7d8:	1f 90       	pop	r1
     7da:	0f 90       	pop	r0
     7dc:	0c be       	out	0x3c, r0	; 60
     7de:	0f 90       	pop	r0
     7e0:	0b be       	out	0x3b, r0	; 59
     7e2:	0f 90       	pop	r0
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     7e8:	08 95       	ret

000007ea <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     7ea:	9a df       	rcall	.-204    	; 0x720 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     7ec:	18 95       	reti

000007ee <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	0f 92       	push	r0
     7f4:	fc 01       	movw	r30, r24
     7f6:	86 8d       	ldd	r24, Z+30	; 0x1e
     7f8:	81 11       	cpse	r24, r1
     7fa:	02 c0       	rjmp	.+4      	; 0x800 <prvIsQueueEmpty+0x12>
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	01 c0       	rjmp	.+2      	; 0x802 <prvIsQueueEmpty+0x14>
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	0f 90       	pop	r0
     804:	0f be       	out	0x3f, r0	; 63
     806:	08 95       	ret

00000808 <prvIsQueueFull>:
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	f8 94       	cli
     80c:	0f 92       	push	r0
     80e:	fc 01       	movw	r30, r24
     810:	26 8d       	ldd	r18, Z+30	; 0x1e
     812:	87 8d       	ldd	r24, Z+31	; 0x1f
     814:	28 13       	cpse	r18, r24
     816:	02 c0       	rjmp	.+4      	; 0x81c <prvIsQueueFull+0x14>
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	01 c0       	rjmp	.+2      	; 0x81e <prvIsQueueFull+0x16>
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	0f 90       	pop	r0
     820:	0f be       	out	0x3f, r0	; 63
     822:	08 95       	ret

00000824 <prvCopyDataToQueue>:
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	ec 01       	movw	r28, r24
     82e:	04 2f       	mov	r16, r20
     830:	1e 8d       	ldd	r17, Y+30	; 0x1e
     832:	48 a1       	ldd	r20, Y+32	; 0x20
     834:	41 11       	cpse	r20, r1
     836:	0c c0       	rjmp	.+24     	; 0x850 <prvCopyDataToQueue+0x2c>
     838:	88 81       	ld	r24, Y
     83a:	99 81       	ldd	r25, Y+1	; 0x01
     83c:	89 2b       	or	r24, r25
     83e:	09 f0       	breq	.+2      	; 0x842 <prvCopyDataToQueue+0x1e>
     840:	42 c0       	rjmp	.+132    	; 0x8c6 <prvCopyDataToQueue+0xa2>
     842:	8c 81       	ldd	r24, Y+4	; 0x04
     844:	9d 81       	ldd	r25, Y+5	; 0x05
     846:	0e 94 1d 11 	call	0x223a	; 0x223a <xTaskPriorityDisinherit>
     84a:	1d 82       	std	Y+5, r1	; 0x05
     84c:	1c 82       	std	Y+4, r1	; 0x04
     84e:	42 c0       	rjmp	.+132    	; 0x8d4 <prvCopyDataToQueue+0xb0>
     850:	01 11       	cpse	r16, r1
     852:	17 c0       	rjmp	.+46     	; 0x882 <prvCopyDataToQueue+0x5e>
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	8a 81       	ldd	r24, Y+2	; 0x02
     858:	9b 81       	ldd	r25, Y+3	; 0x03
     85a:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <memcpy>
     85e:	28 a1       	ldd	r18, Y+32	; 0x20
     860:	8a 81       	ldd	r24, Y+2	; 0x02
     862:	9b 81       	ldd	r25, Y+3	; 0x03
     864:	82 0f       	add	r24, r18
     866:	91 1d       	adc	r25, r1
     868:	9b 83       	std	Y+3, r25	; 0x03
     86a:	8a 83       	std	Y+2, r24	; 0x02
     86c:	2c 81       	ldd	r18, Y+4	; 0x04
     86e:	3d 81       	ldd	r19, Y+5	; 0x05
     870:	82 17       	cp	r24, r18
     872:	93 07       	cpc	r25, r19
     874:	50 f1       	brcs	.+84     	; 0x8ca <prvCopyDataToQueue+0xa6>
     876:	88 81       	ld	r24, Y
     878:	99 81       	ldd	r25, Y+1	; 0x01
     87a:	9b 83       	std	Y+3, r25	; 0x03
     87c:	8a 83       	std	Y+2, r24	; 0x02
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	29 c0       	rjmp	.+82     	; 0x8d4 <prvCopyDataToQueue+0xb0>
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	8e 81       	ldd	r24, Y+6	; 0x06
     886:	9f 81       	ldd	r25, Y+7	; 0x07
     888:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <memcpy>
     88c:	88 a1       	ldd	r24, Y+32	; 0x20
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	91 95       	neg	r25
     892:	81 95       	neg	r24
     894:	91 09       	sbc	r25, r1
     896:	2e 81       	ldd	r18, Y+6	; 0x06
     898:	3f 81       	ldd	r19, Y+7	; 0x07
     89a:	28 0f       	add	r18, r24
     89c:	39 1f       	adc	r19, r25
     89e:	3f 83       	std	Y+7, r19	; 0x07
     8a0:	2e 83       	std	Y+6, r18	; 0x06
     8a2:	48 81       	ld	r20, Y
     8a4:	59 81       	ldd	r21, Y+1	; 0x01
     8a6:	24 17       	cp	r18, r20
     8a8:	35 07       	cpc	r19, r21
     8aa:	30 f4       	brcc	.+12     	; 0x8b8 <prvCopyDataToQueue+0x94>
     8ac:	2c 81       	ldd	r18, Y+4	; 0x04
     8ae:	3d 81       	ldd	r19, Y+5	; 0x05
     8b0:	82 0f       	add	r24, r18
     8b2:	93 1f       	adc	r25, r19
     8b4:	9f 83       	std	Y+7, r25	; 0x07
     8b6:	8e 83       	std	Y+6, r24	; 0x06
     8b8:	02 30       	cpi	r16, 0x02	; 2
     8ba:	49 f4       	brne	.+18     	; 0x8ce <prvCopyDataToQueue+0xaa>
     8bc:	11 23       	and	r17, r17
     8be:	49 f0       	breq	.+18     	; 0x8d2 <prvCopyDataToQueue+0xae>
     8c0:	11 50       	subi	r17, 0x01	; 1
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	07 c0       	rjmp	.+14     	; 0x8d4 <prvCopyDataToQueue+0xb0>
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	05 c0       	rjmp	.+10     	; 0x8d4 <prvCopyDataToQueue+0xb0>
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	03 c0       	rjmp	.+6      	; 0x8d4 <prvCopyDataToQueue+0xb0>
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	01 c0       	rjmp	.+2      	; 0x8d4 <prvCopyDataToQueue+0xb0>
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	1f 5f       	subi	r17, 0xFF	; 255
     8d6:	1e 8f       	std	Y+30, r17	; 0x1e
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	08 95       	ret

000008e2 <prvCopyDataFromQueue>:
     8e2:	fc 01       	movw	r30, r24
     8e4:	40 a1       	ldd	r20, Z+32	; 0x20
     8e6:	44 23       	and	r20, r20
     8e8:	a9 f0       	breq	.+42     	; 0x914 <prvCopyDataFromQueue+0x32>
     8ea:	50 e0       	ldi	r21, 0x00	; 0
     8ec:	26 81       	ldd	r18, Z+6	; 0x06
     8ee:	37 81       	ldd	r19, Z+7	; 0x07
     8f0:	24 0f       	add	r18, r20
     8f2:	35 1f       	adc	r19, r21
     8f4:	37 83       	std	Z+7, r19	; 0x07
     8f6:	26 83       	std	Z+6, r18	; 0x06
     8f8:	84 81       	ldd	r24, Z+4	; 0x04
     8fa:	95 81       	ldd	r25, Z+5	; 0x05
     8fc:	28 17       	cp	r18, r24
     8fe:	39 07       	cpc	r19, r25
     900:	20 f0       	brcs	.+8      	; 0x90a <prvCopyDataFromQueue+0x28>
     902:	80 81       	ld	r24, Z
     904:	91 81       	ldd	r25, Z+1	; 0x01
     906:	97 83       	std	Z+7, r25	; 0x07
     908:	86 83       	std	Z+6, r24	; 0x06
     90a:	cb 01       	movw	r24, r22
     90c:	66 81       	ldd	r22, Z+6	; 0x06
     90e:	77 81       	ldd	r23, Z+7	; 0x07
     910:	0c 94 63 27 	jmp	0x4ec6	; 0x4ec6 <memcpy>
     914:	08 95       	ret

00000916 <prvUnlockQueue>:
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	ec 01       	movw	r28, r24
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	f8 94       	cli
     922:	0f 92       	push	r0
     924:	1a a1       	ldd	r17, Y+34	; 0x22
     926:	0b c0       	rjmp	.+22     	; 0x93e <prvUnlockQueue+0x28>
     928:	8b 89       	ldd	r24, Y+19	; 0x13
     92a:	88 23       	and	r24, r24
     92c:	51 f0       	breq	.+20     	; 0x942 <prvUnlockQueue+0x2c>
     92e:	ce 01       	movw	r24, r28
     930:	43 96       	adiw	r24, 0x13	; 19
     932:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskRemoveFromEventList>
     936:	81 11       	cpse	r24, r1
     938:	0e 94 06 11 	call	0x220c	; 0x220c <vTaskMissedYield>
     93c:	11 50       	subi	r17, 0x01	; 1
     93e:	11 16       	cp	r1, r17
     940:	9c f3       	brlt	.-26     	; 0x928 <prvUnlockQueue+0x12>
     942:	8f ef       	ldi	r24, 0xFF	; 255
     944:	8a a3       	std	Y+34, r24	; 0x22
     946:	0f 90       	pop	r0
     948:	0f be       	out	0x3f, r0	; 63
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	f8 94       	cli
     94e:	0f 92       	push	r0
     950:	19 a1       	ldd	r17, Y+33	; 0x21
     952:	0b c0       	rjmp	.+22     	; 0x96a <prvUnlockQueue+0x54>
     954:	88 85       	ldd	r24, Y+8	; 0x08
     956:	88 23       	and	r24, r24
     958:	51 f0       	breq	.+20     	; 0x96e <prvUnlockQueue+0x58>
     95a:	ce 01       	movw	r24, r28
     95c:	08 96       	adiw	r24, 0x08	; 8
     95e:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskRemoveFromEventList>
     962:	81 11       	cpse	r24, r1
     964:	0e 94 06 11 	call	0x220c	; 0x220c <vTaskMissedYield>
     968:	11 50       	subi	r17, 0x01	; 1
     96a:	11 16       	cp	r1, r17
     96c:	9c f3       	brlt	.-26     	; 0x954 <prvUnlockQueue+0x3e>
     96e:	8f ef       	ldi	r24, 0xFF	; 255
     970:	89 a3       	std	Y+33, r24	; 0x21
     972:	0f 90       	pop	r0
     974:	0f be       	out	0x3f, r0	; 63
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	08 95       	ret

0000097e <xQueueGenericReset>:
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	ec 01       	movw	r28, r24
     984:	0f b6       	in	r0, 0x3f	; 63
     986:	f8 94       	cli
     988:	0f 92       	push	r0
     98a:	e8 81       	ld	r30, Y
     98c:	f9 81       	ldd	r31, Y+1	; 0x01
     98e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     990:	28 a1       	ldd	r18, Y+32	; 0x20
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	82 9f       	mul	r24, r18
     998:	a0 01       	movw	r20, r0
     99a:	83 9f       	mul	r24, r19
     99c:	50 0d       	add	r21, r0
     99e:	92 9f       	mul	r25, r18
     9a0:	50 0d       	add	r21, r0
     9a2:	11 24       	eor	r1, r1
     9a4:	4e 0f       	add	r20, r30
     9a6:	5f 1f       	adc	r21, r31
     9a8:	5d 83       	std	Y+5, r21	; 0x05
     9aa:	4c 83       	std	Y+4, r20	; 0x04
     9ac:	1e 8e       	std	Y+30, r1	; 0x1e
     9ae:	fb 83       	std	Y+3, r31	; 0x03
     9b0:	ea 83       	std	Y+2, r30	; 0x02
     9b2:	01 97       	sbiw	r24, 0x01	; 1
     9b4:	28 9f       	mul	r18, r24
     9b6:	a0 01       	movw	r20, r0
     9b8:	29 9f       	mul	r18, r25
     9ba:	50 0d       	add	r21, r0
     9bc:	38 9f       	mul	r19, r24
     9be:	50 0d       	add	r21, r0
     9c0:	11 24       	eor	r1, r1
     9c2:	cf 01       	movw	r24, r30
     9c4:	84 0f       	add	r24, r20
     9c6:	95 1f       	adc	r25, r21
     9c8:	9f 83       	std	Y+7, r25	; 0x07
     9ca:	8e 83       	std	Y+6, r24	; 0x06
     9cc:	8f ef       	ldi	r24, 0xFF	; 255
     9ce:	89 a3       	std	Y+33, r24	; 0x21
     9d0:	8a a3       	std	Y+34, r24	; 0x22
     9d2:	61 11       	cpse	r22, r1
     9d4:	0b c0       	rjmp	.+22     	; 0x9ec <xQueueGenericReset+0x6e>
     9d6:	88 85       	ldd	r24, Y+8	; 0x08
     9d8:	88 23       	and	r24, r24
     9da:	71 f0       	breq	.+28     	; 0x9f8 <xQueueGenericReset+0x7a>
     9dc:	ce 01       	movw	r24, r28
     9de:	08 96       	adiw	r24, 0x08	; 8
     9e0:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskRemoveFromEventList>
     9e4:	88 23       	and	r24, r24
     9e6:	41 f0       	breq	.+16     	; 0x9f8 <xQueueGenericReset+0x7a>
     9e8:	3a de       	rcall	.-908    	; 0x65e <vPortYield>
     9ea:	06 c0       	rjmp	.+12     	; 0x9f8 <xQueueGenericReset+0x7a>
     9ec:	ce 01       	movw	r24, r28
     9ee:	08 96       	adiw	r24, 0x08	; 8
     9f0:	68 dd       	rcall	.-1328   	; 0x4c2 <vListInitialise>
     9f2:	ce 01       	movw	r24, r28
     9f4:	43 96       	adiw	r24, 0x13	; 19
     9f6:	65 dd       	rcall	.-1334   	; 0x4c2 <vListInitialise>
     9f8:	0f 90       	pop	r0
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	08 95       	ret

00000a04 <prvInitialiseNewQueue>:
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	f8 01       	movw	r30, r16
     a0a:	61 11       	cpse	r22, r1
     a0c:	03 c0       	rjmp	.+6      	; 0xa14 <prvInitialiseNewQueue+0x10>
     a0e:	11 83       	std	Z+1, r17	; 0x01
     a10:	00 83       	st	Z, r16
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <prvInitialiseNewQueue+0x14>
     a14:	51 83       	std	Z+1, r21	; 0x01
     a16:	40 83       	st	Z, r20
     a18:	87 8f       	std	Z+31, r24	; 0x1f
     a1a:	60 a3       	std	Z+32, r22	; 0x20
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	cf 01       	movw	r24, r30
     a20:	ae df       	rcall	.-164    	; 0x97e <xQueueGenericReset>
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	08 95       	ret

00000a28 <xQueueGenericCreate>:
     a28:	df 92       	push	r13
     a2a:	ef 92       	push	r14
     a2c:	ff 92       	push	r15
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	f8 2e       	mov	r15, r24
     a38:	e6 2e       	mov	r14, r22
     a3a:	d4 2e       	mov	r13, r20
     a3c:	86 9f       	mul	r24, r22
     a3e:	c0 01       	movw	r24, r0
     a40:	11 24       	eor	r1, r1
     a42:	83 96       	adiw	r24, 0x23	; 35
     a44:	58 dc       	rcall	.-1872   	; 0x2f6 <pvPortMalloc>
     a46:	ec 01       	movw	r28, r24
     a48:	00 97       	sbiw	r24, 0x00	; 0
     a4a:	41 f0       	breq	.+16     	; 0xa5c <xQueueGenericCreate+0x34>
     a4c:	8c 01       	movw	r16, r24
     a4e:	2d 2d       	mov	r18, r13
     a50:	ac 01       	movw	r20, r24
     a52:	4d 5d       	subi	r20, 0xDD	; 221
     a54:	5f 4f       	sbci	r21, 0xFF	; 255
     a56:	6e 2d       	mov	r22, r14
     a58:	8f 2d       	mov	r24, r15
     a5a:	d4 df       	rcall	.-88     	; 0xa04 <prvInitialiseNewQueue>
     a5c:	ce 01       	movw	r24, r28
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	ff 90       	pop	r15
     a68:	ef 90       	pop	r14
     a6a:	df 90       	pop	r13
     a6c:	08 95       	ret

00000a6e <xQueueGenericSend>:
     a6e:	cf 92       	push	r12
     a70:	df 92       	push	r13
     a72:	ef 92       	push	r14
     a74:	ff 92       	push	r15
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	29 97       	sbiw	r28, 0x09	; 9
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	cd bf       	out	0x3d, r28	; 61
     a8e:	7c 01       	movw	r14, r24
     a90:	6b 01       	movw	r12, r22
     a92:	2e 83       	std	Y+6, r18	; 0x06
     a94:	3f 83       	std	Y+7, r19	; 0x07
     a96:	48 87       	std	Y+8, r20	; 0x08
     a98:	59 87       	std	Y+9, r21	; 0x09
     a9a:	10 e0       	ldi	r17, 0x00	; 0
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	0f 92       	push	r0
     aa2:	f7 01       	movw	r30, r14
     aa4:	96 8d       	ldd	r25, Z+30	; 0x1e
     aa6:	87 8d       	ldd	r24, Z+31	; 0x1f
     aa8:	98 17       	cp	r25, r24
     aaa:	10 f0       	brcs	.+4      	; 0xab0 <xQueueGenericSend+0x42>
     aac:	02 30       	cpi	r16, 0x02	; 2
     aae:	b1 f4       	brne	.+44     	; 0xadc <xQueueGenericSend+0x6e>
     ab0:	40 2f       	mov	r20, r16
     ab2:	b6 01       	movw	r22, r12
     ab4:	c7 01       	movw	r24, r14
     ab6:	b6 de       	rcall	.-660    	; 0x824 <prvCopyDataToQueue>
     ab8:	f7 01       	movw	r30, r14
     aba:	93 89       	ldd	r25, Z+19	; 0x13
     abc:	99 23       	and	r25, r25
     abe:	41 f0       	breq	.+16     	; 0xad0 <xQueueGenericSend+0x62>
     ac0:	c7 01       	movw	r24, r14
     ac2:	43 96       	adiw	r24, 0x13	; 19
     ac4:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskRemoveFromEventList>
     ac8:	88 23       	and	r24, r24
     aca:	21 f0       	breq	.+8      	; 0xad4 <xQueueGenericSend+0x66>
     acc:	c8 dd       	rcall	.-1136   	; 0x65e <vPortYield>
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <xQueueGenericSend+0x66>
     ad0:	81 11       	cpse	r24, r1
     ad2:	c5 dd       	rcall	.-1142   	; 0x65e <vPortYield>
     ad4:	0f 90       	pop	r0
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	4a c0       	rjmp	.+148    	; 0xb70 <xQueueGenericSend+0x102>
     adc:	8e 81       	ldd	r24, Y+6	; 0x06
     ade:	9f 81       	ldd	r25, Y+7	; 0x07
     ae0:	a8 85       	ldd	r26, Y+8	; 0x08
     ae2:	b9 85       	ldd	r27, Y+9	; 0x09
     ae4:	89 2b       	or	r24, r25
     ae6:	8a 2b       	or	r24, r26
     ae8:	8b 2b       	or	r24, r27
     aea:	21 f4       	brne	.+8      	; 0xaf4 <xQueueGenericSend+0x86>
     aec:	0f 90       	pop	r0
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	3e c0       	rjmp	.+124    	; 0xb70 <xQueueGenericSend+0x102>
     af4:	11 11       	cpse	r17, r1
     af6:	05 c0       	rjmp	.+10     	; 0xb02 <xQueueGenericSend+0x94>
     af8:	ce 01       	movw	r24, r28
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	0e 94 8f 10 	call	0x211e	; 0x211e <vTaskInternalSetTimeOutState>
     b00:	11 e0       	ldi	r17, 0x01	; 1
     b02:	0f 90       	pop	r0
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	ec d6       	rcall	.+3544   	; 0x18e0 <vTaskSuspendAll>
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	0f 92       	push	r0
     b0e:	f7 01       	movw	r30, r14
     b10:	81 a1       	ldd	r24, Z+33	; 0x21
     b12:	8f 3f       	cpi	r24, 0xFF	; 255
     b14:	09 f4       	brne	.+2      	; 0xb18 <xQueueGenericSend+0xaa>
     b16:	11 a2       	std	Z+33, r1	; 0x21
     b18:	f7 01       	movw	r30, r14
     b1a:	82 a1       	ldd	r24, Z+34	; 0x22
     b1c:	8f 3f       	cpi	r24, 0xFF	; 255
     b1e:	09 f4       	brne	.+2      	; 0xb22 <xQueueGenericSend+0xb4>
     b20:	12 a2       	std	Z+34, r1	; 0x22
     b22:	0f 90       	pop	r0
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	be 01       	movw	r22, r28
     b28:	6a 5f       	subi	r22, 0xFA	; 250
     b2a:	7f 4f       	sbci	r23, 0xFF	; 255
     b2c:	ce 01       	movw	r24, r28
     b2e:	01 96       	adiw	r24, 0x01	; 1
     b30:	0e 94 a0 10 	call	0x2140	; 0x2140 <xTaskCheckForTimeOut>
     b34:	81 11       	cpse	r24, r1
     b36:	18 c0       	rjmp	.+48     	; 0xb68 <xQueueGenericSend+0xfa>
     b38:	c7 01       	movw	r24, r14
     b3a:	66 de       	rcall	.-820    	; 0x808 <prvIsQueueFull>
     b3c:	88 23       	and	r24, r24
     b3e:	81 f0       	breq	.+32     	; 0xb60 <xQueueGenericSend+0xf2>
     b40:	4e 81       	ldd	r20, Y+6	; 0x06
     b42:	5f 81       	ldd	r21, Y+7	; 0x07
     b44:	68 85       	ldd	r22, Y+8	; 0x08
     b46:	79 85       	ldd	r23, Y+9	; 0x09
     b48:	c7 01       	movw	r24, r14
     b4a:	08 96       	adiw	r24, 0x08	; 8
     b4c:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <vTaskPlaceOnEventList>
     b50:	c7 01       	movw	r24, r14
     b52:	e1 de       	rcall	.-574    	; 0x916 <prvUnlockQueue>
     b54:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <xTaskResumeAll>
     b58:	81 11       	cpse	r24, r1
     b5a:	a0 cf       	rjmp	.-192    	; 0xa9c <xQueueGenericSend+0x2e>
     b5c:	80 dd       	rcall	.-1280   	; 0x65e <vPortYield>
     b5e:	9e cf       	rjmp	.-196    	; 0xa9c <xQueueGenericSend+0x2e>
     b60:	c7 01       	movw	r24, r14
     b62:	d9 de       	rcall	.-590    	; 0x916 <prvUnlockQueue>
     b64:	fd d7       	rcall	.+4090   	; 0x1b60 <xTaskResumeAll>
     b66:	9a cf       	rjmp	.-204    	; 0xa9c <xQueueGenericSend+0x2e>
     b68:	c7 01       	movw	r24, r14
     b6a:	d5 de       	rcall	.-598    	; 0x916 <prvUnlockQueue>
     b6c:	f9 d7       	rcall	.+4082   	; 0x1b60 <xTaskResumeAll>
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	29 96       	adiw	r28, 0x09	; 9
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	f8 94       	cli
     b76:	de bf       	out	0x3e, r29	; 62
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	cd bf       	out	0x3d, r28	; 61
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	ff 90       	pop	r15
     b86:	ef 90       	pop	r14
     b88:	df 90       	pop	r13
     b8a:	cf 90       	pop	r12
     b8c:	08 95       	ret

00000b8e <xQueueGenericSendFromISR>:
     b8e:	ef 92       	push	r14
     b90:	ff 92       	push	r15
     b92:	0f 93       	push	r16
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	8a 01       	movw	r16, r20
     b9c:	fc 01       	movw	r30, r24
     b9e:	56 8d       	ldd	r21, Z+30	; 0x1e
     ba0:	37 8d       	ldd	r19, Z+31	; 0x1f
     ba2:	53 17       	cp	r21, r19
     ba4:	10 f0       	brcs	.+4      	; 0xbaa <xQueueGenericSendFromISR+0x1c>
     ba6:	22 30       	cpi	r18, 0x02	; 2
     ba8:	f9 f4       	brne	.+62     	; 0xbe8 <xQueueGenericSendFromISR+0x5a>
     baa:	42 2f       	mov	r20, r18
     bac:	78 01       	movw	r14, r16
     bae:	ec 01       	movw	r28, r24
     bb0:	1a a1       	ldd	r17, Y+34	; 0x22
     bb2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bb4:	ce 01       	movw	r24, r28
     bb6:	36 de       	rcall	.-916    	; 0x824 <prvCopyDataToQueue>
     bb8:	1f 3f       	cpi	r17, 0xFF	; 255
     bba:	81 f4       	brne	.+32     	; 0xbdc <xQueueGenericSendFromISR+0x4e>
     bbc:	8b 89       	ldd	r24, Y+19	; 0x13
     bbe:	88 23       	and	r24, r24
     bc0:	a9 f0       	breq	.+42     	; 0xbec <xQueueGenericSendFromISR+0x5e>
     bc2:	ce 01       	movw	r24, r28
     bc4:	43 96       	adiw	r24, 0x13	; 19
     bc6:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskRemoveFromEventList>
     bca:	88 23       	and	r24, r24
     bcc:	89 f0       	breq	.+34     	; 0xbf0 <xQueueGenericSendFromISR+0x62>
     bce:	e1 14       	cp	r14, r1
     bd0:	f1 04       	cpc	r15, r1
     bd2:	81 f0       	breq	.+32     	; 0xbf4 <xQueueGenericSendFromISR+0x66>
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	f7 01       	movw	r30, r14
     bd8:	80 83       	st	Z, r24
     bda:	0d c0       	rjmp	.+26     	; 0xbf6 <xQueueGenericSendFromISR+0x68>
     bdc:	ff 24       	eor	r15, r15
     bde:	f3 94       	inc	r15
     be0:	f1 0e       	add	r15, r17
     be2:	fa a2       	std	Y+34, r15	; 0x22
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	07 c0       	rjmp	.+14     	; 0xbf6 <xQueueGenericSendFromISR+0x68>
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	05 c0       	rjmp	.+10     	; 0xbf6 <xQueueGenericSendFromISR+0x68>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	03 c0       	rjmp	.+6      	; 0xbf6 <xQueueGenericSendFromISR+0x68>
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	01 c0       	rjmp	.+2      	; 0xbf6 <xQueueGenericSendFromISR+0x68>
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	ff 90       	pop	r15
     c00:	ef 90       	pop	r14
     c02:	08 95       	ret

00000c04 <xQueueReceive>:
     c04:	cf 92       	push	r12
     c06:	df 92       	push	r13
     c08:	ef 92       	push	r14
     c0a:	ff 92       	push	r15
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
     c18:	29 97       	sbiw	r28, 0x09	; 9
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	de bf       	out	0x3e, r29	; 62
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	cd bf       	out	0x3d, r28	; 61
     c24:	8c 01       	movw	r16, r24
     c26:	6b 01       	movw	r12, r22
     c28:	2e 83       	std	Y+6, r18	; 0x06
     c2a:	3f 83       	std	Y+7, r19	; 0x07
     c2c:	48 87       	std	Y+8, r20	; 0x08
     c2e:	59 87       	std	Y+9, r21	; 0x09
     c30:	e1 2c       	mov	r14, r1
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	0f 92       	push	r0
     c38:	f8 01       	movw	r30, r16
     c3a:	f6 8c       	ldd	r15, Z+30	; 0x1e
     c3c:	ff 20       	and	r15, r15
     c3e:	99 f0       	breq	.+38     	; 0xc66 <xQueueReceive+0x62>
     c40:	b6 01       	movw	r22, r12
     c42:	c8 01       	movw	r24, r16
     c44:	4e de       	rcall	.-868    	; 0x8e2 <prvCopyDataFromQueue>
     c46:	fa 94       	dec	r15
     c48:	f8 01       	movw	r30, r16
     c4a:	f6 8e       	std	Z+30, r15	; 0x1e
     c4c:	80 85       	ldd	r24, Z+8	; 0x08
     c4e:	88 23       	and	r24, r24
     c50:	31 f0       	breq	.+12     	; 0xc5e <xQueueReceive+0x5a>
     c52:	c8 01       	movw	r24, r16
     c54:	08 96       	adiw	r24, 0x08	; 8
     c56:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskRemoveFromEventList>
     c5a:	81 11       	cpse	r24, r1
     c5c:	00 dd       	rcall	.-1536   	; 0x65e <vPortYield>
     c5e:	0f 90       	pop	r0
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	4f c0       	rjmp	.+158    	; 0xd04 <xQueueReceive+0x100>
     c66:	8e 81       	ldd	r24, Y+6	; 0x06
     c68:	9f 81       	ldd	r25, Y+7	; 0x07
     c6a:	a8 85       	ldd	r26, Y+8	; 0x08
     c6c:	b9 85       	ldd	r27, Y+9	; 0x09
     c6e:	89 2b       	or	r24, r25
     c70:	8a 2b       	or	r24, r26
     c72:	8b 2b       	or	r24, r27
     c74:	21 f4       	brne	.+8      	; 0xc7e <xQueueReceive+0x7a>
     c76:	0f 90       	pop	r0
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	43 c0       	rjmp	.+134    	; 0xd04 <xQueueReceive+0x100>
     c7e:	e1 10       	cpse	r14, r1
     c80:	06 c0       	rjmp	.+12     	; 0xc8e <xQueueReceive+0x8a>
     c82:	ce 01       	movw	r24, r28
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	0e 94 8f 10 	call	0x211e	; 0x211e <vTaskInternalSetTimeOutState>
     c8a:	ee 24       	eor	r14, r14
     c8c:	e3 94       	inc	r14
     c8e:	0f 90       	pop	r0
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	26 d6       	rcall	.+3148   	; 0x18e0 <vTaskSuspendAll>
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	0f 92       	push	r0
     c9a:	f8 01       	movw	r30, r16
     c9c:	81 a1       	ldd	r24, Z+33	; 0x21
     c9e:	8f 3f       	cpi	r24, 0xFF	; 255
     ca0:	09 f4       	brne	.+2      	; 0xca4 <xQueueReceive+0xa0>
     ca2:	11 a2       	std	Z+33, r1	; 0x21
     ca4:	f8 01       	movw	r30, r16
     ca6:	82 a1       	ldd	r24, Z+34	; 0x22
     ca8:	8f 3f       	cpi	r24, 0xFF	; 255
     caa:	09 f4       	brne	.+2      	; 0xcae <xQueueReceive+0xaa>
     cac:	12 a2       	std	Z+34, r1	; 0x22
     cae:	0f 90       	pop	r0
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	be 01       	movw	r22, r28
     cb4:	6a 5f       	subi	r22, 0xFA	; 250
     cb6:	7f 4f       	sbci	r23, 0xFF	; 255
     cb8:	ce 01       	movw	r24, r28
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	0e 94 a0 10 	call	0x2140	; 0x2140 <xTaskCheckForTimeOut>
     cc0:	81 11       	cpse	r24, r1
     cc2:	17 c0       	rjmp	.+46     	; 0xcf2 <xQueueReceive+0xee>
     cc4:	c8 01       	movw	r24, r16
     cc6:	93 dd       	rcall	.-1242   	; 0x7ee <prvIsQueueEmpty>
     cc8:	88 23       	and	r24, r24
     cca:	79 f0       	breq	.+30     	; 0xcea <xQueueReceive+0xe6>
     ccc:	4e 81       	ldd	r20, Y+6	; 0x06
     cce:	5f 81       	ldd	r21, Y+7	; 0x07
     cd0:	68 85       	ldd	r22, Y+8	; 0x08
     cd2:	79 85       	ldd	r23, Y+9	; 0x09
     cd4:	c8 01       	movw	r24, r16
     cd6:	43 96       	adiw	r24, 0x13	; 19
     cd8:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <vTaskPlaceOnEventList>
     cdc:	c8 01       	movw	r24, r16
     cde:	1b de       	rcall	.-970    	; 0x916 <prvUnlockQueue>
     ce0:	3f d7       	rcall	.+3710   	; 0x1b60 <xTaskResumeAll>
     ce2:	81 11       	cpse	r24, r1
     ce4:	a6 cf       	rjmp	.-180    	; 0xc32 <xQueueReceive+0x2e>
     ce6:	bb dc       	rcall	.-1674   	; 0x65e <vPortYield>
     ce8:	a4 cf       	rjmp	.-184    	; 0xc32 <xQueueReceive+0x2e>
     cea:	c8 01       	movw	r24, r16
     cec:	14 de       	rcall	.-984    	; 0x916 <prvUnlockQueue>
     cee:	38 d7       	rcall	.+3696   	; 0x1b60 <xTaskResumeAll>
     cf0:	a0 cf       	rjmp	.-192    	; 0xc32 <xQueueReceive+0x2e>
     cf2:	c8 01       	movw	r24, r16
     cf4:	10 de       	rcall	.-992    	; 0x916 <prvUnlockQueue>
     cf6:	34 d7       	rcall	.+3688   	; 0x1b60 <xTaskResumeAll>
     cf8:	c8 01       	movw	r24, r16
     cfa:	79 dd       	rcall	.-1294   	; 0x7ee <prvIsQueueEmpty>
     cfc:	88 23       	and	r24, r24
     cfe:	09 f4       	brne	.+2      	; 0xd02 <xQueueReceive+0xfe>
     d00:	98 cf       	rjmp	.-208    	; 0xc32 <xQueueReceive+0x2e>
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	29 96       	adiw	r28, 0x09	; 9
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	de bf       	out	0x3e, r29	; 62
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	cd bf       	out	0x3d, r28	; 61
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	1f 91       	pop	r17
     d16:	0f 91       	pop	r16
     d18:	ff 90       	pop	r15
     d1a:	ef 90       	pop	r14
     d1c:	df 90       	pop	r13
     d1e:	cf 90       	pop	r12
     d20:	08 95       	ret

00000d22 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	0f 92       	push	r0
     d2e:	89 a1       	ldd	r24, Y+33	; 0x21
     d30:	8f 3f       	cpi	r24, 0xFF	; 255
     d32:	09 f4       	brne	.+2      	; 0xd36 <vQueueWaitForMessageRestricted+0x14>
     d34:	19 a2       	std	Y+33, r1	; 0x21
     d36:	8a a1       	ldd	r24, Y+34	; 0x22
     d38:	8f 3f       	cpi	r24, 0xFF	; 255
     d3a:	09 f4       	brne	.+2      	; 0xd3e <vQueueWaitForMessageRestricted+0x1c>
     d3c:	1a a2       	std	Y+34, r1	; 0x22
     d3e:	0f 90       	pop	r0
     d40:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     d42:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d44:	81 11       	cpse	r24, r1
     d46:	04 c0       	rjmp	.+8      	; 0xd50 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     d48:	ce 01       	movw	r24, r28
     d4a:	43 96       	adiw	r24, 0x13	; 19
     d4c:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     d50:	ce 01       	movw	r24, r28
     d52:	e1 dd       	rcall	.-1086   	; 0x916 <prvUnlockQueue>
    }
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	08 95       	ret

00000d5a <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     d5a:	fc 01       	movw	r30, r24
     d5c:	44 81       	ldd	r20, Z+4	; 0x04
     d5e:	55 81       	ldd	r21, Z+5	; 0x05
     d60:	22 81       	ldd	r18, Z+2	; 0x02
     d62:	33 81       	ldd	r19, Z+3	; 0x03
     d64:	24 0f       	add	r18, r20
     d66:	35 1f       	adc	r19, r21
     d68:	80 81       	ld	r24, Z
     d6a:	91 81       	ldd	r25, Z+1	; 0x01
     d6c:	b9 01       	movw	r22, r18
     d6e:	68 1b       	sub	r22, r24
     d70:	79 0b       	sbc	r23, r25
     d72:	cb 01       	movw	r24, r22
     d74:	64 17       	cp	r22, r20
     d76:	75 07       	cpc	r23, r21
     d78:	10 f0       	brcs	.+4      	; 0xd7e <prvBytesInBuffer+0x24>
     d7a:	84 1b       	sub	r24, r20
     d7c:	95 0b       	sbc	r25, r21
     d7e:	08 95       	ret

00000d80 <prvInitialiseNewStreamBuffer>:
     d80:	0f 93       	push	r16
     d82:	fc 01       	movw	r30, r24
     d84:	8f e0       	ldi	r24, 0x0F	; 15
     d86:	df 01       	movw	r26, r30
     d88:	1d 92       	st	X+, r1
     d8a:	8a 95       	dec	r24
     d8c:	e9 f7       	brne	.-6      	; 0xd88 <prvInitialiseNewStreamBuffer+0x8>
     d8e:	75 87       	std	Z+13, r23	; 0x0d
     d90:	64 87       	std	Z+12, r22	; 0x0c
     d92:	55 83       	std	Z+5, r21	; 0x05
     d94:	44 83       	std	Z+4, r20	; 0x04
     d96:	37 83       	std	Z+7, r19	; 0x07
     d98:	26 83       	std	Z+6, r18	; 0x06
     d9a:	06 87       	std	Z+14, r16	; 0x0e
     d9c:	0f 91       	pop	r16
     d9e:	08 95       	ret

00000da0 <prvWriteBytesToBuffer>:
     da0:	af 92       	push	r10
     da2:	bf 92       	push	r11
     da4:	cf 92       	push	r12
     da6:	df 92       	push	r13
     da8:	ef 92       	push	r14
     daa:	ff 92       	push	r15
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	6c 01       	movw	r12, r24
     db6:	5b 01       	movw	r10, r22
     db8:	7a 01       	movw	r14, r20
     dba:	fc 01       	movw	r30, r24
     dbc:	c2 81       	ldd	r28, Z+2	; 0x02
     dbe:	d3 81       	ldd	r29, Z+3	; 0x03
     dc0:	04 81       	ldd	r16, Z+4	; 0x04
     dc2:	15 81       	ldd	r17, Z+5	; 0x05
     dc4:	0c 1b       	sub	r16, r28
     dc6:	1d 0b       	sbc	r17, r29
     dc8:	40 17       	cp	r20, r16
     dca:	51 07       	cpc	r21, r17
     dcc:	08 f4       	brcc	.+2      	; 0xdd0 <prvWriteBytesToBuffer+0x30>
     dce:	8a 01       	movw	r16, r20
     dd0:	f6 01       	movw	r30, r12
     dd2:	84 85       	ldd	r24, Z+12	; 0x0c
     dd4:	95 85       	ldd	r25, Z+13	; 0x0d
     dd6:	a8 01       	movw	r20, r16
     dd8:	b5 01       	movw	r22, r10
     dda:	8c 0f       	add	r24, r28
     ddc:	9d 1f       	adc	r25, r29
     dde:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <memcpy>
     de2:	0e 15       	cp	r16, r14
     de4:	1f 05       	cpc	r17, r15
     de6:	58 f4       	brcc	.+22     	; 0xdfe <prvWriteBytesToBuffer+0x5e>
     de8:	a7 01       	movw	r20, r14
     dea:	40 1b       	sub	r20, r16
     dec:	51 0b       	sbc	r21, r17
     dee:	b5 01       	movw	r22, r10
     df0:	60 0f       	add	r22, r16
     df2:	71 1f       	adc	r23, r17
     df4:	f6 01       	movw	r30, r12
     df6:	84 85       	ldd	r24, Z+12	; 0x0c
     df8:	95 85       	ldd	r25, Z+13	; 0x0d
     dfa:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <memcpy>
     dfe:	ce 01       	movw	r24, r28
     e00:	8e 0d       	add	r24, r14
     e02:	9f 1d       	adc	r25, r15
     e04:	f6 01       	movw	r30, r12
     e06:	24 81       	ldd	r18, Z+4	; 0x04
     e08:	35 81       	ldd	r19, Z+5	; 0x05
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	10 f0       	brcs	.+4      	; 0xe14 <prvWriteBytesToBuffer+0x74>
     e10:	82 1b       	sub	r24, r18
     e12:	93 0b       	sbc	r25, r19
     e14:	f6 01       	movw	r30, r12
     e16:	93 83       	std	Z+3, r25	; 0x03
     e18:	82 83       	std	Z+2, r24	; 0x02
     e1a:	c7 01       	movw	r24, r14
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	1f 91       	pop	r17
     e22:	0f 91       	pop	r16
     e24:	ff 90       	pop	r15
     e26:	ef 90       	pop	r14
     e28:	df 90       	pop	r13
     e2a:	cf 90       	pop	r12
     e2c:	bf 90       	pop	r11
     e2e:	af 90       	pop	r10
     e30:	08 95       	ret

00000e32 <prvWriteMessageToBuffer>:
     e32:	cf 92       	push	r12
     e34:	df 92       	push	r13
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	1f 92       	push	r1
     e44:	1f 92       	push	r1
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	7c 01       	movw	r14, r24
     e4c:	6b 01       	movw	r12, r22
     e4e:	5a 83       	std	Y+2, r21	; 0x02
     e50:	49 83       	std	Y+1, r20	; 0x01
     e52:	21 15       	cp	r18, r1
     e54:	31 05       	cpc	r19, r1
     e56:	c1 f0       	breq	.+48     	; 0xe88 <prvWriteMessageToBuffer+0x56>
     e58:	fc 01       	movw	r30, r24
     e5a:	86 85       	ldd	r24, Z+14	; 0x0e
     e5c:	80 fd       	sbrc	r24, 0
     e5e:	08 c0       	rjmp	.+16     	; 0xe70 <prvWriteMessageToBuffer+0x3e>
     e60:	42 17       	cp	r20, r18
     e62:	53 07       	cpc	r21, r19
     e64:	08 f4       	brcc	.+2      	; 0xe68 <prvWriteMessageToBuffer+0x36>
     e66:	9a 01       	movw	r18, r20
     e68:	3a 83       	std	Y+2, r19	; 0x02
     e6a:	29 83       	std	Y+1, r18	; 0x01
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	0f c0       	rjmp	.+30     	; 0xe8e <prvWriteMessageToBuffer+0x5c>
     e70:	20 17       	cp	r18, r16
     e72:	31 07       	cpc	r19, r17
     e74:	58 f0       	brcs	.+22     	; 0xe8c <prvWriteMessageToBuffer+0x5a>
     e76:	42 e0       	ldi	r20, 0x02	; 2
     e78:	50 e0       	ldi	r21, 0x00	; 0
     e7a:	be 01       	movw	r22, r28
     e7c:	6f 5f       	subi	r22, 0xFF	; 255
     e7e:	7f 4f       	sbci	r23, 0xFF	; 255
     e80:	c7 01       	movw	r24, r14
     e82:	8e df       	rcall	.-228    	; 0xda0 <prvWriteBytesToBuffer>
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	03 c0       	rjmp	.+6      	; 0xe8e <prvWriteMessageToBuffer+0x5c>
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	01 c0       	rjmp	.+2      	; 0xe8e <prvWriteMessageToBuffer+0x5c>
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	88 23       	and	r24, r24
     e90:	31 f0       	breq	.+12     	; 0xe9e <prvWriteMessageToBuffer+0x6c>
     e92:	49 81       	ldd	r20, Y+1	; 0x01
     e94:	5a 81       	ldd	r21, Y+2	; 0x02
     e96:	b6 01       	movw	r22, r12
     e98:	c7 01       	movw	r24, r14
     e9a:	82 df       	rcall	.-252    	; 0xda0 <prvWriteBytesToBuffer>
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <prvWriteMessageToBuffer+0x70>
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	ff 90       	pop	r15
     eb0:	ef 90       	pop	r14
     eb2:	df 90       	pop	r13
     eb4:	cf 90       	pop	r12
     eb6:	08 95       	ret

00000eb8 <prvReadBytesFromBuffer>:
     eb8:	af 92       	push	r10
     eba:	bf 92       	push	r11
     ebc:	cf 92       	push	r12
     ebe:	df 92       	push	r13
     ec0:	ef 92       	push	r14
     ec2:	ff 92       	push	r15
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	7c 01       	movw	r14, r24
     ece:	5b 01       	movw	r10, r22
     ed0:	e9 01       	movw	r28, r18
     ed2:	42 17       	cp	r20, r18
     ed4:	53 07       	cpc	r21, r19
     ed6:	08 f4       	brcc	.+2      	; 0xeda <prvReadBytesFromBuffer+0x22>
     ed8:	ea 01       	movw	r28, r20
     eda:	20 97       	sbiw	r28, 0x00	; 0
     edc:	81 f1       	breq	.+96     	; 0xf3e <prvReadBytesFromBuffer+0x86>
     ede:	f7 01       	movw	r30, r14
     ee0:	00 81       	ld	r16, Z
     ee2:	11 81       	ldd	r17, Z+1	; 0x01
     ee4:	84 81       	ldd	r24, Z+4	; 0x04
     ee6:	95 81       	ldd	r25, Z+5	; 0x05
     ee8:	80 1b       	sub	r24, r16
     eea:	91 0b       	sbc	r25, r17
     eec:	6e 01       	movw	r12, r28
     eee:	8c 17       	cp	r24, r28
     ef0:	9d 07       	cpc	r25, r29
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <prvReadBytesFromBuffer+0x3e>
     ef4:	6c 01       	movw	r12, r24
     ef6:	f7 01       	movw	r30, r14
     ef8:	64 85       	ldd	r22, Z+12	; 0x0c
     efa:	75 85       	ldd	r23, Z+13	; 0x0d
     efc:	60 0f       	add	r22, r16
     efe:	71 1f       	adc	r23, r17
     f00:	a6 01       	movw	r20, r12
     f02:	c5 01       	movw	r24, r10
     f04:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <memcpy>
     f08:	cc 16       	cp	r12, r28
     f0a:	dd 06       	cpc	r13, r29
     f0c:	58 f4       	brcc	.+22     	; 0xf24 <prvReadBytesFromBuffer+0x6c>
     f0e:	ae 01       	movw	r20, r28
     f10:	4c 19       	sub	r20, r12
     f12:	5d 09       	sbc	r21, r13
     f14:	f7 01       	movw	r30, r14
     f16:	64 85       	ldd	r22, Z+12	; 0x0c
     f18:	75 85       	ldd	r23, Z+13	; 0x0d
     f1a:	c5 01       	movw	r24, r10
     f1c:	8c 0d       	add	r24, r12
     f1e:	9d 1d       	adc	r25, r13
     f20:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <memcpy>
     f24:	0c 0f       	add	r16, r28
     f26:	1d 1f       	adc	r17, r29
     f28:	f7 01       	movw	r30, r14
     f2a:	84 81       	ldd	r24, Z+4	; 0x04
     f2c:	95 81       	ldd	r25, Z+5	; 0x05
     f2e:	08 17       	cp	r16, r24
     f30:	19 07       	cpc	r17, r25
     f32:	10 f0       	brcs	.+4      	; 0xf38 <prvReadBytesFromBuffer+0x80>
     f34:	08 1b       	sub	r16, r24
     f36:	19 0b       	sbc	r17, r25
     f38:	f7 01       	movw	r30, r14
     f3a:	11 83       	std	Z+1, r17	; 0x01
     f3c:	00 83       	st	Z, r16
     f3e:	ce 01       	movw	r24, r28
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	ff 90       	pop	r15
     f4a:	ef 90       	pop	r14
     f4c:	df 90       	pop	r13
     f4e:	cf 90       	pop	r12
     f50:	bf 90       	pop	r11
     f52:	af 90       	pop	r10
     f54:	08 95       	ret

00000f56 <prvReadMessageFromBuffer>:
     f56:	6f 92       	push	r6
     f58:	7f 92       	push	r7
     f5a:	8f 92       	push	r8
     f5c:	9f 92       	push	r9
     f5e:	af 92       	push	r10
     f60:	bf 92       	push	r11
     f62:	cf 92       	push	r12
     f64:	df 92       	push	r13
     f66:	ef 92       	push	r14
     f68:	ff 92       	push	r15
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	1f 92       	push	r1
     f74:	1f 92       	push	r1
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	6c 01       	movw	r12, r24
     f7c:	4b 01       	movw	r8, r22
     f7e:	5a 01       	movw	r10, r20
     f80:	79 01       	movw	r14, r18
     f82:	01 15       	cp	r16, r1
     f84:	11 05       	cpc	r17, r1
     f86:	b1 f0       	breq	.+44     	; 0xfb4 <prvReadMessageFromBuffer+0x5e>
     f88:	fc 01       	movw	r30, r24
     f8a:	60 80       	ld	r6, Z
     f8c:	71 80       	ldd	r7, Z+1	; 0x01
     f8e:	a8 01       	movw	r20, r16
     f90:	be 01       	movw	r22, r28
     f92:	6f 5f       	subi	r22, 0xFF	; 255
     f94:	7f 4f       	sbci	r23, 0xFF	; 255
     f96:	90 df       	rcall	.-224    	; 0xeb8 <prvReadBytesFromBuffer>
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	9a 81       	ldd	r25, Y+2	; 0x02
     f9c:	e0 1a       	sub	r14, r16
     f9e:	f1 0a       	sbc	r15, r17
     fa0:	a8 16       	cp	r10, r24
     fa2:	b9 06       	cpc	r11, r25
     fa4:	30 f4       	brcc	.+12     	; 0xfb2 <prvReadMessageFromBuffer+0x5c>
     fa6:	f6 01       	movw	r30, r12
     fa8:	71 82       	std	Z+1, r7	; 0x01
     faa:	60 82       	st	Z, r6
     fac:	a1 2c       	mov	r10, r1
     fae:	b1 2c       	mov	r11, r1
     fb0:	01 c0       	rjmp	.+2      	; 0xfb4 <prvReadMessageFromBuffer+0x5e>
     fb2:	5c 01       	movw	r10, r24
     fb4:	97 01       	movw	r18, r14
     fb6:	a5 01       	movw	r20, r10
     fb8:	b4 01       	movw	r22, r8
     fba:	c6 01       	movw	r24, r12
     fbc:	7d df       	rcall	.-262    	; 0xeb8 <prvReadBytesFromBuffer>
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	df 90       	pop	r13
     fd0:	cf 90       	pop	r12
     fd2:	bf 90       	pop	r11
     fd4:	af 90       	pop	r10
     fd6:	9f 90       	pop	r9
     fd8:	8f 90       	pop	r8
     fda:	7f 90       	pop	r7
     fdc:	6f 90       	pop	r6
     fde:	08 95       	ret

00000fe0 <xStreamBufferGenericCreate>:
     fe0:	cf 92       	push	r12
     fe2:	df 92       	push	r13
     fe4:	ef 92       	push	r14
     fe6:	ff 92       	push	r15
     fe8:	0f 93       	push	r16
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	ec 01       	movw	r28, r24
     ff0:	6b 01       	movw	r12, r22
     ff2:	41 30       	cpi	r20, 0x01	; 1
     ff4:	11 f4       	brne	.+4      	; 0xffa <xStreamBufferGenericCreate+0x1a>
     ff6:	01 e0       	ldi	r16, 0x01	; 1
     ff8:	01 c0       	rjmp	.+2      	; 0xffc <xStreamBufferGenericCreate+0x1c>
     ffa:	00 e0       	ldi	r16, 0x00	; 0
     ffc:	c1 14       	cp	r12, r1
     ffe:	d1 04       	cpc	r13, r1
    1000:	19 f4       	brne	.+6      	; 0x1008 <__EEPROM_REGION_LENGTH__+0x8>
    1002:	cc 24       	eor	r12, r12
    1004:	c3 94       	inc	r12
    1006:	d1 2c       	mov	r13, r1
    1008:	ce 01       	movw	r24, r28
    100a:	40 96       	adiw	r24, 0x10	; 16
    100c:	c8 17       	cp	r28, r24
    100e:	d9 07       	cpc	r29, r25
    1010:	20 f4       	brcc	.+8      	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
    1012:	21 96       	adiw	r28, 0x01	; 1
    1014:	70 d9       	rcall	.-3360   	; 0x2f6 <pvPortMalloc>
    1016:	7c 01       	movw	r14, r24
    1018:	02 c0       	rjmp	.+4      	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
    101a:	e1 2c       	mov	r14, r1
    101c:	f1 2c       	mov	r15, r1
    101e:	e1 14       	cp	r14, r1
    1020:	f1 04       	cpc	r15, r1
    1022:	39 f0       	breq	.+14     	; 0x1032 <__EEPROM_REGION_LENGTH__+0x32>
    1024:	96 01       	movw	r18, r12
    1026:	ae 01       	movw	r20, r28
    1028:	b7 01       	movw	r22, r14
    102a:	61 5f       	subi	r22, 0xF1	; 241
    102c:	7f 4f       	sbci	r23, 0xFF	; 255
    102e:	c7 01       	movw	r24, r14
    1030:	a7 de       	rcall	.-690    	; 0xd80 <prvInitialiseNewStreamBuffer>
    1032:	c7 01       	movw	r24, r14
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	0f 91       	pop	r16
    103a:	ff 90       	pop	r15
    103c:	ef 90       	pop	r14
    103e:	df 90       	pop	r13
    1040:	cf 90       	pop	r12
    1042:	08 95       	ret

00001044 <xStreamBufferReset>:
    1044:	0f 93       	push	r16
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	0f 92       	push	r0
    104c:	fc 01       	movw	r30, r24
    104e:	20 85       	ldd	r18, Z+8	; 0x08
    1050:	31 85       	ldd	r19, Z+9	; 0x09
    1052:	23 2b       	or	r18, r19
    1054:	71 f4       	brne	.+28     	; 0x1072 <xStreamBufferReset+0x2e>
    1056:	22 85       	ldd	r18, Z+10	; 0x0a
    1058:	33 85       	ldd	r19, Z+11	; 0x0b
    105a:	23 2b       	or	r18, r19
    105c:	61 f4       	brne	.+24     	; 0x1076 <xStreamBufferReset+0x32>
    105e:	26 81       	ldd	r18, Z+6	; 0x06
    1060:	37 81       	ldd	r19, Z+7	; 0x07
    1062:	44 81       	ldd	r20, Z+4	; 0x04
    1064:	55 81       	ldd	r21, Z+5	; 0x05
    1066:	64 85       	ldd	r22, Z+12	; 0x0c
    1068:	75 85       	ldd	r23, Z+13	; 0x0d
    106a:	06 85       	ldd	r16, Z+14	; 0x0e
    106c:	89 de       	rcall	.-750    	; 0xd80 <prvInitialiseNewStreamBuffer>
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	03 c0       	rjmp	.+6      	; 0x1078 <xStreamBufferReset+0x34>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	01 c0       	rjmp	.+2      	; 0x1078 <xStreamBufferReset+0x34>
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	0f 90       	pop	r0
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	0f 91       	pop	r16
    107e:	08 95       	ret

00001080 <xStreamBufferSpacesAvailable>:
    1080:	fc 01       	movw	r30, r24
    1082:	24 81       	ldd	r18, Z+4	; 0x04
    1084:	35 81       	ldd	r19, Z+5	; 0x05
    1086:	80 81       	ld	r24, Z
    1088:	91 81       	ldd	r25, Z+1	; 0x01
    108a:	82 0f       	add	r24, r18
    108c:	93 1f       	adc	r25, r19
    108e:	42 81       	ldd	r20, Z+2	; 0x02
    1090:	53 81       	ldd	r21, Z+3	; 0x03
    1092:	84 1b       	sub	r24, r20
    1094:	95 0b       	sbc	r25, r21
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	82 17       	cp	r24, r18
    109a:	93 07       	cpc	r25, r19
    109c:	10 f0       	brcs	.+4      	; 0x10a2 <xStreamBufferSpacesAvailable+0x22>
    109e:	82 1b       	sub	r24, r18
    10a0:	93 0b       	sbc	r25, r19
    10a2:	08 95       	ret

000010a4 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    10a4:	2f 92       	push	r2
    10a6:	3f 92       	push	r3
    10a8:	4f 92       	push	r4
    10aa:	5f 92       	push	r5
    10ac:	6f 92       	push	r6
    10ae:	7f 92       	push	r7
    10b0:	8f 92       	push	r8
    10b2:	9f 92       	push	r9
    10b4:	af 92       	push	r10
    10b6:	bf 92       	push	r11
    10b8:	cf 92       	push	r12
    10ba:	df 92       	push	r13
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	2b 97       	sbiw	r28, 0x0b	; 11
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	4c 01       	movw	r8, r24
    10da:	7b 87       	std	Y+11, r23	; 0x0b
    10dc:	6a 87       	std	Y+10, r22	; 0x0a
    10de:	1a 01       	movw	r2, r20
    10e0:	0e 83       	std	Y+6, r16	; 0x06
    10e2:	1f 83       	std	Y+7, r17	; 0x07
    10e4:	28 87       	std	Y+8, r18	; 0x08
    10e6:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    10e8:	fc 01       	movw	r30, r24
    10ea:	84 81       	ldd	r24, Z+4	; 0x04
    10ec:	95 81       	ldd	r25, Z+5	; 0x05
    10ee:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    10f0:	26 85       	ldd	r18, Z+14	; 0x0e
    10f2:	20 ff       	sbrs	r18, 0
    10f4:	0c c0       	rjmp	.+24     	; 0x110e <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    10f6:	2a 01       	movw	r4, r20
    10f8:	f2 e0       	ldi	r31, 0x02	; 2
    10fa:	4f 0e       	add	r4, r31
    10fc:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    10fe:	84 15       	cp	r24, r4
    1100:	95 05       	cpc	r25, r5
    1102:	58 f4       	brcc	.+22     	; 0x111a <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1104:	1e 82       	std	Y+6, r1	; 0x06
    1106:	1f 82       	std	Y+7, r1	; 0x07
    1108:	18 86       	std	Y+8, r1	; 0x08
    110a:	19 86       	std	Y+9, r1	; 0x09
    110c:	06 c0       	rjmp	.+12     	; 0x111a <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    110e:	84 17       	cp	r24, r20
    1110:	95 07       	cpc	r25, r21
    1112:	10 f0       	brcs	.+4      	; 0x1118 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1114:	2a 01       	movw	r4, r20
    1116:	01 c0       	rjmp	.+2      	; 0x111a <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1118:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    111a:	8e 81       	ldd	r24, Y+6	; 0x06
    111c:	9f 81       	ldd	r25, Y+7	; 0x07
    111e:	a8 85       	ldd	r26, Y+8	; 0x08
    1120:	b9 85       	ldd	r27, Y+9	; 0x09
    1122:	89 2b       	or	r24, r25
    1124:	8a 2b       	or	r24, r26
    1126:	8b 2b       	or	r24, r27
    1128:	09 f4       	brne	.+2      	; 0x112c <xStreamBufferSend+0x88>
    112a:	36 c0       	rjmp	.+108    	; 0x1198 <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    112c:	ce 01       	movw	r24, r28
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	e0 d7       	rcall	.+4032   	; 0x20f2 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1138:	c4 01       	movw	r24, r8
    113a:	a2 df       	rcall	.-188    	; 0x1080 <xStreamBufferSpacesAvailable>
    113c:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    113e:	84 15       	cp	r24, r4
    1140:	95 05       	cpc	r25, r5
    1142:	38 f5       	brcc	.+78     	; 0x1192 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 38 14 	call	0x2870	; 0x2870 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    114e:	0e 94 0a 11 	call	0x2214	; 0x2214 <xTaskGetCurrentTaskHandle>
    1152:	f4 01       	movw	r30, r8
    1154:	93 87       	std	Z+11, r25	; 0x0b
    1156:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1158:	0f 90       	pop	r0
    115a:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    115c:	ae 80       	ldd	r10, Y+6	; 0x06
    115e:	bf 80       	ldd	r11, Y+7	; 0x07
    1160:	c8 84       	ldd	r12, Y+8	; 0x08
    1162:	d9 84       	ldd	r13, Y+9	; 0x09
    1164:	e1 2c       	mov	r14, r1
    1166:	f1 2c       	mov	r15, r1
    1168:	00 e0       	ldi	r16, 0x00	; 0
    116a:	10 e0       	ldi	r17, 0x00	; 0
    116c:	98 01       	movw	r18, r16
    116e:	40 e0       	ldi	r20, 0x00	; 0
    1170:	50 e0       	ldi	r21, 0x00	; 0
    1172:	ba 01       	movw	r22, r20
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	0e 94 78 11 	call	0x22f0	; 0x22f0 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    117a:	f4 01       	movw	r30, r8
    117c:	13 86       	std	Z+11, r1	; 0x0b
    117e:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1180:	be 01       	movw	r22, r28
    1182:	6a 5f       	subi	r22, 0xFA	; 250
    1184:	7f 4f       	sbci	r23, 0xFF	; 255
    1186:	ce 01       	movw	r24, r28
    1188:	01 96       	adiw	r24, 0x01	; 1
    118a:	da d7       	rcall	.+4020   	; 0x2140 <xTaskCheckForTimeOut>
    118c:	88 23       	and	r24, r24
    118e:	89 f2       	breq	.-94     	; 0x1132 <xStreamBufferSend+0x8e>
    1190:	05 c0       	rjmp	.+10     	; 0x119c <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1192:	0f 90       	pop	r0
    1194:	0f be       	out	0x3f, r0	; 63
                    break;
    1196:	02 c0       	rjmp	.+4      	; 0x119c <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1198:	61 2c       	mov	r6, r1
    119a:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    119c:	61 14       	cp	r6, r1
    119e:	71 04       	cpc	r7, r1
    11a0:	19 f4       	brne	.+6      	; 0x11a8 <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    11a2:	c4 01       	movw	r24, r8
    11a4:	6d df       	rcall	.-294    	; 0x1080 <xStreamBufferSpacesAvailable>
    11a6:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    11a8:	82 01       	movw	r16, r4
    11aa:	93 01       	movw	r18, r6
    11ac:	a1 01       	movw	r20, r2
    11ae:	6a 85       	ldd	r22, Y+10	; 0x0a
    11b0:	7b 85       	ldd	r23, Y+11	; 0x0b
    11b2:	c4 01       	movw	r24, r8
    11b4:	3e de       	rcall	.-900    	; 0xe32 <prvWriteMessageToBuffer>
    11b6:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    11b8:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    11ba:	e9 f0       	breq	.+58     	; 0x11f6 <xStreamBufferSend+0x152>
    11bc:	c4 01       	movw	r24, r8
    11be:	cd dd       	rcall	.-1126   	; 0xd5a <prvBytesInBuffer>
    11c0:	f4 01       	movw	r30, r8
    11c2:	26 81       	ldd	r18, Z+6	; 0x06
    11c4:	37 81       	ldd	r19, Z+7	; 0x07
    11c6:	82 17       	cp	r24, r18
    11c8:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    11ca:	a8 f0       	brcs	.+42     	; 0x11f6 <xStreamBufferSend+0x152>
    11cc:	89 d3       	rcall	.+1810   	; 0x18e0 <vTaskSuspendAll>
    11ce:	f4 01       	movw	r30, r8
    11d0:	80 85       	ldd	r24, Z+8	; 0x08
    11d2:	91 85       	ldd	r25, Z+9	; 0x09
    11d4:	89 2b       	or	r24, r25
    11d6:	71 f0       	breq	.+28     	; 0x11f4 <xStreamBufferSend+0x150>
    11d8:	80 85       	ldd	r24, Z+8	; 0x08
    11da:	91 85       	ldd	r25, Z+9	; 0x09
    11dc:	e1 2c       	mov	r14, r1
    11de:	f1 2c       	mov	r15, r1
    11e0:	00 e0       	ldi	r16, 0x00	; 0
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	a9 01       	movw	r20, r18
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	0e 94 1f 12 	call	0x243e	; 0x243e <xTaskGenericNotify>
    11ee:	f4 01       	movw	r30, r8
    11f0:	11 86       	std	Z+9, r1	; 0x09
    11f2:	10 86       	std	Z+8, r1	; 0x08
    11f4:	b5 d4       	rcall	.+2410   	; 0x1b60 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    11f6:	c6 01       	movw	r24, r12
    11f8:	2b 96       	adiw	r28, 0x0b	; 11
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	de bf       	out	0x3e, r29	; 62
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	cd bf       	out	0x3d, r28	; 61
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	ff 90       	pop	r15
    120e:	ef 90       	pop	r14
    1210:	df 90       	pop	r13
    1212:	cf 90       	pop	r12
    1214:	bf 90       	pop	r11
    1216:	af 90       	pop	r10
    1218:	9f 90       	pop	r9
    121a:	8f 90       	pop	r8
    121c:	7f 90       	pop	r7
    121e:	6f 90       	pop	r6
    1220:	5f 90       	pop	r5
    1222:	4f 90       	pop	r4
    1224:	3f 90       	pop	r3
    1226:	2f 90       	pop	r2
    1228:	08 95       	ret

0000122a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    122a:	af 92       	push	r10
    122c:	bf 92       	push	r11
    122e:	cf 92       	push	r12
    1230:	df 92       	push	r13
    1232:	ef 92       	push	r14
    1234:	ff 92       	push	r15
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	ec 01       	movw	r28, r24
    1240:	7b 01       	movw	r14, r22
    1242:	5a 01       	movw	r10, r20
    1244:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1246:	8e 85       	ldd	r24, Y+14	; 0x0e
    1248:	80 ff       	sbrs	r24, 0
    124a:	04 c0       	rjmp	.+8      	; 0x1254 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    124c:	8a 01       	movw	r16, r20
    124e:	0e 5f       	subi	r16, 0xFE	; 254
    1250:	1f 4f       	sbci	r17, 0xFF	; 255
    1252:	01 c0       	rjmp	.+2      	; 0x1256 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1254:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1256:	ce 01       	movw	r24, r28
    1258:	13 df       	rcall	.-474    	; 0x1080 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    125a:	9c 01       	movw	r18, r24
    125c:	a5 01       	movw	r20, r10
    125e:	b7 01       	movw	r22, r14
    1260:	ce 01       	movw	r24, r28
    1262:	e7 dd       	rcall	.-1074   	; 0xe32 <prvWriteMessageToBuffer>
    1264:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1266:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1268:	c1 f0       	breq	.+48     	; 0x129a <xStreamBufferSendFromISR+0x70>
    126a:	ce 01       	movw	r24, r28
    126c:	76 dd       	rcall	.-1300   	; 0xd5a <prvBytesInBuffer>
    126e:	2e 81       	ldd	r18, Y+6	; 0x06
    1270:	3f 81       	ldd	r19, Y+7	; 0x07
    1272:	82 17       	cp	r24, r18
    1274:	93 07       	cpc	r25, r19
    1276:	88 f0       	brcs	.+34     	; 0x129a <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1278:	88 85       	ldd	r24, Y+8	; 0x08
    127a:	99 85       	ldd	r25, Y+9	; 0x09
    127c:	89 2b       	or	r24, r25
    127e:	69 f0       	breq	.+26     	; 0x129a <xStreamBufferSendFromISR+0x70>
    1280:	88 85       	ldd	r24, Y+8	; 0x08
    1282:	99 85       	ldd	r25, Y+9	; 0x09
    1284:	e1 2c       	mov	r14, r1
    1286:	f1 2c       	mov	r15, r1
    1288:	00 e0       	ldi	r16, 0x00	; 0
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	a9 01       	movw	r20, r18
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	0e 94 16 13 	call	0x262c	; 0x262c <xTaskGenericNotifyFromISR>
    1296:	19 86       	std	Y+9, r1	; 0x09
    1298:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    129a:	c5 01       	movw	r24, r10
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	1f 91       	pop	r17
    12a2:	0f 91       	pop	r16
    12a4:	ff 90       	pop	r15
    12a6:	ef 90       	pop	r14
    12a8:	df 90       	pop	r13
    12aa:	cf 90       	pop	r12
    12ac:	bf 90       	pop	r11
    12ae:	af 90       	pop	r10
    12b0:	08 95       	ret

000012b2 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    12b2:	4f 92       	push	r4
    12b4:	5f 92       	push	r5
    12b6:	6f 92       	push	r6
    12b8:	7f 92       	push	r7
    12ba:	8f 92       	push	r8
    12bc:	9f 92       	push	r9
    12be:	af 92       	push	r10
    12c0:	bf 92       	push	r11
    12c2:	cf 92       	push	r12
    12c4:	df 92       	push	r13
    12c6:	ef 92       	push	r14
    12c8:	ff 92       	push	r15
    12ca:	0f 93       	push	r16
    12cc:	1f 93       	push	r17
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	ec 01       	movw	r28, r24
    12d4:	2b 01       	movw	r4, r22
    12d6:	3a 01       	movw	r6, r20
    12d8:	58 01       	movw	r10, r16
    12da:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    12dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    12de:	80 ff       	sbrs	r24, 0
    12e0:	05 c0       	rjmp	.+10     	; 0x12ec <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    12e2:	68 94       	set
    12e4:	88 24       	eor	r8, r8
    12e6:	81 f8       	bld	r8, 1
    12e8:	91 2c       	mov	r9, r1
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    12ec:	81 2c       	mov	r8, r1
    12ee:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    12f0:	a1 14       	cp	r10, r1
    12f2:	b1 04       	cpc	r11, r1
    12f4:	c1 04       	cpc	r12, r1
    12f6:	d1 04       	cpc	r13, r1
    12f8:	31 f1       	breq	.+76     	; 0x1346 <xStreamBufferReceive+0x94>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1300:	ce 01       	movw	r24, r28
    1302:	2b dd       	rcall	.-1450   	; 0xd5a <prvBytesInBuffer>
    1304:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1306:	88 16       	cp	r8, r24
    1308:	99 06       	cpc	r9, r25
    130a:	40 f0       	brcs	.+16     	; 0x131c <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    130c:	60 e0       	ldi	r22, 0x00	; 0
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	0e 94 38 14 	call	0x2870	; 0x2870 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1316:	7e d7       	rcall	.+3836   	; 0x2214 <xTaskGetCurrentTaskHandle>
    1318:	99 87       	std	Y+9, r25	; 0x09
    131a:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    131c:	0f 90       	pop	r0
    131e:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1320:	8e 14       	cp	r8, r14
    1322:	9f 04       	cpc	r9, r15
    1324:	98 f0       	brcs	.+38     	; 0x134c <xStreamBufferReceive+0x9a>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1326:	e1 2c       	mov	r14, r1
    1328:	f1 2c       	mov	r15, r1
    132a:	00 e0       	ldi	r16, 0x00	; 0
    132c:	10 e0       	ldi	r17, 0x00	; 0
    132e:	98 01       	movw	r18, r16
    1330:	40 e0       	ldi	r20, 0x00	; 0
    1332:	50 e0       	ldi	r21, 0x00	; 0
    1334:	ba 01       	movw	r22, r20
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	db d7       	rcall	.+4022   	; 0x22f0 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    133a:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    133c:	18 86       	std	Y+8, r1	; 0x08
    133e:	ce 01       	movw	r24, r28
    1340:	0c dd       	rcall	.-1512   	; 0xd5a <prvBytesInBuffer>
    1342:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1344:	03 c0       	rjmp	.+6      	; 0x134c <xStreamBufferReceive+0x9a>
    1346:	ce 01       	movw	r24, r28
    1348:	08 dd       	rcall	.-1520   	; 0xd5a <prvBytesInBuffer>
    134a:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    134c:	8e 14       	cp	r8, r14
    134e:	9f 04       	cpc	r9, r15
    1350:	e8 f4       	brcc	.+58     	; 0x138c <xStreamBufferReceive+0xda>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1352:	84 01       	movw	r16, r8
    1354:	97 01       	movw	r18, r14
    1356:	a3 01       	movw	r20, r6
    1358:	b2 01       	movw	r22, r4
    135a:	ce 01       	movw	r24, r28
    135c:	fc dd       	rcall	.-1032   	; 0xf56 <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    135e:	6c 01       	movw	r12, r24
    1360:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1362:	b1 f0       	breq	.+44     	; 0x1390 <xStreamBufferReceive+0xde>
    1364:	bd d2       	rcall	.+1402   	; 0x18e0 <vTaskSuspendAll>
    1366:	8a 85       	ldd	r24, Y+10	; 0x0a
    1368:	9b 85       	ldd	r25, Y+11	; 0x0b
    136a:	89 2b       	or	r24, r25
    136c:	69 f0       	breq	.+26     	; 0x1388 <xStreamBufferReceive+0xd6>
    136e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1370:	9b 85       	ldd	r25, Y+11	; 0x0b
    1372:	e1 2c       	mov	r14, r1
    1374:	f1 2c       	mov	r15, r1
    1376:	00 e0       	ldi	r16, 0x00	; 0
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	a9 01       	movw	r20, r18
    137e:	60 e0       	ldi	r22, 0x00	; 0
    1380:	0e 94 1f 12 	call	0x243e	; 0x243e <xTaskGenericNotify>
    1384:	1b 86       	std	Y+11, r1	; 0x0b
    1386:	1a 86       	std	Y+10, r1	; 0x0a
    1388:	eb d3       	rcall	.+2006   	; 0x1b60 <xTaskResumeAll>
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <xStreamBufferReceive+0xde>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    138c:	c1 2c       	mov	r12, r1
    138e:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1390:	c6 01       	movw	r24, r12
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	ff 90       	pop	r15
    139c:	ef 90       	pop	r14
    139e:	df 90       	pop	r13
    13a0:	cf 90       	pop	r12
    13a2:	bf 90       	pop	r11
    13a4:	af 90       	pop	r10
    13a6:	9f 90       	pop	r9
    13a8:	8f 90       	pop	r8
    13aa:	7f 90       	pop	r7
    13ac:	6f 90       	pop	r6
    13ae:	5f 90       	pop	r5
    13b0:	4f 90       	pop	r4
    13b2:	08 95       	ret

000013b4 <prvResetNextTaskUnblockTime>:
    13b4:	e0 91 e7 14 	lds	r30, 0x14E7	; 0x8014e7 <pxDelayedTaskList>
    13b8:	f0 91 e8 14 	lds	r31, 0x14E8	; 0x8014e8 <pxDelayedTaskList+0x1>
    13bc:	80 81       	ld	r24, Z
    13be:	81 11       	cpse	r24, r1
    13c0:	0c c0       	rjmp	.+24     	; 0x13da <prvResetNextTaskUnblockTime+0x26>
    13c2:	8f ef       	ldi	r24, 0xFF	; 255
    13c4:	9f ef       	ldi	r25, 0xFF	; 255
    13c6:	dc 01       	movw	r26, r24
    13c8:	80 93 b1 14 	sts	0x14B1, r24	; 0x8014b1 <xNextTaskUnblockTime>
    13cc:	90 93 b2 14 	sts	0x14B2, r25	; 0x8014b2 <xNextTaskUnblockTime+0x1>
    13d0:	a0 93 b3 14 	sts	0x14B3, r26	; 0x8014b3 <xNextTaskUnblockTime+0x2>
    13d4:	b0 93 b4 14 	sts	0x14B4, r27	; 0x8014b4 <xNextTaskUnblockTime+0x3>
    13d8:	08 95       	ret
    13da:	e0 91 e7 14 	lds	r30, 0x14E7	; 0x8014e7 <pxDelayedTaskList>
    13de:	f0 91 e8 14 	lds	r31, 0x14E8	; 0x8014e8 <pxDelayedTaskList+0x1>
    13e2:	07 80       	ldd	r0, Z+7	; 0x07
    13e4:	f0 85       	ldd	r31, Z+8	; 0x08
    13e6:	e0 2d       	mov	r30, r0
    13e8:	80 81       	ld	r24, Z
    13ea:	91 81       	ldd	r25, Z+1	; 0x01
    13ec:	a2 81       	ldd	r26, Z+2	; 0x02
    13ee:	b3 81       	ldd	r27, Z+3	; 0x03
    13f0:	80 93 b1 14 	sts	0x14B1, r24	; 0x8014b1 <xNextTaskUnblockTime>
    13f4:	90 93 b2 14 	sts	0x14B2, r25	; 0x8014b2 <xNextTaskUnblockTime+0x1>
    13f8:	a0 93 b3 14 	sts	0x14B3, r26	; 0x8014b3 <xNextTaskUnblockTime+0x2>
    13fc:	b0 93 b4 14 	sts	0x14B4, r27	; 0x8014b4 <xNextTaskUnblockTime+0x3>
    1400:	08 95       	ret

00001402 <prvDeleteTCB>:
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	ec 01       	movw	r28, r24
    1408:	8b 8d       	ldd	r24, Y+27	; 0x1b
    140a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    140c:	1d d8       	rcall	.-4038   	; 0x448 <vPortFree>
    140e:	ce 01       	movw	r24, r28
    1410:	1b d8       	rcall	.-4042   	; 0x448 <vPortFree>
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	08 95       	ret

00001418 <prvInitialiseNewTask>:
    1418:	4f 92       	push	r4
    141a:	5f 92       	push	r5
    141c:	6f 92       	push	r6
    141e:	7f 92       	push	r7
    1420:	8f 92       	push	r8
    1422:	9f 92       	push	r9
    1424:	af 92       	push	r10
    1426:	bf 92       	push	r11
    1428:	cf 92       	push	r12
    142a:	df 92       	push	r13
    142c:	ef 92       	push	r14
    142e:	ff 92       	push	r15
    1430:	0f 93       	push	r16
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	2c 01       	movw	r4, r24
    1438:	5b 01       	movw	r10, r22
    143a:	4a 01       	movw	r8, r20
    143c:	39 01       	movw	r6, r18
    143e:	e6 01       	movw	r28, r12
    1440:	65 ea       	ldi	r22, 0xA5	; 165
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1446:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1448:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <memset>
    144c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    144e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1450:	21 e0       	ldi	r18, 0x01	; 1
    1452:	82 1a       	sub	r8, r18
    1454:	91 08       	sbc	r9, r1
    1456:	88 0e       	add	r8, r24
    1458:	99 1e       	adc	r9, r25
    145a:	a1 14       	cp	r10, r1
    145c:	b1 04       	cpc	r11, r1
    145e:	89 f4       	brne	.+34     	; 0x1482 <prvInitialiseNewTask+0x6a>
    1460:	15 c0       	rjmp	.+42     	; 0x148c <prvInitialiseNewTask+0x74>
    1462:	82 2f       	mov	r24, r18
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	f5 01       	movw	r30, r10
    1468:	e8 0f       	add	r30, r24
    146a:	f9 1f       	adc	r31, r25
    146c:	30 81       	ld	r19, Z
    146e:	de 01       	movw	r26, r28
    1470:	a8 0f       	add	r26, r24
    1472:	b9 1f       	adc	r27, r25
    1474:	5d 96       	adiw	r26, 0x1d	; 29
    1476:	3c 93       	st	X, r19
    1478:	80 81       	ld	r24, Z
    147a:	88 23       	and	r24, r24
    147c:	29 f0       	breq	.+10     	; 0x1488 <prvInitialiseNewTask+0x70>
    147e:	2f 5f       	subi	r18, 0xFF	; 255
    1480:	01 c0       	rjmp	.+2      	; 0x1484 <prvInitialiseNewTask+0x6c>
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	20 31       	cpi	r18, 0x10	; 16
    1486:	68 f3       	brcs	.-38     	; 0x1462 <prvInitialiseNewTask+0x4a>
    1488:	1c a6       	std	Y+44, r1	; 0x2c
    148a:	01 c0       	rjmp	.+2      	; 0x148e <prvInitialiseNewTask+0x76>
    148c:	1d 8e       	std	Y+29, r1	; 0x1d
    148e:	0a 30       	cpi	r16, 0x0A	; 10
    1490:	08 f0       	brcs	.+2      	; 0x1494 <prvInitialiseNewTask+0x7c>
    1492:	09 e0       	ldi	r16, 0x09	; 9
    1494:	0a 8f       	std	Y+26, r16	; 0x1a
    1496:	0d a7       	std	Y+45, r16	; 0x2d
    1498:	1e a6       	std	Y+46, r1	; 0x2e
    149a:	ce 01       	movw	r24, r28
    149c:	02 96       	adiw	r24, 0x02	; 2
    149e:	22 d8       	rcall	.-4028   	; 0x4e4 <vListInitialiseItem>
    14a0:	ce 01       	movw	r24, r28
    14a2:	0e 96       	adiw	r24, 0x0e	; 14
    14a4:	1f d8       	rcall	.-4034   	; 0x4e4 <vListInitialiseItem>
    14a6:	db 87       	std	Y+11, r29	; 0x0b
    14a8:	ca 87       	std	Y+10, r28	; 0x0a
    14aa:	8a e0       	ldi	r24, 0x0A	; 10
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	a0 e0       	ldi	r26, 0x00	; 0
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	80 1b       	sub	r24, r16
    14b4:	91 09       	sbc	r25, r1
    14b6:	a1 09       	sbc	r26, r1
    14b8:	b1 09       	sbc	r27, r1
    14ba:	8e 87       	std	Y+14, r24	; 0x0e
    14bc:	9f 87       	std	Y+15, r25	; 0x0f
    14be:	a8 8b       	std	Y+16, r26	; 0x10
    14c0:	b9 8b       	std	Y+17, r27	; 0x11
    14c2:	df 8b       	std	Y+23, r29	; 0x17
    14c4:	ce 8b       	std	Y+22, r28	; 0x16
    14c6:	84 e0       	ldi	r24, 0x04	; 4
    14c8:	fe 01       	movw	r30, r28
    14ca:	bf 96       	adiw	r30, 0x2f	; 47
    14cc:	df 01       	movw	r26, r30
    14ce:	1d 92       	st	X+, r1
    14d0:	8a 95       	dec	r24
    14d2:	e9 f7       	brne	.-6      	; 0x14ce <prvInitialiseNewTask+0xb6>
    14d4:	1b aa       	std	Y+51, r1	; 0x33
    14d6:	a3 01       	movw	r20, r6
    14d8:	b2 01       	movw	r22, r4
    14da:	c4 01       	movw	r24, r8
    14dc:	77 d8       	rcall	.-3858   	; 0x5cc <pxPortInitialiseStack>
    14de:	99 83       	std	Y+1, r25	; 0x01
    14e0:	88 83       	st	Y, r24
    14e2:	e1 14       	cp	r14, r1
    14e4:	f1 04       	cpc	r15, r1
    14e6:	19 f0       	breq	.+6      	; 0x14ee <prvInitialiseNewTask+0xd6>
    14e8:	f7 01       	movw	r30, r14
    14ea:	d1 83       	std	Z+1, r29	; 0x01
    14ec:	c0 83       	st	Z, r28
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	0f 91       	pop	r16
    14f4:	ff 90       	pop	r15
    14f6:	ef 90       	pop	r14
    14f8:	df 90       	pop	r13
    14fa:	cf 90       	pop	r12
    14fc:	bf 90       	pop	r11
    14fe:	af 90       	pop	r10
    1500:	9f 90       	pop	r9
    1502:	8f 90       	pop	r8
    1504:	7f 90       	pop	r7
    1506:	6f 90       	pop	r6
    1508:	5f 90       	pop	r5
    150a:	4f 90       	pop	r4
    150c:	08 95       	ret

0000150e <prvInitialiseTaskLists>:
    150e:	cf 93       	push	r28
    1510:	c0 e0       	ldi	r28, 0x00	; 0
    1512:	09 c0       	rjmp	.+18     	; 0x1526 <prvInitialiseTaskLists+0x18>
    1514:	2b e0       	ldi	r18, 0x0B	; 11
    1516:	c2 9f       	mul	r28, r18
    1518:	c0 01       	movw	r24, r0
    151a:	11 24       	eor	r1, r1
    151c:	81 50       	subi	r24, 0x01	; 1
    151e:	9b 4e       	sbci	r25, 0xEB	; 235
    1520:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    1524:	cf 5f       	subi	r28, 0xFF	; 255
    1526:	ca 30       	cpi	r28, 0x0A	; 10
    1528:	a8 f3       	brcs	.-22     	; 0x1514 <prvInitialiseTaskLists+0x6>
    152a:	84 ef       	ldi	r24, 0xF4	; 244
    152c:	94 e1       	ldi	r25, 0x14	; 20
    152e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    1532:	89 ee       	ldi	r24, 0xE9	; 233
    1534:	94 e1       	ldi	r25, 0x14	; 20
    1536:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    153a:	8a ed       	ldi	r24, 0xDA	; 218
    153c:	94 e1       	ldi	r25, 0x14	; 20
    153e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    1542:	8f ec       	ldi	r24, 0xCF	; 207
    1544:	94 e1       	ldi	r25, 0x14	; 20
    1546:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    154a:	83 ec       	ldi	r24, 0xC3	; 195
    154c:	94 e1       	ldi	r25, 0x14	; 20
    154e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    1552:	84 ef       	ldi	r24, 0xF4	; 244
    1554:	94 e1       	ldi	r25, 0x14	; 20
    1556:	90 93 e8 14 	sts	0x14E8, r25	; 0x8014e8 <pxDelayedTaskList+0x1>
    155a:	80 93 e7 14 	sts	0x14E7, r24	; 0x8014e7 <pxDelayedTaskList>
    155e:	89 ee       	ldi	r24, 0xE9	; 233
    1560:	94 e1       	ldi	r25, 0x14	; 20
    1562:	90 93 e6 14 	sts	0x14E6, r25	; 0x8014e6 <pxOverflowDelayedTaskList+0x1>
    1566:	80 93 e5 14 	sts	0x14E5, r24	; 0x8014e5 <pxOverflowDelayedTaskList>
    156a:	cf 91       	pop	r28
    156c:	08 95       	ret

0000156e <prvAddNewTaskToReadyList>:
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	ec 01       	movw	r28, r24
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	0f 92       	push	r0
    157a:	80 91 c2 14 	lds	r24, 0x14C2	; 0x8014c2 <uxCurrentNumberOfTasks>
    157e:	8f 5f       	subi	r24, 0xFF	; 255
    1580:	80 93 c2 14 	sts	0x14C2, r24	; 0x8014c2 <uxCurrentNumberOfTasks>
    1584:	80 91 6d 15 	lds	r24, 0x156D	; 0x80156d <pxCurrentTCB>
    1588:	90 91 6e 15 	lds	r25, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    158c:	89 2b       	or	r24, r25
    158e:	51 f4       	brne	.+20     	; 0x15a4 <prvAddNewTaskToReadyList+0x36>
    1590:	d0 93 6e 15 	sts	0x156E, r29	; 0x80156e <pxCurrentTCB+0x1>
    1594:	c0 93 6d 15 	sts	0x156D, r28	; 0x80156d <pxCurrentTCB>
    1598:	80 91 c2 14 	lds	r24, 0x14C2	; 0x8014c2 <uxCurrentNumberOfTasks>
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	91 f4       	brne	.+36     	; 0x15c4 <prvAddNewTaskToReadyList+0x56>
    15a0:	b6 df       	rcall	.-148    	; 0x150e <prvInitialiseTaskLists>
    15a2:	10 c0       	rjmp	.+32     	; 0x15c4 <prvAddNewTaskToReadyList+0x56>
    15a4:	80 91 bc 14 	lds	r24, 0x14BC	; 0x8014bc <xSchedulerRunning>
    15a8:	81 11       	cpse	r24, r1
    15aa:	0c c0       	rjmp	.+24     	; 0x15c4 <prvAddNewTaskToReadyList+0x56>
    15ac:	e0 91 6d 15 	lds	r30, 0x156D	; 0x80156d <pxCurrentTCB>
    15b0:	f0 91 6e 15 	lds	r31, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    15b4:	92 8d       	ldd	r25, Z+26	; 0x1a
    15b6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15b8:	89 17       	cp	r24, r25
    15ba:	20 f0       	brcs	.+8      	; 0x15c4 <prvAddNewTaskToReadyList+0x56>
    15bc:	d0 93 6e 15 	sts	0x156E, r29	; 0x80156e <pxCurrentTCB+0x1>
    15c0:	c0 93 6d 15 	sts	0x156D, r28	; 0x80156d <pxCurrentTCB>
    15c4:	80 91 b5 14 	lds	r24, 0x14B5	; 0x8014b5 <uxTaskNumber>
    15c8:	8f 5f       	subi	r24, 0xFF	; 255
    15ca:	80 93 b5 14 	sts	0x14B5, r24	; 0x8014b5 <uxTaskNumber>
    15ce:	ea 8d       	ldd	r30, Y+26	; 0x1a
    15d0:	80 91 bd 14 	lds	r24, 0x14BD	; 0x8014bd <uxTopReadyPriority>
    15d4:	8e 17       	cp	r24, r30
    15d6:	10 f4       	brcc	.+4      	; 0x15dc <prvAddNewTaskToReadyList+0x6e>
    15d8:	e0 93 bd 14 	sts	0x14BD, r30	; 0x8014bd <uxTopReadyPriority>
    15dc:	8b e0       	ldi	r24, 0x0B	; 11
    15de:	8e 9f       	mul	r24, r30
    15e0:	f0 01       	movw	r30, r0
    15e2:	11 24       	eor	r1, r1
    15e4:	e1 50       	subi	r30, 0x01	; 1
    15e6:	fb 4e       	sbci	r31, 0xEB	; 235
    15e8:	01 80       	ldd	r0, Z+1	; 0x01
    15ea:	f2 81       	ldd	r31, Z+2	; 0x02
    15ec:	e0 2d       	mov	r30, r0
    15ee:	ff 83       	std	Y+7, r31	; 0x07
    15f0:	ee 83       	std	Y+6, r30	; 0x06
    15f2:	26 81       	ldd	r18, Z+6	; 0x06
    15f4:	37 81       	ldd	r19, Z+7	; 0x07
    15f6:	39 87       	std	Y+9, r19	; 0x09
    15f8:	28 87       	std	Y+8, r18	; 0x08
    15fa:	a6 81       	ldd	r26, Z+6	; 0x06
    15fc:	b7 81       	ldd	r27, Z+7	; 0x07
    15fe:	9e 01       	movw	r18, r28
    1600:	2e 5f       	subi	r18, 0xFE	; 254
    1602:	3f 4f       	sbci	r19, 0xFF	; 255
    1604:	15 96       	adiw	r26, 0x05	; 5
    1606:	3c 93       	st	X, r19
    1608:	2e 93       	st	-X, r18
    160a:	14 97       	sbiw	r26, 0x04	; 4
    160c:	37 83       	std	Z+7, r19	; 0x07
    160e:	26 83       	std	Z+6, r18	; 0x06
    1610:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1612:	8e 9f       	mul	r24, r30
    1614:	f0 01       	movw	r30, r0
    1616:	11 24       	eor	r1, r1
    1618:	e1 50       	subi	r30, 0x01	; 1
    161a:	fb 4e       	sbci	r31, 0xEB	; 235
    161c:	fd 87       	std	Y+13, r31	; 0x0d
    161e:	ec 87       	std	Y+12, r30	; 0x0c
    1620:	80 81       	ld	r24, Z
    1622:	8f 5f       	subi	r24, 0xFF	; 255
    1624:	80 83       	st	Z, r24
    1626:	0f 90       	pop	r0
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	80 91 bc 14 	lds	r24, 0x14BC	; 0x8014bc <xSchedulerRunning>
    162e:	88 23       	and	r24, r24
    1630:	49 f0       	breq	.+18     	; 0x1644 <prvAddNewTaskToReadyList+0xd6>
    1632:	e0 91 6d 15 	lds	r30, 0x156D	; 0x80156d <pxCurrentTCB>
    1636:	f0 91 6e 15 	lds	r31, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    163a:	92 8d       	ldd	r25, Z+26	; 0x1a
    163c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    163e:	98 17       	cp	r25, r24
    1640:	08 f4       	brcc	.+2      	; 0x1644 <prvAddNewTaskToReadyList+0xd6>
    1642:	0d d8       	rcall	.-4070   	; 0x65e <vPortYield>
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	08 95       	ret

0000164a <prvCheckTasksWaitingTermination>:
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
    164e:	1b c0       	rjmp	.+54     	; 0x1686 <prvCheckTasksWaitingTermination+0x3c>
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	0f 92       	push	r0
    1656:	e0 91 d6 14 	lds	r30, 0x14D6	; 0x8014d6 <xTasksWaitingTermination+0x7>
    165a:	f0 91 d7 14 	lds	r31, 0x14D7	; 0x8014d7 <xTasksWaitingTermination+0x8>
    165e:	c0 85       	ldd	r28, Z+8	; 0x08
    1660:	d1 85       	ldd	r29, Z+9	; 0x09
    1662:	ce 01       	movw	r24, r28
    1664:	02 96       	adiw	r24, 0x02	; 2
    1666:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
    166a:	80 91 c2 14 	lds	r24, 0x14C2	; 0x8014c2 <uxCurrentNumberOfTasks>
    166e:	81 50       	subi	r24, 0x01	; 1
    1670:	80 93 c2 14 	sts	0x14C2, r24	; 0x8014c2 <uxCurrentNumberOfTasks>
    1674:	80 91 ce 14 	lds	r24, 0x14CE	; 0x8014ce <uxDeletedTasksWaitingCleanUp>
    1678:	81 50       	subi	r24, 0x01	; 1
    167a:	80 93 ce 14 	sts	0x14CE, r24	; 0x8014ce <uxDeletedTasksWaitingCleanUp>
    167e:	0f 90       	pop	r0
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	ce 01       	movw	r24, r28
    1684:	be de       	rcall	.-644    	; 0x1402 <prvDeleteTCB>
    1686:	80 91 ce 14 	lds	r24, 0x14CE	; 0x8014ce <uxDeletedTasksWaitingCleanUp>
    168a:	81 11       	cpse	r24, r1
    168c:	e1 cf       	rjmp	.-62     	; 0x1650 <prvCheckTasksWaitingTermination+0x6>
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

00001694 <prvAddCurrentTaskToDelayedList>:
    1694:	8f 92       	push	r8
    1696:	9f 92       	push	r9
    1698:	af 92       	push	r10
    169a:	bf 92       	push	r11
    169c:	cf 92       	push	r12
    169e:	df 92       	push	r13
    16a0:	ef 92       	push	r14
    16a2:	ff 92       	push	r15
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	6b 01       	movw	r12, r22
    16aa:	7c 01       	movw	r14, r24
    16ac:	c4 2f       	mov	r28, r20
    16ae:	80 90 be 14 	lds	r8, 0x14BE	; 0x8014be <xTickCount>
    16b2:	90 90 bf 14 	lds	r9, 0x14BF	; 0x8014bf <xTickCount+0x1>
    16b6:	a0 90 c0 14 	lds	r10, 0x14C0	; 0x8014c0 <xTickCount+0x2>
    16ba:	b0 90 c1 14 	lds	r11, 0x14C1	; 0x8014c1 <xTickCount+0x3>
    16be:	80 91 6d 15 	lds	r24, 0x156D	; 0x80156d <pxCurrentTCB>
    16c2:	90 91 6e 15 	lds	r25, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    16c6:	02 96       	adiw	r24, 0x02	; 2
    16c8:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
    16cc:	8f ef       	ldi	r24, 0xFF	; 255
    16ce:	c8 16       	cp	r12, r24
    16d0:	d8 06       	cpc	r13, r24
    16d2:	e8 06       	cpc	r14, r24
    16d4:	f8 06       	cpc	r15, r24
    16d6:	b1 f5       	brne	.+108    	; 0x1744 <prvAddCurrentTaskToDelayedList+0xb0>
    16d8:	cc 23       	and	r28, r28
    16da:	a1 f1       	breq	.+104    	; 0x1744 <prvAddCurrentTaskToDelayedList+0xb0>
    16dc:	e3 ec       	ldi	r30, 0xC3	; 195
    16de:	f4 e1       	ldi	r31, 0x14	; 20
    16e0:	a1 81       	ldd	r26, Z+1	; 0x01
    16e2:	b2 81       	ldd	r27, Z+2	; 0x02
    16e4:	c0 91 6d 15 	lds	r28, 0x156D	; 0x80156d <pxCurrentTCB>
    16e8:	d0 91 6e 15 	lds	r29, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    16ec:	bf 83       	std	Y+7, r27	; 0x07
    16ee:	ae 83       	std	Y+6, r26	; 0x06
    16f0:	c0 91 6d 15 	lds	r28, 0x156D	; 0x80156d <pxCurrentTCB>
    16f4:	d0 91 6e 15 	lds	r29, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    16f8:	16 96       	adiw	r26, 0x06	; 6
    16fa:	8d 91       	ld	r24, X+
    16fc:	9c 91       	ld	r25, X
    16fe:	17 97       	sbiw	r26, 0x07	; 7
    1700:	99 87       	std	Y+9, r25	; 0x09
    1702:	88 87       	std	Y+8, r24	; 0x08
    1704:	16 96       	adiw	r26, 0x06	; 6
    1706:	cd 91       	ld	r28, X+
    1708:	dc 91       	ld	r29, X
    170a:	17 97       	sbiw	r26, 0x07	; 7
    170c:	80 91 6d 15 	lds	r24, 0x156D	; 0x80156d <pxCurrentTCB>
    1710:	90 91 6e 15 	lds	r25, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    1714:	02 96       	adiw	r24, 0x02	; 2
    1716:	9d 83       	std	Y+5, r25	; 0x05
    1718:	8c 83       	std	Y+4, r24	; 0x04
    171a:	80 91 6d 15 	lds	r24, 0x156D	; 0x80156d <pxCurrentTCB>
    171e:	90 91 6e 15 	lds	r25, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    1722:	02 96       	adiw	r24, 0x02	; 2
    1724:	17 96       	adiw	r26, 0x07	; 7
    1726:	9c 93       	st	X, r25
    1728:	8e 93       	st	-X, r24
    172a:	16 97       	sbiw	r26, 0x06	; 6
    172c:	a0 91 6d 15 	lds	r26, 0x156D	; 0x80156d <pxCurrentTCB>
    1730:	b0 91 6e 15 	lds	r27, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    1734:	1d 96       	adiw	r26, 0x0d	; 13
    1736:	fc 93       	st	X, r31
    1738:	ee 93       	st	-X, r30
    173a:	1c 97       	sbiw	r26, 0x0c	; 12
    173c:	80 81       	ld	r24, Z
    173e:	8f 5f       	subi	r24, 0xFF	; 255
    1740:	80 83       	st	Z, r24
    1742:	3f c0       	rjmp	.+126    	; 0x17c2 <prvAddCurrentTaskToDelayedList+0x12e>
    1744:	c8 0c       	add	r12, r8
    1746:	d9 1c       	adc	r13, r9
    1748:	ea 1c       	adc	r14, r10
    174a:	fb 1c       	adc	r15, r11
    174c:	e0 91 6d 15 	lds	r30, 0x156D	; 0x80156d <pxCurrentTCB>
    1750:	f0 91 6e 15 	lds	r31, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    1754:	c2 82       	std	Z+2, r12	; 0x02
    1756:	d3 82       	std	Z+3, r13	; 0x03
    1758:	e4 82       	std	Z+4, r14	; 0x04
    175a:	f5 82       	std	Z+5, r15	; 0x05
    175c:	c8 14       	cp	r12, r8
    175e:	d9 04       	cpc	r13, r9
    1760:	ea 04       	cpc	r14, r10
    1762:	fb 04       	cpc	r15, r11
    1764:	68 f4       	brcc	.+26     	; 0x1780 <prvAddCurrentTaskToDelayedList+0xec>
    1766:	60 91 6d 15 	lds	r22, 0x156D	; 0x80156d <pxCurrentTCB>
    176a:	70 91 6e 15 	lds	r23, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    176e:	80 91 e5 14 	lds	r24, 0x14E5	; 0x8014e5 <pxOverflowDelayedTaskList>
    1772:	90 91 e6 14 	lds	r25, 0x14E6	; 0x8014e6 <pxOverflowDelayedTaskList+0x1>
    1776:	6e 5f       	subi	r22, 0xFE	; 254
    1778:	7f 4f       	sbci	r23, 0xFF	; 255
    177a:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    177e:	21 c0       	rjmp	.+66     	; 0x17c2 <prvAddCurrentTaskToDelayedList+0x12e>
    1780:	60 91 6d 15 	lds	r22, 0x156D	; 0x80156d <pxCurrentTCB>
    1784:	70 91 6e 15 	lds	r23, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    1788:	80 91 e7 14 	lds	r24, 0x14E7	; 0x8014e7 <pxDelayedTaskList>
    178c:	90 91 e8 14 	lds	r25, 0x14E8	; 0x8014e8 <pxDelayedTaskList+0x1>
    1790:	6e 5f       	subi	r22, 0xFE	; 254
    1792:	7f 4f       	sbci	r23, 0xFF	; 255
    1794:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    1798:	80 91 b1 14 	lds	r24, 0x14B1	; 0x8014b1 <xNextTaskUnblockTime>
    179c:	90 91 b2 14 	lds	r25, 0x14B2	; 0x8014b2 <xNextTaskUnblockTime+0x1>
    17a0:	a0 91 b3 14 	lds	r26, 0x14B3	; 0x8014b3 <xNextTaskUnblockTime+0x2>
    17a4:	b0 91 b4 14 	lds	r27, 0x14B4	; 0x8014b4 <xNextTaskUnblockTime+0x3>
    17a8:	c8 16       	cp	r12, r24
    17aa:	d9 06       	cpc	r13, r25
    17ac:	ea 06       	cpc	r14, r26
    17ae:	fb 06       	cpc	r15, r27
    17b0:	40 f4       	brcc	.+16     	; 0x17c2 <prvAddCurrentTaskToDelayedList+0x12e>
    17b2:	c0 92 b1 14 	sts	0x14B1, r12	; 0x8014b1 <xNextTaskUnblockTime>
    17b6:	d0 92 b2 14 	sts	0x14B2, r13	; 0x8014b2 <xNextTaskUnblockTime+0x1>
    17ba:	e0 92 b3 14 	sts	0x14B3, r14	; 0x8014b3 <xNextTaskUnblockTime+0x2>
    17be:	f0 92 b4 14 	sts	0x14B4, r15	; 0x8014b4 <xNextTaskUnblockTime+0x3>
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	ff 90       	pop	r15
    17c8:	ef 90       	pop	r14
    17ca:	df 90       	pop	r13
    17cc:	cf 90       	pop	r12
    17ce:	bf 90       	pop	r11
    17d0:	af 90       	pop	r10
    17d2:	9f 90       	pop	r9
    17d4:	8f 90       	pop	r8
    17d6:	08 95       	ret

000017d8 <xTaskCreate>:
    17d8:	2f 92       	push	r2
    17da:	3f 92       	push	r3
    17dc:	4f 92       	push	r4
    17de:	5f 92       	push	r5
    17e0:	6f 92       	push	r6
    17e2:	7f 92       	push	r7
    17e4:	8f 92       	push	r8
    17e6:	9f 92       	push	r9
    17e8:	af 92       	push	r10
    17ea:	bf 92       	push	r11
    17ec:	cf 92       	push	r12
    17ee:	df 92       	push	r13
    17f0:	ef 92       	push	r14
    17f2:	ff 92       	push	r15
    17f4:	0f 93       	push	r16
    17f6:	cf 93       	push	r28
    17f8:	df 93       	push	r29
    17fa:	3c 01       	movw	r6, r24
    17fc:	1b 01       	movw	r2, r22
    17fe:	4a 01       	movw	r8, r20
    1800:	29 01       	movw	r4, r18
    1802:	ca 01       	movw	r24, r20
    1804:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <pvPortMalloc>
    1808:	6c 01       	movw	r12, r24
    180a:	89 2b       	or	r24, r25
    180c:	71 f0       	breq	.+28     	; 0x182a <xTaskCreate+0x52>
    180e:	84 e3       	ldi	r24, 0x34	; 52
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <pvPortMalloc>
    1816:	ec 01       	movw	r28, r24
    1818:	89 2b       	or	r24, r25
    181a:	19 f0       	breq	.+6      	; 0x1822 <xTaskCreate+0x4a>
    181c:	dc 8e       	std	Y+28, r13	; 0x1c
    181e:	cb 8e       	std	Y+27, r12	; 0x1b
    1820:	06 c0       	rjmp	.+12     	; 0x182e <xTaskCreate+0x56>
    1822:	c6 01       	movw	r24, r12
    1824:	0e 94 24 02 	call	0x448	; 0x448 <vPortFree>
    1828:	02 c0       	rjmp	.+4      	; 0x182e <xTaskCreate+0x56>
    182a:	c0 e0       	ldi	r28, 0x00	; 0
    182c:	d0 e0       	ldi	r29, 0x00	; 0
    182e:	20 97       	sbiw	r28, 0x00	; 0
    1830:	61 f0       	breq	.+24     	; 0x184a <xTaskCreate+0x72>
    1832:	a1 2c       	mov	r10, r1
    1834:	b1 2c       	mov	r11, r1
    1836:	6e 01       	movw	r12, r28
    1838:	92 01       	movw	r18, r4
    183a:	a4 01       	movw	r20, r8
    183c:	b1 01       	movw	r22, r2
    183e:	c3 01       	movw	r24, r6
    1840:	eb dd       	rcall	.-1066   	; 0x1418 <prvInitialiseNewTask>
    1842:	ce 01       	movw	r24, r28
    1844:	94 de       	rcall	.-728    	; 0x156e <prvAddNewTaskToReadyList>
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	01 c0       	rjmp	.+2      	; 0x184c <xTaskCreate+0x74>
    184a:	8f ef       	ldi	r24, 0xFF	; 255
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	0f 91       	pop	r16
    1852:	ff 90       	pop	r15
    1854:	ef 90       	pop	r14
    1856:	df 90       	pop	r13
    1858:	cf 90       	pop	r12
    185a:	bf 90       	pop	r11
    185c:	af 90       	pop	r10
    185e:	9f 90       	pop	r9
    1860:	8f 90       	pop	r8
    1862:	7f 90       	pop	r7
    1864:	6f 90       	pop	r6
    1866:	5f 90       	pop	r5
    1868:	4f 90       	pop	r4
    186a:	3f 90       	pop	r3
    186c:	2f 90       	pop	r2
    186e:	08 95       	ret

00001870 <vTaskStartScheduler>:
    1870:	ef 92       	push	r14
    1872:	ff 92       	push	r15
    1874:	0f 93       	push	r16
    1876:	0f 2e       	mov	r0, r31
    1878:	ff ea       	ldi	r31, 0xAF	; 175
    187a:	ef 2e       	mov	r14, r31
    187c:	f4 e1       	ldi	r31, 0x14	; 20
    187e:	ff 2e       	mov	r15, r31
    1880:	f0 2d       	mov	r31, r0
    1882:	00 e0       	ldi	r16, 0x00	; 0
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 ec       	ldi	r20, 0xC0	; 192
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	62 e4       	ldi	r22, 0x42	; 66
    188e:	72 e0       	ldi	r23, 0x02	; 2
    1890:	8d ec       	ldi	r24, 0xCD	; 205
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	a1 df       	rcall	.-190    	; 0x17d8 <xTaskCreate>
    1896:	81 30       	cpi	r24, 0x01	; 1
    1898:	11 f4       	brne	.+4      	; 0x189e <vTaskStartScheduler+0x2e>
    189a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <xTimerCreateTimerTask>
    189e:	81 30       	cpi	r24, 0x01	; 1
    18a0:	c9 f4       	brne	.+50     	; 0x18d4 <vTaskStartScheduler+0x64>
    18a2:	f8 94       	cli
    18a4:	8f ef       	ldi	r24, 0xFF	; 255
    18a6:	9f ef       	ldi	r25, 0xFF	; 255
    18a8:	dc 01       	movw	r26, r24
    18aa:	80 93 b1 14 	sts	0x14B1, r24	; 0x8014b1 <xNextTaskUnblockTime>
    18ae:	90 93 b2 14 	sts	0x14B2, r25	; 0x8014b2 <xNextTaskUnblockTime+0x1>
    18b2:	a0 93 b3 14 	sts	0x14B3, r26	; 0x8014b3 <xNextTaskUnblockTime+0x2>
    18b6:	b0 93 b4 14 	sts	0x14B4, r27	; 0x8014b4 <xNextTaskUnblockTime+0x3>
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	80 93 bc 14 	sts	0x14BC, r24	; 0x8014bc <xSchedulerRunning>
    18c0:	10 92 be 14 	sts	0x14BE, r1	; 0x8014be <xTickCount>
    18c4:	10 92 bf 14 	sts	0x14BF, r1	; 0x8014bf <xTickCount+0x1>
    18c8:	10 92 c0 14 	sts	0x14C0, r1	; 0x8014c0 <xTickCount+0x2>
    18cc:	10 92 c1 14 	sts	0x14C1, r1	; 0x8014c1 <xTickCount+0x3>
    18d0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <xPortStartScheduler>
    18d4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    18d8:	0f 91       	pop	r16
    18da:	ff 90       	pop	r15
    18dc:	ef 90       	pop	r14
    18de:	08 95       	ret

000018e0 <vTaskSuspendAll>:
    18e0:	80 91 ae 14 	lds	r24, 0x14AE	; 0x8014ae <uxSchedulerSuspended>
    18e4:	8f 5f       	subi	r24, 0xFF	; 255
    18e6:	80 93 ae 14 	sts	0x14AE, r24	; 0x8014ae <uxSchedulerSuspended>
    18ea:	08 95       	ret

000018ec <xTaskGetTickCount>:
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	0f 92       	push	r0
    18f2:	60 91 be 14 	lds	r22, 0x14BE	; 0x8014be <xTickCount>
    18f6:	70 91 bf 14 	lds	r23, 0x14BF	; 0x8014bf <xTickCount+0x1>
    18fa:	80 91 c0 14 	lds	r24, 0x14C0	; 0x8014c0 <xTickCount+0x2>
    18fe:	90 91 c1 14 	lds	r25, 0x14C1	; 0x8014c1 <xTickCount+0x3>
    1902:	0f 90       	pop	r0
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	08 95       	ret

00001908 <xTaskIncrementTick>:
    1908:	cf 92       	push	r12
    190a:	df 92       	push	r13
    190c:	ef 92       	push	r14
    190e:	ff 92       	push	r15
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
    1914:	80 91 ae 14 	lds	r24, 0x14AE	; 0x8014ae <uxSchedulerSuspended>
    1918:	81 11       	cpse	r24, r1
    191a:	05 c1       	rjmp	.+522    	; 0x1b26 <xTaskIncrementTick+0x21e>
    191c:	c0 90 be 14 	lds	r12, 0x14BE	; 0x8014be <xTickCount>
    1920:	d0 90 bf 14 	lds	r13, 0x14BF	; 0x8014bf <xTickCount+0x1>
    1924:	e0 90 c0 14 	lds	r14, 0x14C0	; 0x8014c0 <xTickCount+0x2>
    1928:	f0 90 c1 14 	lds	r15, 0x14C1	; 0x8014c1 <xTickCount+0x3>
    192c:	8f ef       	ldi	r24, 0xFF	; 255
    192e:	c8 1a       	sub	r12, r24
    1930:	d8 0a       	sbc	r13, r24
    1932:	e8 0a       	sbc	r14, r24
    1934:	f8 0a       	sbc	r15, r24
    1936:	c0 92 be 14 	sts	0x14BE, r12	; 0x8014be <xTickCount>
    193a:	d0 92 bf 14 	sts	0x14BF, r13	; 0x8014bf <xTickCount+0x1>
    193e:	e0 92 c0 14 	sts	0x14C0, r14	; 0x8014c0 <xTickCount+0x2>
    1942:	f0 92 c1 14 	sts	0x14C1, r15	; 0x8014c1 <xTickCount+0x3>
    1946:	c1 14       	cp	r12, r1
    1948:	d1 04       	cpc	r13, r1
    194a:	e1 04       	cpc	r14, r1
    194c:	f1 04       	cpc	r15, r1
    194e:	b1 f4       	brne	.+44     	; 0x197c <xTaskIncrementTick+0x74>
    1950:	80 91 e7 14 	lds	r24, 0x14E7	; 0x8014e7 <pxDelayedTaskList>
    1954:	90 91 e8 14 	lds	r25, 0x14E8	; 0x8014e8 <pxDelayedTaskList+0x1>
    1958:	20 91 e5 14 	lds	r18, 0x14E5	; 0x8014e5 <pxOverflowDelayedTaskList>
    195c:	30 91 e6 14 	lds	r19, 0x14E6	; 0x8014e6 <pxOverflowDelayedTaskList+0x1>
    1960:	30 93 e8 14 	sts	0x14E8, r19	; 0x8014e8 <pxDelayedTaskList+0x1>
    1964:	20 93 e7 14 	sts	0x14E7, r18	; 0x8014e7 <pxDelayedTaskList>
    1968:	90 93 e6 14 	sts	0x14E6, r25	; 0x8014e6 <pxOverflowDelayedTaskList+0x1>
    196c:	80 93 e5 14 	sts	0x14E5, r24	; 0x8014e5 <pxOverflowDelayedTaskList>
    1970:	80 91 b6 14 	lds	r24, 0x14B6	; 0x8014b6 <xNumOfOverflows>
    1974:	8f 5f       	subi	r24, 0xFF	; 255
    1976:	80 93 b6 14 	sts	0x14B6, r24	; 0x8014b6 <xNumOfOverflows>
    197a:	1c dd       	rcall	.-1480   	; 0x13b4 <prvResetNextTaskUnblockTime>
    197c:	80 91 b1 14 	lds	r24, 0x14B1	; 0x8014b1 <xNextTaskUnblockTime>
    1980:	90 91 b2 14 	lds	r25, 0x14B2	; 0x8014b2 <xNextTaskUnblockTime+0x1>
    1984:	a0 91 b3 14 	lds	r26, 0x14B3	; 0x8014b3 <xNextTaskUnblockTime+0x2>
    1988:	b0 91 b4 14 	lds	r27, 0x14B4	; 0x8014b4 <xNextTaskUnblockTime+0x3>
    198c:	c8 16       	cp	r12, r24
    198e:	d9 06       	cpc	r13, r25
    1990:	ea 06       	cpc	r14, r26
    1992:	fb 06       	cpc	r15, r27
    1994:	20 f4       	brcc	.+8      	; 0x199e <xTaskIncrementTick+0x96>
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	b2 c0       	rjmp	.+356    	; 0x1afe <xTaskIncrementTick+0x1f6>
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	01 c0       	rjmp	.+2      	; 0x19a0 <xTaskIncrementTick+0x98>
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	e0 91 e7 14 	lds	r30, 0x14E7	; 0x8014e7 <pxDelayedTaskList>
    19a4:	f0 91 e8 14 	lds	r31, 0x14E8	; 0x8014e8 <pxDelayedTaskList+0x1>
    19a8:	90 81       	ld	r25, Z
    19aa:	91 11       	cpse	r25, r1
    19ac:	0c c0       	rjmp	.+24     	; 0x19c6 <xTaskIncrementTick+0xbe>
    19ae:	4f ef       	ldi	r20, 0xFF	; 255
    19b0:	5f ef       	ldi	r21, 0xFF	; 255
    19b2:	ba 01       	movw	r22, r20
    19b4:	40 93 b1 14 	sts	0x14B1, r20	; 0x8014b1 <xNextTaskUnblockTime>
    19b8:	50 93 b2 14 	sts	0x14B2, r21	; 0x8014b2 <xNextTaskUnblockTime+0x1>
    19bc:	60 93 b3 14 	sts	0x14B3, r22	; 0x8014b3 <xNextTaskUnblockTime+0x2>
    19c0:	70 93 b4 14 	sts	0x14B4, r23	; 0x8014b4 <xNextTaskUnblockTime+0x3>
    19c4:	9c c0       	rjmp	.+312    	; 0x1afe <xTaskIncrementTick+0x1f6>
    19c6:	e0 91 e7 14 	lds	r30, 0x14E7	; 0x8014e7 <pxDelayedTaskList>
    19ca:	f0 91 e8 14 	lds	r31, 0x14E8	; 0x8014e8 <pxDelayedTaskList+0x1>
    19ce:	07 80       	ldd	r0, Z+7	; 0x07
    19d0:	f0 85       	ldd	r31, Z+8	; 0x08
    19d2:	e0 2d       	mov	r30, r0
    19d4:	00 84       	ldd	r0, Z+8	; 0x08
    19d6:	f1 85       	ldd	r31, Z+9	; 0x09
    19d8:	e0 2d       	mov	r30, r0
    19da:	42 81       	ldd	r20, Z+2	; 0x02
    19dc:	53 81       	ldd	r21, Z+3	; 0x03
    19de:	64 81       	ldd	r22, Z+4	; 0x04
    19e0:	75 81       	ldd	r23, Z+5	; 0x05
    19e2:	c4 16       	cp	r12, r20
    19e4:	d5 06       	cpc	r13, r21
    19e6:	e6 06       	cpc	r14, r22
    19e8:	f7 06       	cpc	r15, r23
    19ea:	48 f4       	brcc	.+18     	; 0x19fe <xTaskIncrementTick+0xf6>
    19ec:	40 93 b1 14 	sts	0x14B1, r20	; 0x8014b1 <xNextTaskUnblockTime>
    19f0:	50 93 b2 14 	sts	0x14B2, r21	; 0x8014b2 <xNextTaskUnblockTime+0x1>
    19f4:	60 93 b3 14 	sts	0x14B3, r22	; 0x8014b3 <xNextTaskUnblockTime+0x2>
    19f8:	70 93 b4 14 	sts	0x14B4, r23	; 0x8014b4 <xNextTaskUnblockTime+0x3>
    19fc:	80 c0       	rjmp	.+256    	; 0x1afe <xTaskIncrementTick+0x1f6>
    19fe:	a4 85       	ldd	r26, Z+12	; 0x0c
    1a00:	b5 85       	ldd	r27, Z+13	; 0x0d
    1a02:	c6 81       	ldd	r28, Z+6	; 0x06
    1a04:	d7 81       	ldd	r29, Z+7	; 0x07
    1a06:	20 85       	ldd	r18, Z+8	; 0x08
    1a08:	31 85       	ldd	r19, Z+9	; 0x09
    1a0a:	3f 83       	std	Y+7, r19	; 0x07
    1a0c:	2e 83       	std	Y+6, r18	; 0x06
    1a0e:	c0 85       	ldd	r28, Z+8	; 0x08
    1a10:	d1 85       	ldd	r29, Z+9	; 0x09
    1a12:	26 81       	ldd	r18, Z+6	; 0x06
    1a14:	37 81       	ldd	r19, Z+7	; 0x07
    1a16:	3d 83       	std	Y+5, r19	; 0x05
    1a18:	2c 83       	std	Y+4, r18	; 0x04
    1a1a:	11 96       	adiw	r26, 0x01	; 1
    1a1c:	4d 91       	ld	r20, X+
    1a1e:	5c 91       	ld	r21, X
    1a20:	12 97       	sbiw	r26, 0x02	; 2
    1a22:	9f 01       	movw	r18, r30
    1a24:	2e 5f       	subi	r18, 0xFE	; 254
    1a26:	3f 4f       	sbci	r19, 0xFF	; 255
    1a28:	42 17       	cp	r20, r18
    1a2a:	53 07       	cpc	r21, r19
    1a2c:	31 f4       	brne	.+12     	; 0x1a3a <xTaskIncrementTick+0x132>
    1a2e:	40 85       	ldd	r20, Z+8	; 0x08
    1a30:	51 85       	ldd	r21, Z+9	; 0x09
    1a32:	12 96       	adiw	r26, 0x02	; 2
    1a34:	5c 93       	st	X, r21
    1a36:	4e 93       	st	-X, r20
    1a38:	11 97       	sbiw	r26, 0x01	; 1
    1a3a:	15 86       	std	Z+13, r1	; 0x0d
    1a3c:	14 86       	std	Z+12, r1	; 0x0c
    1a3e:	9c 91       	ld	r25, X
    1a40:	91 50       	subi	r25, 0x01	; 1
    1a42:	9c 93       	st	X, r25
    1a44:	a0 8d       	ldd	r26, Z+24	; 0x18
    1a46:	b1 8d       	ldd	r27, Z+25	; 0x19
    1a48:	10 97       	sbiw	r26, 0x00	; 0
    1a4a:	09 f1       	breq	.+66     	; 0x1a8e <xTaskIncrementTick+0x186>
    1a4c:	c2 89       	ldd	r28, Z+18	; 0x12
    1a4e:	d3 89       	ldd	r29, Z+19	; 0x13
    1a50:	44 89       	ldd	r20, Z+20	; 0x14
    1a52:	55 89       	ldd	r21, Z+21	; 0x15
    1a54:	5f 83       	std	Y+7, r21	; 0x07
    1a56:	4e 83       	std	Y+6, r20	; 0x06
    1a58:	c4 89       	ldd	r28, Z+20	; 0x14
    1a5a:	d5 89       	ldd	r29, Z+21	; 0x15
    1a5c:	42 89       	ldd	r20, Z+18	; 0x12
    1a5e:	53 89       	ldd	r21, Z+19	; 0x13
    1a60:	5d 83       	std	Y+5, r21	; 0x05
    1a62:	4c 83       	std	Y+4, r20	; 0x04
    1a64:	11 96       	adiw	r26, 0x01	; 1
    1a66:	6d 91       	ld	r22, X+
    1a68:	7c 91       	ld	r23, X
    1a6a:	12 97       	sbiw	r26, 0x02	; 2
    1a6c:	af 01       	movw	r20, r30
    1a6e:	42 5f       	subi	r20, 0xF2	; 242
    1a70:	5f 4f       	sbci	r21, 0xFF	; 255
    1a72:	64 17       	cp	r22, r20
    1a74:	75 07       	cpc	r23, r21
    1a76:	31 f4       	brne	.+12     	; 0x1a84 <xTaskIncrementTick+0x17c>
    1a78:	44 89       	ldd	r20, Z+20	; 0x14
    1a7a:	55 89       	ldd	r21, Z+21	; 0x15
    1a7c:	12 96       	adiw	r26, 0x02	; 2
    1a7e:	5c 93       	st	X, r21
    1a80:	4e 93       	st	-X, r20
    1a82:	11 97       	sbiw	r26, 0x01	; 1
    1a84:	11 8e       	std	Z+25, r1	; 0x19
    1a86:	10 8e       	std	Z+24, r1	; 0x18
    1a88:	9c 91       	ld	r25, X
    1a8a:	91 50       	subi	r25, 0x01	; 1
    1a8c:	9c 93       	st	X, r25
    1a8e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1a90:	90 91 bd 14 	lds	r25, 0x14BD	; 0x8014bd <uxTopReadyPriority>
    1a94:	9a 17       	cp	r25, r26
    1a96:	10 f4       	brcc	.+4      	; 0x1a9c <xTaskIncrementTick+0x194>
    1a98:	a0 93 bd 14 	sts	0x14BD, r26	; 0x8014bd <uxTopReadyPriority>
    1a9c:	9b e0       	ldi	r25, 0x0B	; 11
    1a9e:	9a 9f       	mul	r25, r26
    1aa0:	d0 01       	movw	r26, r0
    1aa2:	11 24       	eor	r1, r1
    1aa4:	a1 50       	subi	r26, 0x01	; 1
    1aa6:	bb 4e       	sbci	r27, 0xEB	; 235
    1aa8:	11 96       	adiw	r26, 0x01	; 1
    1aaa:	0d 90       	ld	r0, X+
    1aac:	bc 91       	ld	r27, X
    1aae:	a0 2d       	mov	r26, r0
    1ab0:	b7 83       	std	Z+7, r27	; 0x07
    1ab2:	a6 83       	std	Z+6, r26	; 0x06
    1ab4:	16 96       	adiw	r26, 0x06	; 6
    1ab6:	4d 91       	ld	r20, X+
    1ab8:	5c 91       	ld	r21, X
    1aba:	17 97       	sbiw	r26, 0x07	; 7
    1abc:	51 87       	std	Z+9, r21	; 0x09
    1abe:	40 87       	std	Z+8, r20	; 0x08
    1ac0:	16 96       	adiw	r26, 0x06	; 6
    1ac2:	cd 91       	ld	r28, X+
    1ac4:	dc 91       	ld	r29, X
    1ac6:	17 97       	sbiw	r26, 0x07	; 7
    1ac8:	3d 83       	std	Y+5, r19	; 0x05
    1aca:	2c 83       	std	Y+4, r18	; 0x04
    1acc:	17 96       	adiw	r26, 0x07	; 7
    1ace:	3c 93       	st	X, r19
    1ad0:	2e 93       	st	-X, r18
    1ad2:	16 97       	sbiw	r26, 0x06	; 6
    1ad4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ad6:	9a 9f       	mul	r25, r26
    1ad8:	d0 01       	movw	r26, r0
    1ada:	11 24       	eor	r1, r1
    1adc:	a1 50       	subi	r26, 0x01	; 1
    1ade:	bb 4e       	sbci	r27, 0xEB	; 235
    1ae0:	b5 87       	std	Z+13, r27	; 0x0d
    1ae2:	a4 87       	std	Z+12, r26	; 0x0c
    1ae4:	9c 91       	ld	r25, X
    1ae6:	9f 5f       	subi	r25, 0xFF	; 255
    1ae8:	9c 93       	st	X, r25
    1aea:	22 8d       	ldd	r18, Z+26	; 0x1a
    1aec:	e0 91 6d 15 	lds	r30, 0x156D	; 0x80156d <pxCurrentTCB>
    1af0:	f0 91 6e 15 	lds	r31, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    1af4:	92 8d       	ldd	r25, Z+26	; 0x1a
    1af6:	29 17       	cp	r18, r25
    1af8:	08 f0       	brcs	.+2      	; 0x1afc <xTaskIncrementTick+0x1f4>
    1afa:	4f cf       	rjmp	.-354    	; 0x199a <xTaskIncrementTick+0x92>
    1afc:	51 cf       	rjmp	.-350    	; 0x19a0 <xTaskIncrementTick+0x98>
    1afe:	e0 91 6d 15 	lds	r30, 0x156D	; 0x80156d <pxCurrentTCB>
    1b02:	f0 91 6e 15 	lds	r31, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    1b06:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1b08:	9b e0       	ldi	r25, 0x0B	; 11
    1b0a:	e9 9f       	mul	r30, r25
    1b0c:	f0 01       	movw	r30, r0
    1b0e:	11 24       	eor	r1, r1
    1b10:	e1 50       	subi	r30, 0x01	; 1
    1b12:	fb 4e       	sbci	r31, 0xEB	; 235
    1b14:	90 81       	ld	r25, Z
    1b16:	92 30       	cpi	r25, 0x02	; 2
    1b18:	08 f0       	brcs	.+2      	; 0x1b1c <xTaskIncrementTick+0x214>
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 91 b7 14 	lds	r25, 0x14B7	; 0x8014b7 <xYieldPending>
    1b20:	91 11       	cpse	r25, r1
    1b22:	16 c0       	rjmp	.+44     	; 0x1b50 <xTaskIncrementTick+0x248>
    1b24:	16 c0       	rjmp	.+44     	; 0x1b52 <xTaskIncrementTick+0x24a>
    1b26:	80 91 b8 14 	lds	r24, 0x14B8	; 0x8014b8 <xPendedTicks>
    1b2a:	90 91 b9 14 	lds	r25, 0x14B9	; 0x8014b9 <xPendedTicks+0x1>
    1b2e:	a0 91 ba 14 	lds	r26, 0x14BA	; 0x8014ba <xPendedTicks+0x2>
    1b32:	b0 91 bb 14 	lds	r27, 0x14BB	; 0x8014bb <xPendedTicks+0x3>
    1b36:	01 96       	adiw	r24, 0x01	; 1
    1b38:	a1 1d       	adc	r26, r1
    1b3a:	b1 1d       	adc	r27, r1
    1b3c:	80 93 b8 14 	sts	0x14B8, r24	; 0x8014b8 <xPendedTicks>
    1b40:	90 93 b9 14 	sts	0x14B9, r25	; 0x8014b9 <xPendedTicks+0x1>
    1b44:	a0 93 ba 14 	sts	0x14BA, r26	; 0x8014ba <xPendedTicks+0x2>
    1b48:	b0 93 bb 14 	sts	0x14BB, r27	; 0x8014bb <xPendedTicks+0x3>
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	01 c0       	rjmp	.+2      	; 0x1b52 <xTaskIncrementTick+0x24a>
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	ff 90       	pop	r15
    1b58:	ef 90       	pop	r14
    1b5a:	df 90       	pop	r13
    1b5c:	cf 90       	pop	r12
    1b5e:	08 95       	ret

00001b60 <xTaskResumeAll>:
    1b60:	cf 92       	push	r12
    1b62:	df 92       	push	r13
    1b64:	ef 92       	push	r14
    1b66:	ff 92       	push	r15
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	0f 92       	push	r0
    1b72:	80 91 ae 14 	lds	r24, 0x14AE	; 0x8014ae <uxSchedulerSuspended>
    1b76:	81 50       	subi	r24, 0x01	; 1
    1b78:	80 93 ae 14 	sts	0x14AE, r24	; 0x8014ae <uxSchedulerSuspended>
    1b7c:	80 91 ae 14 	lds	r24, 0x14AE	; 0x8014ae <uxSchedulerSuspended>
    1b80:	81 11       	cpse	r24, r1
    1b82:	be c0       	rjmp	.+380    	; 0x1d00 <xTaskResumeAll+0x1a0>
    1b84:	80 91 c2 14 	lds	r24, 0x14C2	; 0x8014c2 <uxCurrentNumberOfTasks>
    1b88:	81 11       	cpse	r24, r1
    1b8a:	88 c0       	rjmp	.+272    	; 0x1c9c <xTaskResumeAll+0x13c>
    1b8c:	bc c0       	rjmp	.+376    	; 0x1d06 <xTaskResumeAll+0x1a6>
    1b8e:	e0 91 e1 14 	lds	r30, 0x14E1	; 0x8014e1 <xPendingReadyList+0x7>
    1b92:	f0 91 e2 14 	lds	r31, 0x14E2	; 0x8014e2 <xPendingReadyList+0x8>
    1b96:	00 84       	ldd	r0, Z+8	; 0x08
    1b98:	f1 85       	ldd	r31, Z+9	; 0x09
    1b9a:	e0 2d       	mov	r30, r0
    1b9c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1b9e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1ba0:	c2 89       	ldd	r28, Z+18	; 0x12
    1ba2:	d3 89       	ldd	r29, Z+19	; 0x13
    1ba4:	84 89       	ldd	r24, Z+20	; 0x14
    1ba6:	95 89       	ldd	r25, Z+21	; 0x15
    1ba8:	9f 83       	std	Y+7, r25	; 0x07
    1baa:	8e 83       	std	Y+6, r24	; 0x06
    1bac:	c4 89       	ldd	r28, Z+20	; 0x14
    1bae:	d5 89       	ldd	r29, Z+21	; 0x15
    1bb0:	82 89       	ldd	r24, Z+18	; 0x12
    1bb2:	93 89       	ldd	r25, Z+19	; 0x13
    1bb4:	9d 83       	std	Y+5, r25	; 0x05
    1bb6:	8c 83       	std	Y+4, r24	; 0x04
    1bb8:	11 96       	adiw	r26, 0x01	; 1
    1bba:	2d 91       	ld	r18, X+
    1bbc:	3c 91       	ld	r19, X
    1bbe:	12 97       	sbiw	r26, 0x02	; 2
    1bc0:	cf 01       	movw	r24, r30
    1bc2:	0e 96       	adiw	r24, 0x0e	; 14
    1bc4:	28 17       	cp	r18, r24
    1bc6:	39 07       	cpc	r19, r25
    1bc8:	31 f4       	brne	.+12     	; 0x1bd6 <xTaskResumeAll+0x76>
    1bca:	84 89       	ldd	r24, Z+20	; 0x14
    1bcc:	95 89       	ldd	r25, Z+21	; 0x15
    1bce:	12 96       	adiw	r26, 0x02	; 2
    1bd0:	9c 93       	st	X, r25
    1bd2:	8e 93       	st	-X, r24
    1bd4:	11 97       	sbiw	r26, 0x01	; 1
    1bd6:	11 8e       	std	Z+25, r1	; 0x19
    1bd8:	10 8e       	std	Z+24, r1	; 0x18
    1bda:	8c 91       	ld	r24, X
    1bdc:	81 50       	subi	r24, 0x01	; 1
    1bde:	8c 93       	st	X, r24
    1be0:	a4 85       	ldd	r26, Z+12	; 0x0c
    1be2:	b5 85       	ldd	r27, Z+13	; 0x0d
    1be4:	c6 81       	ldd	r28, Z+6	; 0x06
    1be6:	d7 81       	ldd	r29, Z+7	; 0x07
    1be8:	80 85       	ldd	r24, Z+8	; 0x08
    1bea:	91 85       	ldd	r25, Z+9	; 0x09
    1bec:	9f 83       	std	Y+7, r25	; 0x07
    1bee:	8e 83       	std	Y+6, r24	; 0x06
    1bf0:	c0 85       	ldd	r28, Z+8	; 0x08
    1bf2:	d1 85       	ldd	r29, Z+9	; 0x09
    1bf4:	86 81       	ldd	r24, Z+6	; 0x06
    1bf6:	97 81       	ldd	r25, Z+7	; 0x07
    1bf8:	9d 83       	std	Y+5, r25	; 0x05
    1bfa:	8c 83       	std	Y+4, r24	; 0x04
    1bfc:	11 96       	adiw	r26, 0x01	; 1
    1bfe:	8d 91       	ld	r24, X+
    1c00:	9c 91       	ld	r25, X
    1c02:	12 97       	sbiw	r26, 0x02	; 2
    1c04:	9f 01       	movw	r18, r30
    1c06:	2e 5f       	subi	r18, 0xFE	; 254
    1c08:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0a:	82 17       	cp	r24, r18
    1c0c:	93 07       	cpc	r25, r19
    1c0e:	31 f4       	brne	.+12     	; 0x1c1c <xTaskResumeAll+0xbc>
    1c10:	80 85       	ldd	r24, Z+8	; 0x08
    1c12:	91 85       	ldd	r25, Z+9	; 0x09
    1c14:	12 96       	adiw	r26, 0x02	; 2
    1c16:	9c 93       	st	X, r25
    1c18:	8e 93       	st	-X, r24
    1c1a:	11 97       	sbiw	r26, 0x01	; 1
    1c1c:	15 86       	std	Z+13, r1	; 0x0d
    1c1e:	14 86       	std	Z+12, r1	; 0x0c
    1c20:	8c 91       	ld	r24, X
    1c22:	81 50       	subi	r24, 0x01	; 1
    1c24:	8c 93       	st	X, r24
    1c26:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c28:	80 91 bd 14 	lds	r24, 0x14BD	; 0x8014bd <uxTopReadyPriority>
    1c2c:	8a 17       	cp	r24, r26
    1c2e:	10 f4       	brcc	.+4      	; 0x1c34 <xTaskResumeAll+0xd4>
    1c30:	a0 93 bd 14 	sts	0x14BD, r26	; 0x8014bd <uxTopReadyPriority>
    1c34:	8b e0       	ldi	r24, 0x0B	; 11
    1c36:	8a 9f       	mul	r24, r26
    1c38:	d0 01       	movw	r26, r0
    1c3a:	11 24       	eor	r1, r1
    1c3c:	a1 50       	subi	r26, 0x01	; 1
    1c3e:	bb 4e       	sbci	r27, 0xEB	; 235
    1c40:	11 96       	adiw	r26, 0x01	; 1
    1c42:	0d 90       	ld	r0, X+
    1c44:	bc 91       	ld	r27, X
    1c46:	a0 2d       	mov	r26, r0
    1c48:	b7 83       	std	Z+7, r27	; 0x07
    1c4a:	a6 83       	std	Z+6, r26	; 0x06
    1c4c:	16 96       	adiw	r26, 0x06	; 6
    1c4e:	4d 91       	ld	r20, X+
    1c50:	5c 91       	ld	r21, X
    1c52:	17 97       	sbiw	r26, 0x07	; 7
    1c54:	51 87       	std	Z+9, r21	; 0x09
    1c56:	40 87       	std	Z+8, r20	; 0x08
    1c58:	16 96       	adiw	r26, 0x06	; 6
    1c5a:	cd 91       	ld	r28, X+
    1c5c:	dc 91       	ld	r29, X
    1c5e:	17 97       	sbiw	r26, 0x07	; 7
    1c60:	3d 83       	std	Y+5, r19	; 0x05
    1c62:	2c 83       	std	Y+4, r18	; 0x04
    1c64:	17 96       	adiw	r26, 0x07	; 7
    1c66:	3c 93       	st	X, r19
    1c68:	2e 93       	st	-X, r18
    1c6a:	16 97       	sbiw	r26, 0x06	; 6
    1c6c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c6e:	8a 9f       	mul	r24, r26
    1c70:	d0 01       	movw	r26, r0
    1c72:	11 24       	eor	r1, r1
    1c74:	a1 50       	subi	r26, 0x01	; 1
    1c76:	bb 4e       	sbci	r27, 0xEB	; 235
    1c78:	b5 87       	std	Z+13, r27	; 0x0d
    1c7a:	a4 87       	std	Z+12, r26	; 0x0c
    1c7c:	8c 91       	ld	r24, X
    1c7e:	8f 5f       	subi	r24, 0xFF	; 255
    1c80:	8c 93       	st	X, r24
    1c82:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c84:	a0 91 6d 15 	lds	r26, 0x156D	; 0x80156d <pxCurrentTCB>
    1c88:	b0 91 6e 15 	lds	r27, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    1c8c:	5a 96       	adiw	r26, 0x1a	; 26
    1c8e:	8c 91       	ld	r24, X
    1c90:	98 17       	cp	r25, r24
    1c92:	30 f0       	brcs	.+12     	; 0x1ca0 <xTaskResumeAll+0x140>
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	80 93 b7 14 	sts	0x14B7, r24	; 0x8014b7 <xYieldPending>
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <xTaskResumeAll+0x140>
    1c9c:	e0 e0       	ldi	r30, 0x00	; 0
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 91 da 14 	lds	r24, 0x14DA	; 0x8014da <xPendingReadyList>
    1ca4:	81 11       	cpse	r24, r1
    1ca6:	73 cf       	rjmp	.-282    	; 0x1b8e <xTaskResumeAll+0x2e>
    1ca8:	ef 2b       	or	r30, r31
    1caa:	09 f0       	breq	.+2      	; 0x1cae <xTaskResumeAll+0x14e>
    1cac:	83 db       	rcall	.-2298   	; 0x13b4 <prvResetNextTaskUnblockTime>
    1cae:	c0 90 b8 14 	lds	r12, 0x14B8	; 0x8014b8 <xPendedTicks>
    1cb2:	d0 90 b9 14 	lds	r13, 0x14B9	; 0x8014b9 <xPendedTicks+0x1>
    1cb6:	e0 90 ba 14 	lds	r14, 0x14BA	; 0x8014ba <xPendedTicks+0x2>
    1cba:	f0 90 bb 14 	lds	r15, 0x14BB	; 0x8014bb <xPendedTicks+0x3>
    1cbe:	c1 14       	cp	r12, r1
    1cc0:	d1 04       	cpc	r13, r1
    1cc2:	e1 04       	cpc	r14, r1
    1cc4:	f1 04       	cpc	r15, r1
    1cc6:	a1 f0       	breq	.+40     	; 0x1cf0 <xTaskResumeAll+0x190>
    1cc8:	1f de       	rcall	.-962    	; 0x1908 <xTaskIncrementTick>
    1cca:	88 23       	and	r24, r24
    1ccc:	19 f0       	breq	.+6      	; 0x1cd4 <xTaskResumeAll+0x174>
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	80 93 b7 14 	sts	0x14B7, r24	; 0x8014b7 <xYieldPending>
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	c8 1a       	sub	r12, r24
    1cd8:	d1 08       	sbc	r13, r1
    1cda:	e1 08       	sbc	r14, r1
    1cdc:	f1 08       	sbc	r15, r1
    1cde:	a1 f7       	brne	.-24     	; 0x1cc8 <xTaskResumeAll+0x168>
    1ce0:	10 92 b8 14 	sts	0x14B8, r1	; 0x8014b8 <xPendedTicks>
    1ce4:	10 92 b9 14 	sts	0x14B9, r1	; 0x8014b9 <xPendedTicks+0x1>
    1ce8:	10 92 ba 14 	sts	0x14BA, r1	; 0x8014ba <xPendedTicks+0x2>
    1cec:	10 92 bb 14 	sts	0x14BB, r1	; 0x8014bb <xPendedTicks+0x3>
    1cf0:	80 91 b7 14 	lds	r24, 0x14B7	; 0x8014b7 <xYieldPending>
    1cf4:	88 23       	and	r24, r24
    1cf6:	31 f0       	breq	.+12     	; 0x1d04 <xTaskResumeAll+0x1a4>
    1cf8:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	03 c0       	rjmp	.+6      	; 0x1d06 <xTaskResumeAll+0x1a6>
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	01 c0       	rjmp	.+2      	; 0x1d06 <xTaskResumeAll+0x1a6>
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	0f 90       	pop	r0
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	df 91       	pop	r29
    1d0c:	cf 91       	pop	r28
    1d0e:	ff 90       	pop	r15
    1d10:	ef 90       	pop	r14
    1d12:	df 90       	pop	r13
    1d14:	cf 90       	pop	r12
    1d16:	08 95       	ret

00001d18 <xTaskDelayUntil>:
    1d18:	8f 92       	push	r8
    1d1a:	9f 92       	push	r9
    1d1c:	af 92       	push	r10
    1d1e:	bf 92       	push	r11
    1d20:	cf 92       	push	r12
    1d22:	df 92       	push	r13
    1d24:	ef 92       	push	r14
    1d26:	ff 92       	push	r15
    1d28:	1f 93       	push	r17
    1d2a:	cf 93       	push	r28
    1d2c:	df 93       	push	r29
    1d2e:	ec 01       	movw	r28, r24
    1d30:	6a 01       	movw	r12, r20
    1d32:	7b 01       	movw	r14, r22
    1d34:	d5 dd       	rcall	.-1110   	; 0x18e0 <vTaskSuspendAll>
    1d36:	80 90 be 14 	lds	r8, 0x14BE	; 0x8014be <xTickCount>
    1d3a:	90 90 bf 14 	lds	r9, 0x14BF	; 0x8014bf <xTickCount+0x1>
    1d3e:	a0 90 c0 14 	lds	r10, 0x14C0	; 0x8014c0 <xTickCount+0x2>
    1d42:	b0 90 c1 14 	lds	r11, 0x14C1	; 0x8014c1 <xTickCount+0x3>
    1d46:	88 81       	ld	r24, Y
    1d48:	99 81       	ldd	r25, Y+1	; 0x01
    1d4a:	aa 81       	ldd	r26, Y+2	; 0x02
    1d4c:	bb 81       	ldd	r27, Y+3	; 0x03
    1d4e:	ac 01       	movw	r20, r24
    1d50:	bd 01       	movw	r22, r26
    1d52:	4c 0d       	add	r20, r12
    1d54:	5d 1d       	adc	r21, r13
    1d56:	6e 1d       	adc	r22, r14
    1d58:	7f 1d       	adc	r23, r15
    1d5a:	88 16       	cp	r8, r24
    1d5c:	99 06       	cpc	r9, r25
    1d5e:	aa 06       	cpc	r10, r26
    1d60:	bb 06       	cpc	r11, r27
    1d62:	60 f4       	brcc	.+24     	; 0x1d7c <xTaskDelayUntil+0x64>
    1d64:	48 17       	cp	r20, r24
    1d66:	59 07       	cpc	r21, r25
    1d68:	6a 07       	cpc	r22, r26
    1d6a:	7b 07       	cpc	r23, r27
    1d6c:	98 f4       	brcc	.+38     	; 0x1d94 <xTaskDelayUntil+0x7c>
    1d6e:	84 16       	cp	r8, r20
    1d70:	95 06       	cpc	r9, r21
    1d72:	a6 06       	cpc	r10, r22
    1d74:	b7 06       	cpc	r11, r23
    1d76:	80 f0       	brcs	.+32     	; 0x1d98 <xTaskDelayUntil+0x80>
    1d78:	10 e0       	ldi	r17, 0x00	; 0
    1d7a:	13 c0       	rjmp	.+38     	; 0x1da2 <xTaskDelayUntil+0x8a>
    1d7c:	48 17       	cp	r20, r24
    1d7e:	59 07       	cpc	r21, r25
    1d80:	6a 07       	cpc	r22, r26
    1d82:	7b 07       	cpc	r23, r27
    1d84:	58 f0       	brcs	.+22     	; 0x1d9c <xTaskDelayUntil+0x84>
    1d86:	84 16       	cp	r8, r20
    1d88:	95 06       	cpc	r9, r21
    1d8a:	a6 06       	cpc	r10, r22
    1d8c:	b7 06       	cpc	r11, r23
    1d8e:	40 f0       	brcs	.+16     	; 0x1da0 <xTaskDelayUntil+0x88>
    1d90:	10 e0       	ldi	r17, 0x00	; 0
    1d92:	07 c0       	rjmp	.+14     	; 0x1da2 <xTaskDelayUntil+0x8a>
    1d94:	10 e0       	ldi	r17, 0x00	; 0
    1d96:	05 c0       	rjmp	.+10     	; 0x1da2 <xTaskDelayUntil+0x8a>
    1d98:	11 e0       	ldi	r17, 0x01	; 1
    1d9a:	03 c0       	rjmp	.+6      	; 0x1da2 <xTaskDelayUntil+0x8a>
    1d9c:	11 e0       	ldi	r17, 0x01	; 1
    1d9e:	01 c0       	rjmp	.+2      	; 0x1da2 <xTaskDelayUntil+0x8a>
    1da0:	11 e0       	ldi	r17, 0x01	; 1
    1da2:	48 83       	st	Y, r20
    1da4:	59 83       	std	Y+1, r21	; 0x01
    1da6:	6a 83       	std	Y+2, r22	; 0x02
    1da8:	7b 83       	std	Y+3, r23	; 0x03
    1daa:	11 23       	and	r17, r17
    1dac:	41 f0       	breq	.+16     	; 0x1dbe <xTaskDelayUntil+0xa6>
    1dae:	cb 01       	movw	r24, r22
    1db0:	ba 01       	movw	r22, r20
    1db2:	68 19       	sub	r22, r8
    1db4:	79 09       	sbc	r23, r9
    1db6:	8a 09       	sbc	r24, r10
    1db8:	9b 09       	sbc	r25, r11
    1dba:	40 e0       	ldi	r20, 0x00	; 0
    1dbc:	6b dc       	rcall	.-1834   	; 0x1694 <prvAddCurrentTaskToDelayedList>
    1dbe:	d0 de       	rcall	.-608    	; 0x1b60 <xTaskResumeAll>
    1dc0:	81 11       	cpse	r24, r1
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <xTaskDelayUntil+0xb0>
    1dc4:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    1dc8:	81 2f       	mov	r24, r17
    1dca:	df 91       	pop	r29
    1dcc:	cf 91       	pop	r28
    1dce:	1f 91       	pop	r17
    1dd0:	ff 90       	pop	r15
    1dd2:	ef 90       	pop	r14
    1dd4:	df 90       	pop	r13
    1dd6:	cf 90       	pop	r12
    1dd8:	bf 90       	pop	r11
    1dda:	af 90       	pop	r10
    1ddc:	9f 90       	pop	r9
    1dde:	8f 90       	pop	r8
    1de0:	08 95       	ret

00001de2 <vTaskDelay>:
    1de2:	cf 92       	push	r12
    1de4:	df 92       	push	r13
    1de6:	ef 92       	push	r14
    1de8:	ff 92       	push	r15
    1dea:	6b 01       	movw	r12, r22
    1dec:	7c 01       	movw	r14, r24
    1dee:	67 2b       	or	r22, r23
    1df0:	68 2b       	or	r22, r24
    1df2:	69 2b       	or	r22, r25
    1df4:	39 f0       	breq	.+14     	; 0x1e04 <vTaskDelay+0x22>
    1df6:	74 dd       	rcall	.-1304   	; 0x18e0 <vTaskSuspendAll>
    1df8:	40 e0       	ldi	r20, 0x00	; 0
    1dfa:	c7 01       	movw	r24, r14
    1dfc:	b6 01       	movw	r22, r12
    1dfe:	4a dc       	rcall	.-1900   	; 0x1694 <prvAddCurrentTaskToDelayedList>
    1e00:	af de       	rcall	.-674    	; 0x1b60 <xTaskResumeAll>
    1e02:	01 c0       	rjmp	.+2      	; 0x1e06 <vTaskDelay+0x24>
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	81 11       	cpse	r24, r1
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <vTaskDelay+0x2c>
    1e0a:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    1e0e:	ff 90       	pop	r15
    1e10:	ef 90       	pop	r14
    1e12:	df 90       	pop	r13
    1e14:	cf 90       	pop	r12
    1e16:	08 95       	ret

00001e18 <vTaskSwitchContext>:
    1e18:	80 91 ae 14 	lds	r24, 0x14AE	; 0x8014ae <uxSchedulerSuspended>
    1e1c:	88 23       	and	r24, r24
    1e1e:	21 f0       	breq	.+8      	; 0x1e28 <vTaskSwitchContext+0x10>
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	80 93 b7 14 	sts	0x14B7, r24	; 0x8014b7 <xYieldPending>
    1e26:	08 95       	ret
    1e28:	10 92 b7 14 	sts	0x14B7, r1	; 0x8014b7 <xYieldPending>
    1e2c:	e0 91 6d 15 	lds	r30, 0x156D	; 0x80156d <pxCurrentTCB>
    1e30:	f0 91 6e 15 	lds	r31, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    1e34:	20 81       	ld	r18, Z
    1e36:	31 81       	ldd	r19, Z+1	; 0x01
    1e38:	e0 91 6d 15 	lds	r30, 0x156D	; 0x80156d <pxCurrentTCB>
    1e3c:	f0 91 6e 15 	lds	r31, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    1e40:	83 8d       	ldd	r24, Z+27	; 0x1b
    1e42:	94 8d       	ldd	r25, Z+28	; 0x1c
    1e44:	82 17       	cp	r24, r18
    1e46:	93 07       	cpc	r25, r19
    1e48:	60 f0       	brcs	.+24     	; 0x1e62 <vTaskSwitchContext+0x4a>
    1e4a:	60 91 6d 15 	lds	r22, 0x156D	; 0x80156d <pxCurrentTCB>
    1e4e:	70 91 6e 15 	lds	r23, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    1e52:	63 5e       	subi	r22, 0xE3	; 227
    1e54:	7f 4f       	sbci	r23, 0xFF	; 255
    1e56:	80 91 6d 15 	lds	r24, 0x156D	; 0x80156d <pxCurrentTCB>
    1e5a:	90 91 6e 15 	lds	r25, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    1e5e:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <vApplicationStackOverflowHook>
    1e62:	80 91 bd 14 	lds	r24, 0x14BD	; 0x8014bd <uxTopReadyPriority>
    1e66:	01 c0       	rjmp	.+2      	; 0x1e6a <vTaskSwitchContext+0x52>
    1e68:	81 50       	subi	r24, 0x01	; 1
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	9b e0       	ldi	r25, 0x0B	; 11
    1e70:	92 9f       	mul	r25, r18
    1e72:	f0 01       	movw	r30, r0
    1e74:	93 9f       	mul	r25, r19
    1e76:	f0 0d       	add	r31, r0
    1e78:	11 24       	eor	r1, r1
    1e7a:	e1 50       	subi	r30, 0x01	; 1
    1e7c:	fb 4e       	sbci	r31, 0xEB	; 235
    1e7e:	90 81       	ld	r25, Z
    1e80:	99 23       	and	r25, r25
    1e82:	91 f3       	breq	.-28     	; 0x1e68 <vTaskSwitchContext+0x50>
    1e84:	9b e0       	ldi	r25, 0x0B	; 11
    1e86:	92 9f       	mul	r25, r18
    1e88:	a0 01       	movw	r20, r0
    1e8a:	93 9f       	mul	r25, r19
    1e8c:	50 0d       	add	r21, r0
    1e8e:	11 24       	eor	r1, r1
    1e90:	df 01       	movw	r26, r30
    1e92:	01 80       	ldd	r0, Z+1	; 0x01
    1e94:	f2 81       	ldd	r31, Z+2	; 0x02
    1e96:	e0 2d       	mov	r30, r0
    1e98:	04 80       	ldd	r0, Z+4	; 0x04
    1e9a:	f5 81       	ldd	r31, Z+5	; 0x05
    1e9c:	e0 2d       	mov	r30, r0
    1e9e:	12 96       	adiw	r26, 0x02	; 2
    1ea0:	fc 93       	st	X, r31
    1ea2:	ee 93       	st	-X, r30
    1ea4:	11 97       	sbiw	r26, 0x01	; 1
    1ea6:	4e 5f       	subi	r20, 0xFE	; 254
    1ea8:	5a 4e       	sbci	r21, 0xEA	; 234
    1eaa:	e4 17       	cp	r30, r20
    1eac:	f5 07       	cpc	r31, r21
    1eae:	29 f4       	brne	.+10     	; 0x1eba <vTaskSwitchContext+0xa2>
    1eb0:	44 81       	ldd	r20, Z+4	; 0x04
    1eb2:	55 81       	ldd	r21, Z+5	; 0x05
    1eb4:	fd 01       	movw	r30, r26
    1eb6:	52 83       	std	Z+2, r21	; 0x02
    1eb8:	41 83       	std	Z+1, r20	; 0x01
    1eba:	9b e0       	ldi	r25, 0x0B	; 11
    1ebc:	92 9f       	mul	r25, r18
    1ebe:	f0 01       	movw	r30, r0
    1ec0:	93 9f       	mul	r25, r19
    1ec2:	f0 0d       	add	r31, r0
    1ec4:	11 24       	eor	r1, r1
    1ec6:	e1 50       	subi	r30, 0x01	; 1
    1ec8:	fb 4e       	sbci	r31, 0xEB	; 235
    1eca:	01 80       	ldd	r0, Z+1	; 0x01
    1ecc:	f2 81       	ldd	r31, Z+2	; 0x02
    1ece:	e0 2d       	mov	r30, r0
    1ed0:	20 85       	ldd	r18, Z+8	; 0x08
    1ed2:	31 85       	ldd	r19, Z+9	; 0x09
    1ed4:	30 93 6e 15 	sts	0x156E, r19	; 0x80156e <pxCurrentTCB+0x1>
    1ed8:	20 93 6d 15 	sts	0x156D, r18	; 0x80156d <pxCurrentTCB>
    1edc:	80 93 bd 14 	sts	0x14BD, r24	; 0x8014bd <uxTopReadyPriority>
    1ee0:	08 95       	ret

00001ee2 <vTaskPlaceOnEventList>:
    1ee2:	cf 92       	push	r12
    1ee4:	df 92       	push	r13
    1ee6:	ef 92       	push	r14
    1ee8:	ff 92       	push	r15
    1eea:	6a 01       	movw	r12, r20
    1eec:	7b 01       	movw	r14, r22
    1eee:	60 91 6d 15 	lds	r22, 0x156D	; 0x80156d <pxCurrentTCB>
    1ef2:	70 91 6e 15 	lds	r23, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    1ef6:	62 5f       	subi	r22, 0xF2	; 242
    1ef8:	7f 4f       	sbci	r23, 0xFF	; 255
    1efa:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    1efe:	41 e0       	ldi	r20, 0x01	; 1
    1f00:	c7 01       	movw	r24, r14
    1f02:	b6 01       	movw	r22, r12
    1f04:	c7 db       	rcall	.-2162   	; 0x1694 <prvAddCurrentTaskToDelayedList>
    1f06:	ff 90       	pop	r15
    1f08:	ef 90       	pop	r14
    1f0a:	df 90       	pop	r13
    1f0c:	cf 90       	pop	r12
    1f0e:	08 95       	ret

00001f10 <vTaskPlaceOnEventListRestricted>:
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	fc 01       	movw	r30, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	ba 01       	movw	r22, r20
    1f1a:	a1 81       	ldd	r26, Z+1	; 0x01
    1f1c:	b2 81       	ldd	r27, Z+2	; 0x02
    1f1e:	c0 91 6d 15 	lds	r28, 0x156D	; 0x80156d <pxCurrentTCB>
    1f22:	d0 91 6e 15 	lds	r29, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    1f26:	bb 8b       	std	Y+19, r27	; 0x13
    1f28:	aa 8b       	std	Y+18, r26	; 0x12
    1f2a:	c0 91 6d 15 	lds	r28, 0x156D	; 0x80156d <pxCurrentTCB>
    1f2e:	d0 91 6e 15 	lds	r29, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    1f32:	16 96       	adiw	r26, 0x06	; 6
    1f34:	4d 91       	ld	r20, X+
    1f36:	5c 91       	ld	r21, X
    1f38:	17 97       	sbiw	r26, 0x07	; 7
    1f3a:	5d 8b       	std	Y+21, r21	; 0x15
    1f3c:	4c 8b       	std	Y+20, r20	; 0x14
    1f3e:	16 96       	adiw	r26, 0x06	; 6
    1f40:	cd 91       	ld	r28, X+
    1f42:	dc 91       	ld	r29, X
    1f44:	17 97       	sbiw	r26, 0x07	; 7
    1f46:	40 91 6d 15 	lds	r20, 0x156D	; 0x80156d <pxCurrentTCB>
    1f4a:	50 91 6e 15 	lds	r21, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    1f4e:	42 5f       	subi	r20, 0xF2	; 242
    1f50:	5f 4f       	sbci	r21, 0xFF	; 255
    1f52:	5d 83       	std	Y+5, r21	; 0x05
    1f54:	4c 83       	std	Y+4, r20	; 0x04
    1f56:	40 91 6d 15 	lds	r20, 0x156D	; 0x80156d <pxCurrentTCB>
    1f5a:	50 91 6e 15 	lds	r21, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    1f5e:	42 5f       	subi	r20, 0xF2	; 242
    1f60:	5f 4f       	sbci	r21, 0xFF	; 255
    1f62:	17 96       	adiw	r26, 0x07	; 7
    1f64:	5c 93       	st	X, r21
    1f66:	4e 93       	st	-X, r20
    1f68:	16 97       	sbiw	r26, 0x06	; 6
    1f6a:	a0 91 6d 15 	lds	r26, 0x156D	; 0x80156d <pxCurrentTCB>
    1f6e:	b0 91 6e 15 	lds	r27, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    1f72:	59 96       	adiw	r26, 0x19	; 25
    1f74:	fc 93       	st	X, r31
    1f76:	ee 93       	st	-X, r30
    1f78:	58 97       	sbiw	r26, 0x18	; 24
    1f7a:	30 81       	ld	r19, Z
    1f7c:	3f 5f       	subi	r19, 0xFF	; 255
    1f7e:	30 83       	st	Z, r19
    1f80:	22 23       	and	r18, r18
    1f82:	19 f0       	breq	.+6      	; 0x1f8a <vTaskPlaceOnEventListRestricted+0x7a>
    1f84:	6f ef       	ldi	r22, 0xFF	; 255
    1f86:	7f ef       	ldi	r23, 0xFF	; 255
    1f88:	cb 01       	movw	r24, r22
    1f8a:	42 2f       	mov	r20, r18
    1f8c:	83 db       	rcall	.-2298   	; 0x1694 <prvAddCurrentTaskToDelayedList>
    1f8e:	df 91       	pop	r29
    1f90:	cf 91       	pop	r28
    1f92:	08 95       	ret

00001f94 <xTaskRemoveFromEventList>:
    1f94:	cf 93       	push	r28
    1f96:	df 93       	push	r29
    1f98:	dc 01       	movw	r26, r24
    1f9a:	17 96       	adiw	r26, 0x07	; 7
    1f9c:	ed 91       	ld	r30, X+
    1f9e:	fc 91       	ld	r31, X
    1fa0:	18 97       	sbiw	r26, 0x08	; 8
    1fa2:	00 84       	ldd	r0, Z+8	; 0x08
    1fa4:	f1 85       	ldd	r31, Z+9	; 0x09
    1fa6:	e0 2d       	mov	r30, r0
    1fa8:	a0 8d       	ldd	r26, Z+24	; 0x18
    1faa:	b1 8d       	ldd	r27, Z+25	; 0x19
    1fac:	c2 89       	ldd	r28, Z+18	; 0x12
    1fae:	d3 89       	ldd	r29, Z+19	; 0x13
    1fb0:	84 89       	ldd	r24, Z+20	; 0x14
    1fb2:	95 89       	ldd	r25, Z+21	; 0x15
    1fb4:	9f 83       	std	Y+7, r25	; 0x07
    1fb6:	8e 83       	std	Y+6, r24	; 0x06
    1fb8:	c4 89       	ldd	r28, Z+20	; 0x14
    1fba:	d5 89       	ldd	r29, Z+21	; 0x15
    1fbc:	82 89       	ldd	r24, Z+18	; 0x12
    1fbe:	93 89       	ldd	r25, Z+19	; 0x13
    1fc0:	9d 83       	std	Y+5, r25	; 0x05
    1fc2:	8c 83       	std	Y+4, r24	; 0x04
    1fc4:	11 96       	adiw	r26, 0x01	; 1
    1fc6:	8d 91       	ld	r24, X+
    1fc8:	9c 91       	ld	r25, X
    1fca:	12 97       	sbiw	r26, 0x02	; 2
    1fcc:	9f 01       	movw	r18, r30
    1fce:	22 5f       	subi	r18, 0xF2	; 242
    1fd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd2:	82 17       	cp	r24, r18
    1fd4:	93 07       	cpc	r25, r19
    1fd6:	31 f4       	brne	.+12     	; 0x1fe4 <xTaskRemoveFromEventList+0x50>
    1fd8:	84 89       	ldd	r24, Z+20	; 0x14
    1fda:	95 89       	ldd	r25, Z+21	; 0x15
    1fdc:	12 96       	adiw	r26, 0x02	; 2
    1fde:	9c 93       	st	X, r25
    1fe0:	8e 93       	st	-X, r24
    1fe2:	11 97       	sbiw	r26, 0x01	; 1
    1fe4:	11 8e       	std	Z+25, r1	; 0x19
    1fe6:	10 8e       	std	Z+24, r1	; 0x18
    1fe8:	8c 91       	ld	r24, X
    1fea:	81 50       	subi	r24, 0x01	; 1
    1fec:	8c 93       	st	X, r24
    1fee:	80 91 ae 14 	lds	r24, 0x14AE	; 0x8014ae <uxSchedulerSuspended>
    1ff2:	81 11       	cpse	r24, r1
    1ff4:	52 c0       	rjmp	.+164    	; 0x209a <__DATA_REGION_LENGTH__+0x9a>
    1ff6:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ff8:	b5 85       	ldd	r27, Z+13	; 0x0d
    1ffa:	c6 81       	ldd	r28, Z+6	; 0x06
    1ffc:	d7 81       	ldd	r29, Z+7	; 0x07
    1ffe:	80 85       	ldd	r24, Z+8	; 0x08
    2000:	91 85       	ldd	r25, Z+9	; 0x09
    2002:	9f 83       	std	Y+7, r25	; 0x07
    2004:	8e 83       	std	Y+6, r24	; 0x06
    2006:	c0 85       	ldd	r28, Z+8	; 0x08
    2008:	d1 85       	ldd	r29, Z+9	; 0x09
    200a:	86 81       	ldd	r24, Z+6	; 0x06
    200c:	97 81       	ldd	r25, Z+7	; 0x07
    200e:	9d 83       	std	Y+5, r25	; 0x05
    2010:	8c 83       	std	Y+4, r24	; 0x04
    2012:	11 96       	adiw	r26, 0x01	; 1
    2014:	8d 91       	ld	r24, X+
    2016:	9c 91       	ld	r25, X
    2018:	12 97       	sbiw	r26, 0x02	; 2
    201a:	9f 01       	movw	r18, r30
    201c:	2e 5f       	subi	r18, 0xFE	; 254
    201e:	3f 4f       	sbci	r19, 0xFF	; 255
    2020:	82 17       	cp	r24, r18
    2022:	93 07       	cpc	r25, r19
    2024:	31 f4       	brne	.+12     	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
    2026:	80 85       	ldd	r24, Z+8	; 0x08
    2028:	91 85       	ldd	r25, Z+9	; 0x09
    202a:	12 96       	adiw	r26, 0x02	; 2
    202c:	9c 93       	st	X, r25
    202e:	8e 93       	st	-X, r24
    2030:	11 97       	sbiw	r26, 0x01	; 1
    2032:	15 86       	std	Z+13, r1	; 0x0d
    2034:	14 86       	std	Z+12, r1	; 0x0c
    2036:	8c 91       	ld	r24, X
    2038:	81 50       	subi	r24, 0x01	; 1
    203a:	8c 93       	st	X, r24
    203c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    203e:	80 91 bd 14 	lds	r24, 0x14BD	; 0x8014bd <uxTopReadyPriority>
    2042:	8a 17       	cp	r24, r26
    2044:	10 f4       	brcc	.+4      	; 0x204a <__DATA_REGION_LENGTH__+0x4a>
    2046:	a0 93 bd 14 	sts	0x14BD, r26	; 0x8014bd <uxTopReadyPriority>
    204a:	8b e0       	ldi	r24, 0x0B	; 11
    204c:	8a 9f       	mul	r24, r26
    204e:	d0 01       	movw	r26, r0
    2050:	11 24       	eor	r1, r1
    2052:	a1 50       	subi	r26, 0x01	; 1
    2054:	bb 4e       	sbci	r27, 0xEB	; 235
    2056:	11 96       	adiw	r26, 0x01	; 1
    2058:	0d 90       	ld	r0, X+
    205a:	bc 91       	ld	r27, X
    205c:	a0 2d       	mov	r26, r0
    205e:	b7 83       	std	Z+7, r27	; 0x07
    2060:	a6 83       	std	Z+6, r26	; 0x06
    2062:	16 96       	adiw	r26, 0x06	; 6
    2064:	4d 91       	ld	r20, X+
    2066:	5c 91       	ld	r21, X
    2068:	17 97       	sbiw	r26, 0x07	; 7
    206a:	51 87       	std	Z+9, r21	; 0x09
    206c:	40 87       	std	Z+8, r20	; 0x08
    206e:	16 96       	adiw	r26, 0x06	; 6
    2070:	cd 91       	ld	r28, X+
    2072:	dc 91       	ld	r29, X
    2074:	17 97       	sbiw	r26, 0x07	; 7
    2076:	3d 83       	std	Y+5, r19	; 0x05
    2078:	2c 83       	std	Y+4, r18	; 0x04
    207a:	17 96       	adiw	r26, 0x07	; 7
    207c:	3c 93       	st	X, r19
    207e:	2e 93       	st	-X, r18
    2080:	16 97       	sbiw	r26, 0x06	; 6
    2082:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2084:	8a 9f       	mul	r24, r26
    2086:	d0 01       	movw	r26, r0
    2088:	11 24       	eor	r1, r1
    208a:	a1 50       	subi	r26, 0x01	; 1
    208c:	bb 4e       	sbci	r27, 0xEB	; 235
    208e:	b5 87       	std	Z+13, r27	; 0x0d
    2090:	a4 87       	std	Z+12, r26	; 0x0c
    2092:	8c 91       	ld	r24, X
    2094:	8f 5f       	subi	r24, 0xFF	; 255
    2096:	8c 93       	st	X, r24
    2098:	1c c0       	rjmp	.+56     	; 0x20d2 <__DATA_REGION_LENGTH__+0xd2>
    209a:	4a ed       	ldi	r20, 0xDA	; 218
    209c:	54 e1       	ldi	r21, 0x14	; 20
    209e:	da 01       	movw	r26, r20
    20a0:	11 96       	adiw	r26, 0x01	; 1
    20a2:	cd 91       	ld	r28, X+
    20a4:	dc 91       	ld	r29, X
    20a6:	12 97       	sbiw	r26, 0x02	; 2
    20a8:	d3 8b       	std	Z+19, r29	; 0x13
    20aa:	c2 8b       	std	Z+18, r28	; 0x12
    20ac:	8e 81       	ldd	r24, Y+6	; 0x06
    20ae:	9f 81       	ldd	r25, Y+7	; 0x07
    20b0:	95 8b       	std	Z+21, r25	; 0x15
    20b2:	84 8b       	std	Z+20, r24	; 0x14
    20b4:	8e 81       	ldd	r24, Y+6	; 0x06
    20b6:	9f 81       	ldd	r25, Y+7	; 0x07
    20b8:	dc 01       	movw	r26, r24
    20ba:	15 96       	adiw	r26, 0x05	; 5
    20bc:	3c 93       	st	X, r19
    20be:	2e 93       	st	-X, r18
    20c0:	14 97       	sbiw	r26, 0x04	; 4
    20c2:	3f 83       	std	Y+7, r19	; 0x07
    20c4:	2e 83       	std	Y+6, r18	; 0x06
    20c6:	51 8f       	std	Z+25, r21	; 0x19
    20c8:	40 8f       	std	Z+24, r20	; 0x18
    20ca:	da 01       	movw	r26, r20
    20cc:	8c 91       	ld	r24, X
    20ce:	8f 5f       	subi	r24, 0xFF	; 255
    20d0:	8c 93       	st	X, r24
    20d2:	92 8d       	ldd	r25, Z+26	; 0x1a
    20d4:	e0 91 6d 15 	lds	r30, 0x156D	; 0x80156d <pxCurrentTCB>
    20d8:	f0 91 6e 15 	lds	r31, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    20dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    20de:	89 17       	cp	r24, r25
    20e0:	20 f4       	brcc	.+8      	; 0x20ea <__DATA_REGION_LENGTH__+0xea>
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	80 93 b7 14 	sts	0x14B7, r24	; 0x8014b7 <xYieldPending>
    20e8:	01 c0       	rjmp	.+2      	; 0x20ec <__DATA_REGION_LENGTH__+0xec>
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	08 95       	ret

000020f2 <vTaskSetTimeOutState>:
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	f8 94       	cli
    20f6:	0f 92       	push	r0
    20f8:	20 91 b6 14 	lds	r18, 0x14B6	; 0x8014b6 <xNumOfOverflows>
    20fc:	fc 01       	movw	r30, r24
    20fe:	20 83       	st	Z, r18
    2100:	40 91 be 14 	lds	r20, 0x14BE	; 0x8014be <xTickCount>
    2104:	50 91 bf 14 	lds	r21, 0x14BF	; 0x8014bf <xTickCount+0x1>
    2108:	60 91 c0 14 	lds	r22, 0x14C0	; 0x8014c0 <xTickCount+0x2>
    210c:	70 91 c1 14 	lds	r23, 0x14C1	; 0x8014c1 <xTickCount+0x3>
    2110:	41 83       	std	Z+1, r20	; 0x01
    2112:	52 83       	std	Z+2, r21	; 0x02
    2114:	63 83       	std	Z+3, r22	; 0x03
    2116:	74 83       	std	Z+4, r23	; 0x04
    2118:	0f 90       	pop	r0
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	08 95       	ret

0000211e <vTaskInternalSetTimeOutState>:
    211e:	20 91 b6 14 	lds	r18, 0x14B6	; 0x8014b6 <xNumOfOverflows>
    2122:	fc 01       	movw	r30, r24
    2124:	20 83       	st	Z, r18
    2126:	40 91 be 14 	lds	r20, 0x14BE	; 0x8014be <xTickCount>
    212a:	50 91 bf 14 	lds	r21, 0x14BF	; 0x8014bf <xTickCount+0x1>
    212e:	60 91 c0 14 	lds	r22, 0x14C0	; 0x8014c0 <xTickCount+0x2>
    2132:	70 91 c1 14 	lds	r23, 0x14C1	; 0x8014c1 <xTickCount+0x3>
    2136:	41 83       	std	Z+1, r20	; 0x01
    2138:	52 83       	std	Z+2, r21	; 0x02
    213a:	63 83       	std	Z+3, r22	; 0x03
    213c:	74 83       	std	Z+4, r23	; 0x04
    213e:	08 95       	ret

00002140 <xTaskCheckForTimeOut>:
    2140:	8f 92       	push	r8
    2142:	9f 92       	push	r9
    2144:	af 92       	push	r10
    2146:	bf 92       	push	r11
    2148:	cf 92       	push	r12
    214a:	df 92       	push	r13
    214c:	ef 92       	push	r14
    214e:	ff 92       	push	r15
    2150:	0f 93       	push	r16
    2152:	1f 93       	push	r17
    2154:	cf 93       	push	r28
    2156:	df 93       	push	r29
    2158:	fb 01       	movw	r30, r22
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	0f 92       	push	r0
    2160:	c0 90 be 14 	lds	r12, 0x14BE	; 0x8014be <xTickCount>
    2164:	d0 90 bf 14 	lds	r13, 0x14BF	; 0x8014bf <xTickCount+0x1>
    2168:	e0 90 c0 14 	lds	r14, 0x14C0	; 0x8014c0 <xTickCount+0x2>
    216c:	f0 90 c1 14 	lds	r15, 0x14C1	; 0x8014c1 <xTickCount+0x3>
    2170:	dc 01       	movw	r26, r24
    2172:	11 96       	adiw	r26, 0x01	; 1
    2174:	0d 91       	ld	r16, X+
    2176:	1d 91       	ld	r17, X+
    2178:	2d 91       	ld	r18, X+
    217a:	3c 91       	ld	r19, X
    217c:	14 97       	sbiw	r26, 0x04	; 4
    217e:	46 01       	movw	r8, r12
    2180:	57 01       	movw	r10, r14
    2182:	80 1a       	sub	r8, r16
    2184:	91 0a       	sbc	r9, r17
    2186:	a2 0a       	sbc	r10, r18
    2188:	b3 0a       	sbc	r11, r19
    218a:	40 81       	ld	r20, Z
    218c:	51 81       	ldd	r21, Z+1	; 0x01
    218e:	62 81       	ldd	r22, Z+2	; 0x02
    2190:	73 81       	ldd	r23, Z+3	; 0x03
    2192:	4f 3f       	cpi	r20, 0xFF	; 255
    2194:	bf ef       	ldi	r27, 0xFF	; 255
    2196:	5b 07       	cpc	r21, r27
    2198:	6b 07       	cpc	r22, r27
    219a:	7b 07       	cpc	r23, r27
    219c:	39 f1       	breq	.+78     	; 0x21ec <xTaskCheckForTimeOut+0xac>
    219e:	ec 01       	movw	r28, r24
    21a0:	b8 81       	ld	r27, Y
    21a2:	a0 91 b6 14 	lds	r26, 0x14B6	; 0x8014b6 <xNumOfOverflows>
    21a6:	ba 17       	cp	r27, r26
    21a8:	59 f0       	breq	.+22     	; 0x21c0 <xTaskCheckForTimeOut+0x80>
    21aa:	c0 16       	cp	r12, r16
    21ac:	d1 06       	cpc	r13, r17
    21ae:	e2 06       	cpc	r14, r18
    21b0:	f3 06       	cpc	r15, r19
    21b2:	30 f0       	brcs	.+12     	; 0x21c0 <xTaskCheckForTimeOut+0x80>
    21b4:	10 82       	st	Z, r1
    21b6:	11 82       	std	Z+1, r1	; 0x01
    21b8:	12 82       	std	Z+2, r1	; 0x02
    21ba:	13 82       	std	Z+3, r1	; 0x03
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	17 c0       	rjmp	.+46     	; 0x21ee <xTaskCheckForTimeOut+0xae>
    21c0:	84 16       	cp	r8, r20
    21c2:	95 06       	cpc	r9, r21
    21c4:	a6 06       	cpc	r10, r22
    21c6:	b7 06       	cpc	r11, r23
    21c8:	58 f4       	brcc	.+22     	; 0x21e0 <xTaskCheckForTimeOut+0xa0>
    21ca:	48 19       	sub	r20, r8
    21cc:	59 09       	sbc	r21, r9
    21ce:	6a 09       	sbc	r22, r10
    21d0:	7b 09       	sbc	r23, r11
    21d2:	40 83       	st	Z, r20
    21d4:	51 83       	std	Z+1, r21	; 0x01
    21d6:	62 83       	std	Z+2, r22	; 0x02
    21d8:	73 83       	std	Z+3, r23	; 0x03
    21da:	a1 df       	rcall	.-190    	; 0x211e <vTaskInternalSetTimeOutState>
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	07 c0       	rjmp	.+14     	; 0x21ee <xTaskCheckForTimeOut+0xae>
    21e0:	10 82       	st	Z, r1
    21e2:	11 82       	std	Z+1, r1	; 0x01
    21e4:	12 82       	std	Z+2, r1	; 0x02
    21e6:	13 82       	std	Z+3, r1	; 0x03
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	01 c0       	rjmp	.+2      	; 0x21ee <xTaskCheckForTimeOut+0xae>
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	0f 90       	pop	r0
    21f0:	0f be       	out	0x3f, r0	; 63
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	1f 91       	pop	r17
    21f8:	0f 91       	pop	r16
    21fa:	ff 90       	pop	r15
    21fc:	ef 90       	pop	r14
    21fe:	df 90       	pop	r13
    2200:	cf 90       	pop	r12
    2202:	bf 90       	pop	r11
    2204:	af 90       	pop	r10
    2206:	9f 90       	pop	r9
    2208:	8f 90       	pop	r8
    220a:	08 95       	ret

0000220c <vTaskMissedYield>:
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	80 93 b7 14 	sts	0x14B7, r24	; 0x8014b7 <xYieldPending>
    2212:	08 95       	ret

00002214 <xTaskGetCurrentTaskHandle>:
    2214:	80 91 6d 15 	lds	r24, 0x156D	; 0x80156d <pxCurrentTCB>
    2218:	90 91 6e 15 	lds	r25, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    221c:	08 95       	ret

0000221e <xTaskGetSchedulerState>:
    221e:	80 91 bc 14 	lds	r24, 0x14BC	; 0x8014bc <xSchedulerRunning>
    2222:	88 23       	and	r24, r24
    2224:	31 f0       	breq	.+12     	; 0x2232 <xTaskGetSchedulerState+0x14>
    2226:	80 91 ae 14 	lds	r24, 0x14AE	; 0x8014ae <uxSchedulerSuspended>
    222a:	81 11       	cpse	r24, r1
    222c:	04 c0       	rjmp	.+8      	; 0x2236 <xTaskGetSchedulerState+0x18>
    222e:	82 e0       	ldi	r24, 0x02	; 2
    2230:	08 95       	ret
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	08 95       	ret
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	08 95       	ret

0000223a <xTaskPriorityDisinherit>:
    223a:	0f 93       	push	r16
    223c:	1f 93       	push	r17
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	fc 01       	movw	r30, r24
    2244:	89 2b       	or	r24, r25
    2246:	09 f4       	brne	.+2      	; 0x224a <xTaskPriorityDisinherit+0x10>
    2248:	49 c0       	rjmp	.+146    	; 0x22dc <xTaskPriorityDisinherit+0xa2>
    224a:	86 a5       	ldd	r24, Z+46	; 0x2e
    224c:	81 50       	subi	r24, 0x01	; 1
    224e:	86 a7       	std	Z+46, r24	; 0x2e
    2250:	22 8d       	ldd	r18, Z+26	; 0x1a
    2252:	95 a5       	ldd	r25, Z+45	; 0x2d
    2254:	29 17       	cp	r18, r25
    2256:	09 f4       	brne	.+2      	; 0x225a <xTaskPriorityDisinherit+0x20>
    2258:	43 c0       	rjmp	.+134    	; 0x22e0 <xTaskPriorityDisinherit+0xa6>
    225a:	81 11       	cpse	r24, r1
    225c:	43 c0       	rjmp	.+134    	; 0x22e4 <xTaskPriorityDisinherit+0xaa>
    225e:	ef 01       	movw	r28, r30
    2260:	8f 01       	movw	r16, r30
    2262:	0e 5f       	subi	r16, 0xFE	; 254
    2264:	1f 4f       	sbci	r17, 0xFF	; 255
    2266:	c8 01       	movw	r24, r16
    2268:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
    226c:	ed a5       	ldd	r30, Y+45	; 0x2d
    226e:	ea 8f       	std	Y+26, r30	; 0x1a
    2270:	8a e0       	ldi	r24, 0x0A	; 10
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	a0 e0       	ldi	r26, 0x00	; 0
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	8e 1b       	sub	r24, r30
    227a:	91 09       	sbc	r25, r1
    227c:	a1 09       	sbc	r26, r1
    227e:	b1 09       	sbc	r27, r1
    2280:	8e 87       	std	Y+14, r24	; 0x0e
    2282:	9f 87       	std	Y+15, r25	; 0x0f
    2284:	a8 8b       	std	Y+16, r26	; 0x10
    2286:	b9 8b       	std	Y+17, r27	; 0x11
    2288:	80 91 bd 14 	lds	r24, 0x14BD	; 0x8014bd <uxTopReadyPriority>
    228c:	8e 17       	cp	r24, r30
    228e:	10 f4       	brcc	.+4      	; 0x2294 <xTaskPriorityDisinherit+0x5a>
    2290:	e0 93 bd 14 	sts	0x14BD, r30	; 0x8014bd <uxTopReadyPriority>
    2294:	8b e0       	ldi	r24, 0x0B	; 11
    2296:	8e 9f       	mul	r24, r30
    2298:	f0 01       	movw	r30, r0
    229a:	11 24       	eor	r1, r1
    229c:	e1 50       	subi	r30, 0x01	; 1
    229e:	fb 4e       	sbci	r31, 0xEB	; 235
    22a0:	01 80       	ldd	r0, Z+1	; 0x01
    22a2:	f2 81       	ldd	r31, Z+2	; 0x02
    22a4:	e0 2d       	mov	r30, r0
    22a6:	ff 83       	std	Y+7, r31	; 0x07
    22a8:	ee 83       	std	Y+6, r30	; 0x06
    22aa:	26 81       	ldd	r18, Z+6	; 0x06
    22ac:	37 81       	ldd	r19, Z+7	; 0x07
    22ae:	39 87       	std	Y+9, r19	; 0x09
    22b0:	28 87       	std	Y+8, r18	; 0x08
    22b2:	a6 81       	ldd	r26, Z+6	; 0x06
    22b4:	b7 81       	ldd	r27, Z+7	; 0x07
    22b6:	15 96       	adiw	r26, 0x05	; 5
    22b8:	1c 93       	st	X, r17
    22ba:	0e 93       	st	-X, r16
    22bc:	14 97       	sbiw	r26, 0x04	; 4
    22be:	17 83       	std	Z+7, r17	; 0x07
    22c0:	06 83       	std	Z+6, r16	; 0x06
    22c2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    22c4:	8e 9f       	mul	r24, r30
    22c6:	f0 01       	movw	r30, r0
    22c8:	11 24       	eor	r1, r1
    22ca:	e1 50       	subi	r30, 0x01	; 1
    22cc:	fb 4e       	sbci	r31, 0xEB	; 235
    22ce:	fd 87       	std	Y+13, r31	; 0x0d
    22d0:	ec 87       	std	Y+12, r30	; 0x0c
    22d2:	80 81       	ld	r24, Z
    22d4:	8f 5f       	subi	r24, 0xFF	; 255
    22d6:	80 83       	st	Z, r24
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	05 c0       	rjmp	.+10     	; 0x22e6 <xTaskPriorityDisinherit+0xac>
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	03 c0       	rjmp	.+6      	; 0x22e6 <xTaskPriorityDisinherit+0xac>
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	01 c0       	rjmp	.+2      	; 0x22e6 <xTaskPriorityDisinherit+0xac>
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	1f 91       	pop	r17
    22ec:	0f 91       	pop	r16
    22ee:	08 95       	ret

000022f0 <xTaskGenericNotifyWait>:
    22f0:	4f 92       	push	r4
    22f2:	5f 92       	push	r5
    22f4:	6f 92       	push	r6
    22f6:	7f 92       	push	r7
    22f8:	af 92       	push	r10
    22fa:	bf 92       	push	r11
    22fc:	cf 92       	push	r12
    22fe:	df 92       	push	r13
    2300:	ef 92       	push	r14
    2302:	ff 92       	push	r15
    2304:	0f 93       	push	r16
    2306:	1f 93       	push	r17
    2308:	cf 93       	push	r28
    230a:	df 93       	push	r29
    230c:	28 01       	movw	r4, r16
    230e:	39 01       	movw	r6, r18
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	f8 94       	cli
    2314:	0f 92       	push	r0
    2316:	e0 91 6d 15 	lds	r30, 0x156D	; 0x80156d <pxCurrentTCB>
    231a:	f0 91 6e 15 	lds	r31, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    231e:	c8 2f       	mov	r28, r24
    2320:	d0 e0       	ldi	r29, 0x00	; 0
    2322:	ec 0f       	add	r30, r28
    2324:	fd 1f       	adc	r31, r29
    2326:	83 a9       	ldd	r24, Z+51	; 0x33
    2328:	82 30       	cpi	r24, 0x02	; 2
    232a:	71 f1       	breq	.+92     	; 0x2388 <xTaskGenericNotifyWait+0x98>
    232c:	e0 91 6d 15 	lds	r30, 0x156D	; 0x80156d <pxCurrentTCB>
    2330:	f0 91 6e 15 	lds	r31, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    2334:	ce 01       	movw	r24, r28
    2336:	88 0f       	add	r24, r24
    2338:	99 1f       	adc	r25, r25
    233a:	88 0f       	add	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	e8 0f       	add	r30, r24
    2340:	f9 1f       	adc	r31, r25
    2342:	87 a5       	ldd	r24, Z+47	; 0x2f
    2344:	90 a9       	ldd	r25, Z+48	; 0x30
    2346:	a1 a9       	ldd	r26, Z+49	; 0x31
    2348:	b2 a9       	ldd	r27, Z+50	; 0x32
    234a:	40 95       	com	r20
    234c:	50 95       	com	r21
    234e:	60 95       	com	r22
    2350:	70 95       	com	r23
    2352:	48 23       	and	r20, r24
    2354:	59 23       	and	r21, r25
    2356:	6a 23       	and	r22, r26
    2358:	7b 23       	and	r23, r27
    235a:	47 a7       	std	Z+47, r20	; 0x2f
    235c:	50 ab       	std	Z+48, r21	; 0x30
    235e:	61 ab       	std	Z+49, r22	; 0x31
    2360:	72 ab       	std	Z+50, r23	; 0x32
    2362:	e0 91 6d 15 	lds	r30, 0x156D	; 0x80156d <pxCurrentTCB>
    2366:	f0 91 6e 15 	lds	r31, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    236a:	ec 0f       	add	r30, r28
    236c:	fd 1f       	adc	r31, r29
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	83 ab       	std	Z+51, r24	; 0x33
    2372:	a1 14       	cp	r10, r1
    2374:	b1 04       	cpc	r11, r1
    2376:	c1 04       	cpc	r12, r1
    2378:	d1 04       	cpc	r13, r1
    237a:	31 f0       	breq	.+12     	; 0x2388 <xTaskGenericNotifyWait+0x98>
    237c:	41 e0       	ldi	r20, 0x01	; 1
    237e:	c6 01       	movw	r24, r12
    2380:	b5 01       	movw	r22, r10
    2382:	88 d9       	rcall	.-3312   	; 0x1694 <prvAddCurrentTaskToDelayedList>
    2384:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    2388:	0f 90       	pop	r0
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	f8 94       	cli
    2390:	0f 92       	push	r0
    2392:	e1 14       	cp	r14, r1
    2394:	f1 04       	cpc	r15, r1
    2396:	a1 f0       	breq	.+40     	; 0x23c0 <xTaskGenericNotifyWait+0xd0>
    2398:	e0 91 6d 15 	lds	r30, 0x156D	; 0x80156d <pxCurrentTCB>
    239c:	f0 91 6e 15 	lds	r31, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    23a0:	ce 01       	movw	r24, r28
    23a2:	88 0f       	add	r24, r24
    23a4:	99 1f       	adc	r25, r25
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	e8 0f       	add	r30, r24
    23ac:	f9 1f       	adc	r31, r25
    23ae:	87 a5       	ldd	r24, Z+47	; 0x2f
    23b0:	90 a9       	ldd	r25, Z+48	; 0x30
    23b2:	a1 a9       	ldd	r26, Z+49	; 0x31
    23b4:	b2 a9       	ldd	r27, Z+50	; 0x32
    23b6:	f7 01       	movw	r30, r14
    23b8:	80 83       	st	Z, r24
    23ba:	91 83       	std	Z+1, r25	; 0x01
    23bc:	a2 83       	std	Z+2, r26	; 0x02
    23be:	b3 83       	std	Z+3, r27	; 0x03
    23c0:	e0 91 6d 15 	lds	r30, 0x156D	; 0x80156d <pxCurrentTCB>
    23c4:	f0 91 6e 15 	lds	r31, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    23c8:	ec 0f       	add	r30, r28
    23ca:	fd 1f       	adc	r31, r29
    23cc:	83 a9       	ldd	r24, Z+51	; 0x33
    23ce:	82 30       	cpi	r24, 0x02	; 2
    23d0:	e9 f4       	brne	.+58     	; 0x240c <xTaskGenericNotifyWait+0x11c>
    23d2:	e0 91 6d 15 	lds	r30, 0x156D	; 0x80156d <pxCurrentTCB>
    23d6:	f0 91 6e 15 	lds	r31, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    23da:	ce 01       	movw	r24, r28
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	88 0f       	add	r24, r24
    23e2:	99 1f       	adc	r25, r25
    23e4:	e8 0f       	add	r30, r24
    23e6:	f9 1f       	adc	r31, r25
    23e8:	87 a5       	ldd	r24, Z+47	; 0x2f
    23ea:	90 a9       	ldd	r25, Z+48	; 0x30
    23ec:	a1 a9       	ldd	r26, Z+49	; 0x31
    23ee:	b2 a9       	ldd	r27, Z+50	; 0x32
    23f0:	40 94       	com	r4
    23f2:	50 94       	com	r5
    23f4:	60 94       	com	r6
    23f6:	70 94       	com	r7
    23f8:	48 22       	and	r4, r24
    23fa:	59 22       	and	r5, r25
    23fc:	6a 22       	and	r6, r26
    23fe:	7b 22       	and	r7, r27
    2400:	47 a6       	std	Z+47, r4	; 0x2f
    2402:	50 aa       	std	Z+48, r5	; 0x30
    2404:	61 aa       	std	Z+49, r6	; 0x31
    2406:	72 aa       	std	Z+50, r7	; 0x32
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	01 c0       	rjmp	.+2      	; 0x240e <xTaskGenericNotifyWait+0x11e>
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	20 91 6d 15 	lds	r18, 0x156D	; 0x80156d <pxCurrentTCB>
    2412:	30 91 6e 15 	lds	r19, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    2416:	c2 0f       	add	r28, r18
    2418:	d3 1f       	adc	r29, r19
    241a:	1b aa       	std	Y+51, r1	; 0x33
    241c:	0f 90       	pop	r0
    241e:	0f be       	out	0x3f, r0	; 63
    2420:	df 91       	pop	r29
    2422:	cf 91       	pop	r28
    2424:	1f 91       	pop	r17
    2426:	0f 91       	pop	r16
    2428:	ff 90       	pop	r15
    242a:	ef 90       	pop	r14
    242c:	df 90       	pop	r13
    242e:	cf 90       	pop	r12
    2430:	bf 90       	pop	r11
    2432:	af 90       	pop	r10
    2434:	7f 90       	pop	r7
    2436:	6f 90       	pop	r6
    2438:	5f 90       	pop	r5
    243a:	4f 90       	pop	r4
    243c:	08 95       	ret

0000243e <xTaskGenericNotify>:
    243e:	8f 92       	push	r8
    2440:	9f 92       	push	r9
    2442:	af 92       	push	r10
    2444:	bf 92       	push	r11
    2446:	ef 92       	push	r14
    2448:	ff 92       	push	r15
    244a:	0f 93       	push	r16
    244c:	cf 93       	push	r28
    244e:	df 93       	push	r29
    2450:	dc 01       	movw	r26, r24
    2452:	0f b6       	in	r0, 0x3f	; 63
    2454:	f8 94       	cli
    2456:	0f 92       	push	r0
    2458:	e1 14       	cp	r14, r1
    245a:	f1 04       	cpc	r15, r1
    245c:	89 f0       	breq	.+34     	; 0x2480 <xTaskGenericNotify+0x42>
    245e:	e6 2f       	mov	r30, r22
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	ee 0f       	add	r30, r30
    2464:	ff 1f       	adc	r31, r31
    2466:	ee 0f       	add	r30, r30
    2468:	ff 1f       	adc	r31, r31
    246a:	e8 0f       	add	r30, r24
    246c:	f9 1f       	adc	r31, r25
    246e:	87 a4       	ldd	r8, Z+47	; 0x2f
    2470:	90 a8       	ldd	r9, Z+48	; 0x30
    2472:	a1 a8       	ldd	r10, Z+49	; 0x31
    2474:	b2 a8       	ldd	r11, Z+50	; 0x32
    2476:	f7 01       	movw	r30, r14
    2478:	80 82       	st	Z, r8
    247a:	91 82       	std	Z+1, r9	; 0x01
    247c:	a2 82       	std	Z+2, r10	; 0x02
    247e:	b3 82       	std	Z+3, r11	; 0x03
    2480:	70 e0       	ldi	r23, 0x00	; 0
    2482:	fd 01       	movw	r30, r26
    2484:	e6 0f       	add	r30, r22
    2486:	f7 1f       	adc	r31, r23
    2488:	83 a9       	ldd	r24, Z+51	; 0x33
    248a:	92 e0       	ldi	r25, 0x02	; 2
    248c:	93 ab       	std	Z+51, r25	; 0x33
    248e:	02 30       	cpi	r16, 0x02	; 2
    2490:	01 f1       	breq	.+64     	; 0x24d2 <xTaskGenericNotify+0x94>
    2492:	18 f4       	brcc	.+6      	; 0x249a <xTaskGenericNotify+0x5c>
    2494:	01 30       	cpi	r16, 0x01	; 1
    2496:	31 f0       	breq	.+12     	; 0x24a4 <xTaskGenericNotify+0x66>
    2498:	4d c0       	rjmp	.+154    	; 0x2534 <xTaskGenericNotify+0xf6>
    249a:	03 30       	cpi	r16, 0x03	; 3
    249c:	79 f1       	breq	.+94     	; 0x24fc <xTaskGenericNotify+0xbe>
    249e:	04 30       	cpi	r16, 0x04	; 4
    24a0:	d1 f1       	breq	.+116    	; 0x2516 <xTaskGenericNotify+0xd8>
    24a2:	48 c0       	rjmp	.+144    	; 0x2534 <xTaskGenericNotify+0xf6>
    24a4:	66 0f       	add	r22, r22
    24a6:	77 1f       	adc	r23, r23
    24a8:	66 0f       	add	r22, r22
    24aa:	77 1f       	adc	r23, r23
    24ac:	fd 01       	movw	r30, r26
    24ae:	e6 0f       	add	r30, r22
    24b0:	f7 1f       	adc	r31, r23
    24b2:	87 a4       	ldd	r8, Z+47	; 0x2f
    24b4:	90 a8       	ldd	r9, Z+48	; 0x30
    24b6:	a1 a8       	ldd	r10, Z+49	; 0x31
    24b8:	b2 a8       	ldd	r11, Z+50	; 0x32
    24ba:	ba 01       	movw	r22, r20
    24bc:	a9 01       	movw	r20, r18
    24be:	48 29       	or	r20, r8
    24c0:	59 29       	or	r21, r9
    24c2:	6a 29       	or	r22, r10
    24c4:	7b 29       	or	r23, r11
    24c6:	47 a7       	std	Z+47, r20	; 0x2f
    24c8:	50 ab       	std	Z+48, r21	; 0x30
    24ca:	61 ab       	std	Z+49, r22	; 0x31
    24cc:	72 ab       	std	Z+50, r23	; 0x32
    24ce:	01 e0       	ldi	r16, 0x01	; 1
    24d0:	34 c0       	rjmp	.+104    	; 0x253a <xTaskGenericNotify+0xfc>
    24d2:	66 0f       	add	r22, r22
    24d4:	77 1f       	adc	r23, r23
    24d6:	66 0f       	add	r22, r22
    24d8:	77 1f       	adc	r23, r23
    24da:	fd 01       	movw	r30, r26
    24dc:	e6 0f       	add	r30, r22
    24de:	f7 1f       	adc	r31, r23
    24e0:	47 a5       	ldd	r20, Z+47	; 0x2f
    24e2:	50 a9       	ldd	r21, Z+48	; 0x30
    24e4:	61 a9       	ldd	r22, Z+49	; 0x31
    24e6:	72 a9       	ldd	r23, Z+50	; 0x32
    24e8:	4f 5f       	subi	r20, 0xFF	; 255
    24ea:	5f 4f       	sbci	r21, 0xFF	; 255
    24ec:	6f 4f       	sbci	r22, 0xFF	; 255
    24ee:	7f 4f       	sbci	r23, 0xFF	; 255
    24f0:	47 a7       	std	Z+47, r20	; 0x2f
    24f2:	50 ab       	std	Z+48, r21	; 0x30
    24f4:	61 ab       	std	Z+49, r22	; 0x31
    24f6:	72 ab       	std	Z+50, r23	; 0x32
    24f8:	01 e0       	ldi	r16, 0x01	; 1
    24fa:	1f c0       	rjmp	.+62     	; 0x253a <xTaskGenericNotify+0xfc>
    24fc:	66 0f       	add	r22, r22
    24fe:	77 1f       	adc	r23, r23
    2500:	66 0f       	add	r22, r22
    2502:	77 1f       	adc	r23, r23
    2504:	fd 01       	movw	r30, r26
    2506:	e6 0f       	add	r30, r22
    2508:	f7 1f       	adc	r31, r23
    250a:	27 a7       	std	Z+47, r18	; 0x2f
    250c:	30 ab       	std	Z+48, r19	; 0x30
    250e:	41 ab       	std	Z+49, r20	; 0x31
    2510:	52 ab       	std	Z+50, r21	; 0x32
    2512:	01 e0       	ldi	r16, 0x01	; 1
    2514:	12 c0       	rjmp	.+36     	; 0x253a <xTaskGenericNotify+0xfc>
    2516:	82 30       	cpi	r24, 0x02	; 2
    2518:	79 f0       	breq	.+30     	; 0x2538 <xTaskGenericNotify+0xfa>
    251a:	66 0f       	add	r22, r22
    251c:	77 1f       	adc	r23, r23
    251e:	66 0f       	add	r22, r22
    2520:	77 1f       	adc	r23, r23
    2522:	fd 01       	movw	r30, r26
    2524:	e6 0f       	add	r30, r22
    2526:	f7 1f       	adc	r31, r23
    2528:	27 a7       	std	Z+47, r18	; 0x2f
    252a:	30 ab       	std	Z+48, r19	; 0x30
    252c:	41 ab       	std	Z+49, r20	; 0x31
    252e:	52 ab       	std	Z+50, r21	; 0x32
    2530:	01 e0       	ldi	r16, 0x01	; 1
    2532:	03 c0       	rjmp	.+6      	; 0x253a <xTaskGenericNotify+0xfc>
    2534:	01 e0       	ldi	r16, 0x01	; 1
    2536:	01 c0       	rjmp	.+2      	; 0x253a <xTaskGenericNotify+0xfc>
    2538:	00 e0       	ldi	r16, 0x00	; 0
    253a:	81 30       	cpi	r24, 0x01	; 1
    253c:	09 f0       	breq	.+2      	; 0x2540 <xTaskGenericNotify+0x102>
    253e:	69 c0       	rjmp	.+210    	; 0x2612 <xTaskGenericNotify+0x1d4>
    2540:	1c 96       	adiw	r26, 0x0c	; 12
    2542:	ed 91       	ld	r30, X+
    2544:	fc 91       	ld	r31, X
    2546:	1d 97       	sbiw	r26, 0x0d	; 13
    2548:	16 96       	adiw	r26, 0x06	; 6
    254a:	cd 91       	ld	r28, X+
    254c:	dc 91       	ld	r29, X
    254e:	17 97       	sbiw	r26, 0x07	; 7
    2550:	18 96       	adiw	r26, 0x08	; 8
    2552:	8d 91       	ld	r24, X+
    2554:	9c 91       	ld	r25, X
    2556:	19 97       	sbiw	r26, 0x09	; 9
    2558:	9f 83       	std	Y+7, r25	; 0x07
    255a:	8e 83       	std	Y+6, r24	; 0x06
    255c:	18 96       	adiw	r26, 0x08	; 8
    255e:	cd 91       	ld	r28, X+
    2560:	dc 91       	ld	r29, X
    2562:	19 97       	sbiw	r26, 0x09	; 9
    2564:	16 96       	adiw	r26, 0x06	; 6
    2566:	8d 91       	ld	r24, X+
    2568:	9c 91       	ld	r25, X
    256a:	17 97       	sbiw	r26, 0x07	; 7
    256c:	9d 83       	std	Y+5, r25	; 0x05
    256e:	8c 83       	std	Y+4, r24	; 0x04
    2570:	81 81       	ldd	r24, Z+1	; 0x01
    2572:	92 81       	ldd	r25, Z+2	; 0x02
    2574:	9d 01       	movw	r18, r26
    2576:	2e 5f       	subi	r18, 0xFE	; 254
    2578:	3f 4f       	sbci	r19, 0xFF	; 255
    257a:	82 17       	cp	r24, r18
    257c:	93 07       	cpc	r25, r19
    257e:	31 f4       	brne	.+12     	; 0x258c <xTaskGenericNotify+0x14e>
    2580:	18 96       	adiw	r26, 0x08	; 8
    2582:	8d 91       	ld	r24, X+
    2584:	9c 91       	ld	r25, X
    2586:	19 97       	sbiw	r26, 0x09	; 9
    2588:	92 83       	std	Z+2, r25	; 0x02
    258a:	81 83       	std	Z+1, r24	; 0x01
    258c:	1d 96       	adiw	r26, 0x0d	; 13
    258e:	1c 92       	st	X, r1
    2590:	1e 92       	st	-X, r1
    2592:	1c 97       	sbiw	r26, 0x0c	; 12
    2594:	80 81       	ld	r24, Z
    2596:	81 50       	subi	r24, 0x01	; 1
    2598:	80 83       	st	Z, r24
    259a:	5a 96       	adiw	r26, 0x1a	; 26
    259c:	ec 91       	ld	r30, X
    259e:	5a 97       	sbiw	r26, 0x1a	; 26
    25a0:	80 91 bd 14 	lds	r24, 0x14BD	; 0x8014bd <uxTopReadyPriority>
    25a4:	8e 17       	cp	r24, r30
    25a6:	10 f4       	brcc	.+4      	; 0x25ac <xTaskGenericNotify+0x16e>
    25a8:	e0 93 bd 14 	sts	0x14BD, r30	; 0x8014bd <uxTopReadyPriority>
    25ac:	8b e0       	ldi	r24, 0x0B	; 11
    25ae:	8e 9f       	mul	r24, r30
    25b0:	f0 01       	movw	r30, r0
    25b2:	11 24       	eor	r1, r1
    25b4:	e1 50       	subi	r30, 0x01	; 1
    25b6:	fb 4e       	sbci	r31, 0xEB	; 235
    25b8:	01 80       	ldd	r0, Z+1	; 0x01
    25ba:	f2 81       	ldd	r31, Z+2	; 0x02
    25bc:	e0 2d       	mov	r30, r0
    25be:	17 96       	adiw	r26, 0x07	; 7
    25c0:	fc 93       	st	X, r31
    25c2:	ee 93       	st	-X, r30
    25c4:	16 97       	sbiw	r26, 0x06	; 6
    25c6:	46 81       	ldd	r20, Z+6	; 0x06
    25c8:	57 81       	ldd	r21, Z+7	; 0x07
    25ca:	19 96       	adiw	r26, 0x09	; 9
    25cc:	5c 93       	st	X, r21
    25ce:	4e 93       	st	-X, r20
    25d0:	18 97       	sbiw	r26, 0x08	; 8
    25d2:	c6 81       	ldd	r28, Z+6	; 0x06
    25d4:	d7 81       	ldd	r29, Z+7	; 0x07
    25d6:	3d 83       	std	Y+5, r19	; 0x05
    25d8:	2c 83       	std	Y+4, r18	; 0x04
    25da:	37 83       	std	Z+7, r19	; 0x07
    25dc:	26 83       	std	Z+6, r18	; 0x06
    25de:	5a 96       	adiw	r26, 0x1a	; 26
    25e0:	ec 91       	ld	r30, X
    25e2:	5a 97       	sbiw	r26, 0x1a	; 26
    25e4:	8e 9f       	mul	r24, r30
    25e6:	f0 01       	movw	r30, r0
    25e8:	11 24       	eor	r1, r1
    25ea:	e1 50       	subi	r30, 0x01	; 1
    25ec:	fb 4e       	sbci	r31, 0xEB	; 235
    25ee:	1d 96       	adiw	r26, 0x0d	; 13
    25f0:	fc 93       	st	X, r31
    25f2:	ee 93       	st	-X, r30
    25f4:	1c 97       	sbiw	r26, 0x0c	; 12
    25f6:	80 81       	ld	r24, Z
    25f8:	8f 5f       	subi	r24, 0xFF	; 255
    25fa:	80 83       	st	Z, r24
    25fc:	5a 96       	adiw	r26, 0x1a	; 26
    25fe:	9c 91       	ld	r25, X
    2600:	e0 91 6d 15 	lds	r30, 0x156D	; 0x80156d <pxCurrentTCB>
    2604:	f0 91 6e 15 	lds	r31, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    2608:	82 8d       	ldd	r24, Z+26	; 0x1a
    260a:	89 17       	cp	r24, r25
    260c:	10 f4       	brcc	.+4      	; 0x2612 <xTaskGenericNotify+0x1d4>
    260e:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    2612:	0f 90       	pop	r0
    2614:	0f be       	out	0x3f, r0	; 63
    2616:	80 2f       	mov	r24, r16
    2618:	df 91       	pop	r29
    261a:	cf 91       	pop	r28
    261c:	0f 91       	pop	r16
    261e:	ff 90       	pop	r15
    2620:	ef 90       	pop	r14
    2622:	bf 90       	pop	r11
    2624:	af 90       	pop	r10
    2626:	9f 90       	pop	r9
    2628:	8f 90       	pop	r8
    262a:	08 95       	ret

0000262c <xTaskGenericNotifyFromISR>:
    262c:	8f 92       	push	r8
    262e:	9f 92       	push	r9
    2630:	af 92       	push	r10
    2632:	bf 92       	push	r11
    2634:	cf 92       	push	r12
    2636:	df 92       	push	r13
    2638:	ef 92       	push	r14
    263a:	ff 92       	push	r15
    263c:	0f 93       	push	r16
    263e:	cf 93       	push	r28
    2640:	df 93       	push	r29
    2642:	dc 01       	movw	r26, r24
    2644:	e1 14       	cp	r14, r1
    2646:	f1 04       	cpc	r15, r1
    2648:	89 f0       	breq	.+34     	; 0x266c <xTaskGenericNotifyFromISR+0x40>
    264a:	e6 2f       	mov	r30, r22
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	ee 0f       	add	r30, r30
    2650:	ff 1f       	adc	r31, r31
    2652:	ee 0f       	add	r30, r30
    2654:	ff 1f       	adc	r31, r31
    2656:	e8 0f       	add	r30, r24
    2658:	f9 1f       	adc	r31, r25
    265a:	87 a4       	ldd	r8, Z+47	; 0x2f
    265c:	90 a8       	ldd	r9, Z+48	; 0x30
    265e:	a1 a8       	ldd	r10, Z+49	; 0x31
    2660:	b2 a8       	ldd	r11, Z+50	; 0x32
    2662:	f7 01       	movw	r30, r14
    2664:	80 82       	st	Z, r8
    2666:	91 82       	std	Z+1, r9	; 0x01
    2668:	a2 82       	std	Z+2, r10	; 0x02
    266a:	b3 82       	std	Z+3, r11	; 0x03
    266c:	70 e0       	ldi	r23, 0x00	; 0
    266e:	fd 01       	movw	r30, r26
    2670:	e6 0f       	add	r30, r22
    2672:	f7 1f       	adc	r31, r23
    2674:	93 a9       	ldd	r25, Z+51	; 0x33
    2676:	82 e0       	ldi	r24, 0x02	; 2
    2678:	83 ab       	std	Z+51, r24	; 0x33
    267a:	02 30       	cpi	r16, 0x02	; 2
    267c:	01 f1       	breq	.+64     	; 0x26be <xTaskGenericNotifyFromISR+0x92>
    267e:	18 f4       	brcc	.+6      	; 0x2686 <xTaskGenericNotifyFromISR+0x5a>
    2680:	01 30       	cpi	r16, 0x01	; 1
    2682:	31 f0       	breq	.+12     	; 0x2690 <xTaskGenericNotifyFromISR+0x64>
    2684:	4d c0       	rjmp	.+154    	; 0x2720 <xTaskGenericNotifyFromISR+0xf4>
    2686:	03 30       	cpi	r16, 0x03	; 3
    2688:	79 f1       	breq	.+94     	; 0x26e8 <xTaskGenericNotifyFromISR+0xbc>
    268a:	04 30       	cpi	r16, 0x04	; 4
    268c:	d1 f1       	breq	.+116    	; 0x2702 <xTaskGenericNotifyFromISR+0xd6>
    268e:	48 c0       	rjmp	.+144    	; 0x2720 <xTaskGenericNotifyFromISR+0xf4>
    2690:	66 0f       	add	r22, r22
    2692:	77 1f       	adc	r23, r23
    2694:	66 0f       	add	r22, r22
    2696:	77 1f       	adc	r23, r23
    2698:	fd 01       	movw	r30, r26
    269a:	e6 0f       	add	r30, r22
    269c:	f7 1f       	adc	r31, r23
    269e:	87 a4       	ldd	r8, Z+47	; 0x2f
    26a0:	90 a8       	ldd	r9, Z+48	; 0x30
    26a2:	a1 a8       	ldd	r10, Z+49	; 0x31
    26a4:	b2 a8       	ldd	r11, Z+50	; 0x32
    26a6:	ba 01       	movw	r22, r20
    26a8:	a9 01       	movw	r20, r18
    26aa:	48 29       	or	r20, r8
    26ac:	59 29       	or	r21, r9
    26ae:	6a 29       	or	r22, r10
    26b0:	7b 29       	or	r23, r11
    26b2:	47 a7       	std	Z+47, r20	; 0x2f
    26b4:	50 ab       	std	Z+48, r21	; 0x30
    26b6:	61 ab       	std	Z+49, r22	; 0x31
    26b8:	72 ab       	std	Z+50, r23	; 0x32
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	34 c0       	rjmp	.+104    	; 0x2726 <xTaskGenericNotifyFromISR+0xfa>
    26be:	66 0f       	add	r22, r22
    26c0:	77 1f       	adc	r23, r23
    26c2:	66 0f       	add	r22, r22
    26c4:	77 1f       	adc	r23, r23
    26c6:	fd 01       	movw	r30, r26
    26c8:	e6 0f       	add	r30, r22
    26ca:	f7 1f       	adc	r31, r23
    26cc:	47 a5       	ldd	r20, Z+47	; 0x2f
    26ce:	50 a9       	ldd	r21, Z+48	; 0x30
    26d0:	61 a9       	ldd	r22, Z+49	; 0x31
    26d2:	72 a9       	ldd	r23, Z+50	; 0x32
    26d4:	4f 5f       	subi	r20, 0xFF	; 255
    26d6:	5f 4f       	sbci	r21, 0xFF	; 255
    26d8:	6f 4f       	sbci	r22, 0xFF	; 255
    26da:	7f 4f       	sbci	r23, 0xFF	; 255
    26dc:	47 a7       	std	Z+47, r20	; 0x2f
    26de:	50 ab       	std	Z+48, r21	; 0x30
    26e0:	61 ab       	std	Z+49, r22	; 0x31
    26e2:	72 ab       	std	Z+50, r23	; 0x32
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	1f c0       	rjmp	.+62     	; 0x2726 <xTaskGenericNotifyFromISR+0xfa>
    26e8:	66 0f       	add	r22, r22
    26ea:	77 1f       	adc	r23, r23
    26ec:	66 0f       	add	r22, r22
    26ee:	77 1f       	adc	r23, r23
    26f0:	fd 01       	movw	r30, r26
    26f2:	e6 0f       	add	r30, r22
    26f4:	f7 1f       	adc	r31, r23
    26f6:	27 a7       	std	Z+47, r18	; 0x2f
    26f8:	30 ab       	std	Z+48, r19	; 0x30
    26fa:	41 ab       	std	Z+49, r20	; 0x31
    26fc:	52 ab       	std	Z+50, r21	; 0x32
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	12 c0       	rjmp	.+36     	; 0x2726 <xTaskGenericNotifyFromISR+0xfa>
    2702:	92 30       	cpi	r25, 0x02	; 2
    2704:	79 f0       	breq	.+30     	; 0x2724 <xTaskGenericNotifyFromISR+0xf8>
    2706:	66 0f       	add	r22, r22
    2708:	77 1f       	adc	r23, r23
    270a:	66 0f       	add	r22, r22
    270c:	77 1f       	adc	r23, r23
    270e:	fd 01       	movw	r30, r26
    2710:	e6 0f       	add	r30, r22
    2712:	f7 1f       	adc	r31, r23
    2714:	27 a7       	std	Z+47, r18	; 0x2f
    2716:	30 ab       	std	Z+48, r19	; 0x30
    2718:	41 ab       	std	Z+49, r20	; 0x31
    271a:	52 ab       	std	Z+50, r21	; 0x32
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	03 c0       	rjmp	.+6      	; 0x2726 <xTaskGenericNotifyFromISR+0xfa>
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	01 c0       	rjmp	.+2      	; 0x2726 <xTaskGenericNotifyFromISR+0xfa>
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	91 30       	cpi	r25, 0x01	; 1
    2728:	09 f0       	breq	.+2      	; 0x272c <xTaskGenericNotifyFromISR+0x100>
    272a:	96 c0       	rjmp	.+300    	; 0x2858 <xTaskGenericNotifyFromISR+0x22c>
    272c:	90 91 ae 14 	lds	r25, 0x14AE	; 0x8014ae <uxSchedulerSuspended>
    2730:	91 11       	cpse	r25, r1
    2732:	5f c0       	rjmp	.+190    	; 0x27f2 <xTaskGenericNotifyFromISR+0x1c6>
    2734:	1c 96       	adiw	r26, 0x0c	; 12
    2736:	ed 91       	ld	r30, X+
    2738:	fc 91       	ld	r31, X
    273a:	1d 97       	sbiw	r26, 0x0d	; 13
    273c:	16 96       	adiw	r26, 0x06	; 6
    273e:	cd 91       	ld	r28, X+
    2740:	dc 91       	ld	r29, X
    2742:	17 97       	sbiw	r26, 0x07	; 7
    2744:	18 96       	adiw	r26, 0x08	; 8
    2746:	2d 91       	ld	r18, X+
    2748:	3c 91       	ld	r19, X
    274a:	19 97       	sbiw	r26, 0x09	; 9
    274c:	3f 83       	std	Y+7, r19	; 0x07
    274e:	2e 83       	std	Y+6, r18	; 0x06
    2750:	18 96       	adiw	r26, 0x08	; 8
    2752:	cd 91       	ld	r28, X+
    2754:	dc 91       	ld	r29, X
    2756:	19 97       	sbiw	r26, 0x09	; 9
    2758:	16 96       	adiw	r26, 0x06	; 6
    275a:	2d 91       	ld	r18, X+
    275c:	3c 91       	ld	r19, X
    275e:	17 97       	sbiw	r26, 0x07	; 7
    2760:	3d 83       	std	Y+5, r19	; 0x05
    2762:	2c 83       	std	Y+4, r18	; 0x04
    2764:	41 81       	ldd	r20, Z+1	; 0x01
    2766:	52 81       	ldd	r21, Z+2	; 0x02
    2768:	9d 01       	movw	r18, r26
    276a:	2e 5f       	subi	r18, 0xFE	; 254
    276c:	3f 4f       	sbci	r19, 0xFF	; 255
    276e:	42 17       	cp	r20, r18
    2770:	53 07       	cpc	r21, r19
    2772:	31 f4       	brne	.+12     	; 0x2780 <xTaskGenericNotifyFromISR+0x154>
    2774:	18 96       	adiw	r26, 0x08	; 8
    2776:	4d 91       	ld	r20, X+
    2778:	5c 91       	ld	r21, X
    277a:	19 97       	sbiw	r26, 0x09	; 9
    277c:	52 83       	std	Z+2, r21	; 0x02
    277e:	41 83       	std	Z+1, r20	; 0x01
    2780:	1d 96       	adiw	r26, 0x0d	; 13
    2782:	1c 92       	st	X, r1
    2784:	1e 92       	st	-X, r1
    2786:	1c 97       	sbiw	r26, 0x0c	; 12
    2788:	90 81       	ld	r25, Z
    278a:	91 50       	subi	r25, 0x01	; 1
    278c:	90 83       	st	Z, r25
    278e:	5a 96       	adiw	r26, 0x1a	; 26
    2790:	ec 91       	ld	r30, X
    2792:	5a 97       	sbiw	r26, 0x1a	; 26
    2794:	90 91 bd 14 	lds	r25, 0x14BD	; 0x8014bd <uxTopReadyPriority>
    2798:	9e 17       	cp	r25, r30
    279a:	10 f4       	brcc	.+4      	; 0x27a0 <xTaskGenericNotifyFromISR+0x174>
    279c:	e0 93 bd 14 	sts	0x14BD, r30	; 0x8014bd <uxTopReadyPriority>
    27a0:	9b e0       	ldi	r25, 0x0B	; 11
    27a2:	9e 9f       	mul	r25, r30
    27a4:	f0 01       	movw	r30, r0
    27a6:	11 24       	eor	r1, r1
    27a8:	e1 50       	subi	r30, 0x01	; 1
    27aa:	fb 4e       	sbci	r31, 0xEB	; 235
    27ac:	01 80       	ldd	r0, Z+1	; 0x01
    27ae:	f2 81       	ldd	r31, Z+2	; 0x02
    27b0:	e0 2d       	mov	r30, r0
    27b2:	17 96       	adiw	r26, 0x07	; 7
    27b4:	fc 93       	st	X, r31
    27b6:	ee 93       	st	-X, r30
    27b8:	16 97       	sbiw	r26, 0x06	; 6
    27ba:	46 81       	ldd	r20, Z+6	; 0x06
    27bc:	57 81       	ldd	r21, Z+7	; 0x07
    27be:	19 96       	adiw	r26, 0x09	; 9
    27c0:	5c 93       	st	X, r21
    27c2:	4e 93       	st	-X, r20
    27c4:	18 97       	sbiw	r26, 0x08	; 8
    27c6:	c6 81       	ldd	r28, Z+6	; 0x06
    27c8:	d7 81       	ldd	r29, Z+7	; 0x07
    27ca:	3d 83       	std	Y+5, r19	; 0x05
    27cc:	2c 83       	std	Y+4, r18	; 0x04
    27ce:	37 83       	std	Z+7, r19	; 0x07
    27d0:	26 83       	std	Z+6, r18	; 0x06
    27d2:	5a 96       	adiw	r26, 0x1a	; 26
    27d4:	ec 91       	ld	r30, X
    27d6:	5a 97       	sbiw	r26, 0x1a	; 26
    27d8:	9e 9f       	mul	r25, r30
    27da:	f0 01       	movw	r30, r0
    27dc:	11 24       	eor	r1, r1
    27de:	e1 50       	subi	r30, 0x01	; 1
    27e0:	fb 4e       	sbci	r31, 0xEB	; 235
    27e2:	1d 96       	adiw	r26, 0x0d	; 13
    27e4:	fc 93       	st	X, r31
    27e6:	ee 93       	st	-X, r30
    27e8:	1c 97       	sbiw	r26, 0x0c	; 12
    27ea:	90 81       	ld	r25, Z
    27ec:	9f 5f       	subi	r25, 0xFF	; 255
    27ee:	90 83       	st	Z, r25
    27f0:	21 c0       	rjmp	.+66     	; 0x2834 <xTaskGenericNotifyFromISR+0x208>
    27f2:	6a ed       	ldi	r22, 0xDA	; 218
    27f4:	74 e1       	ldi	r23, 0x14	; 20
    27f6:	fb 01       	movw	r30, r22
    27f8:	c1 81       	ldd	r28, Z+1	; 0x01
    27fa:	d2 81       	ldd	r29, Z+2	; 0x02
    27fc:	53 96       	adiw	r26, 0x13	; 19
    27fe:	dc 93       	st	X, r29
    2800:	ce 93       	st	-X, r28
    2802:	52 97       	sbiw	r26, 0x12	; 18
    2804:	2e 81       	ldd	r18, Y+6	; 0x06
    2806:	3f 81       	ldd	r19, Y+7	; 0x07
    2808:	55 96       	adiw	r26, 0x15	; 21
    280a:	3c 93       	st	X, r19
    280c:	2e 93       	st	-X, r18
    280e:	54 97       	sbiw	r26, 0x14	; 20
    2810:	4e 81       	ldd	r20, Y+6	; 0x06
    2812:	5f 81       	ldd	r21, Y+7	; 0x07
    2814:	9d 01       	movw	r18, r26
    2816:	22 5f       	subi	r18, 0xF2	; 242
    2818:	3f 4f       	sbci	r19, 0xFF	; 255
    281a:	fa 01       	movw	r30, r20
    281c:	35 83       	std	Z+5, r19	; 0x05
    281e:	24 83       	std	Z+4, r18	; 0x04
    2820:	3f 83       	std	Y+7, r19	; 0x07
    2822:	2e 83       	std	Y+6, r18	; 0x06
    2824:	59 96       	adiw	r26, 0x19	; 25
    2826:	7c 93       	st	X, r23
    2828:	6e 93       	st	-X, r22
    282a:	58 97       	sbiw	r26, 0x18	; 24
    282c:	fb 01       	movw	r30, r22
    282e:	90 81       	ld	r25, Z
    2830:	9f 5f       	subi	r25, 0xFF	; 255
    2832:	90 83       	st	Z, r25
    2834:	5a 96       	adiw	r26, 0x1a	; 26
    2836:	2c 91       	ld	r18, X
    2838:	e0 91 6d 15 	lds	r30, 0x156D	; 0x80156d <pxCurrentTCB>
    283c:	f0 91 6e 15 	lds	r31, 0x156E	; 0x80156e <pxCurrentTCB+0x1>
    2840:	92 8d       	ldd	r25, Z+26	; 0x1a
    2842:	92 17       	cp	r25, r18
    2844:	48 f4       	brcc	.+18     	; 0x2858 <xTaskGenericNotifyFromISR+0x22c>
    2846:	c1 14       	cp	r12, r1
    2848:	d1 04       	cpc	r13, r1
    284a:	19 f0       	breq	.+6      	; 0x2852 <xTaskGenericNotifyFromISR+0x226>
    284c:	91 e0       	ldi	r25, 0x01	; 1
    284e:	f6 01       	movw	r30, r12
    2850:	90 83       	st	Z, r25
    2852:	91 e0       	ldi	r25, 0x01	; 1
    2854:	90 93 b7 14 	sts	0x14B7, r25	; 0x8014b7 <xYieldPending>
    2858:	df 91       	pop	r29
    285a:	cf 91       	pop	r28
    285c:	0f 91       	pop	r16
    285e:	ff 90       	pop	r15
    2860:	ef 90       	pop	r14
    2862:	df 90       	pop	r13
    2864:	cf 90       	pop	r12
    2866:	bf 90       	pop	r11
    2868:	af 90       	pop	r10
    286a:	9f 90       	pop	r9
    286c:	8f 90       	pop	r8
    286e:	08 95       	ret

00002870 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2870:	00 97       	sbiw	r24, 0x00	; 0
    2872:	21 f4       	brne	.+8      	; 0x287c <xTaskGenericNotifyStateClear+0xc>
    2874:	80 91 6d 15 	lds	r24, 0x156D	; 0x80156d <pxCurrentTCB>
    2878:	90 91 6e 15 	lds	r25, 0x156E	; 0x80156e <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    287c:	0f b6       	in	r0, 0x3f	; 63
    287e:	f8 94       	cli
    2880:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2882:	70 e0       	ldi	r23, 0x00	; 0
    2884:	fc 01       	movw	r30, r24
    2886:	e6 0f       	add	r30, r22
    2888:	f7 1f       	adc	r31, r23
    288a:	23 a9       	ldd	r18, Z+51	; 0x33
    288c:	22 30       	cpi	r18, 0x02	; 2
    288e:	31 f4       	brne	.+12     	; 0x289c <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2890:	fc 01       	movw	r30, r24
    2892:	e6 0f       	add	r30, r22
    2894:	f7 1f       	adc	r31, r23
    2896:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	01 c0       	rjmp	.+2      	; 0x289e <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    289c:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    289e:	0f 90       	pop	r0
    28a0:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    28a2:	08 95       	ret

000028a4 <prvGetNextExpireTime>:
    28a4:	dc 01       	movw	r26, r24
    28a6:	e0 91 79 15 	lds	r30, 0x1579	; 0x801579 <pxCurrentTimerList>
    28aa:	f0 91 7a 15 	lds	r31, 0x157A	; 0x80157a <pxCurrentTimerList+0x1>
    28ae:	80 81       	ld	r24, Z
    28b0:	91 e0       	ldi	r25, 0x01	; 1
    28b2:	81 11       	cpse	r24, r1
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	9c 93       	st	X, r25
    28b8:	91 11       	cpse	r25, r1
    28ba:	08 c0       	rjmp	.+16     	; 0x28cc <prvGetNextExpireTime+0x28>
    28bc:	07 80       	ldd	r0, Z+7	; 0x07
    28be:	f0 85       	ldd	r31, Z+8	; 0x08
    28c0:	e0 2d       	mov	r30, r0
    28c2:	60 81       	ld	r22, Z
    28c4:	71 81       	ldd	r23, Z+1	; 0x01
    28c6:	82 81       	ldd	r24, Z+2	; 0x02
    28c8:	93 81       	ldd	r25, Z+3	; 0x03
    28ca:	08 95       	ret
    28cc:	60 e0       	ldi	r22, 0x00	; 0
    28ce:	70 e0       	ldi	r23, 0x00	; 0
    28d0:	cb 01       	movw	r24, r22
    28d2:	08 95       	ret

000028d4 <prvInsertTimerInActiveList>:
    28d4:	cf 92       	push	r12
    28d6:	df 92       	push	r13
    28d8:	ef 92       	push	r14
    28da:	ff 92       	push	r15
    28dc:	0f 93       	push	r16
    28de:	1f 93       	push	r17
    28e0:	fc 01       	movw	r30, r24
    28e2:	42 83       	std	Z+2, r20	; 0x02
    28e4:	53 83       	std	Z+3, r21	; 0x03
    28e6:	64 83       	std	Z+4, r22	; 0x04
    28e8:	75 83       	std	Z+5, r23	; 0x05
    28ea:	93 87       	std	Z+11, r25	; 0x0b
    28ec:	82 87       	std	Z+10, r24	; 0x0a
    28ee:	04 17       	cp	r16, r20
    28f0:	15 07       	cpc	r17, r21
    28f2:	26 07       	cpc	r18, r22
    28f4:	37 07       	cpc	r19, r23
    28f6:	c0 f0       	brcs	.+48     	; 0x2928 <prvInsertTimerInActiveList+0x54>
    28f8:	0c 19       	sub	r16, r12
    28fa:	1d 09       	sbc	r17, r13
    28fc:	2e 09       	sbc	r18, r14
    28fe:	3f 09       	sbc	r19, r15
    2900:	86 85       	ldd	r24, Z+14	; 0x0e
    2902:	97 85       	ldd	r25, Z+15	; 0x0f
    2904:	a0 89       	ldd	r26, Z+16	; 0x10
    2906:	b1 89       	ldd	r27, Z+17	; 0x11
    2908:	08 17       	cp	r16, r24
    290a:	19 07       	cpc	r17, r25
    290c:	2a 07       	cpc	r18, r26
    290e:	3b 07       	cpc	r19, r27
    2910:	00 f5       	brcc	.+64     	; 0x2952 <prvInsertTimerInActiveList+0x7e>
    2912:	bf 01       	movw	r22, r30
    2914:	6e 5f       	subi	r22, 0xFE	; 254
    2916:	7f 4f       	sbci	r23, 0xFF	; 255
    2918:	80 91 77 15 	lds	r24, 0x1577	; 0x801577 <pxOverflowTimerList>
    291c:	90 91 78 15 	lds	r25, 0x1578	; 0x801578 <pxOverflowTimerList+0x1>
    2920:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	18 c0       	rjmp	.+48     	; 0x2958 <prvInsertTimerInActiveList+0x84>
    2928:	0c 15       	cp	r16, r12
    292a:	1d 05       	cpc	r17, r13
    292c:	2e 05       	cpc	r18, r14
    292e:	3f 05       	cpc	r19, r15
    2930:	28 f4       	brcc	.+10     	; 0x293c <prvInsertTimerInActiveList+0x68>
    2932:	4c 15       	cp	r20, r12
    2934:	5d 05       	cpc	r21, r13
    2936:	6e 05       	cpc	r22, r14
    2938:	7f 05       	cpc	r23, r15
    293a:	68 f4       	brcc	.+26     	; 0x2956 <prvInsertTimerInActiveList+0x82>
    293c:	bf 01       	movw	r22, r30
    293e:	6e 5f       	subi	r22, 0xFE	; 254
    2940:	7f 4f       	sbci	r23, 0xFF	; 255
    2942:	80 91 79 15 	lds	r24, 0x1579	; 0x801579 <pxCurrentTimerList>
    2946:	90 91 7a 15 	lds	r25, 0x157A	; 0x80157a <pxCurrentTimerList+0x1>
    294a:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	03 c0       	rjmp	.+6      	; 0x2958 <prvInsertTimerInActiveList+0x84>
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	01 c0       	rjmp	.+2      	; 0x2958 <prvInsertTimerInActiveList+0x84>
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	1f 91       	pop	r17
    295a:	0f 91       	pop	r16
    295c:	ff 90       	pop	r15
    295e:	ef 90       	pop	r14
    2960:	df 90       	pop	r13
    2962:	cf 90       	pop	r12
    2964:	08 95       	ret

00002966 <prvCheckForValidListAndQueue>:
    2966:	0f b6       	in	r0, 0x3f	; 63
    2968:	f8 94       	cli
    296a:	0f 92       	push	r0
    296c:	80 91 75 15 	lds	r24, 0x1575	; 0x801575 <xTimerQueue>
    2970:	90 91 76 15 	lds	r25, 0x1576	; 0x801576 <xTimerQueue+0x1>
    2974:	89 2b       	or	r24, r25
    2976:	e9 f4       	brne	.+58     	; 0x29b2 <prvCheckForValidListAndQueue+0x4c>
    2978:	86 e8       	ldi	r24, 0x86	; 134
    297a:	95 e1       	ldi	r25, 0x15	; 21
    297c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    2980:	8b e7       	ldi	r24, 0x7B	; 123
    2982:	95 e1       	ldi	r25, 0x15	; 21
    2984:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    2988:	86 e8       	ldi	r24, 0x86	; 134
    298a:	95 e1       	ldi	r25, 0x15	; 21
    298c:	90 93 7a 15 	sts	0x157A, r25	; 0x80157a <pxCurrentTimerList+0x1>
    2990:	80 93 79 15 	sts	0x1579, r24	; 0x801579 <pxCurrentTimerList>
    2994:	8b e7       	ldi	r24, 0x7B	; 123
    2996:	95 e1       	ldi	r25, 0x15	; 21
    2998:	90 93 78 15 	sts	0x1578, r25	; 0x801578 <pxOverflowTimerList+0x1>
    299c:	80 93 77 15 	sts	0x1577, r24	; 0x801577 <pxOverflowTimerList>
    29a0:	40 e0       	ldi	r20, 0x00	; 0
    29a2:	67 e0       	ldi	r22, 0x07	; 7
    29a4:	8a e0       	ldi	r24, 0x0A	; 10
    29a6:	0e 94 14 05 	call	0xa28	; 0xa28 <xQueueGenericCreate>
    29aa:	90 93 76 15 	sts	0x1576, r25	; 0x801576 <xTimerQueue+0x1>
    29ae:	80 93 75 15 	sts	0x1575, r24	; 0x801575 <xTimerQueue>
    29b2:	0f 90       	pop	r0
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	08 95       	ret

000029b8 <xTimerCreateTimerTask>:
    29b8:	ef 92       	push	r14
    29ba:	ff 92       	push	r15
    29bc:	0f 93       	push	r16
    29be:	d3 df       	rcall	.-90     	; 0x2966 <prvCheckForValidListAndQueue>
    29c0:	80 91 75 15 	lds	r24, 0x1575	; 0x801575 <xTimerQueue>
    29c4:	90 91 76 15 	lds	r25, 0x1576	; 0x801576 <xTimerQueue+0x1>
    29c8:	89 2b       	or	r24, r25
    29ca:	91 f0       	breq	.+36     	; 0x29f0 <xTimerCreateTimerTask+0x38>
    29cc:	0f 2e       	mov	r0, r31
    29ce:	f3 e7       	ldi	r31, 0x73	; 115
    29d0:	ef 2e       	mov	r14, r31
    29d2:	f5 e1       	ldi	r31, 0x15	; 21
    29d4:	ff 2e       	mov	r15, r31
    29d6:	f0 2d       	mov	r31, r0
    29d8:	03 e0       	ldi	r16, 0x03	; 3
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	40 ec       	ldi	r20, 0xC0	; 192
    29e0:	50 e0       	ldi	r21, 0x00	; 0
    29e2:	67 e4       	ldi	r22, 0x47	; 71
    29e4:	72 e0       	ldi	r23, 0x02	; 2
    29e6:	87 ed       	ldi	r24, 0xD7	; 215
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskCreate>
    29ee:	01 c0       	rjmp	.+2      	; 0x29f2 <xTimerCreateTimerTask+0x3a>
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	0f 91       	pop	r16
    29f4:	ff 90       	pop	r15
    29f6:	ef 90       	pop	r14
    29f8:	08 95       	ret

000029fa <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    29fa:	8f 92       	push	r8
    29fc:	9f 92       	push	r9
    29fe:	af 92       	push	r10
    2a00:	bf 92       	push	r11
    2a02:	cf 92       	push	r12
    2a04:	df 92       	push	r13
    2a06:	ef 92       	push	r14
    2a08:	ff 92       	push	r15
    2a0a:	0f 93       	push	r16
    2a0c:	1f 93       	push	r17
    2a0e:	cf 93       	push	r28
    2a10:	df 93       	push	r29
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
    2a16:	27 97       	sbiw	r28, 0x07	; 7
    2a18:	0f b6       	in	r0, 0x3f	; 63
    2a1a:	f8 94       	cli
    2a1c:	de bf       	out	0x3e, r29	; 62
    2a1e:	0f be       	out	0x3f, r0	; 63
    2a20:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2a22:	e0 91 75 15 	lds	r30, 0x1575	; 0x801575 <xTimerQueue>
    2a26:	f0 91 76 15 	lds	r31, 0x1576	; 0x801576 <xTimerQueue+0x1>
    2a2a:	30 97       	sbiw	r30, 0x00	; 0
    2a2c:	81 f1       	breq	.+96     	; 0x2a8e <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2a2e:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2a30:	2a 83       	std	Y+2, r18	; 0x02
    2a32:	3b 83       	std	Y+3, r19	; 0x03
    2a34:	4c 83       	std	Y+4, r20	; 0x04
    2a36:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2a38:	9f 83       	std	Y+7, r25	; 0x07
    2a3a:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2a3c:	66 30       	cpi	r22, 0x06	; 6
    2a3e:	f4 f4       	brge	.+60     	; 0x2a7c <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2a40:	ee db       	rcall	.-2084   	; 0x221e <xTaskGetSchedulerState>
    2a42:	82 30       	cpi	r24, 0x02	; 2
    2a44:	69 f4       	brne	.+26     	; 0x2a60 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2a46:	00 e0       	ldi	r16, 0x00	; 0
    2a48:	a7 01       	movw	r20, r14
    2a4a:	96 01       	movw	r18, r12
    2a4c:	be 01       	movw	r22, r28
    2a4e:	6f 5f       	subi	r22, 0xFF	; 255
    2a50:	7f 4f       	sbci	r23, 0xFF	; 255
    2a52:	80 91 75 15 	lds	r24, 0x1575	; 0x801575 <xTimerQueue>
    2a56:	90 91 76 15 	lds	r25, 0x1576	; 0x801576 <xTimerQueue+0x1>
    2a5a:	0e 94 37 05 	call	0xa6e	; 0xa6e <xQueueGenericSend>
    2a5e:	18 c0       	rjmp	.+48     	; 0x2a90 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2a60:	00 e0       	ldi	r16, 0x00	; 0
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	a9 01       	movw	r20, r18
    2a68:	be 01       	movw	r22, r28
    2a6a:	6f 5f       	subi	r22, 0xFF	; 255
    2a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a6e:	80 91 75 15 	lds	r24, 0x1575	; 0x801575 <xTimerQueue>
    2a72:	90 91 76 15 	lds	r25, 0x1576	; 0x801576 <xTimerQueue+0x1>
    2a76:	0e 94 37 05 	call	0xa6e	; 0xa6e <xQueueGenericSend>
    2a7a:	0a c0       	rjmp	.+20     	; 0x2a90 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	a8 01       	movw	r20, r16
    2a80:	be 01       	movw	r22, r28
    2a82:	6f 5f       	subi	r22, 0xFF	; 255
    2a84:	7f 4f       	sbci	r23, 0xFF	; 255
    2a86:	cf 01       	movw	r24, r30
    2a88:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xQueueGenericSendFromISR>
    2a8c:	01 c0       	rjmp	.+2      	; 0x2a90 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2a90:	27 96       	adiw	r28, 0x07	; 7
    2a92:	0f b6       	in	r0, 0x3f	; 63
    2a94:	f8 94       	cli
    2a96:	de bf       	out	0x3e, r29	; 62
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	cd bf       	out	0x3d, r28	; 61
    2a9c:	df 91       	pop	r29
    2a9e:	cf 91       	pop	r28
    2aa0:	1f 91       	pop	r17
    2aa2:	0f 91       	pop	r16
    2aa4:	ff 90       	pop	r15
    2aa6:	ef 90       	pop	r14
    2aa8:	df 90       	pop	r13
    2aaa:	cf 90       	pop	r12
    2aac:	bf 90       	pop	r11
    2aae:	af 90       	pop	r10
    2ab0:	9f 90       	pop	r9
    2ab2:	8f 90       	pop	r8
    2ab4:	08 95       	ret

00002ab6 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2ab6:	8f 92       	push	r8
    2ab8:	9f 92       	push	r9
    2aba:	af 92       	push	r10
    2abc:	bf 92       	push	r11
    2abe:	cf 92       	push	r12
    2ac0:	df 92       	push	r13
    2ac2:	ef 92       	push	r14
    2ac4:	ff 92       	push	r15
    2ac6:	0f 93       	push	r16
    2ac8:	1f 93       	push	r17
    2aca:	cf 93       	push	r28
    2acc:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2ace:	3b c0       	rjmp	.+118    	; 0x2b46 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2ad0:	07 80       	ldd	r0, Z+7	; 0x07
    2ad2:	f0 85       	ldd	r31, Z+8	; 0x08
    2ad4:	e0 2d       	mov	r30, r0
    2ad6:	80 80       	ld	r8, Z
    2ad8:	91 80       	ldd	r9, Z+1	; 0x01
    2ada:	a2 80       	ldd	r10, Z+2	; 0x02
    2adc:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2ade:	c0 85       	ldd	r28, Z+8	; 0x08
    2ae0:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2ae2:	8e 01       	movw	r16, r28
    2ae4:	0e 5f       	subi	r16, 0xFE	; 254
    2ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae8:	c8 01       	movw	r24, r16
    2aea:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2aee:	ec 89       	ldd	r30, Y+20	; 0x14
    2af0:	fd 89       	ldd	r31, Y+21	; 0x15
    2af2:	ce 01       	movw	r24, r28
    2af4:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2af6:	8e 89       	ldd	r24, Y+22	; 0x16
    2af8:	82 ff       	sbrs	r24, 2
    2afa:	25 c0       	rjmp	.+74     	; 0x2b46 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2afc:	8e 85       	ldd	r24, Y+14	; 0x0e
    2afe:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b00:	a8 89       	ldd	r26, Y+16	; 0x10
    2b02:	b9 89       	ldd	r27, Y+17	; 0x11
    2b04:	88 0d       	add	r24, r8
    2b06:	99 1d       	adc	r25, r9
    2b08:	aa 1d       	adc	r26, r10
    2b0a:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2b0c:	88 16       	cp	r8, r24
    2b0e:	99 06       	cpc	r9, r25
    2b10:	aa 06       	cpc	r10, r26
    2b12:	bb 06       	cpc	r11, r27
    2b14:	70 f4       	brcc	.+28     	; 0x2b32 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2b16:	8a 83       	std	Y+2, r24	; 0x02
    2b18:	9b 83       	std	Y+3, r25	; 0x03
    2b1a:	ac 83       	std	Y+4, r26	; 0x04
    2b1c:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2b1e:	db 87       	std	Y+11, r29	; 0x0b
    2b20:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2b22:	b8 01       	movw	r22, r16
    2b24:	80 91 79 15 	lds	r24, 0x1579	; 0x801579 <pxCurrentTimerList>
    2b28:	90 91 7a 15 	lds	r25, 0x157A	; 0x80157a <pxCurrentTimerList+0x1>
    2b2c:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    2b30:	0a c0       	rjmp	.+20     	; 0x2b46 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2b32:	c1 2c       	mov	r12, r1
    2b34:	d1 2c       	mov	r13, r1
    2b36:	76 01       	movw	r14, r12
    2b38:	00 e0       	ldi	r16, 0x00	; 0
    2b3a:	10 e0       	ldi	r17, 0x00	; 0
    2b3c:	a5 01       	movw	r20, r10
    2b3e:	94 01       	movw	r18, r8
    2b40:	60 e0       	ldi	r22, 0x00	; 0
    2b42:	ce 01       	movw	r24, r28
    2b44:	5a df       	rcall	.-332    	; 0x29fa <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2b46:	e0 91 79 15 	lds	r30, 0x1579	; 0x801579 <pxCurrentTimerList>
    2b4a:	f0 91 7a 15 	lds	r31, 0x157A	; 0x80157a <pxCurrentTimerList+0x1>
    2b4e:	80 81       	ld	r24, Z
    2b50:	81 11       	cpse	r24, r1
    2b52:	be cf       	rjmp	.-132    	; 0x2ad0 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2b54:	80 91 77 15 	lds	r24, 0x1577	; 0x801577 <pxOverflowTimerList>
    2b58:	90 91 78 15 	lds	r25, 0x1578	; 0x801578 <pxOverflowTimerList+0x1>
    2b5c:	90 93 7a 15 	sts	0x157A, r25	; 0x80157a <pxCurrentTimerList+0x1>
    2b60:	80 93 79 15 	sts	0x1579, r24	; 0x801579 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2b64:	f0 93 78 15 	sts	0x1578, r31	; 0x801578 <pxOverflowTimerList+0x1>
    2b68:	e0 93 77 15 	sts	0x1577, r30	; 0x801577 <pxOverflowTimerList>
    }
    2b6c:	df 91       	pop	r29
    2b6e:	cf 91       	pop	r28
    2b70:	1f 91       	pop	r17
    2b72:	0f 91       	pop	r16
    2b74:	ff 90       	pop	r15
    2b76:	ef 90       	pop	r14
    2b78:	df 90       	pop	r13
    2b7a:	cf 90       	pop	r12
    2b7c:	bf 90       	pop	r11
    2b7e:	af 90       	pop	r10
    2b80:	9f 90       	pop	r9
    2b82:	8f 90       	pop	r8
    2b84:	08 95       	ret

00002b86 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2b86:	cf 92       	push	r12
    2b88:	df 92       	push	r13
    2b8a:	ef 92       	push	r14
    2b8c:	ff 92       	push	r15
    2b8e:	cf 93       	push	r28
    2b90:	df 93       	push	r29
    2b92:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2b94:	0e 94 76 0c 	call	0x18ec	; 0x18ec <xTaskGetTickCount>
    2b98:	6b 01       	movw	r12, r22
    2b9a:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2b9c:	80 91 6f 15 	lds	r24, 0x156F	; 0x80156f <xLastTime.2436>
    2ba0:	90 91 70 15 	lds	r25, 0x1570	; 0x801570 <xLastTime.2436+0x1>
    2ba4:	a0 91 71 15 	lds	r26, 0x1571	; 0x801571 <xLastTime.2436+0x2>
    2ba8:	b0 91 72 15 	lds	r27, 0x1572	; 0x801572 <xLastTime.2436+0x3>
    2bac:	c8 16       	cp	r12, r24
    2bae:	d9 06       	cpc	r13, r25
    2bb0:	ea 06       	cpc	r14, r26
    2bb2:	fb 06       	cpc	r15, r27
    2bb4:	20 f4       	brcc	.+8      	; 0x2bbe <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2bb6:	7f df       	rcall	.-258    	; 0x2ab6 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	88 83       	st	Y, r24
    2bbc:	01 c0       	rjmp	.+2      	; 0x2bc0 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2bbe:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2bc0:	c0 92 6f 15 	sts	0x156F, r12	; 0x80156f <xLastTime.2436>
    2bc4:	d0 92 70 15 	sts	0x1570, r13	; 0x801570 <xLastTime.2436+0x1>
    2bc8:	e0 92 71 15 	sts	0x1571, r14	; 0x801571 <xLastTime.2436+0x2>
    2bcc:	f0 92 72 15 	sts	0x1572, r15	; 0x801572 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2bd0:	c7 01       	movw	r24, r14
    2bd2:	b6 01       	movw	r22, r12
    2bd4:	df 91       	pop	r29
    2bd6:	cf 91       	pop	r28
    2bd8:	ff 90       	pop	r15
    2bda:	ef 90       	pop	r14
    2bdc:	df 90       	pop	r13
    2bde:	cf 90       	pop	r12
    2be0:	08 95       	ret

00002be2 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2be2:	4f 92       	push	r4
    2be4:	5f 92       	push	r5
    2be6:	6f 92       	push	r6
    2be8:	7f 92       	push	r7
    2bea:	8f 92       	push	r8
    2bec:	9f 92       	push	r9
    2bee:	af 92       	push	r10
    2bf0:	bf 92       	push	r11
    2bf2:	cf 92       	push	r12
    2bf4:	df 92       	push	r13
    2bf6:	ef 92       	push	r14
    2bf8:	ff 92       	push	r15
    2bfa:	0f 93       	push	r16
    2bfc:	1f 93       	push	r17
    2bfe:	cf 93       	push	r28
    2c00:	df 93       	push	r29
    2c02:	4b 01       	movw	r8, r22
    2c04:	5c 01       	movw	r10, r24
    2c06:	29 01       	movw	r4, r18
    2c08:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2c0a:	e0 91 79 15 	lds	r30, 0x1579	; 0x801579 <pxCurrentTimerList>
    2c0e:	f0 91 7a 15 	lds	r31, 0x157A	; 0x80157a <pxCurrentTimerList+0x1>
    2c12:	07 80       	ldd	r0, Z+7	; 0x07
    2c14:	f0 85       	ldd	r31, Z+8	; 0x08
    2c16:	e0 2d       	mov	r30, r0
    2c18:	c0 85       	ldd	r28, Z+8	; 0x08
    2c1a:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2c1c:	ce 01       	movw	r24, r28
    2c1e:	02 96       	adiw	r24, 0x02	; 2
    2c20:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2c24:	8e 89       	ldd	r24, Y+22	; 0x16
    2c26:	82 ff       	sbrs	r24, 2
    2c28:	1b c0       	rjmp	.+54     	; 0x2c60 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2c2a:	4e 85       	ldd	r20, Y+14	; 0x0e
    2c2c:	5f 85       	ldd	r21, Y+15	; 0x0f
    2c2e:	68 89       	ldd	r22, Y+16	; 0x10
    2c30:	79 89       	ldd	r23, Y+17	; 0x11
    2c32:	48 0d       	add	r20, r8
    2c34:	59 1d       	adc	r21, r9
    2c36:	6a 1d       	adc	r22, r10
    2c38:	7b 1d       	adc	r23, r11
    2c3a:	75 01       	movw	r14, r10
    2c3c:	64 01       	movw	r12, r8
    2c3e:	93 01       	movw	r18, r6
    2c40:	82 01       	movw	r16, r4
    2c42:	ce 01       	movw	r24, r28
    2c44:	47 de       	rcall	.-882    	; 0x28d4 <prvInsertTimerInActiveList>
    2c46:	88 23       	and	r24, r24
    2c48:	69 f0       	breq	.+26     	; 0x2c64 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2c4a:	c1 2c       	mov	r12, r1
    2c4c:	d1 2c       	mov	r13, r1
    2c4e:	76 01       	movw	r14, r12
    2c50:	00 e0       	ldi	r16, 0x00	; 0
    2c52:	10 e0       	ldi	r17, 0x00	; 0
    2c54:	a5 01       	movw	r20, r10
    2c56:	94 01       	movw	r18, r8
    2c58:	60 e0       	ldi	r22, 0x00	; 0
    2c5a:	ce 01       	movw	r24, r28
    2c5c:	ce de       	rcall	.-612    	; 0x29fa <xTimerGenericCommand>
    2c5e:	02 c0       	rjmp	.+4      	; 0x2c64 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2c60:	8e 7f       	andi	r24, 0xFE	; 254
    2c62:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2c64:	ec 89       	ldd	r30, Y+20	; 0x14
    2c66:	fd 89       	ldd	r31, Y+21	; 0x15
    2c68:	ce 01       	movw	r24, r28
    2c6a:	19 95       	eicall
    }
    2c6c:	df 91       	pop	r29
    2c6e:	cf 91       	pop	r28
    2c70:	1f 91       	pop	r17
    2c72:	0f 91       	pop	r16
    2c74:	ff 90       	pop	r15
    2c76:	ef 90       	pop	r14
    2c78:	df 90       	pop	r13
    2c7a:	cf 90       	pop	r12
    2c7c:	bf 90       	pop	r11
    2c7e:	af 90       	pop	r10
    2c80:	9f 90       	pop	r9
    2c82:	8f 90       	pop	r8
    2c84:	7f 90       	pop	r7
    2c86:	6f 90       	pop	r6
    2c88:	5f 90       	pop	r5
    2c8a:	4f 90       	pop	r4
    2c8c:	08 95       	ret

00002c8e <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2c8e:	8f 92       	push	r8
    2c90:	9f 92       	push	r9
    2c92:	af 92       	push	r10
    2c94:	bf 92       	push	r11
    2c96:	cf 92       	push	r12
    2c98:	df 92       	push	r13
    2c9a:	ef 92       	push	r14
    2c9c:	ff 92       	push	r15
    2c9e:	1f 93       	push	r17
    2ca0:	cf 93       	push	r28
    2ca2:	df 93       	push	r29
    2ca4:	1f 92       	push	r1
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    2caa:	6b 01       	movw	r12, r22
    2cac:	7c 01       	movw	r14, r24
    2cae:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2cb0:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2cb4:	ce 01       	movw	r24, r28
    2cb6:	01 96       	adiw	r24, 0x01	; 1
    2cb8:	66 df       	rcall	.-308    	; 0x2b86 <prvSampleTimeNow>
    2cba:	4b 01       	movw	r8, r22
    2cbc:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
    2cc0:	81 11       	cpse	r24, r1
    2cc2:	2d c0       	rjmp	.+90     	; 0x2d1e <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2cc4:	11 11       	cpse	r17, r1
    2cc6:	0d c0       	rjmp	.+26     	; 0x2ce2 <prvProcessTimerOrBlockTask+0x54>
    2cc8:	8c 14       	cp	r8, r12
    2cca:	9d 04       	cpc	r9, r13
    2ccc:	ae 04       	cpc	r10, r14
    2cce:	bf 04       	cpc	r11, r15
    2cd0:	40 f0       	brcs	.+16     	; 0x2ce2 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    2cd2:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2cd6:	a5 01       	movw	r20, r10
    2cd8:	94 01       	movw	r18, r8
    2cda:	c7 01       	movw	r24, r14
    2cdc:	b6 01       	movw	r22, r12
    2cde:	81 df       	rcall	.-254    	; 0x2be2 <prvProcessExpiredTimer>
    2ce0:	20 c0       	rjmp	.+64     	; 0x2d22 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2ce2:	11 23       	and	r17, r17
    2ce4:	41 f0       	breq	.+16     	; 0x2cf6 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2ce6:	e0 91 77 15 	lds	r30, 0x1577	; 0x801577 <pxOverflowTimerList>
    2cea:	f0 91 78 15 	lds	r31, 0x1578	; 0x801578 <pxOverflowTimerList+0x1>
    2cee:	80 81       	ld	r24, Z
    2cf0:	11 e0       	ldi	r17, 0x01	; 1
    2cf2:	81 11       	cpse	r24, r1
    2cf4:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2cf6:	b7 01       	movw	r22, r14
    2cf8:	a6 01       	movw	r20, r12
    2cfa:	48 19       	sub	r20, r8
    2cfc:	59 09       	sbc	r21, r9
    2cfe:	6a 09       	sbc	r22, r10
    2d00:	7b 09       	sbc	r23, r11
    2d02:	21 2f       	mov	r18, r17
    2d04:	80 91 75 15 	lds	r24, 0x1575	; 0x801575 <xTimerQueue>
    2d08:	90 91 76 15 	lds	r25, 0x1576	; 0x801576 <xTimerQueue+0x1>
    2d0c:	0e 94 91 06 	call	0xd22	; 0xd22 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2d10:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <xTaskResumeAll>
    2d14:	81 11       	cpse	r24, r1
    2d16:	05 c0       	rjmp	.+10     	; 0x2d22 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2d18:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    2d1c:	02 c0       	rjmp	.+4      	; 0x2d22 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2d1e:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <xTaskResumeAll>
            }
        }
    }
    2d22:	0f 90       	pop	r0
    2d24:	df 91       	pop	r29
    2d26:	cf 91       	pop	r28
    2d28:	1f 91       	pop	r17
    2d2a:	ff 90       	pop	r15
    2d2c:	ef 90       	pop	r14
    2d2e:	df 90       	pop	r13
    2d30:	cf 90       	pop	r12
    2d32:	bf 90       	pop	r11
    2d34:	af 90       	pop	r10
    2d36:	9f 90       	pop	r9
    2d38:	8f 90       	pop	r8
    2d3a:	08 95       	ret

00002d3c <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2d3c:	af 92       	push	r10
    2d3e:	bf 92       	push	r11
    2d40:	cf 92       	push	r12
    2d42:	df 92       	push	r13
    2d44:	ef 92       	push	r14
    2d46:	ff 92       	push	r15
    2d48:	0f 93       	push	r16
    2d4a:	1f 93       	push	r17
    2d4c:	cf 93       	push	r28
    2d4e:	df 93       	push	r29
    2d50:	cd b7       	in	r28, 0x3d	; 61
    2d52:	de b7       	in	r29, 0x3e	; 62
    2d54:	28 97       	sbiw	r28, 0x08	; 8
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	de bf       	out	0x3e, r29	; 62
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2d60:	82 c0       	rjmp	.+260    	; 0x2e66 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2d62:	89 81       	ldd	r24, Y+1	; 0x01
    2d64:	88 23       	and	r24, r24
    2d66:	0c f4       	brge	.+2      	; 0x2d6a <prvProcessReceivedCommands+0x2e>
    2d68:	7e c0       	rjmp	.+252    	; 0x2e66 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2d6a:	ae 80       	ldd	r10, Y+6	; 0x06
    2d6c:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2d6e:	d5 01       	movw	r26, r10
    2d70:	1c 96       	adiw	r26, 0x0c	; 12
    2d72:	8d 91       	ld	r24, X+
    2d74:	9c 91       	ld	r25, X
    2d76:	1d 97       	sbiw	r26, 0x0d	; 13
    2d78:	89 2b       	or	r24, r25
    2d7a:	21 f0       	breq	.+8      	; 0x2d84 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2d7c:	c5 01       	movw	r24, r10
    2d7e:	02 96       	adiw	r24, 0x02	; 2
    2d80:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2d84:	ce 01       	movw	r24, r28
    2d86:	08 96       	adiw	r24, 0x08	; 8
    2d88:	fe de       	rcall	.-516    	; 0x2b86 <prvSampleTimeNow>
    2d8a:	8b 01       	movw	r16, r22
    2d8c:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    2d8e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d90:	0e 2e       	mov	r0, r30
    2d92:	00 0c       	add	r0, r0
    2d94:	ff 0b       	sbc	r31, r31
    2d96:	ea 30       	cpi	r30, 0x0A	; 10
    2d98:	f1 05       	cpc	r31, r1
    2d9a:	08 f0       	brcs	.+2      	; 0x2d9e <prvProcessReceivedCommands+0x62>
    2d9c:	64 c0       	rjmp	.+200    	; 0x2e66 <prvProcessReceivedCommands+0x12a>
    2d9e:	88 27       	eor	r24, r24
    2da0:	ee 58       	subi	r30, 0x8E	; 142
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	8f 4f       	sbci	r24, 0xFF	; 255
    2da6:	0c 94 36 26 	jmp	0x4c6c	; 0x4c6c <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2daa:	f5 01       	movw	r30, r10
    2dac:	86 89       	ldd	r24, Z+22	; 0x16
    2dae:	81 60       	ori	r24, 0x01	; 1
    2db0:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2db2:	ca 80       	ldd	r12, Y+2	; 0x02
    2db4:	db 80       	ldd	r13, Y+3	; 0x03
    2db6:	ec 80       	ldd	r14, Y+4	; 0x04
    2db8:	fd 80       	ldd	r15, Y+5	; 0x05
    2dba:	46 85       	ldd	r20, Z+14	; 0x0e
    2dbc:	57 85       	ldd	r21, Z+15	; 0x0f
    2dbe:	60 89       	ldd	r22, Z+16	; 0x10
    2dc0:	71 89       	ldd	r23, Z+17	; 0x11
    2dc2:	4c 0d       	add	r20, r12
    2dc4:	5d 1d       	adc	r21, r13
    2dc6:	6e 1d       	adc	r22, r14
    2dc8:	7f 1d       	adc	r23, r15
    2dca:	c5 01       	movw	r24, r10
    2dcc:	83 dd       	rcall	.-1274   	; 0x28d4 <prvInsertTimerInActiveList>
    2dce:	88 23       	and	r24, r24
    2dd0:	09 f4       	brne	.+2      	; 0x2dd4 <prvProcessReceivedCommands+0x98>
    2dd2:	49 c0       	rjmp	.+146    	; 0x2e66 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2dd4:	d5 01       	movw	r26, r10
    2dd6:	54 96       	adiw	r26, 0x14	; 20
    2dd8:	ed 91       	ld	r30, X+
    2dda:	fc 91       	ld	r31, X
    2ddc:	55 97       	sbiw	r26, 0x15	; 21
    2dde:	c5 01       	movw	r24, r10
    2de0:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2de2:	f5 01       	movw	r30, r10
    2de4:	86 89       	ldd	r24, Z+22	; 0x16
    2de6:	82 ff       	sbrs	r24, 2
    2de8:	3e c0       	rjmp	.+124    	; 0x2e66 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2dea:	4a 81       	ldd	r20, Y+2	; 0x02
    2dec:	5b 81       	ldd	r21, Y+3	; 0x03
    2dee:	6c 81       	ldd	r22, Y+4	; 0x04
    2df0:	7d 81       	ldd	r23, Y+5	; 0x05
    2df2:	86 85       	ldd	r24, Z+14	; 0x0e
    2df4:	97 85       	ldd	r25, Z+15	; 0x0f
    2df6:	a0 89       	ldd	r26, Z+16	; 0x10
    2df8:	b1 89       	ldd	r27, Z+17	; 0x11
    2dfa:	9a 01       	movw	r18, r20
    2dfc:	ab 01       	movw	r20, r22
    2dfe:	28 0f       	add	r18, r24
    2e00:	39 1f       	adc	r19, r25
    2e02:	4a 1f       	adc	r20, r26
    2e04:	5b 1f       	adc	r21, r27
    2e06:	c1 2c       	mov	r12, r1
    2e08:	d1 2c       	mov	r13, r1
    2e0a:	76 01       	movw	r14, r12
    2e0c:	00 e0       	ldi	r16, 0x00	; 0
    2e0e:	10 e0       	ldi	r17, 0x00	; 0
    2e10:	60 e0       	ldi	r22, 0x00	; 0
    2e12:	c5 01       	movw	r24, r10
    2e14:	f2 dd       	rcall	.-1052   	; 0x29fa <xTimerGenericCommand>
    2e16:	27 c0       	rjmp	.+78     	; 0x2e66 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2e18:	d5 01       	movw	r26, r10
    2e1a:	56 96       	adiw	r26, 0x16	; 22
    2e1c:	8c 91       	ld	r24, X
    2e1e:	56 97       	sbiw	r26, 0x16	; 22
    2e20:	8e 7f       	andi	r24, 0xFE	; 254
    2e22:	56 96       	adiw	r26, 0x16	; 22
    2e24:	8c 93       	st	X, r24
                        break;
    2e26:	1f c0       	rjmp	.+62     	; 0x2e66 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2e28:	f5 01       	movw	r30, r10
    2e2a:	86 89       	ldd	r24, Z+22	; 0x16
    2e2c:	81 60       	ori	r24, 0x01	; 1
    2e2e:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2e30:	4a 81       	ldd	r20, Y+2	; 0x02
    2e32:	5b 81       	ldd	r21, Y+3	; 0x03
    2e34:	6c 81       	ldd	r22, Y+4	; 0x04
    2e36:	7d 81       	ldd	r23, Y+5	; 0x05
    2e38:	46 87       	std	Z+14, r20	; 0x0e
    2e3a:	57 87       	std	Z+15, r21	; 0x0f
    2e3c:	60 8b       	std	Z+16, r22	; 0x10
    2e3e:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2e40:	40 0f       	add	r20, r16
    2e42:	51 1f       	adc	r21, r17
    2e44:	62 1f       	adc	r22, r18
    2e46:	73 1f       	adc	r23, r19
    2e48:	68 01       	movw	r12, r16
    2e4a:	79 01       	movw	r14, r18
    2e4c:	c5 01       	movw	r24, r10
    2e4e:	42 dd       	rcall	.-1404   	; 0x28d4 <prvInsertTimerInActiveList>
                        break;
    2e50:	0a c0       	rjmp	.+20     	; 0x2e66 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2e52:	f5 01       	movw	r30, r10
    2e54:	86 89       	ldd	r24, Z+22	; 0x16
    2e56:	81 fd       	sbrc	r24, 1
    2e58:	04 c0       	rjmp	.+8      	; 0x2e62 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    2e5a:	c5 01       	movw	r24, r10
    2e5c:	0e 94 24 02 	call	0x448	; 0x448 <vPortFree>
    2e60:	02 c0       	rjmp	.+4      	; 0x2e66 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2e62:	8e 7f       	andi	r24, 0xFE	; 254
    2e64:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	a9 01       	movw	r20, r18
    2e6c:	be 01       	movw	r22, r28
    2e6e:	6f 5f       	subi	r22, 0xFF	; 255
    2e70:	7f 4f       	sbci	r23, 0xFF	; 255
    2e72:	80 91 75 15 	lds	r24, 0x1575	; 0x801575 <xTimerQueue>
    2e76:	90 91 76 15 	lds	r25, 0x1576	; 0x801576 <xTimerQueue+0x1>
    2e7a:	0e 94 02 06 	call	0xc04	; 0xc04 <xQueueReceive>
    2e7e:	81 11       	cpse	r24, r1
    2e80:	70 cf       	rjmp	.-288    	; 0x2d62 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2e82:	28 96       	adiw	r28, 0x08	; 8
    2e84:	0f b6       	in	r0, 0x3f	; 63
    2e86:	f8 94       	cli
    2e88:	de bf       	out	0x3e, r29	; 62
    2e8a:	0f be       	out	0x3f, r0	; 63
    2e8c:	cd bf       	out	0x3d, r28	; 61
    2e8e:	df 91       	pop	r29
    2e90:	cf 91       	pop	r28
    2e92:	1f 91       	pop	r17
    2e94:	0f 91       	pop	r16
    2e96:	ff 90       	pop	r15
    2e98:	ef 90       	pop	r14
    2e9a:	df 90       	pop	r13
    2e9c:	cf 90       	pop	r12
    2e9e:	bf 90       	pop	r11
    2ea0:	af 90       	pop	r10
    2ea2:	08 95       	ret

00002ea4 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2ea4:	08 95       	ret

00002ea6 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2ea6:	84 b1       	in	r24, 0x04	; 4
    2ea8:	80 68       	ori	r24, 0x80	; 128
    2eaa:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2eac:	85 b1       	in	r24, 0x05	; 5
    2eae:	80 68       	ori	r24, 0x80	; 128
    2eb0:	85 b9       	out	0x05, r24	; 5
    2eb2:	08 95       	ret

00002eb4 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2eb4:	83 b1       	in	r24, 0x03	; 3
    2eb6:	80 68       	ori	r24, 0x80	; 128
    2eb8:	83 b9       	out	0x03, r24	; 3
    2eba:	08 95       	ret

00002ebc <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2ebc:	f4 df       	rcall	.-24     	; 0x2ea6 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2ebe:	2f ef       	ldi	r18, 0xFF	; 255
    2ec0:	80 e7       	ldi	r24, 0x70	; 112
    2ec2:	92 e0       	ldi	r25, 0x02	; 2
    2ec4:	21 50       	subi	r18, 0x01	; 1
    2ec6:	80 40       	sbci	r24, 0x00	; 0
    2ec8:	90 40       	sbci	r25, 0x00	; 0
    2eca:	e1 f7       	brne	.-8      	; 0x2ec4 <vApplicationMallocFailedHook+0x8>
    2ecc:	00 c0       	rjmp	.+0      	; 0x2ece <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2ece:	00 00       	nop
    2ed0:	f1 df       	rcall	.-30     	; 0x2eb4 <prvBlinkMainLed>
    2ed2:	f5 cf       	rjmp	.-22     	; 0x2ebe <vApplicationMallocFailedHook+0x2>

00002ed4 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2ed4:	e8 df       	rcall	.-48     	; 0x2ea6 <prvSetMainLedOn>
    2ed6:	2f ef       	ldi	r18, 0xFF	; 255
    2ed8:	87 ea       	ldi	r24, 0xA7	; 167
    2eda:	91 e6       	ldi	r25, 0x61	; 97
    2edc:	21 50       	subi	r18, 0x01	; 1
    2ede:	80 40       	sbci	r24, 0x00	; 0
    2ee0:	90 40       	sbci	r25, 0x00	; 0
    2ee2:	e1 f7       	brne	.-8      	; 0x2edc <vApplicationStackOverflowHook+0x8>
    2ee4:	00 c0       	rjmp	.+0      	; 0x2ee6 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2ee6:	00 00       	nop
    2ee8:	e5 df       	rcall	.-54     	; 0x2eb4 <prvBlinkMainLed>
    2eea:	f5 cf       	rjmp	.-22     	; 0x2ed6 <vApplicationStackOverflowHook+0x2>

00002eec <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    2eec:	0f 93       	push	r16
    2eee:	1f 93       	push	r17
    2ef0:	cf 93       	push	r28
    2ef2:	df 93       	push	r29
    2ef4:	cd b7       	in	r28, 0x3d	; 61
    2ef6:	de b7       	in	r29, 0x3e	; 62
    2ef8:	64 97       	sbiw	r28, 0x14	; 20
    2efa:	0f b6       	in	r0, 0x3f	; 63
    2efc:	f8 94       	cli
    2efe:	de bf       	out	0x3e, r29	; 62
    2f00:	0f be       	out	0x3f, r0	; 63
    2f02:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	0e 94 7d 22 	call	0x44fa	; 0x44fa <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    2f0a:	ed d2       	rcall	.+1498   	; 0x34e6 <lora_driver_rn2483FactoryReset>
    2f0c:	69 d5       	rcall	.+2770   	; 0x39e0 <lora_driver_mapReturnCodeToText>
    2f0e:	9f 93       	push	r25
    2f10:	8f 93       	push	r24
    2f12:	8f e4       	ldi	r24, 0x4F	; 79
    2f14:	92 e0       	ldi	r25, 0x02	; 2
    2f16:	9f 93       	push	r25
    2f18:	8f 93       	push	r24
    2f1a:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    2f1e:	61 d4       	rcall	.+2242   	; 0x37e2 <lora_driver_configureToEu868>
    2f20:	5f d5       	rcall	.+2750   	; 0x39e0 <lora_driver_mapReturnCodeToText>
    2f22:	9f 93       	push	r25
    2f24:	8f 93       	push	r24
    2f26:	82 e6       	ldi	r24, 0x62	; 98
    2f28:	92 e0       	ldi	r25, 0x02	; 2
    2f2a:	9f 93       	push	r25
    2f2c:	8f 93       	push	r24
    2f2e:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <printf>
    2f32:	8e 01       	movw	r16, r28
    2f34:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    2f36:	1f 4f       	sbci	r17, 0xFF	; 255
    2f38:	c8 01       	movw	r24, r16
    2f3a:	e7 d2       	rcall	.+1486   	; 0x350a <lora_driver_getRn2483Hweui>
    2f3c:	51 d5       	rcall	.+2722   	; 0x39e0 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    2f3e:	1f 93       	push	r17
    2f40:	0f 93       	push	r16
    2f42:	9f 93       	push	r25
    2f44:	8f 93       	push	r24
    2f46:	8b e7       	ldi	r24, 0x7B	; 123
    2f48:	92 e0       	ldi	r25, 0x02	; 2
    2f4a:	9f 93       	push	r25
    2f4c:	8f 93       	push	r24
    2f4e:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    2f52:	c8 01       	movw	r24, r16
    2f54:	f6 d2       	rcall	.+1516   	; 0x3542 <lora_driver_setDeviceIdentifier>
    2f56:	44 d5       	rcall	.+2696   	; 0x39e0 <lora_driver_mapReturnCodeToText>
    2f58:	9f 93       	push	r25
    2f5a:	8f 93       	push	r24
    2f5c:	1f 93       	push	r17
    2f5e:	0f 93       	push	r16
    2f60:	8f e8       	ldi	r24, 0x8F	; 143
    2f62:	92 e0       	ldi	r25, 0x02	; 2
    2f64:	9f 93       	push	r25
    2f66:	8f 93       	push	r24
    2f68:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    2f6c:	a8 01       	movw	r20, r16
    2f6e:	64 ea       	ldi	r22, 0xA4	; 164
    2f70:	72 e0       	ldi	r23, 0x02	; 2
    2f72:	85 ec       	ldi	r24, 0xC5	; 197
    2f74:	92 e0       	ldi	r25, 0x02	; 2
    2f76:	13 d5       	rcall	.+2598   	; 0x399e <lora_driver_setOtaaIdentity>
    2f78:	33 d5       	rcall	.+2662   	; 0x39e0 <lora_driver_mapReturnCodeToText>
    2f7a:	9f 93       	push	r25
    2f7c:	8f 93       	push	r24
    2f7e:	1f 93       	push	r17
    2f80:	0f 93       	push	r16
    2f82:	84 ea       	ldi	r24, 0xA4	; 164
    2f84:	92 e0       	ldi	r25, 0x02	; 2
    2f86:	9f 93       	push	r25
    2f88:	8f 93       	push	r24
    2f8a:	85 ec       	ldi	r24, 0xC5	; 197
    2f8c:	92 e0       	ldi	r25, 0x02	; 2
    2f8e:	9f 93       	push	r25
    2f90:	8f 93       	push	r24
    2f92:	86 ed       	ldi	r24, 0xD6	; 214
    2f94:	92 e0       	ldi	r25, 0x02	; 2
    2f96:	9f 93       	push	r25
    2f98:	8f 93       	push	r24
    2f9a:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    2f9e:	04 d3       	rcall	.+1544   	; 0x35a8 <lora_driver_saveMac>
    2fa0:	1f d5       	rcall	.+2622   	; 0x39e0 <lora_driver_mapReturnCodeToText>
    2fa2:	9f 93       	push	r25
    2fa4:	8f 93       	push	r24
    2fa6:	8c e0       	ldi	r24, 0x0C	; 12
    2fa8:	93 e0       	ldi	r25, 0x03	; 3
    2faa:	9f 93       	push	r25
    2fac:	8f 93       	push	r24
    2fae:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    2fb2:	0f b6       	in	r0, 0x3f	; 63
    2fb4:	f8 94       	cli
    2fb6:	de bf       	out	0x3e, r29	; 62
    2fb8:	0f be       	out	0x3f, r0	; 63
    2fba:	cd bf       	out	0x3d, r28	; 61
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	ee d3       	rcall	.+2012   	; 0x379c <lora_driver_setAdaptiveDataRate>
    2fc0:	0f d5       	rcall	.+2590   	; 0x39e0 <lora_driver_mapReturnCodeToText>
    2fc2:	9f 93       	push	r25
    2fc4:	8f 93       	push	r24
    2fc6:	8b e1       	ldi	r24, 0x1B	; 27
    2fc8:	93 e0       	ldi	r25, 0x03	; 3
    2fca:	9f 93       	push	r25
    2fcc:	8f 93       	push	r24
    2fce:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    2fd2:	84 ef       	ldi	r24, 0xF4	; 244
    2fd4:	91 e0       	ldi	r25, 0x01	; 1
    2fd6:	ed d3       	rcall	.+2010   	; 0x37b2 <lora_driver_setReceiveDelay>
    2fd8:	03 d5       	rcall	.+2566   	; 0x39e0 <lora_driver_mapReturnCodeToText>
    2fda:	9f 93       	push	r25
    2fdc:	8f 93       	push	r24
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	8f 93       	push	r24
    2fe2:	84 ef       	ldi	r24, 0xF4	; 244
    2fe4:	8f 93       	push	r24
    2fe6:	8c e3       	ldi	r24, 0x3C	; 60
    2fe8:	93 e0       	ldi	r25, 0x03	; 3
    2fea:	9f 93       	push	r25
    2fec:	8f 93       	push	r24
    2fee:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <printf>
    2ff2:	0f b6       	in	r0, 0x3f	; 63
    2ff4:	f8 94       	cli
    2ff6:	de bf       	out	0x3e, r29	; 62
    2ff8:	0f be       	out	0x3f, r0	; 63
    2ffa:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    2ffc:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    2ffe:	80 e0       	ldi	r24, 0x00	; 0
    3000:	d9 d2       	rcall	.+1458   	; 0x35b4 <lora_driver_join>
    3002:	08 2f       	mov	r16, r24
    3004:	ed d4       	rcall	.+2522   	; 0x39e0 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3006:	9f 93       	push	r25
    3008:	8f 93       	push	r24
    300a:	1f 92       	push	r1
    300c:	1f 93       	push	r17
    300e:	8c e5       	ldi	r24, 0x5C	; 92
    3010:	93 e0       	ldi	r25, 0x03	; 3
    3012:	9f 93       	push	r25
    3014:	8f 93       	push	r24
    3016:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <printf>
    301a:	0f 90       	pop	r0
    301c:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    301e:	0f 90       	pop	r0
    3020:	0f 90       	pop	r0
    3022:	0f 90       	pop	r0
    3024:	0f 90       	pop	r0
    3026:	08 30       	cpi	r16, 0x08	; 8
    3028:	59 f0       	breq	.+22     	; 0x3040 <_lora_setup+0x154>
    302a:	80 e0       	ldi	r24, 0x00	; 0
    302c:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3030:	66 e3       	ldi	r22, 0x36	; 54
    3032:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <vTaskDelay>
    303c:	11 50       	subi	r17, 0x01	; 1
    303e:	f9 f6       	brne	.-66     	; 0x2ffe <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3040:	08 30       	cpi	r16, 0x08	; 8
    3042:	21 f4       	brne	.+8      	; 0x304c <_lora_setup+0x160>

	if (rc == LORA_ACCEPTED)
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	0e 94 c3 22 	call	0x4586	; 0x4586 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    304a:	09 c0       	rjmp	.+18     	; 0x305e <_lora_setup+0x172>
    304c:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    304e:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3052:	80 e0       	ldi	r24, 0x00	; 0
    3054:	0e 94 a0 22 	call	0x4540	; 0x4540 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3058:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    305c:	fd cf       	rjmp	.-6      	; 0x3058 <_lora_setup+0x16c>
    305e:	64 96       	adiw	r28, 0x14	; 20
    3060:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    3062:	f8 94       	cli
    3064:	de bf       	out	0x3e, r29	; 62
    3066:	0f be       	out	0x3f, r0	; 63
    3068:	cd bf       	out	0x3d, r28	; 61
    306a:	df 91       	pop	r29
    306c:	cf 91       	pop	r28
    306e:	1f 91       	pop	r17
    3070:	0f 91       	pop	r16
    3072:	08 95       	ret

00003074 <lora_handler_task>:
    3074:	cf 93       	push	r28
    3076:	df 93       	push	r29

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    3078:	00 d0       	rcall	.+0      	; 0x307a <lora_handler_task+0x6>
    307a:	1f 92       	push	r1
    307c:	cd b7       	in	r28, 0x3d	; 61
    307e:	de b7       	in	r29, 0x3e	; 62
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	23 d2       	rcall	.+1094   	; 0x34ca <lora_driver_resetRn2483>
	vTaskDelay(2);
    3084:	62 e0       	ldi	r22, 0x02	; 2
    3086:	70 e0       	ldi	r23, 0x00	; 0
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <vTaskDelay>
	lora_driver_resetRn2483(0);
    3090:	80 e0       	ldi	r24, 0x00	; 0
    3092:	1b d2       	rcall	.+1078   	; 0x34ca <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3094:	66 e9       	ldi	r22, 0x96	; 150
    3096:	70 e0       	ldi	r23, 0x00	; 0
    3098:	80 e0       	ldi	r24, 0x00	; 0
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    30a0:	cd d1       	rcall	.+922    	; 0x343c <lora_driver_flushBuffers>

	_lora_setup();
    30a2:	24 df       	rcall	.-440    	; 0x2eec <_lora_setup>
    30a4:	e1 e9       	ldi	r30, 0x91	; 145

	_uplink_payload.len = 6;
    30a6:	f5 e1       	ldi	r31, 0x15	; 21
    30a8:	86 e0       	ldi	r24, 0x06	; 6
    30aa:	81 83       	std	Z+1, r24	; 0x01
    30ac:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    30ae:	80 83       	st	Z, r24
    30b0:	0e 94 76 0c 	call	0x18ec	; 0x18ec <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    30b4:	69 83       	std	Y+1, r22	; 0x01
    30b6:	7a 83       	std	Y+2, r23	; 0x02
    30b8:	8b 83       	std	Y+3, r24	; 0x03
    30ba:	9c 83       	std	Y+4, r25	; 0x04
    30bc:	48 ea       	ldi	r20, 0xA8	; 168
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    30be:	58 e4       	ldi	r21, 0x48	; 72
    30c0:	60 e0       	ldi	r22, 0x00	; 0
    30c2:	70 e0       	ldi	r23, 0x00	; 0
    30c4:	ce 01       	movw	r24, r28
    30c6:	01 96       	adiw	r24, 0x01	; 1
    30c8:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <xTaskDelayUntil>
    30cc:	e1 e9       	ldi	r30, 0x91	; 145
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
    30ce:	f5 e1       	ldi	r31, 0x15	; 21
    30d0:	80 e3       	ldi	r24, 0x30	; 48
    30d2:	82 83       	std	Z+2, r24	; 0x02
    30d4:	89 e3       	ldi	r24, 0x39	; 57
		_uplink_payload.bytes[1] = hum & 0xFF;
    30d6:	83 83       	std	Z+3, r24	; 0x03
    30d8:	82 e0       	ldi	r24, 0x02	; 2
		_uplink_payload.bytes[2] = temp >> 8;
    30da:	84 83       	std	Z+4, r24	; 0x04
    30dc:	83 ea       	ldi	r24, 0xA3	; 163
		_uplink_payload.bytes[3] = temp & 0xFF;
    30de:	85 83       	std	Z+5, r24	; 0x05
    30e0:	84 e0       	ldi	r24, 0x04	; 4
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    30e2:	86 83       	std	Z+6, r24	; 0x06
    30e4:	8a e1       	ldi	r24, 0x1A	; 26
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    30e6:	87 83       	std	Z+7, r24	; 0x07
    30e8:	83 e0       	ldi	r24, 0x03	; 3

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    30ea:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    30ee:	61 e9       	ldi	r22, 0x91	; 145
    30f0:	75 e1       	ldi	r23, 0x15	; 21
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	88 d2       	rcall	.+1296   	; 0x3606 <lora_driver_sendUploadMessage>
    30f6:	74 d4       	rcall	.+2280   	; 0x39e0 <lora_driver_mapReturnCodeToText>
    30f8:	9f 93       	push	r25
    30fa:	8f 93       	push	r24
    30fc:	8c e7       	ldi	r24, 0x7C	; 124
    30fe:	93 e0       	ldi	r25, 0x03	; 3
    3100:	9f 93       	push	r25
    3102:	8f 93       	push	r24
    3104:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <printf>
    3108:	0f 90       	pop	r0
    310a:	0f 90       	pop	r0
    310c:	0f 90       	pop	r0
    310e:	0f 90       	pop	r0
    3110:	d5 cf       	rjmp	.-86     	; 0x30bc <lora_handler_task+0x48>

00003112 <lora_handler_initialise>:
    3112:	ef 92       	push	r14
void lora_handler_task( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    3114:	ff 92       	push	r15
    3116:	0f 93       	push	r16
	xTaskCreate(
    3118:	e1 2c       	mov	r14, r1
    311a:	f1 2c       	mov	r15, r1
    311c:	08 2f       	mov	r16, r24
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	48 e8       	ldi	r20, 0x88	; 136
    3124:	51 e0       	ldi	r21, 0x01	; 1
    3126:	61 e9       	ldi	r22, 0x91	; 145
    3128:	73 e0       	ldi	r23, 0x03	; 3
    312a:	8a e3       	ldi	r24, 0x3A	; 58
    312c:	98 e1       	ldi	r25, 0x18	; 24
    312e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3132:	0f 91       	pop	r16
    3134:	ff 90       	pop	r15
    3136:	ef 90       	pop	r14
    3138:	08 95       	ret

0000313a <initialiseSystem>:
			puts("issue 2");
		}
		humidity = hih8120_getHumidity();
		temp = hih8120_getTemperature();

		printf("----END----");
    313a:	81 b1       	in	r24, 0x01	; 1
    313c:	80 63       	ori	r24, 0x30	; 48
    313e:	81 b9       	out	0x01, r24	; 1
    3140:	80 e0       	ldi	r24, 0x00	; 0
    3142:	0e 94 28 21 	call	0x4250	; 0x4250 <stdio_initialise>
    3146:	85 e0       	ldi	r24, 0x05	; 5
    3148:	0e 94 2f 22 	call	0x445e	; 0x445e <status_leds_initialise>
    314c:	60 e0       	ldi	r22, 0x00	; 0
    314e:	70 e0       	ldi	r23, 0x00	; 0
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	7b d1       	rcall	.+758    	; 0x344a <lora_driver_initialise>
    3154:	83 e0       	ldi	r24, 0x03	; 3
    3156:	dd df       	rcall	.-70     	; 0x3112 <lora_handler_initialise>
    3158:	41 d0       	rcall	.+130    	; 0x31dc <hih8120_initialise>
    315a:	81 11       	cpse	r24, r1
    315c:	05 c0       	rjmp	.+10     	; 0x3168 <initialiseSystem+0x2e>
    315e:	88 ee       	ldi	r24, 0xE8	; 232
    3160:	93 e0       	ldi	r25, 0x03	; 3
    3162:	0c 94 d5 27 	jmp	0x4faa	; 0x4faa <puts>
    3166:	08 95       	ret
    3168:	8c ef       	ldi	r24, 0xFC	; 252
    316a:	93 e0       	ldi	r25, 0x03	; 3
    316c:	0c 94 d5 27 	jmp	0x4faa	; 0x4faa <puts>
    3170:	08 95       	ret

00003172 <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    3172:	e3 df       	rcall	.-58     	; 0x313a <initialiseSystem>
	printf("Program Started!!\n");
    3174:	8b e0       	ldi	r24, 0x0B	; 11
    3176:	94 e0       	ldi	r25, 0x04	; 4
    3178:	0e 94 d5 27 	call	0x4faa	; 0x4faa <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    317c:	0e 94 38 0c 	call	0x1870	; 0x1870 <vTaskStartScheduler>
    3180:	ff cf       	rjmp	.-2      	; 0x3180 <main+0xe>

00003182 <_hihTwiCallback>:
    3182:	65 30       	cpi	r22, 0x05	; 5
    3184:	f1 f4       	brne	.+60     	; 0x31c2 <_hihTwiCallback+0x40>
    3186:	fa 01       	movw	r30, r20
    3188:	80 81       	ld	r24, Z
    318a:	8f 73       	andi	r24, 0x3F	; 63
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	98 2f       	mov	r25, r24
    3190:	88 27       	eor	r24, r24
    3192:	21 81       	ldd	r18, Z+1	; 0x01
    3194:	82 2b       	or	r24, r18
    3196:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    319a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    319e:	82 81       	ldd	r24, Z+2	; 0x02
    31a0:	f0 e4       	ldi	r31, 0x40	; 64
    31a2:	8f 9f       	mul	r24, r31
    31a4:	c0 01       	movw	r24, r0
    31a6:	11 24       	eor	r1, r1
    31a8:	fa 01       	movw	r30, r20
    31aa:	23 81       	ldd	r18, Z+3	; 0x03
    31ac:	26 95       	lsr	r18
    31ae:	26 95       	lsr	r18
    31b0:	82 2b       	or	r24, r18
    31b2:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    31b6:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	80 93 a7 15 	sts	0x15A7, r24	; 0x8015a7 <_measuringIsReady>
    31c0:	08 95       	ret
    31c2:	64 30       	cpi	r22, 0x04	; 4
    31c4:	51 f0       	breq	.+20     	; 0x31da <_hihTwiCallback+0x58>
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	90 e4       	ldi	r25, 0x40	; 64
    31ca:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    31ce:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    31d2:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    31d6:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    31da:	08 95       	ret

000031dc <hih8120_initialise>:
    31dc:	0f 93       	push	r16
    31de:	1f 93       	push	r17
    31e0:	01 ec       	ldi	r16, 0xC1	; 193
    31e2:	18 e1       	ldi	r17, 0x18	; 24
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	34 e2       	ldi	r19, 0x24	; 36
    31e8:	44 ef       	ldi	r20, 0xF4	; 244
    31ea:	50 e0       	ldi	r21, 0x00	; 0
    31ec:	60 e0       	ldi	r22, 0x00	; 0
    31ee:	87 e2       	ldi	r24, 0x27	; 39
    31f0:	0e 94 04 23 	call	0x4608	; 0x4608 <twiCreate>
    31f4:	90 93 a9 15 	sts	0x15A9, r25	; 0x8015a9 <_hih8120Handler+0x1>
    31f8:	80 93 a8 15 	sts	0x15A8, r24	; 0x8015a8 <_hih8120Handler>
    31fc:	21 e0       	ldi	r18, 0x01	; 1
    31fe:	89 2b       	or	r24, r25
    3200:	09 f0       	breq	.+2      	; 0x3204 <hih8120_initialise+0x28>
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	82 2f       	mov	r24, r18
    3206:	1f 91       	pop	r17
    3208:	0f 91       	pop	r16
    320a:	08 95       	ret

0000320c <_serialCallBack>:
    320c:	0f 93       	push	r16
    320e:	1f 93       	push	r17
    3210:	cf 93       	push	r28
    3212:	df 93       	push	r29
    3214:	1f 92       	push	r1
    3216:	1f 92       	push	r1
    3218:	cd b7       	in	r28, 0x3d	; 61
    321a:	de b7       	in	r29, 0x3e	; 62
    321c:	8c 01       	movw	r16, r24
    321e:	19 82       	std	Y+1, r1	; 0x01
    3220:	2d c0       	rjmp	.+90     	; 0x327c <_serialCallBack+0x70>
    3222:	e0 91 e1 15 	lds	r30, 0x15E1	; 0x8015e1 <rec_buf_inp.2878>
    3226:	ec 32       	cpi	r30, 0x2C	; 44
    3228:	50 f4       	brcc	.+20     	; 0x323e <_serialCallBack+0x32>
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	8e 0f       	add	r24, r30
    322e:	80 93 e1 15 	sts	0x15E1, r24	; 0x8015e1 <rec_buf_inp.2878>
    3232:	f0 e0       	ldi	r31, 0x00	; 0
    3234:	ed 5e       	subi	r30, 0xED	; 237
    3236:	f9 4e       	sbci	r31, 0xE9	; 233
    3238:	8a 81       	ldd	r24, Y+2	; 0x02
    323a:	80 83       	st	Z, r24
    323c:	02 c0       	rjmp	.+4      	; 0x3242 <_serialCallBack+0x36>
    323e:	10 92 e1 15 	sts	0x15E1, r1	; 0x8015e1 <rec_buf_inp.2878>
    3242:	8a 81       	ldd	r24, Y+2	; 0x02
    3244:	8a 30       	cpi	r24, 0x0A	; 10
    3246:	d1 f4       	brne	.+52     	; 0x327c <_serialCallBack+0x70>
    3248:	40 91 e1 15 	lds	r20, 0x15E1	; 0x8015e1 <rec_buf_inp.2878>
    324c:	50 e0       	ldi	r21, 0x00	; 0
    324e:	fa 01       	movw	r30, r20
    3250:	ef 5e       	subi	r30, 0xEF	; 239
    3252:	f9 4e       	sbci	r31, 0xE9	; 233
    3254:	10 82       	st	Z, r1
    3256:	41 50       	subi	r20, 0x01	; 1
    3258:	51 09       	sbc	r21, r1
    325a:	9e 01       	movw	r18, r28
    325c:	2f 5f       	subi	r18, 0xFF	; 255
    325e:	3f 4f       	sbci	r19, 0xFF	; 255
    3260:	63 e1       	ldi	r22, 0x13	; 19
    3262:	76 e1       	ldi	r23, 0x16	; 22
    3264:	80 91 e4 15 	lds	r24, 0x15E4	; 0x8015e4 <_serialReplyBufferHandle>
    3268:	90 91 e5 15 	lds	r25, 0x15E5	; 0x8015e5 <_serialReplyBufferHandle+0x1>
    326c:	0e 94 15 09 	call	0x122a	; 0x122a <xStreamBufferSendFromISR>
    3270:	89 81       	ldd	r24, Y+1	; 0x01
    3272:	81 11       	cpse	r24, r1
    3274:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    3278:	10 92 e1 15 	sts	0x15E1, r1	; 0x8015e1 <rec_buf_inp.2878>
    327c:	be 01       	movw	r22, r28
    327e:	6e 5f       	subi	r22, 0xFE	; 254
    3280:	7f 4f       	sbci	r23, 0xFF	; 255
    3282:	c8 01       	movw	r24, r16
    3284:	4f d5       	rcall	.+2718   	; 0x3d24 <serial_getByte>
    3286:	88 23       	and	r24, r24
    3288:	61 f2       	breq	.-104    	; 0x3222 <_serialCallBack+0x16>
    328a:	0f 90       	pop	r0
    328c:	0f 90       	pop	r0
    328e:	df 91       	pop	r29
    3290:	cf 91       	pop	r28
    3292:	1f 91       	pop	r17
    3294:	0f 91       	pop	r16
    3296:	08 95       	ret

00003298 <_uploadMessage>:
    3298:	0f 93       	push	r16
    329a:	1f 93       	push	r17
    329c:	cf 93       	push	r28
    329e:	df 93       	push	r29
    32a0:	8c 01       	movw	r16, r24
    32a2:	eb 01       	movw	r28, r22
    32a4:	80 91 e4 15 	lds	r24, 0x15E4	; 0x8015e4 <_serialReplyBufferHandle>
    32a8:	90 91 e5 15 	lds	r25, 0x15E5	; 0x8015e5 <_serialReplyBufferHandle+0x1>
    32ac:	0e 94 22 08 	call	0x1044	; 0x1044 <xStreamBufferReset>
    32b0:	b8 01       	movw	r22, r16
    32b2:	8a ea       	ldi	r24, 0xAA	; 170
    32b4:	95 e1       	ldi	r25, 0x15	; 21
    32b6:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <strcpy>
    32ba:	20 97       	sbiw	r28, 0x00	; 0
    32bc:	79 f0       	breq	.+30     	; 0x32dc <_uploadMessage+0x44>
    32be:	ea ea       	ldi	r30, 0xAA	; 170
    32c0:	f5 e1       	ldi	r31, 0x15	; 21
    32c2:	01 90       	ld	r0, Z+
    32c4:	00 20       	and	r0, r0
    32c6:	e9 f7       	brne	.-6      	; 0x32c2 <_uploadMessage+0x2a>
    32c8:	31 97       	sbiw	r30, 0x01	; 1
    32ca:	80 e2       	ldi	r24, 0x20	; 32
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	91 83       	std	Z+1, r25	; 0x01
    32d0:	80 83       	st	Z, r24
    32d2:	be 01       	movw	r22, r28
    32d4:	8a ea       	ldi	r24, 0xAA	; 170
    32d6:	95 e1       	ldi	r25, 0x15	; 21
    32d8:	0e 94 98 27 	call	0x4f30	; 0x4f30 <strcat>
    32dc:	ea ea       	ldi	r30, 0xAA	; 170
    32de:	f5 e1       	ldi	r31, 0x15	; 21
    32e0:	df 01       	movw	r26, r30
    32e2:	0d 90       	ld	r0, X+
    32e4:	00 20       	and	r0, r0
    32e6:	e9 f7       	brne	.-6      	; 0x32e2 <_uploadMessage+0x4a>
    32e8:	11 97       	sbiw	r26, 0x01	; 1
    32ea:	8d e0       	ldi	r24, 0x0D	; 13
    32ec:	9a e0       	ldi	r25, 0x0A	; 10
    32ee:	11 96       	adiw	r26, 0x01	; 1
    32f0:	9c 93       	st	X, r25
    32f2:	8e 93       	st	-X, r24
    32f4:	12 96       	adiw	r26, 0x02	; 2
    32f6:	1c 92       	st	X, r1
    32f8:	01 90       	ld	r0, Z+
    32fa:	00 20       	and	r0, r0
    32fc:	e9 f7       	brne	.-6      	; 0x32f8 <_uploadMessage+0x60>
    32fe:	31 97       	sbiw	r30, 0x01	; 1
    3300:	ea 5a       	subi	r30, 0xAA	; 170
    3302:	f5 41       	sbci	r31, 0x15	; 21
    3304:	ae 2f       	mov	r26, r30
    3306:	8a ea       	ldi	r24, 0xAA	; 170
    3308:	95 e1       	ldi	r25, 0x15	; 21
    330a:	ac 01       	movw	r20, r24
    330c:	6a 2f       	mov	r22, r26
    330e:	80 91 e6 15 	lds	r24, 0x15E6	; 0x8015e6 <_rn2483_serial>
    3312:	90 91 e7 15 	lds	r25, 0x15E7	; 0x8015e7 <_rn2483_serial+0x1>
    3316:	b1 d4       	rcall	.+2402   	; 0x3c7a <serial_sendBytes>
    3318:	81 11       	cpse	r24, r1
    331a:	11 c0       	rjmp	.+34     	; 0x333e <_uploadMessage+0xa6>
    331c:	08 e2       	ldi	r16, 0x28	; 40
    331e:	15 e0       	ldi	r17, 0x05	; 5
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	4d e2       	ldi	r20, 0x2D	; 45
    3326:	50 e0       	ldi	r21, 0x00	; 0
    3328:	6d e6       	ldi	r22, 0x6D	; 109
    332a:	76 e1       	ldi	r23, 0x16	; 22
    332c:	80 91 e4 15 	lds	r24, 0x15E4	; 0x8015e4 <_serialReplyBufferHandle>
    3330:	90 91 e5 15 	lds	r25, 0x15E5	; 0x8015e5 <_serialReplyBufferHandle+0x1>
    3334:	0e 94 59 09 	call	0x12b2	; 0x12b2 <xStreamBufferReceive>
    3338:	8d e6       	ldi	r24, 0x6D	; 109
    333a:	96 e1       	ldi	r25, 0x16	; 22
    333c:	02 c0       	rjmp	.+4      	; 0x3342 <_uploadMessage+0xaa>
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	df 91       	pop	r29
    3344:	cf 91       	pop	r28
    3346:	1f 91       	pop	r17
    3348:	0f 91       	pop	r16
    334a:	08 95       	ret

0000334c <_reply2ReturnCode>:
    334c:	2f 92       	push	r2
    334e:	3f 92       	push	r3
    3350:	4f 92       	push	r4
    3352:	5f 92       	push	r5
    3354:	6f 92       	push	r6
    3356:	7f 92       	push	r7
    3358:	8f 92       	push	r8
    335a:	9f 92       	push	r9
    335c:	af 92       	push	r10
    335e:	bf 92       	push	r11
    3360:	cf 92       	push	r12
    3362:	df 92       	push	r13
    3364:	ef 92       	push	r14
    3366:	ff 92       	push	r15
    3368:	0f 93       	push	r16
    336a:	1f 93       	push	r17
    336c:	cf 93       	push	r28
    336e:	df 93       	push	r29
    3370:	5c 01       	movw	r10, r24
    3372:	fc 01       	movw	r30, r24
    3374:	01 90       	ld	r0, Z+
    3376:	00 20       	and	r0, r0
    3378:	e9 f7       	brne	.-6      	; 0x3374 <_reply2ReturnCode+0x28>
    337a:	31 97       	sbiw	r30, 0x01	; 1
    337c:	6f 01       	movw	r12, r30
    337e:	c8 1a       	sub	r12, r24
    3380:	d9 0a       	sbc	r13, r25
    3382:	5c 2c       	mov	r5, r12
    3384:	0f 2e       	mov	r0, r31
    3386:	f6 eb       	ldi	r31, 0xB6	; 182
    3388:	8f 2e       	mov	r8, r31
    338a:	f6 e0       	ldi	r31, 0x06	; 6
    338c:	9f 2e       	mov	r9, r31
    338e:	f0 2d       	mov	r31, r0
    3390:	e1 2c       	mov	r14, r1
    3392:	f1 2c       	mov	r15, r1
    3394:	4c 2c       	mov	r4, r12
    3396:	37 01       	movw	r6, r14
    3398:	f4 01       	movw	r30, r8
    339a:	01 81       	ldd	r16, Z+1	; 0x01
    339c:	12 81       	ldd	r17, Z+2	; 0x02
    339e:	e8 01       	movw	r28, r16
    33a0:	09 90       	ld	r0, Y+
    33a2:	00 20       	and	r0, r0
    33a4:	e9 f7       	brne	.-6      	; 0x33a0 <_reply2ReturnCode+0x54>
    33a6:	21 97       	sbiw	r28, 0x01	; 1
    33a8:	c0 1b       	sub	r28, r16
    33aa:	d1 0b       	sbc	r29, r17
    33ac:	3c 2e       	mov	r3, r28
    33ae:	f9 e0       	ldi	r31, 0x09	; 9
    33b0:	cf 16       	cp	r12, r31
    33b2:	d1 04       	cpc	r13, r1
    33b4:	58 f0       	brcs	.+22     	; 0x33cc <_reply2ReturnCode+0x80>
    33b6:	f4 01       	movw	r30, r8
    33b8:	20 80       	ld	r2, Z
    33ba:	fe e0       	ldi	r31, 0x0E	; 14
    33bc:	2f 12       	cpse	r2, r31
    33be:	06 c0       	rjmp	.+12     	; 0x33cc <_reply2ReturnCode+0x80>
    33c0:	b8 01       	movw	r22, r16
    33c2:	c5 01       	movw	r24, r10
    33c4:	0e 94 73 27 	call	0x4ee6	; 0x4ee6 <strcasestr>
    33c8:	89 2b       	or	r24, r25
    33ca:	09 f5       	brne	.+66     	; 0x340e <_reply2ReturnCode+0xc2>
    33cc:	44 2d       	mov	r20, r4
    33ce:	35 14       	cp	r3, r5
    33d0:	08 f4       	brcc	.+2      	; 0x33d4 <_reply2ReturnCode+0x88>
    33d2:	4c 2f       	mov	r20, r28
    33d4:	50 e0       	ldi	r21, 0x00	; 0
    33d6:	b8 01       	movw	r22, r16
    33d8:	c5 01       	movw	r24, r10
    33da:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <strncasecmp>
    33de:	89 2b       	or	r24, r25
    33e0:	49 f4       	brne	.+18     	; 0x33f4 <_reply2ReturnCode+0xa8>
    33e2:	f3 01       	movw	r30, r6
    33e4:	ee 0f       	add	r30, r30
    33e6:	ff 1f       	adc	r31, r31
    33e8:	e6 0d       	add	r30, r6
    33ea:	f7 1d       	adc	r31, r7
    33ec:	ea 54       	subi	r30, 0x4A	; 74
    33ee:	f9 4f       	sbci	r31, 0xF9	; 249
    33f0:	20 80       	ld	r2, Z
    33f2:	0d c0       	rjmp	.+26     	; 0x340e <_reply2ReturnCode+0xc2>
    33f4:	8f ef       	ldi	r24, 0xFF	; 255
    33f6:	e8 1a       	sub	r14, r24
    33f8:	f8 0a       	sbc	r15, r24
    33fa:	e3 e0       	ldi	r30, 0x03	; 3
    33fc:	8e 0e       	add	r8, r30
    33fe:	91 1c       	adc	r9, r1
    3400:	f1 e1       	ldi	r31, 0x11	; 17
    3402:	ef 16       	cp	r14, r31
    3404:	f1 04       	cpc	r15, r1
    3406:	39 f6       	brne	.-114    	; 0x3396 <_reply2ReturnCode+0x4a>
    3408:	68 94       	set
    340a:	22 24       	eor	r2, r2
    340c:	24 f8       	bld	r2, 4
    340e:	82 2d       	mov	r24, r2
    3410:	df 91       	pop	r29
    3412:	cf 91       	pop	r28
    3414:	1f 91       	pop	r17
    3416:	0f 91       	pop	r16
    3418:	ff 90       	pop	r15
    341a:	ef 90       	pop	r14
    341c:	df 90       	pop	r13
    341e:	cf 90       	pop	r12
    3420:	bf 90       	pop	r11
    3422:	af 90       	pop	r10
    3424:	9f 90       	pop	r9
    3426:	8f 90       	pop	r8
    3428:	7f 90       	pop	r7
    342a:	6f 90       	pop	r6
    342c:	5f 90       	pop	r5
    342e:	4f 90       	pop	r4
    3430:	3f 90       	pop	r3
    3432:	2f 90       	pop	r2
    3434:	08 95       	ret

00003436 <_uploadMessageRc>:
    3436:	30 df       	rcall	.-416    	; 0x3298 <_uploadMessage>
    3438:	89 cf       	rjmp	.-238    	; 0x334c <_reply2ReturnCode>
    343a:	08 95       	ret

0000343c <lora_driver_flushBuffers>:
    343c:	80 91 e4 15 	lds	r24, 0x15E4	; 0x8015e4 <_serialReplyBufferHandle>
    3440:	90 91 e5 15 	lds	r25, 0x15E5	; 0x8015e5 <_serialReplyBufferHandle+0x1>
    3444:	0c 94 22 08 	jmp	0x1044	; 0x1044 <xStreamBufferReset>
    3448:	08 95       	ret

0000344a <lora_driver_initialise>:
    344a:	8f 92       	push	r8
    344c:	9f 92       	push	r9
    344e:	af 92       	push	r10
    3450:	cf 92       	push	r12
    3452:	ef 92       	push	r14
    3454:	0f 93       	push	r16
    3456:	1f 93       	push	r17
    3458:	cf 93       	push	r28
    345a:	c8 2f       	mov	r28, r24
    345c:	8b 01       	movw	r16, r22
    345e:	41 e0       	ldi	r20, 0x01	; 1
    3460:	60 e0       	ldi	r22, 0x00	; 0
    3462:	70 e0       	ldi	r23, 0x00	; 0
    3464:	88 ec       	ldi	r24, 0xC8	; 200
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <xStreamBufferGenericCreate>
    346c:	90 93 e5 15 	sts	0x15E5, r25	; 0x8015e5 <_serialReplyBufferHandle+0x1>
    3470:	80 93 e4 15 	sts	0x15E4, r24	; 0x8015e4 <_serialReplyBufferHandle>
    3474:	10 93 e3 15 	sts	0x15E3, r17	; 0x8015e3 <_downlinkMessageBuffer+0x1>
    3478:	00 93 e2 15 	sts	0x15E2, r16	; 0x8015e2 <_downlinkMessageBuffer>
    347c:	0f 2e       	mov	r0, r31
    347e:	f6 e0       	ldi	r31, 0x06	; 6
    3480:	8f 2e       	mov	r8, r31
    3482:	f9 e1       	ldi	r31, 0x19	; 25
    3484:	9f 2e       	mov	r9, r31
    3486:	f0 2d       	mov	r31, r0
    3488:	68 94       	set
    348a:	aa 24       	eor	r10, r10
    348c:	a6 f8       	bld	r10, 6
    348e:	68 94       	set
    3490:	cc 24       	eor	r12, r12
    3492:	c6 f8       	bld	r12, 6
    3494:	e1 2c       	mov	r14, r1
    3496:	00 e0       	ldi	r16, 0x00	; 0
    3498:	23 e0       	ldi	r18, 0x03	; 3
    349a:	40 e0       	ldi	r20, 0x00	; 0
    349c:	51 ee       	ldi	r21, 0xE1	; 225
    349e:	60 e0       	ldi	r22, 0x00	; 0
    34a0:	70 e0       	ldi	r23, 0x00	; 0
    34a2:	8c 2f       	mov	r24, r28
    34a4:	1e d3       	rcall	.+1596   	; 0x3ae2 <serial_create>
    34a6:	90 93 e7 15 	sts	0x15E7, r25	; 0x8015e7 <_rn2483_serial+0x1>
    34aa:	80 93 e6 15 	sts	0x15E6, r24	; 0x8015e6 <_rn2483_serial>
    34ae:	e7 e0       	ldi	r30, 0x07	; 7
    34b0:	f1 e0       	ldi	r31, 0x01	; 1
    34b2:	80 81       	ld	r24, Z
    34b4:	80 61       	ori	r24, 0x10	; 16
    34b6:	80 83       	st	Z, r24
    34b8:	cf 91       	pop	r28
    34ba:	1f 91       	pop	r17
    34bc:	0f 91       	pop	r16
    34be:	ef 90       	pop	r14
    34c0:	cf 90       	pop	r12
    34c2:	af 90       	pop	r10
    34c4:	9f 90       	pop	r9
    34c6:	8f 90       	pop	r8
    34c8:	08 95       	ret

000034ca <lora_driver_resetRn2483>:
    34ca:	88 23       	and	r24, r24
    34cc:	31 f0       	breq	.+12     	; 0x34da <lora_driver_resetRn2483+0x10>
    34ce:	e8 e0       	ldi	r30, 0x08	; 8
    34d0:	f1 e0       	ldi	r31, 0x01	; 1
    34d2:	80 81       	ld	r24, Z
    34d4:	8f 7e       	andi	r24, 0xEF	; 239
    34d6:	80 83       	st	Z, r24
    34d8:	08 95       	ret
    34da:	e8 e0       	ldi	r30, 0x08	; 8
    34dc:	f1 e0       	ldi	r31, 0x01	; 1
    34de:	80 81       	ld	r24, Z
    34e0:	80 61       	ori	r24, 0x10	; 16
    34e2:	80 83       	st	Z, r24
    34e4:	08 95       	ret

000034e6 <lora_driver_rn2483FactoryReset>:
    34e6:	60 e0       	ldi	r22, 0x00	; 0
    34e8:	70 e0       	ldi	r23, 0x00	; 0
    34ea:	8c e3       	ldi	r24, 0x3C	; 60
    34ec:	94 e0       	ldi	r25, 0x04	; 4
    34ee:	d4 de       	rcall	.-600    	; 0x3298 <_uploadMessage>
    34f0:	ed e6       	ldi	r30, 0x6D	; 109
    34f2:	f6 e1       	ldi	r31, 0x16	; 22
    34f4:	01 90       	ld	r0, Z+
    34f6:	00 20       	and	r0, r0
    34f8:	e9 f7       	brne	.-6      	; 0x34f4 <lora_driver_rn2483FactoryReset+0xe>
    34fa:	31 97       	sbiw	r30, 0x01	; 1
    34fc:	ed 56       	subi	r30, 0x6D	; 109
    34fe:	f6 41       	sbci	r31, 0x16	; 22
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	75 97       	sbiw	r30, 0x15	; 21
    3504:	08 f0       	brcs	.+2      	; 0x3508 <lora_driver_rn2483FactoryReset+0x22>
    3506:	80 e0       	ldi	r24, 0x00	; 0
    3508:	08 95       	ret

0000350a <lora_driver_getRn2483Hweui>:
    350a:	cf 93       	push	r28
    350c:	df 93       	push	r29
    350e:	ec 01       	movw	r28, r24
    3510:	60 e0       	ldi	r22, 0x00	; 0
    3512:	70 e0       	ldi	r23, 0x00	; 0
    3514:	8d e4       	ldi	r24, 0x4D	; 77
    3516:	94 e0       	ldi	r25, 0x04	; 4
    3518:	bf de       	rcall	.-642    	; 0x3298 <_uploadMessage>
    351a:	ed e6       	ldi	r30, 0x6D	; 109
    351c:	f6 e1       	ldi	r31, 0x16	; 22
    351e:	01 90       	ld	r0, Z+
    3520:	00 20       	and	r0, r0
    3522:	e9 f7       	brne	.-6      	; 0x351e <lora_driver_getRn2483Hweui+0x14>
    3524:	ee 57       	subi	r30, 0x7E	; 126
    3526:	f6 41       	sbci	r31, 0x16	; 22
    3528:	39 f4       	brne	.+14     	; 0x3538 <lora_driver_getRn2483Hweui+0x2e>
    352a:	6d e6       	ldi	r22, 0x6D	; 109
    352c:	76 e1       	ldi	r23, 0x16	; 22
    352e:	ce 01       	movw	r24, r28
    3530:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <strcpy>
    3534:	80 e0       	ldi	r24, 0x00	; 0
    3536:	02 c0       	rjmp	.+4      	; 0x353c <lora_driver_getRn2483Hweui+0x32>
    3538:	18 82       	st	Y, r1
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	df 91       	pop	r29
    353e:	cf 91       	pop	r28
    3540:	08 95       	ret

00003542 <lora_driver_setDeviceIdentifier>:
    3542:	fc 01       	movw	r30, r24
    3544:	01 90       	ld	r0, Z+
    3546:	00 20       	and	r0, r0
    3548:	e9 f7       	brne	.-6      	; 0x3544 <lora_driver_setDeviceIdentifier+0x2>
    354a:	9f 01       	movw	r18, r30
    354c:	21 51       	subi	r18, 0x11	; 17
    354e:	31 09       	sbc	r19, r1
    3550:	28 17       	cp	r18, r24
    3552:	39 07       	cpc	r19, r25
    3554:	29 f4       	brne	.+10     	; 0x3560 <lora_driver_setDeviceIdentifier+0x1e>
    3556:	bc 01       	movw	r22, r24
    3558:	8b e7       	ldi	r24, 0x7B	; 123
    355a:	94 e0       	ldi	r25, 0x04	; 4
    355c:	6c cf       	rjmp	.-296    	; 0x3436 <_uploadMessageRc>
    355e:	08 95       	ret
    3560:	89 e0       	ldi	r24, 0x09	; 9
    3562:	08 95       	ret

00003564 <lora_driver_setApplicationIdentifier>:
    3564:	fc 01       	movw	r30, r24
    3566:	01 90       	ld	r0, Z+
    3568:	00 20       	and	r0, r0
    356a:	e9 f7       	brne	.-6      	; 0x3566 <lora_driver_setApplicationIdentifier+0x2>
    356c:	9f 01       	movw	r18, r30
    356e:	21 51       	subi	r18, 0x11	; 17
    3570:	31 09       	sbc	r19, r1
    3572:	28 17       	cp	r18, r24
    3574:	39 07       	cpc	r19, r25
    3576:	29 f4       	brne	.+10     	; 0x3582 <lora_driver_setApplicationIdentifier+0x1e>
    3578:	bc 01       	movw	r22, r24
    357a:	8a e8       	ldi	r24, 0x8A	; 138
    357c:	94 e0       	ldi	r25, 0x04	; 4
    357e:	5b cf       	rjmp	.-330    	; 0x3436 <_uploadMessageRc>
    3580:	08 95       	ret
    3582:	89 e0       	ldi	r24, 0x09	; 9
    3584:	08 95       	ret

00003586 <lora_driver_setApplicationKey>:
    3586:	fc 01       	movw	r30, r24
    3588:	01 90       	ld	r0, Z+
    358a:	00 20       	and	r0, r0
    358c:	e9 f7       	brne	.-6      	; 0x3588 <lora_driver_setApplicationKey+0x2>
    358e:	9f 01       	movw	r18, r30
    3590:	21 52       	subi	r18, 0x21	; 33
    3592:	31 09       	sbc	r19, r1
    3594:	28 17       	cp	r18, r24
    3596:	39 07       	cpc	r19, r25
    3598:	29 f4       	brne	.+10     	; 0x35a4 <lora_driver_setApplicationKey+0x1e>
    359a:	bc 01       	movw	r22, r24
    359c:	89 e9       	ldi	r24, 0x99	; 153
    359e:	94 e0       	ldi	r25, 0x04	; 4
    35a0:	4a cf       	rjmp	.-364    	; 0x3436 <_uploadMessageRc>
    35a2:	08 95       	ret
    35a4:	89 e0       	ldi	r24, 0x09	; 9
    35a6:	08 95       	ret

000035a8 <lora_driver_saveMac>:
    35a8:	60 e0       	ldi	r22, 0x00	; 0
    35aa:	70 e0       	ldi	r23, 0x00	; 0
    35ac:	88 ed       	ldi	r24, 0xD8	; 216
    35ae:	94 e0       	ldi	r25, 0x04	; 4
    35b0:	42 cf       	rjmp	.-380    	; 0x3436 <_uploadMessageRc>
    35b2:	08 95       	ret

000035b4 <lora_driver_join>:
    35b4:	0f 93       	push	r16
    35b6:	1f 93       	push	r17
    35b8:	e8 2f       	mov	r30, r24
    35ba:	f0 e0       	ldi	r31, 0x00	; 0
    35bc:	ee 0f       	add	r30, r30
    35be:	ff 1f       	adc	r31, r31
    35c0:	ee 54       	subi	r30, 0x4E	; 78
    35c2:	f9 4f       	sbci	r31, 0xF9	; 249
    35c4:	60 81       	ld	r22, Z
    35c6:	71 81       	ldd	r23, Z+1	; 0x01
    35c8:	81 ee       	ldi	r24, 0xE1	; 225
    35ca:	94 e0       	ldi	r25, 0x04	; 4
    35cc:	34 df       	rcall	.-408    	; 0x3436 <_uploadMessageRc>
    35ce:	81 11       	cpse	r24, r1
    35d0:	14 c0       	rjmp	.+40     	; 0x35fa <lora_driver_join+0x46>
    35d2:	08 e2       	ldi	r16, 0x28	; 40
    35d4:	15 e0       	ldi	r17, 0x05	; 5
    35d6:	20 e0       	ldi	r18, 0x00	; 0
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	4d e2       	ldi	r20, 0x2D	; 45
    35dc:	50 e0       	ldi	r21, 0x00	; 0
    35de:	6d e6       	ldi	r22, 0x6D	; 109
    35e0:	76 e1       	ldi	r23, 0x16	; 22
    35e2:	80 91 e4 15 	lds	r24, 0x15E4	; 0x8015e4 <_serialReplyBufferHandle>
    35e6:	90 91 e5 15 	lds	r25, 0x15E5	; 0x8015e5 <_serialReplyBufferHandle+0x1>
    35ea:	0e 94 59 09 	call	0x12b2	; 0x12b2 <xStreamBufferReceive>
    35ee:	88 23       	and	r24, r24
    35f0:	21 f0       	breq	.+8      	; 0x35fa <lora_driver_join+0x46>
    35f2:	8d e6       	ldi	r24, 0x6D	; 109
    35f4:	96 e1       	ldi	r25, 0x16	; 22
    35f6:	aa de       	rcall	.-684    	; 0x334c <_reply2ReturnCode>
    35f8:	03 c0       	rjmp	.+6      	; 0x3600 <lora_driver_join+0x4c>
    35fa:	8d e6       	ldi	r24, 0x6D	; 109
    35fc:	96 e1       	ldi	r25, 0x16	; 22
    35fe:	a6 de       	rcall	.-692    	; 0x334c <_reply2ReturnCode>
    3600:	1f 91       	pop	r17
    3602:	0f 91       	pop	r16
    3604:	08 95       	ret

00003606 <lora_driver_sendUploadMessage>:
    3606:	0f 93       	push	r16
    3608:	1f 93       	push	r17
    360a:	cf 93       	push	r28
    360c:	df 93       	push	r29
    360e:	1f 92       	push	r1
    3610:	cd b7       	in	r28, 0x3d	; 61
    3612:	de b7       	in	r29, 0x3e	; 62
    3614:	db 01       	movw	r26, r22
    3616:	11 96       	adiw	r26, 0x01	; 1
    3618:	9c 91       	ld	r25, X
    361a:	11 97       	sbiw	r26, 0x01	; 1
    361c:	95 31       	cpi	r25, 0x15	; 21
    361e:	08 f0       	brcs	.+2      	; 0x3622 <lora_driver_sendUploadMessage+0x1c>
    3620:	b4 c0       	rjmp	.+360    	; 0x378a <lora_driver_sendUploadMessage+0x184>
    3622:	99 23       	and	r25, r25
    3624:	81 f1       	breq	.+96     	; 0x3686 <lora_driver_sendUploadMessage+0x80>
    3626:	60 e0       	ldi	r22, 0x00	; 0
    3628:	70 e0       	ldi	r23, 0x00	; 0
    362a:	27 2f       	mov	r18, r23
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	46 2f       	mov	r20, r22
    3630:	50 e0       	ldi	r21, 0x00	; 0
    3632:	fd 01       	movw	r30, r26
    3634:	e4 0f       	add	r30, r20
    3636:	f5 1f       	adc	r31, r21
    3638:	92 81       	ldd	r25, Z+2	; 0x02
    363a:	92 95       	swap	r25
    363c:	9f 70       	andi	r25, 0x0F	; 15
    363e:	9a 30       	cpi	r25, 0x0A	; 10
    3640:	10 f0       	brcs	.+4      	; 0x3646 <lora_driver_sendUploadMessage+0x40>
    3642:	99 5c       	subi	r25, 0xC9	; 201
    3644:	01 c0       	rjmp	.+2      	; 0x3648 <lora_driver_sendUploadMessage+0x42>
    3646:	90 5d       	subi	r25, 0xD0	; 208
    3648:	f9 01       	movw	r30, r18
    364a:	e2 50       	subi	r30, 0x02	; 2
    364c:	fa 4e       	sbci	r31, 0xEA	; 234
    364e:	90 83       	st	Z, r25
    3650:	2f 5f       	subi	r18, 0xFF	; 255
    3652:	3f 4f       	sbci	r19, 0xFF	; 255
    3654:	fd 01       	movw	r30, r26
    3656:	e4 0f       	add	r30, r20
    3658:	f5 1f       	adc	r31, r21
    365a:	92 81       	ldd	r25, Z+2	; 0x02
    365c:	9f 70       	andi	r25, 0x0F	; 15
    365e:	49 2f       	mov	r20, r25
    3660:	50 e0       	ldi	r21, 0x00	; 0
    3662:	4a 30       	cpi	r20, 0x0A	; 10
    3664:	51 05       	cpc	r21, r1
    3666:	14 f0       	brlt	.+4      	; 0x366c <lora_driver_sendUploadMessage+0x66>
    3668:	99 5c       	subi	r25, 0xC9	; 201
    366a:	01 c0       	rjmp	.+2      	; 0x366e <lora_driver_sendUploadMessage+0x68>
    366c:	90 5d       	subi	r25, 0xD0	; 208
    366e:	f9 01       	movw	r30, r18
    3670:	e2 50       	subi	r30, 0x02	; 2
    3672:	fa 4e       	sbci	r31, 0xEA	; 234
    3674:	90 83       	st	Z, r25
    3676:	7e 5f       	subi	r23, 0xFE	; 254
    3678:	6f 5f       	subi	r22, 0xFF	; 255
    367a:	11 96       	adiw	r26, 0x01	; 1
    367c:	9c 91       	ld	r25, X
    367e:	11 97       	sbiw	r26, 0x01	; 1
    3680:	69 17       	cp	r22, r25
    3682:	98 f2       	brcs	.-90     	; 0x362a <lora_driver_sendUploadMessage+0x24>
    3684:	01 c0       	rjmp	.+2      	; 0x3688 <lora_driver_sendUploadMessage+0x82>
    3686:	70 e0       	ldi	r23, 0x00	; 0
    3688:	e7 2f       	mov	r30, r23
    368a:	f0 e0       	ldi	r31, 0x00	; 0
    368c:	e2 50       	subi	r30, 0x02	; 2
    368e:	fa 4e       	sbci	r31, 0xEA	; 234
    3690:	10 82       	st	Z, r1
    3692:	4c 91       	ld	r20, X
    3694:	81 11       	cpse	r24, r1
    3696:	03 c0       	rjmp	.+6      	; 0x369e <lora_driver_sendUploadMessage+0x98>
    3698:	8a ee       	ldi	r24, 0xEA	; 234
    369a:	94 e0       	ldi	r25, 0x04	; 4
    369c:	02 c0       	rjmp	.+4      	; 0x36a2 <lora_driver_sendUploadMessage+0x9c>
    369e:	8c ee       	ldi	r24, 0xEC	; 236
    36a0:	94 e0       	ldi	r25, 0x04	; 4
    36a2:	2e ef       	ldi	r18, 0xFE	; 254
    36a4:	35 e1       	ldi	r19, 0x15	; 21
    36a6:	3f 93       	push	r19
    36a8:	2f 93       	push	r18
    36aa:	1f 92       	push	r1
    36ac:	4f 93       	push	r20
    36ae:	9f 93       	push	r25
    36b0:	8f 93       	push	r24
    36b2:	80 ef       	ldi	r24, 0xF0	; 240
    36b4:	94 e0       	ldi	r25, 0x04	; 4
    36b6:	9f 93       	push	r25
    36b8:	8f 93       	push	r24
    36ba:	80 e4       	ldi	r24, 0x40	; 64
    36bc:	96 e1       	ldi	r25, 0x16	; 22
    36be:	9f 93       	push	r25
    36c0:	8f 93       	push	r24
    36c2:	0e 94 05 28 	call	0x500a	; 0x500a <sprintf>
    36c6:	60 e0       	ldi	r22, 0x00	; 0
    36c8:	70 e0       	ldi	r23, 0x00	; 0
    36ca:	80 e4       	ldi	r24, 0x40	; 64
    36cc:	96 e1       	ldi	r25, 0x16	; 22
    36ce:	b3 de       	rcall	.-666    	; 0x3436 <_uploadMessageRc>
    36d0:	0f b6       	in	r0, 0x3f	; 63
    36d2:	f8 94       	cli
    36d4:	de bf       	out	0x3e, r29	; 62
    36d6:	0f be       	out	0x3f, r0	; 63
    36d8:	cd bf       	out	0x3d, r28	; 61
    36da:	81 11       	cpse	r24, r1
    36dc:	59 c0       	rjmp	.+178    	; 0x3790 <lora_driver_sendUploadMessage+0x18a>
    36de:	08 e2       	ldi	r16, 0x28	; 40
    36e0:	15 e0       	ldi	r17, 0x05	; 5
    36e2:	20 e0       	ldi	r18, 0x00	; 0
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	4d e2       	ldi	r20, 0x2D	; 45
    36e8:	50 e0       	ldi	r21, 0x00	; 0
    36ea:	6d e6       	ldi	r22, 0x6D	; 109
    36ec:	76 e1       	ldi	r23, 0x16	; 22
    36ee:	80 91 e4 15 	lds	r24, 0x15E4	; 0x8015e4 <_serialReplyBufferHandle>
    36f2:	90 91 e5 15 	lds	r25, 0x15E5	; 0x8015e5 <_serialReplyBufferHandle+0x1>
    36f6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <xStreamBufferReceive>
    36fa:	88 23       	and	r24, r24
    36fc:	09 f4       	brne	.+2      	; 0x3700 <lora_driver_sendUploadMessage+0xfa>
    36fe:	47 c0       	rjmp	.+142    	; 0x378e <lora_driver_sendUploadMessage+0x188>
    3700:	8d e6       	ldi	r24, 0x6D	; 109
    3702:	96 e1       	ldi	r25, 0x16	; 22
    3704:	23 de       	rcall	.-954    	; 0x334c <_reply2ReturnCode>
    3706:	8e 30       	cpi	r24, 0x0E	; 14
    3708:	09 f0       	breq	.+2      	; 0x370c <lora_driver_sendUploadMessage+0x106>
    370a:	42 c0       	rjmp	.+132    	; 0x3790 <lora_driver_sendUploadMessage+0x18a>
    370c:	87 e0       	ldi	r24, 0x07	; 7
    370e:	89 83       	std	Y+1, r24	; 0x01
    3710:	80 91 e2 15 	lds	r24, 0x15E2	; 0x8015e2 <_downlinkMessageBuffer>
    3714:	90 91 e3 15 	lds	r25, 0x15E3	; 0x8015e3 <_downlinkMessageBuffer+0x1>
    3718:	89 2b       	or	r24, r25
    371a:	a9 f1       	breq	.+106    	; 0x3786 <lora_driver_sendUploadMessage+0x180>
    371c:	be 01       	movw	r22, r28
    371e:	6f 5f       	subi	r22, 0xFF	; 255
    3720:	7f 4f       	sbci	r23, 0xFF	; 255
    3722:	8d e6       	ldi	r24, 0x6D	; 109
    3724:	96 e1       	ldi	r25, 0x16	; 22
    3726:	68 d1       	rcall	.+720    	; 0x39f8 <decode_port_no>
    3728:	80 93 e8 15 	sts	0x15E8, r24	; 0x8015e8 <_downlinkPayload>
    372c:	e9 81       	ldd	r30, Y+1	; 0x01
    372e:	f0 e0       	ldi	r31, 0x00	; 0
    3730:	e3 59       	subi	r30, 0x93	; 147
    3732:	f9 4e       	sbci	r31, 0xE9	; 233
    3734:	df 01       	movw	r26, r30
    3736:	0d 90       	ld	r0, X+
    3738:	00 20       	and	r0, r0
    373a:	e9 f7       	brne	.-6      	; 0x3736 <lora_driver_sendUploadMessage+0x130>
    373c:	11 97       	sbiw	r26, 0x01	; 1
    373e:	ae 1b       	sub	r26, r30
    3740:	bf 0b       	sbc	r27, r31
    3742:	aa 23       	and	r26, r26
    3744:	91 f0       	breq	.+36     	; 0x376a <lora_driver_sendUploadMessage+0x164>
    3746:	bb 27       	eor	r27, r27
    3748:	cd 01       	movw	r24, r26
    374a:	01 97       	sbiw	r24, 0x01	; 1
    374c:	9c 01       	movw	r18, r24
    374e:	12 f4       	brpl	.+4      	; 0x3754 <lora_driver_sendUploadMessage+0x14e>
    3750:	2f 5f       	subi	r18, 0xFF	; 255
    3752:	3f 4f       	sbci	r19, 0xFF	; 255
    3754:	35 95       	asr	r19
    3756:	27 95       	ror	r18
    3758:	20 93 e9 15 	sts	0x15E9, r18	; 0x8015e9 <_downlinkPayload+0x1>
    375c:	af 01       	movw	r20, r30
    375e:	4f 5f       	subi	r20, 0xFF	; 255
    3760:	5f 4f       	sbci	r21, 0xFF	; 255
    3762:	64 e1       	ldi	r22, 0x14	; 20
    3764:	8a ee       	ldi	r24, 0xEA	; 234
    3766:	95 e1       	ldi	r25, 0x15	; 21
    3768:	73 d1       	rcall	.+742    	; 0x3a50 <decode_hexadecimal_string_bytes>
    376a:	01 e0       	ldi	r16, 0x01	; 1
    376c:	10 e0       	ldi	r17, 0x00	; 0
    376e:	20 e0       	ldi	r18, 0x00	; 0
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	46 e1       	ldi	r20, 0x16	; 22
    3774:	50 e0       	ldi	r21, 0x00	; 0
    3776:	68 ee       	ldi	r22, 0xE8	; 232
    3778:	75 e1       	ldi	r23, 0x15	; 21
    377a:	80 91 e2 15 	lds	r24, 0x15E2	; 0x8015e2 <_downlinkMessageBuffer>
    377e:	90 91 e3 15 	lds	r25, 0x15E3	; 0x8015e3 <_downlinkMessageBuffer+0x1>
    3782:	0e 94 52 08 	call	0x10a4	; 0x10a4 <xStreamBufferSend>
    3786:	8e e0       	ldi	r24, 0x0E	; 14
    3788:	03 c0       	rjmp	.+6      	; 0x3790 <lora_driver_sendUploadMessage+0x18a>
    378a:	84 e1       	ldi	r24, 0x14	; 20
    378c:	01 c0       	rjmp	.+2      	; 0x3790 <lora_driver_sendUploadMessage+0x18a>
    378e:	80 e0       	ldi	r24, 0x00	; 0
    3790:	0f 90       	pop	r0
    3792:	df 91       	pop	r29
    3794:	cf 91       	pop	r28
    3796:	1f 91       	pop	r17
    3798:	0f 91       	pop	r16
    379a:	08 95       	ret

0000379c <lora_driver_setAdaptiveDataRate>:
    379c:	81 30       	cpi	r24, 0x01	; 1
    379e:	19 f0       	breq	.+6      	; 0x37a6 <lora_driver_setAdaptiveDataRate+0xa>
    37a0:	60 e0       	ldi	r22, 0x00	; 0
    37a2:	75 e0       	ldi	r23, 0x05	; 5
    37a4:	02 c0       	rjmp	.+4      	; 0x37aa <lora_driver_setAdaptiveDataRate+0xe>
    37a6:	69 ed       	ldi	r22, 0xD9	; 217
    37a8:	75 e0       	ldi	r23, 0x05	; 5
    37aa:	84 e0       	ldi	r24, 0x04	; 4
    37ac:	95 e0       	ldi	r25, 0x05	; 5
    37ae:	43 ce       	rjmp	.-890    	; 0x3436 <_uploadMessageRc>
    37b0:	08 95       	ret

000037b2 <lora_driver_setReceiveDelay>:
    37b2:	9f 93       	push	r25
    37b4:	8f 93       	push	r24
    37b6:	85 e3       	ldi	r24, 0x35	; 53
    37b8:	95 e0       	ldi	r25, 0x05	; 5
    37ba:	9f 93       	push	r25
    37bc:	8f 93       	push	r24
    37be:	80 e4       	ldi	r24, 0x40	; 64
    37c0:	96 e1       	ldi	r25, 0x16	; 22
    37c2:	9f 93       	push	r25
    37c4:	8f 93       	push	r24
    37c6:	0e 94 05 28 	call	0x500a	; 0x500a <sprintf>
    37ca:	60 e0       	ldi	r22, 0x00	; 0
    37cc:	70 e0       	ldi	r23, 0x00	; 0
    37ce:	80 e4       	ldi	r24, 0x40	; 64
    37d0:	96 e1       	ldi	r25, 0x16	; 22
    37d2:	31 de       	rcall	.-926    	; 0x3436 <_uploadMessageRc>
    37d4:	0f 90       	pop	r0
    37d6:	0f 90       	pop	r0
    37d8:	0f 90       	pop	r0
    37da:	0f 90       	pop	r0
    37dc:	0f 90       	pop	r0
    37de:	0f 90       	pop	r0
    37e0:	08 95       	ret

000037e2 <lora_driver_configureToEu868>:
    37e2:	2f 92       	push	r2
    37e4:	3f 92       	push	r3
    37e6:	4f 92       	push	r4
    37e8:	5f 92       	push	r5
    37ea:	6f 92       	push	r6
    37ec:	7f 92       	push	r7
    37ee:	8f 92       	push	r8
    37f0:	9f 92       	push	r9
    37f2:	af 92       	push	r10
    37f4:	bf 92       	push	r11
    37f6:	cf 92       	push	r12
    37f8:	df 92       	push	r13
    37fa:	ef 92       	push	r14
    37fc:	ff 92       	push	r15
    37fe:	0f 93       	push	r16
    3800:	1f 93       	push	r17
    3802:	cf 93       	push	r28
    3804:	df 93       	push	r29
    3806:	cd b7       	in	r28, 0x3d	; 61
    3808:	de b7       	in	r29, 0x3e	; 62
    380a:	a0 97       	sbiw	r28, 0x20	; 32
    380c:	0f b6       	in	r0, 0x3f	; 63
    380e:	f8 94       	cli
    3810:	de bf       	out	0x3e, r29	; 62
    3812:	0f be       	out	0x3f, r0	; 63
    3814:	cd bf       	out	0x3d, r28	; 61
    3816:	62 e6       	ldi	r22, 0x62	; 98
    3818:	75 e0       	ldi	r23, 0x05	; 5
    381a:	8e e6       	ldi	r24, 0x6E	; 110
    381c:	95 e0       	ldi	r25, 0x05	; 5
    381e:	3c dd       	rcall	.-1416   	; 0x3298 <_uploadMessage>
    3820:	95 dd       	rcall	.-1238   	; 0x334c <_reply2ReturnCode>
    3822:	81 11       	cpse	r24, r1
    3824:	a3 c0       	rjmp	.+326    	; 0x396c <lora_driver_configureToEu868+0x18a>
    3826:	80 e2       	ldi	r24, 0x20	; 32
    3828:	e2 e2       	ldi	r30, 0x22	; 34
    382a:	f2 e0       	ldi	r31, 0x02	; 2
    382c:	de 01       	movw	r26, r28
    382e:	11 96       	adiw	r26, 0x01	; 1
    3830:	01 90       	ld	r0, Z+
    3832:	0d 92       	st	X+, r0
    3834:	8a 95       	dec	r24
    3836:	e1 f7       	brne	.-8      	; 0x3830 <lora_driver_configureToEu868+0x4e>
    3838:	9e 01       	movw	r18, r28
    383a:	2f 5f       	subi	r18, 0xFF	; 255
    383c:	3f 4f       	sbci	r19, 0xFF	; 255
    383e:	69 01       	movw	r12, r18
    3840:	e1 2c       	mov	r14, r1
    3842:	f1 2c       	mov	r15, r1
    3844:	0f 2e       	mov	r0, r31
    3846:	fa e7       	ldi	r31, 0x7A	; 122
    3848:	af 2e       	mov	r10, r31
    384a:	f5 e0       	ldi	r31, 0x05	; 5
    384c:	bf 2e       	mov	r11, r31
    384e:	f0 2d       	mov	r31, r0
    3850:	00 e4       	ldi	r16, 0x40	; 64
    3852:	16 e1       	ldi	r17, 0x16	; 22
    3854:	0f 2e       	mov	r0, r31
    3856:	f3 e9       	ldi	r31, 0x93	; 147
    3858:	4f 2e       	mov	r4, r31
    385a:	f5 e0       	ldi	r31, 0x05	; 5
    385c:	5f 2e       	mov	r5, r31
    385e:	f0 2d       	mov	r31, r0
    3860:	0f 2e       	mov	r0, r31
    3862:	fa ea       	ldi	r31, 0xAA	; 170
    3864:	8f 2e       	mov	r8, r31
    3866:	f5 e0       	ldi	r31, 0x05	; 5
    3868:	9f 2e       	mov	r9, r31
    386a:	f0 2d       	mov	r31, r0
    386c:	0f 2e       	mov	r0, r31
    386e:	f4 ec       	ldi	r31, 0xC4	; 196
    3870:	6f 2e       	mov	r6, r31
    3872:	f5 e0       	ldi	r31, 0x05	; 5
    3874:	7f 2e       	mov	r7, r31
    3876:	f0 2d       	mov	r31, r0
    3878:	3e 2c       	mov	r3, r14
    387a:	2f 2c       	mov	r2, r15
    387c:	ff 92       	push	r15
    387e:	ef 92       	push	r14
    3880:	bf 92       	push	r11
    3882:	af 92       	push	r10
    3884:	1f 93       	push	r17
    3886:	0f 93       	push	r16
    3888:	0e 94 05 28 	call	0x500a	; 0x500a <sprintf>
    388c:	60 e0       	ldi	r22, 0x00	; 0
    388e:	70 e0       	ldi	r23, 0x00	; 0
    3890:	c8 01       	movw	r24, r16
    3892:	02 dd       	rcall	.-1532   	; 0x3298 <_uploadMessage>
    3894:	5b dd       	rcall	.-1354   	; 0x334c <_reply2ReturnCode>
    3896:	0f 90       	pop	r0
    3898:	0f 90       	pop	r0
    389a:	0f 90       	pop	r0
    389c:	0f 90       	pop	r0
    389e:	0f 90       	pop	r0
    38a0:	0f 90       	pop	r0
    38a2:	81 11       	cpse	r24, r1
    38a4:	63 c0       	rjmp	.+198    	; 0x396c <lora_driver_configureToEu868+0x18a>
    38a6:	32 e0       	ldi	r19, 0x02	; 2
    38a8:	3e 15       	cp	r19, r14
    38aa:	e8 f4       	brcc	.+58     	; 0x38e6 <lora_driver_configureToEu868+0x104>
    38ac:	f6 01       	movw	r30, r12
    38ae:	83 81       	ldd	r24, Z+3	; 0x03
    38b0:	8f 93       	push	r24
    38b2:	82 81       	ldd	r24, Z+2	; 0x02
    38b4:	8f 93       	push	r24
    38b6:	81 81       	ldd	r24, Z+1	; 0x01
    38b8:	8f 93       	push	r24
    38ba:	80 81       	ld	r24, Z
    38bc:	8f 93       	push	r24
    38be:	ff 92       	push	r15
    38c0:	ef 92       	push	r14
    38c2:	5f 92       	push	r5
    38c4:	4f 92       	push	r4
    38c6:	1f 93       	push	r17
    38c8:	0f 93       	push	r16
    38ca:	0e 94 05 28 	call	0x500a	; 0x500a <sprintf>
    38ce:	60 e0       	ldi	r22, 0x00	; 0
    38d0:	70 e0       	ldi	r23, 0x00	; 0
    38d2:	c8 01       	movw	r24, r16
    38d4:	e1 dc       	rcall	.-1598   	; 0x3298 <_uploadMessage>
    38d6:	3a dd       	rcall	.-1420   	; 0x334c <_reply2ReturnCode>
    38d8:	0f b6       	in	r0, 0x3f	; 63
    38da:	f8 94       	cli
    38dc:	de bf       	out	0x3e, r29	; 62
    38de:	0f be       	out	0x3f, r0	; 63
    38e0:	cd bf       	out	0x3d, r28	; 61
    38e2:	81 11       	cpse	r24, r1
    38e4:	43 c0       	rjmp	.+134    	; 0x396c <lora_driver_configureToEu868+0x18a>
    38e6:	2f 92       	push	r2
    38e8:	3f 92       	push	r3
    38ea:	9f 92       	push	r9
    38ec:	8f 92       	push	r8
    38ee:	1f 93       	push	r17
    38f0:	0f 93       	push	r16
    38f2:	0e 94 05 28 	call	0x500a	; 0x500a <sprintf>
    38f6:	60 e0       	ldi	r22, 0x00	; 0
    38f8:	70 e0       	ldi	r23, 0x00	; 0
    38fa:	c8 01       	movw	r24, r16
    38fc:	cd dc       	rcall	.-1638   	; 0x3298 <_uploadMessage>
    38fe:	26 dd       	rcall	.-1460   	; 0x334c <_reply2ReturnCode>
    3900:	0f 90       	pop	r0
    3902:	0f 90       	pop	r0
    3904:	0f 90       	pop	r0
    3906:	0f 90       	pop	r0
    3908:	0f 90       	pop	r0
    390a:	0f 90       	pop	r0
    390c:	81 11       	cpse	r24, r1
    390e:	2e c0       	rjmp	.+92     	; 0x396c <lora_driver_configureToEu868+0x18a>
    3910:	2f 92       	push	r2
    3912:	3f 92       	push	r3
    3914:	7f 92       	push	r7
    3916:	6f 92       	push	r6
    3918:	1f 93       	push	r17
    391a:	0f 93       	push	r16
    391c:	0e 94 05 28 	call	0x500a	; 0x500a <sprintf>
    3920:	60 e0       	ldi	r22, 0x00	; 0
    3922:	70 e0       	ldi	r23, 0x00	; 0
    3924:	c8 01       	movw	r24, r16
    3926:	b8 dc       	rcall	.-1680   	; 0x3298 <_uploadMessage>
    3928:	11 dd       	rcall	.-1502   	; 0x334c <_reply2ReturnCode>
    392a:	0f 90       	pop	r0
    392c:	0f 90       	pop	r0
    392e:	0f 90       	pop	r0
    3930:	0f 90       	pop	r0
    3932:	0f 90       	pop	r0
    3934:	0f 90       	pop	r0
    3936:	81 11       	cpse	r24, r1
    3938:	19 c0       	rjmp	.+50     	; 0x396c <lora_driver_configureToEu868+0x18a>
    393a:	3f ef       	ldi	r19, 0xFF	; 255
    393c:	e3 1a       	sub	r14, r19
    393e:	f3 0a       	sbc	r15, r19
    3940:	84 e0       	ldi	r24, 0x04	; 4
    3942:	c8 0e       	add	r12, r24
    3944:	d1 1c       	adc	r13, r1
    3946:	98 e0       	ldi	r25, 0x08	; 8
    3948:	e9 16       	cp	r14, r25
    394a:	f1 04       	cpc	r15, r1
    394c:	09 f0       	breq	.+2      	; 0x3950 <lora_driver_configureToEu868+0x16e>
    394e:	94 cf       	rjmp	.-216    	; 0x3878 <lora_driver_configureToEu868+0x96>
    3950:	60 e0       	ldi	r22, 0x00	; 0
    3952:	70 e0       	ldi	r23, 0x00	; 0
    3954:	8c ed       	ldi	r24, 0xDC	; 220
    3956:	95 e0       	ldi	r25, 0x05	; 5
    3958:	9f dc       	rcall	.-1730   	; 0x3298 <_uploadMessage>
    395a:	f8 dc       	rcall	.-1552   	; 0x334c <_reply2ReturnCode>
    395c:	81 11       	cpse	r24, r1
    395e:	06 c0       	rjmp	.+12     	; 0x396c <lora_driver_configureToEu868+0x18a>
    3960:	60 e0       	ldi	r22, 0x00	; 0
    3962:	70 e0       	ldi	r23, 0x00	; 0
    3964:	8d ee       	ldi	r24, 0xED	; 237
    3966:	95 e0       	ldi	r25, 0x05	; 5
    3968:	97 dc       	rcall	.-1746   	; 0x3298 <_uploadMessage>
    396a:	f0 dc       	rcall	.-1568   	; 0x334c <_reply2ReturnCode>
    396c:	a0 96       	adiw	r28, 0x20	; 32
    396e:	0f b6       	in	r0, 0x3f	; 63
    3970:	f8 94       	cli
    3972:	de bf       	out	0x3e, r29	; 62
    3974:	0f be       	out	0x3f, r0	; 63
    3976:	cd bf       	out	0x3d, r28	; 61
    3978:	df 91       	pop	r29
    397a:	cf 91       	pop	r28
    397c:	1f 91       	pop	r17
    397e:	0f 91       	pop	r16
    3980:	ff 90       	pop	r15
    3982:	ef 90       	pop	r14
    3984:	df 90       	pop	r13
    3986:	cf 90       	pop	r12
    3988:	bf 90       	pop	r11
    398a:	af 90       	pop	r10
    398c:	9f 90       	pop	r9
    398e:	8f 90       	pop	r8
    3990:	7f 90       	pop	r7
    3992:	6f 90       	pop	r6
    3994:	5f 90       	pop	r5
    3996:	4f 90       	pop	r4
    3998:	3f 90       	pop	r3
    399a:	2f 90       	pop	r2
    399c:	08 95       	ret

0000399e <lora_driver_setOtaaIdentity>:
    399e:	ef 92       	push	r14
    39a0:	ff 92       	push	r15
    39a2:	0f 93       	push	r16
    39a4:	1f 93       	push	r17
    39a6:	cf 93       	push	r28
    39a8:	df 93       	push	r29
    39aa:	ec 01       	movw	r28, r24
    39ac:	8b 01       	movw	r16, r22
    39ae:	7a 01       	movw	r14, r20
    39b0:	81 e0       	ldi	r24, 0x01	; 1
    39b2:	f4 de       	rcall	.-536    	; 0x379c <lora_driver_setAdaptiveDataRate>
    39b4:	81 11       	cpse	r24, r1
    39b6:	0d c0       	rjmp	.+26     	; 0x39d2 <lora_driver_setOtaaIdentity+0x34>
    39b8:	ce 01       	movw	r24, r28
    39ba:	d4 dd       	rcall	.-1112   	; 0x3564 <lora_driver_setApplicationIdentifier>
    39bc:	81 11       	cpse	r24, r1
    39be:	09 c0       	rjmp	.+18     	; 0x39d2 <lora_driver_setOtaaIdentity+0x34>
    39c0:	c8 01       	movw	r24, r16
    39c2:	e1 dd       	rcall	.-1086   	; 0x3586 <lora_driver_setApplicationKey>
    39c4:	81 11       	cpse	r24, r1
    39c6:	05 c0       	rjmp	.+10     	; 0x39d2 <lora_driver_setOtaaIdentity+0x34>
    39c8:	c7 01       	movw	r24, r14
    39ca:	bb dd       	rcall	.-1162   	; 0x3542 <lora_driver_setDeviceIdentifier>
    39cc:	81 11       	cpse	r24, r1
    39ce:	01 c0       	rjmp	.+2      	; 0x39d2 <lora_driver_setOtaaIdentity+0x34>
    39d0:	eb dd       	rcall	.-1066   	; 0x35a8 <lora_driver_saveMac>
    39d2:	df 91       	pop	r29
    39d4:	cf 91       	pop	r28
    39d6:	1f 91       	pop	r17
    39d8:	0f 91       	pop	r16
    39da:	ff 90       	pop	r15
    39dc:	ef 90       	pop	r14
    39de:	08 95       	ret

000039e0 <lora_driver_mapReturnCodeToText>:
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	fc 01       	movw	r30, r24
    39e4:	ee 0f       	add	r30, r30
    39e6:	ff 1f       	adc	r31, r31
    39e8:	8e 0f       	add	r24, r30
    39ea:	9f 1f       	adc	r25, r31
    39ec:	fc 01       	movw	r30, r24
    39ee:	ea 54       	subi	r30, 0x4A	; 74
    39f0:	f9 4f       	sbci	r31, 0xF9	; 249
    39f2:	81 81       	ldd	r24, Z+1	; 0x01
    39f4:	92 81       	ldd	r25, Z+2	; 0x02
    39f6:	08 95       	ret

000039f8 <decode_port_no>:
    39f8:	dc 01       	movw	r26, r24
    39fa:	00 97       	sbiw	r24, 0x00	; 0
    39fc:	29 f1       	breq	.+74     	; 0x3a48 <decode_port_no+0x50>
    39fe:	fb 01       	movw	r30, r22
    3a00:	20 81       	ld	r18, Z
    3a02:	fc 01       	movw	r30, r24
    3a04:	01 90       	ld	r0, Z+
    3a06:	00 20       	and	r0, r0
    3a08:	e9 f7       	brne	.-6      	; 0x3a04 <decode_port_no+0xc>
    3a0a:	31 97       	sbiw	r30, 0x01	; 1
    3a0c:	e8 1b       	sub	r30, r24
    3a0e:	f9 0b       	sbc	r31, r25
    3a10:	82 2f       	mov	r24, r18
    3a12:	90 e0       	ldi	r25, 0x00	; 0
    3a14:	e8 17       	cp	r30, r24
    3a16:	f9 07       	cpc	r31, r25
    3a18:	c8 f0       	brcs	.+50     	; 0x3a4c <decode_port_no+0x54>
    3a1a:	80 e0       	ldi	r24, 0x00	; 0
    3a1c:	08 c0       	rjmp	.+16     	; 0x3a2e <decode_port_no+0x36>
    3a1e:	88 0f       	add	r24, r24
    3a20:	38 2f       	mov	r19, r24
    3a22:	33 0f       	add	r19, r19
    3a24:	33 0f       	add	r19, r19
    3a26:	83 0f       	add	r24, r19
    3a28:	80 53       	subi	r24, 0x30	; 48
    3a2a:	89 0f       	add	r24, r25
    3a2c:	2f 5f       	subi	r18, 0xFF	; 255
    3a2e:	fd 01       	movw	r30, r26
    3a30:	e2 0f       	add	r30, r18
    3a32:	f1 1d       	adc	r31, r1
    3a34:	90 81       	ld	r25, Z
    3a36:	30 ed       	ldi	r19, 0xD0	; 208
    3a38:	39 0f       	add	r19, r25
    3a3a:	3a 30       	cpi	r19, 0x0A	; 10
    3a3c:	10 f4       	brcc	.+4      	; 0x3a42 <decode_port_no+0x4a>
    3a3e:	91 11       	cpse	r25, r1
    3a40:	ee cf       	rjmp	.-36     	; 0x3a1e <decode_port_no+0x26>
    3a42:	fb 01       	movw	r30, r22
    3a44:	20 83       	st	Z, r18
    3a46:	08 95       	ret
    3a48:	80 e0       	ldi	r24, 0x00	; 0
    3a4a:	08 95       	ret
    3a4c:	80 e0       	ldi	r24, 0x00	; 0
    3a4e:	08 95       	ret

00003a50 <decode_hexadecimal_string_bytes>:
    3a50:	0f 93       	push	r16
    3a52:	1f 93       	push	r17
    3a54:	cf 93       	push	r28
    3a56:	df 93       	push	r29
    3a58:	dc 01       	movw	r26, r24
    3a5a:	ea 01       	movw	r28, r20
    3a5c:	20 97       	sbiw	r28, 0x00	; 0
    3a5e:	e1 f1       	breq	.+120    	; 0x3ad8 <decode_hexadecimal_string_bytes+0x88>
    3a60:	fa 01       	movw	r30, r20
    3a62:	01 90       	ld	r0, Z+
    3a64:	00 20       	and	r0, r0
    3a66:	e9 f7       	brne	.-6      	; 0x3a62 <decode_hexadecimal_string_bytes+0x12>
    3a68:	31 97       	sbiw	r30, 0x01	; 1
    3a6a:	e4 1b       	sub	r30, r20
    3a6c:	f5 0b       	sbc	r31, r21
    3a6e:	32 97       	sbiw	r30, 0x02	; 2
    3a70:	10 f5       	brcc	.+68     	; 0x3ab6 <decode_hexadecimal_string_bytes+0x66>
    3a72:	32 c0       	rjmp	.+100    	; 0x3ad8 <decode_hexadecimal_string_bytes+0x88>
    3a74:	8d 01       	movw	r16, r26
    3a76:	04 0f       	add	r16, r20
    3a78:	15 1f       	adc	r17, r21
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	ae 01       	movw	r20, r28
    3a7e:	42 0f       	add	r20, r18
    3a80:	53 1f       	adc	r21, r19
    3a82:	fa 01       	movw	r30, r20
    3a84:	90 81       	ld	r25, Z
    3a86:	91 34       	cpi	r25, 0x41	; 65
    3a88:	28 f0       	brcs	.+10     	; 0x3a94 <decode_hexadecimal_string_bytes+0x44>
    3a8a:	97 53       	subi	r25, 0x37	; 55
    3a8c:	59 2f       	mov	r21, r25
    3a8e:	52 95       	swap	r21
    3a90:	50 7f       	andi	r21, 0xF0	; 240
    3a92:	03 c0       	rjmp	.+6      	; 0x3a9a <decode_hexadecimal_string_bytes+0x4a>
    3a94:	59 2f       	mov	r21, r25
    3a96:	52 95       	swap	r21
    3a98:	50 7f       	andi	r21, 0xF0	; 240
    3a9a:	2c 0f       	add	r18, r28
    3a9c:	3d 1f       	adc	r19, r29
    3a9e:	f9 01       	movw	r30, r18
    3aa0:	91 81       	ldd	r25, Z+1	; 0x01
    3aa2:	91 34       	cpi	r25, 0x41	; 65
    3aa4:	10 f0       	brcs	.+4      	; 0x3aaa <decode_hexadecimal_string_bytes+0x5a>
    3aa6:	97 53       	subi	r25, 0x37	; 55
    3aa8:	01 c0       	rjmp	.+2      	; 0x3aac <decode_hexadecimal_string_bytes+0x5c>
    3aaa:	90 53       	subi	r25, 0x30	; 48
    3aac:	95 0f       	add	r25, r21
    3aae:	f8 01       	movw	r30, r16
    3ab0:	90 83       	st	Z, r25
    3ab2:	8f 5f       	subi	r24, 0xFF	; 255
    3ab4:	01 c0       	rjmp	.+2      	; 0x3ab8 <decode_hexadecimal_string_bytes+0x68>
    3ab6:	80 e0       	ldi	r24, 0x00	; 0
    3ab8:	28 2f       	mov	r18, r24
    3aba:	22 0f       	add	r18, r18
    3abc:	48 2f       	mov	r20, r24
    3abe:	50 e0       	ldi	r21, 0x00	; 0
    3ac0:	fe 01       	movw	r30, r28
    3ac2:	01 90       	ld	r0, Z+
    3ac4:	00 20       	and	r0, r0
    3ac6:	e9 f7       	brne	.-6      	; 0x3ac2 <decode_hexadecimal_string_bytes+0x72>
    3ac8:	31 97       	sbiw	r30, 0x01	; 1
    3aca:	ec 1b       	sub	r30, r28
    3acc:	fd 0b       	sbc	r31, r29
    3ace:	4e 17       	cp	r20, r30
    3ad0:	5f 07       	cpc	r21, r31
    3ad2:	10 f4       	brcc	.+4      	; 0x3ad8 <decode_hexadecimal_string_bytes+0x88>
    3ad4:	86 13       	cpse	r24, r22
    3ad6:	ce cf       	rjmp	.-100    	; 0x3a74 <decode_hexadecimal_string_bytes+0x24>
    3ad8:	df 91       	pop	r29
    3ada:	cf 91       	pop	r28
    3adc:	1f 91       	pop	r17
    3ade:	0f 91       	pop	r16
    3ae0:	08 95       	ret

00003ae2 <serial_create>:
    3ae2:	2f 92       	push	r2
    3ae4:	3f 92       	push	r3
    3ae6:	4f 92       	push	r4
    3ae8:	5f 92       	push	r5
    3aea:	6f 92       	push	r6
    3aec:	7f 92       	push	r7
    3aee:	8f 92       	push	r8
    3af0:	9f 92       	push	r9
    3af2:	af 92       	push	r10
    3af4:	cf 92       	push	r12
    3af6:	ef 92       	push	r14
    3af8:	ff 92       	push	r15
    3afa:	0f 93       	push	r16
    3afc:	1f 93       	push	r17
    3afe:	cf 93       	push	r28
    3b00:	df 93       	push	r29
    3b02:	cd b7       	in	r28, 0x3d	; 61
    3b04:	de b7       	in	r29, 0x3e	; 62
    3b06:	f8 2e       	mov	r15, r24
    3b08:	2a 01       	movw	r4, r20
    3b0a:	3b 01       	movw	r6, r22
    3b0c:	88 e0       	ldi	r24, 0x08	; 8
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <malloc>
    3b14:	8c 01       	movw	r16, r24
    3b16:	8f 2d       	mov	r24, r15
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	fc 01       	movw	r30, r24
    3b1c:	ee 0f       	add	r30, r30
    3b1e:	ff 1f       	adc	r31, r31
    3b20:	e6 56       	subi	r30, 0x66	; 102
    3b22:	f9 4e       	sbci	r31, 0xE9	; 233
    3b24:	11 83       	std	Z+1, r17	; 0x01
    3b26:	00 83       	st	Z, r16
    3b28:	01 15       	cp	r16, r1
    3b2a:	11 05       	cpc	r17, r1
    3b2c:	09 f4       	brne	.+2      	; 0x3b30 <serial_create+0x4e>
    3b2e:	68 c0       	rjmp	.+208    	; 0x3c00 <serial_create+0x11e>
    3b30:	88 0f       	add	r24, r24
    3b32:	99 1f       	adc	r25, r25
    3b34:	fc 01       	movw	r30, r24
    3b36:	e5 5f       	subi	r30, 0xF5	; 245
    3b38:	fd 4f       	sbci	r31, 0xFD	; 253
    3b3a:	80 81       	ld	r24, Z
    3b3c:	91 81       	ldd	r25, Z+1	; 0x01
    3b3e:	d8 01       	movw	r26, r16
    3b40:	8d 93       	st	X+, r24
    3b42:	9c 93       	st	X, r25
    3b44:	8c 2d       	mov	r24, r12
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	88 0f       	add	r24, r24
    3b4a:	99 1f       	adc	r25, r25
    3b4c:	88 0f       	add	r24, r24
    3b4e:	99 1f       	adc	r25, r25
    3b50:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <malloc>
    3b54:	1c 01       	movw	r2, r24
    3b56:	86 e0       	ldi	r24, 0x06	; 6
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <malloc>
    3b5e:	7c 01       	movw	r14, r24
    3b60:	4c 2d       	mov	r20, r12
    3b62:	b1 01       	movw	r22, r2
    3b64:	5b d6       	rcall	.+3254   	; 0x481c <fifo_init>
    3b66:	f8 01       	movw	r30, r16
    3b68:	f5 82       	std	Z+5, r15	; 0x05
    3b6a:	e4 82       	std	Z+4, r14	; 0x04
    3b6c:	8a 2d       	mov	r24, r10
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	88 0f       	add	r24, r24
    3b72:	99 1f       	adc	r25, r25
    3b74:	88 0f       	add	r24, r24
    3b76:	99 1f       	adc	r25, r25
    3b78:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <malloc>
    3b7c:	1c 01       	movw	r2, r24
    3b7e:	86 e0       	ldi	r24, 0x06	; 6
    3b80:	90 e0       	ldi	r25, 0x00	; 0
    3b82:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <malloc>
    3b86:	7c 01       	movw	r14, r24
    3b88:	4a 2d       	mov	r20, r10
    3b8a:	b1 01       	movw	r22, r2
    3b8c:	47 d6       	rcall	.+3214   	; 0x481c <fifo_init>
    3b8e:	d8 01       	movw	r26, r16
    3b90:	13 96       	adiw	r26, 0x03	; 3
    3b92:	fc 92       	st	X, r15
    3b94:	ee 92       	st	-X, r14
    3b96:	12 97       	sbiw	r26, 0x02	; 2
    3b98:	17 96       	adiw	r26, 0x07	; 7
    3b9a:	9c 92       	st	X, r9
    3b9c:	8e 92       	st	-X, r8
    3b9e:	16 97       	sbiw	r26, 0x06	; 6
    3ba0:	ff b6       	in	r15, 0x3f	; 63
    3ba2:	f8 94       	cli
    3ba4:	ed 91       	ld	r30, X+
    3ba6:	fc 91       	ld	r31, X
    3ba8:	11 97       	sbiw	r26, 0x01	; 1
    3baa:	36 97       	sbiw	r30, 0x06	; 6
    3bac:	80 81       	ld	r24, Z
    3bae:	82 60       	ori	r24, 0x02	; 2
    3bb0:	80 83       	st	Z, r24
    3bb2:	8d 90       	ld	r8, X+
    3bb4:	9c 90       	ld	r9, X
    3bb6:	c3 01       	movw	r24, r6
    3bb8:	b2 01       	movw	r22, r4
    3bba:	45 d7       	rcall	.+3722   	; 0x4a46 <__floatunsisf>
    3bbc:	20 e0       	ldi	r18, 0x00	; 0
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	40 e0       	ldi	r20, 0x00	; 0
    3bc2:	51 e4       	ldi	r21, 0x41	; 65
    3bc4:	ce d7       	rcall	.+3996   	; 0x4b62 <__mulsf3>
    3bc6:	9b 01       	movw	r18, r22
    3bc8:	ac 01       	movw	r20, r24
    3bca:	60 e0       	ldi	r22, 0x00	; 0
    3bcc:	74 e2       	ldi	r23, 0x24	; 36
    3bce:	84 e7       	ldi	r24, 0x74	; 116
    3bd0:	9b e4       	ldi	r25, 0x4B	; 75
    3bd2:	a5 d6       	rcall	.+3402   	; 0x491e <__divsf3>
    3bd4:	20 e0       	ldi	r18, 0x00	; 0
    3bd6:	30 e0       	ldi	r19, 0x00	; 0
    3bd8:	40 e8       	ldi	r20, 0x80	; 128
    3bda:	5f e3       	ldi	r21, 0x3F	; 63
    3bdc:	3b d6       	rcall	.+3190   	; 0x4854 <__subsf3>
    3bde:	07 d7       	rcall	.+3598   	; 0x49ee <__fixunssfsi>
    3be0:	f4 01       	movw	r30, r8
    3be2:	32 97       	sbiw	r30, 0x02	; 2
    3be4:	60 83       	st	Z, r22
    3be6:	d8 01       	movw	r26, r16
    3be8:	ed 91       	ld	r30, X+
    3bea:	fc 91       	ld	r31, X
    3bec:	11 97       	sbiw	r26, 0x01	; 1
    3bee:	35 97       	sbiw	r30, 0x05	; 5
    3bf0:	88 e9       	ldi	r24, 0x98	; 152
    3bf2:	80 83       	st	Z, r24
    3bf4:	ed 91       	ld	r30, X+
    3bf6:	fc 91       	ld	r31, X
    3bf8:	34 97       	sbiw	r30, 0x04	; 4
    3bfa:	86 e0       	ldi	r24, 0x06	; 6
    3bfc:	80 83       	st	Z, r24
    3bfe:	ff be       	out	0x3f, r15	; 63
    3c00:	c8 01       	movw	r24, r16
    3c02:	df 91       	pop	r29
    3c04:	cf 91       	pop	r28
    3c06:	1f 91       	pop	r17
    3c08:	0f 91       	pop	r16
    3c0a:	ff 90       	pop	r15
    3c0c:	ef 90       	pop	r14
    3c0e:	cf 90       	pop	r12
    3c10:	af 90       	pop	r10
    3c12:	9f 90       	pop	r9
    3c14:	8f 90       	pop	r8
    3c16:	7f 90       	pop	r7
    3c18:	6f 90       	pop	r6
    3c1a:	5f 90       	pop	r5
    3c1c:	4f 90       	pop	r4
    3c1e:	3f 90       	pop	r3
    3c20:	2f 90       	pop	r2
    3c22:	08 95       	ret

00003c24 <serial_sendByte>:
    3c24:	cf 93       	push	r28
    3c26:	df 93       	push	r29
    3c28:	dc 01       	movw	r26, r24
    3c2a:	89 2b       	or	r24, r25
    3c2c:	01 f1       	breq	.+64     	; 0x3c6e <serial_sendByte+0x4a>
    3c2e:	12 96       	adiw	r26, 0x02	; 2
    3c30:	ed 91       	ld	r30, X+
    3c32:	fc 91       	ld	r31, X
    3c34:	13 97       	sbiw	r26, 0x03	; 3
    3c36:	93 81       	ldd	r25, Z+3	; 0x03
    3c38:	82 81       	ldd	r24, Z+2	; 0x02
    3c3a:	25 81       	ldd	r18, Z+5	; 0x05
    3c3c:	98 1b       	sub	r25, r24
    3c3e:	92 23       	and	r25, r18
    3c40:	84 81       	ldd	r24, Z+4	; 0x04
    3c42:	98 17       	cp	r25, r24
    3c44:	b1 f0       	breq	.+44     	; 0x3c72 <serial_sendByte+0x4e>
    3c46:	83 81       	ldd	r24, Z+3	; 0x03
    3c48:	26 95       	lsr	r18
    3c4a:	28 23       	and	r18, r24
    3c4c:	c0 81       	ld	r28, Z
    3c4e:	d1 81       	ldd	r29, Z+1	; 0x01
    3c50:	c2 0f       	add	r28, r18
    3c52:	d1 1d       	adc	r29, r1
    3c54:	68 83       	st	Y, r22
    3c56:	8f 5f       	subi	r24, 0xFF	; 255
    3c58:	95 81       	ldd	r25, Z+5	; 0x05
    3c5a:	89 23       	and	r24, r25
    3c5c:	83 83       	std	Z+3, r24	; 0x03
    3c5e:	ed 91       	ld	r30, X+
    3c60:	fc 91       	ld	r31, X
    3c62:	35 97       	sbiw	r30, 0x05	; 5
    3c64:	80 81       	ld	r24, Z
    3c66:	80 62       	ori	r24, 0x20	; 32
    3c68:	80 83       	st	Z, r24
    3c6a:	80 e0       	ldi	r24, 0x00	; 0
    3c6c:	03 c0       	rjmp	.+6      	; 0x3c74 <serial_sendByte+0x50>
    3c6e:	81 e0       	ldi	r24, 0x01	; 1
    3c70:	01 c0       	rjmp	.+2      	; 0x3c74 <serial_sendByte+0x50>
    3c72:	82 e0       	ldi	r24, 0x02	; 2
    3c74:	df 91       	pop	r29
    3c76:	cf 91       	pop	r28
    3c78:	08 95       	ret

00003c7a <serial_sendBytes>:
    3c7a:	ef 92       	push	r14
    3c7c:	ff 92       	push	r15
    3c7e:	0f 93       	push	r16
    3c80:	1f 93       	push	r17
    3c82:	cf 93       	push	r28
    3c84:	df 93       	push	r29
    3c86:	7c 01       	movw	r14, r24
    3c88:	00 97       	sbiw	r24, 0x00	; 0
    3c8a:	09 f4       	brne	.+2      	; 0x3c8e <serial_sendBytes+0x14>
    3c8c:	41 c0       	rjmp	.+130    	; 0x3d10 <serial_sendBytes+0x96>
    3c8e:	dc 01       	movw	r26, r24
    3c90:	12 96       	adiw	r26, 0x02	; 2
    3c92:	ed 91       	ld	r30, X+
    3c94:	fc 91       	ld	r31, X
    3c96:	13 97       	sbiw	r26, 0x03	; 3
    3c98:	93 81       	ldd	r25, Z+3	; 0x03
    3c9a:	82 81       	ldd	r24, Z+2	; 0x02
    3c9c:	98 1b       	sub	r25, r24
    3c9e:	85 81       	ldd	r24, Z+5	; 0x05
    3ca0:	98 23       	and	r25, r24
    3ca2:	84 81       	ldd	r24, Z+4	; 0x04
    3ca4:	89 1b       	sub	r24, r25
    3ca6:	86 17       	cp	r24, r22
    3ca8:	a8 f1       	brcs	.+106    	; 0x3d14 <serial_sendBytes+0x9a>
    3caa:	66 23       	and	r22, r22
    3cac:	41 f1       	breq	.+80     	; 0x3cfe <serial_sendBytes+0x84>
    3cae:	84 2f       	mov	r24, r20
    3cb0:	95 2f       	mov	r25, r21
    3cb2:	dc 01       	movw	r26, r24
    3cb4:	61 50       	subi	r22, 0x01	; 1
    3cb6:	46 2f       	mov	r20, r22
    3cb8:	50 e0       	ldi	r21, 0x00	; 0
    3cba:	4f 5f       	subi	r20, 0xFF	; 255
    3cbc:	5f 4f       	sbci	r21, 0xFF	; 255
    3cbe:	48 0f       	add	r20, r24
    3cc0:	59 1f       	adc	r21, r25
    3cc2:	e7 01       	movw	r28, r14
    3cc4:	ea 81       	ldd	r30, Y+2	; 0x02
    3cc6:	fb 81       	ldd	r31, Y+3	; 0x03
    3cc8:	93 81       	ldd	r25, Z+3	; 0x03
    3cca:	82 81       	ldd	r24, Z+2	; 0x02
    3ccc:	25 81       	ldd	r18, Z+5	; 0x05
    3cce:	98 1b       	sub	r25, r24
    3cd0:	92 23       	and	r25, r18
    3cd2:	84 81       	ldd	r24, Z+4	; 0x04
    3cd4:	98 17       	cp	r25, r24
    3cd6:	79 f0       	breq	.+30     	; 0x3cf6 <serial_sendBytes+0x7c>
    3cd8:	8c 91       	ld	r24, X
    3cda:	93 81       	ldd	r25, Z+3	; 0x03
    3cdc:	26 95       	lsr	r18
    3cde:	29 23       	and	r18, r25
    3ce0:	60 81       	ld	r22, Z
    3ce2:	71 81       	ldd	r23, Z+1	; 0x01
    3ce4:	8b 01       	movw	r16, r22
    3ce6:	02 0f       	add	r16, r18
    3ce8:	11 1d       	adc	r17, r1
    3cea:	e8 01       	movw	r28, r16
    3cec:	88 83       	st	Y, r24
    3cee:	9f 5f       	subi	r25, 0xFF	; 255
    3cf0:	85 81       	ldd	r24, Z+5	; 0x05
    3cf2:	98 23       	and	r25, r24
    3cf4:	93 83       	std	Z+3, r25	; 0x03
    3cf6:	11 96       	adiw	r26, 0x01	; 1
    3cf8:	a4 17       	cp	r26, r20
    3cfa:	b5 07       	cpc	r27, r21
    3cfc:	11 f7       	brne	.-60     	; 0x3cc2 <serial_sendBytes+0x48>
    3cfe:	d7 01       	movw	r26, r14
    3d00:	ed 91       	ld	r30, X+
    3d02:	fc 91       	ld	r31, X
    3d04:	35 97       	sbiw	r30, 0x05	; 5
    3d06:	80 81       	ld	r24, Z
    3d08:	80 62       	ori	r24, 0x20	; 32
    3d0a:	80 83       	st	Z, r24
    3d0c:	80 e0       	ldi	r24, 0x00	; 0
    3d0e:	03 c0       	rjmp	.+6      	; 0x3d16 <serial_sendBytes+0x9c>
    3d10:	81 e0       	ldi	r24, 0x01	; 1
    3d12:	01 c0       	rjmp	.+2      	; 0x3d16 <serial_sendBytes+0x9c>
    3d14:	82 e0       	ldi	r24, 0x02	; 2
    3d16:	df 91       	pop	r29
    3d18:	cf 91       	pop	r28
    3d1a:	1f 91       	pop	r17
    3d1c:	0f 91       	pop	r16
    3d1e:	ff 90       	pop	r15
    3d20:	ef 90       	pop	r14
    3d22:	08 95       	ret

00003d24 <serial_getByte>:
    3d24:	00 97       	sbiw	r24, 0x00	; 0
    3d26:	d1 f0       	breq	.+52     	; 0x3d5c <serial_getByte+0x38>
    3d28:	dc 01       	movw	r26, r24
    3d2a:	14 96       	adiw	r26, 0x04	; 4
    3d2c:	ed 91       	ld	r30, X+
    3d2e:	fc 91       	ld	r31, X
    3d30:	15 97       	sbiw	r26, 0x05	; 5
    3d32:	93 81       	ldd	r25, Z+3	; 0x03
    3d34:	82 81       	ldd	r24, Z+2	; 0x02
    3d36:	98 17       	cp	r25, r24
    3d38:	99 f0       	breq	.+38     	; 0x3d60 <serial_getByte+0x3c>
    3d3a:	92 81       	ldd	r25, Z+2	; 0x02
    3d3c:	85 81       	ldd	r24, Z+5	; 0x05
    3d3e:	86 95       	lsr	r24
    3d40:	89 23       	and	r24, r25
    3d42:	a0 81       	ld	r26, Z
    3d44:	b1 81       	ldd	r27, Z+1	; 0x01
    3d46:	a8 0f       	add	r26, r24
    3d48:	b1 1d       	adc	r27, r1
    3d4a:	8c 91       	ld	r24, X
    3d4c:	db 01       	movw	r26, r22
    3d4e:	8c 93       	st	X, r24
    3d50:	9f 5f       	subi	r25, 0xFF	; 255
    3d52:	85 81       	ldd	r24, Z+5	; 0x05
    3d54:	98 23       	and	r25, r24
    3d56:	92 83       	std	Z+2, r25	; 0x02
    3d58:	80 e0       	ldi	r24, 0x00	; 0
    3d5a:	08 95       	ret
    3d5c:	81 e0       	ldi	r24, 0x01	; 1
    3d5e:	08 95       	ret
    3d60:	83 e0       	ldi	r24, 0x03	; 3
    3d62:	08 95       	ret

00003d64 <__vector_25>:
    3d64:	1f 92       	push	r1
    3d66:	0f 92       	push	r0
    3d68:	0f b6       	in	r0, 0x3f	; 63
    3d6a:	0f 92       	push	r0
    3d6c:	11 24       	eor	r1, r1
    3d6e:	0b b6       	in	r0, 0x3b	; 59
    3d70:	0f 92       	push	r0
    3d72:	2f 93       	push	r18
    3d74:	3f 93       	push	r19
    3d76:	4f 93       	push	r20
    3d78:	5f 93       	push	r21
    3d7a:	6f 93       	push	r22
    3d7c:	7f 93       	push	r23
    3d7e:	8f 93       	push	r24
    3d80:	9f 93       	push	r25
    3d82:	af 93       	push	r26
    3d84:	bf 93       	push	r27
    3d86:	cf 93       	push	r28
    3d88:	df 93       	push	r29
    3d8a:	ef 93       	push	r30
    3d8c:	ff 93       	push	r31
    3d8e:	a0 91 9a 16 	lds	r26, 0x169A	; 0x80169a <_ser_handle>
    3d92:	b0 91 9b 16 	lds	r27, 0x169B	; 0x80169b <_ser_handle+0x1>
    3d96:	10 97       	sbiw	r26, 0x00	; 0
    3d98:	11 f1       	breq	.+68     	; 0x3dde <__vector_25+0x7a>
    3d9a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    3d9e:	14 96       	adiw	r26, 0x04	; 4
    3da0:	ed 91       	ld	r30, X+
    3da2:	fc 91       	ld	r31, X
    3da4:	15 97       	sbiw	r26, 0x05	; 5
    3da6:	93 81       	ldd	r25, Z+3	; 0x03
    3da8:	82 81       	ldd	r24, Z+2	; 0x02
    3daa:	25 81       	ldd	r18, Z+5	; 0x05
    3dac:	98 1b       	sub	r25, r24
    3dae:	92 23       	and	r25, r18
    3db0:	84 81       	ldd	r24, Z+4	; 0x04
    3db2:	98 17       	cp	r25, r24
    3db4:	61 f0       	breq	.+24     	; 0x3dce <__vector_25+0x6a>
    3db6:	83 81       	ldd	r24, Z+3	; 0x03
    3db8:	26 95       	lsr	r18
    3dba:	28 23       	and	r18, r24
    3dbc:	c0 81       	ld	r28, Z
    3dbe:	d1 81       	ldd	r29, Z+1	; 0x01
    3dc0:	c2 0f       	add	r28, r18
    3dc2:	d1 1d       	adc	r29, r1
    3dc4:	68 83       	st	Y, r22
    3dc6:	8f 5f       	subi	r24, 0xFF	; 255
    3dc8:	95 81       	ldd	r25, Z+5	; 0x05
    3dca:	89 23       	and	r24, r25
    3dcc:	83 83       	std	Z+3, r24	; 0x03
    3dce:	16 96       	adiw	r26, 0x06	; 6
    3dd0:	ed 91       	ld	r30, X+
    3dd2:	fc 91       	ld	r31, X
    3dd4:	17 97       	sbiw	r26, 0x07	; 7
    3dd6:	30 97       	sbiw	r30, 0x00	; 0
    3dd8:	11 f0       	breq	.+4      	; 0x3dde <__vector_25+0x7a>
    3dda:	cd 01       	movw	r24, r26
    3ddc:	19 95       	eicall
    3dde:	ff 91       	pop	r31
    3de0:	ef 91       	pop	r30
    3de2:	df 91       	pop	r29
    3de4:	cf 91       	pop	r28
    3de6:	bf 91       	pop	r27
    3de8:	af 91       	pop	r26
    3dea:	9f 91       	pop	r25
    3dec:	8f 91       	pop	r24
    3dee:	7f 91       	pop	r23
    3df0:	6f 91       	pop	r22
    3df2:	5f 91       	pop	r21
    3df4:	4f 91       	pop	r20
    3df6:	3f 91       	pop	r19
    3df8:	2f 91       	pop	r18
    3dfa:	0f 90       	pop	r0
    3dfc:	0b be       	out	0x3b, r0	; 59
    3dfe:	0f 90       	pop	r0
    3e00:	0f be       	out	0x3f, r0	; 63
    3e02:	0f 90       	pop	r0
    3e04:	1f 90       	pop	r1
    3e06:	18 95       	reti

00003e08 <__vector_26>:
    3e08:	1f 92       	push	r1
    3e0a:	0f 92       	push	r0
    3e0c:	0f b6       	in	r0, 0x3f	; 63
    3e0e:	0f 92       	push	r0
    3e10:	11 24       	eor	r1, r1
    3e12:	0b b6       	in	r0, 0x3b	; 59
    3e14:	0f 92       	push	r0
    3e16:	2f 93       	push	r18
    3e18:	8f 93       	push	r24
    3e1a:	9f 93       	push	r25
    3e1c:	af 93       	push	r26
    3e1e:	bf 93       	push	r27
    3e20:	ef 93       	push	r30
    3e22:	ff 93       	push	r31
    3e24:	e0 91 9a 16 	lds	r30, 0x169A	; 0x80169a <_ser_handle>
    3e28:	f0 91 9b 16 	lds	r31, 0x169B	; 0x80169b <_ser_handle+0x1>
    3e2c:	30 97       	sbiw	r30, 0x00	; 0
    3e2e:	b9 f0       	breq	.+46     	; 0x3e5e <__vector_26+0x56>
    3e30:	02 80       	ldd	r0, Z+2	; 0x02
    3e32:	f3 81       	ldd	r31, Z+3	; 0x03
    3e34:	e0 2d       	mov	r30, r0
    3e36:	93 81       	ldd	r25, Z+3	; 0x03
    3e38:	82 81       	ldd	r24, Z+2	; 0x02
    3e3a:	98 17       	cp	r25, r24
    3e3c:	b1 f0       	breq	.+44     	; 0x3e6a <__vector_26+0x62>
    3e3e:	92 81       	ldd	r25, Z+2	; 0x02
    3e40:	85 81       	ldd	r24, Z+5	; 0x05
    3e42:	28 2f       	mov	r18, r24
    3e44:	26 95       	lsr	r18
    3e46:	29 23       	and	r18, r25
    3e48:	a0 81       	ld	r26, Z
    3e4a:	b1 81       	ldd	r27, Z+1	; 0x01
    3e4c:	a2 0f       	add	r26, r18
    3e4e:	b1 1d       	adc	r27, r1
    3e50:	2c 91       	ld	r18, X
    3e52:	9f 5f       	subi	r25, 0xFF	; 255
    3e54:	89 23       	and	r24, r25
    3e56:	82 83       	std	Z+2, r24	; 0x02
    3e58:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    3e5c:	0b c0       	rjmp	.+22     	; 0x3e74 <__vector_26+0x6c>
    3e5e:	e1 ec       	ldi	r30, 0xC1	; 193
    3e60:	f0 e0       	ldi	r31, 0x00	; 0
    3e62:	80 81       	ld	r24, Z
    3e64:	8f 7d       	andi	r24, 0xDF	; 223
    3e66:	80 83       	st	Z, r24
    3e68:	05 c0       	rjmp	.+10     	; 0x3e74 <__vector_26+0x6c>
    3e6a:	e1 ec       	ldi	r30, 0xC1	; 193
    3e6c:	f0 e0       	ldi	r31, 0x00	; 0
    3e6e:	80 81       	ld	r24, Z
    3e70:	8f 7d       	andi	r24, 0xDF	; 223
    3e72:	80 83       	st	Z, r24
    3e74:	ff 91       	pop	r31
    3e76:	ef 91       	pop	r30
    3e78:	bf 91       	pop	r27
    3e7a:	af 91       	pop	r26
    3e7c:	9f 91       	pop	r25
    3e7e:	8f 91       	pop	r24
    3e80:	2f 91       	pop	r18
    3e82:	0f 90       	pop	r0
    3e84:	0b be       	out	0x3b, r0	; 59
    3e86:	0f 90       	pop	r0
    3e88:	0f be       	out	0x3f, r0	; 63
    3e8a:	0f 90       	pop	r0
    3e8c:	1f 90       	pop	r1
    3e8e:	18 95       	reti

00003e90 <__vector_36>:
    3e90:	1f 92       	push	r1
    3e92:	0f 92       	push	r0
    3e94:	0f b6       	in	r0, 0x3f	; 63
    3e96:	0f 92       	push	r0
    3e98:	11 24       	eor	r1, r1
    3e9a:	0b b6       	in	r0, 0x3b	; 59
    3e9c:	0f 92       	push	r0
    3e9e:	2f 93       	push	r18
    3ea0:	3f 93       	push	r19
    3ea2:	4f 93       	push	r20
    3ea4:	5f 93       	push	r21
    3ea6:	6f 93       	push	r22
    3ea8:	7f 93       	push	r23
    3eaa:	8f 93       	push	r24
    3eac:	9f 93       	push	r25
    3eae:	af 93       	push	r26
    3eb0:	bf 93       	push	r27
    3eb2:	cf 93       	push	r28
    3eb4:	df 93       	push	r29
    3eb6:	ef 93       	push	r30
    3eb8:	ff 93       	push	r31
    3eba:	a0 91 9c 16 	lds	r26, 0x169C	; 0x80169c <_ser_handle+0x2>
    3ebe:	b0 91 9d 16 	lds	r27, 0x169D	; 0x80169d <_ser_handle+0x3>
    3ec2:	10 97       	sbiw	r26, 0x00	; 0
    3ec4:	11 f1       	breq	.+68     	; 0x3f0a <__vector_36+0x7a>
    3ec6:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    3eca:	14 96       	adiw	r26, 0x04	; 4
    3ecc:	ed 91       	ld	r30, X+
    3ece:	fc 91       	ld	r31, X
    3ed0:	15 97       	sbiw	r26, 0x05	; 5
    3ed2:	93 81       	ldd	r25, Z+3	; 0x03
    3ed4:	82 81       	ldd	r24, Z+2	; 0x02
    3ed6:	25 81       	ldd	r18, Z+5	; 0x05
    3ed8:	98 1b       	sub	r25, r24
    3eda:	92 23       	and	r25, r18
    3edc:	84 81       	ldd	r24, Z+4	; 0x04
    3ede:	98 17       	cp	r25, r24
    3ee0:	61 f0       	breq	.+24     	; 0x3efa <__vector_36+0x6a>
    3ee2:	83 81       	ldd	r24, Z+3	; 0x03
    3ee4:	26 95       	lsr	r18
    3ee6:	28 23       	and	r18, r24
    3ee8:	c0 81       	ld	r28, Z
    3eea:	d1 81       	ldd	r29, Z+1	; 0x01
    3eec:	c2 0f       	add	r28, r18
    3eee:	d1 1d       	adc	r29, r1
    3ef0:	68 83       	st	Y, r22
    3ef2:	8f 5f       	subi	r24, 0xFF	; 255
    3ef4:	95 81       	ldd	r25, Z+5	; 0x05
    3ef6:	89 23       	and	r24, r25
    3ef8:	83 83       	std	Z+3, r24	; 0x03
    3efa:	16 96       	adiw	r26, 0x06	; 6
    3efc:	ed 91       	ld	r30, X+
    3efe:	fc 91       	ld	r31, X
    3f00:	17 97       	sbiw	r26, 0x07	; 7
    3f02:	30 97       	sbiw	r30, 0x00	; 0
    3f04:	11 f0       	breq	.+4      	; 0x3f0a <__vector_36+0x7a>
    3f06:	cd 01       	movw	r24, r26
    3f08:	19 95       	eicall
    3f0a:	ff 91       	pop	r31
    3f0c:	ef 91       	pop	r30
    3f0e:	df 91       	pop	r29
    3f10:	cf 91       	pop	r28
    3f12:	bf 91       	pop	r27
    3f14:	af 91       	pop	r26
    3f16:	9f 91       	pop	r25
    3f18:	8f 91       	pop	r24
    3f1a:	7f 91       	pop	r23
    3f1c:	6f 91       	pop	r22
    3f1e:	5f 91       	pop	r21
    3f20:	4f 91       	pop	r20
    3f22:	3f 91       	pop	r19
    3f24:	2f 91       	pop	r18
    3f26:	0f 90       	pop	r0
    3f28:	0b be       	out	0x3b, r0	; 59
    3f2a:	0f 90       	pop	r0
    3f2c:	0f be       	out	0x3f, r0	; 63
    3f2e:	0f 90       	pop	r0
    3f30:	1f 90       	pop	r1
    3f32:	18 95       	reti

00003f34 <__vector_37>:
    3f34:	1f 92       	push	r1
    3f36:	0f 92       	push	r0
    3f38:	0f b6       	in	r0, 0x3f	; 63
    3f3a:	0f 92       	push	r0
    3f3c:	11 24       	eor	r1, r1
    3f3e:	0b b6       	in	r0, 0x3b	; 59
    3f40:	0f 92       	push	r0
    3f42:	2f 93       	push	r18
    3f44:	8f 93       	push	r24
    3f46:	9f 93       	push	r25
    3f48:	af 93       	push	r26
    3f4a:	bf 93       	push	r27
    3f4c:	ef 93       	push	r30
    3f4e:	ff 93       	push	r31
    3f50:	e0 91 9c 16 	lds	r30, 0x169C	; 0x80169c <_ser_handle+0x2>
    3f54:	f0 91 9d 16 	lds	r31, 0x169D	; 0x80169d <_ser_handle+0x3>
    3f58:	30 97       	sbiw	r30, 0x00	; 0
    3f5a:	b9 f0       	breq	.+46     	; 0x3f8a <__vector_37+0x56>
    3f5c:	02 80       	ldd	r0, Z+2	; 0x02
    3f5e:	f3 81       	ldd	r31, Z+3	; 0x03
    3f60:	e0 2d       	mov	r30, r0
    3f62:	93 81       	ldd	r25, Z+3	; 0x03
    3f64:	82 81       	ldd	r24, Z+2	; 0x02
    3f66:	98 17       	cp	r25, r24
    3f68:	b1 f0       	breq	.+44     	; 0x3f96 <__vector_37+0x62>
    3f6a:	92 81       	ldd	r25, Z+2	; 0x02
    3f6c:	85 81       	ldd	r24, Z+5	; 0x05
    3f6e:	28 2f       	mov	r18, r24
    3f70:	26 95       	lsr	r18
    3f72:	29 23       	and	r18, r25
    3f74:	a0 81       	ld	r26, Z
    3f76:	b1 81       	ldd	r27, Z+1	; 0x01
    3f78:	a2 0f       	add	r26, r18
    3f7a:	b1 1d       	adc	r27, r1
    3f7c:	2c 91       	ld	r18, X
    3f7e:	9f 5f       	subi	r25, 0xFF	; 255
    3f80:	89 23       	and	r24, r25
    3f82:	82 83       	std	Z+2, r24	; 0x02
    3f84:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    3f88:	0b c0       	rjmp	.+22     	; 0x3fa0 <__vector_37+0x6c>
    3f8a:	e9 ec       	ldi	r30, 0xC9	; 201
    3f8c:	f0 e0       	ldi	r31, 0x00	; 0
    3f8e:	80 81       	ld	r24, Z
    3f90:	8f 7d       	andi	r24, 0xDF	; 223
    3f92:	80 83       	st	Z, r24
    3f94:	05 c0       	rjmp	.+10     	; 0x3fa0 <__vector_37+0x6c>
    3f96:	e9 ec       	ldi	r30, 0xC9	; 201
    3f98:	f0 e0       	ldi	r31, 0x00	; 0
    3f9a:	80 81       	ld	r24, Z
    3f9c:	8f 7d       	andi	r24, 0xDF	; 223
    3f9e:	80 83       	st	Z, r24
    3fa0:	ff 91       	pop	r31
    3fa2:	ef 91       	pop	r30
    3fa4:	bf 91       	pop	r27
    3fa6:	af 91       	pop	r26
    3fa8:	9f 91       	pop	r25
    3faa:	8f 91       	pop	r24
    3fac:	2f 91       	pop	r18
    3fae:	0f 90       	pop	r0
    3fb0:	0b be       	out	0x3b, r0	; 59
    3fb2:	0f 90       	pop	r0
    3fb4:	0f be       	out	0x3f, r0	; 63
    3fb6:	0f 90       	pop	r0
    3fb8:	1f 90       	pop	r1
    3fba:	18 95       	reti

00003fbc <__vector_51>:
    3fbc:	1f 92       	push	r1
    3fbe:	0f 92       	push	r0
    3fc0:	0f b6       	in	r0, 0x3f	; 63
    3fc2:	0f 92       	push	r0
    3fc4:	11 24       	eor	r1, r1
    3fc6:	0b b6       	in	r0, 0x3b	; 59
    3fc8:	0f 92       	push	r0
    3fca:	2f 93       	push	r18
    3fcc:	3f 93       	push	r19
    3fce:	4f 93       	push	r20
    3fd0:	5f 93       	push	r21
    3fd2:	6f 93       	push	r22
    3fd4:	7f 93       	push	r23
    3fd6:	8f 93       	push	r24
    3fd8:	9f 93       	push	r25
    3fda:	af 93       	push	r26
    3fdc:	bf 93       	push	r27
    3fde:	cf 93       	push	r28
    3fe0:	df 93       	push	r29
    3fe2:	ef 93       	push	r30
    3fe4:	ff 93       	push	r31
    3fe6:	a0 91 9e 16 	lds	r26, 0x169E	; 0x80169e <_ser_handle+0x4>
    3fea:	b0 91 9f 16 	lds	r27, 0x169F	; 0x80169f <_ser_handle+0x5>
    3fee:	10 97       	sbiw	r26, 0x00	; 0
    3ff0:	11 f1       	breq	.+68     	; 0x4036 <__vector_51+0x7a>
    3ff2:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    3ff6:	14 96       	adiw	r26, 0x04	; 4
    3ff8:	ed 91       	ld	r30, X+
    3ffa:	fc 91       	ld	r31, X
    3ffc:	15 97       	sbiw	r26, 0x05	; 5
    3ffe:	93 81       	ldd	r25, Z+3	; 0x03
    4000:	82 81       	ldd	r24, Z+2	; 0x02
    4002:	25 81       	ldd	r18, Z+5	; 0x05
    4004:	98 1b       	sub	r25, r24
    4006:	92 23       	and	r25, r18
    4008:	84 81       	ldd	r24, Z+4	; 0x04
    400a:	98 17       	cp	r25, r24
    400c:	61 f0       	breq	.+24     	; 0x4026 <__vector_51+0x6a>
    400e:	83 81       	ldd	r24, Z+3	; 0x03
    4010:	26 95       	lsr	r18
    4012:	28 23       	and	r18, r24
    4014:	c0 81       	ld	r28, Z
    4016:	d1 81       	ldd	r29, Z+1	; 0x01
    4018:	c2 0f       	add	r28, r18
    401a:	d1 1d       	adc	r29, r1
    401c:	68 83       	st	Y, r22
    401e:	8f 5f       	subi	r24, 0xFF	; 255
    4020:	95 81       	ldd	r25, Z+5	; 0x05
    4022:	89 23       	and	r24, r25
    4024:	83 83       	std	Z+3, r24	; 0x03
    4026:	16 96       	adiw	r26, 0x06	; 6
    4028:	ed 91       	ld	r30, X+
    402a:	fc 91       	ld	r31, X
    402c:	17 97       	sbiw	r26, 0x07	; 7
    402e:	30 97       	sbiw	r30, 0x00	; 0
    4030:	11 f0       	breq	.+4      	; 0x4036 <__vector_51+0x7a>
    4032:	cd 01       	movw	r24, r26
    4034:	19 95       	eicall
    4036:	ff 91       	pop	r31
    4038:	ef 91       	pop	r30
    403a:	df 91       	pop	r29
    403c:	cf 91       	pop	r28
    403e:	bf 91       	pop	r27
    4040:	af 91       	pop	r26
    4042:	9f 91       	pop	r25
    4044:	8f 91       	pop	r24
    4046:	7f 91       	pop	r23
    4048:	6f 91       	pop	r22
    404a:	5f 91       	pop	r21
    404c:	4f 91       	pop	r20
    404e:	3f 91       	pop	r19
    4050:	2f 91       	pop	r18
    4052:	0f 90       	pop	r0
    4054:	0b be       	out	0x3b, r0	; 59
    4056:	0f 90       	pop	r0
    4058:	0f be       	out	0x3f, r0	; 63
    405a:	0f 90       	pop	r0
    405c:	1f 90       	pop	r1
    405e:	18 95       	reti

00004060 <__vector_52>:
    4060:	1f 92       	push	r1
    4062:	0f 92       	push	r0
    4064:	0f b6       	in	r0, 0x3f	; 63
    4066:	0f 92       	push	r0
    4068:	11 24       	eor	r1, r1
    406a:	0b b6       	in	r0, 0x3b	; 59
    406c:	0f 92       	push	r0
    406e:	2f 93       	push	r18
    4070:	8f 93       	push	r24
    4072:	9f 93       	push	r25
    4074:	af 93       	push	r26
    4076:	bf 93       	push	r27
    4078:	ef 93       	push	r30
    407a:	ff 93       	push	r31
    407c:	e0 91 9e 16 	lds	r30, 0x169E	; 0x80169e <_ser_handle+0x4>
    4080:	f0 91 9f 16 	lds	r31, 0x169F	; 0x80169f <_ser_handle+0x5>
    4084:	30 97       	sbiw	r30, 0x00	; 0
    4086:	b9 f0       	breq	.+46     	; 0x40b6 <__vector_52+0x56>
    4088:	02 80       	ldd	r0, Z+2	; 0x02
    408a:	f3 81       	ldd	r31, Z+3	; 0x03
    408c:	e0 2d       	mov	r30, r0
    408e:	93 81       	ldd	r25, Z+3	; 0x03
    4090:	82 81       	ldd	r24, Z+2	; 0x02
    4092:	98 17       	cp	r25, r24
    4094:	b1 f0       	breq	.+44     	; 0x40c2 <__vector_52+0x62>
    4096:	92 81       	ldd	r25, Z+2	; 0x02
    4098:	85 81       	ldd	r24, Z+5	; 0x05
    409a:	28 2f       	mov	r18, r24
    409c:	26 95       	lsr	r18
    409e:	29 23       	and	r18, r25
    40a0:	a0 81       	ld	r26, Z
    40a2:	b1 81       	ldd	r27, Z+1	; 0x01
    40a4:	a2 0f       	add	r26, r18
    40a6:	b1 1d       	adc	r27, r1
    40a8:	2c 91       	ld	r18, X
    40aa:	9f 5f       	subi	r25, 0xFF	; 255
    40ac:	89 23       	and	r24, r25
    40ae:	82 83       	std	Z+2, r24	; 0x02
    40b0:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    40b4:	0b c0       	rjmp	.+22     	; 0x40cc <__vector_52+0x6c>
    40b6:	e1 ed       	ldi	r30, 0xD1	; 209
    40b8:	f0 e0       	ldi	r31, 0x00	; 0
    40ba:	80 81       	ld	r24, Z
    40bc:	8f 7d       	andi	r24, 0xDF	; 223
    40be:	80 83       	st	Z, r24
    40c0:	05 c0       	rjmp	.+10     	; 0x40cc <__vector_52+0x6c>
    40c2:	e1 ed       	ldi	r30, 0xD1	; 209
    40c4:	f0 e0       	ldi	r31, 0x00	; 0
    40c6:	80 81       	ld	r24, Z
    40c8:	8f 7d       	andi	r24, 0xDF	; 223
    40ca:	80 83       	st	Z, r24
    40cc:	ff 91       	pop	r31
    40ce:	ef 91       	pop	r30
    40d0:	bf 91       	pop	r27
    40d2:	af 91       	pop	r26
    40d4:	9f 91       	pop	r25
    40d6:	8f 91       	pop	r24
    40d8:	2f 91       	pop	r18
    40da:	0f 90       	pop	r0
    40dc:	0b be       	out	0x3b, r0	; 59
    40de:	0f 90       	pop	r0
    40e0:	0f be       	out	0x3f, r0	; 63
    40e2:	0f 90       	pop	r0
    40e4:	1f 90       	pop	r1
    40e6:	18 95       	reti

000040e8 <__vector_54>:
    40e8:	1f 92       	push	r1
    40ea:	0f 92       	push	r0
    40ec:	0f b6       	in	r0, 0x3f	; 63
    40ee:	0f 92       	push	r0
    40f0:	11 24       	eor	r1, r1
    40f2:	0b b6       	in	r0, 0x3b	; 59
    40f4:	0f 92       	push	r0
    40f6:	2f 93       	push	r18
    40f8:	3f 93       	push	r19
    40fa:	4f 93       	push	r20
    40fc:	5f 93       	push	r21
    40fe:	6f 93       	push	r22
    4100:	7f 93       	push	r23
    4102:	8f 93       	push	r24
    4104:	9f 93       	push	r25
    4106:	af 93       	push	r26
    4108:	bf 93       	push	r27
    410a:	cf 93       	push	r28
    410c:	df 93       	push	r29
    410e:	ef 93       	push	r30
    4110:	ff 93       	push	r31
    4112:	a0 91 a0 16 	lds	r26, 0x16A0	; 0x8016a0 <_ser_handle+0x6>
    4116:	b0 91 a1 16 	lds	r27, 0x16A1	; 0x8016a1 <_ser_handle+0x7>
    411a:	10 97       	sbiw	r26, 0x00	; 0
    411c:	11 f1       	breq	.+68     	; 0x4162 <__vector_54+0x7a>
    411e:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4122:	14 96       	adiw	r26, 0x04	; 4
    4124:	ed 91       	ld	r30, X+
    4126:	fc 91       	ld	r31, X
    4128:	15 97       	sbiw	r26, 0x05	; 5
    412a:	93 81       	ldd	r25, Z+3	; 0x03
    412c:	82 81       	ldd	r24, Z+2	; 0x02
    412e:	25 81       	ldd	r18, Z+5	; 0x05
    4130:	98 1b       	sub	r25, r24
    4132:	92 23       	and	r25, r18
    4134:	84 81       	ldd	r24, Z+4	; 0x04
    4136:	98 17       	cp	r25, r24
    4138:	61 f0       	breq	.+24     	; 0x4152 <__vector_54+0x6a>
    413a:	83 81       	ldd	r24, Z+3	; 0x03
    413c:	26 95       	lsr	r18
    413e:	28 23       	and	r18, r24
    4140:	c0 81       	ld	r28, Z
    4142:	d1 81       	ldd	r29, Z+1	; 0x01
    4144:	c2 0f       	add	r28, r18
    4146:	d1 1d       	adc	r29, r1
    4148:	68 83       	st	Y, r22
    414a:	8f 5f       	subi	r24, 0xFF	; 255
    414c:	95 81       	ldd	r25, Z+5	; 0x05
    414e:	89 23       	and	r24, r25
    4150:	83 83       	std	Z+3, r24	; 0x03
    4152:	16 96       	adiw	r26, 0x06	; 6
    4154:	ed 91       	ld	r30, X+
    4156:	fc 91       	ld	r31, X
    4158:	17 97       	sbiw	r26, 0x07	; 7
    415a:	30 97       	sbiw	r30, 0x00	; 0
    415c:	11 f0       	breq	.+4      	; 0x4162 <__vector_54+0x7a>
    415e:	cd 01       	movw	r24, r26
    4160:	19 95       	eicall
    4162:	ff 91       	pop	r31
    4164:	ef 91       	pop	r30
    4166:	df 91       	pop	r29
    4168:	cf 91       	pop	r28
    416a:	bf 91       	pop	r27
    416c:	af 91       	pop	r26
    416e:	9f 91       	pop	r25
    4170:	8f 91       	pop	r24
    4172:	7f 91       	pop	r23
    4174:	6f 91       	pop	r22
    4176:	5f 91       	pop	r21
    4178:	4f 91       	pop	r20
    417a:	3f 91       	pop	r19
    417c:	2f 91       	pop	r18
    417e:	0f 90       	pop	r0
    4180:	0b be       	out	0x3b, r0	; 59
    4182:	0f 90       	pop	r0
    4184:	0f be       	out	0x3f, r0	; 63
    4186:	0f 90       	pop	r0
    4188:	1f 90       	pop	r1
    418a:	18 95       	reti

0000418c <__vector_55>:
    418c:	1f 92       	push	r1
    418e:	0f 92       	push	r0
    4190:	0f b6       	in	r0, 0x3f	; 63
    4192:	0f 92       	push	r0
    4194:	11 24       	eor	r1, r1
    4196:	0b b6       	in	r0, 0x3b	; 59
    4198:	0f 92       	push	r0
    419a:	2f 93       	push	r18
    419c:	8f 93       	push	r24
    419e:	9f 93       	push	r25
    41a0:	af 93       	push	r26
    41a2:	bf 93       	push	r27
    41a4:	ef 93       	push	r30
    41a6:	ff 93       	push	r31
    41a8:	e0 91 a0 16 	lds	r30, 0x16A0	; 0x8016a0 <_ser_handle+0x6>
    41ac:	f0 91 a1 16 	lds	r31, 0x16A1	; 0x8016a1 <_ser_handle+0x7>
    41b0:	30 97       	sbiw	r30, 0x00	; 0
    41b2:	b9 f0       	breq	.+46     	; 0x41e2 <__vector_55+0x56>
    41b4:	02 80       	ldd	r0, Z+2	; 0x02
    41b6:	f3 81       	ldd	r31, Z+3	; 0x03
    41b8:	e0 2d       	mov	r30, r0
    41ba:	93 81       	ldd	r25, Z+3	; 0x03
    41bc:	82 81       	ldd	r24, Z+2	; 0x02
    41be:	98 17       	cp	r25, r24
    41c0:	b1 f0       	breq	.+44     	; 0x41ee <__vector_55+0x62>
    41c2:	92 81       	ldd	r25, Z+2	; 0x02
    41c4:	85 81       	ldd	r24, Z+5	; 0x05
    41c6:	28 2f       	mov	r18, r24
    41c8:	26 95       	lsr	r18
    41ca:	29 23       	and	r18, r25
    41cc:	a0 81       	ld	r26, Z
    41ce:	b1 81       	ldd	r27, Z+1	; 0x01
    41d0:	a2 0f       	add	r26, r18
    41d2:	b1 1d       	adc	r27, r1
    41d4:	2c 91       	ld	r18, X
    41d6:	9f 5f       	subi	r25, 0xFF	; 255
    41d8:	89 23       	and	r24, r25
    41da:	82 83       	std	Z+2, r24	; 0x02
    41dc:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    41e0:	0b c0       	rjmp	.+22     	; 0x41f8 <__vector_55+0x6c>
    41e2:	e1 e3       	ldi	r30, 0x31	; 49
    41e4:	f1 e0       	ldi	r31, 0x01	; 1
    41e6:	80 81       	ld	r24, Z
    41e8:	8f 7d       	andi	r24, 0xDF	; 223
    41ea:	80 83       	st	Z, r24
    41ec:	05 c0       	rjmp	.+10     	; 0x41f8 <__vector_55+0x6c>
    41ee:	e1 e3       	ldi	r30, 0x31	; 49
    41f0:	f1 e0       	ldi	r31, 0x01	; 1
    41f2:	80 81       	ld	r24, Z
    41f4:	8f 7d       	andi	r24, 0xDF	; 223
    41f6:	80 83       	st	Z, r24
    41f8:	ff 91       	pop	r31
    41fa:	ef 91       	pop	r30
    41fc:	bf 91       	pop	r27
    41fe:	af 91       	pop	r26
    4200:	9f 91       	pop	r25
    4202:	8f 91       	pop	r24
    4204:	2f 91       	pop	r18
    4206:	0f 90       	pop	r0
    4208:	0b be       	out	0x3b, r0	; 59
    420a:	0f 90       	pop	r0
    420c:	0f be       	out	0x3f, r0	; 63
    420e:	0f 90       	pop	r0
    4210:	1f 90       	pop	r1
    4212:	18 95       	reti

00004214 <usart_getchar>:
    4214:	cf 93       	push	r28
    4216:	df 93       	push	r29
    4218:	1f 92       	push	r1
    421a:	cd b7       	in	r28, 0x3d	; 61
    421c:	de b7       	in	r29, 0x3e	; 62
    421e:	be 01       	movw	r22, r28
    4220:	6f 5f       	subi	r22, 0xFF	; 255
    4222:	7f 4f       	sbci	r23, 0xFF	; 255
    4224:	80 91 a2 16 	lds	r24, 0x16A2	; 0x8016a2 <_com_serial_instance>
    4228:	90 91 a3 16 	lds	r25, 0x16A3	; 0x8016a3 <_com_serial_instance+0x1>
    422c:	7b dd       	rcall	.-1290   	; 0x3d24 <serial_getByte>
    422e:	81 11       	cpse	r24, r1
    4230:	f6 cf       	rjmp	.-20     	; 0x421e <usart_getchar+0xa>
    4232:	89 81       	ldd	r24, Y+1	; 0x01
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	0f 90       	pop	r0
    4238:	df 91       	pop	r29
    423a:	cf 91       	pop	r28
    423c:	08 95       	ret

0000423e <usart_putchar>:
    423e:	68 2f       	mov	r22, r24
    4240:	80 91 a2 16 	lds	r24, 0x16A2	; 0x8016a2 <_com_serial_instance>
    4244:	90 91 a3 16 	lds	r25, 0x16A3	; 0x8016a3 <_com_serial_instance+0x1>
    4248:	ed dc       	rcall	.-1574   	; 0x3c24 <serial_sendByte>
    424a:	80 e0       	ldi	r24, 0x00	; 0
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	08 95       	ret

00004250 <stdio_initialise>:
    4250:	8f 92       	push	r8
    4252:	9f 92       	push	r9
    4254:	af 92       	push	r10
    4256:	cf 92       	push	r12
    4258:	ef 92       	push	r14
    425a:	0f 93       	push	r16
    425c:	81 2c       	mov	r8, r1
    425e:	91 2c       	mov	r9, r1
    4260:	68 94       	set
    4262:	aa 24       	eor	r10, r10
    4264:	a7 f8       	bld	r10, 7
    4266:	68 94       	set
    4268:	cc 24       	eor	r12, r12
    426a:	c7 f8       	bld	r12, 7
    426c:	e1 2c       	mov	r14, r1
    426e:	00 e0       	ldi	r16, 0x00	; 0
    4270:	23 e0       	ldi	r18, 0x03	; 3
    4272:	40 e0       	ldi	r20, 0x00	; 0
    4274:	51 ee       	ldi	r21, 0xE1	; 225
    4276:	60 e0       	ldi	r22, 0x00	; 0
    4278:	70 e0       	ldi	r23, 0x00	; 0
    427a:	33 dc       	rcall	.-1946   	; 0x3ae2 <serial_create>
    427c:	90 93 a3 16 	sts	0x16A3, r25	; 0x8016a3 <_com_serial_instance+0x1>
    4280:	80 93 a2 16 	sts	0x16A2, r24	; 0x8016a2 <_com_serial_instance>
    4284:	ee ec       	ldi	r30, 0xCE	; 206
    4286:	f6 e1       	ldi	r31, 0x16	; 22
    4288:	83 e1       	ldi	r24, 0x13	; 19
    428a:	92 e0       	ldi	r25, 0x02	; 2
    428c:	91 83       	std	Z+1, r25	; 0x01
    428e:	80 83       	st	Z, r24
    4290:	93 83       	std	Z+3, r25	; 0x03
    4292:	82 83       	std	Z+2, r24	; 0x02
    4294:	0f 91       	pop	r16
    4296:	ef 90       	pop	r14
    4298:	cf 90       	pop	r12
    429a:	af 90       	pop	r10
    429c:	9f 90       	pop	r9
    429e:	8f 90       	pop	r8
    42a0:	08 95       	ret

000042a2 <_turn_off>:
    42a2:	90 e0       	ldi	r25, 0x00	; 0
    42a4:	fc 01       	movw	r30, r24
    42a6:	ee 0f       	add	r30, r30
    42a8:	ff 1f       	adc	r31, r31
    42aa:	e8 0f       	add	r30, r24
    42ac:	f9 1f       	adc	r31, r25
    42ae:	ee 0f       	add	r30, r30
    42b0:	ff 1f       	adc	r31, r31
    42b2:	ec 55       	subi	r30, 0x5C	; 92
    42b4:	f9 4e       	sbci	r31, 0xE9	; 233
    42b6:	23 81       	ldd	r18, Z+3	; 0x03
    42b8:	21 11       	cpse	r18, r1
    42ba:	1f c0       	rjmp	.+62     	; 0x42fa <_turn_off+0x58>
    42bc:	9c 01       	movw	r18, r24
    42be:	22 0f       	add	r18, r18
    42c0:	33 1f       	adc	r19, r19
    42c2:	f9 01       	movw	r30, r18
    42c4:	e8 0f       	add	r30, r24
    42c6:	f9 1f       	adc	r31, r25
    42c8:	ee 0f       	add	r30, r30
    42ca:	ff 1f       	adc	r31, r31
    42cc:	ec 55       	subi	r30, 0x5C	; 92
    42ce:	f9 4e       	sbci	r31, 0xE9	; 233
    42d0:	a0 81       	ld	r26, Z
    42d2:	b1 81       	ldd	r27, Z+1	; 0x01
    42d4:	4c 91       	ld	r20, X
    42d6:	f9 01       	movw	r30, r18
    42d8:	e8 0f       	add	r30, r24
    42da:	f9 1f       	adc	r31, r25
    42dc:	ee 0f       	add	r30, r30
    42de:	ff 1f       	adc	r31, r31
    42e0:	ec 55       	subi	r30, 0x5C	; 92
    42e2:	f9 4e       	sbci	r31, 0xE9	; 233
    42e4:	81 e0       	ldi	r24, 0x01	; 1
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	02 80       	ldd	r0, Z+2	; 0x02
    42ea:	02 c0       	rjmp	.+4      	; 0x42f0 <_turn_off+0x4e>
    42ec:	88 0f       	add	r24, r24
    42ee:	99 1f       	adc	r25, r25
    42f0:	0a 94       	dec	r0
    42f2:	e2 f7       	brpl	.-8      	; 0x42ec <_turn_off+0x4a>
    42f4:	84 2b       	or	r24, r20
    42f6:	8c 93       	st	X, r24
    42f8:	08 95       	ret
    42fa:	fc 01       	movw	r30, r24
    42fc:	ee 0f       	add	r30, r30
    42fe:	ff 1f       	adc	r31, r31
    4300:	df 01       	movw	r26, r30
    4302:	a8 0f       	add	r26, r24
    4304:	b9 1f       	adc	r27, r25
    4306:	aa 0f       	add	r26, r26
    4308:	bb 1f       	adc	r27, r27
    430a:	ac 55       	subi	r26, 0x5C	; 92
    430c:	b9 4e       	sbci	r27, 0xE9	; 233
    430e:	0d 90       	ld	r0, X+
    4310:	bc 91       	ld	r27, X
    4312:	a0 2d       	mov	r26, r0
    4314:	2c 91       	ld	r18, X
    4316:	e8 0f       	add	r30, r24
    4318:	f9 1f       	adc	r31, r25
    431a:	ee 0f       	add	r30, r30
    431c:	ff 1f       	adc	r31, r31
    431e:	ec 55       	subi	r30, 0x5C	; 92
    4320:	f9 4e       	sbci	r31, 0xE9	; 233
    4322:	81 e0       	ldi	r24, 0x01	; 1
    4324:	90 e0       	ldi	r25, 0x00	; 0
    4326:	02 80       	ldd	r0, Z+2	; 0x02
    4328:	02 c0       	rjmp	.+4      	; 0x432e <_turn_off+0x8c>
    432a:	88 0f       	add	r24, r24
    432c:	99 1f       	adc	r25, r25
    432e:	0a 94       	dec	r0
    4330:	e2 f7       	brpl	.-8      	; 0x432a <_turn_off+0x88>
    4332:	80 95       	com	r24
    4334:	82 23       	and	r24, r18
    4336:	8c 93       	st	X, r24
    4338:	08 95       	ret

0000433a <_turn_on>:
    433a:	90 e0       	ldi	r25, 0x00	; 0
    433c:	fc 01       	movw	r30, r24
    433e:	ee 0f       	add	r30, r30
    4340:	ff 1f       	adc	r31, r31
    4342:	e8 0f       	add	r30, r24
    4344:	f9 1f       	adc	r31, r25
    4346:	ee 0f       	add	r30, r30
    4348:	ff 1f       	adc	r31, r31
    434a:	ec 55       	subi	r30, 0x5C	; 92
    434c:	f9 4e       	sbci	r31, 0xE9	; 233
    434e:	23 81       	ldd	r18, Z+3	; 0x03
    4350:	21 11       	cpse	r18, r1
    4352:	20 c0       	rjmp	.+64     	; 0x4394 <_turn_on+0x5a>
    4354:	9c 01       	movw	r18, r24
    4356:	22 0f       	add	r18, r18
    4358:	33 1f       	adc	r19, r19
    435a:	f9 01       	movw	r30, r18
    435c:	e8 0f       	add	r30, r24
    435e:	f9 1f       	adc	r31, r25
    4360:	ee 0f       	add	r30, r30
    4362:	ff 1f       	adc	r31, r31
    4364:	ec 55       	subi	r30, 0x5C	; 92
    4366:	f9 4e       	sbci	r31, 0xE9	; 233
    4368:	a0 81       	ld	r26, Z
    436a:	b1 81       	ldd	r27, Z+1	; 0x01
    436c:	4c 91       	ld	r20, X
    436e:	f9 01       	movw	r30, r18
    4370:	e8 0f       	add	r30, r24
    4372:	f9 1f       	adc	r31, r25
    4374:	ee 0f       	add	r30, r30
    4376:	ff 1f       	adc	r31, r31
    4378:	ec 55       	subi	r30, 0x5C	; 92
    437a:	f9 4e       	sbci	r31, 0xE9	; 233
    437c:	81 e0       	ldi	r24, 0x01	; 1
    437e:	90 e0       	ldi	r25, 0x00	; 0
    4380:	02 80       	ldd	r0, Z+2	; 0x02
    4382:	02 c0       	rjmp	.+4      	; 0x4388 <_turn_on+0x4e>
    4384:	88 0f       	add	r24, r24
    4386:	99 1f       	adc	r25, r25
    4388:	0a 94       	dec	r0
    438a:	e2 f7       	brpl	.-8      	; 0x4384 <_turn_on+0x4a>
    438c:	80 95       	com	r24
    438e:	84 23       	and	r24, r20
    4390:	8c 93       	st	X, r24
    4392:	08 95       	ret
    4394:	fc 01       	movw	r30, r24
    4396:	ee 0f       	add	r30, r30
    4398:	ff 1f       	adc	r31, r31
    439a:	df 01       	movw	r26, r30
    439c:	a8 0f       	add	r26, r24
    439e:	b9 1f       	adc	r27, r25
    43a0:	aa 0f       	add	r26, r26
    43a2:	bb 1f       	adc	r27, r27
    43a4:	ac 55       	subi	r26, 0x5C	; 92
    43a6:	b9 4e       	sbci	r27, 0xE9	; 233
    43a8:	0d 90       	ld	r0, X+
    43aa:	bc 91       	ld	r27, X
    43ac:	a0 2d       	mov	r26, r0
    43ae:	2c 91       	ld	r18, X
    43b0:	e8 0f       	add	r30, r24
    43b2:	f9 1f       	adc	r31, r25
    43b4:	ee 0f       	add	r30, r30
    43b6:	ff 1f       	adc	r31, r31
    43b8:	ec 55       	subi	r30, 0x5C	; 92
    43ba:	f9 4e       	sbci	r31, 0xE9	; 233
    43bc:	81 e0       	ldi	r24, 0x01	; 1
    43be:	90 e0       	ldi	r25, 0x00	; 0
    43c0:	02 80       	ldd	r0, Z+2	; 0x02
    43c2:	02 c0       	rjmp	.+4      	; 0x43c8 <_turn_on+0x8e>
    43c4:	88 0f       	add	r24, r24
    43c6:	99 1f       	adc	r25, r25
    43c8:	0a 94       	dec	r0
    43ca:	e2 f7       	brpl	.-8      	; 0x43c4 <_turn_on+0x8a>
    43cc:	82 2b       	or	r24, r18
    43ce:	8c 93       	st	X, r24
    43d0:	08 95       	ret

000043d2 <_hal_led_task>:
    43d2:	cc 24       	eor	r12, r12
    43d4:	c3 94       	inc	r12
    43d6:	d1 2c       	mov	r13, r1
    43d8:	68 94       	set
    43da:	bb 24       	eor	r11, r11
    43dc:	b2 f8       	bld	r11, 2
    43de:	c4 ea       	ldi	r28, 0xA4	; 164
    43e0:	d6 e1       	ldi	r29, 0x16	; 22
    43e2:	10 e0       	ldi	r17, 0x00	; 0
    43e4:	8c 81       	ldd	r24, Y+4	; 0x04
    43e6:	81 30       	cpi	r24, 0x01	; 1
    43e8:	81 f0       	breq	.+32     	; 0x440a <_hal_led_task+0x38>
    43ea:	18 f1       	brcs	.+70     	; 0x4432 <_hal_led_task+0x60>
    43ec:	82 30       	cpi	r24, 0x02	; 2
    43ee:	61 f5       	brne	.+88     	; 0x4448 <_hal_led_task+0x76>
    43f0:	e8 81       	ld	r30, Y
    43f2:	f9 81       	ldd	r31, Y+1	; 0x01
    43f4:	20 81       	ld	r18, Z
    43f6:	c6 01       	movw	r24, r12
    43f8:	0a 80       	ldd	r0, Y+2	; 0x02
    43fa:	02 c0       	rjmp	.+4      	; 0x4400 <_hal_led_task+0x2e>
    43fc:	88 0f       	add	r24, r24
    43fe:	99 1f       	adc	r25, r25
    4400:	0a 94       	dec	r0
    4402:	e2 f7       	brpl	.-8      	; 0x43fc <_hal_led_task+0x2a>
    4404:	82 27       	eor	r24, r18
    4406:	80 83       	st	Z, r24
    4408:	1f c0       	rjmp	.+62     	; 0x4448 <_hal_led_task+0x76>
    440a:	8d 81       	ldd	r24, Y+5	; 0x05
    440c:	8f 5f       	subi	r24, 0xFF	; 255
    440e:	86 30       	cpi	r24, 0x06	; 6
    4410:	10 f4       	brcc	.+4      	; 0x4416 <_hal_led_task+0x44>
    4412:	8d 83       	std	Y+5, r24	; 0x05
    4414:	19 c0       	rjmp	.+50     	; 0x4448 <_hal_led_task+0x76>
    4416:	1d 82       	std	Y+5, r1	; 0x05
    4418:	e8 81       	ld	r30, Y
    441a:	f9 81       	ldd	r31, Y+1	; 0x01
    441c:	20 81       	ld	r18, Z
    441e:	c6 01       	movw	r24, r12
    4420:	0a 80       	ldd	r0, Y+2	; 0x02
    4422:	02 c0       	rjmp	.+4      	; 0x4428 <_hal_led_task+0x56>
    4424:	88 0f       	add	r24, r24
    4426:	99 1f       	adc	r25, r25
    4428:	0a 94       	dec	r0
    442a:	e2 f7       	brpl	.-8      	; 0x4424 <_hal_led_task+0x52>
    442c:	82 27       	eor	r24, r18
    442e:	80 83       	st	Z, r24
    4430:	0b c0       	rjmp	.+22     	; 0x4448 <_hal_led_task+0x76>
    4432:	0d 81       	ldd	r16, Y+5	; 0x05
    4434:	00 23       	and	r16, r16
    4436:	29 f0       	breq	.+10     	; 0x4442 <_hal_led_task+0x70>
    4438:	81 2f       	mov	r24, r17
    443a:	7f df       	rcall	.-258    	; 0x433a <_turn_on>
    443c:	01 50       	subi	r16, 0x01	; 1
    443e:	0d 83       	std	Y+5, r16	; 0x05
    4440:	03 c0       	rjmp	.+6      	; 0x4448 <_hal_led_task+0x76>
    4442:	bc 82       	std	Y+4, r11	; 0x04
    4444:	81 2f       	mov	r24, r17
    4446:	2d df       	rcall	.-422    	; 0x42a2 <_turn_off>
    4448:	1f 5f       	subi	r17, 0xFF	; 255
    444a:	26 96       	adiw	r28, 0x06	; 6
    444c:	14 30       	cpi	r17, 0x04	; 4
    444e:	51 f6       	brne	.-108    	; 0x43e4 <_hal_led_task+0x12>
    4450:	6c e0       	ldi	r22, 0x0C	; 12
    4452:	70 e0       	ldi	r23, 0x00	; 0
    4454:	80 e0       	ldi	r24, 0x00	; 0
    4456:	90 e0       	ldi	r25, 0x00	; 0
    4458:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <vTaskDelay>
    445c:	c0 cf       	rjmp	.-128    	; 0x43de <_hal_led_task+0xc>

0000445e <status_leds_initialise>:
    445e:	ef 92       	push	r14
    4460:	ff 92       	push	r15
    4462:	0f 93       	push	r16
    4464:	1f 93       	push	r17
    4466:	cf 93       	push	r28
    4468:	df 93       	push	r29
    446a:	08 2f       	mov	r16, r24
    446c:	80 e4       	ldi	r24, 0x40	; 64
    446e:	87 b9       	out	0x07, r24	; 7
    4470:	c4 ea       	ldi	r28, 0xA4	; 164
    4472:	d6 e1       	ldi	r29, 0x16	; 22
    4474:	0f 2e       	mov	r0, r31
    4476:	f8 e2       	ldi	r31, 0x28	; 40
    4478:	ef 2e       	mov	r14, r31
    447a:	f1 2c       	mov	r15, r1
    447c:	f0 2d       	mov	r31, r0
    447e:	f9 82       	std	Y+1, r15	; 0x01
    4480:	e8 82       	st	Y, r14
    4482:	86 e0       	ldi	r24, 0x06	; 6
    4484:	8a 83       	std	Y+2, r24	; 0x02
    4486:	1b 82       	std	Y+3, r1	; 0x03
    4488:	14 e0       	ldi	r17, 0x04	; 4
    448a:	1c 83       	std	Y+4, r17	; 0x04
    448c:	80 e0       	ldi	r24, 0x00	; 0
    448e:	09 df       	rcall	.-494    	; 0x42a2 <_turn_off>
    4490:	80 e8       	ldi	r24, 0x80	; 128
    4492:	87 b9       	out	0x07, r24	; 7
    4494:	ff 82       	std	Y+7, r15	; 0x07
    4496:	ee 82       	std	Y+6, r14	; 0x06
    4498:	87 e0       	ldi	r24, 0x07	; 7
    449a:	88 87       	std	Y+8, r24	; 0x08
    449c:	19 86       	std	Y+9, r1	; 0x09
    449e:	1a 87       	std	Y+10, r17	; 0x0a
    44a0:	81 e0       	ldi	r24, 0x01	; 1
    44a2:	ff de       	rcall	.-514    	; 0x42a2 <_turn_off>
    44a4:	80 e2       	ldi	r24, 0x20	; 32
    44a6:	83 bb       	out	0x13, r24	; 19
    44a8:	84 e3       	ldi	r24, 0x34	; 52
    44aa:	90 e0       	ldi	r25, 0x00	; 0
    44ac:	9d 87       	std	Y+13, r25	; 0x0d
    44ae:	8c 87       	std	Y+12, r24	; 0x0c
    44b0:	85 e0       	ldi	r24, 0x05	; 5
    44b2:	8e 87       	std	Y+14, r24	; 0x0e
    44b4:	1f 86       	std	Y+15, r1	; 0x0f
    44b6:	18 8b       	std	Y+16, r17	; 0x10
    44b8:	82 e0       	ldi	r24, 0x02	; 2
    44ba:	f3 de       	rcall	.-538    	; 0x42a2 <_turn_off>
    44bc:	80 e1       	ldi	r24, 0x10	; 16
    44be:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    44c2:	82 e0       	ldi	r24, 0x02	; 2
    44c4:	91 e0       	ldi	r25, 0x01	; 1
    44c6:	9b 8b       	std	Y+19, r25	; 0x13
    44c8:	8a 8b       	std	Y+18, r24	; 0x12
    44ca:	1c 8b       	std	Y+20, r17	; 0x14
    44cc:	1d 8a       	std	Y+21, r1	; 0x15
    44ce:	1e 8b       	std	Y+22, r17	; 0x16
    44d0:	83 e0       	ldi	r24, 0x03	; 3
    44d2:	e7 de       	rcall	.-562    	; 0x42a2 <_turn_off>
    44d4:	e1 2c       	mov	r14, r1
    44d6:	f1 2c       	mov	r15, r1
    44d8:	20 e0       	ldi	r18, 0x00	; 0
    44da:	30 e0       	ldi	r19, 0x00	; 0
    44dc:	40 ec       	ldi	r20, 0xC0	; 192
    44de:	50 e0       	ldi	r21, 0x00	; 0
    44e0:	69 ee       	ldi	r22, 0xE9	; 233
    44e2:	76 e0       	ldi	r23, 0x06	; 6
    44e4:	89 ee       	ldi	r24, 0xE9	; 233
    44e6:	91 e2       	ldi	r25, 0x21	; 33
    44e8:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskCreate>
    44ec:	df 91       	pop	r29
    44ee:	cf 91       	pop	r28
    44f0:	1f 91       	pop	r17
    44f2:	0f 91       	pop	r16
    44f4:	ff 90       	pop	r15
    44f6:	ef 90       	pop	r14
    44f8:	08 95       	ret

000044fa <status_leds_slowBlink>:
    44fa:	cf 93       	push	r28
    44fc:	df 93       	push	r29
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	fc 01       	movw	r30, r24
    4502:	ee 0f       	add	r30, r30
    4504:	ff 1f       	adc	r31, r31
    4506:	df 01       	movw	r26, r30
    4508:	a8 0f       	add	r26, r24
    450a:	b9 1f       	adc	r27, r25
    450c:	aa 0f       	add	r26, r26
    450e:	bb 1f       	adc	r27, r27
    4510:	ac 55       	subi	r26, 0x5C	; 92
    4512:	b9 4e       	sbci	r27, 0xE9	; 233
    4514:	cd 91       	ld	r28, X+
    4516:	dc 91       	ld	r29, X
    4518:	11 97       	sbiw	r26, 0x01	; 1
    451a:	48 81       	ld	r20, Y
    451c:	21 e0       	ldi	r18, 0x01	; 1
    451e:	30 e0       	ldi	r19, 0x00	; 0
    4520:	12 96       	adiw	r26, 0x02	; 2
    4522:	0c 90       	ld	r0, X
    4524:	12 97       	sbiw	r26, 0x02	; 2
    4526:	02 c0       	rjmp	.+4      	; 0x452c <status_leds_slowBlink+0x32>
    4528:	22 0f       	add	r18, r18
    452a:	33 1f       	adc	r19, r19
    452c:	0a 94       	dec	r0
    452e:	e2 f7       	brpl	.-8      	; 0x4528 <status_leds_slowBlink+0x2e>
    4530:	24 27       	eor	r18, r20
    4532:	28 83       	st	Y, r18
    4534:	fd 01       	movw	r30, r26
    4536:	81 e0       	ldi	r24, 0x01	; 1
    4538:	84 83       	std	Z+4, r24	; 0x04
    453a:	df 91       	pop	r29
    453c:	cf 91       	pop	r28
    453e:	08 95       	ret

00004540 <status_leds_fastBlink>:
    4540:	cf 93       	push	r28
    4542:	df 93       	push	r29
    4544:	90 e0       	ldi	r25, 0x00	; 0
    4546:	fc 01       	movw	r30, r24
    4548:	ee 0f       	add	r30, r30
    454a:	ff 1f       	adc	r31, r31
    454c:	df 01       	movw	r26, r30
    454e:	a8 0f       	add	r26, r24
    4550:	b9 1f       	adc	r27, r25
    4552:	aa 0f       	add	r26, r26
    4554:	bb 1f       	adc	r27, r27
    4556:	ac 55       	subi	r26, 0x5C	; 92
    4558:	b9 4e       	sbci	r27, 0xE9	; 233
    455a:	cd 91       	ld	r28, X+
    455c:	dc 91       	ld	r29, X
    455e:	11 97       	sbiw	r26, 0x01	; 1
    4560:	48 81       	ld	r20, Y
    4562:	21 e0       	ldi	r18, 0x01	; 1
    4564:	30 e0       	ldi	r19, 0x00	; 0
    4566:	12 96       	adiw	r26, 0x02	; 2
    4568:	0c 90       	ld	r0, X
    456a:	12 97       	sbiw	r26, 0x02	; 2
    456c:	02 c0       	rjmp	.+4      	; 0x4572 <status_leds_fastBlink+0x32>
    456e:	22 0f       	add	r18, r18
    4570:	33 1f       	adc	r19, r19
    4572:	0a 94       	dec	r0
    4574:	e2 f7       	brpl	.-8      	; 0x456e <status_leds_fastBlink+0x2e>
    4576:	24 27       	eor	r18, r20
    4578:	28 83       	st	Y, r18
    457a:	fd 01       	movw	r30, r26
    457c:	82 e0       	ldi	r24, 0x02	; 2
    457e:	84 83       	std	Z+4, r24	; 0x04
    4580:	df 91       	pop	r29
    4582:	cf 91       	pop	r28
    4584:	08 95       	ret

00004586 <status_leds_ledOn>:
    4586:	28 2f       	mov	r18, r24
    4588:	30 e0       	ldi	r19, 0x00	; 0
    458a:	f9 01       	movw	r30, r18
    458c:	ee 0f       	add	r30, r30
    458e:	ff 1f       	adc	r31, r31
    4590:	e2 0f       	add	r30, r18
    4592:	f3 1f       	adc	r31, r19
    4594:	ee 0f       	add	r30, r30
    4596:	ff 1f       	adc	r31, r31
    4598:	ec 55       	subi	r30, 0x5C	; 92
    459a:	f9 4e       	sbci	r31, 0xE9	; 233
    459c:	93 e0       	ldi	r25, 0x03	; 3
    459e:	94 83       	std	Z+4, r25	; 0x04
    45a0:	cc ce       	rjmp	.-616    	; 0x433a <_turn_on>
    45a2:	08 95       	ret

000045a4 <status_leds_ledOff>:
    45a4:	28 2f       	mov	r18, r24
    45a6:	30 e0       	ldi	r19, 0x00	; 0
    45a8:	f9 01       	movw	r30, r18
    45aa:	ee 0f       	add	r30, r30
    45ac:	ff 1f       	adc	r31, r31
    45ae:	e2 0f       	add	r30, r18
    45b0:	f3 1f       	adc	r31, r19
    45b2:	ee 0f       	add	r30, r30
    45b4:	ff 1f       	adc	r31, r31
    45b6:	ec 55       	subi	r30, 0x5C	; 92
    45b8:	f9 4e       	sbci	r31, 0xE9	; 233
    45ba:	94 e0       	ldi	r25, 0x04	; 4
    45bc:	94 83       	std	Z+4, r25	; 0x04
    45be:	71 ce       	rjmp	.-798    	; 0x42a2 <_turn_off>
    45c0:	08 95       	ret

000045c2 <status_leds_longPuls>:
    45c2:	90 e0       	ldi	r25, 0x00	; 0
    45c4:	fc 01       	movw	r30, r24
    45c6:	ee 0f       	add	r30, r30
    45c8:	ff 1f       	adc	r31, r31
    45ca:	df 01       	movw	r26, r30
    45cc:	a8 0f       	add	r26, r24
    45ce:	b9 1f       	adc	r27, r25
    45d0:	aa 0f       	add	r26, r26
    45d2:	bb 1f       	adc	r27, r27
    45d4:	ac 55       	subi	r26, 0x5C	; 92
    45d6:	b9 4e       	sbci	r27, 0xE9	; 233
    45d8:	26 e0       	ldi	r18, 0x06	; 6
    45da:	15 96       	adiw	r26, 0x05	; 5
    45dc:	2c 93       	st	X, r18
    45de:	15 97       	sbiw	r26, 0x05	; 5
    45e0:	fd 01       	movw	r30, r26
    45e2:	14 82       	std	Z+4, r1	; 0x04
    45e4:	08 95       	ret

000045e6 <status_leds_shortPuls>:
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	fc 01       	movw	r30, r24
    45ea:	ee 0f       	add	r30, r30
    45ec:	ff 1f       	adc	r31, r31
    45ee:	df 01       	movw	r26, r30
    45f0:	a8 0f       	add	r26, r24
    45f2:	b9 1f       	adc	r27, r25
    45f4:	aa 0f       	add	r26, r26
    45f6:	bb 1f       	adc	r27, r27
    45f8:	ac 55       	subi	r26, 0x5C	; 92
    45fa:	b9 4e       	sbci	r27, 0xE9	; 233
    45fc:	15 96       	adiw	r26, 0x05	; 5
    45fe:	1c 92       	st	X, r1
    4600:	15 97       	sbiw	r26, 0x05	; 5
    4602:	fd 01       	movw	r30, r26
    4604:	14 82       	std	Z+4, r1	; 0x04
    4606:	08 95       	ret

00004608 <twiCreate>:
    4608:	af 92       	push	r10
    460a:	bf 92       	push	r11
    460c:	cf 92       	push	r12
    460e:	df 92       	push	r13
    4610:	ef 92       	push	r14
    4612:	ff 92       	push	r15
    4614:	0f 93       	push	r16
    4616:	1f 93       	push	r17
    4618:	cf 93       	push	r28
    461a:	df 93       	push	r29
    461c:	a8 2e       	mov	r10, r24
    461e:	b6 2e       	mov	r11, r22
    4620:	69 01       	movw	r12, r18
    4622:	7a 01       	movw	r14, r20
    4624:	84 e0       	ldi	r24, 0x04	; 4
    4626:	90 e0       	ldi	r25, 0x00	; 0
    4628:	29 d3       	rcall	.+1618   	; 0x4c7c <malloc>
    462a:	ec 01       	movw	r28, r24
    462c:	89 2b       	or	r24, r25
    462e:	61 f1       	breq	.+88     	; 0x4688 <twiCreate+0x80>
    4630:	a8 82       	st	Y, r10
    4632:	81 e0       	ldi	r24, 0x01	; 1
    4634:	b8 12       	cpse	r11, r24
    4636:	12 c0       	rjmp	.+36     	; 0x465c <twiCreate+0x54>
    4638:	c7 01       	movw	r24, r14
    463a:	b6 01       	movw	r22, r12
    463c:	20 ea       	ldi	r18, 0xA0	; 160
    463e:	36 e8       	ldi	r19, 0x86	; 134
    4640:	41 e0       	ldi	r20, 0x01	; 1
    4642:	50 e0       	ldi	r21, 0x00	; 0
    4644:	f1 d2       	rcall	.+1506   	; 0x4c28 <__udivmodsi4>
    4646:	da 01       	movw	r26, r20
    4648:	c9 01       	movw	r24, r18
    464a:	40 97       	sbiw	r24, 0x10	; 16
    464c:	a1 09       	sbc	r26, r1
    464e:	b1 09       	sbc	r27, r1
    4650:	b6 95       	lsr	r27
    4652:	a7 95       	ror	r26
    4654:	97 95       	ror	r25
    4656:	87 95       	ror	r24
    4658:	89 83       	std	Y+1, r24	; 0x01
    465a:	11 c0       	rjmp	.+34     	; 0x467e <twiCreate+0x76>
    465c:	c7 01       	movw	r24, r14
    465e:	b6 01       	movw	r22, r12
    4660:	20 e8       	ldi	r18, 0x80	; 128
    4662:	3a e1       	ldi	r19, 0x1A	; 26
    4664:	46 e0       	ldi	r20, 0x06	; 6
    4666:	50 e0       	ldi	r21, 0x00	; 0
    4668:	df d2       	rcall	.+1470   	; 0x4c28 <__udivmodsi4>
    466a:	da 01       	movw	r26, r20
    466c:	c9 01       	movw	r24, r18
    466e:	40 97       	sbiw	r24, 0x10	; 16
    4670:	a1 09       	sbc	r26, r1
    4672:	b1 09       	sbc	r27, r1
    4674:	b6 95       	lsr	r27
    4676:	a7 95       	ror	r26
    4678:	97 95       	ror	r25
    467a:	87 95       	ror	r24
    467c:	89 83       	std	Y+1, r24	; 0x01
    467e:	1b 83       	std	Y+3, r17	; 0x03
    4680:	0a 83       	std	Y+2, r16	; 0x02
    4682:	8c 2f       	mov	r24, r28
    4684:	9d 2f       	mov	r25, r29
    4686:	02 c0       	rjmp	.+4      	; 0x468c <twiCreate+0x84>
    4688:	80 e0       	ldi	r24, 0x00	; 0
    468a:	90 e0       	ldi	r25, 0x00	; 0
    468c:	df 91       	pop	r29
    468e:	cf 91       	pop	r28
    4690:	1f 91       	pop	r17
    4692:	0f 91       	pop	r16
    4694:	ff 90       	pop	r15
    4696:	ef 90       	pop	r14
    4698:	df 90       	pop	r13
    469a:	cf 90       	pop	r12
    469c:	bf 90       	pop	r11
    469e:	af 90       	pop	r10
    46a0:	08 95       	ret

000046a2 <__vector_39>:
    46a2:	1f 92       	push	r1
    46a4:	0f 92       	push	r0
    46a6:	0f b6       	in	r0, 0x3f	; 63
    46a8:	0f 92       	push	r0
    46aa:	11 24       	eor	r1, r1
    46ac:	0b b6       	in	r0, 0x3b	; 59
    46ae:	0f 92       	push	r0
    46b0:	2f 93       	push	r18
    46b2:	3f 93       	push	r19
    46b4:	4f 93       	push	r20
    46b6:	5f 93       	push	r21
    46b8:	6f 93       	push	r22
    46ba:	7f 93       	push	r23
    46bc:	8f 93       	push	r24
    46be:	9f 93       	push	r25
    46c0:	af 93       	push	r26
    46c2:	bf 93       	push	r27
    46c4:	ef 93       	push	r30
    46c6:	ff 93       	push	r31
    46c8:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    46cc:	8e 2f       	mov	r24, r30
    46ce:	90 e0       	ldi	r25, 0x00	; 0
    46d0:	fc 01       	movw	r30, r24
    46d2:	38 97       	sbiw	r30, 0x08	; 8
    46d4:	e1 35       	cpi	r30, 0x51	; 81
    46d6:	f1 05       	cpc	r31, r1
    46d8:	08 f0       	brcs	.+2      	; 0x46dc <__vector_39+0x3a>
    46da:	75 c0       	rjmp	.+234    	; 0x47c6 <__vector_39+0x124>
    46dc:	88 27       	eor	r24, r24
    46de:	e4 58       	subi	r30, 0x84	; 132
    46e0:	ff 4f       	sbci	r31, 0xFF	; 255
    46e2:	8f 4f       	sbci	r24, 0xFF	; 255
    46e4:	c3 c2       	rjmp	.+1414   	; 0x4c6c <__tablejump2__>
    46e6:	10 92 bc 16 	sts	0x16BC, r1	; 0x8016bc <_index.1885>
    46ea:	e0 91 bc 16 	lds	r30, 0x16BC	; 0x8016bc <_index.1885>
    46ee:	80 91 bf 16 	lds	r24, 0x16BF	; 0x8016bf <_twiMessageLen>
    46f2:	e8 17       	cp	r30, r24
    46f4:	70 f4       	brcc	.+28     	; 0x4712 <__vector_39+0x70>
    46f6:	81 e0       	ldi	r24, 0x01	; 1
    46f8:	8e 0f       	add	r24, r30
    46fa:	80 93 bc 16 	sts	0x16BC, r24	; 0x8016bc <_index.1885>
    46fe:	f0 e0       	ldi	r31, 0x00	; 0
    4700:	e0 54       	subi	r30, 0x40	; 64
    4702:	f9 4e       	sbci	r31, 0xE9	; 233
    4704:	80 81       	ld	r24, Z
    4706:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    470a:	85 e8       	ldi	r24, 0x85	; 133
    470c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4710:	72 c0       	rjmp	.+228    	; 0x47f6 <__vector_39+0x154>
    4712:	84 e9       	ldi	r24, 0x94	; 148
    4714:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4718:	80 91 bd 16 	lds	r24, 0x16BD	; 0x8016bd <_twiCurrentHandler>
    471c:	90 91 be 16 	lds	r25, 0x16BE	; 0x8016be <_twiCurrentHandler+0x1>
    4720:	dc 01       	movw	r26, r24
    4722:	12 96       	adiw	r26, 0x02	; 2
    4724:	ed 91       	ld	r30, X+
    4726:	fc 91       	ld	r31, X
    4728:	13 97       	sbiw	r26, 0x03	; 3
    472a:	30 97       	sbiw	r30, 0x00	; 0
    472c:	09 f4       	brne	.+2      	; 0x4730 <__vector_39+0x8e>
    472e:	63 c0       	rjmp	.+198    	; 0x47f6 <__vector_39+0x154>
    4730:	20 e0       	ldi	r18, 0x00	; 0
    4732:	40 e0       	ldi	r20, 0x00	; 0
    4734:	50 e0       	ldi	r21, 0x00	; 0
    4736:	64 e0       	ldi	r22, 0x04	; 4
    4738:	19 95       	eicall
    473a:	5d c0       	rjmp	.+186    	; 0x47f6 <__vector_39+0x154>
    473c:	e0 91 bc 16 	lds	r30, 0x16BC	; 0x8016bc <_index.1885>
    4740:	81 e0       	ldi	r24, 0x01	; 1
    4742:	8e 0f       	add	r24, r30
    4744:	80 93 bc 16 	sts	0x16BC, r24	; 0x8016bc <_index.1885>
    4748:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    474c:	f0 e0       	ldi	r31, 0x00	; 0
    474e:	e0 54       	subi	r30, 0x40	; 64
    4750:	f9 4e       	sbci	r31, 0xE9	; 233
    4752:	80 83       	st	Z, r24
    4754:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4758:	80 34       	cpi	r24, 0x40	; 64
    475a:	11 f4       	brne	.+4      	; 0x4760 <__vector_39+0xbe>
    475c:	10 92 bc 16 	sts	0x16BC, r1	; 0x8016bc <_index.1885>
    4760:	20 91 bc 16 	lds	r18, 0x16BC	; 0x8016bc <_index.1885>
    4764:	30 e0       	ldi	r19, 0x00	; 0
    4766:	80 91 bf 16 	lds	r24, 0x16BF	; 0x8016bf <_twiMessageLen>
    476a:	90 e0       	ldi	r25, 0x00	; 0
    476c:	01 97       	sbiw	r24, 0x01	; 1
    476e:	28 17       	cp	r18, r24
    4770:	39 07       	cpc	r19, r25
    4772:	24 f4       	brge	.+8      	; 0x477c <__vector_39+0xda>
    4774:	85 ec       	ldi	r24, 0xC5	; 197
    4776:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    477a:	3d c0       	rjmp	.+122    	; 0x47f6 <__vector_39+0x154>
    477c:	85 e8       	ldi	r24, 0x85	; 133
    477e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4782:	39 c0       	rjmp	.+114    	; 0x47f6 <__vector_39+0x154>
    4784:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4788:	e0 91 bc 16 	lds	r30, 0x16BC	; 0x8016bc <_index.1885>
    478c:	f0 e0       	ldi	r31, 0x00	; 0
    478e:	e0 54       	subi	r30, 0x40	; 64
    4790:	f9 4e       	sbci	r31, 0xE9	; 233
    4792:	80 83       	st	Z, r24
    4794:	84 e9       	ldi	r24, 0x94	; 148
    4796:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    479a:	80 91 bd 16 	lds	r24, 0x16BD	; 0x8016bd <_twiCurrentHandler>
    479e:	90 91 be 16 	lds	r25, 0x16BE	; 0x8016be <_twiCurrentHandler+0x1>
    47a2:	dc 01       	movw	r26, r24
    47a4:	12 96       	adiw	r26, 0x02	; 2
    47a6:	ed 91       	ld	r30, X+
    47a8:	fc 91       	ld	r31, X
    47aa:	13 97       	sbiw	r26, 0x03	; 3
    47ac:	30 97       	sbiw	r30, 0x00	; 0
    47ae:	19 f1       	breq	.+70     	; 0x47f6 <__vector_39+0x154>
    47b0:	20 91 bf 16 	lds	r18, 0x16BF	; 0x8016bf <_twiMessageLen>
    47b4:	40 ec       	ldi	r20, 0xC0	; 192
    47b6:	56 e1       	ldi	r21, 0x16	; 22
    47b8:	65 e0       	ldi	r22, 0x05	; 5
    47ba:	19 95       	eicall
    47bc:	1c c0       	rjmp	.+56     	; 0x47f6 <__vector_39+0x154>
    47be:	85 ea       	ldi	r24, 0xA5	; 165
    47c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    47c4:	18 c0       	rjmp	.+48     	; 0x47f6 <__vector_39+0x154>
    47c6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    47ca:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    47ce:	84 e0       	ldi	r24, 0x04	; 4
    47d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    47d4:	80 91 bd 16 	lds	r24, 0x16BD	; 0x8016bd <_twiCurrentHandler>
    47d8:	90 91 be 16 	lds	r25, 0x16BE	; 0x8016be <_twiCurrentHandler+0x1>
    47dc:	dc 01       	movw	r26, r24
    47de:	12 96       	adiw	r26, 0x02	; 2
    47e0:	ed 91       	ld	r30, X+
    47e2:	fc 91       	ld	r31, X
    47e4:	13 97       	sbiw	r26, 0x03	; 3
    47e6:	30 97       	sbiw	r30, 0x00	; 0
    47e8:	31 f0       	breq	.+12     	; 0x47f6 <__vector_39+0x154>
    47ea:	20 e0       	ldi	r18, 0x00	; 0
    47ec:	40 e0       	ldi	r20, 0x00	; 0
    47ee:	50 e0       	ldi	r21, 0x00	; 0
    47f0:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    47f4:	19 95       	eicall
    47f6:	ff 91       	pop	r31
    47f8:	ef 91       	pop	r30
    47fa:	bf 91       	pop	r27
    47fc:	af 91       	pop	r26
    47fe:	9f 91       	pop	r25
    4800:	8f 91       	pop	r24
    4802:	7f 91       	pop	r23
    4804:	6f 91       	pop	r22
    4806:	5f 91       	pop	r21
    4808:	4f 91       	pop	r20
    480a:	3f 91       	pop	r19
    480c:	2f 91       	pop	r18
    480e:	0f 90       	pop	r0
    4810:	0b be       	out	0x3b, r0	; 59
    4812:	0f 90       	pop	r0
    4814:	0f be       	out	0x3f, r0	; 63
    4816:	0f 90       	pop	r0
    4818:	1f 90       	pop	r1
    481a:	18 95       	reti

0000481c <fifo_init>:
    481c:	fc 01       	movw	r30, r24
    481e:	41 11       	cpse	r20, r1
    4820:	01 c0       	rjmp	.+2      	; 0x4824 <fifo_init+0x8>
    4822:	4d d3       	rcall	.+1690   	; 0x4ebe <abort>
    4824:	84 2f       	mov	r24, r20
    4826:	90 e0       	ldi	r25, 0x00	; 0
    4828:	9c 01       	movw	r18, r24
    482a:	21 50       	subi	r18, 0x01	; 1
    482c:	31 09       	sbc	r19, r1
    482e:	82 23       	and	r24, r18
    4830:	93 23       	and	r25, r19
    4832:	89 2b       	or	r24, r25
    4834:	09 f0       	breq	.+2      	; 0x4838 <fifo_init+0x1c>
    4836:	43 d3       	rcall	.+1670   	; 0x4ebe <abort>
    4838:	41 38       	cpi	r20, 0x81	; 129
    483a:	08 f0       	brcs	.+2      	; 0x483e <fifo_init+0x22>
    483c:	40 d3       	rcall	.+1664   	; 0x4ebe <abort>
    483e:	12 82       	std	Z+2, r1	; 0x02
    4840:	13 82       	std	Z+3, r1	; 0x03
    4842:	44 83       	std	Z+4, r20	; 0x04
    4844:	44 0f       	add	r20, r20
    4846:	41 50       	subi	r20, 0x01	; 1
    4848:	45 83       	std	Z+5, r20	; 0x05
    484a:	71 83       	std	Z+1, r23	; 0x01
    484c:	60 83       	st	Z, r22
    484e:	80 e0       	ldi	r24, 0x00	; 0
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	08 95       	ret

00004854 <__subsf3>:
    4854:	50 58       	subi	r21, 0x80	; 128

00004856 <__addsf3>:
    4856:	bb 27       	eor	r27, r27
    4858:	aa 27       	eor	r26, r26
    485a:	0e d0       	rcall	.+28     	; 0x4878 <__addsf3x>
    485c:	48 c1       	rjmp	.+656    	; 0x4aee <__fp_round>
    485e:	39 d1       	rcall	.+626    	; 0x4ad2 <__fp_pscA>
    4860:	30 f0       	brcs	.+12     	; 0x486e <__addsf3+0x18>
    4862:	3e d1       	rcall	.+636    	; 0x4ae0 <__fp_pscB>
    4864:	20 f0       	brcs	.+8      	; 0x486e <__addsf3+0x18>
    4866:	31 f4       	brne	.+12     	; 0x4874 <__addsf3+0x1e>
    4868:	9f 3f       	cpi	r25, 0xFF	; 255
    486a:	11 f4       	brne	.+4      	; 0x4870 <__addsf3+0x1a>
    486c:	1e f4       	brtc	.+6      	; 0x4874 <__addsf3+0x1e>
    486e:	2e c1       	rjmp	.+604    	; 0x4acc <__fp_nan>
    4870:	0e f4       	brtc	.+2      	; 0x4874 <__addsf3+0x1e>
    4872:	e0 95       	com	r30
    4874:	e7 fb       	bst	r30, 7
    4876:	24 c1       	rjmp	.+584    	; 0x4ac0 <__fp_inf>

00004878 <__addsf3x>:
    4878:	e9 2f       	mov	r30, r25
    487a:	4a d1       	rcall	.+660    	; 0x4b10 <__fp_split3>
    487c:	80 f3       	brcs	.-32     	; 0x485e <__addsf3+0x8>
    487e:	ba 17       	cp	r27, r26
    4880:	62 07       	cpc	r22, r18
    4882:	73 07       	cpc	r23, r19
    4884:	84 07       	cpc	r24, r20
    4886:	95 07       	cpc	r25, r21
    4888:	18 f0       	brcs	.+6      	; 0x4890 <__addsf3x+0x18>
    488a:	71 f4       	brne	.+28     	; 0x48a8 <__addsf3x+0x30>
    488c:	9e f5       	brtc	.+102    	; 0x48f4 <__addsf3x+0x7c>
    488e:	62 c1       	rjmp	.+708    	; 0x4b54 <__fp_zero>
    4890:	0e f4       	brtc	.+2      	; 0x4894 <__addsf3x+0x1c>
    4892:	e0 95       	com	r30
    4894:	0b 2e       	mov	r0, r27
    4896:	ba 2f       	mov	r27, r26
    4898:	a0 2d       	mov	r26, r0
    489a:	0b 01       	movw	r0, r22
    489c:	b9 01       	movw	r22, r18
    489e:	90 01       	movw	r18, r0
    48a0:	0c 01       	movw	r0, r24
    48a2:	ca 01       	movw	r24, r20
    48a4:	a0 01       	movw	r20, r0
    48a6:	11 24       	eor	r1, r1
    48a8:	ff 27       	eor	r31, r31
    48aa:	59 1b       	sub	r21, r25
    48ac:	99 f0       	breq	.+38     	; 0x48d4 <__addsf3x+0x5c>
    48ae:	59 3f       	cpi	r21, 0xF9	; 249
    48b0:	50 f4       	brcc	.+20     	; 0x48c6 <__addsf3x+0x4e>
    48b2:	50 3e       	cpi	r21, 0xE0	; 224
    48b4:	68 f1       	brcs	.+90     	; 0x4910 <__addsf3x+0x98>
    48b6:	1a 16       	cp	r1, r26
    48b8:	f0 40       	sbci	r31, 0x00	; 0
    48ba:	a2 2f       	mov	r26, r18
    48bc:	23 2f       	mov	r18, r19
    48be:	34 2f       	mov	r19, r20
    48c0:	44 27       	eor	r20, r20
    48c2:	58 5f       	subi	r21, 0xF8	; 248
    48c4:	f3 cf       	rjmp	.-26     	; 0x48ac <__addsf3x+0x34>
    48c6:	46 95       	lsr	r20
    48c8:	37 95       	ror	r19
    48ca:	27 95       	ror	r18
    48cc:	a7 95       	ror	r26
    48ce:	f0 40       	sbci	r31, 0x00	; 0
    48d0:	53 95       	inc	r21
    48d2:	c9 f7       	brne	.-14     	; 0x48c6 <__addsf3x+0x4e>
    48d4:	7e f4       	brtc	.+30     	; 0x48f4 <__addsf3x+0x7c>
    48d6:	1f 16       	cp	r1, r31
    48d8:	ba 0b       	sbc	r27, r26
    48da:	62 0b       	sbc	r22, r18
    48dc:	73 0b       	sbc	r23, r19
    48de:	84 0b       	sbc	r24, r20
    48e0:	ba f0       	brmi	.+46     	; 0x4910 <__addsf3x+0x98>
    48e2:	91 50       	subi	r25, 0x01	; 1
    48e4:	a1 f0       	breq	.+40     	; 0x490e <__addsf3x+0x96>
    48e6:	ff 0f       	add	r31, r31
    48e8:	bb 1f       	adc	r27, r27
    48ea:	66 1f       	adc	r22, r22
    48ec:	77 1f       	adc	r23, r23
    48ee:	88 1f       	adc	r24, r24
    48f0:	c2 f7       	brpl	.-16     	; 0x48e2 <__addsf3x+0x6a>
    48f2:	0e c0       	rjmp	.+28     	; 0x4910 <__addsf3x+0x98>
    48f4:	ba 0f       	add	r27, r26
    48f6:	62 1f       	adc	r22, r18
    48f8:	73 1f       	adc	r23, r19
    48fa:	84 1f       	adc	r24, r20
    48fc:	48 f4       	brcc	.+18     	; 0x4910 <__addsf3x+0x98>
    48fe:	87 95       	ror	r24
    4900:	77 95       	ror	r23
    4902:	67 95       	ror	r22
    4904:	b7 95       	ror	r27
    4906:	f7 95       	ror	r31
    4908:	9e 3f       	cpi	r25, 0xFE	; 254
    490a:	08 f0       	brcs	.+2      	; 0x490e <__addsf3x+0x96>
    490c:	b3 cf       	rjmp	.-154    	; 0x4874 <__addsf3+0x1e>
    490e:	93 95       	inc	r25
    4910:	88 0f       	add	r24, r24
    4912:	08 f0       	brcs	.+2      	; 0x4916 <__addsf3x+0x9e>
    4914:	99 27       	eor	r25, r25
    4916:	ee 0f       	add	r30, r30
    4918:	97 95       	ror	r25
    491a:	87 95       	ror	r24
    491c:	08 95       	ret

0000491e <__divsf3>:
    491e:	0c d0       	rcall	.+24     	; 0x4938 <__divsf3x>
    4920:	e6 c0       	rjmp	.+460    	; 0x4aee <__fp_round>
    4922:	de d0       	rcall	.+444    	; 0x4ae0 <__fp_pscB>
    4924:	40 f0       	brcs	.+16     	; 0x4936 <__divsf3+0x18>
    4926:	d5 d0       	rcall	.+426    	; 0x4ad2 <__fp_pscA>
    4928:	30 f0       	brcs	.+12     	; 0x4936 <__divsf3+0x18>
    492a:	21 f4       	brne	.+8      	; 0x4934 <__divsf3+0x16>
    492c:	5f 3f       	cpi	r21, 0xFF	; 255
    492e:	19 f0       	breq	.+6      	; 0x4936 <__divsf3+0x18>
    4930:	c7 c0       	rjmp	.+398    	; 0x4ac0 <__fp_inf>
    4932:	51 11       	cpse	r21, r1
    4934:	10 c1       	rjmp	.+544    	; 0x4b56 <__fp_szero>
    4936:	ca c0       	rjmp	.+404    	; 0x4acc <__fp_nan>

00004938 <__divsf3x>:
    4938:	eb d0       	rcall	.+470    	; 0x4b10 <__fp_split3>
    493a:	98 f3       	brcs	.-26     	; 0x4922 <__divsf3+0x4>

0000493c <__divsf3_pse>:
    493c:	99 23       	and	r25, r25
    493e:	c9 f3       	breq	.-14     	; 0x4932 <__divsf3+0x14>
    4940:	55 23       	and	r21, r21
    4942:	b1 f3       	breq	.-20     	; 0x4930 <__divsf3+0x12>
    4944:	95 1b       	sub	r25, r21
    4946:	55 0b       	sbc	r21, r21
    4948:	bb 27       	eor	r27, r27
    494a:	aa 27       	eor	r26, r26
    494c:	62 17       	cp	r22, r18
    494e:	73 07       	cpc	r23, r19
    4950:	84 07       	cpc	r24, r20
    4952:	38 f0       	brcs	.+14     	; 0x4962 <__divsf3_pse+0x26>
    4954:	9f 5f       	subi	r25, 0xFF	; 255
    4956:	5f 4f       	sbci	r21, 0xFF	; 255
    4958:	22 0f       	add	r18, r18
    495a:	33 1f       	adc	r19, r19
    495c:	44 1f       	adc	r20, r20
    495e:	aa 1f       	adc	r26, r26
    4960:	a9 f3       	breq	.-22     	; 0x494c <__divsf3_pse+0x10>
    4962:	33 d0       	rcall	.+102    	; 0x49ca <__divsf3_pse+0x8e>
    4964:	0e 2e       	mov	r0, r30
    4966:	3a f0       	brmi	.+14     	; 0x4976 <__divsf3_pse+0x3a>
    4968:	e0 e8       	ldi	r30, 0x80	; 128
    496a:	30 d0       	rcall	.+96     	; 0x49cc <__divsf3_pse+0x90>
    496c:	91 50       	subi	r25, 0x01	; 1
    496e:	50 40       	sbci	r21, 0x00	; 0
    4970:	e6 95       	lsr	r30
    4972:	00 1c       	adc	r0, r0
    4974:	ca f7       	brpl	.-14     	; 0x4968 <__divsf3_pse+0x2c>
    4976:	29 d0       	rcall	.+82     	; 0x49ca <__divsf3_pse+0x8e>
    4978:	fe 2f       	mov	r31, r30
    497a:	27 d0       	rcall	.+78     	; 0x49ca <__divsf3_pse+0x8e>
    497c:	66 0f       	add	r22, r22
    497e:	77 1f       	adc	r23, r23
    4980:	88 1f       	adc	r24, r24
    4982:	bb 1f       	adc	r27, r27
    4984:	26 17       	cp	r18, r22
    4986:	37 07       	cpc	r19, r23
    4988:	48 07       	cpc	r20, r24
    498a:	ab 07       	cpc	r26, r27
    498c:	b0 e8       	ldi	r27, 0x80	; 128
    498e:	09 f0       	breq	.+2      	; 0x4992 <__divsf3_pse+0x56>
    4990:	bb 0b       	sbc	r27, r27
    4992:	80 2d       	mov	r24, r0
    4994:	bf 01       	movw	r22, r30
    4996:	ff 27       	eor	r31, r31
    4998:	93 58       	subi	r25, 0x83	; 131
    499a:	5f 4f       	sbci	r21, 0xFF	; 255
    499c:	2a f0       	brmi	.+10     	; 0x49a8 <__divsf3_pse+0x6c>
    499e:	9e 3f       	cpi	r25, 0xFE	; 254
    49a0:	51 05       	cpc	r21, r1
    49a2:	68 f0       	brcs	.+26     	; 0x49be <__divsf3_pse+0x82>
    49a4:	8d c0       	rjmp	.+282    	; 0x4ac0 <__fp_inf>
    49a6:	d7 c0       	rjmp	.+430    	; 0x4b56 <__fp_szero>
    49a8:	5f 3f       	cpi	r21, 0xFF	; 255
    49aa:	ec f3       	brlt	.-6      	; 0x49a6 <__divsf3_pse+0x6a>
    49ac:	98 3e       	cpi	r25, 0xE8	; 232
    49ae:	dc f3       	brlt	.-10     	; 0x49a6 <__divsf3_pse+0x6a>
    49b0:	86 95       	lsr	r24
    49b2:	77 95       	ror	r23
    49b4:	67 95       	ror	r22
    49b6:	b7 95       	ror	r27
    49b8:	f7 95       	ror	r31
    49ba:	9f 5f       	subi	r25, 0xFF	; 255
    49bc:	c9 f7       	brne	.-14     	; 0x49b0 <__divsf3_pse+0x74>
    49be:	88 0f       	add	r24, r24
    49c0:	91 1d       	adc	r25, r1
    49c2:	96 95       	lsr	r25
    49c4:	87 95       	ror	r24
    49c6:	97 f9       	bld	r25, 7
    49c8:	08 95       	ret
    49ca:	e1 e0       	ldi	r30, 0x01	; 1
    49cc:	66 0f       	add	r22, r22
    49ce:	77 1f       	adc	r23, r23
    49d0:	88 1f       	adc	r24, r24
    49d2:	bb 1f       	adc	r27, r27
    49d4:	62 17       	cp	r22, r18
    49d6:	73 07       	cpc	r23, r19
    49d8:	84 07       	cpc	r24, r20
    49da:	ba 07       	cpc	r27, r26
    49dc:	20 f0       	brcs	.+8      	; 0x49e6 <__divsf3_pse+0xaa>
    49de:	62 1b       	sub	r22, r18
    49e0:	73 0b       	sbc	r23, r19
    49e2:	84 0b       	sbc	r24, r20
    49e4:	ba 0b       	sbc	r27, r26
    49e6:	ee 1f       	adc	r30, r30
    49e8:	88 f7       	brcc	.-30     	; 0x49cc <__divsf3_pse+0x90>
    49ea:	e0 95       	com	r30
    49ec:	08 95       	ret

000049ee <__fixunssfsi>:
    49ee:	98 d0       	rcall	.+304    	; 0x4b20 <__fp_splitA>
    49f0:	88 f0       	brcs	.+34     	; 0x4a14 <__fixunssfsi+0x26>
    49f2:	9f 57       	subi	r25, 0x7F	; 127
    49f4:	90 f0       	brcs	.+36     	; 0x4a1a <__fixunssfsi+0x2c>
    49f6:	b9 2f       	mov	r27, r25
    49f8:	99 27       	eor	r25, r25
    49fa:	b7 51       	subi	r27, 0x17	; 23
    49fc:	a0 f0       	brcs	.+40     	; 0x4a26 <__fixunssfsi+0x38>
    49fe:	d1 f0       	breq	.+52     	; 0x4a34 <__fixunssfsi+0x46>
    4a00:	66 0f       	add	r22, r22
    4a02:	77 1f       	adc	r23, r23
    4a04:	88 1f       	adc	r24, r24
    4a06:	99 1f       	adc	r25, r25
    4a08:	1a f0       	brmi	.+6      	; 0x4a10 <__fixunssfsi+0x22>
    4a0a:	ba 95       	dec	r27
    4a0c:	c9 f7       	brne	.-14     	; 0x4a00 <__fixunssfsi+0x12>
    4a0e:	12 c0       	rjmp	.+36     	; 0x4a34 <__fixunssfsi+0x46>
    4a10:	b1 30       	cpi	r27, 0x01	; 1
    4a12:	81 f0       	breq	.+32     	; 0x4a34 <__fixunssfsi+0x46>
    4a14:	9f d0       	rcall	.+318    	; 0x4b54 <__fp_zero>
    4a16:	b1 e0       	ldi	r27, 0x01	; 1
    4a18:	08 95       	ret
    4a1a:	9c c0       	rjmp	.+312    	; 0x4b54 <__fp_zero>
    4a1c:	67 2f       	mov	r22, r23
    4a1e:	78 2f       	mov	r23, r24
    4a20:	88 27       	eor	r24, r24
    4a22:	b8 5f       	subi	r27, 0xF8	; 248
    4a24:	39 f0       	breq	.+14     	; 0x4a34 <__fixunssfsi+0x46>
    4a26:	b9 3f       	cpi	r27, 0xF9	; 249
    4a28:	cc f3       	brlt	.-14     	; 0x4a1c <__fixunssfsi+0x2e>
    4a2a:	86 95       	lsr	r24
    4a2c:	77 95       	ror	r23
    4a2e:	67 95       	ror	r22
    4a30:	b3 95       	inc	r27
    4a32:	d9 f7       	brne	.-10     	; 0x4a2a <__fixunssfsi+0x3c>
    4a34:	3e f4       	brtc	.+14     	; 0x4a44 <__fixunssfsi+0x56>
    4a36:	90 95       	com	r25
    4a38:	80 95       	com	r24
    4a3a:	70 95       	com	r23
    4a3c:	61 95       	neg	r22
    4a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    4a40:	8f 4f       	sbci	r24, 0xFF	; 255
    4a42:	9f 4f       	sbci	r25, 0xFF	; 255
    4a44:	08 95       	ret

00004a46 <__floatunsisf>:
    4a46:	e8 94       	clt
    4a48:	09 c0       	rjmp	.+18     	; 0x4a5c <__floatsisf+0x12>

00004a4a <__floatsisf>:
    4a4a:	97 fb       	bst	r25, 7
    4a4c:	3e f4       	brtc	.+14     	; 0x4a5c <__floatsisf+0x12>
    4a4e:	90 95       	com	r25
    4a50:	80 95       	com	r24
    4a52:	70 95       	com	r23
    4a54:	61 95       	neg	r22
    4a56:	7f 4f       	sbci	r23, 0xFF	; 255
    4a58:	8f 4f       	sbci	r24, 0xFF	; 255
    4a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a5c:	99 23       	and	r25, r25
    4a5e:	a9 f0       	breq	.+42     	; 0x4a8a <__floatsisf+0x40>
    4a60:	f9 2f       	mov	r31, r25
    4a62:	96 e9       	ldi	r25, 0x96	; 150
    4a64:	bb 27       	eor	r27, r27
    4a66:	93 95       	inc	r25
    4a68:	f6 95       	lsr	r31
    4a6a:	87 95       	ror	r24
    4a6c:	77 95       	ror	r23
    4a6e:	67 95       	ror	r22
    4a70:	b7 95       	ror	r27
    4a72:	f1 11       	cpse	r31, r1
    4a74:	f8 cf       	rjmp	.-16     	; 0x4a66 <__floatsisf+0x1c>
    4a76:	fa f4       	brpl	.+62     	; 0x4ab6 <__floatsisf+0x6c>
    4a78:	bb 0f       	add	r27, r27
    4a7a:	11 f4       	brne	.+4      	; 0x4a80 <__floatsisf+0x36>
    4a7c:	60 ff       	sbrs	r22, 0
    4a7e:	1b c0       	rjmp	.+54     	; 0x4ab6 <__floatsisf+0x6c>
    4a80:	6f 5f       	subi	r22, 0xFF	; 255
    4a82:	7f 4f       	sbci	r23, 0xFF	; 255
    4a84:	8f 4f       	sbci	r24, 0xFF	; 255
    4a86:	9f 4f       	sbci	r25, 0xFF	; 255
    4a88:	16 c0       	rjmp	.+44     	; 0x4ab6 <__floatsisf+0x6c>
    4a8a:	88 23       	and	r24, r24
    4a8c:	11 f0       	breq	.+4      	; 0x4a92 <__floatsisf+0x48>
    4a8e:	96 e9       	ldi	r25, 0x96	; 150
    4a90:	11 c0       	rjmp	.+34     	; 0x4ab4 <__floatsisf+0x6a>
    4a92:	77 23       	and	r23, r23
    4a94:	21 f0       	breq	.+8      	; 0x4a9e <__floatsisf+0x54>
    4a96:	9e e8       	ldi	r25, 0x8E	; 142
    4a98:	87 2f       	mov	r24, r23
    4a9a:	76 2f       	mov	r23, r22
    4a9c:	05 c0       	rjmp	.+10     	; 0x4aa8 <__floatsisf+0x5e>
    4a9e:	66 23       	and	r22, r22
    4aa0:	71 f0       	breq	.+28     	; 0x4abe <__floatsisf+0x74>
    4aa2:	96 e8       	ldi	r25, 0x86	; 134
    4aa4:	86 2f       	mov	r24, r22
    4aa6:	70 e0       	ldi	r23, 0x00	; 0
    4aa8:	60 e0       	ldi	r22, 0x00	; 0
    4aaa:	2a f0       	brmi	.+10     	; 0x4ab6 <__floatsisf+0x6c>
    4aac:	9a 95       	dec	r25
    4aae:	66 0f       	add	r22, r22
    4ab0:	77 1f       	adc	r23, r23
    4ab2:	88 1f       	adc	r24, r24
    4ab4:	da f7       	brpl	.-10     	; 0x4aac <__floatsisf+0x62>
    4ab6:	88 0f       	add	r24, r24
    4ab8:	96 95       	lsr	r25
    4aba:	87 95       	ror	r24
    4abc:	97 f9       	bld	r25, 7
    4abe:	08 95       	ret

00004ac0 <__fp_inf>:
    4ac0:	97 f9       	bld	r25, 7
    4ac2:	9f 67       	ori	r25, 0x7F	; 127
    4ac4:	80 e8       	ldi	r24, 0x80	; 128
    4ac6:	70 e0       	ldi	r23, 0x00	; 0
    4ac8:	60 e0       	ldi	r22, 0x00	; 0
    4aca:	08 95       	ret

00004acc <__fp_nan>:
    4acc:	9f ef       	ldi	r25, 0xFF	; 255
    4ace:	80 ec       	ldi	r24, 0xC0	; 192
    4ad0:	08 95       	ret

00004ad2 <__fp_pscA>:
    4ad2:	00 24       	eor	r0, r0
    4ad4:	0a 94       	dec	r0
    4ad6:	16 16       	cp	r1, r22
    4ad8:	17 06       	cpc	r1, r23
    4ada:	18 06       	cpc	r1, r24
    4adc:	09 06       	cpc	r0, r25
    4ade:	08 95       	ret

00004ae0 <__fp_pscB>:
    4ae0:	00 24       	eor	r0, r0
    4ae2:	0a 94       	dec	r0
    4ae4:	12 16       	cp	r1, r18
    4ae6:	13 06       	cpc	r1, r19
    4ae8:	14 06       	cpc	r1, r20
    4aea:	05 06       	cpc	r0, r21
    4aec:	08 95       	ret

00004aee <__fp_round>:
    4aee:	09 2e       	mov	r0, r25
    4af0:	03 94       	inc	r0
    4af2:	00 0c       	add	r0, r0
    4af4:	11 f4       	brne	.+4      	; 0x4afa <__fp_round+0xc>
    4af6:	88 23       	and	r24, r24
    4af8:	52 f0       	brmi	.+20     	; 0x4b0e <__fp_round+0x20>
    4afa:	bb 0f       	add	r27, r27
    4afc:	40 f4       	brcc	.+16     	; 0x4b0e <__fp_round+0x20>
    4afe:	bf 2b       	or	r27, r31
    4b00:	11 f4       	brne	.+4      	; 0x4b06 <__fp_round+0x18>
    4b02:	60 ff       	sbrs	r22, 0
    4b04:	04 c0       	rjmp	.+8      	; 0x4b0e <__fp_round+0x20>
    4b06:	6f 5f       	subi	r22, 0xFF	; 255
    4b08:	7f 4f       	sbci	r23, 0xFF	; 255
    4b0a:	8f 4f       	sbci	r24, 0xFF	; 255
    4b0c:	9f 4f       	sbci	r25, 0xFF	; 255
    4b0e:	08 95       	ret

00004b10 <__fp_split3>:
    4b10:	57 fd       	sbrc	r21, 7
    4b12:	90 58       	subi	r25, 0x80	; 128
    4b14:	44 0f       	add	r20, r20
    4b16:	55 1f       	adc	r21, r21
    4b18:	59 f0       	breq	.+22     	; 0x4b30 <__fp_splitA+0x10>
    4b1a:	5f 3f       	cpi	r21, 0xFF	; 255
    4b1c:	71 f0       	breq	.+28     	; 0x4b3a <__fp_splitA+0x1a>
    4b1e:	47 95       	ror	r20

00004b20 <__fp_splitA>:
    4b20:	88 0f       	add	r24, r24
    4b22:	97 fb       	bst	r25, 7
    4b24:	99 1f       	adc	r25, r25
    4b26:	61 f0       	breq	.+24     	; 0x4b40 <__fp_splitA+0x20>
    4b28:	9f 3f       	cpi	r25, 0xFF	; 255
    4b2a:	79 f0       	breq	.+30     	; 0x4b4a <__fp_splitA+0x2a>
    4b2c:	87 95       	ror	r24
    4b2e:	08 95       	ret
    4b30:	12 16       	cp	r1, r18
    4b32:	13 06       	cpc	r1, r19
    4b34:	14 06       	cpc	r1, r20
    4b36:	55 1f       	adc	r21, r21
    4b38:	f2 cf       	rjmp	.-28     	; 0x4b1e <__fp_split3+0xe>
    4b3a:	46 95       	lsr	r20
    4b3c:	f1 df       	rcall	.-30     	; 0x4b20 <__fp_splitA>
    4b3e:	08 c0       	rjmp	.+16     	; 0x4b50 <__fp_splitA+0x30>
    4b40:	16 16       	cp	r1, r22
    4b42:	17 06       	cpc	r1, r23
    4b44:	18 06       	cpc	r1, r24
    4b46:	99 1f       	adc	r25, r25
    4b48:	f1 cf       	rjmp	.-30     	; 0x4b2c <__fp_splitA+0xc>
    4b4a:	86 95       	lsr	r24
    4b4c:	71 05       	cpc	r23, r1
    4b4e:	61 05       	cpc	r22, r1
    4b50:	08 94       	sec
    4b52:	08 95       	ret

00004b54 <__fp_zero>:
    4b54:	e8 94       	clt

00004b56 <__fp_szero>:
    4b56:	bb 27       	eor	r27, r27
    4b58:	66 27       	eor	r22, r22
    4b5a:	77 27       	eor	r23, r23
    4b5c:	cb 01       	movw	r24, r22
    4b5e:	97 f9       	bld	r25, 7
    4b60:	08 95       	ret

00004b62 <__mulsf3>:
    4b62:	0b d0       	rcall	.+22     	; 0x4b7a <__mulsf3x>
    4b64:	c4 cf       	rjmp	.-120    	; 0x4aee <__fp_round>
    4b66:	b5 df       	rcall	.-150    	; 0x4ad2 <__fp_pscA>
    4b68:	28 f0       	brcs	.+10     	; 0x4b74 <__mulsf3+0x12>
    4b6a:	ba df       	rcall	.-140    	; 0x4ae0 <__fp_pscB>
    4b6c:	18 f0       	brcs	.+6      	; 0x4b74 <__mulsf3+0x12>
    4b6e:	95 23       	and	r25, r21
    4b70:	09 f0       	breq	.+2      	; 0x4b74 <__mulsf3+0x12>
    4b72:	a6 cf       	rjmp	.-180    	; 0x4ac0 <__fp_inf>
    4b74:	ab cf       	rjmp	.-170    	; 0x4acc <__fp_nan>
    4b76:	11 24       	eor	r1, r1
    4b78:	ee cf       	rjmp	.-36     	; 0x4b56 <__fp_szero>

00004b7a <__mulsf3x>:
    4b7a:	ca df       	rcall	.-108    	; 0x4b10 <__fp_split3>
    4b7c:	a0 f3       	brcs	.-24     	; 0x4b66 <__mulsf3+0x4>

00004b7e <__mulsf3_pse>:
    4b7e:	95 9f       	mul	r25, r21
    4b80:	d1 f3       	breq	.-12     	; 0x4b76 <__mulsf3+0x14>
    4b82:	95 0f       	add	r25, r21
    4b84:	50 e0       	ldi	r21, 0x00	; 0
    4b86:	55 1f       	adc	r21, r21
    4b88:	62 9f       	mul	r22, r18
    4b8a:	f0 01       	movw	r30, r0
    4b8c:	72 9f       	mul	r23, r18
    4b8e:	bb 27       	eor	r27, r27
    4b90:	f0 0d       	add	r31, r0
    4b92:	b1 1d       	adc	r27, r1
    4b94:	63 9f       	mul	r22, r19
    4b96:	aa 27       	eor	r26, r26
    4b98:	f0 0d       	add	r31, r0
    4b9a:	b1 1d       	adc	r27, r1
    4b9c:	aa 1f       	adc	r26, r26
    4b9e:	64 9f       	mul	r22, r20
    4ba0:	66 27       	eor	r22, r22
    4ba2:	b0 0d       	add	r27, r0
    4ba4:	a1 1d       	adc	r26, r1
    4ba6:	66 1f       	adc	r22, r22
    4ba8:	82 9f       	mul	r24, r18
    4baa:	22 27       	eor	r18, r18
    4bac:	b0 0d       	add	r27, r0
    4bae:	a1 1d       	adc	r26, r1
    4bb0:	62 1f       	adc	r22, r18
    4bb2:	73 9f       	mul	r23, r19
    4bb4:	b0 0d       	add	r27, r0
    4bb6:	a1 1d       	adc	r26, r1
    4bb8:	62 1f       	adc	r22, r18
    4bba:	83 9f       	mul	r24, r19
    4bbc:	a0 0d       	add	r26, r0
    4bbe:	61 1d       	adc	r22, r1
    4bc0:	22 1f       	adc	r18, r18
    4bc2:	74 9f       	mul	r23, r20
    4bc4:	33 27       	eor	r19, r19
    4bc6:	a0 0d       	add	r26, r0
    4bc8:	61 1d       	adc	r22, r1
    4bca:	23 1f       	adc	r18, r19
    4bcc:	84 9f       	mul	r24, r20
    4bce:	60 0d       	add	r22, r0
    4bd0:	21 1d       	adc	r18, r1
    4bd2:	82 2f       	mov	r24, r18
    4bd4:	76 2f       	mov	r23, r22
    4bd6:	6a 2f       	mov	r22, r26
    4bd8:	11 24       	eor	r1, r1
    4bda:	9f 57       	subi	r25, 0x7F	; 127
    4bdc:	50 40       	sbci	r21, 0x00	; 0
    4bde:	8a f0       	brmi	.+34     	; 0x4c02 <__mulsf3_pse+0x84>
    4be0:	e1 f0       	breq	.+56     	; 0x4c1a <__mulsf3_pse+0x9c>
    4be2:	88 23       	and	r24, r24
    4be4:	4a f0       	brmi	.+18     	; 0x4bf8 <__mulsf3_pse+0x7a>
    4be6:	ee 0f       	add	r30, r30
    4be8:	ff 1f       	adc	r31, r31
    4bea:	bb 1f       	adc	r27, r27
    4bec:	66 1f       	adc	r22, r22
    4bee:	77 1f       	adc	r23, r23
    4bf0:	88 1f       	adc	r24, r24
    4bf2:	91 50       	subi	r25, 0x01	; 1
    4bf4:	50 40       	sbci	r21, 0x00	; 0
    4bf6:	a9 f7       	brne	.-22     	; 0x4be2 <__mulsf3_pse+0x64>
    4bf8:	9e 3f       	cpi	r25, 0xFE	; 254
    4bfa:	51 05       	cpc	r21, r1
    4bfc:	70 f0       	brcs	.+28     	; 0x4c1a <__mulsf3_pse+0x9c>
    4bfe:	60 cf       	rjmp	.-320    	; 0x4ac0 <__fp_inf>
    4c00:	aa cf       	rjmp	.-172    	; 0x4b56 <__fp_szero>
    4c02:	5f 3f       	cpi	r21, 0xFF	; 255
    4c04:	ec f3       	brlt	.-6      	; 0x4c00 <__mulsf3_pse+0x82>
    4c06:	98 3e       	cpi	r25, 0xE8	; 232
    4c08:	dc f3       	brlt	.-10     	; 0x4c00 <__mulsf3_pse+0x82>
    4c0a:	86 95       	lsr	r24
    4c0c:	77 95       	ror	r23
    4c0e:	67 95       	ror	r22
    4c10:	b7 95       	ror	r27
    4c12:	f7 95       	ror	r31
    4c14:	e7 95       	ror	r30
    4c16:	9f 5f       	subi	r25, 0xFF	; 255
    4c18:	c1 f7       	brne	.-16     	; 0x4c0a <__mulsf3_pse+0x8c>
    4c1a:	fe 2b       	or	r31, r30
    4c1c:	88 0f       	add	r24, r24
    4c1e:	91 1d       	adc	r25, r1
    4c20:	96 95       	lsr	r25
    4c22:	87 95       	ror	r24
    4c24:	97 f9       	bld	r25, 7
    4c26:	08 95       	ret

00004c28 <__udivmodsi4>:
    4c28:	a1 e2       	ldi	r26, 0x21	; 33
    4c2a:	1a 2e       	mov	r1, r26
    4c2c:	aa 1b       	sub	r26, r26
    4c2e:	bb 1b       	sub	r27, r27
    4c30:	fd 01       	movw	r30, r26
    4c32:	0d c0       	rjmp	.+26     	; 0x4c4e <__udivmodsi4_ep>

00004c34 <__udivmodsi4_loop>:
    4c34:	aa 1f       	adc	r26, r26
    4c36:	bb 1f       	adc	r27, r27
    4c38:	ee 1f       	adc	r30, r30
    4c3a:	ff 1f       	adc	r31, r31
    4c3c:	a2 17       	cp	r26, r18
    4c3e:	b3 07       	cpc	r27, r19
    4c40:	e4 07       	cpc	r30, r20
    4c42:	f5 07       	cpc	r31, r21
    4c44:	20 f0       	brcs	.+8      	; 0x4c4e <__udivmodsi4_ep>
    4c46:	a2 1b       	sub	r26, r18
    4c48:	b3 0b       	sbc	r27, r19
    4c4a:	e4 0b       	sbc	r30, r20
    4c4c:	f5 0b       	sbc	r31, r21

00004c4e <__udivmodsi4_ep>:
    4c4e:	66 1f       	adc	r22, r22
    4c50:	77 1f       	adc	r23, r23
    4c52:	88 1f       	adc	r24, r24
    4c54:	99 1f       	adc	r25, r25
    4c56:	1a 94       	dec	r1
    4c58:	69 f7       	brne	.-38     	; 0x4c34 <__udivmodsi4_loop>
    4c5a:	60 95       	com	r22
    4c5c:	70 95       	com	r23
    4c5e:	80 95       	com	r24
    4c60:	90 95       	com	r25
    4c62:	9b 01       	movw	r18, r22
    4c64:	ac 01       	movw	r20, r24
    4c66:	bd 01       	movw	r22, r26
    4c68:	cf 01       	movw	r24, r30
    4c6a:	08 95       	ret

00004c6c <__tablejump2__>:
    4c6c:	ee 0f       	add	r30, r30
    4c6e:	ff 1f       	adc	r31, r31
    4c70:	88 1f       	adc	r24, r24
    4c72:	8b bf       	out	0x3b, r24	; 59
    4c74:	07 90       	elpm	r0, Z+
    4c76:	f6 91       	elpm	r31, Z
    4c78:	e0 2d       	mov	r30, r0
    4c7a:	19 94       	eijmp

00004c7c <malloc>:
    4c7c:	0f 93       	push	r16
    4c7e:	1f 93       	push	r17
    4c80:	cf 93       	push	r28
    4c82:	df 93       	push	r29
    4c84:	82 30       	cpi	r24, 0x02	; 2
    4c86:	91 05       	cpc	r25, r1
    4c88:	10 f4       	brcc	.+4      	; 0x4c8e <malloc+0x12>
    4c8a:	82 e0       	ldi	r24, 0x02	; 2
    4c8c:	90 e0       	ldi	r25, 0x00	; 0
    4c8e:	e0 91 cc 16 	lds	r30, 0x16CC	; 0x8016cc <__flp>
    4c92:	f0 91 cd 16 	lds	r31, 0x16CD	; 0x8016cd <__flp+0x1>
    4c96:	20 e0       	ldi	r18, 0x00	; 0
    4c98:	30 e0       	ldi	r19, 0x00	; 0
    4c9a:	a0 e0       	ldi	r26, 0x00	; 0
    4c9c:	b0 e0       	ldi	r27, 0x00	; 0
    4c9e:	30 97       	sbiw	r30, 0x00	; 0
    4ca0:	19 f1       	breq	.+70     	; 0x4ce8 <malloc+0x6c>
    4ca2:	40 81       	ld	r20, Z
    4ca4:	51 81       	ldd	r21, Z+1	; 0x01
    4ca6:	02 81       	ldd	r16, Z+2	; 0x02
    4ca8:	13 81       	ldd	r17, Z+3	; 0x03
    4caa:	48 17       	cp	r20, r24
    4cac:	59 07       	cpc	r21, r25
    4cae:	c8 f0       	brcs	.+50     	; 0x4ce2 <malloc+0x66>
    4cb0:	84 17       	cp	r24, r20
    4cb2:	95 07       	cpc	r25, r21
    4cb4:	69 f4       	brne	.+26     	; 0x4cd0 <malloc+0x54>
    4cb6:	10 97       	sbiw	r26, 0x00	; 0
    4cb8:	31 f0       	breq	.+12     	; 0x4cc6 <malloc+0x4a>
    4cba:	12 96       	adiw	r26, 0x02	; 2
    4cbc:	0c 93       	st	X, r16
    4cbe:	12 97       	sbiw	r26, 0x02	; 2
    4cc0:	13 96       	adiw	r26, 0x03	; 3
    4cc2:	1c 93       	st	X, r17
    4cc4:	27 c0       	rjmp	.+78     	; 0x4d14 <malloc+0x98>
    4cc6:	00 93 cc 16 	sts	0x16CC, r16	; 0x8016cc <__flp>
    4cca:	10 93 cd 16 	sts	0x16CD, r17	; 0x8016cd <__flp+0x1>
    4cce:	22 c0       	rjmp	.+68     	; 0x4d14 <malloc+0x98>
    4cd0:	21 15       	cp	r18, r1
    4cd2:	31 05       	cpc	r19, r1
    4cd4:	19 f0       	breq	.+6      	; 0x4cdc <malloc+0x60>
    4cd6:	42 17       	cp	r20, r18
    4cd8:	53 07       	cpc	r21, r19
    4cda:	18 f4       	brcc	.+6      	; 0x4ce2 <malloc+0x66>
    4cdc:	9a 01       	movw	r18, r20
    4cde:	bd 01       	movw	r22, r26
    4ce0:	ef 01       	movw	r28, r30
    4ce2:	df 01       	movw	r26, r30
    4ce4:	f8 01       	movw	r30, r16
    4ce6:	db cf       	rjmp	.-74     	; 0x4c9e <malloc+0x22>
    4ce8:	21 15       	cp	r18, r1
    4cea:	31 05       	cpc	r19, r1
    4cec:	f9 f0       	breq	.+62     	; 0x4d2c <malloc+0xb0>
    4cee:	28 1b       	sub	r18, r24
    4cf0:	39 0b       	sbc	r19, r25
    4cf2:	24 30       	cpi	r18, 0x04	; 4
    4cf4:	31 05       	cpc	r19, r1
    4cf6:	80 f4       	brcc	.+32     	; 0x4d18 <malloc+0x9c>
    4cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    4cfa:	9b 81       	ldd	r25, Y+3	; 0x03
    4cfc:	61 15       	cp	r22, r1
    4cfe:	71 05       	cpc	r23, r1
    4d00:	21 f0       	breq	.+8      	; 0x4d0a <malloc+0x8e>
    4d02:	fb 01       	movw	r30, r22
    4d04:	93 83       	std	Z+3, r25	; 0x03
    4d06:	82 83       	std	Z+2, r24	; 0x02
    4d08:	04 c0       	rjmp	.+8      	; 0x4d12 <malloc+0x96>
    4d0a:	90 93 cd 16 	sts	0x16CD, r25	; 0x8016cd <__flp+0x1>
    4d0e:	80 93 cc 16 	sts	0x16CC, r24	; 0x8016cc <__flp>
    4d12:	fe 01       	movw	r30, r28
    4d14:	32 96       	adiw	r30, 0x02	; 2
    4d16:	44 c0       	rjmp	.+136    	; 0x4da0 <malloc+0x124>
    4d18:	fe 01       	movw	r30, r28
    4d1a:	e2 0f       	add	r30, r18
    4d1c:	f3 1f       	adc	r31, r19
    4d1e:	81 93       	st	Z+, r24
    4d20:	91 93       	st	Z+, r25
    4d22:	22 50       	subi	r18, 0x02	; 2
    4d24:	31 09       	sbc	r19, r1
    4d26:	39 83       	std	Y+1, r19	; 0x01
    4d28:	28 83       	st	Y, r18
    4d2a:	3a c0       	rjmp	.+116    	; 0x4da0 <malloc+0x124>
    4d2c:	20 91 ca 16 	lds	r18, 0x16CA	; 0x8016ca <__brkval>
    4d30:	30 91 cb 16 	lds	r19, 0x16CB	; 0x8016cb <__brkval+0x1>
    4d34:	23 2b       	or	r18, r19
    4d36:	41 f4       	brne	.+16     	; 0x4d48 <malloc+0xcc>
    4d38:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4d3c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4d40:	30 93 cb 16 	sts	0x16CB, r19	; 0x8016cb <__brkval+0x1>
    4d44:	20 93 ca 16 	sts	0x16CA, r18	; 0x8016ca <__brkval>
    4d48:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    4d4c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    4d50:	21 15       	cp	r18, r1
    4d52:	31 05       	cpc	r19, r1
    4d54:	41 f4       	brne	.+16     	; 0x4d66 <malloc+0xea>
    4d56:	2d b7       	in	r18, 0x3d	; 61
    4d58:	3e b7       	in	r19, 0x3e	; 62
    4d5a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4d5e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4d62:	24 1b       	sub	r18, r20
    4d64:	35 0b       	sbc	r19, r21
    4d66:	e0 91 ca 16 	lds	r30, 0x16CA	; 0x8016ca <__brkval>
    4d6a:	f0 91 cb 16 	lds	r31, 0x16CB	; 0x8016cb <__brkval+0x1>
    4d6e:	e2 17       	cp	r30, r18
    4d70:	f3 07       	cpc	r31, r19
    4d72:	a0 f4       	brcc	.+40     	; 0x4d9c <malloc+0x120>
    4d74:	2e 1b       	sub	r18, r30
    4d76:	3f 0b       	sbc	r19, r31
    4d78:	28 17       	cp	r18, r24
    4d7a:	39 07       	cpc	r19, r25
    4d7c:	78 f0       	brcs	.+30     	; 0x4d9c <malloc+0x120>
    4d7e:	ac 01       	movw	r20, r24
    4d80:	4e 5f       	subi	r20, 0xFE	; 254
    4d82:	5f 4f       	sbci	r21, 0xFF	; 255
    4d84:	24 17       	cp	r18, r20
    4d86:	35 07       	cpc	r19, r21
    4d88:	48 f0       	brcs	.+18     	; 0x4d9c <malloc+0x120>
    4d8a:	4e 0f       	add	r20, r30
    4d8c:	5f 1f       	adc	r21, r31
    4d8e:	50 93 cb 16 	sts	0x16CB, r21	; 0x8016cb <__brkval+0x1>
    4d92:	40 93 ca 16 	sts	0x16CA, r20	; 0x8016ca <__brkval>
    4d96:	81 93       	st	Z+, r24
    4d98:	91 93       	st	Z+, r25
    4d9a:	02 c0       	rjmp	.+4      	; 0x4da0 <malloc+0x124>
    4d9c:	e0 e0       	ldi	r30, 0x00	; 0
    4d9e:	f0 e0       	ldi	r31, 0x00	; 0
    4da0:	cf 01       	movw	r24, r30
    4da2:	df 91       	pop	r29
    4da4:	cf 91       	pop	r28
    4da6:	1f 91       	pop	r17
    4da8:	0f 91       	pop	r16
    4daa:	08 95       	ret

00004dac <free>:
    4dac:	cf 93       	push	r28
    4dae:	df 93       	push	r29
    4db0:	00 97       	sbiw	r24, 0x00	; 0
    4db2:	09 f4       	brne	.+2      	; 0x4db6 <free+0xa>
    4db4:	81 c0       	rjmp	.+258    	; 0x4eb8 <free+0x10c>
    4db6:	fc 01       	movw	r30, r24
    4db8:	32 97       	sbiw	r30, 0x02	; 2
    4dba:	13 82       	std	Z+3, r1	; 0x03
    4dbc:	12 82       	std	Z+2, r1	; 0x02
    4dbe:	a0 91 cc 16 	lds	r26, 0x16CC	; 0x8016cc <__flp>
    4dc2:	b0 91 cd 16 	lds	r27, 0x16CD	; 0x8016cd <__flp+0x1>
    4dc6:	10 97       	sbiw	r26, 0x00	; 0
    4dc8:	81 f4       	brne	.+32     	; 0x4dea <free+0x3e>
    4dca:	20 81       	ld	r18, Z
    4dcc:	31 81       	ldd	r19, Z+1	; 0x01
    4dce:	82 0f       	add	r24, r18
    4dd0:	93 1f       	adc	r25, r19
    4dd2:	20 91 ca 16 	lds	r18, 0x16CA	; 0x8016ca <__brkval>
    4dd6:	30 91 cb 16 	lds	r19, 0x16CB	; 0x8016cb <__brkval+0x1>
    4dda:	28 17       	cp	r18, r24
    4ddc:	39 07       	cpc	r19, r25
    4dde:	51 f5       	brne	.+84     	; 0x4e34 <free+0x88>
    4de0:	f0 93 cb 16 	sts	0x16CB, r31	; 0x8016cb <__brkval+0x1>
    4de4:	e0 93 ca 16 	sts	0x16CA, r30	; 0x8016ca <__brkval>
    4de8:	67 c0       	rjmp	.+206    	; 0x4eb8 <free+0x10c>
    4dea:	ed 01       	movw	r28, r26
    4dec:	20 e0       	ldi	r18, 0x00	; 0
    4dee:	30 e0       	ldi	r19, 0x00	; 0
    4df0:	ce 17       	cp	r28, r30
    4df2:	df 07       	cpc	r29, r31
    4df4:	40 f4       	brcc	.+16     	; 0x4e06 <free+0x5a>
    4df6:	4a 81       	ldd	r20, Y+2	; 0x02
    4df8:	5b 81       	ldd	r21, Y+3	; 0x03
    4dfa:	9e 01       	movw	r18, r28
    4dfc:	41 15       	cp	r20, r1
    4dfe:	51 05       	cpc	r21, r1
    4e00:	f1 f0       	breq	.+60     	; 0x4e3e <free+0x92>
    4e02:	ea 01       	movw	r28, r20
    4e04:	f5 cf       	rjmp	.-22     	; 0x4df0 <free+0x44>
    4e06:	d3 83       	std	Z+3, r29	; 0x03
    4e08:	c2 83       	std	Z+2, r28	; 0x02
    4e0a:	40 81       	ld	r20, Z
    4e0c:	51 81       	ldd	r21, Z+1	; 0x01
    4e0e:	84 0f       	add	r24, r20
    4e10:	95 1f       	adc	r25, r21
    4e12:	c8 17       	cp	r28, r24
    4e14:	d9 07       	cpc	r29, r25
    4e16:	59 f4       	brne	.+22     	; 0x4e2e <free+0x82>
    4e18:	88 81       	ld	r24, Y
    4e1a:	99 81       	ldd	r25, Y+1	; 0x01
    4e1c:	84 0f       	add	r24, r20
    4e1e:	95 1f       	adc	r25, r21
    4e20:	02 96       	adiw	r24, 0x02	; 2
    4e22:	91 83       	std	Z+1, r25	; 0x01
    4e24:	80 83       	st	Z, r24
    4e26:	8a 81       	ldd	r24, Y+2	; 0x02
    4e28:	9b 81       	ldd	r25, Y+3	; 0x03
    4e2a:	93 83       	std	Z+3, r25	; 0x03
    4e2c:	82 83       	std	Z+2, r24	; 0x02
    4e2e:	21 15       	cp	r18, r1
    4e30:	31 05       	cpc	r19, r1
    4e32:	29 f4       	brne	.+10     	; 0x4e3e <free+0x92>
    4e34:	f0 93 cd 16 	sts	0x16CD, r31	; 0x8016cd <__flp+0x1>
    4e38:	e0 93 cc 16 	sts	0x16CC, r30	; 0x8016cc <__flp>
    4e3c:	3d c0       	rjmp	.+122    	; 0x4eb8 <free+0x10c>
    4e3e:	e9 01       	movw	r28, r18
    4e40:	fb 83       	std	Y+3, r31	; 0x03
    4e42:	ea 83       	std	Y+2, r30	; 0x02
    4e44:	49 91       	ld	r20, Y+
    4e46:	59 91       	ld	r21, Y+
    4e48:	c4 0f       	add	r28, r20
    4e4a:	d5 1f       	adc	r29, r21
    4e4c:	ec 17       	cp	r30, r28
    4e4e:	fd 07       	cpc	r31, r29
    4e50:	61 f4       	brne	.+24     	; 0x4e6a <free+0xbe>
    4e52:	80 81       	ld	r24, Z
    4e54:	91 81       	ldd	r25, Z+1	; 0x01
    4e56:	84 0f       	add	r24, r20
    4e58:	95 1f       	adc	r25, r21
    4e5a:	02 96       	adiw	r24, 0x02	; 2
    4e5c:	e9 01       	movw	r28, r18
    4e5e:	99 83       	std	Y+1, r25	; 0x01
    4e60:	88 83       	st	Y, r24
    4e62:	82 81       	ldd	r24, Z+2	; 0x02
    4e64:	93 81       	ldd	r25, Z+3	; 0x03
    4e66:	9b 83       	std	Y+3, r25	; 0x03
    4e68:	8a 83       	std	Y+2, r24	; 0x02
    4e6a:	e0 e0       	ldi	r30, 0x00	; 0
    4e6c:	f0 e0       	ldi	r31, 0x00	; 0
    4e6e:	12 96       	adiw	r26, 0x02	; 2
    4e70:	8d 91       	ld	r24, X+
    4e72:	9c 91       	ld	r25, X
    4e74:	13 97       	sbiw	r26, 0x03	; 3
    4e76:	00 97       	sbiw	r24, 0x00	; 0
    4e78:	19 f0       	breq	.+6      	; 0x4e80 <free+0xd4>
    4e7a:	fd 01       	movw	r30, r26
    4e7c:	dc 01       	movw	r26, r24
    4e7e:	f7 cf       	rjmp	.-18     	; 0x4e6e <free+0xc2>
    4e80:	8d 91       	ld	r24, X+
    4e82:	9c 91       	ld	r25, X
    4e84:	11 97       	sbiw	r26, 0x01	; 1
    4e86:	9d 01       	movw	r18, r26
    4e88:	2e 5f       	subi	r18, 0xFE	; 254
    4e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    4e8c:	82 0f       	add	r24, r18
    4e8e:	93 1f       	adc	r25, r19
    4e90:	20 91 ca 16 	lds	r18, 0x16CA	; 0x8016ca <__brkval>
    4e94:	30 91 cb 16 	lds	r19, 0x16CB	; 0x8016cb <__brkval+0x1>
    4e98:	28 17       	cp	r18, r24
    4e9a:	39 07       	cpc	r19, r25
    4e9c:	69 f4       	brne	.+26     	; 0x4eb8 <free+0x10c>
    4e9e:	30 97       	sbiw	r30, 0x00	; 0
    4ea0:	29 f4       	brne	.+10     	; 0x4eac <free+0x100>
    4ea2:	10 92 cd 16 	sts	0x16CD, r1	; 0x8016cd <__flp+0x1>
    4ea6:	10 92 cc 16 	sts	0x16CC, r1	; 0x8016cc <__flp>
    4eaa:	02 c0       	rjmp	.+4      	; 0x4eb0 <free+0x104>
    4eac:	13 82       	std	Z+3, r1	; 0x03
    4eae:	12 82       	std	Z+2, r1	; 0x02
    4eb0:	b0 93 cb 16 	sts	0x16CB, r27	; 0x8016cb <__brkval+0x1>
    4eb4:	a0 93 ca 16 	sts	0x16CA, r26	; 0x8016ca <__brkval>
    4eb8:	df 91       	pop	r29
    4eba:	cf 91       	pop	r28
    4ebc:	08 95       	ret

00004ebe <abort>:
    4ebe:	81 e0       	ldi	r24, 0x01	; 1
    4ec0:	90 e0       	ldi	r25, 0x00	; 0
    4ec2:	f8 94       	cli
    4ec4:	7d c3       	rjmp	.+1786   	; 0x55c0 <_exit>

00004ec6 <memcpy>:
    4ec6:	fb 01       	movw	r30, r22
    4ec8:	dc 01       	movw	r26, r24
    4eca:	02 c0       	rjmp	.+4      	; 0x4ed0 <memcpy+0xa>
    4ecc:	01 90       	ld	r0, Z+
    4ece:	0d 92       	st	X+, r0
    4ed0:	41 50       	subi	r20, 0x01	; 1
    4ed2:	50 40       	sbci	r21, 0x00	; 0
    4ed4:	d8 f7       	brcc	.-10     	; 0x4ecc <memcpy+0x6>
    4ed6:	08 95       	ret

00004ed8 <memset>:
    4ed8:	dc 01       	movw	r26, r24
    4eda:	01 c0       	rjmp	.+2      	; 0x4ede <memset+0x6>
    4edc:	6d 93       	st	X+, r22
    4ede:	41 50       	subi	r20, 0x01	; 1
    4ee0:	50 40       	sbci	r21, 0x00	; 0
    4ee2:	e0 f7       	brcc	.-8      	; 0x4edc <memset+0x4>
    4ee4:	08 95       	ret

00004ee6 <strcasestr>:
    4ee6:	fb 01       	movw	r30, r22
    4ee8:	51 91       	ld	r21, Z+
    4eea:	55 23       	and	r21, r21
    4eec:	b1 f0       	breq	.+44     	; 0x4f1a <strcasestr+0x34>
    4eee:	bf 01       	movw	r22, r30
    4ef0:	dc 01       	movw	r26, r24
    4ef2:	05 2e       	mov	r0, r21
    4ef4:	4d 91       	ld	r20, X+
    4ef6:	44 23       	and	r20, r20
    4ef8:	69 f0       	breq	.+26     	; 0x4f14 <strcasestr+0x2e>
    4efa:	10 d0       	rcall	.+32     	; 0x4f1c <strcasestr+0x36>
    4efc:	d9 f7       	brne	.-10     	; 0x4ef4 <strcasestr+0xe>
    4efe:	cd 01       	movw	r24, r26
    4f00:	01 90       	ld	r0, Z+
    4f02:	00 20       	and	r0, r0
    4f04:	49 f0       	breq	.+18     	; 0x4f18 <strcasestr+0x32>
    4f06:	4d 91       	ld	r20, X+
    4f08:	41 11       	cpse	r20, r1
    4f0a:	08 d0       	rcall	.+16     	; 0x4f1c <strcasestr+0x36>
    4f0c:	c9 f3       	breq	.-14     	; 0x4f00 <strcasestr+0x1a>
    4f0e:	fb 01       	movw	r30, r22
    4f10:	41 11       	cpse	r20, r1
    4f12:	ee cf       	rjmp	.-36     	; 0x4ef0 <strcasestr+0xa>
    4f14:	81 e0       	ldi	r24, 0x01	; 1
    4f16:	90 e0       	ldi	r25, 0x00	; 0
    4f18:	01 97       	sbiw	r24, 0x01	; 1
    4f1a:	08 95       	ret
    4f1c:	40 25       	eor	r20, r0
    4f1e:	39 f0       	breq	.+14     	; 0x4f2e <strcasestr+0x48>
    4f20:	40 32       	cpi	r20, 0x20	; 32
    4f22:	29 f4       	brne	.+10     	; 0x4f2e <strcasestr+0x48>
    4f24:	40 29       	or	r20, r0
    4f26:	4b 57       	subi	r20, 0x7B	; 123
    4f28:	46 5e       	subi	r20, 0xE6	; 230
    4f2a:	08 f0       	brcs	.+2      	; 0x4f2e <strcasestr+0x48>
    4f2c:	18 94       	sez
    4f2e:	08 95       	ret

00004f30 <strcat>:
    4f30:	fb 01       	movw	r30, r22
    4f32:	dc 01       	movw	r26, r24
    4f34:	0d 90       	ld	r0, X+
    4f36:	00 20       	and	r0, r0
    4f38:	e9 f7       	brne	.-6      	; 0x4f34 <strcat+0x4>
    4f3a:	11 97       	sbiw	r26, 0x01	; 1
    4f3c:	01 90       	ld	r0, Z+
    4f3e:	0d 92       	st	X+, r0
    4f40:	00 20       	and	r0, r0
    4f42:	e1 f7       	brne	.-8      	; 0x4f3c <strcat+0xc>
    4f44:	08 95       	ret

00004f46 <strcpy>:
    4f46:	fb 01       	movw	r30, r22
    4f48:	dc 01       	movw	r26, r24
    4f4a:	01 90       	ld	r0, Z+
    4f4c:	0d 92       	st	X+, r0
    4f4e:	00 20       	and	r0, r0
    4f50:	e1 f7       	brne	.-8      	; 0x4f4a <strcpy+0x4>
    4f52:	08 95       	ret

00004f54 <strncasecmp>:
    4f54:	fb 01       	movw	r30, r22
    4f56:	dc 01       	movw	r26, r24
    4f58:	41 50       	subi	r20, 0x01	; 1
    4f5a:	50 40       	sbci	r21, 0x00	; 0
    4f5c:	88 f0       	brcs	.+34     	; 0x4f80 <strncasecmp+0x2c>
    4f5e:	8d 91       	ld	r24, X+
    4f60:	81 34       	cpi	r24, 0x41	; 65
    4f62:	1c f0       	brlt	.+6      	; 0x4f6a <strncasecmp+0x16>
    4f64:	8b 35       	cpi	r24, 0x5B	; 91
    4f66:	0c f4       	brge	.+2      	; 0x4f6a <strncasecmp+0x16>
    4f68:	80 5e       	subi	r24, 0xE0	; 224
    4f6a:	61 91       	ld	r22, Z+
    4f6c:	61 34       	cpi	r22, 0x41	; 65
    4f6e:	1c f0       	brlt	.+6      	; 0x4f76 <strncasecmp+0x22>
    4f70:	6b 35       	cpi	r22, 0x5B	; 91
    4f72:	0c f4       	brge	.+2      	; 0x4f76 <strncasecmp+0x22>
    4f74:	60 5e       	subi	r22, 0xE0	; 224
    4f76:	86 1b       	sub	r24, r22
    4f78:	61 11       	cpse	r22, r1
    4f7a:	71 f3       	breq	.-36     	; 0x4f58 <strncasecmp+0x4>
    4f7c:	99 0b       	sbc	r25, r25
    4f7e:	08 95       	ret
    4f80:	88 1b       	sub	r24, r24
    4f82:	fc cf       	rjmp	.-8      	; 0x4f7c <strncasecmp+0x28>

00004f84 <printf>:
    4f84:	cf 93       	push	r28
    4f86:	df 93       	push	r29
    4f88:	cd b7       	in	r28, 0x3d	; 61
    4f8a:	de b7       	in	r29, 0x3e	; 62
    4f8c:	ae 01       	movw	r20, r28
    4f8e:	4a 5f       	subi	r20, 0xFA	; 250
    4f90:	5f 4f       	sbci	r21, 0xFF	; 255
    4f92:	fa 01       	movw	r30, r20
    4f94:	61 91       	ld	r22, Z+
    4f96:	71 91       	ld	r23, Z+
    4f98:	af 01       	movw	r20, r30
    4f9a:	80 91 d0 16 	lds	r24, 0x16D0	; 0x8016d0 <__iob+0x2>
    4f9e:	90 91 d1 16 	lds	r25, 0x16D1	; 0x8016d1 <__iob+0x3>
    4fa2:	61 d0       	rcall	.+194    	; 0x5066 <vfprintf>
    4fa4:	df 91       	pop	r29
    4fa6:	cf 91       	pop	r28
    4fa8:	08 95       	ret

00004faa <puts>:
    4faa:	0f 93       	push	r16
    4fac:	1f 93       	push	r17
    4fae:	cf 93       	push	r28
    4fb0:	df 93       	push	r29
    4fb2:	e0 91 d0 16 	lds	r30, 0x16D0	; 0x8016d0 <__iob+0x2>
    4fb6:	f0 91 d1 16 	lds	r31, 0x16D1	; 0x8016d1 <__iob+0x3>
    4fba:	23 81       	ldd	r18, Z+3	; 0x03
    4fbc:	21 ff       	sbrs	r18, 1
    4fbe:	1b c0       	rjmp	.+54     	; 0x4ff6 <puts+0x4c>
    4fc0:	8c 01       	movw	r16, r24
    4fc2:	d0 e0       	ldi	r29, 0x00	; 0
    4fc4:	c0 e0       	ldi	r28, 0x00	; 0
    4fc6:	f8 01       	movw	r30, r16
    4fc8:	81 91       	ld	r24, Z+
    4fca:	8f 01       	movw	r16, r30
    4fcc:	60 91 d0 16 	lds	r22, 0x16D0	; 0x8016d0 <__iob+0x2>
    4fd0:	70 91 d1 16 	lds	r23, 0x16D1	; 0x8016d1 <__iob+0x3>
    4fd4:	db 01       	movw	r26, r22
    4fd6:	18 96       	adiw	r26, 0x08	; 8
    4fd8:	ed 91       	ld	r30, X+
    4fda:	fc 91       	ld	r31, X
    4fdc:	19 97       	sbiw	r26, 0x09	; 9
    4fde:	88 23       	and	r24, r24
    4fe0:	31 f0       	breq	.+12     	; 0x4fee <puts+0x44>
    4fe2:	19 95       	eicall
    4fe4:	89 2b       	or	r24, r25
    4fe6:	79 f3       	breq	.-34     	; 0x4fc6 <puts+0x1c>
    4fe8:	df ef       	ldi	r29, 0xFF	; 255
    4fea:	cf ef       	ldi	r28, 0xFF	; 255
    4fec:	ec cf       	rjmp	.-40     	; 0x4fc6 <puts+0x1c>
    4fee:	8a e0       	ldi	r24, 0x0A	; 10
    4ff0:	19 95       	eicall
    4ff2:	89 2b       	or	r24, r25
    4ff4:	19 f0       	breq	.+6      	; 0x4ffc <puts+0x52>
    4ff6:	8f ef       	ldi	r24, 0xFF	; 255
    4ff8:	9f ef       	ldi	r25, 0xFF	; 255
    4ffa:	02 c0       	rjmp	.+4      	; 0x5000 <puts+0x56>
    4ffc:	8d 2f       	mov	r24, r29
    4ffe:	9c 2f       	mov	r25, r28
    5000:	df 91       	pop	r29
    5002:	cf 91       	pop	r28
    5004:	1f 91       	pop	r17
    5006:	0f 91       	pop	r16
    5008:	08 95       	ret

0000500a <sprintf>:
    500a:	0f 93       	push	r16
    500c:	1f 93       	push	r17
    500e:	cf 93       	push	r28
    5010:	df 93       	push	r29
    5012:	cd b7       	in	r28, 0x3d	; 61
    5014:	de b7       	in	r29, 0x3e	; 62
    5016:	2e 97       	sbiw	r28, 0x0e	; 14
    5018:	0f b6       	in	r0, 0x3f	; 63
    501a:	f8 94       	cli
    501c:	de bf       	out	0x3e, r29	; 62
    501e:	0f be       	out	0x3f, r0	; 63
    5020:	cd bf       	out	0x3d, r28	; 61
    5022:	0e 89       	ldd	r16, Y+22	; 0x16
    5024:	1f 89       	ldd	r17, Y+23	; 0x17
    5026:	86 e0       	ldi	r24, 0x06	; 6
    5028:	8c 83       	std	Y+4, r24	; 0x04
    502a:	1a 83       	std	Y+2, r17	; 0x02
    502c:	09 83       	std	Y+1, r16	; 0x01
    502e:	8f ef       	ldi	r24, 0xFF	; 255
    5030:	9f e7       	ldi	r25, 0x7F	; 127
    5032:	9e 83       	std	Y+6, r25	; 0x06
    5034:	8d 83       	std	Y+5, r24	; 0x05
    5036:	ae 01       	movw	r20, r28
    5038:	46 5e       	subi	r20, 0xE6	; 230
    503a:	5f 4f       	sbci	r21, 0xFF	; 255
    503c:	68 8d       	ldd	r22, Y+24	; 0x18
    503e:	79 8d       	ldd	r23, Y+25	; 0x19
    5040:	ce 01       	movw	r24, r28
    5042:	01 96       	adiw	r24, 0x01	; 1
    5044:	10 d0       	rcall	.+32     	; 0x5066 <vfprintf>
    5046:	ef 81       	ldd	r30, Y+7	; 0x07
    5048:	f8 85       	ldd	r31, Y+8	; 0x08
    504a:	e0 0f       	add	r30, r16
    504c:	f1 1f       	adc	r31, r17
    504e:	10 82       	st	Z, r1
    5050:	2e 96       	adiw	r28, 0x0e	; 14
    5052:	0f b6       	in	r0, 0x3f	; 63
    5054:	f8 94       	cli
    5056:	de bf       	out	0x3e, r29	; 62
    5058:	0f be       	out	0x3f, r0	; 63
    505a:	cd bf       	out	0x3d, r28	; 61
    505c:	df 91       	pop	r29
    505e:	cf 91       	pop	r28
    5060:	1f 91       	pop	r17
    5062:	0f 91       	pop	r16
    5064:	08 95       	ret

00005066 <vfprintf>:
    5066:	2f 92       	push	r2
    5068:	3f 92       	push	r3
    506a:	4f 92       	push	r4
    506c:	5f 92       	push	r5
    506e:	6f 92       	push	r6
    5070:	7f 92       	push	r7
    5072:	8f 92       	push	r8
    5074:	9f 92       	push	r9
    5076:	af 92       	push	r10
    5078:	bf 92       	push	r11
    507a:	cf 92       	push	r12
    507c:	df 92       	push	r13
    507e:	ef 92       	push	r14
    5080:	ff 92       	push	r15
    5082:	0f 93       	push	r16
    5084:	1f 93       	push	r17
    5086:	cf 93       	push	r28
    5088:	df 93       	push	r29
    508a:	cd b7       	in	r28, 0x3d	; 61
    508c:	de b7       	in	r29, 0x3e	; 62
    508e:	2b 97       	sbiw	r28, 0x0b	; 11
    5090:	0f b6       	in	r0, 0x3f	; 63
    5092:	f8 94       	cli
    5094:	de bf       	out	0x3e, r29	; 62
    5096:	0f be       	out	0x3f, r0	; 63
    5098:	cd bf       	out	0x3d, r28	; 61
    509a:	6c 01       	movw	r12, r24
    509c:	7b 01       	movw	r14, r22
    509e:	8a 01       	movw	r16, r20
    50a0:	fc 01       	movw	r30, r24
    50a2:	17 82       	std	Z+7, r1	; 0x07
    50a4:	16 82       	std	Z+6, r1	; 0x06
    50a6:	83 81       	ldd	r24, Z+3	; 0x03
    50a8:	81 ff       	sbrs	r24, 1
    50aa:	bf c1       	rjmp	.+894    	; 0x542a <vfprintf+0x3c4>
    50ac:	ce 01       	movw	r24, r28
    50ae:	01 96       	adiw	r24, 0x01	; 1
    50b0:	3c 01       	movw	r6, r24
    50b2:	f6 01       	movw	r30, r12
    50b4:	93 81       	ldd	r25, Z+3	; 0x03
    50b6:	f7 01       	movw	r30, r14
    50b8:	93 fd       	sbrc	r25, 3
    50ba:	85 91       	lpm	r24, Z+
    50bc:	93 ff       	sbrs	r25, 3
    50be:	81 91       	ld	r24, Z+
    50c0:	7f 01       	movw	r14, r30
    50c2:	88 23       	and	r24, r24
    50c4:	09 f4       	brne	.+2      	; 0x50c8 <vfprintf+0x62>
    50c6:	ad c1       	rjmp	.+858    	; 0x5422 <vfprintf+0x3bc>
    50c8:	85 32       	cpi	r24, 0x25	; 37
    50ca:	39 f4       	brne	.+14     	; 0x50da <vfprintf+0x74>
    50cc:	93 fd       	sbrc	r25, 3
    50ce:	85 91       	lpm	r24, Z+
    50d0:	93 ff       	sbrs	r25, 3
    50d2:	81 91       	ld	r24, Z+
    50d4:	7f 01       	movw	r14, r30
    50d6:	85 32       	cpi	r24, 0x25	; 37
    50d8:	21 f4       	brne	.+8      	; 0x50e2 <vfprintf+0x7c>
    50da:	b6 01       	movw	r22, r12
    50dc:	90 e0       	ldi	r25, 0x00	; 0
    50de:	d6 d1       	rcall	.+940    	; 0x548c <fputc>
    50e0:	e8 cf       	rjmp	.-48     	; 0x50b2 <vfprintf+0x4c>
    50e2:	91 2c       	mov	r9, r1
    50e4:	21 2c       	mov	r2, r1
    50e6:	31 2c       	mov	r3, r1
    50e8:	ff e1       	ldi	r31, 0x1F	; 31
    50ea:	f3 15       	cp	r31, r3
    50ec:	d8 f0       	brcs	.+54     	; 0x5124 <vfprintf+0xbe>
    50ee:	8b 32       	cpi	r24, 0x2B	; 43
    50f0:	79 f0       	breq	.+30     	; 0x5110 <vfprintf+0xaa>
    50f2:	38 f4       	brcc	.+14     	; 0x5102 <vfprintf+0x9c>
    50f4:	80 32       	cpi	r24, 0x20	; 32
    50f6:	79 f0       	breq	.+30     	; 0x5116 <vfprintf+0xb0>
    50f8:	83 32       	cpi	r24, 0x23	; 35
    50fa:	a1 f4       	brne	.+40     	; 0x5124 <vfprintf+0xbe>
    50fc:	23 2d       	mov	r18, r3
    50fe:	20 61       	ori	r18, 0x10	; 16
    5100:	1d c0       	rjmp	.+58     	; 0x513c <vfprintf+0xd6>
    5102:	8d 32       	cpi	r24, 0x2D	; 45
    5104:	61 f0       	breq	.+24     	; 0x511e <vfprintf+0xb8>
    5106:	80 33       	cpi	r24, 0x30	; 48
    5108:	69 f4       	brne	.+26     	; 0x5124 <vfprintf+0xbe>
    510a:	23 2d       	mov	r18, r3
    510c:	21 60       	ori	r18, 0x01	; 1
    510e:	16 c0       	rjmp	.+44     	; 0x513c <vfprintf+0xd6>
    5110:	83 2d       	mov	r24, r3
    5112:	82 60       	ori	r24, 0x02	; 2
    5114:	38 2e       	mov	r3, r24
    5116:	e3 2d       	mov	r30, r3
    5118:	e4 60       	ori	r30, 0x04	; 4
    511a:	3e 2e       	mov	r3, r30
    511c:	2a c0       	rjmp	.+84     	; 0x5172 <vfprintf+0x10c>
    511e:	f3 2d       	mov	r31, r3
    5120:	f8 60       	ori	r31, 0x08	; 8
    5122:	1d c0       	rjmp	.+58     	; 0x515e <vfprintf+0xf8>
    5124:	37 fc       	sbrc	r3, 7
    5126:	2d c0       	rjmp	.+90     	; 0x5182 <vfprintf+0x11c>
    5128:	20 ed       	ldi	r18, 0xD0	; 208
    512a:	28 0f       	add	r18, r24
    512c:	2a 30       	cpi	r18, 0x0A	; 10
    512e:	40 f0       	brcs	.+16     	; 0x5140 <vfprintf+0xda>
    5130:	8e 32       	cpi	r24, 0x2E	; 46
    5132:	b9 f4       	brne	.+46     	; 0x5162 <vfprintf+0xfc>
    5134:	36 fc       	sbrc	r3, 6
    5136:	75 c1       	rjmp	.+746    	; 0x5422 <vfprintf+0x3bc>
    5138:	23 2d       	mov	r18, r3
    513a:	20 64       	ori	r18, 0x40	; 64
    513c:	32 2e       	mov	r3, r18
    513e:	19 c0       	rjmp	.+50     	; 0x5172 <vfprintf+0x10c>
    5140:	36 fe       	sbrs	r3, 6
    5142:	06 c0       	rjmp	.+12     	; 0x5150 <vfprintf+0xea>
    5144:	8a e0       	ldi	r24, 0x0A	; 10
    5146:	98 9e       	mul	r9, r24
    5148:	20 0d       	add	r18, r0
    514a:	11 24       	eor	r1, r1
    514c:	92 2e       	mov	r9, r18
    514e:	11 c0       	rjmp	.+34     	; 0x5172 <vfprintf+0x10c>
    5150:	ea e0       	ldi	r30, 0x0A	; 10
    5152:	2e 9e       	mul	r2, r30
    5154:	20 0d       	add	r18, r0
    5156:	11 24       	eor	r1, r1
    5158:	22 2e       	mov	r2, r18
    515a:	f3 2d       	mov	r31, r3
    515c:	f0 62       	ori	r31, 0x20	; 32
    515e:	3f 2e       	mov	r3, r31
    5160:	08 c0       	rjmp	.+16     	; 0x5172 <vfprintf+0x10c>
    5162:	8c 36       	cpi	r24, 0x6C	; 108
    5164:	21 f4       	brne	.+8      	; 0x516e <vfprintf+0x108>
    5166:	83 2d       	mov	r24, r3
    5168:	80 68       	ori	r24, 0x80	; 128
    516a:	38 2e       	mov	r3, r24
    516c:	02 c0       	rjmp	.+4      	; 0x5172 <vfprintf+0x10c>
    516e:	88 36       	cpi	r24, 0x68	; 104
    5170:	41 f4       	brne	.+16     	; 0x5182 <vfprintf+0x11c>
    5172:	f7 01       	movw	r30, r14
    5174:	93 fd       	sbrc	r25, 3
    5176:	85 91       	lpm	r24, Z+
    5178:	93 ff       	sbrs	r25, 3
    517a:	81 91       	ld	r24, Z+
    517c:	7f 01       	movw	r14, r30
    517e:	81 11       	cpse	r24, r1
    5180:	b3 cf       	rjmp	.-154    	; 0x50e8 <vfprintf+0x82>
    5182:	98 2f       	mov	r25, r24
    5184:	9f 7d       	andi	r25, 0xDF	; 223
    5186:	95 54       	subi	r25, 0x45	; 69
    5188:	93 30       	cpi	r25, 0x03	; 3
    518a:	28 f4       	brcc	.+10     	; 0x5196 <vfprintf+0x130>
    518c:	0c 5f       	subi	r16, 0xFC	; 252
    518e:	1f 4f       	sbci	r17, 0xFF	; 255
    5190:	9f e3       	ldi	r25, 0x3F	; 63
    5192:	99 83       	std	Y+1, r25	; 0x01
    5194:	0d c0       	rjmp	.+26     	; 0x51b0 <vfprintf+0x14a>
    5196:	83 36       	cpi	r24, 0x63	; 99
    5198:	31 f0       	breq	.+12     	; 0x51a6 <vfprintf+0x140>
    519a:	83 37       	cpi	r24, 0x73	; 115
    519c:	71 f0       	breq	.+28     	; 0x51ba <vfprintf+0x154>
    519e:	83 35       	cpi	r24, 0x53	; 83
    51a0:	09 f0       	breq	.+2      	; 0x51a4 <vfprintf+0x13e>
    51a2:	55 c0       	rjmp	.+170    	; 0x524e <vfprintf+0x1e8>
    51a4:	20 c0       	rjmp	.+64     	; 0x51e6 <vfprintf+0x180>
    51a6:	f8 01       	movw	r30, r16
    51a8:	80 81       	ld	r24, Z
    51aa:	89 83       	std	Y+1, r24	; 0x01
    51ac:	0e 5f       	subi	r16, 0xFE	; 254
    51ae:	1f 4f       	sbci	r17, 0xFF	; 255
    51b0:	88 24       	eor	r8, r8
    51b2:	83 94       	inc	r8
    51b4:	91 2c       	mov	r9, r1
    51b6:	53 01       	movw	r10, r6
    51b8:	12 c0       	rjmp	.+36     	; 0x51de <vfprintf+0x178>
    51ba:	28 01       	movw	r4, r16
    51bc:	f2 e0       	ldi	r31, 0x02	; 2
    51be:	4f 0e       	add	r4, r31
    51c0:	51 1c       	adc	r5, r1
    51c2:	f8 01       	movw	r30, r16
    51c4:	a0 80       	ld	r10, Z
    51c6:	b1 80       	ldd	r11, Z+1	; 0x01
    51c8:	36 fe       	sbrs	r3, 6
    51ca:	03 c0       	rjmp	.+6      	; 0x51d2 <vfprintf+0x16c>
    51cc:	69 2d       	mov	r22, r9
    51ce:	70 e0       	ldi	r23, 0x00	; 0
    51d0:	02 c0       	rjmp	.+4      	; 0x51d6 <vfprintf+0x170>
    51d2:	6f ef       	ldi	r22, 0xFF	; 255
    51d4:	7f ef       	ldi	r23, 0xFF	; 255
    51d6:	c5 01       	movw	r24, r10
    51d8:	4e d1       	rcall	.+668    	; 0x5476 <strnlen>
    51da:	4c 01       	movw	r8, r24
    51dc:	82 01       	movw	r16, r4
    51de:	f3 2d       	mov	r31, r3
    51e0:	ff 77       	andi	r31, 0x7F	; 127
    51e2:	3f 2e       	mov	r3, r31
    51e4:	15 c0       	rjmp	.+42     	; 0x5210 <vfprintf+0x1aa>
    51e6:	28 01       	movw	r4, r16
    51e8:	22 e0       	ldi	r18, 0x02	; 2
    51ea:	42 0e       	add	r4, r18
    51ec:	51 1c       	adc	r5, r1
    51ee:	f8 01       	movw	r30, r16
    51f0:	a0 80       	ld	r10, Z
    51f2:	b1 80       	ldd	r11, Z+1	; 0x01
    51f4:	36 fe       	sbrs	r3, 6
    51f6:	03 c0       	rjmp	.+6      	; 0x51fe <vfprintf+0x198>
    51f8:	69 2d       	mov	r22, r9
    51fa:	70 e0       	ldi	r23, 0x00	; 0
    51fc:	02 c0       	rjmp	.+4      	; 0x5202 <vfprintf+0x19c>
    51fe:	6f ef       	ldi	r22, 0xFF	; 255
    5200:	7f ef       	ldi	r23, 0xFF	; 255
    5202:	c5 01       	movw	r24, r10
    5204:	2d d1       	rcall	.+602    	; 0x5460 <strnlen_P>
    5206:	4c 01       	movw	r8, r24
    5208:	f3 2d       	mov	r31, r3
    520a:	f0 68       	ori	r31, 0x80	; 128
    520c:	3f 2e       	mov	r3, r31
    520e:	82 01       	movw	r16, r4
    5210:	33 fc       	sbrc	r3, 3
    5212:	19 c0       	rjmp	.+50     	; 0x5246 <vfprintf+0x1e0>
    5214:	82 2d       	mov	r24, r2
    5216:	90 e0       	ldi	r25, 0x00	; 0
    5218:	88 16       	cp	r8, r24
    521a:	99 06       	cpc	r9, r25
    521c:	a0 f4       	brcc	.+40     	; 0x5246 <vfprintf+0x1e0>
    521e:	b6 01       	movw	r22, r12
    5220:	80 e2       	ldi	r24, 0x20	; 32
    5222:	90 e0       	ldi	r25, 0x00	; 0
    5224:	33 d1       	rcall	.+614    	; 0x548c <fputc>
    5226:	2a 94       	dec	r2
    5228:	f5 cf       	rjmp	.-22     	; 0x5214 <vfprintf+0x1ae>
    522a:	f5 01       	movw	r30, r10
    522c:	37 fc       	sbrc	r3, 7
    522e:	85 91       	lpm	r24, Z+
    5230:	37 fe       	sbrs	r3, 7
    5232:	81 91       	ld	r24, Z+
    5234:	5f 01       	movw	r10, r30
    5236:	b6 01       	movw	r22, r12
    5238:	90 e0       	ldi	r25, 0x00	; 0
    523a:	28 d1       	rcall	.+592    	; 0x548c <fputc>
    523c:	21 10       	cpse	r2, r1
    523e:	2a 94       	dec	r2
    5240:	21 e0       	ldi	r18, 0x01	; 1
    5242:	82 1a       	sub	r8, r18
    5244:	91 08       	sbc	r9, r1
    5246:	81 14       	cp	r8, r1
    5248:	91 04       	cpc	r9, r1
    524a:	79 f7       	brne	.-34     	; 0x522a <vfprintf+0x1c4>
    524c:	e1 c0       	rjmp	.+450    	; 0x5410 <vfprintf+0x3aa>
    524e:	84 36       	cpi	r24, 0x64	; 100
    5250:	11 f0       	breq	.+4      	; 0x5256 <vfprintf+0x1f0>
    5252:	89 36       	cpi	r24, 0x69	; 105
    5254:	39 f5       	brne	.+78     	; 0x52a4 <vfprintf+0x23e>
    5256:	f8 01       	movw	r30, r16
    5258:	37 fe       	sbrs	r3, 7
    525a:	07 c0       	rjmp	.+14     	; 0x526a <vfprintf+0x204>
    525c:	60 81       	ld	r22, Z
    525e:	71 81       	ldd	r23, Z+1	; 0x01
    5260:	82 81       	ldd	r24, Z+2	; 0x02
    5262:	93 81       	ldd	r25, Z+3	; 0x03
    5264:	0c 5f       	subi	r16, 0xFC	; 252
    5266:	1f 4f       	sbci	r17, 0xFF	; 255
    5268:	08 c0       	rjmp	.+16     	; 0x527a <vfprintf+0x214>
    526a:	60 81       	ld	r22, Z
    526c:	71 81       	ldd	r23, Z+1	; 0x01
    526e:	07 2e       	mov	r0, r23
    5270:	00 0c       	add	r0, r0
    5272:	88 0b       	sbc	r24, r24
    5274:	99 0b       	sbc	r25, r25
    5276:	0e 5f       	subi	r16, 0xFE	; 254
    5278:	1f 4f       	sbci	r17, 0xFF	; 255
    527a:	f3 2d       	mov	r31, r3
    527c:	ff 76       	andi	r31, 0x6F	; 111
    527e:	3f 2e       	mov	r3, r31
    5280:	97 ff       	sbrs	r25, 7
    5282:	09 c0       	rjmp	.+18     	; 0x5296 <vfprintf+0x230>
    5284:	90 95       	com	r25
    5286:	80 95       	com	r24
    5288:	70 95       	com	r23
    528a:	61 95       	neg	r22
    528c:	7f 4f       	sbci	r23, 0xFF	; 255
    528e:	8f 4f       	sbci	r24, 0xFF	; 255
    5290:	9f 4f       	sbci	r25, 0xFF	; 255
    5292:	f0 68       	ori	r31, 0x80	; 128
    5294:	3f 2e       	mov	r3, r31
    5296:	2a e0       	ldi	r18, 0x0A	; 10
    5298:	30 e0       	ldi	r19, 0x00	; 0
    529a:	a3 01       	movw	r20, r6
    529c:	33 d1       	rcall	.+614    	; 0x5504 <__ultoa_invert>
    529e:	88 2e       	mov	r8, r24
    52a0:	86 18       	sub	r8, r6
    52a2:	44 c0       	rjmp	.+136    	; 0x532c <vfprintf+0x2c6>
    52a4:	85 37       	cpi	r24, 0x75	; 117
    52a6:	31 f4       	brne	.+12     	; 0x52b4 <vfprintf+0x24e>
    52a8:	23 2d       	mov	r18, r3
    52aa:	2f 7e       	andi	r18, 0xEF	; 239
    52ac:	b2 2e       	mov	r11, r18
    52ae:	2a e0       	ldi	r18, 0x0A	; 10
    52b0:	30 e0       	ldi	r19, 0x00	; 0
    52b2:	25 c0       	rjmp	.+74     	; 0x52fe <vfprintf+0x298>
    52b4:	93 2d       	mov	r25, r3
    52b6:	99 7f       	andi	r25, 0xF9	; 249
    52b8:	b9 2e       	mov	r11, r25
    52ba:	8f 36       	cpi	r24, 0x6F	; 111
    52bc:	c1 f0       	breq	.+48     	; 0x52ee <vfprintf+0x288>
    52be:	18 f4       	brcc	.+6      	; 0x52c6 <vfprintf+0x260>
    52c0:	88 35       	cpi	r24, 0x58	; 88
    52c2:	79 f0       	breq	.+30     	; 0x52e2 <vfprintf+0x27c>
    52c4:	ae c0       	rjmp	.+348    	; 0x5422 <vfprintf+0x3bc>
    52c6:	80 37       	cpi	r24, 0x70	; 112
    52c8:	19 f0       	breq	.+6      	; 0x52d0 <vfprintf+0x26a>
    52ca:	88 37       	cpi	r24, 0x78	; 120
    52cc:	21 f0       	breq	.+8      	; 0x52d6 <vfprintf+0x270>
    52ce:	a9 c0       	rjmp	.+338    	; 0x5422 <vfprintf+0x3bc>
    52d0:	e9 2f       	mov	r30, r25
    52d2:	e0 61       	ori	r30, 0x10	; 16
    52d4:	be 2e       	mov	r11, r30
    52d6:	b4 fe       	sbrs	r11, 4
    52d8:	0d c0       	rjmp	.+26     	; 0x52f4 <vfprintf+0x28e>
    52da:	fb 2d       	mov	r31, r11
    52dc:	f4 60       	ori	r31, 0x04	; 4
    52de:	bf 2e       	mov	r11, r31
    52e0:	09 c0       	rjmp	.+18     	; 0x52f4 <vfprintf+0x28e>
    52e2:	34 fe       	sbrs	r3, 4
    52e4:	0a c0       	rjmp	.+20     	; 0x52fa <vfprintf+0x294>
    52e6:	29 2f       	mov	r18, r25
    52e8:	26 60       	ori	r18, 0x06	; 6
    52ea:	b2 2e       	mov	r11, r18
    52ec:	06 c0       	rjmp	.+12     	; 0x52fa <vfprintf+0x294>
    52ee:	28 e0       	ldi	r18, 0x08	; 8
    52f0:	30 e0       	ldi	r19, 0x00	; 0
    52f2:	05 c0       	rjmp	.+10     	; 0x52fe <vfprintf+0x298>
    52f4:	20 e1       	ldi	r18, 0x10	; 16
    52f6:	30 e0       	ldi	r19, 0x00	; 0
    52f8:	02 c0       	rjmp	.+4      	; 0x52fe <vfprintf+0x298>
    52fa:	20 e1       	ldi	r18, 0x10	; 16
    52fc:	32 e0       	ldi	r19, 0x02	; 2
    52fe:	f8 01       	movw	r30, r16
    5300:	b7 fe       	sbrs	r11, 7
    5302:	07 c0       	rjmp	.+14     	; 0x5312 <vfprintf+0x2ac>
    5304:	60 81       	ld	r22, Z
    5306:	71 81       	ldd	r23, Z+1	; 0x01
    5308:	82 81       	ldd	r24, Z+2	; 0x02
    530a:	93 81       	ldd	r25, Z+3	; 0x03
    530c:	0c 5f       	subi	r16, 0xFC	; 252
    530e:	1f 4f       	sbci	r17, 0xFF	; 255
    5310:	06 c0       	rjmp	.+12     	; 0x531e <vfprintf+0x2b8>
    5312:	60 81       	ld	r22, Z
    5314:	71 81       	ldd	r23, Z+1	; 0x01
    5316:	80 e0       	ldi	r24, 0x00	; 0
    5318:	90 e0       	ldi	r25, 0x00	; 0
    531a:	0e 5f       	subi	r16, 0xFE	; 254
    531c:	1f 4f       	sbci	r17, 0xFF	; 255
    531e:	a3 01       	movw	r20, r6
    5320:	f1 d0       	rcall	.+482    	; 0x5504 <__ultoa_invert>
    5322:	88 2e       	mov	r8, r24
    5324:	86 18       	sub	r8, r6
    5326:	fb 2d       	mov	r31, r11
    5328:	ff 77       	andi	r31, 0x7F	; 127
    532a:	3f 2e       	mov	r3, r31
    532c:	36 fe       	sbrs	r3, 6
    532e:	0d c0       	rjmp	.+26     	; 0x534a <vfprintf+0x2e4>
    5330:	23 2d       	mov	r18, r3
    5332:	2e 7f       	andi	r18, 0xFE	; 254
    5334:	a2 2e       	mov	r10, r18
    5336:	89 14       	cp	r8, r9
    5338:	58 f4       	brcc	.+22     	; 0x5350 <vfprintf+0x2ea>
    533a:	34 fe       	sbrs	r3, 4
    533c:	0b c0       	rjmp	.+22     	; 0x5354 <vfprintf+0x2ee>
    533e:	32 fc       	sbrc	r3, 2
    5340:	09 c0       	rjmp	.+18     	; 0x5354 <vfprintf+0x2ee>
    5342:	83 2d       	mov	r24, r3
    5344:	8e 7e       	andi	r24, 0xEE	; 238
    5346:	a8 2e       	mov	r10, r24
    5348:	05 c0       	rjmp	.+10     	; 0x5354 <vfprintf+0x2ee>
    534a:	b8 2c       	mov	r11, r8
    534c:	a3 2c       	mov	r10, r3
    534e:	03 c0       	rjmp	.+6      	; 0x5356 <vfprintf+0x2f0>
    5350:	b8 2c       	mov	r11, r8
    5352:	01 c0       	rjmp	.+2      	; 0x5356 <vfprintf+0x2f0>
    5354:	b9 2c       	mov	r11, r9
    5356:	a4 fe       	sbrs	r10, 4
    5358:	0f c0       	rjmp	.+30     	; 0x5378 <vfprintf+0x312>
    535a:	fe 01       	movw	r30, r28
    535c:	e8 0d       	add	r30, r8
    535e:	f1 1d       	adc	r31, r1
    5360:	80 81       	ld	r24, Z
    5362:	80 33       	cpi	r24, 0x30	; 48
    5364:	21 f4       	brne	.+8      	; 0x536e <vfprintf+0x308>
    5366:	9a 2d       	mov	r25, r10
    5368:	99 7e       	andi	r25, 0xE9	; 233
    536a:	a9 2e       	mov	r10, r25
    536c:	09 c0       	rjmp	.+18     	; 0x5380 <vfprintf+0x31a>
    536e:	a2 fe       	sbrs	r10, 2
    5370:	06 c0       	rjmp	.+12     	; 0x537e <vfprintf+0x318>
    5372:	b3 94       	inc	r11
    5374:	b3 94       	inc	r11
    5376:	04 c0       	rjmp	.+8      	; 0x5380 <vfprintf+0x31a>
    5378:	8a 2d       	mov	r24, r10
    537a:	86 78       	andi	r24, 0x86	; 134
    537c:	09 f0       	breq	.+2      	; 0x5380 <vfprintf+0x31a>
    537e:	b3 94       	inc	r11
    5380:	a3 fc       	sbrc	r10, 3
    5382:	10 c0       	rjmp	.+32     	; 0x53a4 <vfprintf+0x33e>
    5384:	a0 fe       	sbrs	r10, 0
    5386:	06 c0       	rjmp	.+12     	; 0x5394 <vfprintf+0x32e>
    5388:	b2 14       	cp	r11, r2
    538a:	80 f4       	brcc	.+32     	; 0x53ac <vfprintf+0x346>
    538c:	28 0c       	add	r2, r8
    538e:	92 2c       	mov	r9, r2
    5390:	9b 18       	sub	r9, r11
    5392:	0d c0       	rjmp	.+26     	; 0x53ae <vfprintf+0x348>
    5394:	b2 14       	cp	r11, r2
    5396:	58 f4       	brcc	.+22     	; 0x53ae <vfprintf+0x348>
    5398:	b6 01       	movw	r22, r12
    539a:	80 e2       	ldi	r24, 0x20	; 32
    539c:	90 e0       	ldi	r25, 0x00	; 0
    539e:	76 d0       	rcall	.+236    	; 0x548c <fputc>
    53a0:	b3 94       	inc	r11
    53a2:	f8 cf       	rjmp	.-16     	; 0x5394 <vfprintf+0x32e>
    53a4:	b2 14       	cp	r11, r2
    53a6:	18 f4       	brcc	.+6      	; 0x53ae <vfprintf+0x348>
    53a8:	2b 18       	sub	r2, r11
    53aa:	02 c0       	rjmp	.+4      	; 0x53b0 <vfprintf+0x34a>
    53ac:	98 2c       	mov	r9, r8
    53ae:	21 2c       	mov	r2, r1
    53b0:	a4 fe       	sbrs	r10, 4
    53b2:	0f c0       	rjmp	.+30     	; 0x53d2 <vfprintf+0x36c>
    53b4:	b6 01       	movw	r22, r12
    53b6:	80 e3       	ldi	r24, 0x30	; 48
    53b8:	90 e0       	ldi	r25, 0x00	; 0
    53ba:	68 d0       	rcall	.+208    	; 0x548c <fputc>
    53bc:	a2 fe       	sbrs	r10, 2
    53be:	16 c0       	rjmp	.+44     	; 0x53ec <vfprintf+0x386>
    53c0:	a1 fc       	sbrc	r10, 1
    53c2:	03 c0       	rjmp	.+6      	; 0x53ca <vfprintf+0x364>
    53c4:	88 e7       	ldi	r24, 0x78	; 120
    53c6:	90 e0       	ldi	r25, 0x00	; 0
    53c8:	02 c0       	rjmp	.+4      	; 0x53ce <vfprintf+0x368>
    53ca:	88 e5       	ldi	r24, 0x58	; 88
    53cc:	90 e0       	ldi	r25, 0x00	; 0
    53ce:	b6 01       	movw	r22, r12
    53d0:	0c c0       	rjmp	.+24     	; 0x53ea <vfprintf+0x384>
    53d2:	8a 2d       	mov	r24, r10
    53d4:	86 78       	andi	r24, 0x86	; 134
    53d6:	51 f0       	breq	.+20     	; 0x53ec <vfprintf+0x386>
    53d8:	a1 fe       	sbrs	r10, 1
    53da:	02 c0       	rjmp	.+4      	; 0x53e0 <vfprintf+0x37a>
    53dc:	8b e2       	ldi	r24, 0x2B	; 43
    53de:	01 c0       	rjmp	.+2      	; 0x53e2 <vfprintf+0x37c>
    53e0:	80 e2       	ldi	r24, 0x20	; 32
    53e2:	a7 fc       	sbrc	r10, 7
    53e4:	8d e2       	ldi	r24, 0x2D	; 45
    53e6:	b6 01       	movw	r22, r12
    53e8:	90 e0       	ldi	r25, 0x00	; 0
    53ea:	50 d0       	rcall	.+160    	; 0x548c <fputc>
    53ec:	89 14       	cp	r8, r9
    53ee:	30 f4       	brcc	.+12     	; 0x53fc <vfprintf+0x396>
    53f0:	b6 01       	movw	r22, r12
    53f2:	80 e3       	ldi	r24, 0x30	; 48
    53f4:	90 e0       	ldi	r25, 0x00	; 0
    53f6:	4a d0       	rcall	.+148    	; 0x548c <fputc>
    53f8:	9a 94       	dec	r9
    53fa:	f8 cf       	rjmp	.-16     	; 0x53ec <vfprintf+0x386>
    53fc:	8a 94       	dec	r8
    53fe:	f3 01       	movw	r30, r6
    5400:	e8 0d       	add	r30, r8
    5402:	f1 1d       	adc	r31, r1
    5404:	80 81       	ld	r24, Z
    5406:	b6 01       	movw	r22, r12
    5408:	90 e0       	ldi	r25, 0x00	; 0
    540a:	40 d0       	rcall	.+128    	; 0x548c <fputc>
    540c:	81 10       	cpse	r8, r1
    540e:	f6 cf       	rjmp	.-20     	; 0x53fc <vfprintf+0x396>
    5410:	22 20       	and	r2, r2
    5412:	09 f4       	brne	.+2      	; 0x5416 <vfprintf+0x3b0>
    5414:	4e ce       	rjmp	.-868    	; 0x50b2 <vfprintf+0x4c>
    5416:	b6 01       	movw	r22, r12
    5418:	80 e2       	ldi	r24, 0x20	; 32
    541a:	90 e0       	ldi	r25, 0x00	; 0
    541c:	37 d0       	rcall	.+110    	; 0x548c <fputc>
    541e:	2a 94       	dec	r2
    5420:	f7 cf       	rjmp	.-18     	; 0x5410 <vfprintf+0x3aa>
    5422:	f6 01       	movw	r30, r12
    5424:	86 81       	ldd	r24, Z+6	; 0x06
    5426:	97 81       	ldd	r25, Z+7	; 0x07
    5428:	02 c0       	rjmp	.+4      	; 0x542e <vfprintf+0x3c8>
    542a:	8f ef       	ldi	r24, 0xFF	; 255
    542c:	9f ef       	ldi	r25, 0xFF	; 255
    542e:	2b 96       	adiw	r28, 0x0b	; 11
    5430:	0f b6       	in	r0, 0x3f	; 63
    5432:	f8 94       	cli
    5434:	de bf       	out	0x3e, r29	; 62
    5436:	0f be       	out	0x3f, r0	; 63
    5438:	cd bf       	out	0x3d, r28	; 61
    543a:	df 91       	pop	r29
    543c:	cf 91       	pop	r28
    543e:	1f 91       	pop	r17
    5440:	0f 91       	pop	r16
    5442:	ff 90       	pop	r15
    5444:	ef 90       	pop	r14
    5446:	df 90       	pop	r13
    5448:	cf 90       	pop	r12
    544a:	bf 90       	pop	r11
    544c:	af 90       	pop	r10
    544e:	9f 90       	pop	r9
    5450:	8f 90       	pop	r8
    5452:	7f 90       	pop	r7
    5454:	6f 90       	pop	r6
    5456:	5f 90       	pop	r5
    5458:	4f 90       	pop	r4
    545a:	3f 90       	pop	r3
    545c:	2f 90       	pop	r2
    545e:	08 95       	ret

00005460 <strnlen_P>:
    5460:	fc 01       	movw	r30, r24
    5462:	05 90       	lpm	r0, Z+
    5464:	61 50       	subi	r22, 0x01	; 1
    5466:	70 40       	sbci	r23, 0x00	; 0
    5468:	01 10       	cpse	r0, r1
    546a:	d8 f7       	brcc	.-10     	; 0x5462 <strnlen_P+0x2>
    546c:	80 95       	com	r24
    546e:	90 95       	com	r25
    5470:	8e 0f       	add	r24, r30
    5472:	9f 1f       	adc	r25, r31
    5474:	08 95       	ret

00005476 <strnlen>:
    5476:	fc 01       	movw	r30, r24
    5478:	61 50       	subi	r22, 0x01	; 1
    547a:	70 40       	sbci	r23, 0x00	; 0
    547c:	01 90       	ld	r0, Z+
    547e:	01 10       	cpse	r0, r1
    5480:	d8 f7       	brcc	.-10     	; 0x5478 <strnlen+0x2>
    5482:	80 95       	com	r24
    5484:	90 95       	com	r25
    5486:	8e 0f       	add	r24, r30
    5488:	9f 1f       	adc	r25, r31
    548a:	08 95       	ret

0000548c <fputc>:
    548c:	0f 93       	push	r16
    548e:	1f 93       	push	r17
    5490:	cf 93       	push	r28
    5492:	df 93       	push	r29
    5494:	fb 01       	movw	r30, r22
    5496:	23 81       	ldd	r18, Z+3	; 0x03
    5498:	21 fd       	sbrc	r18, 1
    549a:	03 c0       	rjmp	.+6      	; 0x54a2 <fputc+0x16>
    549c:	8f ef       	ldi	r24, 0xFF	; 255
    549e:	9f ef       	ldi	r25, 0xFF	; 255
    54a0:	2c c0       	rjmp	.+88     	; 0x54fa <fputc+0x6e>
    54a2:	22 ff       	sbrs	r18, 2
    54a4:	16 c0       	rjmp	.+44     	; 0x54d2 <fputc+0x46>
    54a6:	46 81       	ldd	r20, Z+6	; 0x06
    54a8:	57 81       	ldd	r21, Z+7	; 0x07
    54aa:	24 81       	ldd	r18, Z+4	; 0x04
    54ac:	35 81       	ldd	r19, Z+5	; 0x05
    54ae:	42 17       	cp	r20, r18
    54b0:	53 07       	cpc	r21, r19
    54b2:	44 f4       	brge	.+16     	; 0x54c4 <fputc+0x38>
    54b4:	a0 81       	ld	r26, Z
    54b6:	b1 81       	ldd	r27, Z+1	; 0x01
    54b8:	9d 01       	movw	r18, r26
    54ba:	2f 5f       	subi	r18, 0xFF	; 255
    54bc:	3f 4f       	sbci	r19, 0xFF	; 255
    54be:	31 83       	std	Z+1, r19	; 0x01
    54c0:	20 83       	st	Z, r18
    54c2:	8c 93       	st	X, r24
    54c4:	26 81       	ldd	r18, Z+6	; 0x06
    54c6:	37 81       	ldd	r19, Z+7	; 0x07
    54c8:	2f 5f       	subi	r18, 0xFF	; 255
    54ca:	3f 4f       	sbci	r19, 0xFF	; 255
    54cc:	37 83       	std	Z+7, r19	; 0x07
    54ce:	26 83       	std	Z+6, r18	; 0x06
    54d0:	14 c0       	rjmp	.+40     	; 0x54fa <fputc+0x6e>
    54d2:	8b 01       	movw	r16, r22
    54d4:	ec 01       	movw	r28, r24
    54d6:	fb 01       	movw	r30, r22
    54d8:	00 84       	ldd	r0, Z+8	; 0x08
    54da:	f1 85       	ldd	r31, Z+9	; 0x09
    54dc:	e0 2d       	mov	r30, r0
    54de:	19 95       	eicall
    54e0:	89 2b       	or	r24, r25
    54e2:	e1 f6       	brne	.-72     	; 0x549c <fputc+0x10>
    54e4:	d8 01       	movw	r26, r16
    54e6:	16 96       	adiw	r26, 0x06	; 6
    54e8:	8d 91       	ld	r24, X+
    54ea:	9c 91       	ld	r25, X
    54ec:	17 97       	sbiw	r26, 0x07	; 7
    54ee:	01 96       	adiw	r24, 0x01	; 1
    54f0:	17 96       	adiw	r26, 0x07	; 7
    54f2:	9c 93       	st	X, r25
    54f4:	8e 93       	st	-X, r24
    54f6:	16 97       	sbiw	r26, 0x06	; 6
    54f8:	ce 01       	movw	r24, r28
    54fa:	df 91       	pop	r29
    54fc:	cf 91       	pop	r28
    54fe:	1f 91       	pop	r17
    5500:	0f 91       	pop	r16
    5502:	08 95       	ret

00005504 <__ultoa_invert>:
    5504:	fa 01       	movw	r30, r20
    5506:	aa 27       	eor	r26, r26
    5508:	28 30       	cpi	r18, 0x08	; 8
    550a:	51 f1       	breq	.+84     	; 0x5560 <__ultoa_invert+0x5c>
    550c:	20 31       	cpi	r18, 0x10	; 16
    550e:	81 f1       	breq	.+96     	; 0x5570 <__ultoa_invert+0x6c>
    5510:	e8 94       	clt
    5512:	6f 93       	push	r22
    5514:	6e 7f       	andi	r22, 0xFE	; 254
    5516:	6e 5f       	subi	r22, 0xFE	; 254
    5518:	7f 4f       	sbci	r23, 0xFF	; 255
    551a:	8f 4f       	sbci	r24, 0xFF	; 255
    551c:	9f 4f       	sbci	r25, 0xFF	; 255
    551e:	af 4f       	sbci	r26, 0xFF	; 255
    5520:	b1 e0       	ldi	r27, 0x01	; 1
    5522:	3e d0       	rcall	.+124    	; 0x55a0 <__ultoa_invert+0x9c>
    5524:	b4 e0       	ldi	r27, 0x04	; 4
    5526:	3c d0       	rcall	.+120    	; 0x55a0 <__ultoa_invert+0x9c>
    5528:	67 0f       	add	r22, r23
    552a:	78 1f       	adc	r23, r24
    552c:	89 1f       	adc	r24, r25
    552e:	9a 1f       	adc	r25, r26
    5530:	a1 1d       	adc	r26, r1
    5532:	68 0f       	add	r22, r24
    5534:	79 1f       	adc	r23, r25
    5536:	8a 1f       	adc	r24, r26
    5538:	91 1d       	adc	r25, r1
    553a:	a1 1d       	adc	r26, r1
    553c:	6a 0f       	add	r22, r26
    553e:	71 1d       	adc	r23, r1
    5540:	81 1d       	adc	r24, r1
    5542:	91 1d       	adc	r25, r1
    5544:	a1 1d       	adc	r26, r1
    5546:	20 d0       	rcall	.+64     	; 0x5588 <__ultoa_invert+0x84>
    5548:	09 f4       	brne	.+2      	; 0x554c <__ultoa_invert+0x48>
    554a:	68 94       	set
    554c:	3f 91       	pop	r19
    554e:	2a e0       	ldi	r18, 0x0A	; 10
    5550:	26 9f       	mul	r18, r22
    5552:	11 24       	eor	r1, r1
    5554:	30 19       	sub	r19, r0
    5556:	30 5d       	subi	r19, 0xD0	; 208
    5558:	31 93       	st	Z+, r19
    555a:	de f6       	brtc	.-74     	; 0x5512 <__ultoa_invert+0xe>
    555c:	cf 01       	movw	r24, r30
    555e:	08 95       	ret
    5560:	46 2f       	mov	r20, r22
    5562:	47 70       	andi	r20, 0x07	; 7
    5564:	40 5d       	subi	r20, 0xD0	; 208
    5566:	41 93       	st	Z+, r20
    5568:	b3 e0       	ldi	r27, 0x03	; 3
    556a:	0f d0       	rcall	.+30     	; 0x558a <__ultoa_invert+0x86>
    556c:	c9 f7       	brne	.-14     	; 0x5560 <__ultoa_invert+0x5c>
    556e:	f6 cf       	rjmp	.-20     	; 0x555c <__ultoa_invert+0x58>
    5570:	46 2f       	mov	r20, r22
    5572:	4f 70       	andi	r20, 0x0F	; 15
    5574:	40 5d       	subi	r20, 0xD0	; 208
    5576:	4a 33       	cpi	r20, 0x3A	; 58
    5578:	18 f0       	brcs	.+6      	; 0x5580 <__ultoa_invert+0x7c>
    557a:	49 5d       	subi	r20, 0xD9	; 217
    557c:	31 fd       	sbrc	r19, 1
    557e:	40 52       	subi	r20, 0x20	; 32
    5580:	41 93       	st	Z+, r20
    5582:	02 d0       	rcall	.+4      	; 0x5588 <__ultoa_invert+0x84>
    5584:	a9 f7       	brne	.-22     	; 0x5570 <__ultoa_invert+0x6c>
    5586:	ea cf       	rjmp	.-44     	; 0x555c <__ultoa_invert+0x58>
    5588:	b4 e0       	ldi	r27, 0x04	; 4
    558a:	a6 95       	lsr	r26
    558c:	97 95       	ror	r25
    558e:	87 95       	ror	r24
    5590:	77 95       	ror	r23
    5592:	67 95       	ror	r22
    5594:	ba 95       	dec	r27
    5596:	c9 f7       	brne	.-14     	; 0x558a <__ultoa_invert+0x86>
    5598:	00 97       	sbiw	r24, 0x00	; 0
    559a:	61 05       	cpc	r22, r1
    559c:	71 05       	cpc	r23, r1
    559e:	08 95       	ret
    55a0:	9b 01       	movw	r18, r22
    55a2:	ac 01       	movw	r20, r24
    55a4:	0a 2e       	mov	r0, r26
    55a6:	06 94       	lsr	r0
    55a8:	57 95       	ror	r21
    55aa:	47 95       	ror	r20
    55ac:	37 95       	ror	r19
    55ae:	27 95       	ror	r18
    55b0:	ba 95       	dec	r27
    55b2:	c9 f7       	brne	.-14     	; 0x55a6 <__ultoa_invert+0xa2>
    55b4:	62 0f       	add	r22, r18
    55b6:	73 1f       	adc	r23, r19
    55b8:	84 1f       	adc	r24, r20
    55ba:	95 1f       	adc	r25, r21
    55bc:	a0 1d       	adc	r26, r0
    55be:	08 95       	ret

000055c0 <_exit>:
    55c0:	f8 94       	cli

000055c2 <__stop_program>:
    55c2:	ff cf       	rjmp	.-2      	; 0x55c2 <__stop_program>
