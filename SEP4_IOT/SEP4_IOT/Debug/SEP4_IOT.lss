
SEP4_IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000606  00800200  00006428  000064bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006428  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000100c  00800806  00800806  00006ac2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006ac2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006b20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000af8  00000000  00000000  00006b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d6c1  00000000  00000000  00007658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000356d  00000000  00000000  00014d19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006a83  00000000  00000000  00018286  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002690  00000000  00000000  0001ed0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000467d  00000000  00000000  0002139c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bc99  00000000  00000000  00025a19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a40  00000000  00000000  000316b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	dc c3       	rjmp	.+1976   	; 0x7ea <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 fb 23 	jmp	0x47f6	; 0x47f6 <__vector_25>
      68:	0c 94 4d 24 	jmp	0x489a	; 0x489a <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 91 24 	jmp	0x4922	; 0x4922 <__vector_36>
      94:	0c 94 e3 24 	jmp	0x49c6	; 0x49c6 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 a8 2a 	jmp	0x5550	; 0x5550 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 27 25 	jmp	0x4a4e	; 0x4a4e <__vector_51>
      d0:	0c 94 79 25 	jmp	0x4af2	; 0x4af2 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 bd 25 	jmp	0x4b7a	; 0x4b7a <__vector_54>
      dc:	0c 94 0f 26 	jmp	0x4c1e	; 0x4c1e <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	9f 18       	sub	r9, r15
      e6:	9f 18       	sub	r9, r15
      e8:	9f 18       	sub	r9, r15
      ea:	d6 18       	sub	r13, r6
      ec:	de 18       	sub	r13, r14
      ee:	f3 18       	sub	r15, r3
      f0:	9f 18       	sub	r9, r15
      f2:	9f 18       	sub	r9, r15
      f4:	d6 18       	sub	r13, r6
      f6:	de 18       	sub	r13, r14
      f8:	ca 2a       	or	r12, r26
      fa:	3a 2b       	or	r19, r26
      fc:	3a 2b       	or	r19, r26
      fe:	3a 2b       	or	r19, r26
     100:	3a 2b       	or	r19, r26
     102:	3a 2b       	or	r19, r26
     104:	3a 2b       	or	r19, r26
     106:	3a 2b       	or	r19, r26
     108:	ca 2a       	or	r12, r26
     10a:	3a 2b       	or	r19, r26
     10c:	3a 2b       	or	r19, r26
     10e:	3a 2b       	or	r19, r26
     110:	3a 2b       	or	r19, r26
     112:	3a 2b       	or	r19, r26
     114:	3a 2b       	or	r19, r26
     116:	3a 2b       	or	r19, r26
     118:	cc 2a       	or	r12, r28
     11a:	3a 2b       	or	r19, r26
     11c:	3a 2b       	or	r19, r26
     11e:	3a 2b       	or	r19, r26
     120:	3a 2b       	or	r19, r26
     122:	3a 2b       	or	r19, r26
     124:	3a 2b       	or	r19, r26
     126:	3a 2b       	or	r19, r26
     128:	3a 2b       	or	r19, r26
     12a:	3a 2b       	or	r19, r26
     12c:	3a 2b       	or	r19, r26
     12e:	3a 2b       	or	r19, r26
     130:	3a 2b       	or	r19, r26
     132:	3a 2b       	or	r19, r26
     134:	3a 2b       	or	r19, r26
     136:	3a 2b       	or	r19, r26
     138:	cc 2a       	or	r12, r28
     13a:	3a 2b       	or	r19, r26
     13c:	3a 2b       	or	r19, r26
     13e:	3a 2b       	or	r19, r26
     140:	3a 2b       	or	r19, r26
     142:	3a 2b       	or	r19, r26
     144:	3a 2b       	or	r19, r26
     146:	3a 2b       	or	r19, r26
     148:	3a 2b       	or	r19, r26
     14a:	3a 2b       	or	r19, r26
     14c:	3a 2b       	or	r19, r26
     14e:	3a 2b       	or	r19, r26
     150:	3a 2b       	or	r19, r26
     152:	3a 2b       	or	r19, r26
     154:	3a 2b       	or	r19, r26
     156:	3a 2b       	or	r19, r26
     158:	36 2b       	or	r19, r22
     15a:	3a 2b       	or	r19, r26
     15c:	3a 2b       	or	r19, r26
     15e:	3a 2b       	or	r19, r26
     160:	3a 2b       	or	r19, r26
     162:	3a 2b       	or	r19, r26
     164:	3a 2b       	or	r19, r26
     166:	3a 2b       	or	r19, r26
     168:	01 2b       	or	r16, r17
     16a:	3a 2b       	or	r19, r26
     16c:	3a 2b       	or	r19, r26
     16e:	3a 2b       	or	r19, r26
     170:	3a 2b       	or	r19, r26
     172:	3a 2b       	or	r19, r26
     174:	3a 2b       	or	r19, r26
     176:	3a 2b       	or	r19, r26
     178:	3a 2b       	or	r19, r26
     17a:	3a 2b       	or	r19, r26
     17c:	3a 2b       	or	r19, r26
     17e:	3a 2b       	or	r19, r26
     180:	3a 2b       	or	r19, r26
     182:	3a 2b       	or	r19, r26
     184:	3a 2b       	or	r19, r26
     186:	3a 2b       	or	r19, r26
     188:	f5 2a       	or	r15, r21
     18a:	3a 2b       	or	r19, r26
     18c:	3a 2b       	or	r19, r26
     18e:	3a 2b       	or	r19, r26
     190:	3a 2b       	or	r19, r26
     192:	3a 2b       	or	r19, r26
     194:	3a 2b       	or	r19, r26
     196:	3a 2b       	or	r19, r26
     198:	19 2b       	or	r17, r25

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 ef 0b 	call	0x17de	; 0x17de <prvCheckTasksWaitingTermination>
     19e:	80 91 13 16 	lds	r24, 0x1613	; 0x801613 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	5b d2       	rcall	.+1206   	; 0x65e <vPortYield>
     1a8:	0e 94 1c 19 	call	0x3238	; 0x3238 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 11 18 	call	0x3022	; 0x3022 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 68 18 	call	0x30d0	; 0x30d0 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	18 e0       	ldi	r17, 0x08	; 8
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e8 e2       	ldi	r30, 0x28	; 40
     1e4:	f4 e6       	ldi	r31, 0x64	; 100
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a6 30       	cpi	r26, 0x06	; 6
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	28 e1       	ldi	r18, 0x18	; 24
     1f8:	a6 e0       	ldi	r26, 0x06	; 6
     1fa:	b8 e0       	ldi	r27, 0x08	; 8
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a2 31       	cpi	r26, 0x12	; 18
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 2e 1c 	call	0x385c	; 0x385c <main>
     20a:	0c 94 12 32 	jmp	0x6424	; 0x6424 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     210:	e2 e1       	ldi	r30, 0x12	; 18
     212:	f8 e0       	ldi	r31, 0x08	; 8
     214:	a6 e1       	ldi	r26, 0x16	; 22
     216:	b8 e0       	ldi	r27, 0x08	; 8
     218:	b1 83       	std	Z+1, r27	; 0x01
     21a:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     21c:	13 82       	std	Z+3, r1	; 0x03
     21e:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     220:	ee eb       	ldi	r30, 0xBE	; 190
     222:	f5 e1       	ldi	r31, 0x15	; 21
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     224:	f0 93 11 08 	sts	0x0811, r31	; 0x800811 <pxEnd+0x1>
     228:	e0 93 10 08 	sts	0x0810, r30	; 0x800810 <pxEnd>
    pxEnd->xBlockSize = 0;
     22c:	13 82       	std	Z+3, r1	; 0x03
     22e:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     230:	11 82       	std	Z+1, r1	; 0x01
     232:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     234:	88 ea       	ldi	r24, 0xA8	; 168
     236:	9d e0       	ldi	r25, 0x0D	; 13
     238:	13 96       	adiw	r26, 0x03	; 3
     23a:	9c 93       	st	X, r25
     23c:	8e 93       	st	-X, r24
     23e:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     240:	ed 93       	st	X+, r30
     242:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     244:	90 93 0d 08 	sts	0x080D, r25	; 0x80080d <xMinimumEverFreeBytesRemaining+0x1>
     248:	80 93 0c 08 	sts	0x080C, r24	; 0x80080c <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     24c:	90 93 0f 08 	sts	0x080F, r25	; 0x80080f <xFreeBytesRemaining+0x1>
     250:	80 93 0e 08 	sts	0x080E, r24	; 0x80080e <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	90 e8       	ldi	r25, 0x80	; 128
     258:	90 93 07 08 	sts	0x0807, r25	; 0x800807 <__data_end+0x1>
     25c:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__data_end>
     260:	08 95       	ret

00000262 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     268:	a2 e1       	ldi	r26, 0x12	; 18
     26a:	b8 e0       	ldi	r27, 0x08	; 8
     26c:	01 c0       	rjmp	.+2      	; 0x270 <prvInsertBlockIntoFreeList+0xe>
     26e:	df 01       	movw	r26, r30
     270:	ed 91       	ld	r30, X+
     272:	fc 91       	ld	r31, X
     274:	11 97       	sbiw	r26, 0x01	; 1
     276:	ec 17       	cp	r30, r28
     278:	fd 07       	cpc	r31, r29
     27a:	c8 f3       	brcs	.-14     	; 0x26e <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     27c:	12 96       	adiw	r26, 0x02	; 2
     27e:	8d 91       	ld	r24, X+
     280:	9c 91       	ld	r25, X
     282:	13 97       	sbiw	r26, 0x03	; 3
     284:	9d 01       	movw	r18, r26
     286:	28 0f       	add	r18, r24
     288:	39 1f       	adc	r19, r25
     28a:	c2 17       	cp	r28, r18
     28c:	d3 07       	cpc	r29, r19
     28e:	49 f4       	brne	.+18     	; 0x2a2 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     290:	2a 81       	ldd	r18, Y+2	; 0x02
     292:	3b 81       	ldd	r19, Y+3	; 0x03
     294:	82 0f       	add	r24, r18
     296:	93 1f       	adc	r25, r19
     298:	13 96       	adiw	r26, 0x03	; 3
     29a:	9c 93       	st	X, r25
     29c:	8e 93       	st	-X, r24
     29e:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     2a0:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     2a2:	8a 81       	ldd	r24, Y+2	; 0x02
     2a4:	9b 81       	ldd	r25, Y+3	; 0x03
     2a6:	9e 01       	movw	r18, r28
     2a8:	28 0f       	add	r18, r24
     2aa:	39 1f       	adc	r19, r25
     2ac:	e2 17       	cp	r30, r18
     2ae:	f3 07       	cpc	r31, r19
     2b0:	c1 f4       	brne	.+48     	; 0x2e2 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     2b2:	20 91 10 08 	lds	r18, 0x0810	; 0x800810 <pxEnd>
     2b6:	30 91 11 08 	lds	r19, 0x0811	; 0x800811 <pxEnd+0x1>
     2ba:	e2 17       	cp	r30, r18
     2bc:	f3 07       	cpc	r31, r19
     2be:	71 f0       	breq	.+28     	; 0x2dc <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     2c0:	22 81       	ldd	r18, Z+2	; 0x02
     2c2:	33 81       	ldd	r19, Z+3	; 0x03
     2c4:	82 0f       	add	r24, r18
     2c6:	93 1f       	adc	r25, r19
     2c8:	9b 83       	std	Y+3, r25	; 0x03
     2ca:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     2cc:	ed 91       	ld	r30, X+
     2ce:	fc 91       	ld	r31, X
     2d0:	11 97       	sbiw	r26, 0x01	; 1
     2d2:	80 81       	ld	r24, Z
     2d4:	91 81       	ldd	r25, Z+1	; 0x01
     2d6:	99 83       	std	Y+1, r25	; 0x01
     2d8:	88 83       	st	Y, r24
     2da:	05 c0       	rjmp	.+10     	; 0x2e6 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     2dc:	39 83       	std	Y+1, r19	; 0x01
     2de:	28 83       	st	Y, r18
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     2e2:	f9 83       	std	Y+1, r31	; 0x01
     2e4:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     2e6:	ca 17       	cp	r28, r26
     2e8:	db 07       	cpc	r29, r27
     2ea:	11 f0       	breq	.+4      	; 0x2f0 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     2ec:	cd 93       	st	X+, r28
     2ee:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     2f6:	ef 92       	push	r14
     2f8:	ff 92       	push	r15
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     304:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     308:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <pxEnd>
     30c:	90 91 11 08 	lds	r25, 0x0811	; 0x800811 <pxEnd+0x1>
     310:	89 2b       	or	r24, r25
     312:	09 f4       	brne	.+2      	; 0x316 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     314:	7d df       	rcall	.-262    	; 0x210 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     316:	80 91 06 08 	lds	r24, 0x0806	; 0x800806 <__data_end>
     31a:	90 91 07 08 	lds	r25, 0x0807	; 0x800807 <__data_end+0x1>
     31e:	80 23       	and	r24, r16
     320:	91 23       	and	r25, r17
     322:	89 2b       	or	r24, r25
     324:	09 f0       	breq	.+2      	; 0x328 <pvPortMalloc+0x32>
     326:	76 c0       	rjmp	.+236    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     328:	01 15       	cp	r16, r1
     32a:	11 05       	cpc	r17, r1
     32c:	49 f0       	breq	.+18     	; 0x340 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     32e:	c8 01       	movw	r24, r16
     330:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     332:	08 17       	cp	r16, r24
     334:	19 07       	cpc	r17, r25
     336:	18 f0       	brcs	.+6      	; 0x33e <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     338:	00 e0       	ldi	r16, 0x00	; 0
     33a:	10 e0       	ldi	r17, 0x00	; 0
     33c:	01 c0       	rjmp	.+2      	; 0x340 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     33e:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     340:	01 15       	cp	r16, r1
     342:	11 05       	cpc	r17, r1
     344:	09 f4       	brne	.+2      	; 0x348 <pvPortMalloc+0x52>
     346:	69 c0       	rjmp	.+210    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     348:	80 91 0e 08 	lds	r24, 0x080E	; 0x80080e <xFreeBytesRemaining>
     34c:	90 91 0f 08 	lds	r25, 0x080F	; 0x80080f <xFreeBytesRemaining+0x1>
     350:	80 17       	cp	r24, r16
     352:	91 07       	cpc	r25, r17
     354:	08 f4       	brcc	.+2      	; 0x358 <pvPortMalloc+0x62>
     356:	64 c0       	rjmp	.+200    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     358:	c0 91 12 08 	lds	r28, 0x0812	; 0x800812 <xStart>
     35c:	d0 91 13 08 	lds	r29, 0x0813	; 0x800813 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     360:	e2 e1       	ldi	r30, 0x12	; 18
     362:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     364:	02 c0       	rjmp	.+4      	; 0x36a <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     366:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     368:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     36a:	8a 81       	ldd	r24, Y+2	; 0x02
     36c:	9b 81       	ldd	r25, Y+3	; 0x03
     36e:	80 17       	cp	r24, r16
     370:	91 07       	cpc	r25, r17
     372:	20 f4       	brcc	.+8      	; 0x37c <pvPortMalloc+0x86>
     374:	88 81       	ld	r24, Y
     376:	99 81       	ldd	r25, Y+1	; 0x01
     378:	00 97       	sbiw	r24, 0x00	; 0
     37a:	a9 f7       	brne	.-22     	; 0x366 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     37c:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <pxEnd>
     380:	90 91 11 08 	lds	r25, 0x0811	; 0x800811 <pxEnd+0x1>
     384:	c8 17       	cp	r28, r24
     386:	d9 07       	cpc	r29, r25
     388:	09 f4       	brne	.+2      	; 0x38c <pvPortMalloc+0x96>
     38a:	4d c0       	rjmp	.+154    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     38c:	e0 80       	ld	r14, Z
     38e:	f1 80       	ldd	r15, Z+1	; 0x01
     390:	84 e0       	ldi	r24, 0x04	; 4
     392:	e8 0e       	add	r14, r24
     394:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     396:	88 81       	ld	r24, Y
     398:	99 81       	ldd	r25, Y+1	; 0x01
     39a:	91 83       	std	Z+1, r25	; 0x01
     39c:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     39e:	2a 81       	ldd	r18, Y+2	; 0x02
     3a0:	3b 81       	ldd	r19, Y+3	; 0x03
     3a2:	20 1b       	sub	r18, r16
     3a4:	31 0b       	sbc	r19, r17
     3a6:	29 30       	cpi	r18, 0x09	; 9
     3a8:	31 05       	cpc	r19, r1
     3aa:	48 f0       	brcs	.+18     	; 0x3be <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     3ac:	ce 01       	movw	r24, r28
     3ae:	80 0f       	add	r24, r16
     3b0:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     3b2:	fc 01       	movw	r30, r24
     3b4:	33 83       	std	Z+3, r19	; 0x03
     3b6:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     3b8:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     3ba:	0a 83       	std	Y+2, r16	; 0x02
     3bc:	52 df       	rcall	.-348    	; 0x262 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     3be:	2a 81       	ldd	r18, Y+2	; 0x02
     3c0:	3b 81       	ldd	r19, Y+3	; 0x03
     3c2:	80 91 0e 08 	lds	r24, 0x080E	; 0x80080e <xFreeBytesRemaining>
     3c6:	90 91 0f 08 	lds	r25, 0x080F	; 0x80080f <xFreeBytesRemaining+0x1>
     3ca:	82 1b       	sub	r24, r18
     3cc:	93 0b       	sbc	r25, r19
     3ce:	90 93 0f 08 	sts	0x080F, r25	; 0x80080f <xFreeBytesRemaining+0x1>
     3d2:	80 93 0e 08 	sts	0x080E, r24	; 0x80080e <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     3d6:	40 91 0c 08 	lds	r20, 0x080C	; 0x80080c <xMinimumEverFreeBytesRemaining>
     3da:	50 91 0d 08 	lds	r21, 0x080D	; 0x80080d <xMinimumEverFreeBytesRemaining+0x1>
     3de:	84 17       	cp	r24, r20
     3e0:	95 07       	cpc	r25, r21
     3e2:	20 f4       	brcc	.+8      	; 0x3ec <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     3e4:	90 93 0d 08 	sts	0x080D, r25	; 0x80080d <xMinimumEverFreeBytesRemaining+0x1>
     3e8:	80 93 0c 08 	sts	0x080C, r24	; 0x80080c <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     3ec:	80 91 06 08 	lds	r24, 0x0806	; 0x800806 <__data_end>
     3f0:	90 91 07 08 	lds	r25, 0x0807	; 0x800807 <__data_end+0x1>
     3f4:	28 2b       	or	r18, r24
     3f6:	39 2b       	or	r19, r25
     3f8:	3b 83       	std	Y+3, r19	; 0x03
     3fa:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     3fc:	19 82       	std	Y+1, r1	; 0x01
     3fe:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     400:	80 91 0a 08 	lds	r24, 0x080A	; 0x80080a <xNumberOfSuccessfulAllocations>
     404:	90 91 0b 08 	lds	r25, 0x080B	; 0x80080b <xNumberOfSuccessfulAllocations+0x1>
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	90 93 0b 08 	sts	0x080B, r25	; 0x80080b <xNumberOfSuccessfulAllocations+0x1>
     40e:	80 93 0a 08 	sts	0x080A, r24	; 0x80080a <xNumberOfSuccessfulAllocations>
     412:	0b c0       	rjmp	.+22     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     414:	e1 2c       	mov	r14, r1
     416:	f1 2c       	mov	r15, r1
     418:	08 c0       	rjmp	.+16     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     41a:	e1 2c       	mov	r14, r1
     41c:	f1 2c       	mov	r15, r1
     41e:	05 c0       	rjmp	.+10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     420:	e1 2c       	mov	r14, r1
     422:	f1 2c       	mov	r15, r1
     424:	02 c0       	rjmp	.+4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     426:	e1 2c       	mov	r14, r1
     428:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     42a:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     42e:	e1 14       	cp	r14, r1
     430:	f1 04       	cpc	r15, r1
     432:	11 f4       	brne	.+4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     434:	0e 94 28 19 	call	0x3250	; 0x3250 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     438:	c7 01       	movw	r24, r14
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	ff 90       	pop	r15
     444:	ef 90       	pop	r14
     446:	08 95       	ret

00000448 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     450:	00 97       	sbiw	r24, 0x00	; 0
     452:	91 f1       	breq	.+100    	; 0x4b8 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     454:	ec 01       	movw	r28, r24
     456:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     458:	4a 81       	ldd	r20, Y+2	; 0x02
     45a:	5b 81       	ldd	r21, Y+3	; 0x03
     45c:	20 91 06 08 	lds	r18, 0x0806	; 0x800806 <__data_end>
     460:	30 91 07 08 	lds	r19, 0x0807	; 0x800807 <__data_end+0x1>
     464:	ba 01       	movw	r22, r20
     466:	62 23       	and	r22, r18
     468:	73 23       	and	r23, r19
     46a:	67 2b       	or	r22, r23
     46c:	29 f1       	breq	.+74     	; 0x4b8 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     46e:	68 81       	ld	r22, Y
     470:	79 81       	ldd	r23, Y+1	; 0x01
     472:	67 2b       	or	r22, r23
     474:	09 f5       	brne	.+66     	; 0x4b8 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     476:	20 95       	com	r18
     478:	30 95       	com	r19
     47a:	24 23       	and	r18, r20
     47c:	35 23       	and	r19, r21
     47e:	3b 83       	std	Y+3, r19	; 0x03
     480:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     482:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     486:	8a 81       	ldd	r24, Y+2	; 0x02
     488:	9b 81       	ldd	r25, Y+3	; 0x03
     48a:	20 91 0e 08 	lds	r18, 0x080E	; 0x80080e <xFreeBytesRemaining>
     48e:	30 91 0f 08 	lds	r19, 0x080F	; 0x80080f <xFreeBytesRemaining+0x1>
     492:	82 0f       	add	r24, r18
     494:	93 1f       	adc	r25, r19
     496:	90 93 0f 08 	sts	0x080F, r25	; 0x80080f <xFreeBytesRemaining+0x1>
     49a:	80 93 0e 08 	sts	0x080E, r24	; 0x80080e <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     49e:	ce 01       	movw	r24, r28
     4a0:	e0 de       	rcall	.-576    	; 0x262 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     4a2:	80 91 08 08 	lds	r24, 0x0808	; 0x800808 <xNumberOfSuccessfulFrees>
     4a6:	90 91 09 08 	lds	r25, 0x0809	; 0x800809 <xNumberOfSuccessfulFrees+0x1>
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <xNumberOfSuccessfulFrees+0x1>
     4b0:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     4b4:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	08 95       	ret

000004c2 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     4c2:	fc 01       	movw	r30, r24
     4c4:	03 96       	adiw	r24, 0x03	; 3
     4c6:	92 83       	std	Z+2, r25	; 0x02
     4c8:	81 83       	std	Z+1, r24	; 0x01
     4ca:	4f ef       	ldi	r20, 0xFF	; 255
     4cc:	5f ef       	ldi	r21, 0xFF	; 255
     4ce:	ba 01       	movw	r22, r20
     4d0:	43 83       	std	Z+3, r20	; 0x03
     4d2:	54 83       	std	Z+4, r21	; 0x04
     4d4:	65 83       	std	Z+5, r22	; 0x05
     4d6:	76 83       	std	Z+6, r23	; 0x06
     4d8:	90 87       	std	Z+8, r25	; 0x08
     4da:	87 83       	std	Z+7, r24	; 0x07
     4dc:	92 87       	std	Z+10, r25	; 0x0a
     4de:	81 87       	std	Z+9, r24	; 0x09
     4e0:	10 82       	st	Z, r1
     4e2:	08 95       	ret

000004e4 <vListInitialiseItem>:
     4e4:	fc 01       	movw	r30, r24
     4e6:	13 86       	std	Z+11, r1	; 0x0b
     4e8:	12 86       	std	Z+10, r1	; 0x0a
     4ea:	08 95       	ret

000004ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     4f6:	08 81       	ld	r16, Y
     4f8:	19 81       	ldd	r17, Y+1	; 0x01
     4fa:	2a 81       	ldd	r18, Y+2	; 0x02
     4fc:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     4fe:	0f 3f       	cpi	r16, 0xFF	; 255
     500:	4f ef       	ldi	r20, 0xFF	; 255
     502:	14 07       	cpc	r17, r20
     504:	24 07       	cpc	r18, r20
     506:	34 07       	cpc	r19, r20
     508:	21 f4       	brne	.+8      	; 0x512 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     50a:	fc 01       	movw	r30, r24
     50c:	a1 85       	ldd	r26, Z+9	; 0x09
     50e:	b2 85       	ldd	r27, Z+10	; 0x0a
     510:	11 c0       	rjmp	.+34     	; 0x534 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     512:	dc 01       	movw	r26, r24
     514:	13 96       	adiw	r26, 0x03	; 3
     516:	01 c0       	rjmp	.+2      	; 0x51a <vListInsert+0x2e>
     518:	df 01       	movw	r26, r30
     51a:	14 96       	adiw	r26, 0x04	; 4
     51c:	ed 91       	ld	r30, X+
     51e:	fc 91       	ld	r31, X
     520:	15 97       	sbiw	r26, 0x05	; 5
     522:	40 81       	ld	r20, Z
     524:	51 81       	ldd	r21, Z+1	; 0x01
     526:	62 81       	ldd	r22, Z+2	; 0x02
     528:	73 81       	ldd	r23, Z+3	; 0x03
     52a:	04 17       	cp	r16, r20
     52c:	15 07       	cpc	r17, r21
     52e:	26 07       	cpc	r18, r22
     530:	37 07       	cpc	r19, r23
     532:	90 f7       	brcc	.-28     	; 0x518 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     534:	14 96       	adiw	r26, 0x04	; 4
     536:	ed 91       	ld	r30, X+
     538:	fc 91       	ld	r31, X
     53a:	15 97       	sbiw	r26, 0x05	; 5
     53c:	fd 83       	std	Y+5, r31	; 0x05
     53e:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     540:	d7 83       	std	Z+7, r29	; 0x07
     542:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     544:	bf 83       	std	Y+7, r27	; 0x07
     546:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     548:	15 96       	adiw	r26, 0x05	; 5
     54a:	dc 93       	st	X, r29
     54c:	ce 93       	st	-X, r28
     54e:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     550:	9b 87       	std	Y+11, r25	; 0x0b
     552:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     554:	fc 01       	movw	r30, r24
     556:	20 81       	ld	r18, Z
     558:	2f 5f       	subi	r18, 0xFF	; 255
     55a:	20 83       	st	Z, r18
}
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	1f 91       	pop	r17
     562:	0f 91       	pop	r16
     564:	08 95       	ret

00000566 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     56c:	a2 85       	ldd	r26, Z+10	; 0x0a
     56e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     570:	c4 81       	ldd	r28, Z+4	; 0x04
     572:	d5 81       	ldd	r29, Z+5	; 0x05
     574:	86 81       	ldd	r24, Z+6	; 0x06
     576:	97 81       	ldd	r25, Z+7	; 0x07
     578:	9f 83       	std	Y+7, r25	; 0x07
     57a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     57c:	c6 81       	ldd	r28, Z+6	; 0x06
     57e:	d7 81       	ldd	r29, Z+7	; 0x07
     580:	84 81       	ldd	r24, Z+4	; 0x04
     582:	95 81       	ldd	r25, Z+5	; 0x05
     584:	9d 83       	std	Y+5, r25	; 0x05
     586:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     588:	11 96       	adiw	r26, 0x01	; 1
     58a:	8d 91       	ld	r24, X+
     58c:	9c 91       	ld	r25, X
     58e:	12 97       	sbiw	r26, 0x02	; 2
     590:	e8 17       	cp	r30, r24
     592:	f9 07       	cpc	r31, r25
     594:	31 f4       	brne	.+12     	; 0x5a2 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     596:	86 81       	ldd	r24, Z+6	; 0x06
     598:	97 81       	ldd	r25, Z+7	; 0x07
     59a:	12 96       	adiw	r26, 0x02	; 2
     59c:	9c 93       	st	X, r25
     59e:	8e 93       	st	-X, r24
     5a0:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     5a2:	13 86       	std	Z+11, r1	; 0x0b
     5a4:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     5a6:	8c 91       	ld	r24, X
     5a8:	81 50       	subi	r24, 0x01	; 1
     5aa:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     5ac:	8c 91       	ld	r24, X
}
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	08 95       	ret

000005b4 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     5b4:	a8 95       	wdr
     5b6:	90 ec       	ldi	r25, 0xC0	; 192
     5b8:	88 e1       	ldi	r24, 0x18	; 24
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	a8 95       	wdr
     5c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     5ca:	08 95       	ret

000005cc <pxPortInitialiseStack>:
     5cc:	fc 01       	movw	r30, r24
     5ce:	60 83       	st	Z, r22
     5d0:	31 97       	sbiw	r30, 0x01	; 1
     5d2:	70 83       	st	Z, r23
     5d4:	31 97       	sbiw	r30, 0x01	; 1
     5d6:	10 82       	st	Z, r1
     5d8:	31 97       	sbiw	r30, 0x01	; 1
     5da:	10 82       	st	Z, r1
     5dc:	31 97       	sbiw	r30, 0x01	; 1
     5de:	20 e8       	ldi	r18, 0x80	; 128
     5e0:	20 83       	st	Z, r18
     5e2:	31 97       	sbiw	r30, 0x01	; 1
     5e4:	10 82       	st	Z, r1
     5e6:	31 97       	sbiw	r30, 0x01	; 1
     5e8:	10 82       	st	Z, r1
     5ea:	31 97       	sbiw	r30, 0x01	; 1
     5ec:	10 82       	st	Z, r1
     5ee:	77 97       	sbiw	r30, 0x17	; 23
     5f0:	40 83       	st	Z, r20
     5f2:	31 97       	sbiw	r30, 0x01	; 1
     5f4:	50 83       	st	Z, r21
     5f6:	86 97       	sbiw	r24, 0x26	; 38
     5f8:	08 95       	ret

000005fa <xPortStartScheduler>:
     5fa:	dc df       	rcall	.-72     	; 0x5b4 <prvSetupTimerInterrupt>
     5fc:	a0 91 81 16 	lds	r26, 0x1681	; 0x801681 <pxCurrentTCB>
     600:	b0 91 82 16 	lds	r27, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
     604:	cd 91       	ld	r28, X+
     606:	cd bf       	out	0x3d, r28	; 61
     608:	dd 91       	ld	r29, X+
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	ff 91       	pop	r31
     60e:	ef 91       	pop	r30
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	bf 91       	pop	r27
     616:	af 91       	pop	r26
     618:	9f 91       	pop	r25
     61a:	8f 91       	pop	r24
     61c:	7f 91       	pop	r23
     61e:	6f 91       	pop	r22
     620:	5f 91       	pop	r21
     622:	4f 91       	pop	r20
     624:	3f 91       	pop	r19
     626:	2f 91       	pop	r18
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	df 90       	pop	r13
     632:	cf 90       	pop	r12
     634:	bf 90       	pop	r11
     636:	af 90       	pop	r10
     638:	9f 90       	pop	r9
     63a:	8f 90       	pop	r8
     63c:	7f 90       	pop	r7
     63e:	6f 90       	pop	r6
     640:	5f 90       	pop	r5
     642:	4f 90       	pop	r4
     644:	3f 90       	pop	r3
     646:	2f 90       	pop	r2
     648:	1f 90       	pop	r1
     64a:	0f 90       	pop	r0
     64c:	0c be       	out	0x3c, r0	; 60
     64e:	0f 90       	pop	r0
     650:	0b be       	out	0x3b, r0	; 59
     652:	0f 90       	pop	r0
     654:	0f be       	out	0x3f, r0	; 63
     656:	0f 90       	pop	r0
     658:	08 95       	ret
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	08 95       	ret

0000065e <vPortYield>:
     65e:	0f 92       	push	r0
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	f8 94       	cli
     664:	0f 92       	push	r0
     666:	0b b6       	in	r0, 0x3b	; 59
     668:	0f 92       	push	r0
     66a:	0c b6       	in	r0, 0x3c	; 60
     66c:	0f 92       	push	r0
     66e:	1f 92       	push	r1
     670:	11 24       	eor	r1, r1
     672:	2f 92       	push	r2
     674:	3f 92       	push	r3
     676:	4f 92       	push	r4
     678:	5f 92       	push	r5
     67a:	6f 92       	push	r6
     67c:	7f 92       	push	r7
     67e:	8f 92       	push	r8
     680:	9f 92       	push	r9
     682:	af 92       	push	r10
     684:	bf 92       	push	r11
     686:	cf 92       	push	r12
     688:	df 92       	push	r13
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	2f 93       	push	r18
     694:	3f 93       	push	r19
     696:	4f 93       	push	r20
     698:	5f 93       	push	r21
     69a:	6f 93       	push	r22
     69c:	7f 93       	push	r23
     69e:	8f 93       	push	r24
     6a0:	9f 93       	push	r25
     6a2:	af 93       	push	r26
     6a4:	bf 93       	push	r27
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	ef 93       	push	r30
     6ac:	ff 93       	push	r31
     6ae:	a0 91 81 16 	lds	r26, 0x1681	; 0x801681 <pxCurrentTCB>
     6b2:	b0 91 82 16 	lds	r27, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
     6b6:	0d b6       	in	r0, 0x3d	; 61
     6b8:	0d 92       	st	X+, r0
     6ba:	0e b6       	in	r0, 0x3e	; 62
     6bc:	0d 92       	st	X+, r0
     6be:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <vTaskSwitchContext>
     6c2:	a0 91 81 16 	lds	r26, 0x1681	; 0x801681 <pxCurrentTCB>
     6c6:	b0 91 82 16 	lds	r27, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
     6ca:	cd 91       	ld	r28, X+
     6cc:	cd bf       	out	0x3d, r28	; 61
     6ce:	dd 91       	ld	r29, X+
     6d0:	de bf       	out	0x3e, r29	; 62
     6d2:	ff 91       	pop	r31
     6d4:	ef 91       	pop	r30
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	bf 91       	pop	r27
     6dc:	af 91       	pop	r26
     6de:	9f 91       	pop	r25
     6e0:	8f 91       	pop	r24
     6e2:	7f 91       	pop	r23
     6e4:	6f 91       	pop	r22
     6e6:	5f 91       	pop	r21
     6e8:	4f 91       	pop	r20
     6ea:	3f 91       	pop	r19
     6ec:	2f 91       	pop	r18
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	ff 90       	pop	r15
     6f4:	ef 90       	pop	r14
     6f6:	df 90       	pop	r13
     6f8:	cf 90       	pop	r12
     6fa:	bf 90       	pop	r11
     6fc:	af 90       	pop	r10
     6fe:	9f 90       	pop	r9
     700:	8f 90       	pop	r8
     702:	7f 90       	pop	r7
     704:	6f 90       	pop	r6
     706:	5f 90       	pop	r5
     708:	4f 90       	pop	r4
     70a:	3f 90       	pop	r3
     70c:	2f 90       	pop	r2
     70e:	1f 90       	pop	r1
     710:	0f 90       	pop	r0
     712:	0c be       	out	0x3c, r0	; 60
     714:	0f 90       	pop	r0
     716:	0b be       	out	0x3b, r0	; 59
     718:	0f 90       	pop	r0
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	0f 90       	pop	r0
     71e:	08 95       	ret

00000720 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     720:	0f 92       	push	r0
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	0f 92       	push	r0
     728:	0b b6       	in	r0, 0x3b	; 59
     72a:	0f 92       	push	r0
     72c:	0c b6       	in	r0, 0x3c	; 60
     72e:	0f 92       	push	r0
     730:	1f 92       	push	r1
     732:	11 24       	eor	r1, r1
     734:	2f 92       	push	r2
     736:	3f 92       	push	r3
     738:	4f 92       	push	r4
     73a:	5f 92       	push	r5
     73c:	6f 92       	push	r6
     73e:	7f 92       	push	r7
     740:	8f 92       	push	r8
     742:	9f 92       	push	r9
     744:	af 92       	push	r10
     746:	bf 92       	push	r11
     748:	cf 92       	push	r12
     74a:	df 92       	push	r13
     74c:	ef 92       	push	r14
     74e:	ff 92       	push	r15
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	2f 93       	push	r18
     756:	3f 93       	push	r19
     758:	4f 93       	push	r20
     75a:	5f 93       	push	r21
     75c:	6f 93       	push	r22
     75e:	7f 93       	push	r23
     760:	8f 93       	push	r24
     762:	9f 93       	push	r25
     764:	af 93       	push	r26
     766:	bf 93       	push	r27
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	ef 93       	push	r30
     76e:	ff 93       	push	r31
     770:	a0 91 81 16 	lds	r26, 0x1681	; 0x801681 <pxCurrentTCB>
     774:	b0 91 82 16 	lds	r27, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
     778:	0d b6       	in	r0, 0x3d	; 61
     77a:	0d 92       	st	X+, r0
     77c:	0e b6       	in	r0, 0x3e	; 62
     77e:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     780:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     782:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <xTaskIncrementTick>
     786:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     788:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     78c:	a0 91 81 16 	lds	r26, 0x1681	; 0x801681 <pxCurrentTCB>
     790:	b0 91 82 16 	lds	r27, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
     794:	cd 91       	ld	r28, X+
     796:	cd bf       	out	0x3d, r28	; 61
     798:	dd 91       	ld	r29, X+
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	ff 91       	pop	r31
     79e:	ef 91       	pop	r30
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	bf 91       	pop	r27
     7a6:	af 91       	pop	r26
     7a8:	9f 91       	pop	r25
     7aa:	8f 91       	pop	r24
     7ac:	7f 91       	pop	r23
     7ae:	6f 91       	pop	r22
     7b0:	5f 91       	pop	r21
     7b2:	4f 91       	pop	r20
     7b4:	3f 91       	pop	r19
     7b6:	2f 91       	pop	r18
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	ff 90       	pop	r15
     7be:	ef 90       	pop	r14
     7c0:	df 90       	pop	r13
     7c2:	cf 90       	pop	r12
     7c4:	bf 90       	pop	r11
     7c6:	af 90       	pop	r10
     7c8:	9f 90       	pop	r9
     7ca:	8f 90       	pop	r8
     7cc:	7f 90       	pop	r7
     7ce:	6f 90       	pop	r6
     7d0:	5f 90       	pop	r5
     7d2:	4f 90       	pop	r4
     7d4:	3f 90       	pop	r3
     7d6:	2f 90       	pop	r2
     7d8:	1f 90       	pop	r1
     7da:	0f 90       	pop	r0
     7dc:	0c be       	out	0x3c, r0	; 60
     7de:	0f 90       	pop	r0
     7e0:	0b be       	out	0x3b, r0	; 59
     7e2:	0f 90       	pop	r0
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     7e8:	08 95       	ret

000007ea <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     7ea:	9a df       	rcall	.-204    	; 0x720 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     7ec:	18 95       	reti

000007ee <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     7ee:	dc 01       	movw	r26, r24
     7f0:	53 96       	adiw	r26, 0x13	; 19
     7f2:	2c 91       	ld	r18, X
     7f4:	53 97       	sbiw	r26, 0x13	; 19
     7f6:	22 23       	and	r18, r18
     7f8:	41 f0       	breq	.+16     	; 0x80a <prvGetDisinheritPriorityAfterTimeout+0x1c>
     7fa:	5a 96       	adiw	r26, 0x1a	; 26
     7fc:	ed 91       	ld	r30, X+
     7fe:	fc 91       	ld	r31, X
     800:	5b 97       	sbiw	r26, 0x1b	; 27
     802:	90 81       	ld	r25, Z
     804:	8a e0       	ldi	r24, 0x0A	; 10
     806:	89 1b       	sub	r24, r25
     808:	08 95       	ret
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	08 95       	ret

0000080e <prvIsQueueEmpty>:
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	f8 94       	cli
     812:	0f 92       	push	r0
     814:	fc 01       	movw	r30, r24
     816:	86 8d       	ldd	r24, Z+30	; 0x1e
     818:	81 11       	cpse	r24, r1
     81a:	02 c0       	rjmp	.+4      	; 0x820 <prvIsQueueEmpty+0x12>
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	01 c0       	rjmp	.+2      	; 0x822 <prvIsQueueEmpty+0x14>
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	0f 90       	pop	r0
     824:	0f be       	out	0x3f, r0	; 63
     826:	08 95       	ret

00000828 <prvIsQueueFull>:
     828:	0f b6       	in	r0, 0x3f	; 63
     82a:	f8 94       	cli
     82c:	0f 92       	push	r0
     82e:	fc 01       	movw	r30, r24
     830:	26 8d       	ldd	r18, Z+30	; 0x1e
     832:	87 8d       	ldd	r24, Z+31	; 0x1f
     834:	28 13       	cpse	r18, r24
     836:	02 c0       	rjmp	.+4      	; 0x83c <prvIsQueueFull+0x14>
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	01 c0       	rjmp	.+2      	; 0x83e <prvIsQueueFull+0x16>
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	0f 90       	pop	r0
     840:	0f be       	out	0x3f, r0	; 63
     842:	08 95       	ret

00000844 <prvCopyDataToQueue>:
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	ec 01       	movw	r28, r24
     84e:	04 2f       	mov	r16, r20
     850:	1e 8d       	ldd	r17, Y+30	; 0x1e
     852:	48 a1       	ldd	r20, Y+32	; 0x20
     854:	41 11       	cpse	r20, r1
     856:	0c c0       	rjmp	.+24     	; 0x870 <prvCopyDataToQueue+0x2c>
     858:	88 81       	ld	r24, Y
     85a:	99 81       	ldd	r25, Y+1	; 0x01
     85c:	89 2b       	or	r24, r25
     85e:	09 f0       	breq	.+2      	; 0x862 <prvCopyDataToQueue+0x1e>
     860:	42 c0       	rjmp	.+132    	; 0x8e6 <prvCopyDataToQueue+0xa2>
     862:	8c 81       	ldd	r24, Y+4	; 0x04
     864:	9d 81       	ldd	r25, Y+5	; 0x05
     866:	0e 94 6e 12 	call	0x24dc	; 0x24dc <xTaskPriorityDisinherit>
     86a:	1d 82       	std	Y+5, r1	; 0x05
     86c:	1c 82       	std	Y+4, r1	; 0x04
     86e:	42 c0       	rjmp	.+132    	; 0x8f4 <prvCopyDataToQueue+0xb0>
     870:	01 11       	cpse	r16, r1
     872:	17 c0       	rjmp	.+46     	; 0x8a2 <prvCopyDataToQueue+0x5e>
     874:	50 e0       	ldi	r21, 0x00	; 0
     876:	8a 81       	ldd	r24, Y+2	; 0x02
     878:	9b 81       	ldd	r25, Y+3	; 0x03
     87a:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <memcpy>
     87e:	28 a1       	ldd	r18, Y+32	; 0x20
     880:	8a 81       	ldd	r24, Y+2	; 0x02
     882:	9b 81       	ldd	r25, Y+3	; 0x03
     884:	82 0f       	add	r24, r18
     886:	91 1d       	adc	r25, r1
     888:	9b 83       	std	Y+3, r25	; 0x03
     88a:	8a 83       	std	Y+2, r24	; 0x02
     88c:	2c 81       	ldd	r18, Y+4	; 0x04
     88e:	3d 81       	ldd	r19, Y+5	; 0x05
     890:	82 17       	cp	r24, r18
     892:	93 07       	cpc	r25, r19
     894:	50 f1       	brcs	.+84     	; 0x8ea <prvCopyDataToQueue+0xa6>
     896:	88 81       	ld	r24, Y
     898:	99 81       	ldd	r25, Y+1	; 0x01
     89a:	9b 83       	std	Y+3, r25	; 0x03
     89c:	8a 83       	std	Y+2, r24	; 0x02
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	29 c0       	rjmp	.+82     	; 0x8f4 <prvCopyDataToQueue+0xb0>
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	8e 81       	ldd	r24, Y+6	; 0x06
     8a6:	9f 81       	ldd	r25, Y+7	; 0x07
     8a8:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <memcpy>
     8ac:	88 a1       	ldd	r24, Y+32	; 0x20
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	91 95       	neg	r25
     8b2:	81 95       	neg	r24
     8b4:	91 09       	sbc	r25, r1
     8b6:	2e 81       	ldd	r18, Y+6	; 0x06
     8b8:	3f 81       	ldd	r19, Y+7	; 0x07
     8ba:	28 0f       	add	r18, r24
     8bc:	39 1f       	adc	r19, r25
     8be:	3f 83       	std	Y+7, r19	; 0x07
     8c0:	2e 83       	std	Y+6, r18	; 0x06
     8c2:	48 81       	ld	r20, Y
     8c4:	59 81       	ldd	r21, Y+1	; 0x01
     8c6:	24 17       	cp	r18, r20
     8c8:	35 07       	cpc	r19, r21
     8ca:	30 f4       	brcc	.+12     	; 0x8d8 <prvCopyDataToQueue+0x94>
     8cc:	2c 81       	ldd	r18, Y+4	; 0x04
     8ce:	3d 81       	ldd	r19, Y+5	; 0x05
     8d0:	82 0f       	add	r24, r18
     8d2:	93 1f       	adc	r25, r19
     8d4:	9f 83       	std	Y+7, r25	; 0x07
     8d6:	8e 83       	std	Y+6, r24	; 0x06
     8d8:	02 30       	cpi	r16, 0x02	; 2
     8da:	49 f4       	brne	.+18     	; 0x8ee <prvCopyDataToQueue+0xaa>
     8dc:	11 23       	and	r17, r17
     8de:	49 f0       	breq	.+18     	; 0x8f2 <prvCopyDataToQueue+0xae>
     8e0:	11 50       	subi	r17, 0x01	; 1
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	07 c0       	rjmp	.+14     	; 0x8f4 <prvCopyDataToQueue+0xb0>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	05 c0       	rjmp	.+10     	; 0x8f4 <prvCopyDataToQueue+0xb0>
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	03 c0       	rjmp	.+6      	; 0x8f4 <prvCopyDataToQueue+0xb0>
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	01 c0       	rjmp	.+2      	; 0x8f4 <prvCopyDataToQueue+0xb0>
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	1f 5f       	subi	r17, 0xFF	; 255
     8f6:	1e 8f       	std	Y+30, r17	; 0x1e
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	0f 91       	pop	r16
     900:	08 95       	ret

00000902 <prvCopyDataFromQueue>:
     902:	fc 01       	movw	r30, r24
     904:	40 a1       	ldd	r20, Z+32	; 0x20
     906:	44 23       	and	r20, r20
     908:	a9 f0       	breq	.+42     	; 0x934 <prvCopyDataFromQueue+0x32>
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	26 81       	ldd	r18, Z+6	; 0x06
     90e:	37 81       	ldd	r19, Z+7	; 0x07
     910:	24 0f       	add	r18, r20
     912:	35 1f       	adc	r19, r21
     914:	37 83       	std	Z+7, r19	; 0x07
     916:	26 83       	std	Z+6, r18	; 0x06
     918:	84 81       	ldd	r24, Z+4	; 0x04
     91a:	95 81       	ldd	r25, Z+5	; 0x05
     91c:	28 17       	cp	r18, r24
     91e:	39 07       	cpc	r19, r25
     920:	20 f0       	brcs	.+8      	; 0x92a <prvCopyDataFromQueue+0x28>
     922:	80 81       	ld	r24, Z
     924:	91 81       	ldd	r25, Z+1	; 0x01
     926:	97 83       	std	Z+7, r25	; 0x07
     928:	86 83       	std	Z+6, r24	; 0x06
     92a:	cb 01       	movw	r24, r22
     92c:	66 81       	ldd	r22, Z+6	; 0x06
     92e:	77 81       	ldd	r23, Z+7	; 0x07
     930:	0c 94 95 2e 	jmp	0x5d2a	; 0x5d2a <memcpy>
     934:	08 95       	ret

00000936 <prvUnlockQueue>:
     936:	1f 93       	push	r17
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	ec 01       	movw	r28, r24
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	0f 92       	push	r0
     944:	1a a1       	ldd	r17, Y+34	; 0x22
     946:	0b c0       	rjmp	.+22     	; 0x95e <prvUnlockQueue+0x28>
     948:	8b 89       	ldd	r24, Y+19	; 0x13
     94a:	88 23       	and	r24, r24
     94c:	51 f0       	breq	.+20     	; 0x962 <prvUnlockQueue+0x2c>
     94e:	ce 01       	movw	r24, r28
     950:	43 96       	adiw	r24, 0x13	; 19
     952:	0e 94 94 10 	call	0x2128	; 0x2128 <xTaskRemoveFromEventList>
     956:	81 11       	cpse	r24, r1
     958:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <vTaskMissedYield>
     95c:	11 50       	subi	r17, 0x01	; 1
     95e:	11 16       	cp	r1, r17
     960:	9c f3       	brlt	.-26     	; 0x948 <prvUnlockQueue+0x12>
     962:	8f ef       	ldi	r24, 0xFF	; 255
     964:	8a a3       	std	Y+34, r24	; 0x22
     966:	0f 90       	pop	r0
     968:	0f be       	out	0x3f, r0	; 63
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	f8 94       	cli
     96e:	0f 92       	push	r0
     970:	19 a1       	ldd	r17, Y+33	; 0x21
     972:	0b c0       	rjmp	.+22     	; 0x98a <prvUnlockQueue+0x54>
     974:	88 85       	ldd	r24, Y+8	; 0x08
     976:	88 23       	and	r24, r24
     978:	51 f0       	breq	.+20     	; 0x98e <prvUnlockQueue+0x58>
     97a:	ce 01       	movw	r24, r28
     97c:	08 96       	adiw	r24, 0x08	; 8
     97e:	0e 94 94 10 	call	0x2128	; 0x2128 <xTaskRemoveFromEventList>
     982:	81 11       	cpse	r24, r1
     984:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <vTaskMissedYield>
     988:	11 50       	subi	r17, 0x01	; 1
     98a:	11 16       	cp	r1, r17
     98c:	9c f3       	brlt	.-26     	; 0x974 <prvUnlockQueue+0x3e>
     98e:	8f ef       	ldi	r24, 0xFF	; 255
     990:	89 a3       	std	Y+33, r24	; 0x21
     992:	0f 90       	pop	r0
     994:	0f be       	out	0x3f, r0	; 63
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	1f 91       	pop	r17
     99c:	08 95       	ret

0000099e <xQueueGenericReset>:
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	ec 01       	movw	r28, r24
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	f8 94       	cli
     9a8:	0f 92       	push	r0
     9aa:	e8 81       	ld	r30, Y
     9ac:	f9 81       	ldd	r31, Y+1	; 0x01
     9ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
     9b0:	28 a1       	ldd	r18, Y+32	; 0x20
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	82 9f       	mul	r24, r18
     9b8:	a0 01       	movw	r20, r0
     9ba:	83 9f       	mul	r24, r19
     9bc:	50 0d       	add	r21, r0
     9be:	92 9f       	mul	r25, r18
     9c0:	50 0d       	add	r21, r0
     9c2:	11 24       	eor	r1, r1
     9c4:	4e 0f       	add	r20, r30
     9c6:	5f 1f       	adc	r21, r31
     9c8:	5d 83       	std	Y+5, r21	; 0x05
     9ca:	4c 83       	std	Y+4, r20	; 0x04
     9cc:	1e 8e       	std	Y+30, r1	; 0x1e
     9ce:	fb 83       	std	Y+3, r31	; 0x03
     9d0:	ea 83       	std	Y+2, r30	; 0x02
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	28 9f       	mul	r18, r24
     9d6:	a0 01       	movw	r20, r0
     9d8:	29 9f       	mul	r18, r25
     9da:	50 0d       	add	r21, r0
     9dc:	38 9f       	mul	r19, r24
     9de:	50 0d       	add	r21, r0
     9e0:	11 24       	eor	r1, r1
     9e2:	cf 01       	movw	r24, r30
     9e4:	84 0f       	add	r24, r20
     9e6:	95 1f       	adc	r25, r21
     9e8:	9f 83       	std	Y+7, r25	; 0x07
     9ea:	8e 83       	std	Y+6, r24	; 0x06
     9ec:	8f ef       	ldi	r24, 0xFF	; 255
     9ee:	89 a3       	std	Y+33, r24	; 0x21
     9f0:	8a a3       	std	Y+34, r24	; 0x22
     9f2:	61 11       	cpse	r22, r1
     9f4:	0b c0       	rjmp	.+22     	; 0xa0c <xQueueGenericReset+0x6e>
     9f6:	88 85       	ldd	r24, Y+8	; 0x08
     9f8:	88 23       	and	r24, r24
     9fa:	71 f0       	breq	.+28     	; 0xa18 <xQueueGenericReset+0x7a>
     9fc:	ce 01       	movw	r24, r28
     9fe:	08 96       	adiw	r24, 0x08	; 8
     a00:	0e 94 94 10 	call	0x2128	; 0x2128 <xTaskRemoveFromEventList>
     a04:	88 23       	and	r24, r24
     a06:	41 f0       	breq	.+16     	; 0xa18 <xQueueGenericReset+0x7a>
     a08:	2a de       	rcall	.-940    	; 0x65e <vPortYield>
     a0a:	06 c0       	rjmp	.+12     	; 0xa18 <xQueueGenericReset+0x7a>
     a0c:	ce 01       	movw	r24, r28
     a0e:	08 96       	adiw	r24, 0x08	; 8
     a10:	58 dd       	rcall	.-1360   	; 0x4c2 <vListInitialise>
     a12:	ce 01       	movw	r24, r28
     a14:	43 96       	adiw	r24, 0x13	; 19
     a16:	55 dd       	rcall	.-1366   	; 0x4c2 <vListInitialise>
     a18:	0f 90       	pop	r0
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	08 95       	ret

00000a24 <prvInitialiseNewQueue>:
     a24:	0f 93       	push	r16
     a26:	1f 93       	push	r17
     a28:	f8 01       	movw	r30, r16
     a2a:	61 11       	cpse	r22, r1
     a2c:	03 c0       	rjmp	.+6      	; 0xa34 <prvInitialiseNewQueue+0x10>
     a2e:	11 83       	std	Z+1, r17	; 0x01
     a30:	00 83       	st	Z, r16
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <prvInitialiseNewQueue+0x14>
     a34:	51 83       	std	Z+1, r21	; 0x01
     a36:	40 83       	st	Z, r20
     a38:	87 8f       	std	Z+31, r24	; 0x1f
     a3a:	60 a3       	std	Z+32, r22	; 0x20
     a3c:	61 e0       	ldi	r22, 0x01	; 1
     a3e:	cf 01       	movw	r24, r30
     a40:	ae df       	rcall	.-164    	; 0x99e <xQueueGenericReset>
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	08 95       	ret

00000a48 <xQueueGenericCreate>:
     a48:	df 92       	push	r13
     a4a:	ef 92       	push	r14
     a4c:	ff 92       	push	r15
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	f8 2e       	mov	r15, r24
     a58:	e6 2e       	mov	r14, r22
     a5a:	d4 2e       	mov	r13, r20
     a5c:	86 9f       	mul	r24, r22
     a5e:	c0 01       	movw	r24, r0
     a60:	11 24       	eor	r1, r1
     a62:	83 96       	adiw	r24, 0x23	; 35
     a64:	48 dc       	rcall	.-1904   	; 0x2f6 <pvPortMalloc>
     a66:	ec 01       	movw	r28, r24
     a68:	00 97       	sbiw	r24, 0x00	; 0
     a6a:	41 f0       	breq	.+16     	; 0xa7c <xQueueGenericCreate+0x34>
     a6c:	8c 01       	movw	r16, r24
     a6e:	2d 2d       	mov	r18, r13
     a70:	ac 01       	movw	r20, r24
     a72:	4d 5d       	subi	r20, 0xDD	; 221
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	6e 2d       	mov	r22, r14
     a78:	8f 2d       	mov	r24, r15
     a7a:	d4 df       	rcall	.-88     	; 0xa24 <prvInitialiseNewQueue>
     a7c:	ce 01       	movw	r24, r28
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	ff 90       	pop	r15
     a88:	ef 90       	pop	r14
     a8a:	df 90       	pop	r13
     a8c:	08 95       	ret

00000a8e <xQueueGenericSend>:
     a8e:	cf 92       	push	r12
     a90:	df 92       	push	r13
     a92:	ef 92       	push	r14
     a94:	ff 92       	push	r15
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
     aa2:	29 97       	sbiw	r28, 0x09	; 9
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	f8 94       	cli
     aa8:	de bf       	out	0x3e, r29	; 62
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	cd bf       	out	0x3d, r28	; 61
     aae:	7c 01       	movw	r14, r24
     ab0:	6b 01       	movw	r12, r22
     ab2:	2e 83       	std	Y+6, r18	; 0x06
     ab4:	3f 83       	std	Y+7, r19	; 0x07
     ab6:	48 87       	std	Y+8, r20	; 0x08
     ab8:	59 87       	std	Y+9, r21	; 0x09
     aba:	10 e0       	ldi	r17, 0x00	; 0
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	0f 92       	push	r0
     ac2:	f7 01       	movw	r30, r14
     ac4:	96 8d       	ldd	r25, Z+30	; 0x1e
     ac6:	87 8d       	ldd	r24, Z+31	; 0x1f
     ac8:	98 17       	cp	r25, r24
     aca:	10 f0       	brcs	.+4      	; 0xad0 <xQueueGenericSend+0x42>
     acc:	02 30       	cpi	r16, 0x02	; 2
     ace:	b1 f4       	brne	.+44     	; 0xafc <xQueueGenericSend+0x6e>
     ad0:	40 2f       	mov	r20, r16
     ad2:	b6 01       	movw	r22, r12
     ad4:	c7 01       	movw	r24, r14
     ad6:	b6 de       	rcall	.-660    	; 0x844 <prvCopyDataToQueue>
     ad8:	f7 01       	movw	r30, r14
     ada:	93 89       	ldd	r25, Z+19	; 0x13
     adc:	99 23       	and	r25, r25
     ade:	41 f0       	breq	.+16     	; 0xaf0 <xQueueGenericSend+0x62>
     ae0:	c7 01       	movw	r24, r14
     ae2:	43 96       	adiw	r24, 0x13	; 19
     ae4:	0e 94 94 10 	call	0x2128	; 0x2128 <xTaskRemoveFromEventList>
     ae8:	88 23       	and	r24, r24
     aea:	21 f0       	breq	.+8      	; 0xaf4 <xQueueGenericSend+0x66>
     aec:	b8 dd       	rcall	.-1168   	; 0x65e <vPortYield>
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <xQueueGenericSend+0x66>
     af0:	81 11       	cpse	r24, r1
     af2:	b5 dd       	rcall	.-1174   	; 0x65e <vPortYield>
     af4:	0f 90       	pop	r0
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	4c c0       	rjmp	.+152    	; 0xb94 <xQueueGenericSend+0x106>
     afc:	8e 81       	ldd	r24, Y+6	; 0x06
     afe:	9f 81       	ldd	r25, Y+7	; 0x07
     b00:	a8 85       	ldd	r26, Y+8	; 0x08
     b02:	b9 85       	ldd	r27, Y+9	; 0x09
     b04:	89 2b       	or	r24, r25
     b06:	8a 2b       	or	r24, r26
     b08:	8b 2b       	or	r24, r27
     b0a:	21 f4       	brne	.+8      	; 0xb14 <xQueueGenericSend+0x86>
     b0c:	0f 90       	pop	r0
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	40 c0       	rjmp	.+128    	; 0xb94 <xQueueGenericSend+0x106>
     b14:	11 11       	cpse	r17, r1
     b16:	05 c0       	rjmp	.+10     	; 0xb22 <xQueueGenericSend+0x94>
     b18:	ce 01       	movw	r24, r28
     b1a:	01 96       	adiw	r24, 0x01	; 1
     b1c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <vTaskInternalSetTimeOutState>
     b20:	11 e0       	ldi	r17, 0x01	; 1
     b22:	0f 90       	pop	r0
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	a6 d7       	rcall	.+3916   	; 0x1a74 <vTaskSuspendAll>
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	0f 92       	push	r0
     b2e:	f7 01       	movw	r30, r14
     b30:	81 a1       	ldd	r24, Z+33	; 0x21
     b32:	8f 3f       	cpi	r24, 0xFF	; 255
     b34:	09 f4       	brne	.+2      	; 0xb38 <xQueueGenericSend+0xaa>
     b36:	11 a2       	std	Z+33, r1	; 0x21
     b38:	f7 01       	movw	r30, r14
     b3a:	82 a1       	ldd	r24, Z+34	; 0x22
     b3c:	8f 3f       	cpi	r24, 0xFF	; 255
     b3e:	09 f4       	brne	.+2      	; 0xb42 <xQueueGenericSend+0xb4>
     b40:	12 a2       	std	Z+34, r1	; 0x22
     b42:	0f 90       	pop	r0
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	be 01       	movw	r22, r28
     b48:	6a 5f       	subi	r22, 0xFA	; 250
     b4a:	7f 4f       	sbci	r23, 0xFF	; 255
     b4c:	ce 01       	movw	r24, r28
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <xTaskCheckForTimeOut>
     b54:	81 11       	cpse	r24, r1
     b56:	19 c0       	rjmp	.+50     	; 0xb8a <xQueueGenericSend+0xfc>
     b58:	c7 01       	movw	r24, r14
     b5a:	66 de       	rcall	.-820    	; 0x828 <prvIsQueueFull>
     b5c:	88 23       	and	r24, r24
     b5e:	81 f0       	breq	.+32     	; 0xb80 <xQueueGenericSend+0xf2>
     b60:	4e 81       	ldd	r20, Y+6	; 0x06
     b62:	5f 81       	ldd	r21, Y+7	; 0x07
     b64:	68 85       	ldd	r22, Y+8	; 0x08
     b66:	79 85       	ldd	r23, Y+9	; 0x09
     b68:	c7 01       	movw	r24, r14
     b6a:	08 96       	adiw	r24, 0x08	; 8
     b6c:	0e 94 3b 10 	call	0x2076	; 0x2076 <vTaskPlaceOnEventList>
     b70:	c7 01       	movw	r24, r14
     b72:	e1 de       	rcall	.-574    	; 0x936 <prvUnlockQueue>
     b74:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <xTaskResumeAll>
     b78:	81 11       	cpse	r24, r1
     b7a:	a0 cf       	rjmp	.-192    	; 0xabc <xQueueGenericSend+0x2e>
     b7c:	70 dd       	rcall	.-1312   	; 0x65e <vPortYield>
     b7e:	9e cf       	rjmp	.-196    	; 0xabc <xQueueGenericSend+0x2e>
     b80:	c7 01       	movw	r24, r14
     b82:	d9 de       	rcall	.-590    	; 0x936 <prvUnlockQueue>
     b84:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <xTaskResumeAll>
     b88:	99 cf       	rjmp	.-206    	; 0xabc <xQueueGenericSend+0x2e>
     b8a:	c7 01       	movw	r24, r14
     b8c:	d4 de       	rcall	.-600    	; 0x936 <prvUnlockQueue>
     b8e:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <xTaskResumeAll>
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	29 96       	adiw	r28, 0x09	; 9
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	ff 90       	pop	r15
     baa:	ef 90       	pop	r14
     bac:	df 90       	pop	r13
     bae:	cf 90       	pop	r12
     bb0:	08 95       	ret

00000bb2 <xQueueGenericSendFromISR>:
     bb2:	ef 92       	push	r14
     bb4:	ff 92       	push	r15
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	8a 01       	movw	r16, r20
     bc0:	fc 01       	movw	r30, r24
     bc2:	56 8d       	ldd	r21, Z+30	; 0x1e
     bc4:	37 8d       	ldd	r19, Z+31	; 0x1f
     bc6:	53 17       	cp	r21, r19
     bc8:	10 f0       	brcs	.+4      	; 0xbce <xQueueGenericSendFromISR+0x1c>
     bca:	22 30       	cpi	r18, 0x02	; 2
     bcc:	f9 f4       	brne	.+62     	; 0xc0c <xQueueGenericSendFromISR+0x5a>
     bce:	42 2f       	mov	r20, r18
     bd0:	78 01       	movw	r14, r16
     bd2:	ec 01       	movw	r28, r24
     bd4:	1a a1       	ldd	r17, Y+34	; 0x22
     bd6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bd8:	ce 01       	movw	r24, r28
     bda:	34 de       	rcall	.-920    	; 0x844 <prvCopyDataToQueue>
     bdc:	1f 3f       	cpi	r17, 0xFF	; 255
     bde:	81 f4       	brne	.+32     	; 0xc00 <xQueueGenericSendFromISR+0x4e>
     be0:	8b 89       	ldd	r24, Y+19	; 0x13
     be2:	88 23       	and	r24, r24
     be4:	a9 f0       	breq	.+42     	; 0xc10 <xQueueGenericSendFromISR+0x5e>
     be6:	ce 01       	movw	r24, r28
     be8:	43 96       	adiw	r24, 0x13	; 19
     bea:	0e 94 94 10 	call	0x2128	; 0x2128 <xTaskRemoveFromEventList>
     bee:	88 23       	and	r24, r24
     bf0:	89 f0       	breq	.+34     	; 0xc14 <xQueueGenericSendFromISR+0x62>
     bf2:	e1 14       	cp	r14, r1
     bf4:	f1 04       	cpc	r15, r1
     bf6:	81 f0       	breq	.+32     	; 0xc18 <xQueueGenericSendFromISR+0x66>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	f7 01       	movw	r30, r14
     bfc:	80 83       	st	Z, r24
     bfe:	0d c0       	rjmp	.+26     	; 0xc1a <xQueueGenericSendFromISR+0x68>
     c00:	ff 24       	eor	r15, r15
     c02:	f3 94       	inc	r15
     c04:	f1 0e       	add	r15, r17
     c06:	fa a2       	std	Y+34, r15	; 0x22
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	07 c0       	rjmp	.+14     	; 0xc1a <xQueueGenericSendFromISR+0x68>
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	05 c0       	rjmp	.+10     	; 0xc1a <xQueueGenericSendFromISR+0x68>
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	03 c0       	rjmp	.+6      	; 0xc1a <xQueueGenericSendFromISR+0x68>
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	01 c0       	rjmp	.+2      	; 0xc1a <xQueueGenericSendFromISR+0x68>
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	1f 91       	pop	r17
     c20:	0f 91       	pop	r16
     c22:	ff 90       	pop	r15
     c24:	ef 90       	pop	r14
     c26:	08 95       	ret

00000c28 <xQueueReceive>:
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	29 97       	sbiw	r28, 0x09	; 9
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
     c48:	8c 01       	movw	r16, r24
     c4a:	6b 01       	movw	r12, r22
     c4c:	2e 83       	std	Y+6, r18	; 0x06
     c4e:	3f 83       	std	Y+7, r19	; 0x07
     c50:	48 87       	std	Y+8, r20	; 0x08
     c52:	59 87       	std	Y+9, r21	; 0x09
     c54:	e1 2c       	mov	r14, r1
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	0f 92       	push	r0
     c5c:	f8 01       	movw	r30, r16
     c5e:	f6 8c       	ldd	r15, Z+30	; 0x1e
     c60:	ff 20       	and	r15, r15
     c62:	99 f0       	breq	.+38     	; 0xc8a <xQueueReceive+0x62>
     c64:	b6 01       	movw	r22, r12
     c66:	c8 01       	movw	r24, r16
     c68:	4c de       	rcall	.-872    	; 0x902 <prvCopyDataFromQueue>
     c6a:	fa 94       	dec	r15
     c6c:	f8 01       	movw	r30, r16
     c6e:	f6 8e       	std	Z+30, r15	; 0x1e
     c70:	80 85       	ldd	r24, Z+8	; 0x08
     c72:	88 23       	and	r24, r24
     c74:	31 f0       	breq	.+12     	; 0xc82 <xQueueReceive+0x5a>
     c76:	c8 01       	movw	r24, r16
     c78:	08 96       	adiw	r24, 0x08	; 8
     c7a:	0e 94 94 10 	call	0x2128	; 0x2128 <xTaskRemoveFromEventList>
     c7e:	81 11       	cpse	r24, r1
     c80:	ee dc       	rcall	.-1572   	; 0x65e <vPortYield>
     c82:	0f 90       	pop	r0
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	4f c0       	rjmp	.+158    	; 0xd28 <xQueueReceive+0x100>
     c8a:	8e 81       	ldd	r24, Y+6	; 0x06
     c8c:	9f 81       	ldd	r25, Y+7	; 0x07
     c8e:	a8 85       	ldd	r26, Y+8	; 0x08
     c90:	b9 85       	ldd	r27, Y+9	; 0x09
     c92:	89 2b       	or	r24, r25
     c94:	8a 2b       	or	r24, r26
     c96:	8b 2b       	or	r24, r27
     c98:	21 f4       	brne	.+8      	; 0xca2 <xQueueReceive+0x7a>
     c9a:	0f 90       	pop	r0
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	43 c0       	rjmp	.+134    	; 0xd28 <xQueueReceive+0x100>
     ca2:	e1 10       	cpse	r14, r1
     ca4:	06 c0       	rjmp	.+12     	; 0xcb2 <xQueueReceive+0x8a>
     ca6:	ce 01       	movw	r24, r28
     ca8:	01 96       	adiw	r24, 0x01	; 1
     caa:	0e 94 59 11 	call	0x22b2	; 0x22b2 <vTaskInternalSetTimeOutState>
     cae:	ee 24       	eor	r14, r14
     cb0:	e3 94       	inc	r14
     cb2:	0f 90       	pop	r0
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	de d6       	rcall	.+3516   	; 0x1a74 <vTaskSuspendAll>
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	f8 94       	cli
     cbc:	0f 92       	push	r0
     cbe:	f8 01       	movw	r30, r16
     cc0:	81 a1       	ldd	r24, Z+33	; 0x21
     cc2:	8f 3f       	cpi	r24, 0xFF	; 255
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <xQueueReceive+0xa0>
     cc6:	11 a2       	std	Z+33, r1	; 0x21
     cc8:	f8 01       	movw	r30, r16
     cca:	82 a1       	ldd	r24, Z+34	; 0x22
     ccc:	8f 3f       	cpi	r24, 0xFF	; 255
     cce:	09 f4       	brne	.+2      	; 0xcd2 <xQueueReceive+0xaa>
     cd0:	12 a2       	std	Z+34, r1	; 0x22
     cd2:	0f 90       	pop	r0
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	be 01       	movw	r22, r28
     cd8:	6a 5f       	subi	r22, 0xFA	; 250
     cda:	7f 4f       	sbci	r23, 0xFF	; 255
     cdc:	ce 01       	movw	r24, r28
     cde:	01 96       	adiw	r24, 0x01	; 1
     ce0:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <xTaskCheckForTimeOut>
     ce4:	81 11       	cpse	r24, r1
     ce6:	17 c0       	rjmp	.+46     	; 0xd16 <xQueueReceive+0xee>
     ce8:	c8 01       	movw	r24, r16
     cea:	91 dd       	rcall	.-1246   	; 0x80e <prvIsQueueEmpty>
     cec:	88 23       	and	r24, r24
     cee:	79 f0       	breq	.+30     	; 0xd0e <xQueueReceive+0xe6>
     cf0:	4e 81       	ldd	r20, Y+6	; 0x06
     cf2:	5f 81       	ldd	r21, Y+7	; 0x07
     cf4:	68 85       	ldd	r22, Y+8	; 0x08
     cf6:	79 85       	ldd	r23, Y+9	; 0x09
     cf8:	c8 01       	movw	r24, r16
     cfa:	43 96       	adiw	r24, 0x13	; 19
     cfc:	0e 94 3b 10 	call	0x2076	; 0x2076 <vTaskPlaceOnEventList>
     d00:	c8 01       	movw	r24, r16
     d02:	19 de       	rcall	.-974    	; 0x936 <prvUnlockQueue>
     d04:	f7 d7       	rcall	.+4078   	; 0x1cf4 <xTaskResumeAll>
     d06:	81 11       	cpse	r24, r1
     d08:	a6 cf       	rjmp	.-180    	; 0xc56 <xQueueReceive+0x2e>
     d0a:	a9 dc       	rcall	.-1710   	; 0x65e <vPortYield>
     d0c:	a4 cf       	rjmp	.-184    	; 0xc56 <xQueueReceive+0x2e>
     d0e:	c8 01       	movw	r24, r16
     d10:	12 de       	rcall	.-988    	; 0x936 <prvUnlockQueue>
     d12:	f0 d7       	rcall	.+4064   	; 0x1cf4 <xTaskResumeAll>
     d14:	a0 cf       	rjmp	.-192    	; 0xc56 <xQueueReceive+0x2e>
     d16:	c8 01       	movw	r24, r16
     d18:	0e de       	rcall	.-996    	; 0x936 <prvUnlockQueue>
     d1a:	ec d7       	rcall	.+4056   	; 0x1cf4 <xTaskResumeAll>
     d1c:	c8 01       	movw	r24, r16
     d1e:	77 dd       	rcall	.-1298   	; 0x80e <prvIsQueueEmpty>
     d20:	88 23       	and	r24, r24
     d22:	09 f4       	brne	.+2      	; 0xd26 <xQueueReceive+0xfe>
     d24:	98 cf       	rjmp	.-208    	; 0xc56 <xQueueReceive+0x2e>
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	29 96       	adiw	r28, 0x09	; 9
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	ff 90       	pop	r15
     d3e:	ef 90       	pop	r14
     d40:	df 90       	pop	r13
     d42:	cf 90       	pop	r12
     d44:	08 95       	ret

00000d46 <xQueueSemaphoreTake>:
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	29 97       	sbiw	r28, 0x09	; 9
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	8c 01       	movw	r16, r24
     d64:	4e 83       	std	Y+6, r20	; 0x06
     d66:	5f 83       	std	Y+7, r21	; 0x07
     d68:	68 87       	std	Y+8, r22	; 0x08
     d6a:	79 87       	std	Y+9, r23	; 0x09
     d6c:	e1 2c       	mov	r14, r1
     d6e:	f1 2c       	mov	r15, r1
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	f8 94       	cli
     d74:	0f 92       	push	r0
     d76:	f8 01       	movw	r30, r16
     d78:	86 8d       	ldd	r24, Z+30	; 0x1e
     d7a:	88 23       	and	r24, r24
     d7c:	c9 f0       	breq	.+50     	; 0xdb0 <xQueueSemaphoreTake+0x6a>
     d7e:	81 50       	subi	r24, 0x01	; 1
     d80:	86 8f       	std	Z+30, r24	; 0x1e
     d82:	80 81       	ld	r24, Z
     d84:	91 81       	ldd	r25, Z+1	; 0x01
     d86:	89 2b       	or	r24, r25
     d88:	29 f4       	brne	.+10     	; 0xd94 <xQueueSemaphoreTake+0x4e>
     d8a:	0e 94 30 13 	call	0x2660	; 0x2660 <pvTaskIncrementMutexHeldCount>
     d8e:	f8 01       	movw	r30, r16
     d90:	95 83       	std	Z+5, r25	; 0x05
     d92:	84 83       	std	Z+4, r24	; 0x04
     d94:	f8 01       	movw	r30, r16
     d96:	80 85       	ldd	r24, Z+8	; 0x08
     d98:	88 23       	and	r24, r24
     d9a:	31 f0       	breq	.+12     	; 0xda8 <xQueueSemaphoreTake+0x62>
     d9c:	c8 01       	movw	r24, r16
     d9e:	08 96       	adiw	r24, 0x08	; 8
     da0:	0e 94 94 10 	call	0x2128	; 0x2128 <xTaskRemoveFromEventList>
     da4:	81 11       	cpse	r24, r1
     da6:	5b dc       	rcall	.-1866   	; 0x65e <vPortYield>
     da8:	0f 90       	pop	r0
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	6f c0       	rjmp	.+222    	; 0xe8e <xQueueSemaphoreTake+0x148>
     db0:	8e 81       	ldd	r24, Y+6	; 0x06
     db2:	9f 81       	ldd	r25, Y+7	; 0x07
     db4:	a8 85       	ldd	r26, Y+8	; 0x08
     db6:	b9 85       	ldd	r27, Y+9	; 0x09
     db8:	89 2b       	or	r24, r25
     dba:	8a 2b       	or	r24, r26
     dbc:	8b 2b       	or	r24, r27
     dbe:	21 f4       	brne	.+8      	; 0xdc8 <xQueueSemaphoreTake+0x82>
     dc0:	0f 90       	pop	r0
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	63 c0       	rjmp	.+198    	; 0xe8e <xQueueSemaphoreTake+0x148>
     dc8:	f1 10       	cpse	r15, r1
     dca:	06 c0       	rjmp	.+12     	; 0xdd8 <xQueueSemaphoreTake+0x92>
     dcc:	ce 01       	movw	r24, r28
     dce:	01 96       	adiw	r24, 0x01	; 1
     dd0:	0e 94 59 11 	call	0x22b2	; 0x22b2 <vTaskInternalSetTimeOutState>
     dd4:	ff 24       	eor	r15, r15
     dd6:	f3 94       	inc	r15
     dd8:	0f 90       	pop	r0
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	4b d6       	rcall	.+3222   	; 0x1a74 <vTaskSuspendAll>
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	0f 92       	push	r0
     de4:	f8 01       	movw	r30, r16
     de6:	81 a1       	ldd	r24, Z+33	; 0x21
     de8:	8f 3f       	cpi	r24, 0xFF	; 255
     dea:	09 f4       	brne	.+2      	; 0xdee <xQueueSemaphoreTake+0xa8>
     dec:	11 a2       	std	Z+33, r1	; 0x21
     dee:	f8 01       	movw	r30, r16
     df0:	82 a1       	ldd	r24, Z+34	; 0x22
     df2:	8f 3f       	cpi	r24, 0xFF	; 255
     df4:	09 f4       	brne	.+2      	; 0xdf8 <xQueueSemaphoreTake+0xb2>
     df6:	12 a2       	std	Z+34, r1	; 0x22
     df8:	0f 90       	pop	r0
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	be 01       	movw	r22, r28
     dfe:	6a 5f       	subi	r22, 0xFA	; 250
     e00:	7f 4f       	sbci	r23, 0xFF	; 255
     e02:	ce 01       	movw	r24, r28
     e04:	01 96       	adiw	r24, 0x01	; 1
     e06:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <xTaskCheckForTimeOut>
     e0a:	81 11       	cpse	r24, r1
     e0c:	26 c0       	rjmp	.+76     	; 0xe5a <xQueueSemaphoreTake+0x114>
     e0e:	c8 01       	movw	r24, r16
     e10:	fe dc       	rcall	.-1540   	; 0x80e <prvIsQueueEmpty>
     e12:	88 23       	and	r24, r24
     e14:	f1 f0       	breq	.+60     	; 0xe52 <xQueueSemaphoreTake+0x10c>
     e16:	f8 01       	movw	r30, r16
     e18:	80 81       	ld	r24, Z
     e1a:	91 81       	ldd	r25, Z+1	; 0x01
     e1c:	89 2b       	or	r24, r25
     e1e:	51 f4       	brne	.+20     	; 0xe34 <xQueueSemaphoreTake+0xee>
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	0f 92       	push	r0
     e26:	84 81       	ldd	r24, Z+4	; 0x04
     e28:	95 81       	ldd	r25, Z+5	; 0x05
     e2a:	0e 94 e7 11 	call	0x23ce	; 0x23ce <xTaskPriorityInherit>
     e2e:	e8 2e       	mov	r14, r24
     e30:	0f 90       	pop	r0
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	4e 81       	ldd	r20, Y+6	; 0x06
     e36:	5f 81       	ldd	r21, Y+7	; 0x07
     e38:	68 85       	ldd	r22, Y+8	; 0x08
     e3a:	79 85       	ldd	r23, Y+9	; 0x09
     e3c:	c8 01       	movw	r24, r16
     e3e:	43 96       	adiw	r24, 0x13	; 19
     e40:	0e 94 3b 10 	call	0x2076	; 0x2076 <vTaskPlaceOnEventList>
     e44:	c8 01       	movw	r24, r16
     e46:	77 dd       	rcall	.-1298   	; 0x936 <prvUnlockQueue>
     e48:	55 d7       	rcall	.+3754   	; 0x1cf4 <xTaskResumeAll>
     e4a:	81 11       	cpse	r24, r1
     e4c:	91 cf       	rjmp	.-222    	; 0xd70 <xQueueSemaphoreTake+0x2a>
     e4e:	07 dc       	rcall	.-2034   	; 0x65e <vPortYield>
     e50:	8f cf       	rjmp	.-226    	; 0xd70 <xQueueSemaphoreTake+0x2a>
     e52:	c8 01       	movw	r24, r16
     e54:	70 dd       	rcall	.-1312   	; 0x936 <prvUnlockQueue>
     e56:	4e d7       	rcall	.+3740   	; 0x1cf4 <xTaskResumeAll>
     e58:	8b cf       	rjmp	.-234    	; 0xd70 <xQueueSemaphoreTake+0x2a>
     e5a:	c8 01       	movw	r24, r16
     e5c:	6c dd       	rcall	.-1320   	; 0x936 <prvUnlockQueue>
     e5e:	4a d7       	rcall	.+3732   	; 0x1cf4 <xTaskResumeAll>
     e60:	c8 01       	movw	r24, r16
     e62:	d5 dc       	rcall	.-1622   	; 0x80e <prvIsQueueEmpty>
     e64:	88 23       	and	r24, r24
     e66:	09 f4       	brne	.+2      	; 0xe6a <xQueueSemaphoreTake+0x124>
     e68:	83 cf       	rjmp	.-250    	; 0xd70 <xQueueSemaphoreTake+0x2a>
     e6a:	ee 20       	and	r14, r14
     e6c:	79 f0       	breq	.+30     	; 0xe8c <xQueueSemaphoreTake+0x146>
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	0f 92       	push	r0
     e74:	c8 01       	movw	r24, r16
     e76:	bb dc       	rcall	.-1674   	; 0x7ee <prvGetDisinheritPriorityAfterTimeout>
     e78:	68 2f       	mov	r22, r24
     e7a:	f8 01       	movw	r30, r16
     e7c:	84 81       	ldd	r24, Z+4	; 0x04
     e7e:	95 81       	ldd	r25, Z+5	; 0x05
     e80:	0e 94 c9 12 	call	0x2592	; 0x2592 <vTaskPriorityDisinheritAfterTimeout>
     e84:	0f 90       	pop	r0
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	01 c0       	rjmp	.+2      	; 0xe8e <xQueueSemaphoreTake+0x148>
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	29 96       	adiw	r28, 0x09	; 9
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	de bf       	out	0x3e, r29	; 62
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	cd bf       	out	0x3d, r28	; 61
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	1f 91       	pop	r17
     ea0:	0f 91       	pop	r16
     ea2:	ff 90       	pop	r15
     ea4:	ef 90       	pop	r14
     ea6:	08 95       	ret

00000ea8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	0f 92       	push	r0
     eb4:	89 a1       	ldd	r24, Y+33	; 0x21
     eb6:	8f 3f       	cpi	r24, 0xFF	; 255
     eb8:	09 f4       	brne	.+2      	; 0xebc <vQueueWaitForMessageRestricted+0x14>
     eba:	19 a2       	std	Y+33, r1	; 0x21
     ebc:	8a a1       	ldd	r24, Y+34	; 0x22
     ebe:	8f 3f       	cpi	r24, 0xFF	; 255
     ec0:	09 f4       	brne	.+2      	; 0xec4 <vQueueWaitForMessageRestricted+0x1c>
     ec2:	1a a2       	std	Y+34, r1	; 0x22
     ec4:	0f 90       	pop	r0
     ec6:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     ec8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     eca:	81 11       	cpse	r24, r1
     ecc:	04 c0       	rjmp	.+8      	; 0xed6 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     ece:	ce 01       	movw	r24, r28
     ed0:	43 96       	adiw	r24, 0x13	; 19
     ed2:	0e 94 52 10 	call	0x20a4	; 0x20a4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     ed6:	ce 01       	movw	r24, r28
     ed8:	2e dd       	rcall	.-1444   	; 0x936 <prvUnlockQueue>
    }
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	08 95       	ret

00000ee0 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     ee0:	fc 01       	movw	r30, r24
     ee2:	44 81       	ldd	r20, Z+4	; 0x04
     ee4:	55 81       	ldd	r21, Z+5	; 0x05
     ee6:	22 81       	ldd	r18, Z+2	; 0x02
     ee8:	33 81       	ldd	r19, Z+3	; 0x03
     eea:	24 0f       	add	r18, r20
     eec:	35 1f       	adc	r19, r21
     eee:	80 81       	ld	r24, Z
     ef0:	91 81       	ldd	r25, Z+1	; 0x01
     ef2:	b9 01       	movw	r22, r18
     ef4:	68 1b       	sub	r22, r24
     ef6:	79 0b       	sbc	r23, r25
     ef8:	cb 01       	movw	r24, r22
     efa:	64 17       	cp	r22, r20
     efc:	75 07       	cpc	r23, r21
     efe:	10 f0       	brcs	.+4      	; 0xf04 <prvBytesInBuffer+0x24>
     f00:	84 1b       	sub	r24, r20
     f02:	95 0b       	sbc	r25, r21
     f04:	08 95       	ret

00000f06 <prvInitialiseNewStreamBuffer>:
     f06:	0f 93       	push	r16
     f08:	fc 01       	movw	r30, r24
     f0a:	8f e0       	ldi	r24, 0x0F	; 15
     f0c:	df 01       	movw	r26, r30
     f0e:	1d 92       	st	X+, r1
     f10:	8a 95       	dec	r24
     f12:	e9 f7       	brne	.-6      	; 0xf0e <prvInitialiseNewStreamBuffer+0x8>
     f14:	75 87       	std	Z+13, r23	; 0x0d
     f16:	64 87       	std	Z+12, r22	; 0x0c
     f18:	55 83       	std	Z+5, r21	; 0x05
     f1a:	44 83       	std	Z+4, r20	; 0x04
     f1c:	37 83       	std	Z+7, r19	; 0x07
     f1e:	26 83       	std	Z+6, r18	; 0x06
     f20:	06 87       	std	Z+14, r16	; 0x0e
     f22:	0f 91       	pop	r16
     f24:	08 95       	ret

00000f26 <prvWriteBytesToBuffer>:
     f26:	af 92       	push	r10
     f28:	bf 92       	push	r11
     f2a:	cf 92       	push	r12
     f2c:	df 92       	push	r13
     f2e:	ef 92       	push	r14
     f30:	ff 92       	push	r15
     f32:	0f 93       	push	r16
     f34:	1f 93       	push	r17
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	6c 01       	movw	r12, r24
     f3c:	5b 01       	movw	r10, r22
     f3e:	7a 01       	movw	r14, r20
     f40:	fc 01       	movw	r30, r24
     f42:	c2 81       	ldd	r28, Z+2	; 0x02
     f44:	d3 81       	ldd	r29, Z+3	; 0x03
     f46:	04 81       	ldd	r16, Z+4	; 0x04
     f48:	15 81       	ldd	r17, Z+5	; 0x05
     f4a:	0c 1b       	sub	r16, r28
     f4c:	1d 0b       	sbc	r17, r29
     f4e:	40 17       	cp	r20, r16
     f50:	51 07       	cpc	r21, r17
     f52:	08 f4       	brcc	.+2      	; 0xf56 <prvWriteBytesToBuffer+0x30>
     f54:	8a 01       	movw	r16, r20
     f56:	f6 01       	movw	r30, r12
     f58:	84 85       	ldd	r24, Z+12	; 0x0c
     f5a:	95 85       	ldd	r25, Z+13	; 0x0d
     f5c:	a8 01       	movw	r20, r16
     f5e:	b5 01       	movw	r22, r10
     f60:	8c 0f       	add	r24, r28
     f62:	9d 1f       	adc	r25, r29
     f64:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <memcpy>
     f68:	0e 15       	cp	r16, r14
     f6a:	1f 05       	cpc	r17, r15
     f6c:	58 f4       	brcc	.+22     	; 0xf84 <prvWriteBytesToBuffer+0x5e>
     f6e:	a7 01       	movw	r20, r14
     f70:	40 1b       	sub	r20, r16
     f72:	51 0b       	sbc	r21, r17
     f74:	b5 01       	movw	r22, r10
     f76:	60 0f       	add	r22, r16
     f78:	71 1f       	adc	r23, r17
     f7a:	f6 01       	movw	r30, r12
     f7c:	84 85       	ldd	r24, Z+12	; 0x0c
     f7e:	95 85       	ldd	r25, Z+13	; 0x0d
     f80:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <memcpy>
     f84:	ce 01       	movw	r24, r28
     f86:	8e 0d       	add	r24, r14
     f88:	9f 1d       	adc	r25, r15
     f8a:	f6 01       	movw	r30, r12
     f8c:	24 81       	ldd	r18, Z+4	; 0x04
     f8e:	35 81       	ldd	r19, Z+5	; 0x05
     f90:	82 17       	cp	r24, r18
     f92:	93 07       	cpc	r25, r19
     f94:	10 f0       	brcs	.+4      	; 0xf9a <prvWriteBytesToBuffer+0x74>
     f96:	82 1b       	sub	r24, r18
     f98:	93 0b       	sbc	r25, r19
     f9a:	f6 01       	movw	r30, r12
     f9c:	93 83       	std	Z+3, r25	; 0x03
     f9e:	82 83       	std	Z+2, r24	; 0x02
     fa0:	c7 01       	movw	r24, r14
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	1f 91       	pop	r17
     fa8:	0f 91       	pop	r16
     faa:	ff 90       	pop	r15
     fac:	ef 90       	pop	r14
     fae:	df 90       	pop	r13
     fb0:	cf 90       	pop	r12
     fb2:	bf 90       	pop	r11
     fb4:	af 90       	pop	r10
     fb6:	08 95       	ret

00000fb8 <prvWriteMessageToBuffer>:
     fb8:	cf 92       	push	r12
     fba:	df 92       	push	r13
     fbc:	ef 92       	push	r14
     fbe:	ff 92       	push	r15
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	1f 92       	push	r1
     fca:	1f 92       	push	r1
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
     fd0:	7c 01       	movw	r14, r24
     fd2:	6b 01       	movw	r12, r22
     fd4:	5a 83       	std	Y+2, r21	; 0x02
     fd6:	49 83       	std	Y+1, r20	; 0x01
     fd8:	21 15       	cp	r18, r1
     fda:	31 05       	cpc	r19, r1
     fdc:	c1 f0       	breq	.+48     	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
     fde:	fc 01       	movw	r30, r24
     fe0:	86 85       	ldd	r24, Z+14	; 0x0e
     fe2:	80 fd       	sbrc	r24, 0
     fe4:	08 c0       	rjmp	.+16     	; 0xff6 <prvWriteMessageToBuffer+0x3e>
     fe6:	42 17       	cp	r20, r18
     fe8:	53 07       	cpc	r21, r19
     fea:	08 f4       	brcc	.+2      	; 0xfee <prvWriteMessageToBuffer+0x36>
     fec:	9a 01       	movw	r18, r20
     fee:	3a 83       	std	Y+2, r19	; 0x02
     ff0:	29 83       	std	Y+1, r18	; 0x01
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	0f c0       	rjmp	.+30     	; 0x1014 <__EEPROM_REGION_LENGTH__+0x14>
     ff6:	20 17       	cp	r18, r16
     ff8:	31 07       	cpc	r19, r17
     ffa:	58 f0       	brcs	.+22     	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
     ffc:	42 e0       	ldi	r20, 0x02	; 2
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	be 01       	movw	r22, r28
    1002:	6f 5f       	subi	r22, 0xFF	; 255
    1004:	7f 4f       	sbci	r23, 0xFF	; 255
    1006:	c7 01       	movw	r24, r14
    1008:	8e df       	rcall	.-228    	; 0xf26 <prvWriteBytesToBuffer>
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	03 c0       	rjmp	.+6      	; 0x1014 <__EEPROM_REGION_LENGTH__+0x14>
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	01 c0       	rjmp	.+2      	; 0x1014 <__EEPROM_REGION_LENGTH__+0x14>
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	88 23       	and	r24, r24
    1016:	31 f0       	breq	.+12     	; 0x1024 <__EEPROM_REGION_LENGTH__+0x24>
    1018:	49 81       	ldd	r20, Y+1	; 0x01
    101a:	5a 81       	ldd	r21, Y+2	; 0x02
    101c:	b6 01       	movw	r22, r12
    101e:	c7 01       	movw	r24, r14
    1020:	82 df       	rcall	.-252    	; 0xf26 <prvWriteBytesToBuffer>
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <__EEPROM_REGION_LENGTH__+0x28>
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	ff 90       	pop	r15
    1036:	ef 90       	pop	r14
    1038:	df 90       	pop	r13
    103a:	cf 90       	pop	r12
    103c:	08 95       	ret

0000103e <prvReadBytesFromBuffer>:
    103e:	af 92       	push	r10
    1040:	bf 92       	push	r11
    1042:	cf 92       	push	r12
    1044:	df 92       	push	r13
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	7c 01       	movw	r14, r24
    1054:	5b 01       	movw	r10, r22
    1056:	e9 01       	movw	r28, r18
    1058:	42 17       	cp	r20, r18
    105a:	53 07       	cpc	r21, r19
    105c:	08 f4       	brcc	.+2      	; 0x1060 <prvReadBytesFromBuffer+0x22>
    105e:	ea 01       	movw	r28, r20
    1060:	20 97       	sbiw	r28, 0x00	; 0
    1062:	81 f1       	breq	.+96     	; 0x10c4 <prvReadBytesFromBuffer+0x86>
    1064:	f7 01       	movw	r30, r14
    1066:	00 81       	ld	r16, Z
    1068:	11 81       	ldd	r17, Z+1	; 0x01
    106a:	84 81       	ldd	r24, Z+4	; 0x04
    106c:	95 81       	ldd	r25, Z+5	; 0x05
    106e:	80 1b       	sub	r24, r16
    1070:	91 0b       	sbc	r25, r17
    1072:	6e 01       	movw	r12, r28
    1074:	8c 17       	cp	r24, r28
    1076:	9d 07       	cpc	r25, r29
    1078:	08 f4       	brcc	.+2      	; 0x107c <prvReadBytesFromBuffer+0x3e>
    107a:	6c 01       	movw	r12, r24
    107c:	f7 01       	movw	r30, r14
    107e:	64 85       	ldd	r22, Z+12	; 0x0c
    1080:	75 85       	ldd	r23, Z+13	; 0x0d
    1082:	60 0f       	add	r22, r16
    1084:	71 1f       	adc	r23, r17
    1086:	a6 01       	movw	r20, r12
    1088:	c5 01       	movw	r24, r10
    108a:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <memcpy>
    108e:	cc 16       	cp	r12, r28
    1090:	dd 06       	cpc	r13, r29
    1092:	58 f4       	brcc	.+22     	; 0x10aa <prvReadBytesFromBuffer+0x6c>
    1094:	ae 01       	movw	r20, r28
    1096:	4c 19       	sub	r20, r12
    1098:	5d 09       	sbc	r21, r13
    109a:	f7 01       	movw	r30, r14
    109c:	64 85       	ldd	r22, Z+12	; 0x0c
    109e:	75 85       	ldd	r23, Z+13	; 0x0d
    10a0:	c5 01       	movw	r24, r10
    10a2:	8c 0d       	add	r24, r12
    10a4:	9d 1d       	adc	r25, r13
    10a6:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <memcpy>
    10aa:	0c 0f       	add	r16, r28
    10ac:	1d 1f       	adc	r17, r29
    10ae:	f7 01       	movw	r30, r14
    10b0:	84 81       	ldd	r24, Z+4	; 0x04
    10b2:	95 81       	ldd	r25, Z+5	; 0x05
    10b4:	08 17       	cp	r16, r24
    10b6:	19 07       	cpc	r17, r25
    10b8:	10 f0       	brcs	.+4      	; 0x10be <prvReadBytesFromBuffer+0x80>
    10ba:	08 1b       	sub	r16, r24
    10bc:	19 0b       	sbc	r17, r25
    10be:	f7 01       	movw	r30, r14
    10c0:	11 83       	std	Z+1, r17	; 0x01
    10c2:	00 83       	st	Z, r16
    10c4:	ce 01       	movw	r24, r28
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	ff 90       	pop	r15
    10d0:	ef 90       	pop	r14
    10d2:	df 90       	pop	r13
    10d4:	cf 90       	pop	r12
    10d6:	bf 90       	pop	r11
    10d8:	af 90       	pop	r10
    10da:	08 95       	ret

000010dc <prvReadMessageFromBuffer>:
    10dc:	6f 92       	push	r6
    10de:	7f 92       	push	r7
    10e0:	8f 92       	push	r8
    10e2:	9f 92       	push	r9
    10e4:	af 92       	push	r10
    10e6:	bf 92       	push	r11
    10e8:	cf 92       	push	r12
    10ea:	df 92       	push	r13
    10ec:	ef 92       	push	r14
    10ee:	ff 92       	push	r15
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	1f 92       	push	r1
    10fa:	1f 92       	push	r1
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	6c 01       	movw	r12, r24
    1102:	4b 01       	movw	r8, r22
    1104:	5a 01       	movw	r10, r20
    1106:	79 01       	movw	r14, r18
    1108:	01 15       	cp	r16, r1
    110a:	11 05       	cpc	r17, r1
    110c:	b1 f0       	breq	.+44     	; 0x113a <prvReadMessageFromBuffer+0x5e>
    110e:	fc 01       	movw	r30, r24
    1110:	60 80       	ld	r6, Z
    1112:	71 80       	ldd	r7, Z+1	; 0x01
    1114:	a8 01       	movw	r20, r16
    1116:	be 01       	movw	r22, r28
    1118:	6f 5f       	subi	r22, 0xFF	; 255
    111a:	7f 4f       	sbci	r23, 0xFF	; 255
    111c:	90 df       	rcall	.-224    	; 0x103e <prvReadBytesFromBuffer>
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	9a 81       	ldd	r25, Y+2	; 0x02
    1122:	e0 1a       	sub	r14, r16
    1124:	f1 0a       	sbc	r15, r17
    1126:	a8 16       	cp	r10, r24
    1128:	b9 06       	cpc	r11, r25
    112a:	30 f4       	brcc	.+12     	; 0x1138 <prvReadMessageFromBuffer+0x5c>
    112c:	f6 01       	movw	r30, r12
    112e:	71 82       	std	Z+1, r7	; 0x01
    1130:	60 82       	st	Z, r6
    1132:	a1 2c       	mov	r10, r1
    1134:	b1 2c       	mov	r11, r1
    1136:	01 c0       	rjmp	.+2      	; 0x113a <prvReadMessageFromBuffer+0x5e>
    1138:	5c 01       	movw	r10, r24
    113a:	97 01       	movw	r18, r14
    113c:	a5 01       	movw	r20, r10
    113e:	b4 01       	movw	r22, r8
    1140:	c6 01       	movw	r24, r12
    1142:	7d df       	rcall	.-262    	; 0x103e <prvReadBytesFromBuffer>
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	ff 90       	pop	r15
    1152:	ef 90       	pop	r14
    1154:	df 90       	pop	r13
    1156:	cf 90       	pop	r12
    1158:	bf 90       	pop	r11
    115a:	af 90       	pop	r10
    115c:	9f 90       	pop	r9
    115e:	8f 90       	pop	r8
    1160:	7f 90       	pop	r7
    1162:	6f 90       	pop	r6
    1164:	08 95       	ret

00001166 <xStreamBufferGenericCreate>:
    1166:	cf 92       	push	r12
    1168:	df 92       	push	r13
    116a:	ef 92       	push	r14
    116c:	ff 92       	push	r15
    116e:	0f 93       	push	r16
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	ec 01       	movw	r28, r24
    1176:	6b 01       	movw	r12, r22
    1178:	41 30       	cpi	r20, 0x01	; 1
    117a:	11 f4       	brne	.+4      	; 0x1180 <xStreamBufferGenericCreate+0x1a>
    117c:	01 e0       	ldi	r16, 0x01	; 1
    117e:	01 c0       	rjmp	.+2      	; 0x1182 <xStreamBufferGenericCreate+0x1c>
    1180:	00 e0       	ldi	r16, 0x00	; 0
    1182:	c1 14       	cp	r12, r1
    1184:	d1 04       	cpc	r13, r1
    1186:	19 f4       	brne	.+6      	; 0x118e <xStreamBufferGenericCreate+0x28>
    1188:	cc 24       	eor	r12, r12
    118a:	c3 94       	inc	r12
    118c:	d1 2c       	mov	r13, r1
    118e:	ce 01       	movw	r24, r28
    1190:	40 96       	adiw	r24, 0x10	; 16
    1192:	c8 17       	cp	r28, r24
    1194:	d9 07       	cpc	r29, r25
    1196:	20 f4       	brcc	.+8      	; 0x11a0 <xStreamBufferGenericCreate+0x3a>
    1198:	21 96       	adiw	r28, 0x01	; 1
    119a:	ad d8       	rcall	.-3750   	; 0x2f6 <pvPortMalloc>
    119c:	7c 01       	movw	r14, r24
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <xStreamBufferGenericCreate+0x3e>
    11a0:	e1 2c       	mov	r14, r1
    11a2:	f1 2c       	mov	r15, r1
    11a4:	e1 14       	cp	r14, r1
    11a6:	f1 04       	cpc	r15, r1
    11a8:	39 f0       	breq	.+14     	; 0x11b8 <xStreamBufferGenericCreate+0x52>
    11aa:	96 01       	movw	r18, r12
    11ac:	ae 01       	movw	r20, r28
    11ae:	b7 01       	movw	r22, r14
    11b0:	61 5f       	subi	r22, 0xF1	; 241
    11b2:	7f 4f       	sbci	r23, 0xFF	; 255
    11b4:	c7 01       	movw	r24, r14
    11b6:	a7 de       	rcall	.-690    	; 0xf06 <prvInitialiseNewStreamBuffer>
    11b8:	c7 01       	movw	r24, r14
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	0f 91       	pop	r16
    11c0:	ff 90       	pop	r15
    11c2:	ef 90       	pop	r14
    11c4:	df 90       	pop	r13
    11c6:	cf 90       	pop	r12
    11c8:	08 95       	ret

000011ca <xStreamBufferReset>:
    11ca:	0f 93       	push	r16
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	0f 92       	push	r0
    11d2:	fc 01       	movw	r30, r24
    11d4:	20 85       	ldd	r18, Z+8	; 0x08
    11d6:	31 85       	ldd	r19, Z+9	; 0x09
    11d8:	23 2b       	or	r18, r19
    11da:	71 f4       	brne	.+28     	; 0x11f8 <xStreamBufferReset+0x2e>
    11dc:	22 85       	ldd	r18, Z+10	; 0x0a
    11de:	33 85       	ldd	r19, Z+11	; 0x0b
    11e0:	23 2b       	or	r18, r19
    11e2:	61 f4       	brne	.+24     	; 0x11fc <xStreamBufferReset+0x32>
    11e4:	26 81       	ldd	r18, Z+6	; 0x06
    11e6:	37 81       	ldd	r19, Z+7	; 0x07
    11e8:	44 81       	ldd	r20, Z+4	; 0x04
    11ea:	55 81       	ldd	r21, Z+5	; 0x05
    11ec:	64 85       	ldd	r22, Z+12	; 0x0c
    11ee:	75 85       	ldd	r23, Z+13	; 0x0d
    11f0:	06 85       	ldd	r16, Z+14	; 0x0e
    11f2:	89 de       	rcall	.-750    	; 0xf06 <prvInitialiseNewStreamBuffer>
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	03 c0       	rjmp	.+6      	; 0x11fe <xStreamBufferReset+0x34>
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <xStreamBufferReset+0x34>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	0f 90       	pop	r0
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	0f 91       	pop	r16
    1204:	08 95       	ret

00001206 <xStreamBufferSpacesAvailable>:
    1206:	fc 01       	movw	r30, r24
    1208:	24 81       	ldd	r18, Z+4	; 0x04
    120a:	35 81       	ldd	r19, Z+5	; 0x05
    120c:	80 81       	ld	r24, Z
    120e:	91 81       	ldd	r25, Z+1	; 0x01
    1210:	82 0f       	add	r24, r18
    1212:	93 1f       	adc	r25, r19
    1214:	42 81       	ldd	r20, Z+2	; 0x02
    1216:	53 81       	ldd	r21, Z+3	; 0x03
    1218:	84 1b       	sub	r24, r20
    121a:	95 0b       	sbc	r25, r21
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	82 17       	cp	r24, r18
    1220:	93 07       	cpc	r25, r19
    1222:	10 f0       	brcs	.+4      	; 0x1228 <xStreamBufferSpacesAvailable+0x22>
    1224:	82 1b       	sub	r24, r18
    1226:	93 0b       	sbc	r25, r19
    1228:	08 95       	ret

0000122a <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    122a:	2f 92       	push	r2
    122c:	3f 92       	push	r3
    122e:	4f 92       	push	r4
    1230:	5f 92       	push	r5
    1232:	6f 92       	push	r6
    1234:	7f 92       	push	r7
    1236:	8f 92       	push	r8
    1238:	9f 92       	push	r9
    123a:	af 92       	push	r10
    123c:	bf 92       	push	r11
    123e:	cf 92       	push	r12
    1240:	df 92       	push	r13
    1242:	ef 92       	push	r14
    1244:	ff 92       	push	r15
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	2b 97       	sbiw	r28, 0x0b	; 11
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	4c 01       	movw	r8, r24
    1260:	7b 87       	std	Y+11, r23	; 0x0b
    1262:	6a 87       	std	Y+10, r22	; 0x0a
    1264:	1a 01       	movw	r2, r20
    1266:	0e 83       	std	Y+6, r16	; 0x06
    1268:	1f 83       	std	Y+7, r17	; 0x07
    126a:	28 87       	std	Y+8, r18	; 0x08
    126c:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    126e:	fc 01       	movw	r30, r24
    1270:	84 81       	ldd	r24, Z+4	; 0x04
    1272:	95 81       	ldd	r25, Z+5	; 0x05
    1274:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1276:	26 85       	ldd	r18, Z+14	; 0x0e
    1278:	20 ff       	sbrs	r18, 0
    127a:	0c c0       	rjmp	.+24     	; 0x1294 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    127c:	2a 01       	movw	r4, r20
    127e:	f2 e0       	ldi	r31, 0x02	; 2
    1280:	4f 0e       	add	r4, r31
    1282:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1284:	84 15       	cp	r24, r4
    1286:	95 05       	cpc	r25, r5
    1288:	58 f4       	brcc	.+22     	; 0x12a0 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    128a:	1e 82       	std	Y+6, r1	; 0x06
    128c:	1f 82       	std	Y+7, r1	; 0x07
    128e:	18 86       	std	Y+8, r1	; 0x08
    1290:	19 86       	std	Y+9, r1	; 0x09
    1292:	06 c0       	rjmp	.+12     	; 0x12a0 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1294:	84 17       	cp	r24, r20
    1296:	95 07       	cpc	r25, r21
    1298:	10 f0       	brcs	.+4      	; 0x129e <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    129a:	2a 01       	movw	r4, r20
    129c:	01 c0       	rjmp	.+2      	; 0x12a0 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    129e:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    12a0:	8e 81       	ldd	r24, Y+6	; 0x06
    12a2:	9f 81       	ldd	r25, Y+7	; 0x07
    12a4:	a8 85       	ldd	r26, Y+8	; 0x08
    12a6:	b9 85       	ldd	r27, Y+9	; 0x09
    12a8:	89 2b       	or	r24, r25
    12aa:	8a 2b       	or	r24, r26
    12ac:	8b 2b       	or	r24, r27
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <xStreamBufferSend+0x88>
    12b0:	36 c0       	rjmp	.+108    	; 0x131e <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    12b2:	ce 01       	movw	r24, r28
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	e7 d7       	rcall	.+4046   	; 0x2286 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    12be:	c4 01       	movw	r24, r8
    12c0:	a2 df       	rcall	.-188    	; 0x1206 <xStreamBufferSpacesAvailable>
    12c2:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    12c4:	84 15       	cp	r24, r4
    12c6:	95 05       	cpc	r25, r5
    12c8:	38 f5       	brcc	.+78     	; 0x1318 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 94 02 16 	call	0x2c04	; 0x2c04 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    12d4:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <xTaskGetCurrentTaskHandle>
    12d8:	f4 01       	movw	r30, r8
    12da:	93 87       	std	Z+11, r25	; 0x0b
    12dc:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    12de:	0f 90       	pop	r0
    12e0:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    12e2:	ae 80       	ldd	r10, Y+6	; 0x06
    12e4:	bf 80       	ldd	r11, Y+7	; 0x07
    12e6:	c8 84       	ldd	r12, Y+8	; 0x08
    12e8:	d9 84       	ldd	r13, Y+9	; 0x09
    12ea:	e1 2c       	mov	r14, r1
    12ec:	f1 2c       	mov	r15, r1
    12ee:	00 e0       	ldi	r16, 0x00	; 0
    12f0:	10 e0       	ldi	r17, 0x00	; 0
    12f2:	98 01       	movw	r18, r16
    12f4:	40 e0       	ldi	r20, 0x00	; 0
    12f6:	50 e0       	ldi	r21, 0x00	; 0
    12f8:	ba 01       	movw	r22, r20
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	0e 94 42 13 	call	0x2684	; 0x2684 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1300:	f4 01       	movw	r30, r8
    1302:	13 86       	std	Z+11, r1	; 0x0b
    1304:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1306:	be 01       	movw	r22, r28
    1308:	6a 5f       	subi	r22, 0xFA	; 250
    130a:	7f 4f       	sbci	r23, 0xFF	; 255
    130c:	ce 01       	movw	r24, r28
    130e:	01 96       	adiw	r24, 0x01	; 1
    1310:	e1 d7       	rcall	.+4034   	; 0x22d4 <xTaskCheckForTimeOut>
    1312:	88 23       	and	r24, r24
    1314:	89 f2       	breq	.-94     	; 0x12b8 <xStreamBufferSend+0x8e>
    1316:	05 c0       	rjmp	.+10     	; 0x1322 <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1318:	0f 90       	pop	r0
    131a:	0f be       	out	0x3f, r0	; 63
                    break;
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    131e:	61 2c       	mov	r6, r1
    1320:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1322:	61 14       	cp	r6, r1
    1324:	71 04       	cpc	r7, r1
    1326:	19 f4       	brne	.+6      	; 0x132e <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1328:	c4 01       	movw	r24, r8
    132a:	6d df       	rcall	.-294    	; 0x1206 <xStreamBufferSpacesAvailable>
    132c:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    132e:	82 01       	movw	r16, r4
    1330:	93 01       	movw	r18, r6
    1332:	a1 01       	movw	r20, r2
    1334:	6a 85       	ldd	r22, Y+10	; 0x0a
    1336:	7b 85       	ldd	r23, Y+11	; 0x0b
    1338:	c4 01       	movw	r24, r8
    133a:	3e de       	rcall	.-900    	; 0xfb8 <prvWriteMessageToBuffer>
    133c:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    133e:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1340:	e9 f0       	breq	.+58     	; 0x137c <xStreamBufferSend+0x152>
    1342:	c4 01       	movw	r24, r8
    1344:	cd dd       	rcall	.-1126   	; 0xee0 <prvBytesInBuffer>
    1346:	f4 01       	movw	r30, r8
    1348:	26 81       	ldd	r18, Z+6	; 0x06
    134a:	37 81       	ldd	r19, Z+7	; 0x07
    134c:	82 17       	cp	r24, r18
    134e:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1350:	a8 f0       	brcs	.+42     	; 0x137c <xStreamBufferSend+0x152>
    1352:	90 d3       	rcall	.+1824   	; 0x1a74 <vTaskSuspendAll>
    1354:	f4 01       	movw	r30, r8
    1356:	80 85       	ldd	r24, Z+8	; 0x08
    1358:	91 85       	ldd	r25, Z+9	; 0x09
    135a:	89 2b       	or	r24, r25
    135c:	71 f0       	breq	.+28     	; 0x137a <xStreamBufferSend+0x150>
    135e:	80 85       	ldd	r24, Z+8	; 0x08
    1360:	91 85       	ldd	r25, Z+9	; 0x09
    1362:	e1 2c       	mov	r14, r1
    1364:	f1 2c       	mov	r15, r1
    1366:	00 e0       	ldi	r16, 0x00	; 0
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	a9 01       	movw	r20, r18
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <xTaskGenericNotify>
    1374:	f4 01       	movw	r30, r8
    1376:	11 86       	std	Z+9, r1	; 0x09
    1378:	10 86       	std	Z+8, r1	; 0x08
    137a:	bc d4       	rcall	.+2424   	; 0x1cf4 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    137c:	c6 01       	movw	r24, r12
    137e:	2b 96       	adiw	r28, 0x0b	; 11
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	cd bf       	out	0x3d, r28	; 61
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	1f 91       	pop	r17
    1390:	0f 91       	pop	r16
    1392:	ff 90       	pop	r15
    1394:	ef 90       	pop	r14
    1396:	df 90       	pop	r13
    1398:	cf 90       	pop	r12
    139a:	bf 90       	pop	r11
    139c:	af 90       	pop	r10
    139e:	9f 90       	pop	r9
    13a0:	8f 90       	pop	r8
    13a2:	7f 90       	pop	r7
    13a4:	6f 90       	pop	r6
    13a6:	5f 90       	pop	r5
    13a8:	4f 90       	pop	r4
    13aa:	3f 90       	pop	r3
    13ac:	2f 90       	pop	r2
    13ae:	08 95       	ret

000013b0 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    13b0:	af 92       	push	r10
    13b2:	bf 92       	push	r11
    13b4:	cf 92       	push	r12
    13b6:	df 92       	push	r13
    13b8:	ef 92       	push	r14
    13ba:	ff 92       	push	r15
    13bc:	0f 93       	push	r16
    13be:	1f 93       	push	r17
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	ec 01       	movw	r28, r24
    13c6:	7b 01       	movw	r14, r22
    13c8:	5a 01       	movw	r10, r20
    13ca:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    13cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    13ce:	80 ff       	sbrs	r24, 0
    13d0:	04 c0       	rjmp	.+8      	; 0x13da <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    13d2:	8a 01       	movw	r16, r20
    13d4:	0e 5f       	subi	r16, 0xFE	; 254
    13d6:	1f 4f       	sbci	r17, 0xFF	; 255
    13d8:	01 c0       	rjmp	.+2      	; 0x13dc <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    13da:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    13dc:	ce 01       	movw	r24, r28
    13de:	13 df       	rcall	.-474    	; 0x1206 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    13e0:	9c 01       	movw	r18, r24
    13e2:	a5 01       	movw	r20, r10
    13e4:	b7 01       	movw	r22, r14
    13e6:	ce 01       	movw	r24, r28
    13e8:	e7 dd       	rcall	.-1074   	; 0xfb8 <prvWriteMessageToBuffer>
    13ea:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    13ec:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    13ee:	c1 f0       	breq	.+48     	; 0x1420 <xStreamBufferSendFromISR+0x70>
    13f0:	ce 01       	movw	r24, r28
    13f2:	76 dd       	rcall	.-1300   	; 0xee0 <prvBytesInBuffer>
    13f4:	2e 81       	ldd	r18, Y+6	; 0x06
    13f6:	3f 81       	ldd	r19, Y+7	; 0x07
    13f8:	82 17       	cp	r24, r18
    13fa:	93 07       	cpc	r25, r19
    13fc:	88 f0       	brcs	.+34     	; 0x1420 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    13fe:	88 85       	ldd	r24, Y+8	; 0x08
    1400:	99 85       	ldd	r25, Y+9	; 0x09
    1402:	89 2b       	or	r24, r25
    1404:	69 f0       	breq	.+26     	; 0x1420 <xStreamBufferSendFromISR+0x70>
    1406:	88 85       	ldd	r24, Y+8	; 0x08
    1408:	99 85       	ldd	r25, Y+9	; 0x09
    140a:	e1 2c       	mov	r14, r1
    140c:	f1 2c       	mov	r15, r1
    140e:	00 e0       	ldi	r16, 0x00	; 0
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	a9 01       	movw	r20, r18
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <xTaskGenericNotifyFromISR>
    141c:	19 86       	std	Y+9, r1	; 0x09
    141e:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1420:	c5 01       	movw	r24, r10
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	1f 91       	pop	r17
    1428:	0f 91       	pop	r16
    142a:	ff 90       	pop	r15
    142c:	ef 90       	pop	r14
    142e:	df 90       	pop	r13
    1430:	cf 90       	pop	r12
    1432:	bf 90       	pop	r11
    1434:	af 90       	pop	r10
    1436:	08 95       	ret

00001438 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1438:	4f 92       	push	r4
    143a:	5f 92       	push	r5
    143c:	6f 92       	push	r6
    143e:	7f 92       	push	r7
    1440:	8f 92       	push	r8
    1442:	9f 92       	push	r9
    1444:	af 92       	push	r10
    1446:	bf 92       	push	r11
    1448:	cf 92       	push	r12
    144a:	df 92       	push	r13
    144c:	ef 92       	push	r14
    144e:	ff 92       	push	r15
    1450:	0f 93       	push	r16
    1452:	1f 93       	push	r17
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	ec 01       	movw	r28, r24
    145a:	2b 01       	movw	r4, r22
    145c:	3a 01       	movw	r6, r20
    145e:	58 01       	movw	r10, r16
    1460:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1462:	8e 85       	ldd	r24, Y+14	; 0x0e
    1464:	80 ff       	sbrs	r24, 0
    1466:	05 c0       	rjmp	.+10     	; 0x1472 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1468:	68 94       	set
    146a:	88 24       	eor	r8, r8
    146c:	81 f8       	bld	r8, 1
    146e:	91 2c       	mov	r9, r1
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1472:	81 2c       	mov	r8, r1
    1474:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1476:	a1 14       	cp	r10, r1
    1478:	b1 04       	cpc	r11, r1
    147a:	c1 04       	cpc	r12, r1
    147c:	d1 04       	cpc	r13, r1
    147e:	39 f1       	breq	.+78     	; 0x14ce <xStreamBufferReceive+0x96>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1486:	ce 01       	movw	r24, r28
    1488:	2b dd       	rcall	.-1450   	; 0xee0 <prvBytesInBuffer>
    148a:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    148c:	88 16       	cp	r8, r24
    148e:	99 06       	cpc	r9, r25
    1490:	40 f0       	brcs	.+16     	; 0x14a2 <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 02 16 	call	0x2c04	; 0x2c04 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    149c:	85 d7       	rcall	.+3850   	; 0x23a8 <xTaskGetCurrentTaskHandle>
    149e:	99 87       	std	Y+9, r25	; 0x09
    14a0:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    14a2:	0f 90       	pop	r0
    14a4:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    14a6:	8e 14       	cp	r8, r14
    14a8:	9f 04       	cpc	r9, r15
    14aa:	a0 f0       	brcs	.+40     	; 0x14d4 <xStreamBufferReceive+0x9c>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    14ac:	e1 2c       	mov	r14, r1
    14ae:	f1 2c       	mov	r15, r1
    14b0:	00 e0       	ldi	r16, 0x00	; 0
    14b2:	10 e0       	ldi	r17, 0x00	; 0
    14b4:	98 01       	movw	r18, r16
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	50 e0       	ldi	r21, 0x00	; 0
    14ba:	ba 01       	movw	r22, r20
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	0e 94 42 13 	call	0x2684	; 0x2684 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    14c2:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    14c4:	18 86       	std	Y+8, r1	; 0x08
    14c6:	ce 01       	movw	r24, r28
    14c8:	0b dd       	rcall	.-1514   	; 0xee0 <prvBytesInBuffer>
    14ca:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    14cc:	03 c0       	rjmp	.+6      	; 0x14d4 <xStreamBufferReceive+0x9c>
    14ce:	ce 01       	movw	r24, r28
    14d0:	07 dd       	rcall	.-1522   	; 0xee0 <prvBytesInBuffer>
    14d2:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    14d4:	8e 14       	cp	r8, r14
    14d6:	9f 04       	cpc	r9, r15
    14d8:	e8 f4       	brcc	.+58     	; 0x1514 <xStreamBufferReceive+0xdc>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    14da:	84 01       	movw	r16, r8
    14dc:	97 01       	movw	r18, r14
    14de:	a3 01       	movw	r20, r6
    14e0:	b2 01       	movw	r22, r4
    14e2:	ce 01       	movw	r24, r28
    14e4:	fb dd       	rcall	.-1034   	; 0x10dc <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    14e6:	6c 01       	movw	r12, r24
    14e8:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    14ea:	b1 f0       	breq	.+44     	; 0x1518 <xStreamBufferReceive+0xe0>
    14ec:	c3 d2       	rcall	.+1414   	; 0x1a74 <vTaskSuspendAll>
    14ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    14f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    14f2:	89 2b       	or	r24, r25
    14f4:	69 f0       	breq	.+26     	; 0x1510 <xStreamBufferReceive+0xd8>
    14f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    14f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    14fa:	e1 2c       	mov	r14, r1
    14fc:	f1 2c       	mov	r15, r1
    14fe:	00 e0       	ldi	r16, 0x00	; 0
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	a9 01       	movw	r20, r18
    1506:	60 e0       	ldi	r22, 0x00	; 0
    1508:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <xTaskGenericNotify>
    150c:	1b 86       	std	Y+11, r1	; 0x0b
    150e:	1a 86       	std	Y+10, r1	; 0x0a
    1510:	f1 d3       	rcall	.+2018   	; 0x1cf4 <xTaskResumeAll>
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <xStreamBufferReceive+0xe0>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1514:	c1 2c       	mov	r12, r1
    1516:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1518:	c6 01       	movw	r24, r12
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	1f 91       	pop	r17
    1520:	0f 91       	pop	r16
    1522:	ff 90       	pop	r15
    1524:	ef 90       	pop	r14
    1526:	df 90       	pop	r13
    1528:	cf 90       	pop	r12
    152a:	bf 90       	pop	r11
    152c:	af 90       	pop	r10
    152e:	9f 90       	pop	r9
    1530:	8f 90       	pop	r8
    1532:	7f 90       	pop	r7
    1534:	6f 90       	pop	r6
    1536:	5f 90       	pop	r5
    1538:	4f 90       	pop	r4
    153a:	08 95       	ret

0000153c <prvResetNextTaskUnblockTime>:
    153c:	e0 91 fb 15 	lds	r30, 0x15FB	; 0x8015fb <pxDelayedTaskList>
    1540:	f0 91 fc 15 	lds	r31, 0x15FC	; 0x8015fc <pxDelayedTaskList+0x1>
    1544:	80 81       	ld	r24, Z
    1546:	81 11       	cpse	r24, r1
    1548:	0c c0       	rjmp	.+24     	; 0x1562 <prvResetNextTaskUnblockTime+0x26>
    154a:	8f ef       	ldi	r24, 0xFF	; 255
    154c:	9f ef       	ldi	r25, 0xFF	; 255
    154e:	dc 01       	movw	r26, r24
    1550:	80 93 c5 15 	sts	0x15C5, r24	; 0x8015c5 <xNextTaskUnblockTime>
    1554:	90 93 c6 15 	sts	0x15C6, r25	; 0x8015c6 <xNextTaskUnblockTime+0x1>
    1558:	a0 93 c7 15 	sts	0x15C7, r26	; 0x8015c7 <xNextTaskUnblockTime+0x2>
    155c:	b0 93 c8 15 	sts	0x15C8, r27	; 0x8015c8 <xNextTaskUnblockTime+0x3>
    1560:	08 95       	ret
    1562:	e0 91 fb 15 	lds	r30, 0x15FB	; 0x8015fb <pxDelayedTaskList>
    1566:	f0 91 fc 15 	lds	r31, 0x15FC	; 0x8015fc <pxDelayedTaskList+0x1>
    156a:	07 80       	ldd	r0, Z+7	; 0x07
    156c:	f0 85       	ldd	r31, Z+8	; 0x08
    156e:	e0 2d       	mov	r30, r0
    1570:	80 81       	ld	r24, Z
    1572:	91 81       	ldd	r25, Z+1	; 0x01
    1574:	a2 81       	ldd	r26, Z+2	; 0x02
    1576:	b3 81       	ldd	r27, Z+3	; 0x03
    1578:	80 93 c5 15 	sts	0x15C5, r24	; 0x8015c5 <xNextTaskUnblockTime>
    157c:	90 93 c6 15 	sts	0x15C6, r25	; 0x8015c6 <xNextTaskUnblockTime+0x1>
    1580:	a0 93 c7 15 	sts	0x15C7, r26	; 0x8015c7 <xNextTaskUnblockTime+0x2>
    1584:	b0 93 c8 15 	sts	0x15C8, r27	; 0x8015c8 <xNextTaskUnblockTime+0x3>
    1588:	08 95       	ret

0000158a <prvDeleteTCB>:
    158a:	cf 93       	push	r28
    158c:	df 93       	push	r29
    158e:	ec 01       	movw	r28, r24
    1590:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1592:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1594:	0e 94 24 02 	call	0x448	; 0x448 <vPortFree>
    1598:	ce 01       	movw	r24, r28
    159a:	0e 94 24 02 	call	0x448	; 0x448 <vPortFree>
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	08 95       	ret

000015a4 <prvInitialiseNewTask>:
    15a4:	4f 92       	push	r4
    15a6:	5f 92       	push	r5
    15a8:	6f 92       	push	r6
    15aa:	7f 92       	push	r7
    15ac:	8f 92       	push	r8
    15ae:	9f 92       	push	r9
    15b0:	af 92       	push	r10
    15b2:	bf 92       	push	r11
    15b4:	cf 92       	push	r12
    15b6:	df 92       	push	r13
    15b8:	ef 92       	push	r14
    15ba:	ff 92       	push	r15
    15bc:	0f 93       	push	r16
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    15c2:	2c 01       	movw	r4, r24
    15c4:	5b 01       	movw	r10, r22
    15c6:	4a 01       	movw	r8, r20
    15c8:	39 01       	movw	r6, r18
    15ca:	e6 01       	movw	r28, r12
    15cc:	65 ea       	ldi	r22, 0xA5	; 165
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15d4:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <memset>
    15d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15dc:	21 e0       	ldi	r18, 0x01	; 1
    15de:	82 1a       	sub	r8, r18
    15e0:	91 08       	sbc	r9, r1
    15e2:	88 0e       	add	r8, r24
    15e4:	99 1e       	adc	r9, r25
    15e6:	a1 14       	cp	r10, r1
    15e8:	b1 04       	cpc	r11, r1
    15ea:	89 f4       	brne	.+34     	; 0x160e <prvInitialiseNewTask+0x6a>
    15ec:	15 c0       	rjmp	.+42     	; 0x1618 <prvInitialiseNewTask+0x74>
    15ee:	82 2f       	mov	r24, r18
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	f5 01       	movw	r30, r10
    15f4:	e8 0f       	add	r30, r24
    15f6:	f9 1f       	adc	r31, r25
    15f8:	30 81       	ld	r19, Z
    15fa:	de 01       	movw	r26, r28
    15fc:	a8 0f       	add	r26, r24
    15fe:	b9 1f       	adc	r27, r25
    1600:	5d 96       	adiw	r26, 0x1d	; 29
    1602:	3c 93       	st	X, r19
    1604:	80 81       	ld	r24, Z
    1606:	88 23       	and	r24, r24
    1608:	29 f0       	breq	.+10     	; 0x1614 <prvInitialiseNewTask+0x70>
    160a:	2f 5f       	subi	r18, 0xFF	; 255
    160c:	01 c0       	rjmp	.+2      	; 0x1610 <prvInitialiseNewTask+0x6c>
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	20 31       	cpi	r18, 0x10	; 16
    1612:	68 f3       	brcs	.-38     	; 0x15ee <prvInitialiseNewTask+0x4a>
    1614:	1c a6       	std	Y+44, r1	; 0x2c
    1616:	01 c0       	rjmp	.+2      	; 0x161a <prvInitialiseNewTask+0x76>
    1618:	1d 8e       	std	Y+29, r1	; 0x1d
    161a:	0a 30       	cpi	r16, 0x0A	; 10
    161c:	08 f0       	brcs	.+2      	; 0x1620 <prvInitialiseNewTask+0x7c>
    161e:	09 e0       	ldi	r16, 0x09	; 9
    1620:	0a 8f       	std	Y+26, r16	; 0x1a
    1622:	0d a7       	std	Y+45, r16	; 0x2d
    1624:	1e a6       	std	Y+46, r1	; 0x2e
    1626:	ce 01       	movw	r24, r28
    1628:	02 96       	adiw	r24, 0x02	; 2
    162a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <vListInitialiseItem>
    162e:	ce 01       	movw	r24, r28
    1630:	0e 96       	adiw	r24, 0x0e	; 14
    1632:	0e 94 72 02 	call	0x4e4	; 0x4e4 <vListInitialiseItem>
    1636:	db 87       	std	Y+11, r29	; 0x0b
    1638:	ca 87       	std	Y+10, r28	; 0x0a
    163a:	8a e0       	ldi	r24, 0x0A	; 10
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	a0 e0       	ldi	r26, 0x00	; 0
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	80 1b       	sub	r24, r16
    1644:	91 09       	sbc	r25, r1
    1646:	a1 09       	sbc	r26, r1
    1648:	b1 09       	sbc	r27, r1
    164a:	8e 87       	std	Y+14, r24	; 0x0e
    164c:	9f 87       	std	Y+15, r25	; 0x0f
    164e:	a8 8b       	std	Y+16, r26	; 0x10
    1650:	b9 8b       	std	Y+17, r27	; 0x11
    1652:	df 8b       	std	Y+23, r29	; 0x17
    1654:	ce 8b       	std	Y+22, r28	; 0x16
    1656:	84 e0       	ldi	r24, 0x04	; 4
    1658:	fe 01       	movw	r30, r28
    165a:	bf 96       	adiw	r30, 0x2f	; 47
    165c:	df 01       	movw	r26, r30
    165e:	1d 92       	st	X+, r1
    1660:	8a 95       	dec	r24
    1662:	e9 f7       	brne	.-6      	; 0x165e <prvInitialiseNewTask+0xba>
    1664:	1b aa       	std	Y+51, r1	; 0x33
    1666:	a3 01       	movw	r20, r6
    1668:	b2 01       	movw	r22, r4
    166a:	c4 01       	movw	r24, r8
    166c:	0e 94 e6 02 	call	0x5cc	; 0x5cc <pxPortInitialiseStack>
    1670:	99 83       	std	Y+1, r25	; 0x01
    1672:	88 83       	st	Y, r24
    1674:	e1 14       	cp	r14, r1
    1676:	f1 04       	cpc	r15, r1
    1678:	19 f0       	breq	.+6      	; 0x1680 <prvInitialiseNewTask+0xdc>
    167a:	f7 01       	movw	r30, r14
    167c:	d1 83       	std	Z+1, r29	; 0x01
    167e:	c0 83       	st	Z, r28
    1680:	df 91       	pop	r29
    1682:	cf 91       	pop	r28
    1684:	0f 91       	pop	r16
    1686:	ff 90       	pop	r15
    1688:	ef 90       	pop	r14
    168a:	df 90       	pop	r13
    168c:	cf 90       	pop	r12
    168e:	bf 90       	pop	r11
    1690:	af 90       	pop	r10
    1692:	9f 90       	pop	r9
    1694:	8f 90       	pop	r8
    1696:	7f 90       	pop	r7
    1698:	6f 90       	pop	r6
    169a:	5f 90       	pop	r5
    169c:	4f 90       	pop	r4
    169e:	08 95       	ret

000016a0 <prvInitialiseTaskLists>:
    16a0:	cf 93       	push	r28
    16a2:	c0 e0       	ldi	r28, 0x00	; 0
    16a4:	09 c0       	rjmp	.+18     	; 0x16b8 <prvInitialiseTaskLists+0x18>
    16a6:	2b e0       	ldi	r18, 0x0B	; 11
    16a8:	c2 9f       	mul	r28, r18
    16aa:	c0 01       	movw	r24, r0
    16ac:	11 24       	eor	r1, r1
    16ae:	8d 5e       	subi	r24, 0xED	; 237
    16b0:	99 4e       	sbci	r25, 0xE9	; 233
    16b2:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    16b6:	cf 5f       	subi	r28, 0xFF	; 255
    16b8:	ca 30       	cpi	r28, 0x0A	; 10
    16ba:	a8 f3       	brcs	.-22     	; 0x16a6 <prvInitialiseTaskLists+0x6>
    16bc:	88 e0       	ldi	r24, 0x08	; 8
    16be:	96 e1       	ldi	r25, 0x16	; 22
    16c0:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    16c4:	8d ef       	ldi	r24, 0xFD	; 253
    16c6:	95 e1       	ldi	r25, 0x15	; 21
    16c8:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    16cc:	8e ee       	ldi	r24, 0xEE	; 238
    16ce:	95 e1       	ldi	r25, 0x15	; 21
    16d0:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    16d4:	83 ee       	ldi	r24, 0xE3	; 227
    16d6:	95 e1       	ldi	r25, 0x15	; 21
    16d8:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    16dc:	87 ed       	ldi	r24, 0xD7	; 215
    16de:	95 e1       	ldi	r25, 0x15	; 21
    16e0:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    16e4:	88 e0       	ldi	r24, 0x08	; 8
    16e6:	96 e1       	ldi	r25, 0x16	; 22
    16e8:	90 93 fc 15 	sts	0x15FC, r25	; 0x8015fc <pxDelayedTaskList+0x1>
    16ec:	80 93 fb 15 	sts	0x15FB, r24	; 0x8015fb <pxDelayedTaskList>
    16f0:	8d ef       	ldi	r24, 0xFD	; 253
    16f2:	95 e1       	ldi	r25, 0x15	; 21
    16f4:	90 93 fa 15 	sts	0x15FA, r25	; 0x8015fa <pxOverflowDelayedTaskList+0x1>
    16f8:	80 93 f9 15 	sts	0x15F9, r24	; 0x8015f9 <pxOverflowDelayedTaskList>
    16fc:	cf 91       	pop	r28
    16fe:	08 95       	ret

00001700 <prvAddNewTaskToReadyList>:
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	ec 01       	movw	r28, r24
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	0f 92       	push	r0
    170c:	80 91 d6 15 	lds	r24, 0x15D6	; 0x8015d6 <uxCurrentNumberOfTasks>
    1710:	8f 5f       	subi	r24, 0xFF	; 255
    1712:	80 93 d6 15 	sts	0x15D6, r24	; 0x8015d6 <uxCurrentNumberOfTasks>
    1716:	80 91 81 16 	lds	r24, 0x1681	; 0x801681 <pxCurrentTCB>
    171a:	90 91 82 16 	lds	r25, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    171e:	89 2b       	or	r24, r25
    1720:	51 f4       	brne	.+20     	; 0x1736 <prvAddNewTaskToReadyList+0x36>
    1722:	d0 93 82 16 	sts	0x1682, r29	; 0x801682 <pxCurrentTCB+0x1>
    1726:	c0 93 81 16 	sts	0x1681, r28	; 0x801681 <pxCurrentTCB>
    172a:	80 91 d6 15 	lds	r24, 0x15D6	; 0x8015d6 <uxCurrentNumberOfTasks>
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	91 f4       	brne	.+36     	; 0x1756 <prvAddNewTaskToReadyList+0x56>
    1732:	b6 df       	rcall	.-148    	; 0x16a0 <prvInitialiseTaskLists>
    1734:	10 c0       	rjmp	.+32     	; 0x1756 <prvAddNewTaskToReadyList+0x56>
    1736:	80 91 d0 15 	lds	r24, 0x15D0	; 0x8015d0 <xSchedulerRunning>
    173a:	81 11       	cpse	r24, r1
    173c:	0c c0       	rjmp	.+24     	; 0x1756 <prvAddNewTaskToReadyList+0x56>
    173e:	e0 91 81 16 	lds	r30, 0x1681	; 0x801681 <pxCurrentTCB>
    1742:	f0 91 82 16 	lds	r31, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    1746:	92 8d       	ldd	r25, Z+26	; 0x1a
    1748:	8a 8d       	ldd	r24, Y+26	; 0x1a
    174a:	89 17       	cp	r24, r25
    174c:	20 f0       	brcs	.+8      	; 0x1756 <prvAddNewTaskToReadyList+0x56>
    174e:	d0 93 82 16 	sts	0x1682, r29	; 0x801682 <pxCurrentTCB+0x1>
    1752:	c0 93 81 16 	sts	0x1681, r28	; 0x801681 <pxCurrentTCB>
    1756:	80 91 c9 15 	lds	r24, 0x15C9	; 0x8015c9 <uxTaskNumber>
    175a:	8f 5f       	subi	r24, 0xFF	; 255
    175c:	80 93 c9 15 	sts	0x15C9, r24	; 0x8015c9 <uxTaskNumber>
    1760:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1762:	80 91 d1 15 	lds	r24, 0x15D1	; 0x8015d1 <uxTopReadyPriority>
    1766:	8e 17       	cp	r24, r30
    1768:	10 f4       	brcc	.+4      	; 0x176e <prvAddNewTaskToReadyList+0x6e>
    176a:	e0 93 d1 15 	sts	0x15D1, r30	; 0x8015d1 <uxTopReadyPriority>
    176e:	8b e0       	ldi	r24, 0x0B	; 11
    1770:	8e 9f       	mul	r24, r30
    1772:	f0 01       	movw	r30, r0
    1774:	11 24       	eor	r1, r1
    1776:	ed 5e       	subi	r30, 0xED	; 237
    1778:	f9 4e       	sbci	r31, 0xE9	; 233
    177a:	01 80       	ldd	r0, Z+1	; 0x01
    177c:	f2 81       	ldd	r31, Z+2	; 0x02
    177e:	e0 2d       	mov	r30, r0
    1780:	ff 83       	std	Y+7, r31	; 0x07
    1782:	ee 83       	std	Y+6, r30	; 0x06
    1784:	26 81       	ldd	r18, Z+6	; 0x06
    1786:	37 81       	ldd	r19, Z+7	; 0x07
    1788:	39 87       	std	Y+9, r19	; 0x09
    178a:	28 87       	std	Y+8, r18	; 0x08
    178c:	a6 81       	ldd	r26, Z+6	; 0x06
    178e:	b7 81       	ldd	r27, Z+7	; 0x07
    1790:	9e 01       	movw	r18, r28
    1792:	2e 5f       	subi	r18, 0xFE	; 254
    1794:	3f 4f       	sbci	r19, 0xFF	; 255
    1796:	15 96       	adiw	r26, 0x05	; 5
    1798:	3c 93       	st	X, r19
    179a:	2e 93       	st	-X, r18
    179c:	14 97       	sbiw	r26, 0x04	; 4
    179e:	37 83       	std	Z+7, r19	; 0x07
    17a0:	26 83       	std	Z+6, r18	; 0x06
    17a2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    17a4:	8e 9f       	mul	r24, r30
    17a6:	f0 01       	movw	r30, r0
    17a8:	11 24       	eor	r1, r1
    17aa:	ed 5e       	subi	r30, 0xED	; 237
    17ac:	f9 4e       	sbci	r31, 0xE9	; 233
    17ae:	fd 87       	std	Y+13, r31	; 0x0d
    17b0:	ec 87       	std	Y+12, r30	; 0x0c
    17b2:	80 81       	ld	r24, Z
    17b4:	8f 5f       	subi	r24, 0xFF	; 255
    17b6:	80 83       	st	Z, r24
    17b8:	0f 90       	pop	r0
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	80 91 d0 15 	lds	r24, 0x15D0	; 0x8015d0 <xSchedulerRunning>
    17c0:	88 23       	and	r24, r24
    17c2:	51 f0       	breq	.+20     	; 0x17d8 <prvAddNewTaskToReadyList+0xd8>
    17c4:	e0 91 81 16 	lds	r30, 0x1681	; 0x801681 <pxCurrentTCB>
    17c8:	f0 91 82 16 	lds	r31, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    17cc:	92 8d       	ldd	r25, Z+26	; 0x1a
    17ce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17d0:	98 17       	cp	r25, r24
    17d2:	10 f4       	brcc	.+4      	; 0x17d8 <prvAddNewTaskToReadyList+0xd8>
    17d4:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	08 95       	ret

000017de <prvCheckTasksWaitingTermination>:
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
    17e2:	1b c0       	rjmp	.+54     	; 0x181a <prvCheckTasksWaitingTermination+0x3c>
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	0f 92       	push	r0
    17ea:	e0 91 ea 15 	lds	r30, 0x15EA	; 0x8015ea <xTasksWaitingTermination+0x7>
    17ee:	f0 91 eb 15 	lds	r31, 0x15EB	; 0x8015eb <xTasksWaitingTermination+0x8>
    17f2:	c0 85       	ldd	r28, Z+8	; 0x08
    17f4:	d1 85       	ldd	r29, Z+9	; 0x09
    17f6:	ce 01       	movw	r24, r28
    17f8:	02 96       	adiw	r24, 0x02	; 2
    17fa:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
    17fe:	80 91 d6 15 	lds	r24, 0x15D6	; 0x8015d6 <uxCurrentNumberOfTasks>
    1802:	81 50       	subi	r24, 0x01	; 1
    1804:	80 93 d6 15 	sts	0x15D6, r24	; 0x8015d6 <uxCurrentNumberOfTasks>
    1808:	80 91 e2 15 	lds	r24, 0x15E2	; 0x8015e2 <uxDeletedTasksWaitingCleanUp>
    180c:	81 50       	subi	r24, 0x01	; 1
    180e:	80 93 e2 15 	sts	0x15E2, r24	; 0x8015e2 <uxDeletedTasksWaitingCleanUp>
    1812:	0f 90       	pop	r0
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	ce 01       	movw	r24, r28
    1818:	b8 de       	rcall	.-656    	; 0x158a <prvDeleteTCB>
    181a:	80 91 e2 15 	lds	r24, 0x15E2	; 0x8015e2 <uxDeletedTasksWaitingCleanUp>
    181e:	81 11       	cpse	r24, r1
    1820:	e1 cf       	rjmp	.-62     	; 0x17e4 <prvCheckTasksWaitingTermination+0x6>
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	08 95       	ret

00001828 <prvAddCurrentTaskToDelayedList>:
    1828:	8f 92       	push	r8
    182a:	9f 92       	push	r9
    182c:	af 92       	push	r10
    182e:	bf 92       	push	r11
    1830:	cf 92       	push	r12
    1832:	df 92       	push	r13
    1834:	ef 92       	push	r14
    1836:	ff 92       	push	r15
    1838:	cf 93       	push	r28
    183a:	df 93       	push	r29
    183c:	6b 01       	movw	r12, r22
    183e:	7c 01       	movw	r14, r24
    1840:	c4 2f       	mov	r28, r20
    1842:	80 90 d2 15 	lds	r8, 0x15D2	; 0x8015d2 <xTickCount>
    1846:	90 90 d3 15 	lds	r9, 0x15D3	; 0x8015d3 <xTickCount+0x1>
    184a:	a0 90 d4 15 	lds	r10, 0x15D4	; 0x8015d4 <xTickCount+0x2>
    184e:	b0 90 d5 15 	lds	r11, 0x15D5	; 0x8015d5 <xTickCount+0x3>
    1852:	80 91 81 16 	lds	r24, 0x1681	; 0x801681 <pxCurrentTCB>
    1856:	90 91 82 16 	lds	r25, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    185a:	02 96       	adiw	r24, 0x02	; 2
    185c:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
    1860:	8f ef       	ldi	r24, 0xFF	; 255
    1862:	c8 16       	cp	r12, r24
    1864:	d8 06       	cpc	r13, r24
    1866:	e8 06       	cpc	r14, r24
    1868:	f8 06       	cpc	r15, r24
    186a:	b1 f5       	brne	.+108    	; 0x18d8 <prvAddCurrentTaskToDelayedList+0xb0>
    186c:	cc 23       	and	r28, r28
    186e:	a1 f1       	breq	.+104    	; 0x18d8 <prvAddCurrentTaskToDelayedList+0xb0>
    1870:	e7 ed       	ldi	r30, 0xD7	; 215
    1872:	f5 e1       	ldi	r31, 0x15	; 21
    1874:	a1 81       	ldd	r26, Z+1	; 0x01
    1876:	b2 81       	ldd	r27, Z+2	; 0x02
    1878:	c0 91 81 16 	lds	r28, 0x1681	; 0x801681 <pxCurrentTCB>
    187c:	d0 91 82 16 	lds	r29, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    1880:	bf 83       	std	Y+7, r27	; 0x07
    1882:	ae 83       	std	Y+6, r26	; 0x06
    1884:	c0 91 81 16 	lds	r28, 0x1681	; 0x801681 <pxCurrentTCB>
    1888:	d0 91 82 16 	lds	r29, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    188c:	16 96       	adiw	r26, 0x06	; 6
    188e:	8d 91       	ld	r24, X+
    1890:	9c 91       	ld	r25, X
    1892:	17 97       	sbiw	r26, 0x07	; 7
    1894:	99 87       	std	Y+9, r25	; 0x09
    1896:	88 87       	std	Y+8, r24	; 0x08
    1898:	16 96       	adiw	r26, 0x06	; 6
    189a:	cd 91       	ld	r28, X+
    189c:	dc 91       	ld	r29, X
    189e:	17 97       	sbiw	r26, 0x07	; 7
    18a0:	80 91 81 16 	lds	r24, 0x1681	; 0x801681 <pxCurrentTCB>
    18a4:	90 91 82 16 	lds	r25, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    18a8:	02 96       	adiw	r24, 0x02	; 2
    18aa:	9d 83       	std	Y+5, r25	; 0x05
    18ac:	8c 83       	std	Y+4, r24	; 0x04
    18ae:	80 91 81 16 	lds	r24, 0x1681	; 0x801681 <pxCurrentTCB>
    18b2:	90 91 82 16 	lds	r25, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    18b6:	02 96       	adiw	r24, 0x02	; 2
    18b8:	17 96       	adiw	r26, 0x07	; 7
    18ba:	9c 93       	st	X, r25
    18bc:	8e 93       	st	-X, r24
    18be:	16 97       	sbiw	r26, 0x06	; 6
    18c0:	a0 91 81 16 	lds	r26, 0x1681	; 0x801681 <pxCurrentTCB>
    18c4:	b0 91 82 16 	lds	r27, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    18c8:	1d 96       	adiw	r26, 0x0d	; 13
    18ca:	fc 93       	st	X, r31
    18cc:	ee 93       	st	-X, r30
    18ce:	1c 97       	sbiw	r26, 0x0c	; 12
    18d0:	80 81       	ld	r24, Z
    18d2:	8f 5f       	subi	r24, 0xFF	; 255
    18d4:	80 83       	st	Z, r24
    18d6:	3f c0       	rjmp	.+126    	; 0x1956 <prvAddCurrentTaskToDelayedList+0x12e>
    18d8:	c8 0c       	add	r12, r8
    18da:	d9 1c       	adc	r13, r9
    18dc:	ea 1c       	adc	r14, r10
    18de:	fb 1c       	adc	r15, r11
    18e0:	e0 91 81 16 	lds	r30, 0x1681	; 0x801681 <pxCurrentTCB>
    18e4:	f0 91 82 16 	lds	r31, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    18e8:	c2 82       	std	Z+2, r12	; 0x02
    18ea:	d3 82       	std	Z+3, r13	; 0x03
    18ec:	e4 82       	std	Z+4, r14	; 0x04
    18ee:	f5 82       	std	Z+5, r15	; 0x05
    18f0:	c8 14       	cp	r12, r8
    18f2:	d9 04       	cpc	r13, r9
    18f4:	ea 04       	cpc	r14, r10
    18f6:	fb 04       	cpc	r15, r11
    18f8:	68 f4       	brcc	.+26     	; 0x1914 <prvAddCurrentTaskToDelayedList+0xec>
    18fa:	60 91 81 16 	lds	r22, 0x1681	; 0x801681 <pxCurrentTCB>
    18fe:	70 91 82 16 	lds	r23, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    1902:	80 91 f9 15 	lds	r24, 0x15F9	; 0x8015f9 <pxOverflowDelayedTaskList>
    1906:	90 91 fa 15 	lds	r25, 0x15FA	; 0x8015fa <pxOverflowDelayedTaskList+0x1>
    190a:	6e 5f       	subi	r22, 0xFE	; 254
    190c:	7f 4f       	sbci	r23, 0xFF	; 255
    190e:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    1912:	21 c0       	rjmp	.+66     	; 0x1956 <prvAddCurrentTaskToDelayedList+0x12e>
    1914:	60 91 81 16 	lds	r22, 0x1681	; 0x801681 <pxCurrentTCB>
    1918:	70 91 82 16 	lds	r23, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    191c:	80 91 fb 15 	lds	r24, 0x15FB	; 0x8015fb <pxDelayedTaskList>
    1920:	90 91 fc 15 	lds	r25, 0x15FC	; 0x8015fc <pxDelayedTaskList+0x1>
    1924:	6e 5f       	subi	r22, 0xFE	; 254
    1926:	7f 4f       	sbci	r23, 0xFF	; 255
    1928:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    192c:	80 91 c5 15 	lds	r24, 0x15C5	; 0x8015c5 <xNextTaskUnblockTime>
    1930:	90 91 c6 15 	lds	r25, 0x15C6	; 0x8015c6 <xNextTaskUnblockTime+0x1>
    1934:	a0 91 c7 15 	lds	r26, 0x15C7	; 0x8015c7 <xNextTaskUnblockTime+0x2>
    1938:	b0 91 c8 15 	lds	r27, 0x15C8	; 0x8015c8 <xNextTaskUnblockTime+0x3>
    193c:	c8 16       	cp	r12, r24
    193e:	d9 06       	cpc	r13, r25
    1940:	ea 06       	cpc	r14, r26
    1942:	fb 06       	cpc	r15, r27
    1944:	40 f4       	brcc	.+16     	; 0x1956 <prvAddCurrentTaskToDelayedList+0x12e>
    1946:	c0 92 c5 15 	sts	0x15C5, r12	; 0x8015c5 <xNextTaskUnblockTime>
    194a:	d0 92 c6 15 	sts	0x15C6, r13	; 0x8015c6 <xNextTaskUnblockTime+0x1>
    194e:	e0 92 c7 15 	sts	0x15C7, r14	; 0x8015c7 <xNextTaskUnblockTime+0x2>
    1952:	f0 92 c8 15 	sts	0x15C8, r15	; 0x8015c8 <xNextTaskUnblockTime+0x3>
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	ff 90       	pop	r15
    195c:	ef 90       	pop	r14
    195e:	df 90       	pop	r13
    1960:	cf 90       	pop	r12
    1962:	bf 90       	pop	r11
    1964:	af 90       	pop	r10
    1966:	9f 90       	pop	r9
    1968:	8f 90       	pop	r8
    196a:	08 95       	ret

0000196c <xTaskCreate>:
    196c:	2f 92       	push	r2
    196e:	3f 92       	push	r3
    1970:	4f 92       	push	r4
    1972:	5f 92       	push	r5
    1974:	6f 92       	push	r6
    1976:	7f 92       	push	r7
    1978:	8f 92       	push	r8
    197a:	9f 92       	push	r9
    197c:	af 92       	push	r10
    197e:	bf 92       	push	r11
    1980:	cf 92       	push	r12
    1982:	df 92       	push	r13
    1984:	ef 92       	push	r14
    1986:	ff 92       	push	r15
    1988:	0f 93       	push	r16
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	3c 01       	movw	r6, r24
    1990:	1b 01       	movw	r2, r22
    1992:	4a 01       	movw	r8, r20
    1994:	29 01       	movw	r4, r18
    1996:	ca 01       	movw	r24, r20
    1998:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <pvPortMalloc>
    199c:	6c 01       	movw	r12, r24
    199e:	89 2b       	or	r24, r25
    19a0:	71 f0       	breq	.+28     	; 0x19be <xTaskCreate+0x52>
    19a2:	84 e3       	ldi	r24, 0x34	; 52
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <pvPortMalloc>
    19aa:	ec 01       	movw	r28, r24
    19ac:	89 2b       	or	r24, r25
    19ae:	19 f0       	breq	.+6      	; 0x19b6 <xTaskCreate+0x4a>
    19b0:	dc 8e       	std	Y+28, r13	; 0x1c
    19b2:	cb 8e       	std	Y+27, r12	; 0x1b
    19b4:	06 c0       	rjmp	.+12     	; 0x19c2 <xTaskCreate+0x56>
    19b6:	c6 01       	movw	r24, r12
    19b8:	0e 94 24 02 	call	0x448	; 0x448 <vPortFree>
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <xTaskCreate+0x56>
    19be:	c0 e0       	ldi	r28, 0x00	; 0
    19c0:	d0 e0       	ldi	r29, 0x00	; 0
    19c2:	20 97       	sbiw	r28, 0x00	; 0
    19c4:	61 f0       	breq	.+24     	; 0x19de <xTaskCreate+0x72>
    19c6:	a1 2c       	mov	r10, r1
    19c8:	b1 2c       	mov	r11, r1
    19ca:	6e 01       	movw	r12, r28
    19cc:	92 01       	movw	r18, r4
    19ce:	a4 01       	movw	r20, r8
    19d0:	b1 01       	movw	r22, r2
    19d2:	c3 01       	movw	r24, r6
    19d4:	e7 dd       	rcall	.-1074   	; 0x15a4 <prvInitialiseNewTask>
    19d6:	ce 01       	movw	r24, r28
    19d8:	93 de       	rcall	.-730    	; 0x1700 <prvAddNewTaskToReadyList>
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	01 c0       	rjmp	.+2      	; 0x19e0 <xTaskCreate+0x74>
    19de:	8f ef       	ldi	r24, 0xFF	; 255
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	0f 91       	pop	r16
    19e6:	ff 90       	pop	r15
    19e8:	ef 90       	pop	r14
    19ea:	df 90       	pop	r13
    19ec:	cf 90       	pop	r12
    19ee:	bf 90       	pop	r11
    19f0:	af 90       	pop	r10
    19f2:	9f 90       	pop	r9
    19f4:	8f 90       	pop	r8
    19f6:	7f 90       	pop	r7
    19f8:	6f 90       	pop	r6
    19fa:	5f 90       	pop	r5
    19fc:	4f 90       	pop	r4
    19fe:	3f 90       	pop	r3
    1a00:	2f 90       	pop	r2
    1a02:	08 95       	ret

00001a04 <vTaskStartScheduler>:
    1a04:	ef 92       	push	r14
    1a06:	ff 92       	push	r15
    1a08:	0f 93       	push	r16
    1a0a:	0f 2e       	mov	r0, r31
    1a0c:	f3 ec       	ldi	r31, 0xC3	; 195
    1a0e:	ef 2e       	mov	r14, r31
    1a10:	f5 e1       	ldi	r31, 0x15	; 21
    1a12:	ff 2e       	mov	r15, r31
    1a14:	f0 2d       	mov	r31, r0
    1a16:	00 e0       	ldi	r16, 0x00	; 0
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	40 ec       	ldi	r20, 0xC0	; 192
    1a1e:	50 e0       	ldi	r21, 0x00	; 0
    1a20:	6f e6       	ldi	r22, 0x6F	; 111
    1a22:	72 e0       	ldi	r23, 0x02	; 2
    1a24:	8d ec       	ldi	r24, 0xCD	; 205
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	a1 df       	rcall	.-190    	; 0x196c <xTaskCreate>
    1a2a:	81 30       	cpi	r24, 0x01	; 1
    1a2c:	11 f4       	brne	.+4      	; 0x1a32 <vTaskStartScheduler+0x2e>
    1a2e:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <xTimerCreateTimerTask>
    1a32:	81 30       	cpi	r24, 0x01	; 1
    1a34:	c9 f4       	brne	.+50     	; 0x1a68 <vTaskStartScheduler+0x64>
    1a36:	f8 94       	cli
    1a38:	8f ef       	ldi	r24, 0xFF	; 255
    1a3a:	9f ef       	ldi	r25, 0xFF	; 255
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	80 93 c5 15 	sts	0x15C5, r24	; 0x8015c5 <xNextTaskUnblockTime>
    1a42:	90 93 c6 15 	sts	0x15C6, r25	; 0x8015c6 <xNextTaskUnblockTime+0x1>
    1a46:	a0 93 c7 15 	sts	0x15C7, r26	; 0x8015c7 <xNextTaskUnblockTime+0x2>
    1a4a:	b0 93 c8 15 	sts	0x15C8, r27	; 0x8015c8 <xNextTaskUnblockTime+0x3>
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	80 93 d0 15 	sts	0x15D0, r24	; 0x8015d0 <xSchedulerRunning>
    1a54:	10 92 d2 15 	sts	0x15D2, r1	; 0x8015d2 <xTickCount>
    1a58:	10 92 d3 15 	sts	0x15D3, r1	; 0x8015d3 <xTickCount+0x1>
    1a5c:	10 92 d4 15 	sts	0x15D4, r1	; 0x8015d4 <xTickCount+0x2>
    1a60:	10 92 d5 15 	sts	0x15D5, r1	; 0x8015d5 <xTickCount+0x3>
    1a64:	0e 94 fd 02 	call	0x5fa	; 0x5fa <xPortStartScheduler>
    1a68:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1a6c:	0f 91       	pop	r16
    1a6e:	ff 90       	pop	r15
    1a70:	ef 90       	pop	r14
    1a72:	08 95       	ret

00001a74 <vTaskSuspendAll>:
    1a74:	80 91 c2 15 	lds	r24, 0x15C2	; 0x8015c2 <uxSchedulerSuspended>
    1a78:	8f 5f       	subi	r24, 0xFF	; 255
    1a7a:	80 93 c2 15 	sts	0x15C2, r24	; 0x8015c2 <uxSchedulerSuspended>
    1a7e:	08 95       	ret

00001a80 <xTaskGetTickCount>:
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	0f 92       	push	r0
    1a86:	60 91 d2 15 	lds	r22, 0x15D2	; 0x8015d2 <xTickCount>
    1a8a:	70 91 d3 15 	lds	r23, 0x15D3	; 0x8015d3 <xTickCount+0x1>
    1a8e:	80 91 d4 15 	lds	r24, 0x15D4	; 0x8015d4 <xTickCount+0x2>
    1a92:	90 91 d5 15 	lds	r25, 0x15D5	; 0x8015d5 <xTickCount+0x3>
    1a96:	0f 90       	pop	r0
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	08 95       	ret

00001a9c <xTaskIncrementTick>:
    1a9c:	cf 92       	push	r12
    1a9e:	df 92       	push	r13
    1aa0:	ef 92       	push	r14
    1aa2:	ff 92       	push	r15
    1aa4:	cf 93       	push	r28
    1aa6:	df 93       	push	r29
    1aa8:	80 91 c2 15 	lds	r24, 0x15C2	; 0x8015c2 <uxSchedulerSuspended>
    1aac:	81 11       	cpse	r24, r1
    1aae:	05 c1       	rjmp	.+522    	; 0x1cba <xTaskIncrementTick+0x21e>
    1ab0:	c0 90 d2 15 	lds	r12, 0x15D2	; 0x8015d2 <xTickCount>
    1ab4:	d0 90 d3 15 	lds	r13, 0x15D3	; 0x8015d3 <xTickCount+0x1>
    1ab8:	e0 90 d4 15 	lds	r14, 0x15D4	; 0x8015d4 <xTickCount+0x2>
    1abc:	f0 90 d5 15 	lds	r15, 0x15D5	; 0x8015d5 <xTickCount+0x3>
    1ac0:	8f ef       	ldi	r24, 0xFF	; 255
    1ac2:	c8 1a       	sub	r12, r24
    1ac4:	d8 0a       	sbc	r13, r24
    1ac6:	e8 0a       	sbc	r14, r24
    1ac8:	f8 0a       	sbc	r15, r24
    1aca:	c0 92 d2 15 	sts	0x15D2, r12	; 0x8015d2 <xTickCount>
    1ace:	d0 92 d3 15 	sts	0x15D3, r13	; 0x8015d3 <xTickCount+0x1>
    1ad2:	e0 92 d4 15 	sts	0x15D4, r14	; 0x8015d4 <xTickCount+0x2>
    1ad6:	f0 92 d5 15 	sts	0x15D5, r15	; 0x8015d5 <xTickCount+0x3>
    1ada:	c1 14       	cp	r12, r1
    1adc:	d1 04       	cpc	r13, r1
    1ade:	e1 04       	cpc	r14, r1
    1ae0:	f1 04       	cpc	r15, r1
    1ae2:	b1 f4       	brne	.+44     	; 0x1b10 <xTaskIncrementTick+0x74>
    1ae4:	80 91 fb 15 	lds	r24, 0x15FB	; 0x8015fb <pxDelayedTaskList>
    1ae8:	90 91 fc 15 	lds	r25, 0x15FC	; 0x8015fc <pxDelayedTaskList+0x1>
    1aec:	20 91 f9 15 	lds	r18, 0x15F9	; 0x8015f9 <pxOverflowDelayedTaskList>
    1af0:	30 91 fa 15 	lds	r19, 0x15FA	; 0x8015fa <pxOverflowDelayedTaskList+0x1>
    1af4:	30 93 fc 15 	sts	0x15FC, r19	; 0x8015fc <pxDelayedTaskList+0x1>
    1af8:	20 93 fb 15 	sts	0x15FB, r18	; 0x8015fb <pxDelayedTaskList>
    1afc:	90 93 fa 15 	sts	0x15FA, r25	; 0x8015fa <pxOverflowDelayedTaskList+0x1>
    1b00:	80 93 f9 15 	sts	0x15F9, r24	; 0x8015f9 <pxOverflowDelayedTaskList>
    1b04:	80 91 ca 15 	lds	r24, 0x15CA	; 0x8015ca <xNumOfOverflows>
    1b08:	8f 5f       	subi	r24, 0xFF	; 255
    1b0a:	80 93 ca 15 	sts	0x15CA, r24	; 0x8015ca <xNumOfOverflows>
    1b0e:	16 dd       	rcall	.-1492   	; 0x153c <prvResetNextTaskUnblockTime>
    1b10:	80 91 c5 15 	lds	r24, 0x15C5	; 0x8015c5 <xNextTaskUnblockTime>
    1b14:	90 91 c6 15 	lds	r25, 0x15C6	; 0x8015c6 <xNextTaskUnblockTime+0x1>
    1b18:	a0 91 c7 15 	lds	r26, 0x15C7	; 0x8015c7 <xNextTaskUnblockTime+0x2>
    1b1c:	b0 91 c8 15 	lds	r27, 0x15C8	; 0x8015c8 <xNextTaskUnblockTime+0x3>
    1b20:	c8 16       	cp	r12, r24
    1b22:	d9 06       	cpc	r13, r25
    1b24:	ea 06       	cpc	r14, r26
    1b26:	fb 06       	cpc	r15, r27
    1b28:	20 f4       	brcc	.+8      	; 0x1b32 <xTaskIncrementTick+0x96>
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	b2 c0       	rjmp	.+356    	; 0x1c92 <xTaskIncrementTick+0x1f6>
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	01 c0       	rjmp	.+2      	; 0x1b34 <xTaskIncrementTick+0x98>
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	e0 91 fb 15 	lds	r30, 0x15FB	; 0x8015fb <pxDelayedTaskList>
    1b38:	f0 91 fc 15 	lds	r31, 0x15FC	; 0x8015fc <pxDelayedTaskList+0x1>
    1b3c:	90 81       	ld	r25, Z
    1b3e:	91 11       	cpse	r25, r1
    1b40:	0c c0       	rjmp	.+24     	; 0x1b5a <xTaskIncrementTick+0xbe>
    1b42:	4f ef       	ldi	r20, 0xFF	; 255
    1b44:	5f ef       	ldi	r21, 0xFF	; 255
    1b46:	ba 01       	movw	r22, r20
    1b48:	40 93 c5 15 	sts	0x15C5, r20	; 0x8015c5 <xNextTaskUnblockTime>
    1b4c:	50 93 c6 15 	sts	0x15C6, r21	; 0x8015c6 <xNextTaskUnblockTime+0x1>
    1b50:	60 93 c7 15 	sts	0x15C7, r22	; 0x8015c7 <xNextTaskUnblockTime+0x2>
    1b54:	70 93 c8 15 	sts	0x15C8, r23	; 0x8015c8 <xNextTaskUnblockTime+0x3>
    1b58:	9c c0       	rjmp	.+312    	; 0x1c92 <xTaskIncrementTick+0x1f6>
    1b5a:	e0 91 fb 15 	lds	r30, 0x15FB	; 0x8015fb <pxDelayedTaskList>
    1b5e:	f0 91 fc 15 	lds	r31, 0x15FC	; 0x8015fc <pxDelayedTaskList+0x1>
    1b62:	07 80       	ldd	r0, Z+7	; 0x07
    1b64:	f0 85       	ldd	r31, Z+8	; 0x08
    1b66:	e0 2d       	mov	r30, r0
    1b68:	00 84       	ldd	r0, Z+8	; 0x08
    1b6a:	f1 85       	ldd	r31, Z+9	; 0x09
    1b6c:	e0 2d       	mov	r30, r0
    1b6e:	42 81       	ldd	r20, Z+2	; 0x02
    1b70:	53 81       	ldd	r21, Z+3	; 0x03
    1b72:	64 81       	ldd	r22, Z+4	; 0x04
    1b74:	75 81       	ldd	r23, Z+5	; 0x05
    1b76:	c4 16       	cp	r12, r20
    1b78:	d5 06       	cpc	r13, r21
    1b7a:	e6 06       	cpc	r14, r22
    1b7c:	f7 06       	cpc	r15, r23
    1b7e:	48 f4       	brcc	.+18     	; 0x1b92 <xTaskIncrementTick+0xf6>
    1b80:	40 93 c5 15 	sts	0x15C5, r20	; 0x8015c5 <xNextTaskUnblockTime>
    1b84:	50 93 c6 15 	sts	0x15C6, r21	; 0x8015c6 <xNextTaskUnblockTime+0x1>
    1b88:	60 93 c7 15 	sts	0x15C7, r22	; 0x8015c7 <xNextTaskUnblockTime+0x2>
    1b8c:	70 93 c8 15 	sts	0x15C8, r23	; 0x8015c8 <xNextTaskUnblockTime+0x3>
    1b90:	80 c0       	rjmp	.+256    	; 0x1c92 <xTaskIncrementTick+0x1f6>
    1b92:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b94:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b96:	c6 81       	ldd	r28, Z+6	; 0x06
    1b98:	d7 81       	ldd	r29, Z+7	; 0x07
    1b9a:	20 85       	ldd	r18, Z+8	; 0x08
    1b9c:	31 85       	ldd	r19, Z+9	; 0x09
    1b9e:	3f 83       	std	Y+7, r19	; 0x07
    1ba0:	2e 83       	std	Y+6, r18	; 0x06
    1ba2:	c0 85       	ldd	r28, Z+8	; 0x08
    1ba4:	d1 85       	ldd	r29, Z+9	; 0x09
    1ba6:	26 81       	ldd	r18, Z+6	; 0x06
    1ba8:	37 81       	ldd	r19, Z+7	; 0x07
    1baa:	3d 83       	std	Y+5, r19	; 0x05
    1bac:	2c 83       	std	Y+4, r18	; 0x04
    1bae:	11 96       	adiw	r26, 0x01	; 1
    1bb0:	4d 91       	ld	r20, X+
    1bb2:	5c 91       	ld	r21, X
    1bb4:	12 97       	sbiw	r26, 0x02	; 2
    1bb6:	9f 01       	movw	r18, r30
    1bb8:	2e 5f       	subi	r18, 0xFE	; 254
    1bba:	3f 4f       	sbci	r19, 0xFF	; 255
    1bbc:	42 17       	cp	r20, r18
    1bbe:	53 07       	cpc	r21, r19
    1bc0:	31 f4       	brne	.+12     	; 0x1bce <xTaskIncrementTick+0x132>
    1bc2:	40 85       	ldd	r20, Z+8	; 0x08
    1bc4:	51 85       	ldd	r21, Z+9	; 0x09
    1bc6:	12 96       	adiw	r26, 0x02	; 2
    1bc8:	5c 93       	st	X, r21
    1bca:	4e 93       	st	-X, r20
    1bcc:	11 97       	sbiw	r26, 0x01	; 1
    1bce:	15 86       	std	Z+13, r1	; 0x0d
    1bd0:	14 86       	std	Z+12, r1	; 0x0c
    1bd2:	9c 91       	ld	r25, X
    1bd4:	91 50       	subi	r25, 0x01	; 1
    1bd6:	9c 93       	st	X, r25
    1bd8:	a0 8d       	ldd	r26, Z+24	; 0x18
    1bda:	b1 8d       	ldd	r27, Z+25	; 0x19
    1bdc:	10 97       	sbiw	r26, 0x00	; 0
    1bde:	09 f1       	breq	.+66     	; 0x1c22 <xTaskIncrementTick+0x186>
    1be0:	c2 89       	ldd	r28, Z+18	; 0x12
    1be2:	d3 89       	ldd	r29, Z+19	; 0x13
    1be4:	44 89       	ldd	r20, Z+20	; 0x14
    1be6:	55 89       	ldd	r21, Z+21	; 0x15
    1be8:	5f 83       	std	Y+7, r21	; 0x07
    1bea:	4e 83       	std	Y+6, r20	; 0x06
    1bec:	c4 89       	ldd	r28, Z+20	; 0x14
    1bee:	d5 89       	ldd	r29, Z+21	; 0x15
    1bf0:	42 89       	ldd	r20, Z+18	; 0x12
    1bf2:	53 89       	ldd	r21, Z+19	; 0x13
    1bf4:	5d 83       	std	Y+5, r21	; 0x05
    1bf6:	4c 83       	std	Y+4, r20	; 0x04
    1bf8:	11 96       	adiw	r26, 0x01	; 1
    1bfa:	6d 91       	ld	r22, X+
    1bfc:	7c 91       	ld	r23, X
    1bfe:	12 97       	sbiw	r26, 0x02	; 2
    1c00:	af 01       	movw	r20, r30
    1c02:	42 5f       	subi	r20, 0xF2	; 242
    1c04:	5f 4f       	sbci	r21, 0xFF	; 255
    1c06:	64 17       	cp	r22, r20
    1c08:	75 07       	cpc	r23, r21
    1c0a:	31 f4       	brne	.+12     	; 0x1c18 <xTaskIncrementTick+0x17c>
    1c0c:	44 89       	ldd	r20, Z+20	; 0x14
    1c0e:	55 89       	ldd	r21, Z+21	; 0x15
    1c10:	12 96       	adiw	r26, 0x02	; 2
    1c12:	5c 93       	st	X, r21
    1c14:	4e 93       	st	-X, r20
    1c16:	11 97       	sbiw	r26, 0x01	; 1
    1c18:	11 8e       	std	Z+25, r1	; 0x19
    1c1a:	10 8e       	std	Z+24, r1	; 0x18
    1c1c:	9c 91       	ld	r25, X
    1c1e:	91 50       	subi	r25, 0x01	; 1
    1c20:	9c 93       	st	X, r25
    1c22:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c24:	90 91 d1 15 	lds	r25, 0x15D1	; 0x8015d1 <uxTopReadyPriority>
    1c28:	9a 17       	cp	r25, r26
    1c2a:	10 f4       	brcc	.+4      	; 0x1c30 <xTaskIncrementTick+0x194>
    1c2c:	a0 93 d1 15 	sts	0x15D1, r26	; 0x8015d1 <uxTopReadyPriority>
    1c30:	9b e0       	ldi	r25, 0x0B	; 11
    1c32:	9a 9f       	mul	r25, r26
    1c34:	d0 01       	movw	r26, r0
    1c36:	11 24       	eor	r1, r1
    1c38:	ad 5e       	subi	r26, 0xED	; 237
    1c3a:	b9 4e       	sbci	r27, 0xE9	; 233
    1c3c:	11 96       	adiw	r26, 0x01	; 1
    1c3e:	0d 90       	ld	r0, X+
    1c40:	bc 91       	ld	r27, X
    1c42:	a0 2d       	mov	r26, r0
    1c44:	b7 83       	std	Z+7, r27	; 0x07
    1c46:	a6 83       	std	Z+6, r26	; 0x06
    1c48:	16 96       	adiw	r26, 0x06	; 6
    1c4a:	4d 91       	ld	r20, X+
    1c4c:	5c 91       	ld	r21, X
    1c4e:	17 97       	sbiw	r26, 0x07	; 7
    1c50:	51 87       	std	Z+9, r21	; 0x09
    1c52:	40 87       	std	Z+8, r20	; 0x08
    1c54:	16 96       	adiw	r26, 0x06	; 6
    1c56:	cd 91       	ld	r28, X+
    1c58:	dc 91       	ld	r29, X
    1c5a:	17 97       	sbiw	r26, 0x07	; 7
    1c5c:	3d 83       	std	Y+5, r19	; 0x05
    1c5e:	2c 83       	std	Y+4, r18	; 0x04
    1c60:	17 96       	adiw	r26, 0x07	; 7
    1c62:	3c 93       	st	X, r19
    1c64:	2e 93       	st	-X, r18
    1c66:	16 97       	sbiw	r26, 0x06	; 6
    1c68:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c6a:	9a 9f       	mul	r25, r26
    1c6c:	d0 01       	movw	r26, r0
    1c6e:	11 24       	eor	r1, r1
    1c70:	ad 5e       	subi	r26, 0xED	; 237
    1c72:	b9 4e       	sbci	r27, 0xE9	; 233
    1c74:	b5 87       	std	Z+13, r27	; 0x0d
    1c76:	a4 87       	std	Z+12, r26	; 0x0c
    1c78:	9c 91       	ld	r25, X
    1c7a:	9f 5f       	subi	r25, 0xFF	; 255
    1c7c:	9c 93       	st	X, r25
    1c7e:	22 8d       	ldd	r18, Z+26	; 0x1a
    1c80:	e0 91 81 16 	lds	r30, 0x1681	; 0x801681 <pxCurrentTCB>
    1c84:	f0 91 82 16 	lds	r31, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    1c88:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c8a:	29 17       	cp	r18, r25
    1c8c:	08 f0       	brcs	.+2      	; 0x1c90 <xTaskIncrementTick+0x1f4>
    1c8e:	4f cf       	rjmp	.-354    	; 0x1b2e <xTaskIncrementTick+0x92>
    1c90:	51 cf       	rjmp	.-350    	; 0x1b34 <xTaskIncrementTick+0x98>
    1c92:	e0 91 81 16 	lds	r30, 0x1681	; 0x801681 <pxCurrentTCB>
    1c96:	f0 91 82 16 	lds	r31, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    1c9a:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1c9c:	9b e0       	ldi	r25, 0x0B	; 11
    1c9e:	e9 9f       	mul	r30, r25
    1ca0:	f0 01       	movw	r30, r0
    1ca2:	11 24       	eor	r1, r1
    1ca4:	ed 5e       	subi	r30, 0xED	; 237
    1ca6:	f9 4e       	sbci	r31, 0xE9	; 233
    1ca8:	90 81       	ld	r25, Z
    1caa:	92 30       	cpi	r25, 0x02	; 2
    1cac:	08 f0       	brcs	.+2      	; 0x1cb0 <xTaskIncrementTick+0x214>
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 91 cb 15 	lds	r25, 0x15CB	; 0x8015cb <xYieldPending>
    1cb4:	91 11       	cpse	r25, r1
    1cb6:	16 c0       	rjmp	.+44     	; 0x1ce4 <xTaskIncrementTick+0x248>
    1cb8:	16 c0       	rjmp	.+44     	; 0x1ce6 <xTaskIncrementTick+0x24a>
    1cba:	80 91 cc 15 	lds	r24, 0x15CC	; 0x8015cc <xPendedTicks>
    1cbe:	90 91 cd 15 	lds	r25, 0x15CD	; 0x8015cd <xPendedTicks+0x1>
    1cc2:	a0 91 ce 15 	lds	r26, 0x15CE	; 0x8015ce <xPendedTicks+0x2>
    1cc6:	b0 91 cf 15 	lds	r27, 0x15CF	; 0x8015cf <xPendedTicks+0x3>
    1cca:	01 96       	adiw	r24, 0x01	; 1
    1ccc:	a1 1d       	adc	r26, r1
    1cce:	b1 1d       	adc	r27, r1
    1cd0:	80 93 cc 15 	sts	0x15CC, r24	; 0x8015cc <xPendedTicks>
    1cd4:	90 93 cd 15 	sts	0x15CD, r25	; 0x8015cd <xPendedTicks+0x1>
    1cd8:	a0 93 ce 15 	sts	0x15CE, r26	; 0x8015ce <xPendedTicks+0x2>
    1cdc:	b0 93 cf 15 	sts	0x15CF, r27	; 0x8015cf <xPendedTicks+0x3>
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	01 c0       	rjmp	.+2      	; 0x1ce6 <xTaskIncrementTick+0x24a>
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	ff 90       	pop	r15
    1cec:	ef 90       	pop	r14
    1cee:	df 90       	pop	r13
    1cf0:	cf 90       	pop	r12
    1cf2:	08 95       	ret

00001cf4 <xTaskResumeAll>:
    1cf4:	cf 92       	push	r12
    1cf6:	df 92       	push	r13
    1cf8:	ef 92       	push	r14
    1cfa:	ff 92       	push	r15
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	0f 92       	push	r0
    1d06:	80 91 c2 15 	lds	r24, 0x15C2	; 0x8015c2 <uxSchedulerSuspended>
    1d0a:	81 50       	subi	r24, 0x01	; 1
    1d0c:	80 93 c2 15 	sts	0x15C2, r24	; 0x8015c2 <uxSchedulerSuspended>
    1d10:	80 91 c2 15 	lds	r24, 0x15C2	; 0x8015c2 <uxSchedulerSuspended>
    1d14:	81 11       	cpse	r24, r1
    1d16:	be c0       	rjmp	.+380    	; 0x1e94 <xTaskResumeAll+0x1a0>
    1d18:	80 91 d6 15 	lds	r24, 0x15D6	; 0x8015d6 <uxCurrentNumberOfTasks>
    1d1c:	81 11       	cpse	r24, r1
    1d1e:	88 c0       	rjmp	.+272    	; 0x1e30 <xTaskResumeAll+0x13c>
    1d20:	bc c0       	rjmp	.+376    	; 0x1e9a <xTaskResumeAll+0x1a6>
    1d22:	e0 91 f5 15 	lds	r30, 0x15F5	; 0x8015f5 <xPendingReadyList+0x7>
    1d26:	f0 91 f6 15 	lds	r31, 0x15F6	; 0x8015f6 <xPendingReadyList+0x8>
    1d2a:	00 84       	ldd	r0, Z+8	; 0x08
    1d2c:	f1 85       	ldd	r31, Z+9	; 0x09
    1d2e:	e0 2d       	mov	r30, r0
    1d30:	a0 8d       	ldd	r26, Z+24	; 0x18
    1d32:	b1 8d       	ldd	r27, Z+25	; 0x19
    1d34:	c2 89       	ldd	r28, Z+18	; 0x12
    1d36:	d3 89       	ldd	r29, Z+19	; 0x13
    1d38:	84 89       	ldd	r24, Z+20	; 0x14
    1d3a:	95 89       	ldd	r25, Z+21	; 0x15
    1d3c:	9f 83       	std	Y+7, r25	; 0x07
    1d3e:	8e 83       	std	Y+6, r24	; 0x06
    1d40:	c4 89       	ldd	r28, Z+20	; 0x14
    1d42:	d5 89       	ldd	r29, Z+21	; 0x15
    1d44:	82 89       	ldd	r24, Z+18	; 0x12
    1d46:	93 89       	ldd	r25, Z+19	; 0x13
    1d48:	9d 83       	std	Y+5, r25	; 0x05
    1d4a:	8c 83       	std	Y+4, r24	; 0x04
    1d4c:	11 96       	adiw	r26, 0x01	; 1
    1d4e:	2d 91       	ld	r18, X+
    1d50:	3c 91       	ld	r19, X
    1d52:	12 97       	sbiw	r26, 0x02	; 2
    1d54:	cf 01       	movw	r24, r30
    1d56:	0e 96       	adiw	r24, 0x0e	; 14
    1d58:	28 17       	cp	r18, r24
    1d5a:	39 07       	cpc	r19, r25
    1d5c:	31 f4       	brne	.+12     	; 0x1d6a <xTaskResumeAll+0x76>
    1d5e:	84 89       	ldd	r24, Z+20	; 0x14
    1d60:	95 89       	ldd	r25, Z+21	; 0x15
    1d62:	12 96       	adiw	r26, 0x02	; 2
    1d64:	9c 93       	st	X, r25
    1d66:	8e 93       	st	-X, r24
    1d68:	11 97       	sbiw	r26, 0x01	; 1
    1d6a:	11 8e       	std	Z+25, r1	; 0x19
    1d6c:	10 8e       	std	Z+24, r1	; 0x18
    1d6e:	8c 91       	ld	r24, X
    1d70:	81 50       	subi	r24, 0x01	; 1
    1d72:	8c 93       	st	X, r24
    1d74:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d76:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d78:	c6 81       	ldd	r28, Z+6	; 0x06
    1d7a:	d7 81       	ldd	r29, Z+7	; 0x07
    1d7c:	80 85       	ldd	r24, Z+8	; 0x08
    1d7e:	91 85       	ldd	r25, Z+9	; 0x09
    1d80:	9f 83       	std	Y+7, r25	; 0x07
    1d82:	8e 83       	std	Y+6, r24	; 0x06
    1d84:	c0 85       	ldd	r28, Z+8	; 0x08
    1d86:	d1 85       	ldd	r29, Z+9	; 0x09
    1d88:	86 81       	ldd	r24, Z+6	; 0x06
    1d8a:	97 81       	ldd	r25, Z+7	; 0x07
    1d8c:	9d 83       	std	Y+5, r25	; 0x05
    1d8e:	8c 83       	std	Y+4, r24	; 0x04
    1d90:	11 96       	adiw	r26, 0x01	; 1
    1d92:	8d 91       	ld	r24, X+
    1d94:	9c 91       	ld	r25, X
    1d96:	12 97       	sbiw	r26, 0x02	; 2
    1d98:	9f 01       	movw	r18, r30
    1d9a:	2e 5f       	subi	r18, 0xFE	; 254
    1d9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d9e:	82 17       	cp	r24, r18
    1da0:	93 07       	cpc	r25, r19
    1da2:	31 f4       	brne	.+12     	; 0x1db0 <xTaskResumeAll+0xbc>
    1da4:	80 85       	ldd	r24, Z+8	; 0x08
    1da6:	91 85       	ldd	r25, Z+9	; 0x09
    1da8:	12 96       	adiw	r26, 0x02	; 2
    1daa:	9c 93       	st	X, r25
    1dac:	8e 93       	st	-X, r24
    1dae:	11 97       	sbiw	r26, 0x01	; 1
    1db0:	15 86       	std	Z+13, r1	; 0x0d
    1db2:	14 86       	std	Z+12, r1	; 0x0c
    1db4:	8c 91       	ld	r24, X
    1db6:	81 50       	subi	r24, 0x01	; 1
    1db8:	8c 93       	st	X, r24
    1dba:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1dbc:	80 91 d1 15 	lds	r24, 0x15D1	; 0x8015d1 <uxTopReadyPriority>
    1dc0:	8a 17       	cp	r24, r26
    1dc2:	10 f4       	brcc	.+4      	; 0x1dc8 <xTaskResumeAll+0xd4>
    1dc4:	a0 93 d1 15 	sts	0x15D1, r26	; 0x8015d1 <uxTopReadyPriority>
    1dc8:	8b e0       	ldi	r24, 0x0B	; 11
    1dca:	8a 9f       	mul	r24, r26
    1dcc:	d0 01       	movw	r26, r0
    1dce:	11 24       	eor	r1, r1
    1dd0:	ad 5e       	subi	r26, 0xED	; 237
    1dd2:	b9 4e       	sbci	r27, 0xE9	; 233
    1dd4:	11 96       	adiw	r26, 0x01	; 1
    1dd6:	0d 90       	ld	r0, X+
    1dd8:	bc 91       	ld	r27, X
    1dda:	a0 2d       	mov	r26, r0
    1ddc:	b7 83       	std	Z+7, r27	; 0x07
    1dde:	a6 83       	std	Z+6, r26	; 0x06
    1de0:	16 96       	adiw	r26, 0x06	; 6
    1de2:	4d 91       	ld	r20, X+
    1de4:	5c 91       	ld	r21, X
    1de6:	17 97       	sbiw	r26, 0x07	; 7
    1de8:	51 87       	std	Z+9, r21	; 0x09
    1dea:	40 87       	std	Z+8, r20	; 0x08
    1dec:	16 96       	adiw	r26, 0x06	; 6
    1dee:	cd 91       	ld	r28, X+
    1df0:	dc 91       	ld	r29, X
    1df2:	17 97       	sbiw	r26, 0x07	; 7
    1df4:	3d 83       	std	Y+5, r19	; 0x05
    1df6:	2c 83       	std	Y+4, r18	; 0x04
    1df8:	17 96       	adiw	r26, 0x07	; 7
    1dfa:	3c 93       	st	X, r19
    1dfc:	2e 93       	st	-X, r18
    1dfe:	16 97       	sbiw	r26, 0x06	; 6
    1e00:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1e02:	8a 9f       	mul	r24, r26
    1e04:	d0 01       	movw	r26, r0
    1e06:	11 24       	eor	r1, r1
    1e08:	ad 5e       	subi	r26, 0xED	; 237
    1e0a:	b9 4e       	sbci	r27, 0xE9	; 233
    1e0c:	b5 87       	std	Z+13, r27	; 0x0d
    1e0e:	a4 87       	std	Z+12, r26	; 0x0c
    1e10:	8c 91       	ld	r24, X
    1e12:	8f 5f       	subi	r24, 0xFF	; 255
    1e14:	8c 93       	st	X, r24
    1e16:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e18:	a0 91 81 16 	lds	r26, 0x1681	; 0x801681 <pxCurrentTCB>
    1e1c:	b0 91 82 16 	lds	r27, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    1e20:	5a 96       	adiw	r26, 0x1a	; 26
    1e22:	8c 91       	ld	r24, X
    1e24:	98 17       	cp	r25, r24
    1e26:	30 f0       	brcs	.+12     	; 0x1e34 <xTaskResumeAll+0x140>
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	80 93 cb 15 	sts	0x15CB, r24	; 0x8015cb <xYieldPending>
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <xTaskResumeAll+0x140>
    1e30:	e0 e0       	ldi	r30, 0x00	; 0
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 91 ee 15 	lds	r24, 0x15EE	; 0x8015ee <xPendingReadyList>
    1e38:	81 11       	cpse	r24, r1
    1e3a:	73 cf       	rjmp	.-282    	; 0x1d22 <xTaskResumeAll+0x2e>
    1e3c:	ef 2b       	or	r30, r31
    1e3e:	09 f0       	breq	.+2      	; 0x1e42 <xTaskResumeAll+0x14e>
    1e40:	7d db       	rcall	.-2310   	; 0x153c <prvResetNextTaskUnblockTime>
    1e42:	c0 90 cc 15 	lds	r12, 0x15CC	; 0x8015cc <xPendedTicks>
    1e46:	d0 90 cd 15 	lds	r13, 0x15CD	; 0x8015cd <xPendedTicks+0x1>
    1e4a:	e0 90 ce 15 	lds	r14, 0x15CE	; 0x8015ce <xPendedTicks+0x2>
    1e4e:	f0 90 cf 15 	lds	r15, 0x15CF	; 0x8015cf <xPendedTicks+0x3>
    1e52:	c1 14       	cp	r12, r1
    1e54:	d1 04       	cpc	r13, r1
    1e56:	e1 04       	cpc	r14, r1
    1e58:	f1 04       	cpc	r15, r1
    1e5a:	a1 f0       	breq	.+40     	; 0x1e84 <xTaskResumeAll+0x190>
    1e5c:	1f de       	rcall	.-962    	; 0x1a9c <xTaskIncrementTick>
    1e5e:	88 23       	and	r24, r24
    1e60:	19 f0       	breq	.+6      	; 0x1e68 <xTaskResumeAll+0x174>
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	80 93 cb 15 	sts	0x15CB, r24	; 0x8015cb <xYieldPending>
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	c8 1a       	sub	r12, r24
    1e6c:	d1 08       	sbc	r13, r1
    1e6e:	e1 08       	sbc	r14, r1
    1e70:	f1 08       	sbc	r15, r1
    1e72:	a1 f7       	brne	.-24     	; 0x1e5c <xTaskResumeAll+0x168>
    1e74:	10 92 cc 15 	sts	0x15CC, r1	; 0x8015cc <xPendedTicks>
    1e78:	10 92 cd 15 	sts	0x15CD, r1	; 0x8015cd <xPendedTicks+0x1>
    1e7c:	10 92 ce 15 	sts	0x15CE, r1	; 0x8015ce <xPendedTicks+0x2>
    1e80:	10 92 cf 15 	sts	0x15CF, r1	; 0x8015cf <xPendedTicks+0x3>
    1e84:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <xYieldPending>
    1e88:	88 23       	and	r24, r24
    1e8a:	31 f0       	breq	.+12     	; 0x1e98 <xTaskResumeAll+0x1a4>
    1e8c:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	03 c0       	rjmp	.+6      	; 0x1e9a <xTaskResumeAll+0x1a6>
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	01 c0       	rjmp	.+2      	; 0x1e9a <xTaskResumeAll+0x1a6>
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	0f 90       	pop	r0
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	df 91       	pop	r29
    1ea0:	cf 91       	pop	r28
    1ea2:	ff 90       	pop	r15
    1ea4:	ef 90       	pop	r14
    1ea6:	df 90       	pop	r13
    1ea8:	cf 90       	pop	r12
    1eaa:	08 95       	ret

00001eac <xTaskDelayUntil>:
    1eac:	8f 92       	push	r8
    1eae:	9f 92       	push	r9
    1eb0:	af 92       	push	r10
    1eb2:	bf 92       	push	r11
    1eb4:	cf 92       	push	r12
    1eb6:	df 92       	push	r13
    1eb8:	ef 92       	push	r14
    1eba:	ff 92       	push	r15
    1ebc:	1f 93       	push	r17
    1ebe:	cf 93       	push	r28
    1ec0:	df 93       	push	r29
    1ec2:	ec 01       	movw	r28, r24
    1ec4:	6a 01       	movw	r12, r20
    1ec6:	7b 01       	movw	r14, r22
    1ec8:	d5 dd       	rcall	.-1110   	; 0x1a74 <vTaskSuspendAll>
    1eca:	80 90 d2 15 	lds	r8, 0x15D2	; 0x8015d2 <xTickCount>
    1ece:	90 90 d3 15 	lds	r9, 0x15D3	; 0x8015d3 <xTickCount+0x1>
    1ed2:	a0 90 d4 15 	lds	r10, 0x15D4	; 0x8015d4 <xTickCount+0x2>
    1ed6:	b0 90 d5 15 	lds	r11, 0x15D5	; 0x8015d5 <xTickCount+0x3>
    1eda:	88 81       	ld	r24, Y
    1edc:	99 81       	ldd	r25, Y+1	; 0x01
    1ede:	aa 81       	ldd	r26, Y+2	; 0x02
    1ee0:	bb 81       	ldd	r27, Y+3	; 0x03
    1ee2:	ac 01       	movw	r20, r24
    1ee4:	bd 01       	movw	r22, r26
    1ee6:	4c 0d       	add	r20, r12
    1ee8:	5d 1d       	adc	r21, r13
    1eea:	6e 1d       	adc	r22, r14
    1eec:	7f 1d       	adc	r23, r15
    1eee:	88 16       	cp	r8, r24
    1ef0:	99 06       	cpc	r9, r25
    1ef2:	aa 06       	cpc	r10, r26
    1ef4:	bb 06       	cpc	r11, r27
    1ef6:	60 f4       	brcc	.+24     	; 0x1f10 <xTaskDelayUntil+0x64>
    1ef8:	48 17       	cp	r20, r24
    1efa:	59 07       	cpc	r21, r25
    1efc:	6a 07       	cpc	r22, r26
    1efe:	7b 07       	cpc	r23, r27
    1f00:	98 f4       	brcc	.+38     	; 0x1f28 <xTaskDelayUntil+0x7c>
    1f02:	84 16       	cp	r8, r20
    1f04:	95 06       	cpc	r9, r21
    1f06:	a6 06       	cpc	r10, r22
    1f08:	b7 06       	cpc	r11, r23
    1f0a:	80 f0       	brcs	.+32     	; 0x1f2c <xTaskDelayUntil+0x80>
    1f0c:	10 e0       	ldi	r17, 0x00	; 0
    1f0e:	13 c0       	rjmp	.+38     	; 0x1f36 <xTaskDelayUntil+0x8a>
    1f10:	48 17       	cp	r20, r24
    1f12:	59 07       	cpc	r21, r25
    1f14:	6a 07       	cpc	r22, r26
    1f16:	7b 07       	cpc	r23, r27
    1f18:	58 f0       	brcs	.+22     	; 0x1f30 <xTaskDelayUntil+0x84>
    1f1a:	84 16       	cp	r8, r20
    1f1c:	95 06       	cpc	r9, r21
    1f1e:	a6 06       	cpc	r10, r22
    1f20:	b7 06       	cpc	r11, r23
    1f22:	40 f0       	brcs	.+16     	; 0x1f34 <xTaskDelayUntil+0x88>
    1f24:	10 e0       	ldi	r17, 0x00	; 0
    1f26:	07 c0       	rjmp	.+14     	; 0x1f36 <xTaskDelayUntil+0x8a>
    1f28:	10 e0       	ldi	r17, 0x00	; 0
    1f2a:	05 c0       	rjmp	.+10     	; 0x1f36 <xTaskDelayUntil+0x8a>
    1f2c:	11 e0       	ldi	r17, 0x01	; 1
    1f2e:	03 c0       	rjmp	.+6      	; 0x1f36 <xTaskDelayUntil+0x8a>
    1f30:	11 e0       	ldi	r17, 0x01	; 1
    1f32:	01 c0       	rjmp	.+2      	; 0x1f36 <xTaskDelayUntil+0x8a>
    1f34:	11 e0       	ldi	r17, 0x01	; 1
    1f36:	48 83       	st	Y, r20
    1f38:	59 83       	std	Y+1, r21	; 0x01
    1f3a:	6a 83       	std	Y+2, r22	; 0x02
    1f3c:	7b 83       	std	Y+3, r23	; 0x03
    1f3e:	11 23       	and	r17, r17
    1f40:	41 f0       	breq	.+16     	; 0x1f52 <xTaskDelayUntil+0xa6>
    1f42:	cb 01       	movw	r24, r22
    1f44:	ba 01       	movw	r22, r20
    1f46:	68 19       	sub	r22, r8
    1f48:	79 09       	sbc	r23, r9
    1f4a:	8a 09       	sbc	r24, r10
    1f4c:	9b 09       	sbc	r25, r11
    1f4e:	40 e0       	ldi	r20, 0x00	; 0
    1f50:	6b dc       	rcall	.-1834   	; 0x1828 <prvAddCurrentTaskToDelayedList>
    1f52:	d0 de       	rcall	.-608    	; 0x1cf4 <xTaskResumeAll>
    1f54:	81 11       	cpse	r24, r1
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <xTaskDelayUntil+0xb0>
    1f58:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    1f5c:	81 2f       	mov	r24, r17
    1f5e:	df 91       	pop	r29
    1f60:	cf 91       	pop	r28
    1f62:	1f 91       	pop	r17
    1f64:	ff 90       	pop	r15
    1f66:	ef 90       	pop	r14
    1f68:	df 90       	pop	r13
    1f6a:	cf 90       	pop	r12
    1f6c:	bf 90       	pop	r11
    1f6e:	af 90       	pop	r10
    1f70:	9f 90       	pop	r9
    1f72:	8f 90       	pop	r8
    1f74:	08 95       	ret

00001f76 <vTaskDelay>:
    1f76:	cf 92       	push	r12
    1f78:	df 92       	push	r13
    1f7a:	ef 92       	push	r14
    1f7c:	ff 92       	push	r15
    1f7e:	6b 01       	movw	r12, r22
    1f80:	7c 01       	movw	r14, r24
    1f82:	67 2b       	or	r22, r23
    1f84:	68 2b       	or	r22, r24
    1f86:	69 2b       	or	r22, r25
    1f88:	39 f0       	breq	.+14     	; 0x1f98 <vTaskDelay+0x22>
    1f8a:	74 dd       	rcall	.-1304   	; 0x1a74 <vTaskSuspendAll>
    1f8c:	40 e0       	ldi	r20, 0x00	; 0
    1f8e:	c7 01       	movw	r24, r14
    1f90:	b6 01       	movw	r22, r12
    1f92:	4a dc       	rcall	.-1900   	; 0x1828 <prvAddCurrentTaskToDelayedList>
    1f94:	af de       	rcall	.-674    	; 0x1cf4 <xTaskResumeAll>
    1f96:	01 c0       	rjmp	.+2      	; 0x1f9a <vTaskDelay+0x24>
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	81 11       	cpse	r24, r1
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <vTaskDelay+0x2c>
    1f9e:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    1fa2:	ff 90       	pop	r15
    1fa4:	ef 90       	pop	r14
    1fa6:	df 90       	pop	r13
    1fa8:	cf 90       	pop	r12
    1faa:	08 95       	ret

00001fac <vTaskSwitchContext>:
    1fac:	80 91 c2 15 	lds	r24, 0x15C2	; 0x8015c2 <uxSchedulerSuspended>
    1fb0:	88 23       	and	r24, r24
    1fb2:	21 f0       	breq	.+8      	; 0x1fbc <vTaskSwitchContext+0x10>
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	80 93 cb 15 	sts	0x15CB, r24	; 0x8015cb <xYieldPending>
    1fba:	08 95       	ret
    1fbc:	10 92 cb 15 	sts	0x15CB, r1	; 0x8015cb <xYieldPending>
    1fc0:	e0 91 81 16 	lds	r30, 0x1681	; 0x801681 <pxCurrentTCB>
    1fc4:	f0 91 82 16 	lds	r31, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    1fc8:	20 81       	ld	r18, Z
    1fca:	31 81       	ldd	r19, Z+1	; 0x01
    1fcc:	e0 91 81 16 	lds	r30, 0x1681	; 0x801681 <pxCurrentTCB>
    1fd0:	f0 91 82 16 	lds	r31, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    1fd4:	83 8d       	ldd	r24, Z+27	; 0x1b
    1fd6:	94 8d       	ldd	r25, Z+28	; 0x1c
    1fd8:	82 17       	cp	r24, r18
    1fda:	93 07       	cpc	r25, r19
    1fdc:	60 f0       	brcs	.+24     	; 0x1ff6 <vTaskSwitchContext+0x4a>
    1fde:	60 91 81 16 	lds	r22, 0x1681	; 0x801681 <pxCurrentTCB>
    1fe2:	70 91 82 16 	lds	r23, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    1fe6:	63 5e       	subi	r22, 0xE3	; 227
    1fe8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fea:	80 91 81 16 	lds	r24, 0x1681	; 0x801681 <pxCurrentTCB>
    1fee:	90 91 82 16 	lds	r25, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    1ff2:	0e 94 34 19 	call	0x3268	; 0x3268 <vApplicationStackOverflowHook>
    1ff6:	80 91 d1 15 	lds	r24, 0x15D1	; 0x8015d1 <uxTopReadyPriority>
    1ffa:	01 c0       	rjmp	.+2      	; 0x1ffe <vTaskSwitchContext+0x52>
    1ffc:	81 50       	subi	r24, 0x01	; 1
    1ffe:	28 2f       	mov	r18, r24
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	9b e0       	ldi	r25, 0x0B	; 11
    2004:	92 9f       	mul	r25, r18
    2006:	f0 01       	movw	r30, r0
    2008:	93 9f       	mul	r25, r19
    200a:	f0 0d       	add	r31, r0
    200c:	11 24       	eor	r1, r1
    200e:	ed 5e       	subi	r30, 0xED	; 237
    2010:	f9 4e       	sbci	r31, 0xE9	; 233
    2012:	90 81       	ld	r25, Z
    2014:	99 23       	and	r25, r25
    2016:	91 f3       	breq	.-28     	; 0x1ffc <vTaskSwitchContext+0x50>
    2018:	9b e0       	ldi	r25, 0x0B	; 11
    201a:	92 9f       	mul	r25, r18
    201c:	a0 01       	movw	r20, r0
    201e:	93 9f       	mul	r25, r19
    2020:	50 0d       	add	r21, r0
    2022:	11 24       	eor	r1, r1
    2024:	df 01       	movw	r26, r30
    2026:	01 80       	ldd	r0, Z+1	; 0x01
    2028:	f2 81       	ldd	r31, Z+2	; 0x02
    202a:	e0 2d       	mov	r30, r0
    202c:	04 80       	ldd	r0, Z+4	; 0x04
    202e:	f5 81       	ldd	r31, Z+5	; 0x05
    2030:	e0 2d       	mov	r30, r0
    2032:	12 96       	adiw	r26, 0x02	; 2
    2034:	fc 93       	st	X, r31
    2036:	ee 93       	st	-X, r30
    2038:	11 97       	sbiw	r26, 0x01	; 1
    203a:	4a 5e       	subi	r20, 0xEA	; 234
    203c:	59 4e       	sbci	r21, 0xE9	; 233
    203e:	e4 17       	cp	r30, r20
    2040:	f5 07       	cpc	r31, r21
    2042:	29 f4       	brne	.+10     	; 0x204e <__DATA_REGION_LENGTH__+0x4e>
    2044:	44 81       	ldd	r20, Z+4	; 0x04
    2046:	55 81       	ldd	r21, Z+5	; 0x05
    2048:	fd 01       	movw	r30, r26
    204a:	52 83       	std	Z+2, r21	; 0x02
    204c:	41 83       	std	Z+1, r20	; 0x01
    204e:	9b e0       	ldi	r25, 0x0B	; 11
    2050:	92 9f       	mul	r25, r18
    2052:	f0 01       	movw	r30, r0
    2054:	93 9f       	mul	r25, r19
    2056:	f0 0d       	add	r31, r0
    2058:	11 24       	eor	r1, r1
    205a:	ed 5e       	subi	r30, 0xED	; 237
    205c:	f9 4e       	sbci	r31, 0xE9	; 233
    205e:	01 80       	ldd	r0, Z+1	; 0x01
    2060:	f2 81       	ldd	r31, Z+2	; 0x02
    2062:	e0 2d       	mov	r30, r0
    2064:	20 85       	ldd	r18, Z+8	; 0x08
    2066:	31 85       	ldd	r19, Z+9	; 0x09
    2068:	30 93 82 16 	sts	0x1682, r19	; 0x801682 <pxCurrentTCB+0x1>
    206c:	20 93 81 16 	sts	0x1681, r18	; 0x801681 <pxCurrentTCB>
    2070:	80 93 d1 15 	sts	0x15D1, r24	; 0x8015d1 <uxTopReadyPriority>
    2074:	08 95       	ret

00002076 <vTaskPlaceOnEventList>:
    2076:	cf 92       	push	r12
    2078:	df 92       	push	r13
    207a:	ef 92       	push	r14
    207c:	ff 92       	push	r15
    207e:	6a 01       	movw	r12, r20
    2080:	7b 01       	movw	r14, r22
    2082:	60 91 81 16 	lds	r22, 0x1681	; 0x801681 <pxCurrentTCB>
    2086:	70 91 82 16 	lds	r23, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    208a:	62 5f       	subi	r22, 0xF2	; 242
    208c:	7f 4f       	sbci	r23, 0xFF	; 255
    208e:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    2092:	41 e0       	ldi	r20, 0x01	; 1
    2094:	c7 01       	movw	r24, r14
    2096:	b6 01       	movw	r22, r12
    2098:	c7 db       	rcall	.-2162   	; 0x1828 <prvAddCurrentTaskToDelayedList>
    209a:	ff 90       	pop	r15
    209c:	ef 90       	pop	r14
    209e:	df 90       	pop	r13
    20a0:	cf 90       	pop	r12
    20a2:	08 95       	ret

000020a4 <vTaskPlaceOnEventListRestricted>:
    20a4:	cf 93       	push	r28
    20a6:	df 93       	push	r29
    20a8:	fc 01       	movw	r30, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	ba 01       	movw	r22, r20
    20ae:	a1 81       	ldd	r26, Z+1	; 0x01
    20b0:	b2 81       	ldd	r27, Z+2	; 0x02
    20b2:	c0 91 81 16 	lds	r28, 0x1681	; 0x801681 <pxCurrentTCB>
    20b6:	d0 91 82 16 	lds	r29, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    20ba:	bb 8b       	std	Y+19, r27	; 0x13
    20bc:	aa 8b       	std	Y+18, r26	; 0x12
    20be:	c0 91 81 16 	lds	r28, 0x1681	; 0x801681 <pxCurrentTCB>
    20c2:	d0 91 82 16 	lds	r29, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    20c6:	16 96       	adiw	r26, 0x06	; 6
    20c8:	4d 91       	ld	r20, X+
    20ca:	5c 91       	ld	r21, X
    20cc:	17 97       	sbiw	r26, 0x07	; 7
    20ce:	5d 8b       	std	Y+21, r21	; 0x15
    20d0:	4c 8b       	std	Y+20, r20	; 0x14
    20d2:	16 96       	adiw	r26, 0x06	; 6
    20d4:	cd 91       	ld	r28, X+
    20d6:	dc 91       	ld	r29, X
    20d8:	17 97       	sbiw	r26, 0x07	; 7
    20da:	40 91 81 16 	lds	r20, 0x1681	; 0x801681 <pxCurrentTCB>
    20de:	50 91 82 16 	lds	r21, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    20e2:	42 5f       	subi	r20, 0xF2	; 242
    20e4:	5f 4f       	sbci	r21, 0xFF	; 255
    20e6:	5d 83       	std	Y+5, r21	; 0x05
    20e8:	4c 83       	std	Y+4, r20	; 0x04
    20ea:	40 91 81 16 	lds	r20, 0x1681	; 0x801681 <pxCurrentTCB>
    20ee:	50 91 82 16 	lds	r21, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    20f2:	42 5f       	subi	r20, 0xF2	; 242
    20f4:	5f 4f       	sbci	r21, 0xFF	; 255
    20f6:	17 96       	adiw	r26, 0x07	; 7
    20f8:	5c 93       	st	X, r21
    20fa:	4e 93       	st	-X, r20
    20fc:	16 97       	sbiw	r26, 0x06	; 6
    20fe:	a0 91 81 16 	lds	r26, 0x1681	; 0x801681 <pxCurrentTCB>
    2102:	b0 91 82 16 	lds	r27, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    2106:	59 96       	adiw	r26, 0x19	; 25
    2108:	fc 93       	st	X, r31
    210a:	ee 93       	st	-X, r30
    210c:	58 97       	sbiw	r26, 0x18	; 24
    210e:	30 81       	ld	r19, Z
    2110:	3f 5f       	subi	r19, 0xFF	; 255
    2112:	30 83       	st	Z, r19
    2114:	22 23       	and	r18, r18
    2116:	19 f0       	breq	.+6      	; 0x211e <vTaskPlaceOnEventListRestricted+0x7a>
    2118:	6f ef       	ldi	r22, 0xFF	; 255
    211a:	7f ef       	ldi	r23, 0xFF	; 255
    211c:	cb 01       	movw	r24, r22
    211e:	42 2f       	mov	r20, r18
    2120:	83 db       	rcall	.-2298   	; 0x1828 <prvAddCurrentTaskToDelayedList>
    2122:	df 91       	pop	r29
    2124:	cf 91       	pop	r28
    2126:	08 95       	ret

00002128 <xTaskRemoveFromEventList>:
    2128:	cf 93       	push	r28
    212a:	df 93       	push	r29
    212c:	dc 01       	movw	r26, r24
    212e:	17 96       	adiw	r26, 0x07	; 7
    2130:	ed 91       	ld	r30, X+
    2132:	fc 91       	ld	r31, X
    2134:	18 97       	sbiw	r26, 0x08	; 8
    2136:	00 84       	ldd	r0, Z+8	; 0x08
    2138:	f1 85       	ldd	r31, Z+9	; 0x09
    213a:	e0 2d       	mov	r30, r0
    213c:	a0 8d       	ldd	r26, Z+24	; 0x18
    213e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2140:	c2 89       	ldd	r28, Z+18	; 0x12
    2142:	d3 89       	ldd	r29, Z+19	; 0x13
    2144:	84 89       	ldd	r24, Z+20	; 0x14
    2146:	95 89       	ldd	r25, Z+21	; 0x15
    2148:	9f 83       	std	Y+7, r25	; 0x07
    214a:	8e 83       	std	Y+6, r24	; 0x06
    214c:	c4 89       	ldd	r28, Z+20	; 0x14
    214e:	d5 89       	ldd	r29, Z+21	; 0x15
    2150:	82 89       	ldd	r24, Z+18	; 0x12
    2152:	93 89       	ldd	r25, Z+19	; 0x13
    2154:	9d 83       	std	Y+5, r25	; 0x05
    2156:	8c 83       	std	Y+4, r24	; 0x04
    2158:	11 96       	adiw	r26, 0x01	; 1
    215a:	8d 91       	ld	r24, X+
    215c:	9c 91       	ld	r25, X
    215e:	12 97       	sbiw	r26, 0x02	; 2
    2160:	9f 01       	movw	r18, r30
    2162:	22 5f       	subi	r18, 0xF2	; 242
    2164:	3f 4f       	sbci	r19, 0xFF	; 255
    2166:	82 17       	cp	r24, r18
    2168:	93 07       	cpc	r25, r19
    216a:	31 f4       	brne	.+12     	; 0x2178 <xTaskRemoveFromEventList+0x50>
    216c:	84 89       	ldd	r24, Z+20	; 0x14
    216e:	95 89       	ldd	r25, Z+21	; 0x15
    2170:	12 96       	adiw	r26, 0x02	; 2
    2172:	9c 93       	st	X, r25
    2174:	8e 93       	st	-X, r24
    2176:	11 97       	sbiw	r26, 0x01	; 1
    2178:	11 8e       	std	Z+25, r1	; 0x19
    217a:	10 8e       	std	Z+24, r1	; 0x18
    217c:	8c 91       	ld	r24, X
    217e:	81 50       	subi	r24, 0x01	; 1
    2180:	8c 93       	st	X, r24
    2182:	80 91 c2 15 	lds	r24, 0x15C2	; 0x8015c2 <uxSchedulerSuspended>
    2186:	81 11       	cpse	r24, r1
    2188:	52 c0       	rjmp	.+164    	; 0x222e <__stack+0x2f>
    218a:	a4 85       	ldd	r26, Z+12	; 0x0c
    218c:	b5 85       	ldd	r27, Z+13	; 0x0d
    218e:	c6 81       	ldd	r28, Z+6	; 0x06
    2190:	d7 81       	ldd	r29, Z+7	; 0x07
    2192:	80 85       	ldd	r24, Z+8	; 0x08
    2194:	91 85       	ldd	r25, Z+9	; 0x09
    2196:	9f 83       	std	Y+7, r25	; 0x07
    2198:	8e 83       	std	Y+6, r24	; 0x06
    219a:	c0 85       	ldd	r28, Z+8	; 0x08
    219c:	d1 85       	ldd	r29, Z+9	; 0x09
    219e:	86 81       	ldd	r24, Z+6	; 0x06
    21a0:	97 81       	ldd	r25, Z+7	; 0x07
    21a2:	9d 83       	std	Y+5, r25	; 0x05
    21a4:	8c 83       	std	Y+4, r24	; 0x04
    21a6:	11 96       	adiw	r26, 0x01	; 1
    21a8:	8d 91       	ld	r24, X+
    21aa:	9c 91       	ld	r25, X
    21ac:	12 97       	sbiw	r26, 0x02	; 2
    21ae:	9f 01       	movw	r18, r30
    21b0:	2e 5f       	subi	r18, 0xFE	; 254
    21b2:	3f 4f       	sbci	r19, 0xFF	; 255
    21b4:	82 17       	cp	r24, r18
    21b6:	93 07       	cpc	r25, r19
    21b8:	31 f4       	brne	.+12     	; 0x21c6 <xTaskRemoveFromEventList+0x9e>
    21ba:	80 85       	ldd	r24, Z+8	; 0x08
    21bc:	91 85       	ldd	r25, Z+9	; 0x09
    21be:	12 96       	adiw	r26, 0x02	; 2
    21c0:	9c 93       	st	X, r25
    21c2:	8e 93       	st	-X, r24
    21c4:	11 97       	sbiw	r26, 0x01	; 1
    21c6:	15 86       	std	Z+13, r1	; 0x0d
    21c8:	14 86       	std	Z+12, r1	; 0x0c
    21ca:	8c 91       	ld	r24, X
    21cc:	81 50       	subi	r24, 0x01	; 1
    21ce:	8c 93       	st	X, r24
    21d0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    21d2:	80 91 d1 15 	lds	r24, 0x15D1	; 0x8015d1 <uxTopReadyPriority>
    21d6:	8a 17       	cp	r24, r26
    21d8:	10 f4       	brcc	.+4      	; 0x21de <xTaskRemoveFromEventList+0xb6>
    21da:	a0 93 d1 15 	sts	0x15D1, r26	; 0x8015d1 <uxTopReadyPriority>
    21de:	8b e0       	ldi	r24, 0x0B	; 11
    21e0:	8a 9f       	mul	r24, r26
    21e2:	d0 01       	movw	r26, r0
    21e4:	11 24       	eor	r1, r1
    21e6:	ad 5e       	subi	r26, 0xED	; 237
    21e8:	b9 4e       	sbci	r27, 0xE9	; 233
    21ea:	11 96       	adiw	r26, 0x01	; 1
    21ec:	0d 90       	ld	r0, X+
    21ee:	bc 91       	ld	r27, X
    21f0:	a0 2d       	mov	r26, r0
    21f2:	b7 83       	std	Z+7, r27	; 0x07
    21f4:	a6 83       	std	Z+6, r26	; 0x06
    21f6:	16 96       	adiw	r26, 0x06	; 6
    21f8:	4d 91       	ld	r20, X+
    21fa:	5c 91       	ld	r21, X
    21fc:	17 97       	sbiw	r26, 0x07	; 7
    21fe:	51 87       	std	Z+9, r21	; 0x09
    2200:	40 87       	std	Z+8, r20	; 0x08
    2202:	16 96       	adiw	r26, 0x06	; 6
    2204:	cd 91       	ld	r28, X+
    2206:	dc 91       	ld	r29, X
    2208:	17 97       	sbiw	r26, 0x07	; 7
    220a:	3d 83       	std	Y+5, r19	; 0x05
    220c:	2c 83       	std	Y+4, r18	; 0x04
    220e:	17 96       	adiw	r26, 0x07	; 7
    2210:	3c 93       	st	X, r19
    2212:	2e 93       	st	-X, r18
    2214:	16 97       	sbiw	r26, 0x06	; 6
    2216:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2218:	8a 9f       	mul	r24, r26
    221a:	d0 01       	movw	r26, r0
    221c:	11 24       	eor	r1, r1
    221e:	ad 5e       	subi	r26, 0xED	; 237
    2220:	b9 4e       	sbci	r27, 0xE9	; 233
    2222:	b5 87       	std	Z+13, r27	; 0x0d
    2224:	a4 87       	std	Z+12, r26	; 0x0c
    2226:	8c 91       	ld	r24, X
    2228:	8f 5f       	subi	r24, 0xFF	; 255
    222a:	8c 93       	st	X, r24
    222c:	1c c0       	rjmp	.+56     	; 0x2266 <__stack+0x67>
    222e:	4e ee       	ldi	r20, 0xEE	; 238
    2230:	55 e1       	ldi	r21, 0x15	; 21
    2232:	da 01       	movw	r26, r20
    2234:	11 96       	adiw	r26, 0x01	; 1
    2236:	cd 91       	ld	r28, X+
    2238:	dc 91       	ld	r29, X
    223a:	12 97       	sbiw	r26, 0x02	; 2
    223c:	d3 8b       	std	Z+19, r29	; 0x13
    223e:	c2 8b       	std	Z+18, r28	; 0x12
    2240:	8e 81       	ldd	r24, Y+6	; 0x06
    2242:	9f 81       	ldd	r25, Y+7	; 0x07
    2244:	95 8b       	std	Z+21, r25	; 0x15
    2246:	84 8b       	std	Z+20, r24	; 0x14
    2248:	8e 81       	ldd	r24, Y+6	; 0x06
    224a:	9f 81       	ldd	r25, Y+7	; 0x07
    224c:	dc 01       	movw	r26, r24
    224e:	15 96       	adiw	r26, 0x05	; 5
    2250:	3c 93       	st	X, r19
    2252:	2e 93       	st	-X, r18
    2254:	14 97       	sbiw	r26, 0x04	; 4
    2256:	3f 83       	std	Y+7, r19	; 0x07
    2258:	2e 83       	std	Y+6, r18	; 0x06
    225a:	51 8f       	std	Z+25, r21	; 0x19
    225c:	40 8f       	std	Z+24, r20	; 0x18
    225e:	da 01       	movw	r26, r20
    2260:	8c 91       	ld	r24, X
    2262:	8f 5f       	subi	r24, 0xFF	; 255
    2264:	8c 93       	st	X, r24
    2266:	92 8d       	ldd	r25, Z+26	; 0x1a
    2268:	e0 91 81 16 	lds	r30, 0x1681	; 0x801681 <pxCurrentTCB>
    226c:	f0 91 82 16 	lds	r31, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    2270:	82 8d       	ldd	r24, Z+26	; 0x1a
    2272:	89 17       	cp	r24, r25
    2274:	20 f4       	brcc	.+8      	; 0x227e <__stack+0x7f>
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	80 93 cb 15 	sts	0x15CB, r24	; 0x8015cb <xYieldPending>
    227c:	01 c0       	rjmp	.+2      	; 0x2280 <__stack+0x81>
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	df 91       	pop	r29
    2282:	cf 91       	pop	r28
    2284:	08 95       	ret

00002286 <vTaskSetTimeOutState>:
    2286:	0f b6       	in	r0, 0x3f	; 63
    2288:	f8 94       	cli
    228a:	0f 92       	push	r0
    228c:	20 91 ca 15 	lds	r18, 0x15CA	; 0x8015ca <xNumOfOverflows>
    2290:	fc 01       	movw	r30, r24
    2292:	20 83       	st	Z, r18
    2294:	40 91 d2 15 	lds	r20, 0x15D2	; 0x8015d2 <xTickCount>
    2298:	50 91 d3 15 	lds	r21, 0x15D3	; 0x8015d3 <xTickCount+0x1>
    229c:	60 91 d4 15 	lds	r22, 0x15D4	; 0x8015d4 <xTickCount+0x2>
    22a0:	70 91 d5 15 	lds	r23, 0x15D5	; 0x8015d5 <xTickCount+0x3>
    22a4:	41 83       	std	Z+1, r20	; 0x01
    22a6:	52 83       	std	Z+2, r21	; 0x02
    22a8:	63 83       	std	Z+3, r22	; 0x03
    22aa:	74 83       	std	Z+4, r23	; 0x04
    22ac:	0f 90       	pop	r0
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	08 95       	ret

000022b2 <vTaskInternalSetTimeOutState>:
    22b2:	20 91 ca 15 	lds	r18, 0x15CA	; 0x8015ca <xNumOfOverflows>
    22b6:	fc 01       	movw	r30, r24
    22b8:	20 83       	st	Z, r18
    22ba:	40 91 d2 15 	lds	r20, 0x15D2	; 0x8015d2 <xTickCount>
    22be:	50 91 d3 15 	lds	r21, 0x15D3	; 0x8015d3 <xTickCount+0x1>
    22c2:	60 91 d4 15 	lds	r22, 0x15D4	; 0x8015d4 <xTickCount+0x2>
    22c6:	70 91 d5 15 	lds	r23, 0x15D5	; 0x8015d5 <xTickCount+0x3>
    22ca:	41 83       	std	Z+1, r20	; 0x01
    22cc:	52 83       	std	Z+2, r21	; 0x02
    22ce:	63 83       	std	Z+3, r22	; 0x03
    22d0:	74 83       	std	Z+4, r23	; 0x04
    22d2:	08 95       	ret

000022d4 <xTaskCheckForTimeOut>:
    22d4:	8f 92       	push	r8
    22d6:	9f 92       	push	r9
    22d8:	af 92       	push	r10
    22da:	bf 92       	push	r11
    22dc:	cf 92       	push	r12
    22de:	df 92       	push	r13
    22e0:	ef 92       	push	r14
    22e2:	ff 92       	push	r15
    22e4:	0f 93       	push	r16
    22e6:	1f 93       	push	r17
    22e8:	cf 93       	push	r28
    22ea:	df 93       	push	r29
    22ec:	fb 01       	movw	r30, r22
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	f8 94       	cli
    22f2:	0f 92       	push	r0
    22f4:	c0 90 d2 15 	lds	r12, 0x15D2	; 0x8015d2 <xTickCount>
    22f8:	d0 90 d3 15 	lds	r13, 0x15D3	; 0x8015d3 <xTickCount+0x1>
    22fc:	e0 90 d4 15 	lds	r14, 0x15D4	; 0x8015d4 <xTickCount+0x2>
    2300:	f0 90 d5 15 	lds	r15, 0x15D5	; 0x8015d5 <xTickCount+0x3>
    2304:	dc 01       	movw	r26, r24
    2306:	11 96       	adiw	r26, 0x01	; 1
    2308:	0d 91       	ld	r16, X+
    230a:	1d 91       	ld	r17, X+
    230c:	2d 91       	ld	r18, X+
    230e:	3c 91       	ld	r19, X
    2310:	14 97       	sbiw	r26, 0x04	; 4
    2312:	46 01       	movw	r8, r12
    2314:	57 01       	movw	r10, r14
    2316:	80 1a       	sub	r8, r16
    2318:	91 0a       	sbc	r9, r17
    231a:	a2 0a       	sbc	r10, r18
    231c:	b3 0a       	sbc	r11, r19
    231e:	40 81       	ld	r20, Z
    2320:	51 81       	ldd	r21, Z+1	; 0x01
    2322:	62 81       	ldd	r22, Z+2	; 0x02
    2324:	73 81       	ldd	r23, Z+3	; 0x03
    2326:	4f 3f       	cpi	r20, 0xFF	; 255
    2328:	bf ef       	ldi	r27, 0xFF	; 255
    232a:	5b 07       	cpc	r21, r27
    232c:	6b 07       	cpc	r22, r27
    232e:	7b 07       	cpc	r23, r27
    2330:	39 f1       	breq	.+78     	; 0x2380 <xTaskCheckForTimeOut+0xac>
    2332:	ec 01       	movw	r28, r24
    2334:	b8 81       	ld	r27, Y
    2336:	a0 91 ca 15 	lds	r26, 0x15CA	; 0x8015ca <xNumOfOverflows>
    233a:	ba 17       	cp	r27, r26
    233c:	59 f0       	breq	.+22     	; 0x2354 <xTaskCheckForTimeOut+0x80>
    233e:	c0 16       	cp	r12, r16
    2340:	d1 06       	cpc	r13, r17
    2342:	e2 06       	cpc	r14, r18
    2344:	f3 06       	cpc	r15, r19
    2346:	30 f0       	brcs	.+12     	; 0x2354 <xTaskCheckForTimeOut+0x80>
    2348:	10 82       	st	Z, r1
    234a:	11 82       	std	Z+1, r1	; 0x01
    234c:	12 82       	std	Z+2, r1	; 0x02
    234e:	13 82       	std	Z+3, r1	; 0x03
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	17 c0       	rjmp	.+46     	; 0x2382 <xTaskCheckForTimeOut+0xae>
    2354:	84 16       	cp	r8, r20
    2356:	95 06       	cpc	r9, r21
    2358:	a6 06       	cpc	r10, r22
    235a:	b7 06       	cpc	r11, r23
    235c:	58 f4       	brcc	.+22     	; 0x2374 <xTaskCheckForTimeOut+0xa0>
    235e:	48 19       	sub	r20, r8
    2360:	59 09       	sbc	r21, r9
    2362:	6a 09       	sbc	r22, r10
    2364:	7b 09       	sbc	r23, r11
    2366:	40 83       	st	Z, r20
    2368:	51 83       	std	Z+1, r21	; 0x01
    236a:	62 83       	std	Z+2, r22	; 0x02
    236c:	73 83       	std	Z+3, r23	; 0x03
    236e:	a1 df       	rcall	.-190    	; 0x22b2 <vTaskInternalSetTimeOutState>
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	07 c0       	rjmp	.+14     	; 0x2382 <xTaskCheckForTimeOut+0xae>
    2374:	10 82       	st	Z, r1
    2376:	11 82       	std	Z+1, r1	; 0x01
    2378:	12 82       	std	Z+2, r1	; 0x02
    237a:	13 82       	std	Z+3, r1	; 0x03
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	01 c0       	rjmp	.+2      	; 0x2382 <xTaskCheckForTimeOut+0xae>
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	0f 90       	pop	r0
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	df 91       	pop	r29
    2388:	cf 91       	pop	r28
    238a:	1f 91       	pop	r17
    238c:	0f 91       	pop	r16
    238e:	ff 90       	pop	r15
    2390:	ef 90       	pop	r14
    2392:	df 90       	pop	r13
    2394:	cf 90       	pop	r12
    2396:	bf 90       	pop	r11
    2398:	af 90       	pop	r10
    239a:	9f 90       	pop	r9
    239c:	8f 90       	pop	r8
    239e:	08 95       	ret

000023a0 <vTaskMissedYield>:
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	80 93 cb 15 	sts	0x15CB, r24	; 0x8015cb <xYieldPending>
    23a6:	08 95       	ret

000023a8 <xTaskGetCurrentTaskHandle>:
    23a8:	80 91 81 16 	lds	r24, 0x1681	; 0x801681 <pxCurrentTCB>
    23ac:	90 91 82 16 	lds	r25, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    23b0:	08 95       	ret

000023b2 <xTaskGetSchedulerState>:
    23b2:	80 91 d0 15 	lds	r24, 0x15D0	; 0x8015d0 <xSchedulerRunning>
    23b6:	88 23       	and	r24, r24
    23b8:	31 f0       	breq	.+12     	; 0x23c6 <xTaskGetSchedulerState+0x14>
    23ba:	80 91 c2 15 	lds	r24, 0x15C2	; 0x8015c2 <uxSchedulerSuspended>
    23be:	81 11       	cpse	r24, r1
    23c0:	04 c0       	rjmp	.+8      	; 0x23ca <xTaskGetSchedulerState+0x18>
    23c2:	82 e0       	ldi	r24, 0x02	; 2
    23c4:	08 95       	ret
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	08 95       	ret
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	08 95       	ret

000023ce <xTaskPriorityInherit>:
    23ce:	0f 93       	push	r16
    23d0:	1f 93       	push	r17
    23d2:	cf 93       	push	r28
    23d4:	df 93       	push	r29
    23d6:	fc 01       	movw	r30, r24
    23d8:	89 2b       	or	r24, r25
    23da:	09 f4       	brne	.+2      	; 0x23de <xTaskPriorityInherit+0x10>
    23dc:	77 c0       	rjmp	.+238    	; 0x24cc <xTaskPriorityInherit+0xfe>
    23de:	82 8d       	ldd	r24, Z+26	; 0x1a
    23e0:	a0 91 81 16 	lds	r26, 0x1681	; 0x801681 <pxCurrentTCB>
    23e4:	b0 91 82 16 	lds	r27, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    23e8:	5a 96       	adiw	r26, 0x1a	; 26
    23ea:	9c 91       	ld	r25, X
    23ec:	89 17       	cp	r24, r25
    23ee:	08 f0       	brcs	.+2      	; 0x23f2 <xTaskPriorityInherit+0x24>
    23f0:	63 c0       	rjmp	.+198    	; 0x24b8 <xTaskPriorityInherit+0xea>
    23f2:	46 85       	ldd	r20, Z+14	; 0x0e
    23f4:	57 85       	ldd	r21, Z+15	; 0x0f
    23f6:	60 89       	ldd	r22, Z+16	; 0x10
    23f8:	71 89       	ldd	r23, Z+17	; 0x11
    23fa:	77 23       	and	r23, r23
    23fc:	94 f0       	brlt	.+36     	; 0x2422 <xTaskPriorityInherit+0x54>
    23fe:	a0 91 81 16 	lds	r26, 0x1681	; 0x801681 <pxCurrentTCB>
    2402:	b0 91 82 16 	lds	r27, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    2406:	5a 96       	adiw	r26, 0x1a	; 26
    2408:	9c 91       	ld	r25, X
    240a:	4a e0       	ldi	r20, 0x0A	; 10
    240c:	50 e0       	ldi	r21, 0x00	; 0
    240e:	60 e0       	ldi	r22, 0x00	; 0
    2410:	70 e0       	ldi	r23, 0x00	; 0
    2412:	49 1b       	sub	r20, r25
    2414:	51 09       	sbc	r21, r1
    2416:	61 09       	sbc	r22, r1
    2418:	71 09       	sbc	r23, r1
    241a:	46 87       	std	Z+14, r20	; 0x0e
    241c:	57 87       	std	Z+15, r21	; 0x0f
    241e:	60 8b       	std	Z+16, r22	; 0x10
    2420:	71 8b       	std	Z+17, r23	; 0x11
    2422:	24 85       	ldd	r18, Z+12	; 0x0c
    2424:	35 85       	ldd	r19, Z+13	; 0x0d
    2426:	4b e0       	ldi	r20, 0x0B	; 11
    2428:	84 9f       	mul	r24, r20
    242a:	c0 01       	movw	r24, r0
    242c:	11 24       	eor	r1, r1
    242e:	8d 5e       	subi	r24, 0xED	; 237
    2430:	99 4e       	sbci	r25, 0xE9	; 233
    2432:	28 17       	cp	r18, r24
    2434:	39 07       	cpc	r19, r25
    2436:	b9 f5       	brne	.+110    	; 0x24a6 <xTaskPriorityInherit+0xd8>
    2438:	ef 01       	movw	r28, r30
    243a:	8f 01       	movw	r16, r30
    243c:	0e 5f       	subi	r16, 0xFE	; 254
    243e:	1f 4f       	sbci	r17, 0xFF	; 255
    2440:	c8 01       	movw	r24, r16
    2442:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
    2446:	e0 91 81 16 	lds	r30, 0x1681	; 0x801681 <pxCurrentTCB>
    244a:	f0 91 82 16 	lds	r31, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    244e:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2450:	ea 8f       	std	Y+26, r30	; 0x1a
    2452:	80 91 d1 15 	lds	r24, 0x15D1	; 0x8015d1 <uxTopReadyPriority>
    2456:	8e 17       	cp	r24, r30
    2458:	10 f4       	brcc	.+4      	; 0x245e <xTaskPriorityInherit+0x90>
    245a:	e0 93 d1 15 	sts	0x15D1, r30	; 0x8015d1 <uxTopReadyPriority>
    245e:	8b e0       	ldi	r24, 0x0B	; 11
    2460:	8e 9f       	mul	r24, r30
    2462:	f0 01       	movw	r30, r0
    2464:	11 24       	eor	r1, r1
    2466:	ed 5e       	subi	r30, 0xED	; 237
    2468:	f9 4e       	sbci	r31, 0xE9	; 233
    246a:	01 80       	ldd	r0, Z+1	; 0x01
    246c:	f2 81       	ldd	r31, Z+2	; 0x02
    246e:	e0 2d       	mov	r30, r0
    2470:	ff 83       	std	Y+7, r31	; 0x07
    2472:	ee 83       	std	Y+6, r30	; 0x06
    2474:	26 81       	ldd	r18, Z+6	; 0x06
    2476:	37 81       	ldd	r19, Z+7	; 0x07
    2478:	39 87       	std	Y+9, r19	; 0x09
    247a:	28 87       	std	Y+8, r18	; 0x08
    247c:	a6 81       	ldd	r26, Z+6	; 0x06
    247e:	b7 81       	ldd	r27, Z+7	; 0x07
    2480:	15 96       	adiw	r26, 0x05	; 5
    2482:	1c 93       	st	X, r17
    2484:	0e 93       	st	-X, r16
    2486:	14 97       	sbiw	r26, 0x04	; 4
    2488:	17 83       	std	Z+7, r17	; 0x07
    248a:	06 83       	std	Z+6, r16	; 0x06
    248c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    248e:	8e 9f       	mul	r24, r30
    2490:	f0 01       	movw	r30, r0
    2492:	11 24       	eor	r1, r1
    2494:	ed 5e       	subi	r30, 0xED	; 237
    2496:	f9 4e       	sbci	r31, 0xE9	; 233
    2498:	fd 87       	std	Y+13, r31	; 0x0d
    249a:	ec 87       	std	Y+12, r30	; 0x0c
    249c:	80 81       	ld	r24, Z
    249e:	8f 5f       	subi	r24, 0xFF	; 255
    24a0:	80 83       	st	Z, r24
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	16 c0       	rjmp	.+44     	; 0x24d2 <xTaskPriorityInherit+0x104>
    24a6:	a0 91 81 16 	lds	r26, 0x1681	; 0x801681 <pxCurrentTCB>
    24aa:	b0 91 82 16 	lds	r27, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    24ae:	5a 96       	adiw	r26, 0x1a	; 26
    24b0:	8c 91       	ld	r24, X
    24b2:	82 8f       	std	Z+26, r24	; 0x1a
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	0d c0       	rjmp	.+26     	; 0x24d2 <xTaskPriorityInherit+0x104>
    24b8:	95 a5       	ldd	r25, Z+45	; 0x2d
    24ba:	e0 91 81 16 	lds	r30, 0x1681	; 0x801681 <pxCurrentTCB>
    24be:	f0 91 82 16 	lds	r31, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    24c2:	82 8d       	ldd	r24, Z+26	; 0x1a
    24c4:	98 17       	cp	r25, r24
    24c6:	20 f0       	brcs	.+8      	; 0x24d0 <xTaskPriorityInherit+0x102>
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	03 c0       	rjmp	.+6      	; 0x24d2 <xTaskPriorityInherit+0x104>
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	01 c0       	rjmp	.+2      	; 0x24d2 <xTaskPriorityInherit+0x104>
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	df 91       	pop	r29
    24d4:	cf 91       	pop	r28
    24d6:	1f 91       	pop	r17
    24d8:	0f 91       	pop	r16
    24da:	08 95       	ret

000024dc <xTaskPriorityDisinherit>:
    24dc:	0f 93       	push	r16
    24de:	1f 93       	push	r17
    24e0:	cf 93       	push	r28
    24e2:	df 93       	push	r29
    24e4:	fc 01       	movw	r30, r24
    24e6:	89 2b       	or	r24, r25
    24e8:	09 f4       	brne	.+2      	; 0x24ec <xTaskPriorityDisinherit+0x10>
    24ea:	49 c0       	rjmp	.+146    	; 0x257e <xTaskPriorityDisinherit+0xa2>
    24ec:	86 a5       	ldd	r24, Z+46	; 0x2e
    24ee:	81 50       	subi	r24, 0x01	; 1
    24f0:	86 a7       	std	Z+46, r24	; 0x2e
    24f2:	22 8d       	ldd	r18, Z+26	; 0x1a
    24f4:	95 a5       	ldd	r25, Z+45	; 0x2d
    24f6:	29 17       	cp	r18, r25
    24f8:	09 f4       	brne	.+2      	; 0x24fc <xTaskPriorityDisinherit+0x20>
    24fa:	43 c0       	rjmp	.+134    	; 0x2582 <xTaskPriorityDisinherit+0xa6>
    24fc:	81 11       	cpse	r24, r1
    24fe:	43 c0       	rjmp	.+134    	; 0x2586 <xTaskPriorityDisinherit+0xaa>
    2500:	ef 01       	movw	r28, r30
    2502:	8f 01       	movw	r16, r30
    2504:	0e 5f       	subi	r16, 0xFE	; 254
    2506:	1f 4f       	sbci	r17, 0xFF	; 255
    2508:	c8 01       	movw	r24, r16
    250a:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
    250e:	ed a5       	ldd	r30, Y+45	; 0x2d
    2510:	ea 8f       	std	Y+26, r30	; 0x1a
    2512:	8a e0       	ldi	r24, 0x0A	; 10
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	a0 e0       	ldi	r26, 0x00	; 0
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	8e 1b       	sub	r24, r30
    251c:	91 09       	sbc	r25, r1
    251e:	a1 09       	sbc	r26, r1
    2520:	b1 09       	sbc	r27, r1
    2522:	8e 87       	std	Y+14, r24	; 0x0e
    2524:	9f 87       	std	Y+15, r25	; 0x0f
    2526:	a8 8b       	std	Y+16, r26	; 0x10
    2528:	b9 8b       	std	Y+17, r27	; 0x11
    252a:	80 91 d1 15 	lds	r24, 0x15D1	; 0x8015d1 <uxTopReadyPriority>
    252e:	8e 17       	cp	r24, r30
    2530:	10 f4       	brcc	.+4      	; 0x2536 <xTaskPriorityDisinherit+0x5a>
    2532:	e0 93 d1 15 	sts	0x15D1, r30	; 0x8015d1 <uxTopReadyPriority>
    2536:	8b e0       	ldi	r24, 0x0B	; 11
    2538:	8e 9f       	mul	r24, r30
    253a:	f0 01       	movw	r30, r0
    253c:	11 24       	eor	r1, r1
    253e:	ed 5e       	subi	r30, 0xED	; 237
    2540:	f9 4e       	sbci	r31, 0xE9	; 233
    2542:	01 80       	ldd	r0, Z+1	; 0x01
    2544:	f2 81       	ldd	r31, Z+2	; 0x02
    2546:	e0 2d       	mov	r30, r0
    2548:	ff 83       	std	Y+7, r31	; 0x07
    254a:	ee 83       	std	Y+6, r30	; 0x06
    254c:	26 81       	ldd	r18, Z+6	; 0x06
    254e:	37 81       	ldd	r19, Z+7	; 0x07
    2550:	39 87       	std	Y+9, r19	; 0x09
    2552:	28 87       	std	Y+8, r18	; 0x08
    2554:	a6 81       	ldd	r26, Z+6	; 0x06
    2556:	b7 81       	ldd	r27, Z+7	; 0x07
    2558:	15 96       	adiw	r26, 0x05	; 5
    255a:	1c 93       	st	X, r17
    255c:	0e 93       	st	-X, r16
    255e:	14 97       	sbiw	r26, 0x04	; 4
    2560:	17 83       	std	Z+7, r17	; 0x07
    2562:	06 83       	std	Z+6, r16	; 0x06
    2564:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2566:	8e 9f       	mul	r24, r30
    2568:	f0 01       	movw	r30, r0
    256a:	11 24       	eor	r1, r1
    256c:	ed 5e       	subi	r30, 0xED	; 237
    256e:	f9 4e       	sbci	r31, 0xE9	; 233
    2570:	fd 87       	std	Y+13, r31	; 0x0d
    2572:	ec 87       	std	Y+12, r30	; 0x0c
    2574:	80 81       	ld	r24, Z
    2576:	8f 5f       	subi	r24, 0xFF	; 255
    2578:	80 83       	st	Z, r24
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	05 c0       	rjmp	.+10     	; 0x2588 <xTaskPriorityDisinherit+0xac>
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	03 c0       	rjmp	.+6      	; 0x2588 <xTaskPriorityDisinherit+0xac>
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	01 c0       	rjmp	.+2      	; 0x2588 <xTaskPriorityDisinherit+0xac>
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	df 91       	pop	r29
    258a:	cf 91       	pop	r28
    258c:	1f 91       	pop	r17
    258e:	0f 91       	pop	r16
    2590:	08 95       	ret

00002592 <vTaskPriorityDisinheritAfterTimeout>:
    2592:	0f 93       	push	r16
    2594:	1f 93       	push	r17
    2596:	cf 93       	push	r28
    2598:	df 93       	push	r29
    259a:	fc 01       	movw	r30, r24
    259c:	89 2b       	or	r24, r25
    259e:	09 f4       	brne	.+2      	; 0x25a2 <vTaskPriorityDisinheritAfterTimeout+0x10>
    25a0:	5a c0       	rjmp	.+180    	; 0x2656 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    25a2:	85 a5       	ldd	r24, Z+45	; 0x2d
    25a4:	86 17       	cp	r24, r22
    25a6:	08 f4       	brcc	.+2      	; 0x25aa <vTaskPriorityDisinheritAfterTimeout+0x18>
    25a8:	86 2f       	mov	r24, r22
    25aa:	92 8d       	ldd	r25, Z+26	; 0x1a
    25ac:	89 17       	cp	r24, r25
    25ae:	09 f4       	brne	.+2      	; 0x25b2 <vTaskPriorityDisinheritAfterTimeout+0x20>
    25b0:	52 c0       	rjmp	.+164    	; 0x2656 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    25b2:	26 a5       	ldd	r18, Z+46	; 0x2e
    25b4:	21 30       	cpi	r18, 0x01	; 1
    25b6:	09 f0       	breq	.+2      	; 0x25ba <vTaskPriorityDisinheritAfterTimeout+0x28>
    25b8:	4e c0       	rjmp	.+156    	; 0x2656 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    25ba:	82 8f       	std	Z+26, r24	; 0x1a
    25bc:	46 85       	ldd	r20, Z+14	; 0x0e
    25be:	57 85       	ldd	r21, Z+15	; 0x0f
    25c0:	60 89       	ldd	r22, Z+16	; 0x10
    25c2:	71 89       	ldd	r23, Z+17	; 0x11
    25c4:	77 23       	and	r23, r23
    25c6:	64 f0       	brlt	.+24     	; 0x25e0 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    25c8:	4a e0       	ldi	r20, 0x0A	; 10
    25ca:	50 e0       	ldi	r21, 0x00	; 0
    25cc:	60 e0       	ldi	r22, 0x00	; 0
    25ce:	70 e0       	ldi	r23, 0x00	; 0
    25d0:	48 1b       	sub	r20, r24
    25d2:	51 09       	sbc	r21, r1
    25d4:	61 09       	sbc	r22, r1
    25d6:	71 09       	sbc	r23, r1
    25d8:	46 87       	std	Z+14, r20	; 0x0e
    25da:	57 87       	std	Z+15, r21	; 0x0f
    25dc:	60 8b       	std	Z+16, r22	; 0x10
    25de:	71 8b       	std	Z+17, r23	; 0x11
    25e0:	24 85       	ldd	r18, Z+12	; 0x0c
    25e2:	35 85       	ldd	r19, Z+13	; 0x0d
    25e4:	4b e0       	ldi	r20, 0x0B	; 11
    25e6:	94 9f       	mul	r25, r20
    25e8:	c0 01       	movw	r24, r0
    25ea:	11 24       	eor	r1, r1
    25ec:	8d 5e       	subi	r24, 0xED	; 237
    25ee:	99 4e       	sbci	r25, 0xE9	; 233
    25f0:	28 17       	cp	r18, r24
    25f2:	39 07       	cpc	r19, r25
    25f4:	81 f5       	brne	.+96     	; 0x2656 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    25f6:	ef 01       	movw	r28, r30
    25f8:	8f 01       	movw	r16, r30
    25fa:	0e 5f       	subi	r16, 0xFE	; 254
    25fc:	1f 4f       	sbci	r17, 0xFF	; 255
    25fe:	c8 01       	movw	r24, r16
    2600:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
    2604:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2606:	80 91 d1 15 	lds	r24, 0x15D1	; 0x8015d1 <uxTopReadyPriority>
    260a:	8e 17       	cp	r24, r30
    260c:	10 f4       	brcc	.+4      	; 0x2612 <vTaskPriorityDisinheritAfterTimeout+0x80>
    260e:	e0 93 d1 15 	sts	0x15D1, r30	; 0x8015d1 <uxTopReadyPriority>
    2612:	8b e0       	ldi	r24, 0x0B	; 11
    2614:	8e 9f       	mul	r24, r30
    2616:	f0 01       	movw	r30, r0
    2618:	11 24       	eor	r1, r1
    261a:	ed 5e       	subi	r30, 0xED	; 237
    261c:	f9 4e       	sbci	r31, 0xE9	; 233
    261e:	01 80       	ldd	r0, Z+1	; 0x01
    2620:	f2 81       	ldd	r31, Z+2	; 0x02
    2622:	e0 2d       	mov	r30, r0
    2624:	ff 83       	std	Y+7, r31	; 0x07
    2626:	ee 83       	std	Y+6, r30	; 0x06
    2628:	26 81       	ldd	r18, Z+6	; 0x06
    262a:	37 81       	ldd	r19, Z+7	; 0x07
    262c:	39 87       	std	Y+9, r19	; 0x09
    262e:	28 87       	std	Y+8, r18	; 0x08
    2630:	a6 81       	ldd	r26, Z+6	; 0x06
    2632:	b7 81       	ldd	r27, Z+7	; 0x07
    2634:	15 96       	adiw	r26, 0x05	; 5
    2636:	1c 93       	st	X, r17
    2638:	0e 93       	st	-X, r16
    263a:	14 97       	sbiw	r26, 0x04	; 4
    263c:	17 83       	std	Z+7, r17	; 0x07
    263e:	06 83       	std	Z+6, r16	; 0x06
    2640:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2642:	8e 9f       	mul	r24, r30
    2644:	f0 01       	movw	r30, r0
    2646:	11 24       	eor	r1, r1
    2648:	ed 5e       	subi	r30, 0xED	; 237
    264a:	f9 4e       	sbci	r31, 0xE9	; 233
    264c:	fd 87       	std	Y+13, r31	; 0x0d
    264e:	ec 87       	std	Y+12, r30	; 0x0c
    2650:	80 81       	ld	r24, Z
    2652:	8f 5f       	subi	r24, 0xFF	; 255
    2654:	80 83       	st	Z, r24
    2656:	df 91       	pop	r29
    2658:	cf 91       	pop	r28
    265a:	1f 91       	pop	r17
    265c:	0f 91       	pop	r16
    265e:	08 95       	ret

00002660 <pvTaskIncrementMutexHeldCount>:
    2660:	80 91 81 16 	lds	r24, 0x1681	; 0x801681 <pxCurrentTCB>
    2664:	90 91 82 16 	lds	r25, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    2668:	89 2b       	or	r24, r25
    266a:	39 f0       	breq	.+14     	; 0x267a <pvTaskIncrementMutexHeldCount+0x1a>
    266c:	e0 91 81 16 	lds	r30, 0x1681	; 0x801681 <pxCurrentTCB>
    2670:	f0 91 82 16 	lds	r31, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    2674:	86 a5       	ldd	r24, Z+46	; 0x2e
    2676:	8f 5f       	subi	r24, 0xFF	; 255
    2678:	86 a7       	std	Z+46, r24	; 0x2e
    267a:	80 91 81 16 	lds	r24, 0x1681	; 0x801681 <pxCurrentTCB>
    267e:	90 91 82 16 	lds	r25, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    2682:	08 95       	ret

00002684 <xTaskGenericNotifyWait>:
    2684:	4f 92       	push	r4
    2686:	5f 92       	push	r5
    2688:	6f 92       	push	r6
    268a:	7f 92       	push	r7
    268c:	af 92       	push	r10
    268e:	bf 92       	push	r11
    2690:	cf 92       	push	r12
    2692:	df 92       	push	r13
    2694:	ef 92       	push	r14
    2696:	ff 92       	push	r15
    2698:	0f 93       	push	r16
    269a:	1f 93       	push	r17
    269c:	cf 93       	push	r28
    269e:	df 93       	push	r29
    26a0:	28 01       	movw	r4, r16
    26a2:	39 01       	movw	r6, r18
    26a4:	0f b6       	in	r0, 0x3f	; 63
    26a6:	f8 94       	cli
    26a8:	0f 92       	push	r0
    26aa:	e0 91 81 16 	lds	r30, 0x1681	; 0x801681 <pxCurrentTCB>
    26ae:	f0 91 82 16 	lds	r31, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    26b2:	c8 2f       	mov	r28, r24
    26b4:	d0 e0       	ldi	r29, 0x00	; 0
    26b6:	ec 0f       	add	r30, r28
    26b8:	fd 1f       	adc	r31, r29
    26ba:	83 a9       	ldd	r24, Z+51	; 0x33
    26bc:	82 30       	cpi	r24, 0x02	; 2
    26be:	71 f1       	breq	.+92     	; 0x271c <xTaskGenericNotifyWait+0x98>
    26c0:	e0 91 81 16 	lds	r30, 0x1681	; 0x801681 <pxCurrentTCB>
    26c4:	f0 91 82 16 	lds	r31, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    26c8:	ce 01       	movw	r24, r28
    26ca:	88 0f       	add	r24, r24
    26cc:	99 1f       	adc	r25, r25
    26ce:	88 0f       	add	r24, r24
    26d0:	99 1f       	adc	r25, r25
    26d2:	e8 0f       	add	r30, r24
    26d4:	f9 1f       	adc	r31, r25
    26d6:	87 a5       	ldd	r24, Z+47	; 0x2f
    26d8:	90 a9       	ldd	r25, Z+48	; 0x30
    26da:	a1 a9       	ldd	r26, Z+49	; 0x31
    26dc:	b2 a9       	ldd	r27, Z+50	; 0x32
    26de:	40 95       	com	r20
    26e0:	50 95       	com	r21
    26e2:	60 95       	com	r22
    26e4:	70 95       	com	r23
    26e6:	48 23       	and	r20, r24
    26e8:	59 23       	and	r21, r25
    26ea:	6a 23       	and	r22, r26
    26ec:	7b 23       	and	r23, r27
    26ee:	47 a7       	std	Z+47, r20	; 0x2f
    26f0:	50 ab       	std	Z+48, r21	; 0x30
    26f2:	61 ab       	std	Z+49, r22	; 0x31
    26f4:	72 ab       	std	Z+50, r23	; 0x32
    26f6:	e0 91 81 16 	lds	r30, 0x1681	; 0x801681 <pxCurrentTCB>
    26fa:	f0 91 82 16 	lds	r31, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    26fe:	ec 0f       	add	r30, r28
    2700:	fd 1f       	adc	r31, r29
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	83 ab       	std	Z+51, r24	; 0x33
    2706:	a1 14       	cp	r10, r1
    2708:	b1 04       	cpc	r11, r1
    270a:	c1 04       	cpc	r12, r1
    270c:	d1 04       	cpc	r13, r1
    270e:	31 f0       	breq	.+12     	; 0x271c <xTaskGenericNotifyWait+0x98>
    2710:	41 e0       	ldi	r20, 0x01	; 1
    2712:	c6 01       	movw	r24, r12
    2714:	b5 01       	movw	r22, r10
    2716:	88 d8       	rcall	.-3824   	; 0x1828 <prvAddCurrentTaskToDelayedList>
    2718:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    271c:	0f 90       	pop	r0
    271e:	0f be       	out	0x3f, r0	; 63
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	f8 94       	cli
    2724:	0f 92       	push	r0
    2726:	e1 14       	cp	r14, r1
    2728:	f1 04       	cpc	r15, r1
    272a:	a1 f0       	breq	.+40     	; 0x2754 <xTaskGenericNotifyWait+0xd0>
    272c:	e0 91 81 16 	lds	r30, 0x1681	; 0x801681 <pxCurrentTCB>
    2730:	f0 91 82 16 	lds	r31, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    2734:	ce 01       	movw	r24, r28
    2736:	88 0f       	add	r24, r24
    2738:	99 1f       	adc	r25, r25
    273a:	88 0f       	add	r24, r24
    273c:	99 1f       	adc	r25, r25
    273e:	e8 0f       	add	r30, r24
    2740:	f9 1f       	adc	r31, r25
    2742:	87 a5       	ldd	r24, Z+47	; 0x2f
    2744:	90 a9       	ldd	r25, Z+48	; 0x30
    2746:	a1 a9       	ldd	r26, Z+49	; 0x31
    2748:	b2 a9       	ldd	r27, Z+50	; 0x32
    274a:	f7 01       	movw	r30, r14
    274c:	80 83       	st	Z, r24
    274e:	91 83       	std	Z+1, r25	; 0x01
    2750:	a2 83       	std	Z+2, r26	; 0x02
    2752:	b3 83       	std	Z+3, r27	; 0x03
    2754:	e0 91 81 16 	lds	r30, 0x1681	; 0x801681 <pxCurrentTCB>
    2758:	f0 91 82 16 	lds	r31, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    275c:	ec 0f       	add	r30, r28
    275e:	fd 1f       	adc	r31, r29
    2760:	83 a9       	ldd	r24, Z+51	; 0x33
    2762:	82 30       	cpi	r24, 0x02	; 2
    2764:	e9 f4       	brne	.+58     	; 0x27a0 <xTaskGenericNotifyWait+0x11c>
    2766:	e0 91 81 16 	lds	r30, 0x1681	; 0x801681 <pxCurrentTCB>
    276a:	f0 91 82 16 	lds	r31, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    276e:	ce 01       	movw	r24, r28
    2770:	88 0f       	add	r24, r24
    2772:	99 1f       	adc	r25, r25
    2774:	88 0f       	add	r24, r24
    2776:	99 1f       	adc	r25, r25
    2778:	e8 0f       	add	r30, r24
    277a:	f9 1f       	adc	r31, r25
    277c:	87 a5       	ldd	r24, Z+47	; 0x2f
    277e:	90 a9       	ldd	r25, Z+48	; 0x30
    2780:	a1 a9       	ldd	r26, Z+49	; 0x31
    2782:	b2 a9       	ldd	r27, Z+50	; 0x32
    2784:	40 94       	com	r4
    2786:	50 94       	com	r5
    2788:	60 94       	com	r6
    278a:	70 94       	com	r7
    278c:	48 22       	and	r4, r24
    278e:	59 22       	and	r5, r25
    2790:	6a 22       	and	r6, r26
    2792:	7b 22       	and	r7, r27
    2794:	47 a6       	std	Z+47, r4	; 0x2f
    2796:	50 aa       	std	Z+48, r5	; 0x30
    2798:	61 aa       	std	Z+49, r6	; 0x31
    279a:	72 aa       	std	Z+50, r7	; 0x32
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	01 c0       	rjmp	.+2      	; 0x27a2 <xTaskGenericNotifyWait+0x11e>
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	20 91 81 16 	lds	r18, 0x1681	; 0x801681 <pxCurrentTCB>
    27a6:	30 91 82 16 	lds	r19, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    27aa:	c2 0f       	add	r28, r18
    27ac:	d3 1f       	adc	r29, r19
    27ae:	1b aa       	std	Y+51, r1	; 0x33
    27b0:	0f 90       	pop	r0
    27b2:	0f be       	out	0x3f, r0	; 63
    27b4:	df 91       	pop	r29
    27b6:	cf 91       	pop	r28
    27b8:	1f 91       	pop	r17
    27ba:	0f 91       	pop	r16
    27bc:	ff 90       	pop	r15
    27be:	ef 90       	pop	r14
    27c0:	df 90       	pop	r13
    27c2:	cf 90       	pop	r12
    27c4:	bf 90       	pop	r11
    27c6:	af 90       	pop	r10
    27c8:	7f 90       	pop	r7
    27ca:	6f 90       	pop	r6
    27cc:	5f 90       	pop	r5
    27ce:	4f 90       	pop	r4
    27d0:	08 95       	ret

000027d2 <xTaskGenericNotify>:
    27d2:	8f 92       	push	r8
    27d4:	9f 92       	push	r9
    27d6:	af 92       	push	r10
    27d8:	bf 92       	push	r11
    27da:	ef 92       	push	r14
    27dc:	ff 92       	push	r15
    27de:	0f 93       	push	r16
    27e0:	cf 93       	push	r28
    27e2:	df 93       	push	r29
    27e4:	dc 01       	movw	r26, r24
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	0f 92       	push	r0
    27ec:	e1 14       	cp	r14, r1
    27ee:	f1 04       	cpc	r15, r1
    27f0:	89 f0       	breq	.+34     	; 0x2814 <xTaskGenericNotify+0x42>
    27f2:	e6 2f       	mov	r30, r22
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	ee 0f       	add	r30, r30
    27f8:	ff 1f       	adc	r31, r31
    27fa:	ee 0f       	add	r30, r30
    27fc:	ff 1f       	adc	r31, r31
    27fe:	e8 0f       	add	r30, r24
    2800:	f9 1f       	adc	r31, r25
    2802:	87 a4       	ldd	r8, Z+47	; 0x2f
    2804:	90 a8       	ldd	r9, Z+48	; 0x30
    2806:	a1 a8       	ldd	r10, Z+49	; 0x31
    2808:	b2 a8       	ldd	r11, Z+50	; 0x32
    280a:	f7 01       	movw	r30, r14
    280c:	80 82       	st	Z, r8
    280e:	91 82       	std	Z+1, r9	; 0x01
    2810:	a2 82       	std	Z+2, r10	; 0x02
    2812:	b3 82       	std	Z+3, r11	; 0x03
    2814:	70 e0       	ldi	r23, 0x00	; 0
    2816:	fd 01       	movw	r30, r26
    2818:	e6 0f       	add	r30, r22
    281a:	f7 1f       	adc	r31, r23
    281c:	83 a9       	ldd	r24, Z+51	; 0x33
    281e:	92 e0       	ldi	r25, 0x02	; 2
    2820:	93 ab       	std	Z+51, r25	; 0x33
    2822:	02 30       	cpi	r16, 0x02	; 2
    2824:	01 f1       	breq	.+64     	; 0x2866 <xTaskGenericNotify+0x94>
    2826:	18 f4       	brcc	.+6      	; 0x282e <xTaskGenericNotify+0x5c>
    2828:	01 30       	cpi	r16, 0x01	; 1
    282a:	31 f0       	breq	.+12     	; 0x2838 <xTaskGenericNotify+0x66>
    282c:	4d c0       	rjmp	.+154    	; 0x28c8 <xTaskGenericNotify+0xf6>
    282e:	03 30       	cpi	r16, 0x03	; 3
    2830:	79 f1       	breq	.+94     	; 0x2890 <xTaskGenericNotify+0xbe>
    2832:	04 30       	cpi	r16, 0x04	; 4
    2834:	d1 f1       	breq	.+116    	; 0x28aa <xTaskGenericNotify+0xd8>
    2836:	48 c0       	rjmp	.+144    	; 0x28c8 <xTaskGenericNotify+0xf6>
    2838:	66 0f       	add	r22, r22
    283a:	77 1f       	adc	r23, r23
    283c:	66 0f       	add	r22, r22
    283e:	77 1f       	adc	r23, r23
    2840:	fd 01       	movw	r30, r26
    2842:	e6 0f       	add	r30, r22
    2844:	f7 1f       	adc	r31, r23
    2846:	87 a4       	ldd	r8, Z+47	; 0x2f
    2848:	90 a8       	ldd	r9, Z+48	; 0x30
    284a:	a1 a8       	ldd	r10, Z+49	; 0x31
    284c:	b2 a8       	ldd	r11, Z+50	; 0x32
    284e:	ba 01       	movw	r22, r20
    2850:	a9 01       	movw	r20, r18
    2852:	48 29       	or	r20, r8
    2854:	59 29       	or	r21, r9
    2856:	6a 29       	or	r22, r10
    2858:	7b 29       	or	r23, r11
    285a:	47 a7       	std	Z+47, r20	; 0x2f
    285c:	50 ab       	std	Z+48, r21	; 0x30
    285e:	61 ab       	std	Z+49, r22	; 0x31
    2860:	72 ab       	std	Z+50, r23	; 0x32
    2862:	01 e0       	ldi	r16, 0x01	; 1
    2864:	34 c0       	rjmp	.+104    	; 0x28ce <xTaskGenericNotify+0xfc>
    2866:	66 0f       	add	r22, r22
    2868:	77 1f       	adc	r23, r23
    286a:	66 0f       	add	r22, r22
    286c:	77 1f       	adc	r23, r23
    286e:	fd 01       	movw	r30, r26
    2870:	e6 0f       	add	r30, r22
    2872:	f7 1f       	adc	r31, r23
    2874:	47 a5       	ldd	r20, Z+47	; 0x2f
    2876:	50 a9       	ldd	r21, Z+48	; 0x30
    2878:	61 a9       	ldd	r22, Z+49	; 0x31
    287a:	72 a9       	ldd	r23, Z+50	; 0x32
    287c:	4f 5f       	subi	r20, 0xFF	; 255
    287e:	5f 4f       	sbci	r21, 0xFF	; 255
    2880:	6f 4f       	sbci	r22, 0xFF	; 255
    2882:	7f 4f       	sbci	r23, 0xFF	; 255
    2884:	47 a7       	std	Z+47, r20	; 0x2f
    2886:	50 ab       	std	Z+48, r21	; 0x30
    2888:	61 ab       	std	Z+49, r22	; 0x31
    288a:	72 ab       	std	Z+50, r23	; 0x32
    288c:	01 e0       	ldi	r16, 0x01	; 1
    288e:	1f c0       	rjmp	.+62     	; 0x28ce <xTaskGenericNotify+0xfc>
    2890:	66 0f       	add	r22, r22
    2892:	77 1f       	adc	r23, r23
    2894:	66 0f       	add	r22, r22
    2896:	77 1f       	adc	r23, r23
    2898:	fd 01       	movw	r30, r26
    289a:	e6 0f       	add	r30, r22
    289c:	f7 1f       	adc	r31, r23
    289e:	27 a7       	std	Z+47, r18	; 0x2f
    28a0:	30 ab       	std	Z+48, r19	; 0x30
    28a2:	41 ab       	std	Z+49, r20	; 0x31
    28a4:	52 ab       	std	Z+50, r21	; 0x32
    28a6:	01 e0       	ldi	r16, 0x01	; 1
    28a8:	12 c0       	rjmp	.+36     	; 0x28ce <xTaskGenericNotify+0xfc>
    28aa:	82 30       	cpi	r24, 0x02	; 2
    28ac:	79 f0       	breq	.+30     	; 0x28cc <xTaskGenericNotify+0xfa>
    28ae:	66 0f       	add	r22, r22
    28b0:	77 1f       	adc	r23, r23
    28b2:	66 0f       	add	r22, r22
    28b4:	77 1f       	adc	r23, r23
    28b6:	fd 01       	movw	r30, r26
    28b8:	e6 0f       	add	r30, r22
    28ba:	f7 1f       	adc	r31, r23
    28bc:	27 a7       	std	Z+47, r18	; 0x2f
    28be:	30 ab       	std	Z+48, r19	; 0x30
    28c0:	41 ab       	std	Z+49, r20	; 0x31
    28c2:	52 ab       	std	Z+50, r21	; 0x32
    28c4:	01 e0       	ldi	r16, 0x01	; 1
    28c6:	03 c0       	rjmp	.+6      	; 0x28ce <xTaskGenericNotify+0xfc>
    28c8:	01 e0       	ldi	r16, 0x01	; 1
    28ca:	01 c0       	rjmp	.+2      	; 0x28ce <xTaskGenericNotify+0xfc>
    28cc:	00 e0       	ldi	r16, 0x00	; 0
    28ce:	81 30       	cpi	r24, 0x01	; 1
    28d0:	09 f0       	breq	.+2      	; 0x28d4 <xTaskGenericNotify+0x102>
    28d2:	69 c0       	rjmp	.+210    	; 0x29a6 <xTaskGenericNotify+0x1d4>
    28d4:	1c 96       	adiw	r26, 0x0c	; 12
    28d6:	ed 91       	ld	r30, X+
    28d8:	fc 91       	ld	r31, X
    28da:	1d 97       	sbiw	r26, 0x0d	; 13
    28dc:	16 96       	adiw	r26, 0x06	; 6
    28de:	cd 91       	ld	r28, X+
    28e0:	dc 91       	ld	r29, X
    28e2:	17 97       	sbiw	r26, 0x07	; 7
    28e4:	18 96       	adiw	r26, 0x08	; 8
    28e6:	8d 91       	ld	r24, X+
    28e8:	9c 91       	ld	r25, X
    28ea:	19 97       	sbiw	r26, 0x09	; 9
    28ec:	9f 83       	std	Y+7, r25	; 0x07
    28ee:	8e 83       	std	Y+6, r24	; 0x06
    28f0:	18 96       	adiw	r26, 0x08	; 8
    28f2:	cd 91       	ld	r28, X+
    28f4:	dc 91       	ld	r29, X
    28f6:	19 97       	sbiw	r26, 0x09	; 9
    28f8:	16 96       	adiw	r26, 0x06	; 6
    28fa:	8d 91       	ld	r24, X+
    28fc:	9c 91       	ld	r25, X
    28fe:	17 97       	sbiw	r26, 0x07	; 7
    2900:	9d 83       	std	Y+5, r25	; 0x05
    2902:	8c 83       	std	Y+4, r24	; 0x04
    2904:	81 81       	ldd	r24, Z+1	; 0x01
    2906:	92 81       	ldd	r25, Z+2	; 0x02
    2908:	9d 01       	movw	r18, r26
    290a:	2e 5f       	subi	r18, 0xFE	; 254
    290c:	3f 4f       	sbci	r19, 0xFF	; 255
    290e:	82 17       	cp	r24, r18
    2910:	93 07       	cpc	r25, r19
    2912:	31 f4       	brne	.+12     	; 0x2920 <xTaskGenericNotify+0x14e>
    2914:	18 96       	adiw	r26, 0x08	; 8
    2916:	8d 91       	ld	r24, X+
    2918:	9c 91       	ld	r25, X
    291a:	19 97       	sbiw	r26, 0x09	; 9
    291c:	92 83       	std	Z+2, r25	; 0x02
    291e:	81 83       	std	Z+1, r24	; 0x01
    2920:	1d 96       	adiw	r26, 0x0d	; 13
    2922:	1c 92       	st	X, r1
    2924:	1e 92       	st	-X, r1
    2926:	1c 97       	sbiw	r26, 0x0c	; 12
    2928:	80 81       	ld	r24, Z
    292a:	81 50       	subi	r24, 0x01	; 1
    292c:	80 83       	st	Z, r24
    292e:	5a 96       	adiw	r26, 0x1a	; 26
    2930:	ec 91       	ld	r30, X
    2932:	5a 97       	sbiw	r26, 0x1a	; 26
    2934:	80 91 d1 15 	lds	r24, 0x15D1	; 0x8015d1 <uxTopReadyPriority>
    2938:	8e 17       	cp	r24, r30
    293a:	10 f4       	brcc	.+4      	; 0x2940 <xTaskGenericNotify+0x16e>
    293c:	e0 93 d1 15 	sts	0x15D1, r30	; 0x8015d1 <uxTopReadyPriority>
    2940:	8b e0       	ldi	r24, 0x0B	; 11
    2942:	8e 9f       	mul	r24, r30
    2944:	f0 01       	movw	r30, r0
    2946:	11 24       	eor	r1, r1
    2948:	ed 5e       	subi	r30, 0xED	; 237
    294a:	f9 4e       	sbci	r31, 0xE9	; 233
    294c:	01 80       	ldd	r0, Z+1	; 0x01
    294e:	f2 81       	ldd	r31, Z+2	; 0x02
    2950:	e0 2d       	mov	r30, r0
    2952:	17 96       	adiw	r26, 0x07	; 7
    2954:	fc 93       	st	X, r31
    2956:	ee 93       	st	-X, r30
    2958:	16 97       	sbiw	r26, 0x06	; 6
    295a:	46 81       	ldd	r20, Z+6	; 0x06
    295c:	57 81       	ldd	r21, Z+7	; 0x07
    295e:	19 96       	adiw	r26, 0x09	; 9
    2960:	5c 93       	st	X, r21
    2962:	4e 93       	st	-X, r20
    2964:	18 97       	sbiw	r26, 0x08	; 8
    2966:	c6 81       	ldd	r28, Z+6	; 0x06
    2968:	d7 81       	ldd	r29, Z+7	; 0x07
    296a:	3d 83       	std	Y+5, r19	; 0x05
    296c:	2c 83       	std	Y+4, r18	; 0x04
    296e:	37 83       	std	Z+7, r19	; 0x07
    2970:	26 83       	std	Z+6, r18	; 0x06
    2972:	5a 96       	adiw	r26, 0x1a	; 26
    2974:	ec 91       	ld	r30, X
    2976:	5a 97       	sbiw	r26, 0x1a	; 26
    2978:	8e 9f       	mul	r24, r30
    297a:	f0 01       	movw	r30, r0
    297c:	11 24       	eor	r1, r1
    297e:	ed 5e       	subi	r30, 0xED	; 237
    2980:	f9 4e       	sbci	r31, 0xE9	; 233
    2982:	1d 96       	adiw	r26, 0x0d	; 13
    2984:	fc 93       	st	X, r31
    2986:	ee 93       	st	-X, r30
    2988:	1c 97       	sbiw	r26, 0x0c	; 12
    298a:	80 81       	ld	r24, Z
    298c:	8f 5f       	subi	r24, 0xFF	; 255
    298e:	80 83       	st	Z, r24
    2990:	5a 96       	adiw	r26, 0x1a	; 26
    2992:	9c 91       	ld	r25, X
    2994:	e0 91 81 16 	lds	r30, 0x1681	; 0x801681 <pxCurrentTCB>
    2998:	f0 91 82 16 	lds	r31, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    299c:	82 8d       	ldd	r24, Z+26	; 0x1a
    299e:	89 17       	cp	r24, r25
    29a0:	10 f4       	brcc	.+4      	; 0x29a6 <xTaskGenericNotify+0x1d4>
    29a2:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    29a6:	0f 90       	pop	r0
    29a8:	0f be       	out	0x3f, r0	; 63
    29aa:	80 2f       	mov	r24, r16
    29ac:	df 91       	pop	r29
    29ae:	cf 91       	pop	r28
    29b0:	0f 91       	pop	r16
    29b2:	ff 90       	pop	r15
    29b4:	ef 90       	pop	r14
    29b6:	bf 90       	pop	r11
    29b8:	af 90       	pop	r10
    29ba:	9f 90       	pop	r9
    29bc:	8f 90       	pop	r8
    29be:	08 95       	ret

000029c0 <xTaskGenericNotifyFromISR>:
    29c0:	8f 92       	push	r8
    29c2:	9f 92       	push	r9
    29c4:	af 92       	push	r10
    29c6:	bf 92       	push	r11
    29c8:	cf 92       	push	r12
    29ca:	df 92       	push	r13
    29cc:	ef 92       	push	r14
    29ce:	ff 92       	push	r15
    29d0:	0f 93       	push	r16
    29d2:	cf 93       	push	r28
    29d4:	df 93       	push	r29
    29d6:	dc 01       	movw	r26, r24
    29d8:	e1 14       	cp	r14, r1
    29da:	f1 04       	cpc	r15, r1
    29dc:	89 f0       	breq	.+34     	; 0x2a00 <xTaskGenericNotifyFromISR+0x40>
    29de:	e6 2f       	mov	r30, r22
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	ee 0f       	add	r30, r30
    29e4:	ff 1f       	adc	r31, r31
    29e6:	ee 0f       	add	r30, r30
    29e8:	ff 1f       	adc	r31, r31
    29ea:	e8 0f       	add	r30, r24
    29ec:	f9 1f       	adc	r31, r25
    29ee:	87 a4       	ldd	r8, Z+47	; 0x2f
    29f0:	90 a8       	ldd	r9, Z+48	; 0x30
    29f2:	a1 a8       	ldd	r10, Z+49	; 0x31
    29f4:	b2 a8       	ldd	r11, Z+50	; 0x32
    29f6:	f7 01       	movw	r30, r14
    29f8:	80 82       	st	Z, r8
    29fa:	91 82       	std	Z+1, r9	; 0x01
    29fc:	a2 82       	std	Z+2, r10	; 0x02
    29fe:	b3 82       	std	Z+3, r11	; 0x03
    2a00:	70 e0       	ldi	r23, 0x00	; 0
    2a02:	fd 01       	movw	r30, r26
    2a04:	e6 0f       	add	r30, r22
    2a06:	f7 1f       	adc	r31, r23
    2a08:	93 a9       	ldd	r25, Z+51	; 0x33
    2a0a:	82 e0       	ldi	r24, 0x02	; 2
    2a0c:	83 ab       	std	Z+51, r24	; 0x33
    2a0e:	02 30       	cpi	r16, 0x02	; 2
    2a10:	01 f1       	breq	.+64     	; 0x2a52 <xTaskGenericNotifyFromISR+0x92>
    2a12:	18 f4       	brcc	.+6      	; 0x2a1a <xTaskGenericNotifyFromISR+0x5a>
    2a14:	01 30       	cpi	r16, 0x01	; 1
    2a16:	31 f0       	breq	.+12     	; 0x2a24 <xTaskGenericNotifyFromISR+0x64>
    2a18:	4d c0       	rjmp	.+154    	; 0x2ab4 <xTaskGenericNotifyFromISR+0xf4>
    2a1a:	03 30       	cpi	r16, 0x03	; 3
    2a1c:	79 f1       	breq	.+94     	; 0x2a7c <xTaskGenericNotifyFromISR+0xbc>
    2a1e:	04 30       	cpi	r16, 0x04	; 4
    2a20:	d1 f1       	breq	.+116    	; 0x2a96 <xTaskGenericNotifyFromISR+0xd6>
    2a22:	48 c0       	rjmp	.+144    	; 0x2ab4 <xTaskGenericNotifyFromISR+0xf4>
    2a24:	66 0f       	add	r22, r22
    2a26:	77 1f       	adc	r23, r23
    2a28:	66 0f       	add	r22, r22
    2a2a:	77 1f       	adc	r23, r23
    2a2c:	fd 01       	movw	r30, r26
    2a2e:	e6 0f       	add	r30, r22
    2a30:	f7 1f       	adc	r31, r23
    2a32:	87 a4       	ldd	r8, Z+47	; 0x2f
    2a34:	90 a8       	ldd	r9, Z+48	; 0x30
    2a36:	a1 a8       	ldd	r10, Z+49	; 0x31
    2a38:	b2 a8       	ldd	r11, Z+50	; 0x32
    2a3a:	ba 01       	movw	r22, r20
    2a3c:	a9 01       	movw	r20, r18
    2a3e:	48 29       	or	r20, r8
    2a40:	59 29       	or	r21, r9
    2a42:	6a 29       	or	r22, r10
    2a44:	7b 29       	or	r23, r11
    2a46:	47 a7       	std	Z+47, r20	; 0x2f
    2a48:	50 ab       	std	Z+48, r21	; 0x30
    2a4a:	61 ab       	std	Z+49, r22	; 0x31
    2a4c:	72 ab       	std	Z+50, r23	; 0x32
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	34 c0       	rjmp	.+104    	; 0x2aba <xTaskGenericNotifyFromISR+0xfa>
    2a52:	66 0f       	add	r22, r22
    2a54:	77 1f       	adc	r23, r23
    2a56:	66 0f       	add	r22, r22
    2a58:	77 1f       	adc	r23, r23
    2a5a:	fd 01       	movw	r30, r26
    2a5c:	e6 0f       	add	r30, r22
    2a5e:	f7 1f       	adc	r31, r23
    2a60:	47 a5       	ldd	r20, Z+47	; 0x2f
    2a62:	50 a9       	ldd	r21, Z+48	; 0x30
    2a64:	61 a9       	ldd	r22, Z+49	; 0x31
    2a66:	72 a9       	ldd	r23, Z+50	; 0x32
    2a68:	4f 5f       	subi	r20, 0xFF	; 255
    2a6a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a6c:	6f 4f       	sbci	r22, 0xFF	; 255
    2a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a70:	47 a7       	std	Z+47, r20	; 0x2f
    2a72:	50 ab       	std	Z+48, r21	; 0x30
    2a74:	61 ab       	std	Z+49, r22	; 0x31
    2a76:	72 ab       	std	Z+50, r23	; 0x32
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	1f c0       	rjmp	.+62     	; 0x2aba <xTaskGenericNotifyFromISR+0xfa>
    2a7c:	66 0f       	add	r22, r22
    2a7e:	77 1f       	adc	r23, r23
    2a80:	66 0f       	add	r22, r22
    2a82:	77 1f       	adc	r23, r23
    2a84:	fd 01       	movw	r30, r26
    2a86:	e6 0f       	add	r30, r22
    2a88:	f7 1f       	adc	r31, r23
    2a8a:	27 a7       	std	Z+47, r18	; 0x2f
    2a8c:	30 ab       	std	Z+48, r19	; 0x30
    2a8e:	41 ab       	std	Z+49, r20	; 0x31
    2a90:	52 ab       	std	Z+50, r21	; 0x32
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	12 c0       	rjmp	.+36     	; 0x2aba <xTaskGenericNotifyFromISR+0xfa>
    2a96:	92 30       	cpi	r25, 0x02	; 2
    2a98:	79 f0       	breq	.+30     	; 0x2ab8 <xTaskGenericNotifyFromISR+0xf8>
    2a9a:	66 0f       	add	r22, r22
    2a9c:	77 1f       	adc	r23, r23
    2a9e:	66 0f       	add	r22, r22
    2aa0:	77 1f       	adc	r23, r23
    2aa2:	fd 01       	movw	r30, r26
    2aa4:	e6 0f       	add	r30, r22
    2aa6:	f7 1f       	adc	r31, r23
    2aa8:	27 a7       	std	Z+47, r18	; 0x2f
    2aaa:	30 ab       	std	Z+48, r19	; 0x30
    2aac:	41 ab       	std	Z+49, r20	; 0x31
    2aae:	52 ab       	std	Z+50, r21	; 0x32
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	03 c0       	rjmp	.+6      	; 0x2aba <xTaskGenericNotifyFromISR+0xfa>
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	01 c0       	rjmp	.+2      	; 0x2aba <xTaskGenericNotifyFromISR+0xfa>
    2ab8:	80 e0       	ldi	r24, 0x00	; 0
    2aba:	91 30       	cpi	r25, 0x01	; 1
    2abc:	09 f0       	breq	.+2      	; 0x2ac0 <xTaskGenericNotifyFromISR+0x100>
    2abe:	96 c0       	rjmp	.+300    	; 0x2bec <xTaskGenericNotifyFromISR+0x22c>
    2ac0:	90 91 c2 15 	lds	r25, 0x15C2	; 0x8015c2 <uxSchedulerSuspended>
    2ac4:	91 11       	cpse	r25, r1
    2ac6:	5f c0       	rjmp	.+190    	; 0x2b86 <xTaskGenericNotifyFromISR+0x1c6>
    2ac8:	1c 96       	adiw	r26, 0x0c	; 12
    2aca:	ed 91       	ld	r30, X+
    2acc:	fc 91       	ld	r31, X
    2ace:	1d 97       	sbiw	r26, 0x0d	; 13
    2ad0:	16 96       	adiw	r26, 0x06	; 6
    2ad2:	cd 91       	ld	r28, X+
    2ad4:	dc 91       	ld	r29, X
    2ad6:	17 97       	sbiw	r26, 0x07	; 7
    2ad8:	18 96       	adiw	r26, 0x08	; 8
    2ada:	2d 91       	ld	r18, X+
    2adc:	3c 91       	ld	r19, X
    2ade:	19 97       	sbiw	r26, 0x09	; 9
    2ae0:	3f 83       	std	Y+7, r19	; 0x07
    2ae2:	2e 83       	std	Y+6, r18	; 0x06
    2ae4:	18 96       	adiw	r26, 0x08	; 8
    2ae6:	cd 91       	ld	r28, X+
    2ae8:	dc 91       	ld	r29, X
    2aea:	19 97       	sbiw	r26, 0x09	; 9
    2aec:	16 96       	adiw	r26, 0x06	; 6
    2aee:	2d 91       	ld	r18, X+
    2af0:	3c 91       	ld	r19, X
    2af2:	17 97       	sbiw	r26, 0x07	; 7
    2af4:	3d 83       	std	Y+5, r19	; 0x05
    2af6:	2c 83       	std	Y+4, r18	; 0x04
    2af8:	41 81       	ldd	r20, Z+1	; 0x01
    2afa:	52 81       	ldd	r21, Z+2	; 0x02
    2afc:	9d 01       	movw	r18, r26
    2afe:	2e 5f       	subi	r18, 0xFE	; 254
    2b00:	3f 4f       	sbci	r19, 0xFF	; 255
    2b02:	42 17       	cp	r20, r18
    2b04:	53 07       	cpc	r21, r19
    2b06:	31 f4       	brne	.+12     	; 0x2b14 <xTaskGenericNotifyFromISR+0x154>
    2b08:	18 96       	adiw	r26, 0x08	; 8
    2b0a:	4d 91       	ld	r20, X+
    2b0c:	5c 91       	ld	r21, X
    2b0e:	19 97       	sbiw	r26, 0x09	; 9
    2b10:	52 83       	std	Z+2, r21	; 0x02
    2b12:	41 83       	std	Z+1, r20	; 0x01
    2b14:	1d 96       	adiw	r26, 0x0d	; 13
    2b16:	1c 92       	st	X, r1
    2b18:	1e 92       	st	-X, r1
    2b1a:	1c 97       	sbiw	r26, 0x0c	; 12
    2b1c:	90 81       	ld	r25, Z
    2b1e:	91 50       	subi	r25, 0x01	; 1
    2b20:	90 83       	st	Z, r25
    2b22:	5a 96       	adiw	r26, 0x1a	; 26
    2b24:	ec 91       	ld	r30, X
    2b26:	5a 97       	sbiw	r26, 0x1a	; 26
    2b28:	90 91 d1 15 	lds	r25, 0x15D1	; 0x8015d1 <uxTopReadyPriority>
    2b2c:	9e 17       	cp	r25, r30
    2b2e:	10 f4       	brcc	.+4      	; 0x2b34 <xTaskGenericNotifyFromISR+0x174>
    2b30:	e0 93 d1 15 	sts	0x15D1, r30	; 0x8015d1 <uxTopReadyPriority>
    2b34:	9b e0       	ldi	r25, 0x0B	; 11
    2b36:	9e 9f       	mul	r25, r30
    2b38:	f0 01       	movw	r30, r0
    2b3a:	11 24       	eor	r1, r1
    2b3c:	ed 5e       	subi	r30, 0xED	; 237
    2b3e:	f9 4e       	sbci	r31, 0xE9	; 233
    2b40:	01 80       	ldd	r0, Z+1	; 0x01
    2b42:	f2 81       	ldd	r31, Z+2	; 0x02
    2b44:	e0 2d       	mov	r30, r0
    2b46:	17 96       	adiw	r26, 0x07	; 7
    2b48:	fc 93       	st	X, r31
    2b4a:	ee 93       	st	-X, r30
    2b4c:	16 97       	sbiw	r26, 0x06	; 6
    2b4e:	46 81       	ldd	r20, Z+6	; 0x06
    2b50:	57 81       	ldd	r21, Z+7	; 0x07
    2b52:	19 96       	adiw	r26, 0x09	; 9
    2b54:	5c 93       	st	X, r21
    2b56:	4e 93       	st	-X, r20
    2b58:	18 97       	sbiw	r26, 0x08	; 8
    2b5a:	c6 81       	ldd	r28, Z+6	; 0x06
    2b5c:	d7 81       	ldd	r29, Z+7	; 0x07
    2b5e:	3d 83       	std	Y+5, r19	; 0x05
    2b60:	2c 83       	std	Y+4, r18	; 0x04
    2b62:	37 83       	std	Z+7, r19	; 0x07
    2b64:	26 83       	std	Z+6, r18	; 0x06
    2b66:	5a 96       	adiw	r26, 0x1a	; 26
    2b68:	ec 91       	ld	r30, X
    2b6a:	5a 97       	sbiw	r26, 0x1a	; 26
    2b6c:	9e 9f       	mul	r25, r30
    2b6e:	f0 01       	movw	r30, r0
    2b70:	11 24       	eor	r1, r1
    2b72:	ed 5e       	subi	r30, 0xED	; 237
    2b74:	f9 4e       	sbci	r31, 0xE9	; 233
    2b76:	1d 96       	adiw	r26, 0x0d	; 13
    2b78:	fc 93       	st	X, r31
    2b7a:	ee 93       	st	-X, r30
    2b7c:	1c 97       	sbiw	r26, 0x0c	; 12
    2b7e:	90 81       	ld	r25, Z
    2b80:	9f 5f       	subi	r25, 0xFF	; 255
    2b82:	90 83       	st	Z, r25
    2b84:	21 c0       	rjmp	.+66     	; 0x2bc8 <xTaskGenericNotifyFromISR+0x208>
    2b86:	6e ee       	ldi	r22, 0xEE	; 238
    2b88:	75 e1       	ldi	r23, 0x15	; 21
    2b8a:	fb 01       	movw	r30, r22
    2b8c:	c1 81       	ldd	r28, Z+1	; 0x01
    2b8e:	d2 81       	ldd	r29, Z+2	; 0x02
    2b90:	53 96       	adiw	r26, 0x13	; 19
    2b92:	dc 93       	st	X, r29
    2b94:	ce 93       	st	-X, r28
    2b96:	52 97       	sbiw	r26, 0x12	; 18
    2b98:	2e 81       	ldd	r18, Y+6	; 0x06
    2b9a:	3f 81       	ldd	r19, Y+7	; 0x07
    2b9c:	55 96       	adiw	r26, 0x15	; 21
    2b9e:	3c 93       	st	X, r19
    2ba0:	2e 93       	st	-X, r18
    2ba2:	54 97       	sbiw	r26, 0x14	; 20
    2ba4:	4e 81       	ldd	r20, Y+6	; 0x06
    2ba6:	5f 81       	ldd	r21, Y+7	; 0x07
    2ba8:	9d 01       	movw	r18, r26
    2baa:	22 5f       	subi	r18, 0xF2	; 242
    2bac:	3f 4f       	sbci	r19, 0xFF	; 255
    2bae:	fa 01       	movw	r30, r20
    2bb0:	35 83       	std	Z+5, r19	; 0x05
    2bb2:	24 83       	std	Z+4, r18	; 0x04
    2bb4:	3f 83       	std	Y+7, r19	; 0x07
    2bb6:	2e 83       	std	Y+6, r18	; 0x06
    2bb8:	59 96       	adiw	r26, 0x19	; 25
    2bba:	7c 93       	st	X, r23
    2bbc:	6e 93       	st	-X, r22
    2bbe:	58 97       	sbiw	r26, 0x18	; 24
    2bc0:	fb 01       	movw	r30, r22
    2bc2:	90 81       	ld	r25, Z
    2bc4:	9f 5f       	subi	r25, 0xFF	; 255
    2bc6:	90 83       	st	Z, r25
    2bc8:	5a 96       	adiw	r26, 0x1a	; 26
    2bca:	2c 91       	ld	r18, X
    2bcc:	e0 91 81 16 	lds	r30, 0x1681	; 0x801681 <pxCurrentTCB>
    2bd0:	f0 91 82 16 	lds	r31, 0x1682	; 0x801682 <pxCurrentTCB+0x1>
    2bd4:	92 8d       	ldd	r25, Z+26	; 0x1a
    2bd6:	92 17       	cp	r25, r18
    2bd8:	48 f4       	brcc	.+18     	; 0x2bec <xTaskGenericNotifyFromISR+0x22c>
    2bda:	c1 14       	cp	r12, r1
    2bdc:	d1 04       	cpc	r13, r1
    2bde:	19 f0       	breq	.+6      	; 0x2be6 <xTaskGenericNotifyFromISR+0x226>
    2be0:	91 e0       	ldi	r25, 0x01	; 1
    2be2:	f6 01       	movw	r30, r12
    2be4:	90 83       	st	Z, r25
    2be6:	91 e0       	ldi	r25, 0x01	; 1
    2be8:	90 93 cb 15 	sts	0x15CB, r25	; 0x8015cb <xYieldPending>
    2bec:	df 91       	pop	r29
    2bee:	cf 91       	pop	r28
    2bf0:	0f 91       	pop	r16
    2bf2:	ff 90       	pop	r15
    2bf4:	ef 90       	pop	r14
    2bf6:	df 90       	pop	r13
    2bf8:	cf 90       	pop	r12
    2bfa:	bf 90       	pop	r11
    2bfc:	af 90       	pop	r10
    2bfe:	9f 90       	pop	r9
    2c00:	8f 90       	pop	r8
    2c02:	08 95       	ret

00002c04 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2c04:	00 97       	sbiw	r24, 0x00	; 0
    2c06:	21 f4       	brne	.+8      	; 0x2c10 <xTaskGenericNotifyStateClear+0xc>
    2c08:	80 91 81 16 	lds	r24, 0x1681	; 0x801681 <pxCurrentTCB>
    2c0c:	90 91 82 16 	lds	r25, 0x1682	; 0x801682 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2c10:	0f b6       	in	r0, 0x3f	; 63
    2c12:	f8 94       	cli
    2c14:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2c16:	70 e0       	ldi	r23, 0x00	; 0
    2c18:	fc 01       	movw	r30, r24
    2c1a:	e6 0f       	add	r30, r22
    2c1c:	f7 1f       	adc	r31, r23
    2c1e:	23 a9       	ldd	r18, Z+51	; 0x33
    2c20:	22 30       	cpi	r18, 0x02	; 2
    2c22:	31 f4       	brne	.+12     	; 0x2c30 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2c24:	fc 01       	movw	r30, r24
    2c26:	e6 0f       	add	r30, r22
    2c28:	f7 1f       	adc	r31, r23
    2c2a:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	01 c0       	rjmp	.+2      	; 0x2c32 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2c30:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2c32:	0f 90       	pop	r0
    2c34:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2c36:	08 95       	ret

00002c38 <prvGetNextExpireTime>:
    2c38:	dc 01       	movw	r26, r24
    2c3a:	e0 91 8d 16 	lds	r30, 0x168D	; 0x80168d <pxCurrentTimerList>
    2c3e:	f0 91 8e 16 	lds	r31, 0x168E	; 0x80168e <pxCurrentTimerList+0x1>
    2c42:	80 81       	ld	r24, Z
    2c44:	91 e0       	ldi	r25, 0x01	; 1
    2c46:	81 11       	cpse	r24, r1
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	9c 93       	st	X, r25
    2c4c:	91 11       	cpse	r25, r1
    2c4e:	08 c0       	rjmp	.+16     	; 0x2c60 <prvGetNextExpireTime+0x28>
    2c50:	07 80       	ldd	r0, Z+7	; 0x07
    2c52:	f0 85       	ldd	r31, Z+8	; 0x08
    2c54:	e0 2d       	mov	r30, r0
    2c56:	60 81       	ld	r22, Z
    2c58:	71 81       	ldd	r23, Z+1	; 0x01
    2c5a:	82 81       	ldd	r24, Z+2	; 0x02
    2c5c:	93 81       	ldd	r25, Z+3	; 0x03
    2c5e:	08 95       	ret
    2c60:	60 e0       	ldi	r22, 0x00	; 0
    2c62:	70 e0       	ldi	r23, 0x00	; 0
    2c64:	cb 01       	movw	r24, r22
    2c66:	08 95       	ret

00002c68 <prvInsertTimerInActiveList>:
    2c68:	cf 92       	push	r12
    2c6a:	df 92       	push	r13
    2c6c:	ef 92       	push	r14
    2c6e:	ff 92       	push	r15
    2c70:	0f 93       	push	r16
    2c72:	1f 93       	push	r17
    2c74:	fc 01       	movw	r30, r24
    2c76:	42 83       	std	Z+2, r20	; 0x02
    2c78:	53 83       	std	Z+3, r21	; 0x03
    2c7a:	64 83       	std	Z+4, r22	; 0x04
    2c7c:	75 83       	std	Z+5, r23	; 0x05
    2c7e:	93 87       	std	Z+11, r25	; 0x0b
    2c80:	82 87       	std	Z+10, r24	; 0x0a
    2c82:	04 17       	cp	r16, r20
    2c84:	15 07       	cpc	r17, r21
    2c86:	26 07       	cpc	r18, r22
    2c88:	37 07       	cpc	r19, r23
    2c8a:	c0 f0       	brcs	.+48     	; 0x2cbc <prvInsertTimerInActiveList+0x54>
    2c8c:	0c 19       	sub	r16, r12
    2c8e:	1d 09       	sbc	r17, r13
    2c90:	2e 09       	sbc	r18, r14
    2c92:	3f 09       	sbc	r19, r15
    2c94:	86 85       	ldd	r24, Z+14	; 0x0e
    2c96:	97 85       	ldd	r25, Z+15	; 0x0f
    2c98:	a0 89       	ldd	r26, Z+16	; 0x10
    2c9a:	b1 89       	ldd	r27, Z+17	; 0x11
    2c9c:	08 17       	cp	r16, r24
    2c9e:	19 07       	cpc	r17, r25
    2ca0:	2a 07       	cpc	r18, r26
    2ca2:	3b 07       	cpc	r19, r27
    2ca4:	00 f5       	brcc	.+64     	; 0x2ce6 <prvInsertTimerInActiveList+0x7e>
    2ca6:	bf 01       	movw	r22, r30
    2ca8:	6e 5f       	subi	r22, 0xFE	; 254
    2caa:	7f 4f       	sbci	r23, 0xFF	; 255
    2cac:	80 91 8b 16 	lds	r24, 0x168B	; 0x80168b <pxOverflowTimerList>
    2cb0:	90 91 8c 16 	lds	r25, 0x168C	; 0x80168c <pxOverflowTimerList+0x1>
    2cb4:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	18 c0       	rjmp	.+48     	; 0x2cec <prvInsertTimerInActiveList+0x84>
    2cbc:	0c 15       	cp	r16, r12
    2cbe:	1d 05       	cpc	r17, r13
    2cc0:	2e 05       	cpc	r18, r14
    2cc2:	3f 05       	cpc	r19, r15
    2cc4:	28 f4       	brcc	.+10     	; 0x2cd0 <prvInsertTimerInActiveList+0x68>
    2cc6:	4c 15       	cp	r20, r12
    2cc8:	5d 05       	cpc	r21, r13
    2cca:	6e 05       	cpc	r22, r14
    2ccc:	7f 05       	cpc	r23, r15
    2cce:	68 f4       	brcc	.+26     	; 0x2cea <prvInsertTimerInActiveList+0x82>
    2cd0:	bf 01       	movw	r22, r30
    2cd2:	6e 5f       	subi	r22, 0xFE	; 254
    2cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd6:	80 91 8d 16 	lds	r24, 0x168D	; 0x80168d <pxCurrentTimerList>
    2cda:	90 91 8e 16 	lds	r25, 0x168E	; 0x80168e <pxCurrentTimerList+0x1>
    2cde:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	03 c0       	rjmp	.+6      	; 0x2cec <prvInsertTimerInActiveList+0x84>
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	01 c0       	rjmp	.+2      	; 0x2cec <prvInsertTimerInActiveList+0x84>
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	1f 91       	pop	r17
    2cee:	0f 91       	pop	r16
    2cf0:	ff 90       	pop	r15
    2cf2:	ef 90       	pop	r14
    2cf4:	df 90       	pop	r13
    2cf6:	cf 90       	pop	r12
    2cf8:	08 95       	ret

00002cfa <prvCheckForValidListAndQueue>:
    2cfa:	0f b6       	in	r0, 0x3f	; 63
    2cfc:	f8 94       	cli
    2cfe:	0f 92       	push	r0
    2d00:	80 91 89 16 	lds	r24, 0x1689	; 0x801689 <xTimerQueue>
    2d04:	90 91 8a 16 	lds	r25, 0x168A	; 0x80168a <xTimerQueue+0x1>
    2d08:	89 2b       	or	r24, r25
    2d0a:	e9 f4       	brne	.+58     	; 0x2d46 <prvCheckForValidListAndQueue+0x4c>
    2d0c:	8a e9       	ldi	r24, 0x9A	; 154
    2d0e:	96 e1       	ldi	r25, 0x16	; 22
    2d10:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    2d14:	8f e8       	ldi	r24, 0x8F	; 143
    2d16:	96 e1       	ldi	r25, 0x16	; 22
    2d18:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    2d1c:	8a e9       	ldi	r24, 0x9A	; 154
    2d1e:	96 e1       	ldi	r25, 0x16	; 22
    2d20:	90 93 8e 16 	sts	0x168E, r25	; 0x80168e <pxCurrentTimerList+0x1>
    2d24:	80 93 8d 16 	sts	0x168D, r24	; 0x80168d <pxCurrentTimerList>
    2d28:	8f e8       	ldi	r24, 0x8F	; 143
    2d2a:	96 e1       	ldi	r25, 0x16	; 22
    2d2c:	90 93 8c 16 	sts	0x168C, r25	; 0x80168c <pxOverflowTimerList+0x1>
    2d30:	80 93 8b 16 	sts	0x168B, r24	; 0x80168b <pxOverflowTimerList>
    2d34:	40 e0       	ldi	r20, 0x00	; 0
    2d36:	67 e0       	ldi	r22, 0x07	; 7
    2d38:	8a e0       	ldi	r24, 0x0A	; 10
    2d3a:	0e 94 24 05 	call	0xa48	; 0xa48 <xQueueGenericCreate>
    2d3e:	90 93 8a 16 	sts	0x168A, r25	; 0x80168a <xTimerQueue+0x1>
    2d42:	80 93 89 16 	sts	0x1689, r24	; 0x801689 <xTimerQueue>
    2d46:	0f 90       	pop	r0
    2d48:	0f be       	out	0x3f, r0	; 63
    2d4a:	08 95       	ret

00002d4c <xTimerCreateTimerTask>:
    2d4c:	ef 92       	push	r14
    2d4e:	ff 92       	push	r15
    2d50:	0f 93       	push	r16
    2d52:	d3 df       	rcall	.-90     	; 0x2cfa <prvCheckForValidListAndQueue>
    2d54:	80 91 89 16 	lds	r24, 0x1689	; 0x801689 <xTimerQueue>
    2d58:	90 91 8a 16 	lds	r25, 0x168A	; 0x80168a <xTimerQueue+0x1>
    2d5c:	89 2b       	or	r24, r25
    2d5e:	91 f0       	breq	.+36     	; 0x2d84 <xTimerCreateTimerTask+0x38>
    2d60:	0f 2e       	mov	r0, r31
    2d62:	f7 e8       	ldi	r31, 0x87	; 135
    2d64:	ef 2e       	mov	r14, r31
    2d66:	f6 e1       	ldi	r31, 0x16	; 22
    2d68:	ff 2e       	mov	r15, r31
    2d6a:	f0 2d       	mov	r31, r0
    2d6c:	03 e0       	ldi	r16, 0x03	; 3
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	40 ec       	ldi	r20, 0xC0	; 192
    2d74:	50 e0       	ldi	r21, 0x00	; 0
    2d76:	64 e7       	ldi	r22, 0x74	; 116
    2d78:	72 e0       	ldi	r23, 0x02	; 2
    2d7a:	87 ed       	ldi	r24, 0xD7	; 215
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	0e 94 b6 0c 	call	0x196c	; 0x196c <xTaskCreate>
    2d82:	01 c0       	rjmp	.+2      	; 0x2d86 <xTimerCreateTimerTask+0x3a>
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	0f 91       	pop	r16
    2d88:	ff 90       	pop	r15
    2d8a:	ef 90       	pop	r14
    2d8c:	08 95       	ret

00002d8e <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2d8e:	8f 92       	push	r8
    2d90:	9f 92       	push	r9
    2d92:	af 92       	push	r10
    2d94:	bf 92       	push	r11
    2d96:	cf 92       	push	r12
    2d98:	df 92       	push	r13
    2d9a:	ef 92       	push	r14
    2d9c:	ff 92       	push	r15
    2d9e:	0f 93       	push	r16
    2da0:	1f 93       	push	r17
    2da2:	cf 93       	push	r28
    2da4:	df 93       	push	r29
    2da6:	cd b7       	in	r28, 0x3d	; 61
    2da8:	de b7       	in	r29, 0x3e	; 62
    2daa:	27 97       	sbiw	r28, 0x07	; 7
    2dac:	0f b6       	in	r0, 0x3f	; 63
    2dae:	f8 94       	cli
    2db0:	de bf       	out	0x3e, r29	; 62
    2db2:	0f be       	out	0x3f, r0	; 63
    2db4:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2db6:	e0 91 89 16 	lds	r30, 0x1689	; 0x801689 <xTimerQueue>
    2dba:	f0 91 8a 16 	lds	r31, 0x168A	; 0x80168a <xTimerQueue+0x1>
    2dbe:	30 97       	sbiw	r30, 0x00	; 0
    2dc0:	81 f1       	breq	.+96     	; 0x2e22 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2dc2:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2dc4:	2a 83       	std	Y+2, r18	; 0x02
    2dc6:	3b 83       	std	Y+3, r19	; 0x03
    2dc8:	4c 83       	std	Y+4, r20	; 0x04
    2dca:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2dcc:	9f 83       	std	Y+7, r25	; 0x07
    2dce:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2dd0:	66 30       	cpi	r22, 0x06	; 6
    2dd2:	f4 f4       	brge	.+60     	; 0x2e10 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2dd4:	ee da       	rcall	.-2596   	; 0x23b2 <xTaskGetSchedulerState>
    2dd6:	82 30       	cpi	r24, 0x02	; 2
    2dd8:	69 f4       	brne	.+26     	; 0x2df4 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2dda:	00 e0       	ldi	r16, 0x00	; 0
    2ddc:	a7 01       	movw	r20, r14
    2dde:	96 01       	movw	r18, r12
    2de0:	be 01       	movw	r22, r28
    2de2:	6f 5f       	subi	r22, 0xFF	; 255
    2de4:	7f 4f       	sbci	r23, 0xFF	; 255
    2de6:	80 91 89 16 	lds	r24, 0x1689	; 0x801689 <xTimerQueue>
    2dea:	90 91 8a 16 	lds	r25, 0x168A	; 0x80168a <xTimerQueue+0x1>
    2dee:	0e 94 47 05 	call	0xa8e	; 0xa8e <xQueueGenericSend>
    2df2:	18 c0       	rjmp	.+48     	; 0x2e24 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2df4:	00 e0       	ldi	r16, 0x00	; 0
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	a9 01       	movw	r20, r18
    2dfc:	be 01       	movw	r22, r28
    2dfe:	6f 5f       	subi	r22, 0xFF	; 255
    2e00:	7f 4f       	sbci	r23, 0xFF	; 255
    2e02:	80 91 89 16 	lds	r24, 0x1689	; 0x801689 <xTimerQueue>
    2e06:	90 91 8a 16 	lds	r25, 0x168A	; 0x80168a <xTimerQueue+0x1>
    2e0a:	0e 94 47 05 	call	0xa8e	; 0xa8e <xQueueGenericSend>
    2e0e:	0a c0       	rjmp	.+20     	; 0x2e24 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	a8 01       	movw	r20, r16
    2e14:	be 01       	movw	r22, r28
    2e16:	6f 5f       	subi	r22, 0xFF	; 255
    2e18:	7f 4f       	sbci	r23, 0xFF	; 255
    2e1a:	cf 01       	movw	r24, r30
    2e1c:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <xQueueGenericSendFromISR>
    2e20:	01 c0       	rjmp	.+2      	; 0x2e24 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2e22:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2e24:	27 96       	adiw	r28, 0x07	; 7
    2e26:	0f b6       	in	r0, 0x3f	; 63
    2e28:	f8 94       	cli
    2e2a:	de bf       	out	0x3e, r29	; 62
    2e2c:	0f be       	out	0x3f, r0	; 63
    2e2e:	cd bf       	out	0x3d, r28	; 61
    2e30:	df 91       	pop	r29
    2e32:	cf 91       	pop	r28
    2e34:	1f 91       	pop	r17
    2e36:	0f 91       	pop	r16
    2e38:	ff 90       	pop	r15
    2e3a:	ef 90       	pop	r14
    2e3c:	df 90       	pop	r13
    2e3e:	cf 90       	pop	r12
    2e40:	bf 90       	pop	r11
    2e42:	af 90       	pop	r10
    2e44:	9f 90       	pop	r9
    2e46:	8f 90       	pop	r8
    2e48:	08 95       	ret

00002e4a <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2e4a:	8f 92       	push	r8
    2e4c:	9f 92       	push	r9
    2e4e:	af 92       	push	r10
    2e50:	bf 92       	push	r11
    2e52:	cf 92       	push	r12
    2e54:	df 92       	push	r13
    2e56:	ef 92       	push	r14
    2e58:	ff 92       	push	r15
    2e5a:	0f 93       	push	r16
    2e5c:	1f 93       	push	r17
    2e5e:	cf 93       	push	r28
    2e60:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2e62:	3b c0       	rjmp	.+118    	; 0x2eda <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2e64:	07 80       	ldd	r0, Z+7	; 0x07
    2e66:	f0 85       	ldd	r31, Z+8	; 0x08
    2e68:	e0 2d       	mov	r30, r0
    2e6a:	80 80       	ld	r8, Z
    2e6c:	91 80       	ldd	r9, Z+1	; 0x01
    2e6e:	a2 80       	ldd	r10, Z+2	; 0x02
    2e70:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2e72:	c0 85       	ldd	r28, Z+8	; 0x08
    2e74:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2e76:	8e 01       	movw	r16, r28
    2e78:	0e 5f       	subi	r16, 0xFE	; 254
    2e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e7c:	c8 01       	movw	r24, r16
    2e7e:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2e82:	ec 89       	ldd	r30, Y+20	; 0x14
    2e84:	fd 89       	ldd	r31, Y+21	; 0x15
    2e86:	ce 01       	movw	r24, r28
    2e88:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2e8a:	8e 89       	ldd	r24, Y+22	; 0x16
    2e8c:	82 ff       	sbrs	r24, 2
    2e8e:	25 c0       	rjmp	.+74     	; 0x2eda <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2e90:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e92:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e94:	a8 89       	ldd	r26, Y+16	; 0x10
    2e96:	b9 89       	ldd	r27, Y+17	; 0x11
    2e98:	88 0d       	add	r24, r8
    2e9a:	99 1d       	adc	r25, r9
    2e9c:	aa 1d       	adc	r26, r10
    2e9e:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2ea0:	88 16       	cp	r8, r24
    2ea2:	99 06       	cpc	r9, r25
    2ea4:	aa 06       	cpc	r10, r26
    2ea6:	bb 06       	cpc	r11, r27
    2ea8:	70 f4       	brcc	.+28     	; 0x2ec6 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2eaa:	8a 83       	std	Y+2, r24	; 0x02
    2eac:	9b 83       	std	Y+3, r25	; 0x03
    2eae:	ac 83       	std	Y+4, r26	; 0x04
    2eb0:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2eb2:	db 87       	std	Y+11, r29	; 0x0b
    2eb4:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2eb6:	b8 01       	movw	r22, r16
    2eb8:	80 91 8d 16 	lds	r24, 0x168D	; 0x80168d <pxCurrentTimerList>
    2ebc:	90 91 8e 16 	lds	r25, 0x168E	; 0x80168e <pxCurrentTimerList+0x1>
    2ec0:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    2ec4:	0a c0       	rjmp	.+20     	; 0x2eda <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2ec6:	c1 2c       	mov	r12, r1
    2ec8:	d1 2c       	mov	r13, r1
    2eca:	76 01       	movw	r14, r12
    2ecc:	00 e0       	ldi	r16, 0x00	; 0
    2ece:	10 e0       	ldi	r17, 0x00	; 0
    2ed0:	a5 01       	movw	r20, r10
    2ed2:	94 01       	movw	r18, r8
    2ed4:	60 e0       	ldi	r22, 0x00	; 0
    2ed6:	ce 01       	movw	r24, r28
    2ed8:	5a df       	rcall	.-332    	; 0x2d8e <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2eda:	e0 91 8d 16 	lds	r30, 0x168D	; 0x80168d <pxCurrentTimerList>
    2ede:	f0 91 8e 16 	lds	r31, 0x168E	; 0x80168e <pxCurrentTimerList+0x1>
    2ee2:	80 81       	ld	r24, Z
    2ee4:	81 11       	cpse	r24, r1
    2ee6:	be cf       	rjmp	.-132    	; 0x2e64 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2ee8:	80 91 8b 16 	lds	r24, 0x168B	; 0x80168b <pxOverflowTimerList>
    2eec:	90 91 8c 16 	lds	r25, 0x168C	; 0x80168c <pxOverflowTimerList+0x1>
    2ef0:	90 93 8e 16 	sts	0x168E, r25	; 0x80168e <pxCurrentTimerList+0x1>
    2ef4:	80 93 8d 16 	sts	0x168D, r24	; 0x80168d <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2ef8:	f0 93 8c 16 	sts	0x168C, r31	; 0x80168c <pxOverflowTimerList+0x1>
    2efc:	e0 93 8b 16 	sts	0x168B, r30	; 0x80168b <pxOverflowTimerList>
    }
    2f00:	df 91       	pop	r29
    2f02:	cf 91       	pop	r28
    2f04:	1f 91       	pop	r17
    2f06:	0f 91       	pop	r16
    2f08:	ff 90       	pop	r15
    2f0a:	ef 90       	pop	r14
    2f0c:	df 90       	pop	r13
    2f0e:	cf 90       	pop	r12
    2f10:	bf 90       	pop	r11
    2f12:	af 90       	pop	r10
    2f14:	9f 90       	pop	r9
    2f16:	8f 90       	pop	r8
    2f18:	08 95       	ret

00002f1a <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2f1a:	cf 92       	push	r12
    2f1c:	df 92       	push	r13
    2f1e:	ef 92       	push	r14
    2f20:	ff 92       	push	r15
    2f22:	cf 93       	push	r28
    2f24:	df 93       	push	r29
    2f26:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2f28:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <xTaskGetTickCount>
    2f2c:	6b 01       	movw	r12, r22
    2f2e:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2f30:	80 91 83 16 	lds	r24, 0x1683	; 0x801683 <xLastTime.2436>
    2f34:	90 91 84 16 	lds	r25, 0x1684	; 0x801684 <xLastTime.2436+0x1>
    2f38:	a0 91 85 16 	lds	r26, 0x1685	; 0x801685 <xLastTime.2436+0x2>
    2f3c:	b0 91 86 16 	lds	r27, 0x1686	; 0x801686 <xLastTime.2436+0x3>
    2f40:	c8 16       	cp	r12, r24
    2f42:	d9 06       	cpc	r13, r25
    2f44:	ea 06       	cpc	r14, r26
    2f46:	fb 06       	cpc	r15, r27
    2f48:	20 f4       	brcc	.+8      	; 0x2f52 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2f4a:	7f df       	rcall	.-258    	; 0x2e4a <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	88 83       	st	Y, r24
    2f50:	01 c0       	rjmp	.+2      	; 0x2f54 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2f52:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2f54:	c0 92 83 16 	sts	0x1683, r12	; 0x801683 <xLastTime.2436>
    2f58:	d0 92 84 16 	sts	0x1684, r13	; 0x801684 <xLastTime.2436+0x1>
    2f5c:	e0 92 85 16 	sts	0x1685, r14	; 0x801685 <xLastTime.2436+0x2>
    2f60:	f0 92 86 16 	sts	0x1686, r15	; 0x801686 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2f64:	c7 01       	movw	r24, r14
    2f66:	b6 01       	movw	r22, r12
    2f68:	df 91       	pop	r29
    2f6a:	cf 91       	pop	r28
    2f6c:	ff 90       	pop	r15
    2f6e:	ef 90       	pop	r14
    2f70:	df 90       	pop	r13
    2f72:	cf 90       	pop	r12
    2f74:	08 95       	ret

00002f76 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2f76:	4f 92       	push	r4
    2f78:	5f 92       	push	r5
    2f7a:	6f 92       	push	r6
    2f7c:	7f 92       	push	r7
    2f7e:	8f 92       	push	r8
    2f80:	9f 92       	push	r9
    2f82:	af 92       	push	r10
    2f84:	bf 92       	push	r11
    2f86:	cf 92       	push	r12
    2f88:	df 92       	push	r13
    2f8a:	ef 92       	push	r14
    2f8c:	ff 92       	push	r15
    2f8e:	0f 93       	push	r16
    2f90:	1f 93       	push	r17
    2f92:	cf 93       	push	r28
    2f94:	df 93       	push	r29
    2f96:	4b 01       	movw	r8, r22
    2f98:	5c 01       	movw	r10, r24
    2f9a:	29 01       	movw	r4, r18
    2f9c:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2f9e:	e0 91 8d 16 	lds	r30, 0x168D	; 0x80168d <pxCurrentTimerList>
    2fa2:	f0 91 8e 16 	lds	r31, 0x168E	; 0x80168e <pxCurrentTimerList+0x1>
    2fa6:	07 80       	ldd	r0, Z+7	; 0x07
    2fa8:	f0 85       	ldd	r31, Z+8	; 0x08
    2faa:	e0 2d       	mov	r30, r0
    2fac:	c0 85       	ldd	r28, Z+8	; 0x08
    2fae:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2fb0:	ce 01       	movw	r24, r28
    2fb2:	02 96       	adiw	r24, 0x02	; 2
    2fb4:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2fb8:	8e 89       	ldd	r24, Y+22	; 0x16
    2fba:	82 ff       	sbrs	r24, 2
    2fbc:	1b c0       	rjmp	.+54     	; 0x2ff4 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2fbe:	4e 85       	ldd	r20, Y+14	; 0x0e
    2fc0:	5f 85       	ldd	r21, Y+15	; 0x0f
    2fc2:	68 89       	ldd	r22, Y+16	; 0x10
    2fc4:	79 89       	ldd	r23, Y+17	; 0x11
    2fc6:	48 0d       	add	r20, r8
    2fc8:	59 1d       	adc	r21, r9
    2fca:	6a 1d       	adc	r22, r10
    2fcc:	7b 1d       	adc	r23, r11
    2fce:	75 01       	movw	r14, r10
    2fd0:	64 01       	movw	r12, r8
    2fd2:	93 01       	movw	r18, r6
    2fd4:	82 01       	movw	r16, r4
    2fd6:	ce 01       	movw	r24, r28
    2fd8:	47 de       	rcall	.-882    	; 0x2c68 <prvInsertTimerInActiveList>
    2fda:	88 23       	and	r24, r24
    2fdc:	69 f0       	breq	.+26     	; 0x2ff8 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2fde:	c1 2c       	mov	r12, r1
    2fe0:	d1 2c       	mov	r13, r1
    2fe2:	76 01       	movw	r14, r12
    2fe4:	00 e0       	ldi	r16, 0x00	; 0
    2fe6:	10 e0       	ldi	r17, 0x00	; 0
    2fe8:	a5 01       	movw	r20, r10
    2fea:	94 01       	movw	r18, r8
    2fec:	60 e0       	ldi	r22, 0x00	; 0
    2fee:	ce 01       	movw	r24, r28
    2ff0:	ce de       	rcall	.-612    	; 0x2d8e <xTimerGenericCommand>
    2ff2:	02 c0       	rjmp	.+4      	; 0x2ff8 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2ff4:	8e 7f       	andi	r24, 0xFE	; 254
    2ff6:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2ff8:	ec 89       	ldd	r30, Y+20	; 0x14
    2ffa:	fd 89       	ldd	r31, Y+21	; 0x15
    2ffc:	ce 01       	movw	r24, r28
    2ffe:	19 95       	eicall
    }
    3000:	df 91       	pop	r29
    3002:	cf 91       	pop	r28
    3004:	1f 91       	pop	r17
    3006:	0f 91       	pop	r16
    3008:	ff 90       	pop	r15
    300a:	ef 90       	pop	r14
    300c:	df 90       	pop	r13
    300e:	cf 90       	pop	r12
    3010:	bf 90       	pop	r11
    3012:	af 90       	pop	r10
    3014:	9f 90       	pop	r9
    3016:	8f 90       	pop	r8
    3018:	7f 90       	pop	r7
    301a:	6f 90       	pop	r6
    301c:	5f 90       	pop	r5
    301e:	4f 90       	pop	r4
    3020:	08 95       	ret

00003022 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3022:	8f 92       	push	r8
    3024:	9f 92       	push	r9
    3026:	af 92       	push	r10
    3028:	bf 92       	push	r11
    302a:	cf 92       	push	r12
    302c:	df 92       	push	r13
    302e:	ef 92       	push	r14
    3030:	ff 92       	push	r15
    3032:	1f 93       	push	r17
    3034:	cf 93       	push	r28
    3036:	df 93       	push	r29
    3038:	1f 92       	push	r1
    303a:	cd b7       	in	r28, 0x3d	; 61
    303c:	de b7       	in	r29, 0x3e	; 62
    303e:	6b 01       	movw	r12, r22
    3040:	7c 01       	movw	r14, r24
    3042:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3044:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3048:	ce 01       	movw	r24, r28
    304a:	01 96       	adiw	r24, 0x01	; 1
    304c:	66 df       	rcall	.-308    	; 0x2f1a <prvSampleTimeNow>
    304e:	4b 01       	movw	r8, r22
    3050:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3052:	89 81       	ldd	r24, Y+1	; 0x01
    3054:	81 11       	cpse	r24, r1
    3056:	2d c0       	rjmp	.+90     	; 0x30b2 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3058:	11 11       	cpse	r17, r1
    305a:	0d c0       	rjmp	.+26     	; 0x3076 <prvProcessTimerOrBlockTask+0x54>
    305c:	8c 14       	cp	r8, r12
    305e:	9d 04       	cpc	r9, r13
    3060:	ae 04       	cpc	r10, r14
    3062:	bf 04       	cpc	r11, r15
    3064:	40 f0       	brcs	.+16     	; 0x3076 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3066:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    306a:	a5 01       	movw	r20, r10
    306c:	94 01       	movw	r18, r8
    306e:	c7 01       	movw	r24, r14
    3070:	b6 01       	movw	r22, r12
    3072:	81 df       	rcall	.-254    	; 0x2f76 <prvProcessExpiredTimer>
    3074:	20 c0       	rjmp	.+64     	; 0x30b6 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3076:	11 23       	and	r17, r17
    3078:	41 f0       	breq	.+16     	; 0x308a <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    307a:	e0 91 8b 16 	lds	r30, 0x168B	; 0x80168b <pxOverflowTimerList>
    307e:	f0 91 8c 16 	lds	r31, 0x168C	; 0x80168c <pxOverflowTimerList+0x1>
    3082:	80 81       	ld	r24, Z
    3084:	11 e0       	ldi	r17, 0x01	; 1
    3086:	81 11       	cpse	r24, r1
    3088:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    308a:	b7 01       	movw	r22, r14
    308c:	a6 01       	movw	r20, r12
    308e:	48 19       	sub	r20, r8
    3090:	59 09       	sbc	r21, r9
    3092:	6a 09       	sbc	r22, r10
    3094:	7b 09       	sbc	r23, r11
    3096:	21 2f       	mov	r18, r17
    3098:	80 91 89 16 	lds	r24, 0x1689	; 0x801689 <xTimerQueue>
    309c:	90 91 8a 16 	lds	r25, 0x168A	; 0x80168a <xTimerQueue+0x1>
    30a0:	0e 94 54 07 	call	0xea8	; 0xea8 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    30a4:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <xTaskResumeAll>
    30a8:	81 11       	cpse	r24, r1
    30aa:	05 c0       	rjmp	.+10     	; 0x30b6 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    30ac:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    30b0:	02 c0       	rjmp	.+4      	; 0x30b6 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    30b2:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <xTaskResumeAll>
            }
        }
    }
    30b6:	0f 90       	pop	r0
    30b8:	df 91       	pop	r29
    30ba:	cf 91       	pop	r28
    30bc:	1f 91       	pop	r17
    30be:	ff 90       	pop	r15
    30c0:	ef 90       	pop	r14
    30c2:	df 90       	pop	r13
    30c4:	cf 90       	pop	r12
    30c6:	bf 90       	pop	r11
    30c8:	af 90       	pop	r10
    30ca:	9f 90       	pop	r9
    30cc:	8f 90       	pop	r8
    30ce:	08 95       	ret

000030d0 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    30d0:	af 92       	push	r10
    30d2:	bf 92       	push	r11
    30d4:	cf 92       	push	r12
    30d6:	df 92       	push	r13
    30d8:	ef 92       	push	r14
    30da:	ff 92       	push	r15
    30dc:	0f 93       	push	r16
    30de:	1f 93       	push	r17
    30e0:	cf 93       	push	r28
    30e2:	df 93       	push	r29
    30e4:	cd b7       	in	r28, 0x3d	; 61
    30e6:	de b7       	in	r29, 0x3e	; 62
    30e8:	28 97       	sbiw	r28, 0x08	; 8
    30ea:	0f b6       	in	r0, 0x3f	; 63
    30ec:	f8 94       	cli
    30ee:	de bf       	out	0x3e, r29	; 62
    30f0:	0f be       	out	0x3f, r0	; 63
    30f2:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    30f4:	82 c0       	rjmp	.+260    	; 0x31fa <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    30f6:	89 81       	ldd	r24, Y+1	; 0x01
    30f8:	88 23       	and	r24, r24
    30fa:	0c f4       	brge	.+2      	; 0x30fe <prvProcessReceivedCommands+0x2e>
    30fc:	7e c0       	rjmp	.+252    	; 0x31fa <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    30fe:	ae 80       	ldd	r10, Y+6	; 0x06
    3100:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3102:	d5 01       	movw	r26, r10
    3104:	1c 96       	adiw	r26, 0x0c	; 12
    3106:	8d 91       	ld	r24, X+
    3108:	9c 91       	ld	r25, X
    310a:	1d 97       	sbiw	r26, 0x0d	; 13
    310c:	89 2b       	or	r24, r25
    310e:	21 f0       	breq	.+8      	; 0x3118 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3110:	c5 01       	movw	r24, r10
    3112:	02 96       	adiw	r24, 0x02	; 2
    3114:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3118:	ce 01       	movw	r24, r28
    311a:	08 96       	adiw	r24, 0x08	; 8
    311c:	fe de       	rcall	.-516    	; 0x2f1a <prvSampleTimeNow>
    311e:	8b 01       	movw	r16, r22
    3120:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3122:	e9 81       	ldd	r30, Y+1	; 0x01
    3124:	0e 2e       	mov	r0, r30
    3126:	00 0c       	add	r0, r0
    3128:	ff 0b       	sbc	r31, r31
    312a:	ea 30       	cpi	r30, 0x0A	; 10
    312c:	f1 05       	cpc	r31, r1
    312e:	08 f0       	brcs	.+2      	; 0x3132 <prvProcessReceivedCommands+0x62>
    3130:	64 c0       	rjmp	.+200    	; 0x31fa <prvProcessReceivedCommands+0x12a>
    3132:	88 27       	eor	r24, r24
    3134:	ee 58       	subi	r30, 0x8E	; 142
    3136:	ff 4f       	sbci	r31, 0xFF	; 255
    3138:	8f 4f       	sbci	r24, 0xFF	; 255
    313a:	0c 94 68 2d 	jmp	0x5ad0	; 0x5ad0 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    313e:	f5 01       	movw	r30, r10
    3140:	86 89       	ldd	r24, Z+22	; 0x16
    3142:	81 60       	ori	r24, 0x01	; 1
    3144:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3146:	ca 80       	ldd	r12, Y+2	; 0x02
    3148:	db 80       	ldd	r13, Y+3	; 0x03
    314a:	ec 80       	ldd	r14, Y+4	; 0x04
    314c:	fd 80       	ldd	r15, Y+5	; 0x05
    314e:	46 85       	ldd	r20, Z+14	; 0x0e
    3150:	57 85       	ldd	r21, Z+15	; 0x0f
    3152:	60 89       	ldd	r22, Z+16	; 0x10
    3154:	71 89       	ldd	r23, Z+17	; 0x11
    3156:	4c 0d       	add	r20, r12
    3158:	5d 1d       	adc	r21, r13
    315a:	6e 1d       	adc	r22, r14
    315c:	7f 1d       	adc	r23, r15
    315e:	c5 01       	movw	r24, r10
    3160:	83 dd       	rcall	.-1274   	; 0x2c68 <prvInsertTimerInActiveList>
    3162:	88 23       	and	r24, r24
    3164:	09 f4       	brne	.+2      	; 0x3168 <prvProcessReceivedCommands+0x98>
    3166:	49 c0       	rjmp	.+146    	; 0x31fa <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3168:	d5 01       	movw	r26, r10
    316a:	54 96       	adiw	r26, 0x14	; 20
    316c:	ed 91       	ld	r30, X+
    316e:	fc 91       	ld	r31, X
    3170:	55 97       	sbiw	r26, 0x15	; 21
    3172:	c5 01       	movw	r24, r10
    3174:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3176:	f5 01       	movw	r30, r10
    3178:	86 89       	ldd	r24, Z+22	; 0x16
    317a:	82 ff       	sbrs	r24, 2
    317c:	3e c0       	rjmp	.+124    	; 0x31fa <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    317e:	4a 81       	ldd	r20, Y+2	; 0x02
    3180:	5b 81       	ldd	r21, Y+3	; 0x03
    3182:	6c 81       	ldd	r22, Y+4	; 0x04
    3184:	7d 81       	ldd	r23, Y+5	; 0x05
    3186:	86 85       	ldd	r24, Z+14	; 0x0e
    3188:	97 85       	ldd	r25, Z+15	; 0x0f
    318a:	a0 89       	ldd	r26, Z+16	; 0x10
    318c:	b1 89       	ldd	r27, Z+17	; 0x11
    318e:	9a 01       	movw	r18, r20
    3190:	ab 01       	movw	r20, r22
    3192:	28 0f       	add	r18, r24
    3194:	39 1f       	adc	r19, r25
    3196:	4a 1f       	adc	r20, r26
    3198:	5b 1f       	adc	r21, r27
    319a:	c1 2c       	mov	r12, r1
    319c:	d1 2c       	mov	r13, r1
    319e:	76 01       	movw	r14, r12
    31a0:	00 e0       	ldi	r16, 0x00	; 0
    31a2:	10 e0       	ldi	r17, 0x00	; 0
    31a4:	60 e0       	ldi	r22, 0x00	; 0
    31a6:	c5 01       	movw	r24, r10
    31a8:	f2 dd       	rcall	.-1052   	; 0x2d8e <xTimerGenericCommand>
    31aa:	27 c0       	rjmp	.+78     	; 0x31fa <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    31ac:	d5 01       	movw	r26, r10
    31ae:	56 96       	adiw	r26, 0x16	; 22
    31b0:	8c 91       	ld	r24, X
    31b2:	56 97       	sbiw	r26, 0x16	; 22
    31b4:	8e 7f       	andi	r24, 0xFE	; 254
    31b6:	56 96       	adiw	r26, 0x16	; 22
    31b8:	8c 93       	st	X, r24
                        break;
    31ba:	1f c0       	rjmp	.+62     	; 0x31fa <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    31bc:	f5 01       	movw	r30, r10
    31be:	86 89       	ldd	r24, Z+22	; 0x16
    31c0:	81 60       	ori	r24, 0x01	; 1
    31c2:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    31c4:	4a 81       	ldd	r20, Y+2	; 0x02
    31c6:	5b 81       	ldd	r21, Y+3	; 0x03
    31c8:	6c 81       	ldd	r22, Y+4	; 0x04
    31ca:	7d 81       	ldd	r23, Y+5	; 0x05
    31cc:	46 87       	std	Z+14, r20	; 0x0e
    31ce:	57 87       	std	Z+15, r21	; 0x0f
    31d0:	60 8b       	std	Z+16, r22	; 0x10
    31d2:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    31d4:	40 0f       	add	r20, r16
    31d6:	51 1f       	adc	r21, r17
    31d8:	62 1f       	adc	r22, r18
    31da:	73 1f       	adc	r23, r19
    31dc:	68 01       	movw	r12, r16
    31de:	79 01       	movw	r14, r18
    31e0:	c5 01       	movw	r24, r10
    31e2:	42 dd       	rcall	.-1404   	; 0x2c68 <prvInsertTimerInActiveList>
                        break;
    31e4:	0a c0       	rjmp	.+20     	; 0x31fa <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    31e6:	f5 01       	movw	r30, r10
    31e8:	86 89       	ldd	r24, Z+22	; 0x16
    31ea:	81 fd       	sbrc	r24, 1
    31ec:	04 c0       	rjmp	.+8      	; 0x31f6 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    31ee:	c5 01       	movw	r24, r10
    31f0:	0e 94 24 02 	call	0x448	; 0x448 <vPortFree>
    31f4:	02 c0       	rjmp	.+4      	; 0x31fa <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    31f6:	8e 7f       	andi	r24, 0xFE	; 254
    31f8:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	a9 01       	movw	r20, r18
    3200:	be 01       	movw	r22, r28
    3202:	6f 5f       	subi	r22, 0xFF	; 255
    3204:	7f 4f       	sbci	r23, 0xFF	; 255
    3206:	80 91 89 16 	lds	r24, 0x1689	; 0x801689 <xTimerQueue>
    320a:	90 91 8a 16 	lds	r25, 0x168A	; 0x80168a <xTimerQueue+0x1>
    320e:	0e 94 14 06 	call	0xc28	; 0xc28 <xQueueReceive>
    3212:	81 11       	cpse	r24, r1
    3214:	70 cf       	rjmp	.-288    	; 0x30f6 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3216:	28 96       	adiw	r28, 0x08	; 8
    3218:	0f b6       	in	r0, 0x3f	; 63
    321a:	f8 94       	cli
    321c:	de bf       	out	0x3e, r29	; 62
    321e:	0f be       	out	0x3f, r0	; 63
    3220:	cd bf       	out	0x3d, r28	; 61
    3222:	df 91       	pop	r29
    3224:	cf 91       	pop	r28
    3226:	1f 91       	pop	r17
    3228:	0f 91       	pop	r16
    322a:	ff 90       	pop	r15
    322c:	ef 90       	pop	r14
    322e:	df 90       	pop	r13
    3230:	cf 90       	pop	r12
    3232:	bf 90       	pop	r11
    3234:	af 90       	pop	r10
    3236:	08 95       	ret

00003238 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3238:	08 95       	ret

0000323a <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    323a:	84 b1       	in	r24, 0x04	; 4
    323c:	80 68       	ori	r24, 0x80	; 128
    323e:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3240:	85 b1       	in	r24, 0x05	; 5
    3242:	80 68       	ori	r24, 0x80	; 128
    3244:	85 b9       	out	0x05, r24	; 5
    3246:	08 95       	ret

00003248 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3248:	83 b1       	in	r24, 0x03	; 3
    324a:	80 68       	ori	r24, 0x80	; 128
    324c:	83 b9       	out	0x03, r24	; 3
    324e:	08 95       	ret

00003250 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3250:	f4 df       	rcall	.-24     	; 0x323a <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3252:	2f ef       	ldi	r18, 0xFF	; 255
    3254:	80 e7       	ldi	r24, 0x70	; 112
    3256:	92 e0       	ldi	r25, 0x02	; 2
    3258:	21 50       	subi	r18, 0x01	; 1
    325a:	80 40       	sbci	r24, 0x00	; 0
    325c:	90 40       	sbci	r25, 0x00	; 0
    325e:	e1 f7       	brne	.-8      	; 0x3258 <vApplicationMallocFailedHook+0x8>
    3260:	00 c0       	rjmp	.+0      	; 0x3262 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3262:	00 00       	nop
    3264:	f1 df       	rcall	.-30     	; 0x3248 <prvBlinkMainLed>
    3266:	f5 cf       	rjmp	.-22     	; 0x3252 <vApplicationMallocFailedHook+0x2>

00003268 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3268:	e8 df       	rcall	.-48     	; 0x323a <prvSetMainLedOn>
    326a:	2f ef       	ldi	r18, 0xFF	; 255
    326c:	87 ea       	ldi	r24, 0xA7	; 167
    326e:	91 e6       	ldi	r25, 0x61	; 97
    3270:	21 50       	subi	r18, 0x01	; 1
    3272:	80 40       	sbci	r24, 0x00	; 0
    3274:	90 40       	sbci	r25, 0x00	; 0
    3276:	e1 f7       	brne	.-8      	; 0x3270 <vApplicationStackOverflowHook+0x8>
    3278:	00 c0       	rjmp	.+0      	; 0x327a <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    327a:	00 00       	nop
    327c:	e5 df       	rcall	.-54     	; 0x3248 <prvBlinkMainLed>
    327e:	f5 cf       	rjmp	.-22     	; 0x326a <vApplicationStackOverflowHook+0x2>

00003280 <initialize_CO2>:
int16_t co2;
extern SemaphoreHandle_t semaphoreCO2;


void initialize_CO2(){
	mh_z19_initialise(ser_USART3);
    3280:	83 e0       	ldi	r24, 0x03	; 3
    3282:	0c 94 4f 22 	jmp	0x449e	; 0x449e <mh_z19_initialise>
    3286:	08 95       	ret

00003288 <co2Task_run>:
}

// Function responsible for measuring CO2
void co2Task_run()	
{
    3288:	0f 93       	push	r16
	mh_z19_returnCode_t rc;
		vTaskDelay(pdMS_TO_TICKS(6000));
    328a:	64 e7       	ldi	r22, 0x74	; 116
    328c:	71 e0       	ldi	r23, 0x01	; 1
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <vTaskDelay>
	
		xSemaphoreTake(semaphoreCO2, portMAX_DELAY);
    3296:	4f ef       	ldi	r20, 0xFF	; 255
    3298:	5f ef       	ldi	r21, 0xFF	; 255
    329a:	ba 01       	movw	r22, r20
    329c:	80 91 04 18 	lds	r24, 0x1804	; 0x801804 <semaphoreCO2>
    32a0:	90 91 05 18 	lds	r25, 0x1805	; 0x801805 <semaphoreCO2+0x1>
    32a4:	0e 94 a3 06 	call	0xd46	; 0xd46 <xQueueSemaphoreTake>
		rc = mh_z19_takeMeassuring();
    32a8:	0e 94 74 22 	call	0x44e8	; 0x44e8 <mh_z19_takeMeassuring>
		if (rc != MHZ19_OK)
    32ac:	88 23       	and	r24, r24
    32ae:	21 f0       	breq	.+8      	; 0x32b8 <co2Task_run+0x30>
		{
			puts("CO2 MEASURING FAILED");
    32b0:	8c e7       	ldi	r24, 0x7C	; 124
    32b2:	92 e0       	ldi	r25, 0x02	; 2
    32b4:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <puts>
		}
		co2 = mh_z19_getCo2Ppm;
    32b8:	83 ea       	ldi	r24, 0xA3	; 163
    32ba:	92 e2       	ldi	r25, 0x22	; 34
    32bc:	90 93 f7 17 	sts	0x17F7, r25	; 0x8017f7 <co2+0x1>
    32c0:	80 93 f6 17 	sts	0x17F6, r24	; 0x8017f6 <co2>
		printf("CO2: %d\n",co2);
    32c4:	9f 93       	push	r25
    32c6:	8f 93       	push	r24
    32c8:	81 e9       	ldi	r24, 0x91	; 145
    32ca:	92 e0       	ldi	r25, 0x02	; 2
    32cc:	9f 93       	push	r25
    32ce:	8f 93       	push	r24
    32d0:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>
		xSemaphoreGive(semaphoreCO2);
    32d4:	00 e0       	ldi	r16, 0x00	; 0
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	a9 01       	movw	r20, r18
    32dc:	60 e0       	ldi	r22, 0x00	; 0
    32de:	70 e0       	ldi	r23, 0x00	; 0
    32e0:	80 91 04 18 	lds	r24, 0x1804	; 0x801804 <semaphoreCO2>
    32e4:	90 91 05 18 	lds	r25, 0x1805	; 0x801805 <semaphoreCO2+0x1>
    32e8:	0e 94 47 05 	call	0xa8e	; 0xa8e <xQueueGenericSend>
	
}
    32ec:	0f 90       	pop	r0
    32ee:	0f 90       	pop	r0
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	0f 91       	pop	r16
    32f6:	08 95       	ret

000032f8 <_runCO2>:
// Main task for CO2. 
void _runCO2(void* params) {
	// In future we could use this for some INIT values
	
	while (1) {
		co2Task_run();
    32f8:	c7 df       	rcall	.-114    	; 0x3288 <co2Task_run>
    32fa:	fe cf       	rjmp	.-4      	; 0x32f8 <_runCO2>

000032fc <co2Task_create>:
	
}

// Creating task for CO2
// Being called from main.c
void co2Task_create(){
    32fc:	ef 92       	push	r14
    32fe:	ff 92       	push	r15
    3300:	0f 93       	push	r16
	xTaskCreate(
    3302:	e1 2c       	mov	r14, r1
    3304:	f1 2c       	mov	r15, r1
    3306:	01 e0       	ldi	r16, 0x01	; 1
    3308:	20 e0       	ldi	r18, 0x00	; 0
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	40 ec       	ldi	r20, 0xC0	; 192
    330e:	50 e0       	ldi	r21, 0x00	; 0
    3310:	6a e9       	ldi	r22, 0x9A	; 154
    3312:	72 e0       	ldi	r23, 0x02	; 2
    3314:	8c e7       	ldi	r24, 0x7C	; 124
    3316:	99 e1       	ldi	r25, 0x19	; 25
    3318:	0e 94 b6 0c 	call	0x196c	; 0x196c <xTaskCreate>
	configMINIMAL_STACK_SIZE,	   // This stack size can be checked & adjusted by reading the Stack Highwater
	NULL,					   	   // (void *pvParameters)
	1,							   //the priority of the task
	NULL							   //No TaskHandle created.
	);
}
    331c:	0f 91       	pop	r16
    331e:	ff 90       	pop	r15
    3320:	ef 90       	pop	r14
    3322:	08 95       	ret

00003324 <initialize_HumidityTemperature>:
int16_t temperature;
int16_t humidity;
extern SemaphoreHandle_t semaphoreTempHum;

void initialize_HumidityTemperature(){
	hih8120_initialise();
    3324:	74 c3       	rjmp	.+1768   	; 0x3a0e <hih8120_initialise>
    3326:	08 95       	ret

00003328 <humidityTemperatureTask_run>:
}
// Function responsible for measuring Humidity and Temperature.
void humidityTemperatureTask_run()
{
    3328:	0f 93       	push	r16
	vTaskDelay(pdMS_TO_TICKS(6000));
    332a:	64 e7       	ldi	r22, 0x74	; 116
    332c:	71 e0       	ldi	r23, 0x01	; 1
    332e:	80 e0       	ldi	r24, 0x00	; 0
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <vTaskDelay>
	
		xSemaphoreTake(semaphoreTempHum, portMAX_DELAY);
    3336:	4f ef       	ldi	r20, 0xFF	; 255
    3338:	5f ef       	ldi	r21, 0xFF	; 255
    333a:	ba 01       	movw	r22, r20
    333c:	80 91 02 18 	lds	r24, 0x1802	; 0x801802 <semaphoreTempHum>
    3340:	90 91 03 18 	lds	r25, 0x1803	; 0x801803 <semaphoreTempHum+0x1>
    3344:	0e 94 a3 06 	call	0xd46	; 0xd46 <xQueueSemaphoreTake>

		if (hih8120_wakeup() == HIH8120_OK) {
    3348:	7a d3       	rcall	.+1780   	; 0x3a3e <hih8120_wakeup>
    334a:	81 11       	cpse	r24, r1
    334c:	3f c0       	rjmp	.+126    	; 0x33cc <humidityTemperatureTask_run+0xa4>
			vTaskDelay(pdMS_TO_TICKS(100));
    334e:	66 e0       	ldi	r22, 0x06	; 6
    3350:	70 e0       	ldi	r23, 0x00	; 0
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <vTaskDelay>
			
			if (hih8120_measure() == HIH8120_OK) {
    335a:	86 d3       	rcall	.+1804   	; 0x3a68 <hih8120_measure>
    335c:	81 11       	cpse	r24, r1
    335e:	2d c0       	rjmp	.+90     	; 0x33ba <humidityTemperatureTask_run+0x92>
				vTaskDelay(pdMS_TO_TICKS(50));
    3360:	63 e0       	ldi	r22, 0x03	; 3
    3362:	70 e0       	ldi	r23, 0x00	; 0
    3364:	80 e0       	ldi	r24, 0x00	; 0
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <vTaskDelay>
				humidity = hih8120_getHumidityPercent_x10();
    336c:	a3 d3       	rcall	.+1862   	; 0x3ab4 <hih8120_getHumidityPercent_x10>
    336e:	90 93 fb 17 	sts	0x17FB, r25	; 0x8017fb <humidity+0x1>
    3372:	80 93 fa 17 	sts	0x17FA, r24	; 0x8017fa <humidity>
				temperature = hih8120_getTemperature_x10();
    3376:	c3 d3       	rcall	.+1926   	; 0x3afe <hih8120_getTemperature_x10>
    3378:	80 93 f8 17 	sts	0x17F8, r24	; 0x8017f8 <temperature>
    337c:	90 93 f9 17 	sts	0x17F9, r25	; 0x8017f9 <temperature+0x1>
				printf("TEMP: %d\n",temperature);
    3380:	9f 93       	push	r25
    3382:	8f 93       	push	r24
    3384:	8e e9       	ldi	r24, 0x9E	; 158
    3386:	92 e0       	ldi	r25, 0x02	; 2
    3388:	9f 93       	push	r25
    338a:	8f 93       	push	r24
    338c:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>
				printf("HUMID: %d\n",humidity);
    3390:	80 91 fb 17 	lds	r24, 0x17FB	; 0x8017fb <humidity+0x1>
    3394:	8f 93       	push	r24
    3396:	80 91 fa 17 	lds	r24, 0x17FA	; 0x8017fa <humidity>
    339a:	8f 93       	push	r24
    339c:	88 ea       	ldi	r24, 0xA8	; 168
    339e:	92 e0       	ldi	r25, 0x02	; 2
    33a0:	9f 93       	push	r25
    33a2:	8f 93       	push	r24
    33a4:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>
    33a8:	8d b7       	in	r24, 0x3d	; 61
    33aa:	9e b7       	in	r25, 0x3e	; 62
    33ac:	08 96       	adiw	r24, 0x08	; 8
    33ae:	0f b6       	in	r0, 0x3f	; 63
    33b0:	f8 94       	cli
    33b2:	9e bf       	out	0x3e, r25	; 62
    33b4:	0f be       	out	0x3f, r0	; 63
    33b6:	8d bf       	out	0x3d, r24	; 61
    33b8:	11 c0       	rjmp	.+34     	; 0x33dc <humidityTemperatureTask_run+0xb4>
				} else {
				printf("FAILED: to measure - Humidity-Temperature");
    33ba:	83 eb       	ldi	r24, 0xB3	; 179
    33bc:	92 e0       	ldi	r25, 0x02	; 2
    33be:	9f 93       	push	r25
    33c0:	8f 93       	push	r24
    33c2:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>
    33c6:	0f 90       	pop	r0
    33c8:	0f 90       	pop	r0
    33ca:	08 c0       	rjmp	.+16     	; 0x33dc <humidityTemperatureTask_run+0xb4>
			}
			} else {
			printf("FAILED: to wakeup - Humidity-Temperature");
    33cc:	8d ed       	ldi	r24, 0xDD	; 221
    33ce:	92 e0       	ldi	r25, 0x02	; 2
    33d0:	9f 93       	push	r25
    33d2:	8f 93       	push	r24
    33d4:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>
    33d8:	0f 90       	pop	r0
    33da:	0f 90       	pop	r0
			}
			
			xSemaphoreGive(semaphoreTempHum);
    33dc:	00 e0       	ldi	r16, 0x00	; 0
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	30 e0       	ldi	r19, 0x00	; 0
    33e2:	a9 01       	movw	r20, r18
    33e4:	60 e0       	ldi	r22, 0x00	; 0
    33e6:	70 e0       	ldi	r23, 0x00	; 0
    33e8:	80 91 02 18 	lds	r24, 0x1802	; 0x801802 <semaphoreTempHum>
    33ec:	90 91 03 18 	lds	r25, 0x1803	; 0x801803 <semaphoreTempHum+0x1>
    33f0:	0e 94 47 05 	call	0xa8e	; 0xa8e <xQueueGenericSend>
}
    33f4:	0f 91       	pop	r16
    33f6:	08 95       	ret

000033f8 <_run>:
// Main task for Temperature-Humidity
void _run(void* params) {
	// In future we could use this for some INIT values
	
	while (1) {
		humidityTemperatureTask_run();
    33f8:	97 df       	rcall	.-210    	; 0x3328 <humidityTemperatureTask_run>
    33fa:	fe cf       	rjmp	.-4      	; 0x33f8 <_run>

000033fc <humidityTemperatureTask_create>:
			xSemaphoreGive(semaphoreTempHum);
}

// Creating task for Humidity and Temperature.
// Being called from main.c
void humidityTemperatureTask_create(){
    33fc:	ef 92       	push	r14
    33fe:	ff 92       	push	r15
    3400:	0f 93       	push	r16
	xTaskCreate(
    3402:	e1 2c       	mov	r14, r1
    3404:	f1 2c       	mov	r15, r1
    3406:	01 e0       	ldi	r16, 0x01	; 1
    3408:	20 e0       	ldi	r18, 0x00	; 0
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	40 ec       	ldi	r20, 0xC0	; 192
    340e:	50 e0       	ldi	r21, 0x00	; 0
    3410:	66 e0       	ldi	r22, 0x06	; 6
    3412:	73 e0       	ldi	r23, 0x03	; 3
    3414:	8c ef       	ldi	r24, 0xFC	; 252
    3416:	99 e1       	ldi	r25, 0x19	; 25
    3418:	0e 94 b6 0c 	call	0x196c	; 0x196c <xTaskCreate>
	configMINIMAL_STACK_SIZE,	   // This stack size can be checked & adjusted by reading the Stack Highwater
	NULL,					   	   // (void *pvParameters)
	1,							   //the priority of the task
	NULL							   //No TaskHandle created.
	);
}
    341c:	0f 91       	pop	r16
    341e:	ff 90       	pop	r15
    3420:	ef 90       	pop	r14
    3422:	08 95       	ret

00003424 <tsl2591Callback>:
extern SemaphoreHandle_t semaphoreLight;

// Callback function for TSL2591 driver
void tsl2591Callback(tsl2591_returnCode_t rc)
{
    switch (rc)
    3424:	81 30       	cpi	r24, 0x01	; 1
    3426:	f9 f4       	brne	.+62     	; 0x3466 <tsl2591Callback+0x42>
    {
        case TSL2591_DATA_READY:
            if (TSL2591_OK == tsl2591_getLux(&luxValue))
    3428:	8c ef       	ldi	r24, 0xFC	; 252
    342a:	97 e1       	ldi	r25, 0x17	; 23
    342c:	0e 94 ee 28 	call	0x51dc	; 0x51dc <tsl2591_getLux>
    3430:	81 11       	cpse	r24, r1
    3432:	19 c0       	rjmp	.+50     	; 0x3466 <tsl2591Callback+0x42>
            {
                luxInInt = (int16_t)luxValue;
    3434:	60 91 fc 17 	lds	r22, 0x17FC	; 0x8017fc <luxValue>
    3438:	70 91 fd 17 	lds	r23, 0x17FD	; 0x8017fd <luxValue+0x1>
    343c:	80 91 fe 17 	lds	r24, 0x17FE	; 0x8017fe <luxValue+0x2>
    3440:	90 91 ff 17 	lds	r25, 0x17FF	; 0x8017ff <luxValue+0x3>
    3444:	5d d2       	rcall	.+1210   	; 0x3900 <__fixsfsi>
    3446:	60 93 00 18 	sts	0x1800, r22	; 0x801800 <luxInInt>
    344a:	70 93 01 18 	sts	0x1801, r23	; 0x801801 <luxInInt+0x1>
                printf("\nLux: %d\n", luxInInt);
    344e:	7f 93       	push	r23
    3450:	6f 93       	push	r22
    3452:	8a e1       	ldi	r24, 0x1A	; 26
    3454:	93 e0       	ldi	r25, 0x03	; 3
    3456:	9f 93       	push	r25
    3458:	8f 93       	push	r24
    345a:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>
    345e:	0f 90       	pop	r0
    3460:	0f 90       	pop	r0
    3462:	0f 90       	pop	r0
    3464:	0f 90       	pop	r0
    3466:	08 95       	ret

00003468 <initialize_Light>:
    }
}

void initialize_Light()
{
    if (TSL2591_OK == tsl2591_initialise(tsl2591Callback))
    3468:	82 e1       	ldi	r24, 0x12	; 18
    346a:	9a e1       	ldi	r25, 0x1A	; 26
    346c:	0c 94 ac 28 	jmp	0x5158	; 0x5158 <tsl2591_initialise>
    3470:	08 95       	ret

00003472 <lightTask_run>:
        // Always check what tsl2591_initialise() returns
    }
}

void lightTask_run()
{
    3472:	0f 93       	push	r16
    if (TSL2591_OK == tsl2591_enable())
    3474:	0e 94 c7 28 	call	0x518e	; 0x518e <tsl2591_enable>
    {
        // The power-up command is now sent to the sensor
        // It can be powered down with a call to tsl2591_disable()
    }
    vTaskDelay(pdMS_TO_TICKS(6000));
    3478:	64 e7       	ldi	r22, 0x74	; 116
    347a:	71 e0       	ldi	r23, 0x01	; 1
    347c:	80 e0       	ldi	r24, 0x00	; 0
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <vTaskDelay>

    xSemaphoreTake(semaphoreLight, portMAX_DELAY);
    3484:	4f ef       	ldi	r20, 0xFF	; 255
    3486:	5f ef       	ldi	r21, 0xFF	; 255
    3488:	ba 01       	movw	r22, r20
    348a:	80 91 06 18 	lds	r24, 0x1806	; 0x801806 <semaphoreLight>
    348e:	90 91 07 18 	lds	r25, 0x1807	; 0x801807 <semaphoreLight+0x1>
    3492:	0e 94 a3 06 	call	0xd46	; 0xd46 <xQueueSemaphoreTake>

    tsl2591_returnCode_t fetchDataStatus = tsl2591_fetchData();
    3496:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <tsl2591_fetchData>

    if (fetchDataStatus == TSL2591_OK)
    349a:	81 11       	cpse	r24, r1
    349c:	05 c0       	rjmp	.+10     	; 0x34a8 <lightTask_run+0x36>
    {
        printf("Light data fetched!\n");
    349e:	84 e2       	ldi	r24, 0x24	; 36
    34a0:	93 e0       	ldi	r25, 0x03	; 3
    34a2:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <puts>
    34a6:	0d c0       	rjmp	.+26     	; 0x34c2 <lightTask_run+0x50>
        // Process the fetched light data here
    }
    else if (fetchDataStatus == TSL2591_BUSY)
    34a8:	85 30       	cpi	r24, 0x05	; 5
    34aa:	29 f4       	brne	.+10     	; 0x34b6 <lightTask_run+0x44>
    {
        printf("Light sensor busy\n");
    34ac:	88 e3       	ldi	r24, 0x38	; 56
    34ae:	93 e0       	ldi	r25, 0x03	; 3
    34b0:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <puts>
    34b4:	06 c0       	rjmp	.+12     	; 0x34c2 <lightTask_run+0x50>
    }
    else if (fetchDataStatus == TSL2591_DRIVER_NOT_INITIALISED)
    34b6:	87 30       	cpi	r24, 0x07	; 7
    34b8:	21 f4       	brne	.+8      	; 0x34c2 <lightTask_run+0x50>
    {
        printf("Light driver not initialized\n");
    34ba:	8a e4       	ldi	r24, 0x4A	; 74
    34bc:	93 e0       	ldi	r25, 0x03	; 3
    34be:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <puts>
    }

    xSemaphoreGive(semaphoreLight);
    34c2:	00 e0       	ldi	r16, 0x00	; 0
    34c4:	20 e0       	ldi	r18, 0x00	; 0
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	a9 01       	movw	r20, r18
    34ca:	60 e0       	ldi	r22, 0x00	; 0
    34cc:	70 e0       	ldi	r23, 0x00	; 0
    34ce:	80 91 06 18 	lds	r24, 0x1806	; 0x801806 <semaphoreLight>
    34d2:	90 91 07 18 	lds	r25, 0x1807	; 0x801807 <semaphoreLight+0x1>
    34d6:	0e 94 47 05 	call	0xa8e	; 0xa8e <xQueueGenericSend>
}
    34da:	0f 91       	pop	r16
    34dc:	08 95       	ret

000034de <_runLight>:
void _runLight(void* params)
{
    // In the future, we could use this for some INIT values
    while (1)
    {
        lightTask_run();
    34de:	c9 df       	rcall	.-110    	; 0x3472 <lightTask_run>
    34e0:	fe cf       	rjmp	.-4      	; 0x34de <_runLight>

000034e2 <lightTask_create>:

    xSemaphoreGive(semaphoreLight);
}

void lightTask_create()
{
    34e2:	ef 92       	push	r14
    34e4:	ff 92       	push	r15
    34e6:	0f 93       	push	r16
    xTaskCreate(
    34e8:	e1 2c       	mov	r14, r1
    34ea:	f1 2c       	mov	r15, r1
    34ec:	01 e0       	ldi	r16, 0x01	; 1
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	40 ec       	ldi	r20, 0xC0	; 192
    34f4:	50 e0       	ldi	r21, 0x00	; 0
    34f6:	67 e6       	ldi	r22, 0x67	; 103
    34f8:	73 e0       	ldi	r23, 0x03	; 3
    34fa:	8f e6       	ldi	r24, 0x6F	; 111
    34fc:	9a e1       	ldi	r25, 0x1A	; 26
    34fe:	0e 94 b6 0c 	call	0x196c	; 0x196c <xTaskCreate>
        configMINIMAL_STACK_SIZE,   // This stack size can be checked & adjusted by reading the Stack Highwater
        NULL,                       // (void *pvParameters)
        1,                          // the priority of the task
        NULL
    );
}
    3502:	0f 91       	pop	r16
    3504:	ff 90       	pop	r15
    3506:	ef 90       	pop	r14
    3508:	08 95       	ret

0000350a <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    350a:	0f 93       	push	r16
    350c:	1f 93       	push	r17
    350e:	cf 93       	push	r28
    3510:	df 93       	push	r29
    3512:	cd b7       	in	r28, 0x3d	; 61
    3514:	de b7       	in	r29, 0x3e	; 62
    3516:	64 97       	sbiw	r28, 0x14	; 20
    3518:	0f b6       	in	r0, 0x3f	; 63
    351a:	f8 94       	cli
    351c:	de bf       	out	0x3e, r29	; 62
    351e:	0f be       	out	0x3f, r0	; 63
    3520:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3528:	61 d4       	rcall	.+2242   	; 0x3dec <lora_driver_rn2483FactoryReset>
    352a:	dd d6       	rcall	.+3514   	; 0x42e6 <lora_driver_mapReturnCodeToText>
    352c:	9f 93       	push	r25
    352e:	8f 93       	push	r24
    3530:	8d e6       	ldi	r24, 0x6D	; 109
    3532:	93 e0       	ldi	r25, 0x03	; 3
    3534:	9f 93       	push	r25
    3536:	8f 93       	push	r24
    3538:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    353c:	d5 d5       	rcall	.+2986   	; 0x40e8 <lora_driver_configureToEu868>
    353e:	d3 d6       	rcall	.+3494   	; 0x42e6 <lora_driver_mapReturnCodeToText>
    3540:	9f 93       	push	r25
    3542:	8f 93       	push	r24
    3544:	80 e8       	ldi	r24, 0x80	; 128
    3546:	93 e0       	ldi	r25, 0x03	; 3
    3548:	9f 93       	push	r25
    354a:	8f 93       	push	r24
    354c:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>
    3550:	8e 01       	movw	r16, r28
    3552:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3554:	1f 4f       	sbci	r17, 0xFF	; 255
    3556:	c8 01       	movw	r24, r16
    3558:	5b d4       	rcall	.+2230   	; 0x3e10 <lora_driver_getRn2483Hweui>
    355a:	c5 d6       	rcall	.+3466   	; 0x42e6 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    355c:	1f 93       	push	r17
    355e:	0f 93       	push	r16
    3560:	9f 93       	push	r25
    3562:	8f 93       	push	r24
    3564:	89 e9       	ldi	r24, 0x99	; 153
    3566:	93 e0       	ldi	r25, 0x03	; 3
    3568:	9f 93       	push	r25
    356a:	8f 93       	push	r24
    356c:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3570:	c8 01       	movw	r24, r16
    3572:	6a d4       	rcall	.+2260   	; 0x3e48 <lora_driver_setDeviceIdentifier>
    3574:	b8 d6       	rcall	.+3440   	; 0x42e6 <lora_driver_mapReturnCodeToText>
    3576:	9f 93       	push	r25
    3578:	8f 93       	push	r24
    357a:	1f 93       	push	r17
    357c:	0f 93       	push	r16
    357e:	8d ea       	ldi	r24, 0xAD	; 173
    3580:	93 e0       	ldi	r25, 0x03	; 3
    3582:	9f 93       	push	r25
    3584:	8f 93       	push	r24
    3586:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    358a:	a8 01       	movw	r20, r16
    358c:	62 ec       	ldi	r22, 0xC2	; 194
    358e:	73 e0       	ldi	r23, 0x03	; 3
    3590:	83 ee       	ldi	r24, 0xE3	; 227
    3592:	93 e0       	ldi	r25, 0x03	; 3
    3594:	87 d6       	rcall	.+3342   	; 0x42a4 <lora_driver_setOtaaIdentity>
    3596:	a7 d6       	rcall	.+3406   	; 0x42e6 <lora_driver_mapReturnCodeToText>
    3598:	9f 93       	push	r25
    359a:	8f 93       	push	r24
    359c:	1f 93       	push	r17
    359e:	0f 93       	push	r16
    35a0:	82 ec       	ldi	r24, 0xC2	; 194
    35a2:	93 e0       	ldi	r25, 0x03	; 3
    35a4:	9f 93       	push	r25
    35a6:	8f 93       	push	r24
    35a8:	83 ee       	ldi	r24, 0xE3	; 227
    35aa:	93 e0       	ldi	r25, 0x03	; 3
    35ac:	9f 93       	push	r25
    35ae:	8f 93       	push	r24
    35b0:	84 ef       	ldi	r24, 0xF4	; 244
    35b2:	93 e0       	ldi	r25, 0x03	; 3
    35b4:	9f 93       	push	r25
    35b6:	8f 93       	push	r24
    35b8:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    35bc:	78 d4       	rcall	.+2288   	; 0x3eae <lora_driver_saveMac>
    35be:	93 d6       	rcall	.+3366   	; 0x42e6 <lora_driver_mapReturnCodeToText>
    35c0:	9f 93       	push	r25
    35c2:	8f 93       	push	r24
    35c4:	8a e2       	ldi	r24, 0x2A	; 42
    35c6:	94 e0       	ldi	r25, 0x04	; 4
    35c8:	9f 93       	push	r25
    35ca:	8f 93       	push	r24
    35cc:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    35d0:	0f b6       	in	r0, 0x3f	; 63
    35d2:	f8 94       	cli
    35d4:	de bf       	out	0x3e, r29	; 62
    35d6:	0f be       	out	0x3f, r0	; 63
    35d8:	cd bf       	out	0x3d, r28	; 61
    35da:	81 e0       	ldi	r24, 0x01	; 1
    35dc:	62 d5       	rcall	.+2756   	; 0x40a2 <lora_driver_setAdaptiveDataRate>
    35de:	83 d6       	rcall	.+3334   	; 0x42e6 <lora_driver_mapReturnCodeToText>
    35e0:	9f 93       	push	r25
    35e2:	8f 93       	push	r24
    35e4:	89 e3       	ldi	r24, 0x39	; 57
    35e6:	94 e0       	ldi	r25, 0x04	; 4
    35e8:	9f 93       	push	r25
    35ea:	8f 93       	push	r24
    35ec:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    35f0:	84 ef       	ldi	r24, 0xF4	; 244
    35f2:	91 e0       	ldi	r25, 0x01	; 1
    35f4:	61 d5       	rcall	.+2754   	; 0x40b8 <lora_driver_setReceiveDelay>
    35f6:	77 d6       	rcall	.+3310   	; 0x42e6 <lora_driver_mapReturnCodeToText>
    35f8:	9f 93       	push	r25
    35fa:	8f 93       	push	r24
    35fc:	81 e0       	ldi	r24, 0x01	; 1
    35fe:	8f 93       	push	r24
    3600:	84 ef       	ldi	r24, 0xF4	; 244
    3602:	8f 93       	push	r24
    3604:	8a e5       	ldi	r24, 0x5A	; 90
    3606:	94 e0       	ldi	r25, 0x04	; 4
    3608:	9f 93       	push	r25
    360a:	8f 93       	push	r24
    360c:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>
    3610:	0f b6       	in	r0, 0x3f	; 63
    3612:	f8 94       	cli
    3614:	de bf       	out	0x3e, r29	; 62
    3616:	0f be       	out	0x3f, r0	; 63
    3618:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    361a:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	4d d4       	rcall	.+2202   	; 0x3eba <lora_driver_join>
    3620:	08 2f       	mov	r16, r24
    3622:	61 d6       	rcall	.+3266   	; 0x42e6 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3624:	9f 93       	push	r25
    3626:	8f 93       	push	r24
    3628:	1f 92       	push	r1
    362a:	1f 93       	push	r17
    362c:	8a e7       	ldi	r24, 0x7A	; 122
    362e:	94 e0       	ldi	r25, 0x04	; 4
    3630:	9f 93       	push	r25
    3632:	8f 93       	push	r24
    3634:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>
    3638:	0f 90       	pop	r0
    363a:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    363c:	0f 90       	pop	r0
    363e:	0f 90       	pop	r0
    3640:	0f 90       	pop	r0
    3642:	0f 90       	pop	r0
    3644:	08 30       	cpi	r16, 0x08	; 8
    3646:	59 f0       	breq	.+22     	; 0x365e <_lora_setup+0x154>
    3648:	80 e0       	ldi	r24, 0x00	; 0
    364a:	0e 94 2a 28 	call	0x5054	; 0x5054 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    364e:	66 e3       	ldi	r22, 0x36	; 54
    3650:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3652:	80 e0       	ldi	r24, 0x00	; 0
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <vTaskDelay>
    365a:	11 50       	subi	r17, 0x01	; 1
    365c:	f9 f6       	brne	.-66     	; 0x361c <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    365e:	08 30       	cpi	r16, 0x08	; 8
    3660:	21 f4       	brne	.+8      	; 0x366a <_lora_setup+0x160>

	if (rc == LORA_ACCEPTED)
    3662:	81 e0       	ldi	r24, 0x01	; 1
    3664:	0e 94 0c 28 	call	0x5018	; 0x5018 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3668:	09 c0       	rjmp	.+18     	; 0x367c <_lora_setup+0x172>
    366a:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    366c:	0e 94 1b 28 	call	0x5036	; 0x5036 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3670:	80 e0       	ldi	r24, 0x00	; 0
    3672:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3676:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    367a:	fd cf       	rjmp	.-6      	; 0x3676 <_lora_setup+0x16c>
    367c:	64 96       	adiw	r28, 0x14	; 20
    367e:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    3680:	f8 94       	cli
    3682:	de bf       	out	0x3e, r29	; 62
    3684:	0f be       	out	0x3f, r0	; 63
    3686:	cd bf       	out	0x3d, r28	; 61
    3688:	df 91       	pop	r29
    368a:	cf 91       	pop	r28
    368c:	1f 91       	pop	r17
    368e:	0f 91       	pop	r16
    3690:	08 95       	ret

00003692 <lora_handler_task>:
    3692:	cf 93       	push	r28
    3694:	df 93       	push	r29

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    3696:	00 d0       	rcall	.+0      	; 0x3698 <lora_handler_task+0x6>
    3698:	1f 92       	push	r1
    369a:	cd b7       	in	r28, 0x3d	; 61
    369c:	de b7       	in	r29, 0x3e	; 62
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    369e:	81 e0       	ldi	r24, 0x01	; 1
    36a0:	97 d3       	rcall	.+1838   	; 0x3dd0 <lora_driver_resetRn2483>
	vTaskDelay(2);
    36a2:	62 e0       	ldi	r22, 0x02	; 2
    36a4:	70 e0       	ldi	r23, 0x00	; 0
    36a6:	80 e0       	ldi	r24, 0x00	; 0
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <vTaskDelay>
	lora_driver_resetRn2483(0);
    36ae:	80 e0       	ldi	r24, 0x00	; 0
    36b0:	8f d3       	rcall	.+1822   	; 0x3dd0 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    36b2:	66 e9       	ldi	r22, 0x96	; 150
    36b4:	70 e0       	ldi	r23, 0x00	; 0
    36b6:	80 e0       	ldi	r24, 0x00	; 0
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    36be:	41 d3       	rcall	.+1666   	; 0x3d42 <lora_driver_flushBuffers>

	_lora_setup();
    36c0:	24 df       	rcall	.-440    	; 0x350a <_lora_setup>
    36c2:	e5 ea       	ldi	r30, 0xA5	; 165

	_uplink_payload.len = 8;
    36c4:	f6 e1       	ldi	r31, 0x16	; 22
    36c6:	88 e0       	ldi	r24, 0x08	; 8
    36c8:	81 83       	std	Z+1, r24	; 0x01
    36ca:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    36cc:	80 83       	st	Z, r24
    36ce:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    36d2:	69 83       	std	Y+1, r22	; 0x01
    36d4:	7a 83       	std	Y+2, r23	; 0x02
    36d6:	8b 83       	std	Y+3, r24	; 0x03
    36d8:	9c 83       	std	Y+4, r25	; 0x04
    36da:	48 ea       	ldi	r20, 0xA8	; 168
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    36dc:	58 e4       	ldi	r21, 0x48	; 72
    36de:	60 e0       	ldi	r22, 0x00	; 0
    36e0:	70 e0       	ldi	r23, 0x00	; 0
    36e2:	ce 01       	movw	r24, r28
    36e4:	01 96       	adiw	r24, 0x01	; 1
    36e6:	0e 94 56 0f 	call	0x1eac	; 0x1eac <xTaskDelayUntil>
    36ea:	4f ef       	ldi	r20, 0xFF	; 255

		// Some dummy payload
		xSemaphoreTake(semaphoreTempHum, portMAX_DELAY);
    36ec:	5f ef       	ldi	r21, 0xFF	; 255
    36ee:	ba 01       	movw	r22, r20
    36f0:	80 91 02 18 	lds	r24, 0x1802	; 0x801802 <semaphoreTempHum>
    36f4:	90 91 03 18 	lds	r25, 0x1803	; 0x801803 <semaphoreTempHum+0x1>
    36f8:	0e 94 a3 06 	call	0xd46	; 0xd46 <xQueueSemaphoreTake>
    36fc:	a0 90 fa 17 	lds	r10, 0x17FA	; 0x8017fa <humidity>
			uint16_t hum = humidity; // measured humidity
    3700:	90 90 fb 17 	lds	r9, 0x17FB	; 0x8017fb <humidity+0x1>
    3704:	c0 90 f8 17 	lds	r12, 0x17F8	; 0x8017f8 <temperature>
			int16_t temp = temperature; // measured temp
    3708:	b0 90 f9 17 	lds	r11, 0x17F9	; 0x8017f9 <temperature+0x1>
    370c:	00 e0       	ldi	r16, 0x00	; 0
		xSemaphoreGive(semaphoreTempHum);
    370e:	20 e0       	ldi	r18, 0x00	; 0
    3710:	30 e0       	ldi	r19, 0x00	; 0
    3712:	a9 01       	movw	r20, r18
    3714:	60 e0       	ldi	r22, 0x00	; 0
    3716:	70 e0       	ldi	r23, 0x00	; 0
    3718:	80 91 02 18 	lds	r24, 0x1802	; 0x801802 <semaphoreTempHum>
    371c:	90 91 03 18 	lds	r25, 0x1803	; 0x801803 <semaphoreTempHum+0x1>
    3720:	0e 94 47 05 	call	0xa8e	; 0xa8e <xQueueGenericSend>
    3724:	4f ef       	ldi	r20, 0xFF	; 255

		xSemaphoreTake(semaphoreCO2, portMAX_DELAY);
    3726:	5f ef       	ldi	r21, 0xFF	; 255
    3728:	ba 01       	movw	r22, r20
    372a:	80 91 04 18 	lds	r24, 0x1804	; 0x801804 <semaphoreCO2>
    372e:	90 91 05 18 	lds	r25, 0x1805	; 0x801805 <semaphoreCO2+0x1>
    3732:	0e 94 a3 06 	call	0xd46	; 0xd46 <xQueueSemaphoreTake>
    3736:	e0 90 f6 17 	lds	r14, 0x17F6	; 0x8017f6 <co2>
			uint16_t co2_ppm = co2; // measured CO2
    373a:	d0 90 f7 17 	lds	r13, 0x17F7	; 0x8017f7 <co2+0x1>
    373e:	20 e0       	ldi	r18, 0x00	; 0
		xSemaphoreGive(semaphoreCO2);
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	a9 01       	movw	r20, r18
    3744:	60 e0       	ldi	r22, 0x00	; 0
    3746:	70 e0       	ldi	r23, 0x00	; 0
    3748:	80 91 04 18 	lds	r24, 0x1804	; 0x801804 <semaphoreCO2>
    374c:	90 91 05 18 	lds	r25, 0x1805	; 0x801805 <semaphoreCO2+0x1>
    3750:	0e 94 47 05 	call	0xa8e	; 0xa8e <xQueueGenericSend>
    3754:	4f ef       	ldi	r20, 0xFF	; 255

		xSemaphoreTake(semaphoreLight, portMAX_DELAY);
    3756:	5f ef       	ldi	r21, 0xFF	; 255
    3758:	ba 01       	movw	r22, r20
    375a:	80 91 06 18 	lds	r24, 0x1806	; 0x801806 <semaphoreLight>
    375e:	90 91 07 18 	lds	r25, 0x1807	; 0x801807 <semaphoreLight+0x1>
    3762:	0e 94 a3 06 	call	0xd46	; 0xd46 <xQueueSemaphoreTake>
    3766:	10 91 00 18 	lds	r17, 0x1800	; 0x801800 <luxInInt>
			uint16_t lux = luxInInt;
    376a:	f0 90 01 18 	lds	r15, 0x1801	; 0x801801 <luxInInt+0x1>
    376e:	20 e0       	ldi	r18, 0x00	; 0
		xSemaphoreGive(semaphoreLight);
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	a9 01       	movw	r20, r18
    3774:	60 e0       	ldi	r22, 0x00	; 0
    3776:	70 e0       	ldi	r23, 0x00	; 0
    3778:	80 91 06 18 	lds	r24, 0x1806	; 0x801806 <semaphoreLight>
    377c:	90 91 07 18 	lds	r25, 0x1807	; 0x801807 <semaphoreLight+0x1>
    3780:	0e 94 47 05 	call	0xa8e	; 0xa8e <xQueueGenericSend>
    3784:	80 91 f9 17 	lds	r24, 0x17F9	; 0x8017f9 <temperature+0x1>
		
		printf("TEMP BEFORE SEND: %d\n",temperature);
    3788:	8f 93       	push	r24
    378a:	80 91 f8 17 	lds	r24, 0x17F8	; 0x8017f8 <temperature>
    378e:	8f 93       	push	r24
    3790:	8a e9       	ldi	r24, 0x9A	; 154
    3792:	94 e0       	ldi	r25, 0x04	; 4
    3794:	9f 93       	push	r25
    3796:	8f 93       	push	r24
    3798:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>
    379c:	80 91 fb 17 	lds	r24, 0x17FB	; 0x8017fb <humidity+0x1>
		printf("HUMID BEFORE SEND: %d\n",humidity);
    37a0:	8f 93       	push	r24
    37a2:	80 91 fa 17 	lds	r24, 0x17FA	; 0x8017fa <humidity>
    37a6:	8f 93       	push	r24
    37a8:	80 eb       	ldi	r24, 0xB0	; 176
    37aa:	94 e0       	ldi	r25, 0x04	; 4
    37ac:	9f 93       	push	r25
    37ae:	8f 93       	push	r24
    37b0:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>
    37b4:	df 92       	push	r13
		printf("CO2 BEFORE SEND: %d\n",co2_ppm);
    37b6:	ef 92       	push	r14
    37b8:	87 ec       	ldi	r24, 0xC7	; 199
    37ba:	94 e0       	ldi	r25, 0x04	; 4
    37bc:	9f 93       	push	r25
    37be:	8f 93       	push	r24
    37c0:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>
    37c4:	ff 92       	push	r15
		printf("LUX BEFORE SEND: %d\n",lux);
    37c6:	1f 93       	push	r17
    37c8:	8c ed       	ldi	r24, 0xDC	; 220
    37ca:	94 e0       	ldi	r25, 0x04	; 4
    37cc:	9f 93       	push	r25
    37ce:	8f 93       	push	r24
    37d0:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>
    37d4:	e5 ea       	ldi	r30, 0xA5	; 165

		_uplink_payload.bytes[0] = hum >> 8;
    37d6:	f6 e1       	ldi	r31, 0x16	; 22
    37d8:	92 82       	std	Z+2, r9	; 0x02
    37da:	a3 82       	std	Z+3, r10	; 0x03
		_uplink_payload.bytes[1] = hum & 0xFF;
    37dc:	b4 82       	std	Z+4, r11	; 0x04
		_uplink_payload.bytes[2] = temp >> 8;
    37de:	c5 82       	std	Z+5, r12	; 0x05
		_uplink_payload.bytes[3] = temp & 0xFF;
    37e0:	d6 82       	std	Z+6, r13	; 0x06
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    37e2:	e7 82       	std	Z+7, r14	; 0x07
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    37e4:	f0 86       	std	Z+8, r15	; 0x08
		_uplink_payload.bytes[6] = lux >> 8; // TODO change to light from co2_ppm
    37e6:	11 87       	std	Z+9, r17	; 0x09
		_uplink_payload.bytes[7] = lux & 0xFF;
    37e8:	83 e0       	ldi	r24, 0x03	; 3

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    37ea:	0e 94 3c 28 	call	0x5078	; 0x5078 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    37ee:	65 ea       	ldi	r22, 0xA5	; 165
    37f0:	76 e1       	ldi	r23, 0x16	; 22
    37f2:	80 e0       	ldi	r24, 0x00	; 0
    37f4:	8b d3       	rcall	.+1814   	; 0x3f0c <lora_driver_sendUploadMessage>
    37f6:	77 d5       	rcall	.+2798   	; 0x42e6 <lora_driver_mapReturnCodeToText>
    37f8:	9f 93       	push	r25
    37fa:	8f 93       	push	r24
    37fc:	81 ef       	ldi	r24, 0xF1	; 241
    37fe:	94 e0       	ldi	r25, 0x04	; 4
    3800:	9f 93       	push	r25
    3802:	8f 93       	push	r24
    3804:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>
    3808:	0f b6       	in	r0, 0x3f	; 63
    380a:	f8 94       	cli
    380c:	de bf       	out	0x3e, r29	; 62
    380e:	0f be       	out	0x3f, r0	; 63
    3810:	cd bf       	out	0x3d, r28	; 61
    3812:	63 cf       	rjmp	.-314    	; 0x36da <lora_handler_task+0x48>

00003814 <lora_handler_initialise>:
    3814:	ef 92       	push	r14
extern SemaphoreHandle_t semaphoreCO2;
extern SemaphoreHandle_t semaphoreLight;


void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    3816:	ff 92       	push	r15
    3818:	0f 93       	push	r16
	xTaskCreate(
    381a:	e1 2c       	mov	r14, r1
    381c:	f1 2c       	mov	r15, r1
    381e:	08 2f       	mov	r16, r24
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	48 e8       	ldi	r20, 0x88	; 136
    3826:	51 e0       	ldi	r21, 0x01	; 1
    3828:	66 e0       	ldi	r22, 0x06	; 6
    382a:	75 e0       	ldi	r23, 0x05	; 5
    382c:	89 e4       	ldi	r24, 0x49	; 73
    382e:	9b e1       	ldi	r25, 0x1B	; 27
    3830:	0e 94 b6 0c 	call	0x196c	; 0x196c <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3834:	0f 91       	pop	r16
    3836:	ff 90       	pop	r15
    3838:	ef 90       	pop	r14
    383a:	08 95       	ret

0000383c <_initDrivers>:

// Prototype for LoRaWAN handler
void lora_handler_initialise(UBaseType_t lora_handler_task_priority);

static void _initDrivers(void) {
	puts("Initializing drivers...");
    383c:	8d e0       	ldi	r24, 0x0D	; 13
    383e:	95 e0       	ldi	r25, 0x05	; 5
    3840:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <puts>
	initialize_CO2();
    3844:	1d dd       	rcall	.-1478   	; 0x3280 <initialize_CO2>
	initialize_HumidityTemperature();
    3846:	6e dd       	rcall	.-1316   	; 0x3324 <initialize_HumidityTemperature>
	initialize_Light();	
    3848:	0f de       	rcall	.-994    	; 0x3468 <initialize_Light>
    384a:	60 e0       	ldi	r22, 0x00	; 0
	lora_driver_initialise(ser_USART1, NULL); // Without down-link buffer
    384c:	70 e0       	ldi	r23, 0x00	; 0
    384e:	81 e0       	ldi	r24, 0x01	; 1
    3850:	7f c2       	rjmp	.+1278   	; 0x3d50 <lora_driver_initialise>
    3852:	08 95       	ret

00003854 <_createTasks>:
    3854:	53 dd       	rcall	.-1370   	; 0x32fc <co2Task_create>


static void _createTasks()
{
	co2Task_create();
	humidityTemperatureTask_create();
    3856:	d2 dd       	rcall	.-1116   	; 0x33fc <humidityTemperatureTask_create>
	lightTask_create();
    3858:	44 ce       	rjmp	.-888    	; 0x34e2 <lightTask_create>
    385a:	08 95       	ret

0000385c <main>:
    385c:	0f 93       	push	r16
}


int main(void)
{
	stdio_initialise(ser_USART0);
    385e:	80 e0       	ldi	r24, 0x00	; 0
    3860:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <stdio_initialise>
	lora_handler_initialise(3); // Lora task with priority 3
    3864:	83 e0       	ldi	r24, 0x03	; 3
    3866:	d6 df       	rcall	.-84     	; 0x3814 <lora_handler_initialise>
	
	_initDrivers();
    3868:	e9 df       	rcall	.-46     	; 0x383c <_initDrivers>
	_createTasks();
    386a:	f4 df       	rcall	.-24     	; 0x3854 <_createTasks>
    386c:	85 e0       	ldi	r24, 0x05	; 5

	status_leds_initialise(5); // Status LED driver - Priority 5. (LoRaWAN)
    386e:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <status_leds_initialise>
    3872:	43 e0       	ldi	r20, 0x03	; 3

	semaphoreTempHum = xSemaphoreCreateBinary();
    3874:	60 e0       	ldi	r22, 0x00	; 0
    3876:	81 e0       	ldi	r24, 0x01	; 1
    3878:	0e 94 24 05 	call	0xa48	; 0xa48 <xQueueGenericCreate>
    387c:	90 93 03 18 	sts	0x1803, r25	; 0x801803 <semaphoreTempHum+0x1>
    3880:	80 93 02 18 	sts	0x1802, r24	; 0x801802 <semaphoreTempHum>
    3884:	43 e0       	ldi	r20, 0x03	; 3
	semaphoreCO2 = xSemaphoreCreateBinary();
    3886:	60 e0       	ldi	r22, 0x00	; 0
    3888:	81 e0       	ldi	r24, 0x01	; 1
    388a:	0e 94 24 05 	call	0xa48	; 0xa48 <xQueueGenericCreate>
    388e:	90 93 05 18 	sts	0x1805, r25	; 0x801805 <semaphoreCO2+0x1>
    3892:	80 93 04 18 	sts	0x1804, r24	; 0x801804 <semaphoreCO2>
    3896:	43 e0       	ldi	r20, 0x03	; 3
	semaphoreLight = xSemaphoreCreateBinary();
    3898:	60 e0       	ldi	r22, 0x00	; 0
    389a:	81 e0       	ldi	r24, 0x01	; 1
    389c:	0e 94 24 05 	call	0xa48	; 0xa48 <xQueueGenericCreate>
    38a0:	90 93 07 18 	sts	0x1807, r25	; 0x801807 <semaphoreLight+0x1>
    38a4:	80 93 06 18 	sts	0x1806, r24	; 0x801806 <semaphoreLight>
    38a8:	00 e0       	ldi	r16, 0x00	; 0
	xSemaphoreGive(semaphoreTempHum);
    38aa:	20 e0       	ldi	r18, 0x00	; 0
    38ac:	30 e0       	ldi	r19, 0x00	; 0
    38ae:	a9 01       	movw	r20, r18
    38b0:	60 e0       	ldi	r22, 0x00	; 0
    38b2:	70 e0       	ldi	r23, 0x00	; 0
    38b4:	80 91 02 18 	lds	r24, 0x1802	; 0x801802 <semaphoreTempHum>
    38b8:	90 91 03 18 	lds	r25, 0x1803	; 0x801803 <semaphoreTempHum+0x1>
    38bc:	0e 94 47 05 	call	0xa8e	; 0xa8e <xQueueGenericSend>
    38c0:	20 e0       	ldi	r18, 0x00	; 0
	xSemaphoreGive(semaphoreCO2);
    38c2:	30 e0       	ldi	r19, 0x00	; 0
    38c4:	a9 01       	movw	r20, r18
    38c6:	60 e0       	ldi	r22, 0x00	; 0
    38c8:	70 e0       	ldi	r23, 0x00	; 0
    38ca:	80 91 04 18 	lds	r24, 0x1804	; 0x801804 <semaphoreCO2>
    38ce:	90 91 05 18 	lds	r25, 0x1805	; 0x801805 <semaphoreCO2+0x1>
    38d2:	0e 94 47 05 	call	0xa8e	; 0xa8e <xQueueGenericSend>
    38d6:	20 e0       	ldi	r18, 0x00	; 0
	xSemaphoreGive(semaphoreLight);
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	a9 01       	movw	r20, r18
    38dc:	60 e0       	ldi	r22, 0x00	; 0
    38de:	70 e0       	ldi	r23, 0x00	; 0
    38e0:	80 91 06 18 	lds	r24, 0x1806	; 0x801806 <semaphoreLight>
    38e4:	90 91 07 18 	lds	r25, 0x1807	; 0x801807 <semaphoreLight+0x1>
    38e8:	0e 94 47 05 	call	0xa8e	; 0xa8e <xQueueGenericSend>
    38ec:	85 e2       	ldi	r24, 0x25	; 37

	printf("Starting...\n");
    38ee:	95 e0       	ldi	r25, 0x05	; 5
    38f0:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <puts>
    38f4:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <vTaskStartScheduler>
	vTaskStartScheduler();
    38f8:	80 e0       	ldi	r24, 0x00	; 0
}
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	0f 91       	pop	r16
    38fe:	08 95       	ret

00003900 <__fixsfsi>:
    3900:	04 d0       	rcall	.+8      	; 0x390a <__fixunssfsi>
    3902:	68 94       	set
    3904:	b1 11       	cpse	r27, r1
    3906:	50 c0       	rjmp	.+160    	; 0x39a8 <__fp_szero>
    3908:	08 95       	ret

0000390a <__fixunssfsi>:
    390a:	33 d0       	rcall	.+102    	; 0x3972 <__fp_splitA>
    390c:	88 f0       	brcs	.+34     	; 0x3930 <__fixunssfsi+0x26>
    390e:	9f 57       	subi	r25, 0x7F	; 127
    3910:	90 f0       	brcs	.+36     	; 0x3936 <__fixunssfsi+0x2c>
    3912:	b9 2f       	mov	r27, r25
    3914:	99 27       	eor	r25, r25
    3916:	b7 51       	subi	r27, 0x17	; 23
    3918:	a0 f0       	brcs	.+40     	; 0x3942 <__fixunssfsi+0x38>
    391a:	d1 f0       	breq	.+52     	; 0x3950 <__fixunssfsi+0x46>
    391c:	66 0f       	add	r22, r22
    391e:	77 1f       	adc	r23, r23
    3920:	88 1f       	adc	r24, r24
    3922:	99 1f       	adc	r25, r25
    3924:	1a f0       	brmi	.+6      	; 0x392c <__fixunssfsi+0x22>
    3926:	ba 95       	dec	r27
    3928:	c9 f7       	brne	.-14     	; 0x391c <__fixunssfsi+0x12>
    392a:	12 c0       	rjmp	.+36     	; 0x3950 <__fixunssfsi+0x46>
    392c:	b1 30       	cpi	r27, 0x01	; 1
    392e:	81 f0       	breq	.+32     	; 0x3950 <__fixunssfsi+0x46>
    3930:	3a d0       	rcall	.+116    	; 0x39a6 <__fp_zero>
    3932:	b1 e0       	ldi	r27, 0x01	; 1
    3934:	08 95       	ret
    3936:	37 c0       	rjmp	.+110    	; 0x39a6 <__fp_zero>
    3938:	67 2f       	mov	r22, r23
    393a:	78 2f       	mov	r23, r24
    393c:	88 27       	eor	r24, r24
    393e:	b8 5f       	subi	r27, 0xF8	; 248
    3940:	39 f0       	breq	.+14     	; 0x3950 <__fixunssfsi+0x46>
    3942:	b9 3f       	cpi	r27, 0xF9	; 249
    3944:	cc f3       	brlt	.-14     	; 0x3938 <__fixunssfsi+0x2e>
    3946:	86 95       	lsr	r24
    3948:	77 95       	ror	r23
    394a:	67 95       	ror	r22
    394c:	b3 95       	inc	r27
    394e:	d9 f7       	brne	.-10     	; 0x3946 <__fixunssfsi+0x3c>
    3950:	3e f4       	brtc	.+14     	; 0x3960 <__fixunssfsi+0x56>
    3952:	90 95       	com	r25
    3954:	80 95       	com	r24
    3956:	70 95       	com	r23
    3958:	61 95       	neg	r22
    395a:	7f 4f       	sbci	r23, 0xFF	; 255
    395c:	8f 4f       	sbci	r24, 0xFF	; 255
    395e:	9f 4f       	sbci	r25, 0xFF	; 255
    3960:	08 95       	ret

00003962 <__fp_split3>:
    3962:	57 fd       	sbrc	r21, 7
    3964:	90 58       	subi	r25, 0x80	; 128
    3966:	44 0f       	add	r20, r20
    3968:	55 1f       	adc	r21, r21
    396a:	59 f0       	breq	.+22     	; 0x3982 <__fp_splitA+0x10>
    396c:	5f 3f       	cpi	r21, 0xFF	; 255
    396e:	71 f0       	breq	.+28     	; 0x398c <__fp_splitA+0x1a>
    3970:	47 95       	ror	r20

00003972 <__fp_splitA>:
    3972:	88 0f       	add	r24, r24
    3974:	97 fb       	bst	r25, 7
    3976:	99 1f       	adc	r25, r25
    3978:	61 f0       	breq	.+24     	; 0x3992 <__fp_splitA+0x20>
    397a:	9f 3f       	cpi	r25, 0xFF	; 255
    397c:	79 f0       	breq	.+30     	; 0x399c <__fp_splitA+0x2a>
    397e:	87 95       	ror	r24
    3980:	08 95       	ret
    3982:	12 16       	cp	r1, r18
    3984:	13 06       	cpc	r1, r19
    3986:	14 06       	cpc	r1, r20
    3988:	55 1f       	adc	r21, r21
    398a:	f2 cf       	rjmp	.-28     	; 0x3970 <__fp_split3+0xe>
    398c:	46 95       	lsr	r20
    398e:	f1 df       	rcall	.-30     	; 0x3972 <__fp_splitA>
    3990:	08 c0       	rjmp	.+16     	; 0x39a2 <__fp_splitA+0x30>
    3992:	16 16       	cp	r1, r22
    3994:	17 06       	cpc	r1, r23
    3996:	18 06       	cpc	r1, r24
    3998:	99 1f       	adc	r25, r25
    399a:	f1 cf       	rjmp	.-30     	; 0x397e <__fp_splitA+0xc>
    399c:	86 95       	lsr	r24
    399e:	71 05       	cpc	r23, r1
    39a0:	61 05       	cpc	r22, r1
    39a2:	08 94       	sec
    39a4:	08 95       	ret

000039a6 <__fp_zero>:
    39a6:	e8 94       	clt

000039a8 <__fp_szero>:
    39a8:	bb 27       	eor	r27, r27
    39aa:	66 27       	eor	r22, r22
    39ac:	77 27       	eor	r23, r23
    39ae:	cb 01       	movw	r24, r22
    39b0:	97 f9       	bld	r25, 7
    39b2:	08 95       	ret

000039b4 <_hihTwiCallback>:
    39b4:	65 30       	cpi	r22, 0x05	; 5
    39b6:	f1 f4       	brne	.+60     	; 0x39f4 <_hihTwiCallback+0x40>
    39b8:	fa 01       	movw	r30, r20
    39ba:	80 81       	ld	r24, Z
    39bc:	8f 73       	andi	r24, 0x3F	; 63
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	98 2f       	mov	r25, r24
    39c2:	88 27       	eor	r24, r24
    39c4:	21 81       	ldd	r18, Z+1	; 0x01
    39c6:	82 2b       	or	r24, r18
    39c8:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    39cc:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    39d0:	82 81       	ldd	r24, Z+2	; 0x02
    39d2:	f0 e4       	ldi	r31, 0x40	; 64
    39d4:	8f 9f       	mul	r24, r31
    39d6:	c0 01       	movw	r24, r0
    39d8:	11 24       	eor	r1, r1
    39da:	fa 01       	movw	r30, r20
    39dc:	23 81       	ldd	r18, Z+3	; 0x03
    39de:	26 95       	lsr	r18
    39e0:	26 95       	lsr	r18
    39e2:	82 2b       	or	r24, r18
    39e4:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    39e8:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    39ec:	81 e0       	ldi	r24, 0x01	; 1
    39ee:	80 93 bb 16 	sts	0x16BB, r24	; 0x8016bb <_measuringIsReady>
    39f2:	08 95       	ret
    39f4:	64 30       	cpi	r22, 0x04	; 4
    39f6:	51 f0       	breq	.+20     	; 0x3a0c <_hihTwiCallback+0x58>
    39f8:	80 e0       	ldi	r24, 0x00	; 0
    39fa:	90 e4       	ldi	r25, 0x40	; 64
    39fc:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3a00:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3a04:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3a08:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3a0c:	08 95       	ret

00003a0e <hih8120_initialise>:
    3a0e:	0f 93       	push	r16
    3a10:	1f 93       	push	r17
    3a12:	0a ed       	ldi	r16, 0xDA	; 218
    3a14:	1c e1       	ldi	r17, 0x1C	; 28
    3a16:	20 e0       	ldi	r18, 0x00	; 0
    3a18:	34 e2       	ldi	r19, 0x24	; 36
    3a1a:	44 ef       	ldi	r20, 0xF4	; 244
    3a1c:	50 e0       	ldi	r21, 0x00	; 0
    3a1e:	60 e0       	ldi	r22, 0x00	; 0
    3a20:	87 e2       	ldi	r24, 0x27	; 39
    3a22:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <twiCreate>
    3a26:	90 93 bd 16 	sts	0x16BD, r25	; 0x8016bd <_hih8120Handler+0x1>
    3a2a:	80 93 bc 16 	sts	0x16BC, r24	; 0x8016bc <_hih8120Handler>
    3a2e:	21 e0       	ldi	r18, 0x01	; 1
    3a30:	89 2b       	or	r24, r25
    3a32:	09 f0       	breq	.+2      	; 0x3a36 <hih8120_initialise+0x28>
    3a34:	20 e0       	ldi	r18, 0x00	; 0
    3a36:	82 2f       	mov	r24, r18
    3a38:	1f 91       	pop	r17
    3a3a:	0f 91       	pop	r16
    3a3c:	08 95       	ret

00003a3e <hih8120_wakeup>:
    3a3e:	80 91 bc 16 	lds	r24, 0x16BC	; 0x8016bc <_hih8120Handler>
    3a42:	90 91 bd 16 	lds	r25, 0x16BD	; 0x8016bd <_hih8120Handler+0x1>
    3a46:	00 97       	sbiw	r24, 0x00	; 0
    3a48:	59 f0       	breq	.+22     	; 0x3a60 <hih8120_wakeup+0x22>
    3a4a:	40 e0       	ldi	r20, 0x00	; 0
    3a4c:	60 e0       	ldi	r22, 0x00	; 0
    3a4e:	70 e0       	ldi	r23, 0x00	; 0
    3a50:	0e 94 29 2a 	call	0x5452	; 0x5452 <twiTransmit>
    3a54:	84 30       	cpi	r24, 0x04	; 4
    3a56:	31 f4       	brne	.+12     	; 0x3a64 <hih8120_wakeup+0x26>
    3a58:	10 92 bb 16 	sts	0x16BB, r1	; 0x8016bb <_measuringIsReady>
    3a5c:	80 e0       	ldi	r24, 0x00	; 0
    3a5e:	08 95       	ret
    3a60:	82 e0       	ldi	r24, 0x02	; 2
    3a62:	08 95       	ret
    3a64:	83 e0       	ldi	r24, 0x03	; 3
    3a66:	08 95       	ret

00003a68 <hih8120_measure>:
    3a68:	80 91 bc 16 	lds	r24, 0x16BC	; 0x8016bc <_hih8120Handler>
    3a6c:	90 91 bd 16 	lds	r25, 0x16BD	; 0x8016bd <_hih8120Handler+0x1>
    3a70:	00 97       	sbiw	r24, 0x00	; 0
    3a72:	39 f0       	breq	.+14     	; 0x3a82 <hih8120_measure+0x1a>
    3a74:	64 e0       	ldi	r22, 0x04	; 4
    3a76:	0e 94 75 2a 	call	0x54ea	; 0x54ea <twiReceive>
    3a7a:	85 30       	cpi	r24, 0x05	; 5
    3a7c:	21 f0       	breq	.+8      	; 0x3a86 <hih8120_measure+0x1e>
    3a7e:	83 e0       	ldi	r24, 0x03	; 3
    3a80:	08 95       	ret
    3a82:	82 e0       	ldi	r24, 0x02	; 2
    3a84:	08 95       	ret
    3a86:	80 e0       	ldi	r24, 0x00	; 0
    3a88:	08 95       	ret

00003a8a <hih8120_getHumidity>:
    3a8a:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3a8e:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3a92:	80 e0       	ldi	r24, 0x00	; 0
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <__floatunsisf>
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	48 ec       	ldi	r20, 0xC8	; 200
    3aa0:	52 e4       	ldi	r21, 0x42	; 66
    3aa2:	0e 94 bc 2c 	call	0x5978	; 0x5978 <__mulsf3>
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	38 ef       	ldi	r19, 0xF8	; 248
    3aaa:	4f e7       	ldi	r20, 0x7F	; 127
    3aac:	56 e4       	ldi	r21, 0x46	; 70
    3aae:	0c 94 e8 2b 	jmp	0x57d0	; 0x57d0 <__divsf3>
    3ab2:	08 95       	ret

00003ab4 <hih8120_getHumidityPercent_x10>:
    3ab4:	ea df       	rcall	.-44     	; 0x3a8a <hih8120_getHumidity>
    3ab6:	20 e0       	ldi	r18, 0x00	; 0
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	40 e2       	ldi	r20, 0x20	; 32
    3abc:	51 e4       	ldi	r21, 0x41	; 65
    3abe:	0e 94 bc 2c 	call	0x5978	; 0x5978 <__mulsf3>
    3ac2:	23 df       	rcall	.-442    	; 0x390a <__fixunssfsi>
    3ac4:	cb 01       	movw	r24, r22
    3ac6:	08 95       	ret

00003ac8 <hih8120_getTemperature>:
    3ac8:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3acc:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3ad0:	80 e0       	ldi	r24, 0x00	; 0
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <__floatunsisf>
    3ad8:	20 e0       	ldi	r18, 0x00	; 0
    3ada:	30 e0       	ldi	r19, 0x00	; 0
    3adc:	45 e2       	ldi	r20, 0x25	; 37
    3ade:	53 e4       	ldi	r21, 0x43	; 67
    3ae0:	0e 94 bc 2c 	call	0x5978	; 0x5978 <__mulsf3>
    3ae4:	20 e0       	ldi	r18, 0x00	; 0
    3ae6:	38 ef       	ldi	r19, 0xF8	; 248
    3ae8:	4f e7       	ldi	r20, 0x7F	; 127
    3aea:	56 e4       	ldi	r21, 0x46	; 70
    3aec:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <__divsf3>
    3af0:	20 e0       	ldi	r18, 0x00	; 0
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	40 e2       	ldi	r20, 0x20	; 32
    3af6:	52 e4       	ldi	r21, 0x42	; 66
    3af8:	0c 94 81 2b 	jmp	0x5702	; 0x5702 <__subsf3>
    3afc:	08 95       	ret

00003afe <hih8120_getTemperature_x10>:
    3afe:	e4 df       	rcall	.-56     	; 0x3ac8 <hih8120_getTemperature>
    3b00:	20 e0       	ldi	r18, 0x00	; 0
    3b02:	30 e0       	ldi	r19, 0x00	; 0
    3b04:	40 e2       	ldi	r20, 0x20	; 32
    3b06:	51 e4       	ldi	r21, 0x41	; 65
    3b08:	0e 94 bc 2c 	call	0x5978	; 0x5978 <__mulsf3>
    3b0c:	f9 de       	rcall	.-526    	; 0x3900 <__fixsfsi>
    3b0e:	cb 01       	movw	r24, r22
    3b10:	08 95       	ret

00003b12 <_serialCallBack>:
    3b12:	0f 93       	push	r16
    3b14:	1f 93       	push	r17
    3b16:	cf 93       	push	r28
    3b18:	df 93       	push	r29
    3b1a:	1f 92       	push	r1
    3b1c:	1f 92       	push	r1
    3b1e:	cd b7       	in	r28, 0x3d	; 61
    3b20:	de b7       	in	r29, 0x3e	; 62
    3b22:	8c 01       	movw	r16, r24
    3b24:	19 82       	std	Y+1, r1	; 0x01
    3b26:	2d c0       	rjmp	.+90     	; 0x3b82 <_serialCallBack+0x70>
    3b28:	e0 91 f5 16 	lds	r30, 0x16F5	; 0x8016f5 <rec_buf_inp.2878>
    3b2c:	ec 32       	cpi	r30, 0x2C	; 44
    3b2e:	50 f4       	brcc	.+20     	; 0x3b44 <_serialCallBack+0x32>
    3b30:	81 e0       	ldi	r24, 0x01	; 1
    3b32:	8e 0f       	add	r24, r30
    3b34:	80 93 f5 16 	sts	0x16F5, r24	; 0x8016f5 <rec_buf_inp.2878>
    3b38:	f0 e0       	ldi	r31, 0x00	; 0
    3b3a:	e9 5d       	subi	r30, 0xD9	; 217
    3b3c:	f8 4e       	sbci	r31, 0xE8	; 232
    3b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b40:	80 83       	st	Z, r24
    3b42:	02 c0       	rjmp	.+4      	; 0x3b48 <_serialCallBack+0x36>
    3b44:	10 92 f5 16 	sts	0x16F5, r1	; 0x8016f5 <rec_buf_inp.2878>
    3b48:	8a 81       	ldd	r24, Y+2	; 0x02
    3b4a:	8a 30       	cpi	r24, 0x0A	; 10
    3b4c:	d1 f4       	brne	.+52     	; 0x3b82 <_serialCallBack+0x70>
    3b4e:	40 91 f5 16 	lds	r20, 0x16F5	; 0x8016f5 <rec_buf_inp.2878>
    3b52:	50 e0       	ldi	r21, 0x00	; 0
    3b54:	fa 01       	movw	r30, r20
    3b56:	eb 5d       	subi	r30, 0xDB	; 219
    3b58:	f8 4e       	sbci	r31, 0xE8	; 232
    3b5a:	10 82       	st	Z, r1
    3b5c:	41 50       	subi	r20, 0x01	; 1
    3b5e:	51 09       	sbc	r21, r1
    3b60:	9e 01       	movw	r18, r28
    3b62:	2f 5f       	subi	r18, 0xFF	; 255
    3b64:	3f 4f       	sbci	r19, 0xFF	; 255
    3b66:	67 e2       	ldi	r22, 0x27	; 39
    3b68:	77 e1       	ldi	r23, 0x17	; 23
    3b6a:	80 91 f8 16 	lds	r24, 0x16F8	; 0x8016f8 <_serialReplyBufferHandle>
    3b6e:	90 91 f9 16 	lds	r25, 0x16F9	; 0x8016f9 <_serialReplyBufferHandle+0x1>
    3b72:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <xStreamBufferSendFromISR>
    3b76:	89 81       	ldd	r24, Y+1	; 0x01
    3b78:	81 11       	cpse	r24, r1
    3b7a:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    3b7e:	10 92 f5 16 	sts	0x16F5, r1	; 0x8016f5 <rec_buf_inp.2878>
    3b82:	be 01       	movw	r22, r28
    3b84:	6e 5f       	subi	r22, 0xFE	; 254
    3b86:	7f 4f       	sbci	r23, 0xFF	; 255
    3b88:	c8 01       	movw	r24, r16
    3b8a:	15 d6       	rcall	.+3114   	; 0x47b6 <serial_getByte>
    3b8c:	88 23       	and	r24, r24
    3b8e:	61 f2       	breq	.-104    	; 0x3b28 <_serialCallBack+0x16>
    3b90:	0f 90       	pop	r0
    3b92:	0f 90       	pop	r0
    3b94:	df 91       	pop	r29
    3b96:	cf 91       	pop	r28
    3b98:	1f 91       	pop	r17
    3b9a:	0f 91       	pop	r16
    3b9c:	08 95       	ret

00003b9e <_uploadMessage>:
    3b9e:	0f 93       	push	r16
    3ba0:	1f 93       	push	r17
    3ba2:	cf 93       	push	r28
    3ba4:	df 93       	push	r29
    3ba6:	8c 01       	movw	r16, r24
    3ba8:	eb 01       	movw	r28, r22
    3baa:	80 91 f8 16 	lds	r24, 0x16F8	; 0x8016f8 <_serialReplyBufferHandle>
    3bae:	90 91 f9 16 	lds	r25, 0x16F9	; 0x8016f9 <_serialReplyBufferHandle+0x1>
    3bb2:	0e 94 e5 08 	call	0x11ca	; 0x11ca <xStreamBufferReset>
    3bb6:	b8 01       	movw	r22, r16
    3bb8:	8e eb       	ldi	r24, 0xBE	; 190
    3bba:	96 e1       	ldi	r25, 0x16	; 22
    3bbc:	0e 94 d5 2e 	call	0x5daa	; 0x5daa <strcpy>
    3bc0:	20 97       	sbiw	r28, 0x00	; 0
    3bc2:	79 f0       	breq	.+30     	; 0x3be2 <_uploadMessage+0x44>
    3bc4:	ee eb       	ldi	r30, 0xBE	; 190
    3bc6:	f6 e1       	ldi	r31, 0x16	; 22
    3bc8:	01 90       	ld	r0, Z+
    3bca:	00 20       	and	r0, r0
    3bcc:	e9 f7       	brne	.-6      	; 0x3bc8 <_uploadMessage+0x2a>
    3bce:	31 97       	sbiw	r30, 0x01	; 1
    3bd0:	80 e2       	ldi	r24, 0x20	; 32
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	91 83       	std	Z+1, r25	; 0x01
    3bd6:	80 83       	st	Z, r24
    3bd8:	be 01       	movw	r22, r28
    3bda:	8e eb       	ldi	r24, 0xBE	; 190
    3bdc:	96 e1       	ldi	r25, 0x16	; 22
    3bde:	0e 94 ca 2e 	call	0x5d94	; 0x5d94 <strcat>
    3be2:	ee eb       	ldi	r30, 0xBE	; 190
    3be4:	f6 e1       	ldi	r31, 0x16	; 22
    3be6:	df 01       	movw	r26, r30
    3be8:	0d 90       	ld	r0, X+
    3bea:	00 20       	and	r0, r0
    3bec:	e9 f7       	brne	.-6      	; 0x3be8 <_uploadMessage+0x4a>
    3bee:	11 97       	sbiw	r26, 0x01	; 1
    3bf0:	8d e0       	ldi	r24, 0x0D	; 13
    3bf2:	9a e0       	ldi	r25, 0x0A	; 10
    3bf4:	11 96       	adiw	r26, 0x01	; 1
    3bf6:	9c 93       	st	X, r25
    3bf8:	8e 93       	st	-X, r24
    3bfa:	12 96       	adiw	r26, 0x02	; 2
    3bfc:	1c 92       	st	X, r1
    3bfe:	01 90       	ld	r0, Z+
    3c00:	00 20       	and	r0, r0
    3c02:	e9 f7       	brne	.-6      	; 0x3bfe <_uploadMessage+0x60>
    3c04:	31 97       	sbiw	r30, 0x01	; 1
    3c06:	ee 5b       	subi	r30, 0xBE	; 190
    3c08:	f6 41       	sbci	r31, 0x16	; 22
    3c0a:	ae 2f       	mov	r26, r30
    3c0c:	8e eb       	ldi	r24, 0xBE	; 190
    3c0e:	96 e1       	ldi	r25, 0x16	; 22
    3c10:	ac 01       	movw	r20, r24
    3c12:	6a 2f       	mov	r22, r26
    3c14:	80 91 fa 16 	lds	r24, 0x16FA	; 0x8016fa <_rn2483_serial>
    3c18:	90 91 fb 16 	lds	r25, 0x16FB	; 0x8016fb <_rn2483_serial+0x1>
    3c1c:	77 d5       	rcall	.+2798   	; 0x470c <serial_sendBytes>
    3c1e:	81 11       	cpse	r24, r1
    3c20:	11 c0       	rjmp	.+34     	; 0x3c44 <_uploadMessage+0xa6>
    3c22:	08 e2       	ldi	r16, 0x28	; 40
    3c24:	15 e0       	ldi	r17, 0x05	; 5
    3c26:	20 e0       	ldi	r18, 0x00	; 0
    3c28:	30 e0       	ldi	r19, 0x00	; 0
    3c2a:	4d e2       	ldi	r20, 0x2D	; 45
    3c2c:	50 e0       	ldi	r21, 0x00	; 0
    3c2e:	61 e8       	ldi	r22, 0x81	; 129
    3c30:	77 e1       	ldi	r23, 0x17	; 23
    3c32:	80 91 f8 16 	lds	r24, 0x16F8	; 0x8016f8 <_serialReplyBufferHandle>
    3c36:	90 91 f9 16 	lds	r25, 0x16F9	; 0x8016f9 <_serialReplyBufferHandle+0x1>
    3c3a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <xStreamBufferReceive>
    3c3e:	81 e8       	ldi	r24, 0x81	; 129
    3c40:	97 e1       	ldi	r25, 0x17	; 23
    3c42:	02 c0       	rjmp	.+4      	; 0x3c48 <_uploadMessage+0xaa>
    3c44:	80 e0       	ldi	r24, 0x00	; 0
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	df 91       	pop	r29
    3c4a:	cf 91       	pop	r28
    3c4c:	1f 91       	pop	r17
    3c4e:	0f 91       	pop	r16
    3c50:	08 95       	ret

00003c52 <_reply2ReturnCode>:
    3c52:	2f 92       	push	r2
    3c54:	3f 92       	push	r3
    3c56:	4f 92       	push	r4
    3c58:	5f 92       	push	r5
    3c5a:	6f 92       	push	r6
    3c5c:	7f 92       	push	r7
    3c5e:	8f 92       	push	r8
    3c60:	9f 92       	push	r9
    3c62:	af 92       	push	r10
    3c64:	bf 92       	push	r11
    3c66:	cf 92       	push	r12
    3c68:	df 92       	push	r13
    3c6a:	ef 92       	push	r14
    3c6c:	ff 92       	push	r15
    3c6e:	0f 93       	push	r16
    3c70:	1f 93       	push	r17
    3c72:	cf 93       	push	r28
    3c74:	df 93       	push	r29
    3c76:	5c 01       	movw	r10, r24
    3c78:	fc 01       	movw	r30, r24
    3c7a:	01 90       	ld	r0, Z+
    3c7c:	00 20       	and	r0, r0
    3c7e:	e9 f7       	brne	.-6      	; 0x3c7a <_reply2ReturnCode+0x28>
    3c80:	31 97       	sbiw	r30, 0x01	; 1
    3c82:	6f 01       	movw	r12, r30
    3c84:	c8 1a       	sub	r12, r24
    3c86:	d9 0a       	sbc	r13, r25
    3c88:	5c 2c       	mov	r5, r12
    3c8a:	0f 2e       	mov	r0, r31
    3c8c:	fa ec       	ldi	r31, 0xCA	; 202
    3c8e:	8f 2e       	mov	r8, r31
    3c90:	f7 e0       	ldi	r31, 0x07	; 7
    3c92:	9f 2e       	mov	r9, r31
    3c94:	f0 2d       	mov	r31, r0
    3c96:	e1 2c       	mov	r14, r1
    3c98:	f1 2c       	mov	r15, r1
    3c9a:	4c 2c       	mov	r4, r12
    3c9c:	37 01       	movw	r6, r14
    3c9e:	f4 01       	movw	r30, r8
    3ca0:	01 81       	ldd	r16, Z+1	; 0x01
    3ca2:	12 81       	ldd	r17, Z+2	; 0x02
    3ca4:	e8 01       	movw	r28, r16
    3ca6:	09 90       	ld	r0, Y+
    3ca8:	00 20       	and	r0, r0
    3caa:	e9 f7       	brne	.-6      	; 0x3ca6 <_reply2ReturnCode+0x54>
    3cac:	21 97       	sbiw	r28, 0x01	; 1
    3cae:	c0 1b       	sub	r28, r16
    3cb0:	d1 0b       	sbc	r29, r17
    3cb2:	3c 2e       	mov	r3, r28
    3cb4:	f9 e0       	ldi	r31, 0x09	; 9
    3cb6:	cf 16       	cp	r12, r31
    3cb8:	d1 04       	cpc	r13, r1
    3cba:	58 f0       	brcs	.+22     	; 0x3cd2 <_reply2ReturnCode+0x80>
    3cbc:	f4 01       	movw	r30, r8
    3cbe:	20 80       	ld	r2, Z
    3cc0:	fe e0       	ldi	r31, 0x0E	; 14
    3cc2:	2f 12       	cpse	r2, r31
    3cc4:	06 c0       	rjmp	.+12     	; 0x3cd2 <_reply2ReturnCode+0x80>
    3cc6:	b8 01       	movw	r22, r16
    3cc8:	c5 01       	movw	r24, r10
    3cca:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <strcasestr>
    3cce:	89 2b       	or	r24, r25
    3cd0:	09 f5       	brne	.+66     	; 0x3d14 <_reply2ReturnCode+0xc2>
    3cd2:	44 2d       	mov	r20, r4
    3cd4:	35 14       	cp	r3, r5
    3cd6:	08 f4       	brcc	.+2      	; 0x3cda <_reply2ReturnCode+0x88>
    3cd8:	4c 2f       	mov	r20, r28
    3cda:	50 e0       	ldi	r21, 0x00	; 0
    3cdc:	b8 01       	movw	r22, r16
    3cde:	c5 01       	movw	r24, r10
    3ce0:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <strncasecmp>
    3ce4:	89 2b       	or	r24, r25
    3ce6:	49 f4       	brne	.+18     	; 0x3cfa <_reply2ReturnCode+0xa8>
    3ce8:	f3 01       	movw	r30, r6
    3cea:	ee 0f       	add	r30, r30
    3cec:	ff 1f       	adc	r31, r31
    3cee:	e6 0d       	add	r30, r6
    3cf0:	f7 1d       	adc	r31, r7
    3cf2:	e6 53       	subi	r30, 0x36	; 54
    3cf4:	f8 4f       	sbci	r31, 0xF8	; 248
    3cf6:	20 80       	ld	r2, Z
    3cf8:	0d c0       	rjmp	.+26     	; 0x3d14 <_reply2ReturnCode+0xc2>
    3cfa:	8f ef       	ldi	r24, 0xFF	; 255
    3cfc:	e8 1a       	sub	r14, r24
    3cfe:	f8 0a       	sbc	r15, r24
    3d00:	e3 e0       	ldi	r30, 0x03	; 3
    3d02:	8e 0e       	add	r8, r30
    3d04:	91 1c       	adc	r9, r1
    3d06:	f1 e1       	ldi	r31, 0x11	; 17
    3d08:	ef 16       	cp	r14, r31
    3d0a:	f1 04       	cpc	r15, r1
    3d0c:	39 f6       	brne	.-114    	; 0x3c9c <_reply2ReturnCode+0x4a>
    3d0e:	68 94       	set
    3d10:	22 24       	eor	r2, r2
    3d12:	24 f8       	bld	r2, 4
    3d14:	82 2d       	mov	r24, r2
    3d16:	df 91       	pop	r29
    3d18:	cf 91       	pop	r28
    3d1a:	1f 91       	pop	r17
    3d1c:	0f 91       	pop	r16
    3d1e:	ff 90       	pop	r15
    3d20:	ef 90       	pop	r14
    3d22:	df 90       	pop	r13
    3d24:	cf 90       	pop	r12
    3d26:	bf 90       	pop	r11
    3d28:	af 90       	pop	r10
    3d2a:	9f 90       	pop	r9
    3d2c:	8f 90       	pop	r8
    3d2e:	7f 90       	pop	r7
    3d30:	6f 90       	pop	r6
    3d32:	5f 90       	pop	r5
    3d34:	4f 90       	pop	r4
    3d36:	3f 90       	pop	r3
    3d38:	2f 90       	pop	r2
    3d3a:	08 95       	ret

00003d3c <_uploadMessageRc>:
    3d3c:	30 df       	rcall	.-416    	; 0x3b9e <_uploadMessage>
    3d3e:	89 cf       	rjmp	.-238    	; 0x3c52 <_reply2ReturnCode>
    3d40:	08 95       	ret

00003d42 <lora_driver_flushBuffers>:
    3d42:	80 91 f8 16 	lds	r24, 0x16F8	; 0x8016f8 <_serialReplyBufferHandle>
    3d46:	90 91 f9 16 	lds	r25, 0x16F9	; 0x8016f9 <_serialReplyBufferHandle+0x1>
    3d4a:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <xStreamBufferReset>
    3d4e:	08 95       	ret

00003d50 <lora_driver_initialise>:
    3d50:	8f 92       	push	r8
    3d52:	9f 92       	push	r9
    3d54:	af 92       	push	r10
    3d56:	cf 92       	push	r12
    3d58:	ef 92       	push	r14
    3d5a:	0f 93       	push	r16
    3d5c:	1f 93       	push	r17
    3d5e:	cf 93       	push	r28
    3d60:	c8 2f       	mov	r28, r24
    3d62:	8b 01       	movw	r16, r22
    3d64:	41 e0       	ldi	r20, 0x01	; 1
    3d66:	60 e0       	ldi	r22, 0x00	; 0
    3d68:	70 e0       	ldi	r23, 0x00	; 0
    3d6a:	88 ec       	ldi	r24, 0xC8	; 200
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	0e 94 b3 08 	call	0x1166	; 0x1166 <xStreamBufferGenericCreate>
    3d72:	90 93 f9 16 	sts	0x16F9, r25	; 0x8016f9 <_serialReplyBufferHandle+0x1>
    3d76:	80 93 f8 16 	sts	0x16F8, r24	; 0x8016f8 <_serialReplyBufferHandle>
    3d7a:	10 93 f7 16 	sts	0x16F7, r17	; 0x8016f7 <_downlinkMessageBuffer+0x1>
    3d7e:	00 93 f6 16 	sts	0x16F6, r16	; 0x8016f6 <_downlinkMessageBuffer>
    3d82:	0f 2e       	mov	r0, r31
    3d84:	f9 e8       	ldi	r31, 0x89	; 137
    3d86:	8f 2e       	mov	r8, r31
    3d88:	fd e1       	ldi	r31, 0x1D	; 29
    3d8a:	9f 2e       	mov	r9, r31
    3d8c:	f0 2d       	mov	r31, r0
    3d8e:	68 94       	set
    3d90:	aa 24       	eor	r10, r10
    3d92:	a6 f8       	bld	r10, 6
    3d94:	68 94       	set
    3d96:	cc 24       	eor	r12, r12
    3d98:	c6 f8       	bld	r12, 6
    3d9a:	e1 2c       	mov	r14, r1
    3d9c:	00 e0       	ldi	r16, 0x00	; 0
    3d9e:	23 e0       	ldi	r18, 0x03	; 3
    3da0:	40 e0       	ldi	r20, 0x00	; 0
    3da2:	51 ee       	ldi	r21, 0xE1	; 225
    3da4:	60 e0       	ldi	r22, 0x00	; 0
    3da6:	70 e0       	ldi	r23, 0x00	; 0
    3da8:	8c 2f       	mov	r24, r28
    3daa:	de d3       	rcall	.+1980   	; 0x4568 <serial_create>
    3dac:	90 93 fb 16 	sts	0x16FB, r25	; 0x8016fb <_rn2483_serial+0x1>
    3db0:	80 93 fa 16 	sts	0x16FA, r24	; 0x8016fa <_rn2483_serial>
    3db4:	e7 e0       	ldi	r30, 0x07	; 7
    3db6:	f1 e0       	ldi	r31, 0x01	; 1
    3db8:	80 81       	ld	r24, Z
    3dba:	80 61       	ori	r24, 0x10	; 16
    3dbc:	80 83       	st	Z, r24
    3dbe:	cf 91       	pop	r28
    3dc0:	1f 91       	pop	r17
    3dc2:	0f 91       	pop	r16
    3dc4:	ef 90       	pop	r14
    3dc6:	cf 90       	pop	r12
    3dc8:	af 90       	pop	r10
    3dca:	9f 90       	pop	r9
    3dcc:	8f 90       	pop	r8
    3dce:	08 95       	ret

00003dd0 <lora_driver_resetRn2483>:
    3dd0:	88 23       	and	r24, r24
    3dd2:	31 f0       	breq	.+12     	; 0x3de0 <lora_driver_resetRn2483+0x10>
    3dd4:	e8 e0       	ldi	r30, 0x08	; 8
    3dd6:	f1 e0       	ldi	r31, 0x01	; 1
    3dd8:	80 81       	ld	r24, Z
    3dda:	8f 7e       	andi	r24, 0xEF	; 239
    3ddc:	80 83       	st	Z, r24
    3dde:	08 95       	ret
    3de0:	e8 e0       	ldi	r30, 0x08	; 8
    3de2:	f1 e0       	ldi	r31, 0x01	; 1
    3de4:	80 81       	ld	r24, Z
    3de6:	80 61       	ori	r24, 0x10	; 16
    3de8:	80 83       	st	Z, r24
    3dea:	08 95       	ret

00003dec <lora_driver_rn2483FactoryReset>:
    3dec:	60 e0       	ldi	r22, 0x00	; 0
    3dee:	70 e0       	ldi	r23, 0x00	; 0
    3df0:	80 e5       	ldi	r24, 0x50	; 80
    3df2:	95 e0       	ldi	r25, 0x05	; 5
    3df4:	d4 de       	rcall	.-600    	; 0x3b9e <_uploadMessage>
    3df6:	e1 e8       	ldi	r30, 0x81	; 129
    3df8:	f7 e1       	ldi	r31, 0x17	; 23
    3dfa:	01 90       	ld	r0, Z+
    3dfc:	00 20       	and	r0, r0
    3dfe:	e9 f7       	brne	.-6      	; 0x3dfa <lora_driver_rn2483FactoryReset+0xe>
    3e00:	31 97       	sbiw	r30, 0x01	; 1
    3e02:	e1 58       	subi	r30, 0x81	; 129
    3e04:	f7 41       	sbci	r31, 0x17	; 23
    3e06:	81 e0       	ldi	r24, 0x01	; 1
    3e08:	75 97       	sbiw	r30, 0x15	; 21
    3e0a:	08 f0       	brcs	.+2      	; 0x3e0e <lora_driver_rn2483FactoryReset+0x22>
    3e0c:	80 e0       	ldi	r24, 0x00	; 0
    3e0e:	08 95       	ret

00003e10 <lora_driver_getRn2483Hweui>:
    3e10:	cf 93       	push	r28
    3e12:	df 93       	push	r29
    3e14:	ec 01       	movw	r28, r24
    3e16:	60 e0       	ldi	r22, 0x00	; 0
    3e18:	70 e0       	ldi	r23, 0x00	; 0
    3e1a:	81 e6       	ldi	r24, 0x61	; 97
    3e1c:	95 e0       	ldi	r25, 0x05	; 5
    3e1e:	bf de       	rcall	.-642    	; 0x3b9e <_uploadMessage>
    3e20:	e1 e8       	ldi	r30, 0x81	; 129
    3e22:	f7 e1       	ldi	r31, 0x17	; 23
    3e24:	01 90       	ld	r0, Z+
    3e26:	00 20       	and	r0, r0
    3e28:	e9 f7       	brne	.-6      	; 0x3e24 <lora_driver_getRn2483Hweui+0x14>
    3e2a:	e2 59       	subi	r30, 0x92	; 146
    3e2c:	f7 41       	sbci	r31, 0x17	; 23
    3e2e:	39 f4       	brne	.+14     	; 0x3e3e <lora_driver_getRn2483Hweui+0x2e>
    3e30:	61 e8       	ldi	r22, 0x81	; 129
    3e32:	77 e1       	ldi	r23, 0x17	; 23
    3e34:	ce 01       	movw	r24, r28
    3e36:	0e 94 d5 2e 	call	0x5daa	; 0x5daa <strcpy>
    3e3a:	80 e0       	ldi	r24, 0x00	; 0
    3e3c:	02 c0       	rjmp	.+4      	; 0x3e42 <lora_driver_getRn2483Hweui+0x32>
    3e3e:	18 82       	st	Y, r1
    3e40:	81 e0       	ldi	r24, 0x01	; 1
    3e42:	df 91       	pop	r29
    3e44:	cf 91       	pop	r28
    3e46:	08 95       	ret

00003e48 <lora_driver_setDeviceIdentifier>:
    3e48:	fc 01       	movw	r30, r24
    3e4a:	01 90       	ld	r0, Z+
    3e4c:	00 20       	and	r0, r0
    3e4e:	e9 f7       	brne	.-6      	; 0x3e4a <lora_driver_setDeviceIdentifier+0x2>
    3e50:	9f 01       	movw	r18, r30
    3e52:	21 51       	subi	r18, 0x11	; 17
    3e54:	31 09       	sbc	r19, r1
    3e56:	28 17       	cp	r18, r24
    3e58:	39 07       	cpc	r19, r25
    3e5a:	29 f4       	brne	.+10     	; 0x3e66 <lora_driver_setDeviceIdentifier+0x1e>
    3e5c:	bc 01       	movw	r22, r24
    3e5e:	8f e8       	ldi	r24, 0x8F	; 143
    3e60:	95 e0       	ldi	r25, 0x05	; 5
    3e62:	6c cf       	rjmp	.-296    	; 0x3d3c <_uploadMessageRc>
    3e64:	08 95       	ret
    3e66:	89 e0       	ldi	r24, 0x09	; 9
    3e68:	08 95       	ret

00003e6a <lora_driver_setApplicationIdentifier>:
    3e6a:	fc 01       	movw	r30, r24
    3e6c:	01 90       	ld	r0, Z+
    3e6e:	00 20       	and	r0, r0
    3e70:	e9 f7       	brne	.-6      	; 0x3e6c <lora_driver_setApplicationIdentifier+0x2>
    3e72:	9f 01       	movw	r18, r30
    3e74:	21 51       	subi	r18, 0x11	; 17
    3e76:	31 09       	sbc	r19, r1
    3e78:	28 17       	cp	r18, r24
    3e7a:	39 07       	cpc	r19, r25
    3e7c:	29 f4       	brne	.+10     	; 0x3e88 <lora_driver_setApplicationIdentifier+0x1e>
    3e7e:	bc 01       	movw	r22, r24
    3e80:	8e e9       	ldi	r24, 0x9E	; 158
    3e82:	95 e0       	ldi	r25, 0x05	; 5
    3e84:	5b cf       	rjmp	.-330    	; 0x3d3c <_uploadMessageRc>
    3e86:	08 95       	ret
    3e88:	89 e0       	ldi	r24, 0x09	; 9
    3e8a:	08 95       	ret

00003e8c <lora_driver_setApplicationKey>:
    3e8c:	fc 01       	movw	r30, r24
    3e8e:	01 90       	ld	r0, Z+
    3e90:	00 20       	and	r0, r0
    3e92:	e9 f7       	brne	.-6      	; 0x3e8e <lora_driver_setApplicationKey+0x2>
    3e94:	9f 01       	movw	r18, r30
    3e96:	21 52       	subi	r18, 0x21	; 33
    3e98:	31 09       	sbc	r19, r1
    3e9a:	28 17       	cp	r18, r24
    3e9c:	39 07       	cpc	r19, r25
    3e9e:	29 f4       	brne	.+10     	; 0x3eaa <lora_driver_setApplicationKey+0x1e>
    3ea0:	bc 01       	movw	r22, r24
    3ea2:	8d ea       	ldi	r24, 0xAD	; 173
    3ea4:	95 e0       	ldi	r25, 0x05	; 5
    3ea6:	4a cf       	rjmp	.-364    	; 0x3d3c <_uploadMessageRc>
    3ea8:	08 95       	ret
    3eaa:	89 e0       	ldi	r24, 0x09	; 9
    3eac:	08 95       	ret

00003eae <lora_driver_saveMac>:
    3eae:	60 e0       	ldi	r22, 0x00	; 0
    3eb0:	70 e0       	ldi	r23, 0x00	; 0
    3eb2:	8c ee       	ldi	r24, 0xEC	; 236
    3eb4:	95 e0       	ldi	r25, 0x05	; 5
    3eb6:	42 cf       	rjmp	.-380    	; 0x3d3c <_uploadMessageRc>
    3eb8:	08 95       	ret

00003eba <lora_driver_join>:
    3eba:	0f 93       	push	r16
    3ebc:	1f 93       	push	r17
    3ebe:	e8 2f       	mov	r30, r24
    3ec0:	f0 e0       	ldi	r31, 0x00	; 0
    3ec2:	ee 0f       	add	r30, r30
    3ec4:	ff 1f       	adc	r31, r31
    3ec6:	ea 53       	subi	r30, 0x3A	; 58
    3ec8:	f8 4f       	sbci	r31, 0xF8	; 248
    3eca:	60 81       	ld	r22, Z
    3ecc:	71 81       	ldd	r23, Z+1	; 0x01
    3ece:	85 ef       	ldi	r24, 0xF5	; 245
    3ed0:	95 e0       	ldi	r25, 0x05	; 5
    3ed2:	34 df       	rcall	.-408    	; 0x3d3c <_uploadMessageRc>
    3ed4:	81 11       	cpse	r24, r1
    3ed6:	14 c0       	rjmp	.+40     	; 0x3f00 <lora_driver_join+0x46>
    3ed8:	08 e2       	ldi	r16, 0x28	; 40
    3eda:	15 e0       	ldi	r17, 0x05	; 5
    3edc:	20 e0       	ldi	r18, 0x00	; 0
    3ede:	30 e0       	ldi	r19, 0x00	; 0
    3ee0:	4d e2       	ldi	r20, 0x2D	; 45
    3ee2:	50 e0       	ldi	r21, 0x00	; 0
    3ee4:	61 e8       	ldi	r22, 0x81	; 129
    3ee6:	77 e1       	ldi	r23, 0x17	; 23
    3ee8:	80 91 f8 16 	lds	r24, 0x16F8	; 0x8016f8 <_serialReplyBufferHandle>
    3eec:	90 91 f9 16 	lds	r25, 0x16F9	; 0x8016f9 <_serialReplyBufferHandle+0x1>
    3ef0:	0e 94 1c 0a 	call	0x1438	; 0x1438 <xStreamBufferReceive>
    3ef4:	88 23       	and	r24, r24
    3ef6:	21 f0       	breq	.+8      	; 0x3f00 <lora_driver_join+0x46>
    3ef8:	81 e8       	ldi	r24, 0x81	; 129
    3efa:	97 e1       	ldi	r25, 0x17	; 23
    3efc:	aa de       	rcall	.-684    	; 0x3c52 <_reply2ReturnCode>
    3efe:	03 c0       	rjmp	.+6      	; 0x3f06 <lora_driver_join+0x4c>
    3f00:	81 e8       	ldi	r24, 0x81	; 129
    3f02:	97 e1       	ldi	r25, 0x17	; 23
    3f04:	a6 de       	rcall	.-692    	; 0x3c52 <_reply2ReturnCode>
    3f06:	1f 91       	pop	r17
    3f08:	0f 91       	pop	r16
    3f0a:	08 95       	ret

00003f0c <lora_driver_sendUploadMessage>:
    3f0c:	0f 93       	push	r16
    3f0e:	1f 93       	push	r17
    3f10:	cf 93       	push	r28
    3f12:	df 93       	push	r29
    3f14:	1f 92       	push	r1
    3f16:	cd b7       	in	r28, 0x3d	; 61
    3f18:	de b7       	in	r29, 0x3e	; 62
    3f1a:	db 01       	movw	r26, r22
    3f1c:	11 96       	adiw	r26, 0x01	; 1
    3f1e:	9c 91       	ld	r25, X
    3f20:	11 97       	sbiw	r26, 0x01	; 1
    3f22:	95 31       	cpi	r25, 0x15	; 21
    3f24:	08 f0       	brcs	.+2      	; 0x3f28 <lora_driver_sendUploadMessage+0x1c>
    3f26:	b4 c0       	rjmp	.+360    	; 0x4090 <lora_driver_sendUploadMessage+0x184>
    3f28:	99 23       	and	r25, r25
    3f2a:	81 f1       	breq	.+96     	; 0x3f8c <lora_driver_sendUploadMessage+0x80>
    3f2c:	60 e0       	ldi	r22, 0x00	; 0
    3f2e:	70 e0       	ldi	r23, 0x00	; 0
    3f30:	27 2f       	mov	r18, r23
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	46 2f       	mov	r20, r22
    3f36:	50 e0       	ldi	r21, 0x00	; 0
    3f38:	fd 01       	movw	r30, r26
    3f3a:	e4 0f       	add	r30, r20
    3f3c:	f5 1f       	adc	r31, r21
    3f3e:	92 81       	ldd	r25, Z+2	; 0x02
    3f40:	92 95       	swap	r25
    3f42:	9f 70       	andi	r25, 0x0F	; 15
    3f44:	9a 30       	cpi	r25, 0x0A	; 10
    3f46:	10 f0       	brcs	.+4      	; 0x3f4c <lora_driver_sendUploadMessage+0x40>
    3f48:	99 5c       	subi	r25, 0xC9	; 201
    3f4a:	01 c0       	rjmp	.+2      	; 0x3f4e <lora_driver_sendUploadMessage+0x42>
    3f4c:	90 5d       	subi	r25, 0xD0	; 208
    3f4e:	f9 01       	movw	r30, r18
    3f50:	ee 5e       	subi	r30, 0xEE	; 238
    3f52:	f8 4e       	sbci	r31, 0xE8	; 232
    3f54:	90 83       	st	Z, r25
    3f56:	2f 5f       	subi	r18, 0xFF	; 255
    3f58:	3f 4f       	sbci	r19, 0xFF	; 255
    3f5a:	fd 01       	movw	r30, r26
    3f5c:	e4 0f       	add	r30, r20
    3f5e:	f5 1f       	adc	r31, r21
    3f60:	92 81       	ldd	r25, Z+2	; 0x02
    3f62:	9f 70       	andi	r25, 0x0F	; 15
    3f64:	49 2f       	mov	r20, r25
    3f66:	50 e0       	ldi	r21, 0x00	; 0
    3f68:	4a 30       	cpi	r20, 0x0A	; 10
    3f6a:	51 05       	cpc	r21, r1
    3f6c:	14 f0       	brlt	.+4      	; 0x3f72 <lora_driver_sendUploadMessage+0x66>
    3f6e:	99 5c       	subi	r25, 0xC9	; 201
    3f70:	01 c0       	rjmp	.+2      	; 0x3f74 <lora_driver_sendUploadMessage+0x68>
    3f72:	90 5d       	subi	r25, 0xD0	; 208
    3f74:	f9 01       	movw	r30, r18
    3f76:	ee 5e       	subi	r30, 0xEE	; 238
    3f78:	f8 4e       	sbci	r31, 0xE8	; 232
    3f7a:	90 83       	st	Z, r25
    3f7c:	7e 5f       	subi	r23, 0xFE	; 254
    3f7e:	6f 5f       	subi	r22, 0xFF	; 255
    3f80:	11 96       	adiw	r26, 0x01	; 1
    3f82:	9c 91       	ld	r25, X
    3f84:	11 97       	sbiw	r26, 0x01	; 1
    3f86:	69 17       	cp	r22, r25
    3f88:	98 f2       	brcs	.-90     	; 0x3f30 <lora_driver_sendUploadMessage+0x24>
    3f8a:	01 c0       	rjmp	.+2      	; 0x3f8e <lora_driver_sendUploadMessage+0x82>
    3f8c:	70 e0       	ldi	r23, 0x00	; 0
    3f8e:	e7 2f       	mov	r30, r23
    3f90:	f0 e0       	ldi	r31, 0x00	; 0
    3f92:	ee 5e       	subi	r30, 0xEE	; 238
    3f94:	f8 4e       	sbci	r31, 0xE8	; 232
    3f96:	10 82       	st	Z, r1
    3f98:	4c 91       	ld	r20, X
    3f9a:	81 11       	cpse	r24, r1
    3f9c:	03 c0       	rjmp	.+6      	; 0x3fa4 <lora_driver_sendUploadMessage+0x98>
    3f9e:	8e ef       	ldi	r24, 0xFE	; 254
    3fa0:	95 e0       	ldi	r25, 0x05	; 5
    3fa2:	02 c0       	rjmp	.+4      	; 0x3fa8 <lora_driver_sendUploadMessage+0x9c>
    3fa4:	80 e0       	ldi	r24, 0x00	; 0
    3fa6:	96 e0       	ldi	r25, 0x06	; 6
    3fa8:	22 e1       	ldi	r18, 0x12	; 18
    3faa:	37 e1       	ldi	r19, 0x17	; 23
    3fac:	3f 93       	push	r19
    3fae:	2f 93       	push	r18
    3fb0:	1f 92       	push	r1
    3fb2:	4f 93       	push	r20
    3fb4:	9f 93       	push	r25
    3fb6:	8f 93       	push	r24
    3fb8:	84 e0       	ldi	r24, 0x04	; 4
    3fba:	96 e0       	ldi	r25, 0x06	; 6
    3fbc:	9f 93       	push	r25
    3fbe:	8f 93       	push	r24
    3fc0:	84 e5       	ldi	r24, 0x54	; 84
    3fc2:	97 e1       	ldi	r25, 0x17	; 23
    3fc4:	9f 93       	push	r25
    3fc6:	8f 93       	push	r24
    3fc8:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <sprintf>
    3fcc:	60 e0       	ldi	r22, 0x00	; 0
    3fce:	70 e0       	ldi	r23, 0x00	; 0
    3fd0:	84 e5       	ldi	r24, 0x54	; 84
    3fd2:	97 e1       	ldi	r25, 0x17	; 23
    3fd4:	b3 de       	rcall	.-666    	; 0x3d3c <_uploadMessageRc>
    3fd6:	0f b6       	in	r0, 0x3f	; 63
    3fd8:	f8 94       	cli
    3fda:	de bf       	out	0x3e, r29	; 62
    3fdc:	0f be       	out	0x3f, r0	; 63
    3fde:	cd bf       	out	0x3d, r28	; 61
    3fe0:	81 11       	cpse	r24, r1
    3fe2:	59 c0       	rjmp	.+178    	; 0x4096 <lora_driver_sendUploadMessage+0x18a>
    3fe4:	08 e2       	ldi	r16, 0x28	; 40
    3fe6:	15 e0       	ldi	r17, 0x05	; 5
    3fe8:	20 e0       	ldi	r18, 0x00	; 0
    3fea:	30 e0       	ldi	r19, 0x00	; 0
    3fec:	4d e2       	ldi	r20, 0x2D	; 45
    3fee:	50 e0       	ldi	r21, 0x00	; 0
    3ff0:	61 e8       	ldi	r22, 0x81	; 129
    3ff2:	77 e1       	ldi	r23, 0x17	; 23
    3ff4:	80 91 f8 16 	lds	r24, 0x16F8	; 0x8016f8 <_serialReplyBufferHandle>
    3ff8:	90 91 f9 16 	lds	r25, 0x16F9	; 0x8016f9 <_serialReplyBufferHandle+0x1>
    3ffc:	0e 94 1c 0a 	call	0x1438	; 0x1438 <xStreamBufferReceive>
    4000:	88 23       	and	r24, r24
    4002:	09 f4       	brne	.+2      	; 0x4006 <lora_driver_sendUploadMessage+0xfa>
    4004:	47 c0       	rjmp	.+142    	; 0x4094 <lora_driver_sendUploadMessage+0x188>
    4006:	81 e8       	ldi	r24, 0x81	; 129
    4008:	97 e1       	ldi	r25, 0x17	; 23
    400a:	23 de       	rcall	.-954    	; 0x3c52 <_reply2ReturnCode>
    400c:	8e 30       	cpi	r24, 0x0E	; 14
    400e:	09 f0       	breq	.+2      	; 0x4012 <lora_driver_sendUploadMessage+0x106>
    4010:	42 c0       	rjmp	.+132    	; 0x4096 <lora_driver_sendUploadMessage+0x18a>
    4012:	87 e0       	ldi	r24, 0x07	; 7
    4014:	89 83       	std	Y+1, r24	; 0x01
    4016:	80 91 f6 16 	lds	r24, 0x16F6	; 0x8016f6 <_downlinkMessageBuffer>
    401a:	90 91 f7 16 	lds	r25, 0x16F7	; 0x8016f7 <_downlinkMessageBuffer+0x1>
    401e:	89 2b       	or	r24, r25
    4020:	a9 f1       	breq	.+106    	; 0x408c <lora_driver_sendUploadMessage+0x180>
    4022:	be 01       	movw	r22, r28
    4024:	6f 5f       	subi	r22, 0xFF	; 255
    4026:	7f 4f       	sbci	r23, 0xFF	; 255
    4028:	81 e8       	ldi	r24, 0x81	; 129
    402a:	97 e1       	ldi	r25, 0x17	; 23
    402c:	68 d1       	rcall	.+720    	; 0x42fe <decode_port_no>
    402e:	80 93 fc 16 	sts	0x16FC, r24	; 0x8016fc <_downlinkPayload>
    4032:	e9 81       	ldd	r30, Y+1	; 0x01
    4034:	f0 e0       	ldi	r31, 0x00	; 0
    4036:	ef 57       	subi	r30, 0x7F	; 127
    4038:	f8 4e       	sbci	r31, 0xE8	; 232
    403a:	df 01       	movw	r26, r30
    403c:	0d 90       	ld	r0, X+
    403e:	00 20       	and	r0, r0
    4040:	e9 f7       	brne	.-6      	; 0x403c <lora_driver_sendUploadMessage+0x130>
    4042:	11 97       	sbiw	r26, 0x01	; 1
    4044:	ae 1b       	sub	r26, r30
    4046:	bf 0b       	sbc	r27, r31
    4048:	aa 23       	and	r26, r26
    404a:	91 f0       	breq	.+36     	; 0x4070 <lora_driver_sendUploadMessage+0x164>
    404c:	bb 27       	eor	r27, r27
    404e:	cd 01       	movw	r24, r26
    4050:	01 97       	sbiw	r24, 0x01	; 1
    4052:	9c 01       	movw	r18, r24
    4054:	12 f4       	brpl	.+4      	; 0x405a <lora_driver_sendUploadMessage+0x14e>
    4056:	2f 5f       	subi	r18, 0xFF	; 255
    4058:	3f 4f       	sbci	r19, 0xFF	; 255
    405a:	35 95       	asr	r19
    405c:	27 95       	ror	r18
    405e:	20 93 fd 16 	sts	0x16FD, r18	; 0x8016fd <_downlinkPayload+0x1>
    4062:	af 01       	movw	r20, r30
    4064:	4f 5f       	subi	r20, 0xFF	; 255
    4066:	5f 4f       	sbci	r21, 0xFF	; 255
    4068:	64 e1       	ldi	r22, 0x14	; 20
    406a:	8e ef       	ldi	r24, 0xFE	; 254
    406c:	96 e1       	ldi	r25, 0x16	; 22
    406e:	73 d1       	rcall	.+742    	; 0x4356 <decode_hexadecimal_string_bytes>
    4070:	01 e0       	ldi	r16, 0x01	; 1
    4072:	10 e0       	ldi	r17, 0x00	; 0
    4074:	20 e0       	ldi	r18, 0x00	; 0
    4076:	30 e0       	ldi	r19, 0x00	; 0
    4078:	46 e1       	ldi	r20, 0x16	; 22
    407a:	50 e0       	ldi	r21, 0x00	; 0
    407c:	6c ef       	ldi	r22, 0xFC	; 252
    407e:	76 e1       	ldi	r23, 0x16	; 22
    4080:	80 91 f6 16 	lds	r24, 0x16F6	; 0x8016f6 <_downlinkMessageBuffer>
    4084:	90 91 f7 16 	lds	r25, 0x16F7	; 0x8016f7 <_downlinkMessageBuffer+0x1>
    4088:	0e 94 15 09 	call	0x122a	; 0x122a <xStreamBufferSend>
    408c:	8e e0       	ldi	r24, 0x0E	; 14
    408e:	03 c0       	rjmp	.+6      	; 0x4096 <lora_driver_sendUploadMessage+0x18a>
    4090:	84 e1       	ldi	r24, 0x14	; 20
    4092:	01 c0       	rjmp	.+2      	; 0x4096 <lora_driver_sendUploadMessage+0x18a>
    4094:	80 e0       	ldi	r24, 0x00	; 0
    4096:	0f 90       	pop	r0
    4098:	df 91       	pop	r29
    409a:	cf 91       	pop	r28
    409c:	1f 91       	pop	r17
    409e:	0f 91       	pop	r16
    40a0:	08 95       	ret

000040a2 <lora_driver_setAdaptiveDataRate>:
    40a2:	81 30       	cpi	r24, 0x01	; 1
    40a4:	19 f0       	breq	.+6      	; 0x40ac <lora_driver_setAdaptiveDataRate+0xa>
    40a6:	64 e1       	ldi	r22, 0x14	; 20
    40a8:	76 e0       	ldi	r23, 0x06	; 6
    40aa:	02 c0       	rjmp	.+4      	; 0x40b0 <lora_driver_setAdaptiveDataRate+0xe>
    40ac:	6d ee       	ldi	r22, 0xED	; 237
    40ae:	76 e0       	ldi	r23, 0x06	; 6
    40b0:	88 e1       	ldi	r24, 0x18	; 24
    40b2:	96 e0       	ldi	r25, 0x06	; 6
    40b4:	43 ce       	rjmp	.-890    	; 0x3d3c <_uploadMessageRc>
    40b6:	08 95       	ret

000040b8 <lora_driver_setReceiveDelay>:
    40b8:	9f 93       	push	r25
    40ba:	8f 93       	push	r24
    40bc:	89 e4       	ldi	r24, 0x49	; 73
    40be:	96 e0       	ldi	r25, 0x06	; 6
    40c0:	9f 93       	push	r25
    40c2:	8f 93       	push	r24
    40c4:	84 e5       	ldi	r24, 0x54	; 84
    40c6:	97 e1       	ldi	r25, 0x17	; 23
    40c8:	9f 93       	push	r25
    40ca:	8f 93       	push	r24
    40cc:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <sprintf>
    40d0:	60 e0       	ldi	r22, 0x00	; 0
    40d2:	70 e0       	ldi	r23, 0x00	; 0
    40d4:	84 e5       	ldi	r24, 0x54	; 84
    40d6:	97 e1       	ldi	r25, 0x17	; 23
    40d8:	31 de       	rcall	.-926    	; 0x3d3c <_uploadMessageRc>
    40da:	0f 90       	pop	r0
    40dc:	0f 90       	pop	r0
    40de:	0f 90       	pop	r0
    40e0:	0f 90       	pop	r0
    40e2:	0f 90       	pop	r0
    40e4:	0f 90       	pop	r0
    40e6:	08 95       	ret

000040e8 <lora_driver_configureToEu868>:
    40e8:	2f 92       	push	r2
    40ea:	3f 92       	push	r3
    40ec:	4f 92       	push	r4
    40ee:	5f 92       	push	r5
    40f0:	6f 92       	push	r6
    40f2:	7f 92       	push	r7
    40f4:	8f 92       	push	r8
    40f6:	9f 92       	push	r9
    40f8:	af 92       	push	r10
    40fa:	bf 92       	push	r11
    40fc:	cf 92       	push	r12
    40fe:	df 92       	push	r13
    4100:	ef 92       	push	r14
    4102:	ff 92       	push	r15
    4104:	0f 93       	push	r16
    4106:	1f 93       	push	r17
    4108:	cf 93       	push	r28
    410a:	df 93       	push	r29
    410c:	cd b7       	in	r28, 0x3d	; 61
    410e:	de b7       	in	r29, 0x3e	; 62
    4110:	a0 97       	sbiw	r28, 0x20	; 32
    4112:	0f b6       	in	r0, 0x3f	; 63
    4114:	f8 94       	cli
    4116:	de bf       	out	0x3e, r29	; 62
    4118:	0f be       	out	0x3f, r0	; 63
    411a:	cd bf       	out	0x3d, r28	; 61
    411c:	66 e7       	ldi	r22, 0x76	; 118
    411e:	76 e0       	ldi	r23, 0x06	; 6
    4120:	82 e8       	ldi	r24, 0x82	; 130
    4122:	96 e0       	ldi	r25, 0x06	; 6
    4124:	3c dd       	rcall	.-1416   	; 0x3b9e <_uploadMessage>
    4126:	95 dd       	rcall	.-1238   	; 0x3c52 <_reply2ReturnCode>
    4128:	81 11       	cpse	r24, r1
    412a:	a3 c0       	rjmp	.+326    	; 0x4272 <lora_driver_configureToEu868+0x18a>
    412c:	80 e2       	ldi	r24, 0x20	; 32
    412e:	e2 e2       	ldi	r30, 0x22	; 34
    4130:	f2 e0       	ldi	r31, 0x02	; 2
    4132:	de 01       	movw	r26, r28
    4134:	11 96       	adiw	r26, 0x01	; 1
    4136:	01 90       	ld	r0, Z+
    4138:	0d 92       	st	X+, r0
    413a:	8a 95       	dec	r24
    413c:	e1 f7       	brne	.-8      	; 0x4136 <lora_driver_configureToEu868+0x4e>
    413e:	9e 01       	movw	r18, r28
    4140:	2f 5f       	subi	r18, 0xFF	; 255
    4142:	3f 4f       	sbci	r19, 0xFF	; 255
    4144:	69 01       	movw	r12, r18
    4146:	e1 2c       	mov	r14, r1
    4148:	f1 2c       	mov	r15, r1
    414a:	0f 2e       	mov	r0, r31
    414c:	fe e8       	ldi	r31, 0x8E	; 142
    414e:	af 2e       	mov	r10, r31
    4150:	f6 e0       	ldi	r31, 0x06	; 6
    4152:	bf 2e       	mov	r11, r31
    4154:	f0 2d       	mov	r31, r0
    4156:	04 e5       	ldi	r16, 0x54	; 84
    4158:	17 e1       	ldi	r17, 0x17	; 23
    415a:	0f 2e       	mov	r0, r31
    415c:	f7 ea       	ldi	r31, 0xA7	; 167
    415e:	4f 2e       	mov	r4, r31
    4160:	f6 e0       	ldi	r31, 0x06	; 6
    4162:	5f 2e       	mov	r5, r31
    4164:	f0 2d       	mov	r31, r0
    4166:	0f 2e       	mov	r0, r31
    4168:	fe eb       	ldi	r31, 0xBE	; 190
    416a:	8f 2e       	mov	r8, r31
    416c:	f6 e0       	ldi	r31, 0x06	; 6
    416e:	9f 2e       	mov	r9, r31
    4170:	f0 2d       	mov	r31, r0
    4172:	0f 2e       	mov	r0, r31
    4174:	f8 ed       	ldi	r31, 0xD8	; 216
    4176:	6f 2e       	mov	r6, r31
    4178:	f6 e0       	ldi	r31, 0x06	; 6
    417a:	7f 2e       	mov	r7, r31
    417c:	f0 2d       	mov	r31, r0
    417e:	3e 2c       	mov	r3, r14
    4180:	2f 2c       	mov	r2, r15
    4182:	ff 92       	push	r15
    4184:	ef 92       	push	r14
    4186:	bf 92       	push	r11
    4188:	af 92       	push	r10
    418a:	1f 93       	push	r17
    418c:	0f 93       	push	r16
    418e:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <sprintf>
    4192:	60 e0       	ldi	r22, 0x00	; 0
    4194:	70 e0       	ldi	r23, 0x00	; 0
    4196:	c8 01       	movw	r24, r16
    4198:	02 dd       	rcall	.-1532   	; 0x3b9e <_uploadMessage>
    419a:	5b dd       	rcall	.-1354   	; 0x3c52 <_reply2ReturnCode>
    419c:	0f 90       	pop	r0
    419e:	0f 90       	pop	r0
    41a0:	0f 90       	pop	r0
    41a2:	0f 90       	pop	r0
    41a4:	0f 90       	pop	r0
    41a6:	0f 90       	pop	r0
    41a8:	81 11       	cpse	r24, r1
    41aa:	63 c0       	rjmp	.+198    	; 0x4272 <lora_driver_configureToEu868+0x18a>
    41ac:	32 e0       	ldi	r19, 0x02	; 2
    41ae:	3e 15       	cp	r19, r14
    41b0:	e8 f4       	brcc	.+58     	; 0x41ec <lora_driver_configureToEu868+0x104>
    41b2:	f6 01       	movw	r30, r12
    41b4:	83 81       	ldd	r24, Z+3	; 0x03
    41b6:	8f 93       	push	r24
    41b8:	82 81       	ldd	r24, Z+2	; 0x02
    41ba:	8f 93       	push	r24
    41bc:	81 81       	ldd	r24, Z+1	; 0x01
    41be:	8f 93       	push	r24
    41c0:	80 81       	ld	r24, Z
    41c2:	8f 93       	push	r24
    41c4:	ff 92       	push	r15
    41c6:	ef 92       	push	r14
    41c8:	5f 92       	push	r5
    41ca:	4f 92       	push	r4
    41cc:	1f 93       	push	r17
    41ce:	0f 93       	push	r16
    41d0:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <sprintf>
    41d4:	60 e0       	ldi	r22, 0x00	; 0
    41d6:	70 e0       	ldi	r23, 0x00	; 0
    41d8:	c8 01       	movw	r24, r16
    41da:	e1 dc       	rcall	.-1598   	; 0x3b9e <_uploadMessage>
    41dc:	3a dd       	rcall	.-1420   	; 0x3c52 <_reply2ReturnCode>
    41de:	0f b6       	in	r0, 0x3f	; 63
    41e0:	f8 94       	cli
    41e2:	de bf       	out	0x3e, r29	; 62
    41e4:	0f be       	out	0x3f, r0	; 63
    41e6:	cd bf       	out	0x3d, r28	; 61
    41e8:	81 11       	cpse	r24, r1
    41ea:	43 c0       	rjmp	.+134    	; 0x4272 <lora_driver_configureToEu868+0x18a>
    41ec:	2f 92       	push	r2
    41ee:	3f 92       	push	r3
    41f0:	9f 92       	push	r9
    41f2:	8f 92       	push	r8
    41f4:	1f 93       	push	r17
    41f6:	0f 93       	push	r16
    41f8:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <sprintf>
    41fc:	60 e0       	ldi	r22, 0x00	; 0
    41fe:	70 e0       	ldi	r23, 0x00	; 0
    4200:	c8 01       	movw	r24, r16
    4202:	cd dc       	rcall	.-1638   	; 0x3b9e <_uploadMessage>
    4204:	26 dd       	rcall	.-1460   	; 0x3c52 <_reply2ReturnCode>
    4206:	0f 90       	pop	r0
    4208:	0f 90       	pop	r0
    420a:	0f 90       	pop	r0
    420c:	0f 90       	pop	r0
    420e:	0f 90       	pop	r0
    4210:	0f 90       	pop	r0
    4212:	81 11       	cpse	r24, r1
    4214:	2e c0       	rjmp	.+92     	; 0x4272 <lora_driver_configureToEu868+0x18a>
    4216:	2f 92       	push	r2
    4218:	3f 92       	push	r3
    421a:	7f 92       	push	r7
    421c:	6f 92       	push	r6
    421e:	1f 93       	push	r17
    4220:	0f 93       	push	r16
    4222:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <sprintf>
    4226:	60 e0       	ldi	r22, 0x00	; 0
    4228:	70 e0       	ldi	r23, 0x00	; 0
    422a:	c8 01       	movw	r24, r16
    422c:	b8 dc       	rcall	.-1680   	; 0x3b9e <_uploadMessage>
    422e:	11 dd       	rcall	.-1502   	; 0x3c52 <_reply2ReturnCode>
    4230:	0f 90       	pop	r0
    4232:	0f 90       	pop	r0
    4234:	0f 90       	pop	r0
    4236:	0f 90       	pop	r0
    4238:	0f 90       	pop	r0
    423a:	0f 90       	pop	r0
    423c:	81 11       	cpse	r24, r1
    423e:	19 c0       	rjmp	.+50     	; 0x4272 <lora_driver_configureToEu868+0x18a>
    4240:	3f ef       	ldi	r19, 0xFF	; 255
    4242:	e3 1a       	sub	r14, r19
    4244:	f3 0a       	sbc	r15, r19
    4246:	84 e0       	ldi	r24, 0x04	; 4
    4248:	c8 0e       	add	r12, r24
    424a:	d1 1c       	adc	r13, r1
    424c:	98 e0       	ldi	r25, 0x08	; 8
    424e:	e9 16       	cp	r14, r25
    4250:	f1 04       	cpc	r15, r1
    4252:	09 f0       	breq	.+2      	; 0x4256 <lora_driver_configureToEu868+0x16e>
    4254:	94 cf       	rjmp	.-216    	; 0x417e <lora_driver_configureToEu868+0x96>
    4256:	60 e0       	ldi	r22, 0x00	; 0
    4258:	70 e0       	ldi	r23, 0x00	; 0
    425a:	80 ef       	ldi	r24, 0xF0	; 240
    425c:	96 e0       	ldi	r25, 0x06	; 6
    425e:	9f dc       	rcall	.-1730   	; 0x3b9e <_uploadMessage>
    4260:	f8 dc       	rcall	.-1552   	; 0x3c52 <_reply2ReturnCode>
    4262:	81 11       	cpse	r24, r1
    4264:	06 c0       	rjmp	.+12     	; 0x4272 <lora_driver_configureToEu868+0x18a>
    4266:	60 e0       	ldi	r22, 0x00	; 0
    4268:	70 e0       	ldi	r23, 0x00	; 0
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	97 e0       	ldi	r25, 0x07	; 7
    426e:	97 dc       	rcall	.-1746   	; 0x3b9e <_uploadMessage>
    4270:	f0 dc       	rcall	.-1568   	; 0x3c52 <_reply2ReturnCode>
    4272:	a0 96       	adiw	r28, 0x20	; 32
    4274:	0f b6       	in	r0, 0x3f	; 63
    4276:	f8 94       	cli
    4278:	de bf       	out	0x3e, r29	; 62
    427a:	0f be       	out	0x3f, r0	; 63
    427c:	cd bf       	out	0x3d, r28	; 61
    427e:	df 91       	pop	r29
    4280:	cf 91       	pop	r28
    4282:	1f 91       	pop	r17
    4284:	0f 91       	pop	r16
    4286:	ff 90       	pop	r15
    4288:	ef 90       	pop	r14
    428a:	df 90       	pop	r13
    428c:	cf 90       	pop	r12
    428e:	bf 90       	pop	r11
    4290:	af 90       	pop	r10
    4292:	9f 90       	pop	r9
    4294:	8f 90       	pop	r8
    4296:	7f 90       	pop	r7
    4298:	6f 90       	pop	r6
    429a:	5f 90       	pop	r5
    429c:	4f 90       	pop	r4
    429e:	3f 90       	pop	r3
    42a0:	2f 90       	pop	r2
    42a2:	08 95       	ret

000042a4 <lora_driver_setOtaaIdentity>:
    42a4:	ef 92       	push	r14
    42a6:	ff 92       	push	r15
    42a8:	0f 93       	push	r16
    42aa:	1f 93       	push	r17
    42ac:	cf 93       	push	r28
    42ae:	df 93       	push	r29
    42b0:	ec 01       	movw	r28, r24
    42b2:	8b 01       	movw	r16, r22
    42b4:	7a 01       	movw	r14, r20
    42b6:	81 e0       	ldi	r24, 0x01	; 1
    42b8:	f4 de       	rcall	.-536    	; 0x40a2 <lora_driver_setAdaptiveDataRate>
    42ba:	81 11       	cpse	r24, r1
    42bc:	0d c0       	rjmp	.+26     	; 0x42d8 <lora_driver_setOtaaIdentity+0x34>
    42be:	ce 01       	movw	r24, r28
    42c0:	d4 dd       	rcall	.-1112   	; 0x3e6a <lora_driver_setApplicationIdentifier>
    42c2:	81 11       	cpse	r24, r1
    42c4:	09 c0       	rjmp	.+18     	; 0x42d8 <lora_driver_setOtaaIdentity+0x34>
    42c6:	c8 01       	movw	r24, r16
    42c8:	e1 dd       	rcall	.-1086   	; 0x3e8c <lora_driver_setApplicationKey>
    42ca:	81 11       	cpse	r24, r1
    42cc:	05 c0       	rjmp	.+10     	; 0x42d8 <lora_driver_setOtaaIdentity+0x34>
    42ce:	c7 01       	movw	r24, r14
    42d0:	bb dd       	rcall	.-1162   	; 0x3e48 <lora_driver_setDeviceIdentifier>
    42d2:	81 11       	cpse	r24, r1
    42d4:	01 c0       	rjmp	.+2      	; 0x42d8 <lora_driver_setOtaaIdentity+0x34>
    42d6:	eb dd       	rcall	.-1066   	; 0x3eae <lora_driver_saveMac>
    42d8:	df 91       	pop	r29
    42da:	cf 91       	pop	r28
    42dc:	1f 91       	pop	r17
    42de:	0f 91       	pop	r16
    42e0:	ff 90       	pop	r15
    42e2:	ef 90       	pop	r14
    42e4:	08 95       	ret

000042e6 <lora_driver_mapReturnCodeToText>:
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	fc 01       	movw	r30, r24
    42ea:	ee 0f       	add	r30, r30
    42ec:	ff 1f       	adc	r31, r31
    42ee:	8e 0f       	add	r24, r30
    42f0:	9f 1f       	adc	r25, r31
    42f2:	fc 01       	movw	r30, r24
    42f4:	e6 53       	subi	r30, 0x36	; 54
    42f6:	f8 4f       	sbci	r31, 0xF8	; 248
    42f8:	81 81       	ldd	r24, Z+1	; 0x01
    42fa:	92 81       	ldd	r25, Z+2	; 0x02
    42fc:	08 95       	ret

000042fe <decode_port_no>:
    42fe:	dc 01       	movw	r26, r24
    4300:	00 97       	sbiw	r24, 0x00	; 0
    4302:	29 f1       	breq	.+74     	; 0x434e <decode_port_no+0x50>
    4304:	fb 01       	movw	r30, r22
    4306:	20 81       	ld	r18, Z
    4308:	fc 01       	movw	r30, r24
    430a:	01 90       	ld	r0, Z+
    430c:	00 20       	and	r0, r0
    430e:	e9 f7       	brne	.-6      	; 0x430a <decode_port_no+0xc>
    4310:	31 97       	sbiw	r30, 0x01	; 1
    4312:	e8 1b       	sub	r30, r24
    4314:	f9 0b       	sbc	r31, r25
    4316:	82 2f       	mov	r24, r18
    4318:	90 e0       	ldi	r25, 0x00	; 0
    431a:	e8 17       	cp	r30, r24
    431c:	f9 07       	cpc	r31, r25
    431e:	c8 f0       	brcs	.+50     	; 0x4352 <decode_port_no+0x54>
    4320:	80 e0       	ldi	r24, 0x00	; 0
    4322:	08 c0       	rjmp	.+16     	; 0x4334 <decode_port_no+0x36>
    4324:	88 0f       	add	r24, r24
    4326:	38 2f       	mov	r19, r24
    4328:	33 0f       	add	r19, r19
    432a:	33 0f       	add	r19, r19
    432c:	83 0f       	add	r24, r19
    432e:	80 53       	subi	r24, 0x30	; 48
    4330:	89 0f       	add	r24, r25
    4332:	2f 5f       	subi	r18, 0xFF	; 255
    4334:	fd 01       	movw	r30, r26
    4336:	e2 0f       	add	r30, r18
    4338:	f1 1d       	adc	r31, r1
    433a:	90 81       	ld	r25, Z
    433c:	30 ed       	ldi	r19, 0xD0	; 208
    433e:	39 0f       	add	r19, r25
    4340:	3a 30       	cpi	r19, 0x0A	; 10
    4342:	10 f4       	brcc	.+4      	; 0x4348 <decode_port_no+0x4a>
    4344:	91 11       	cpse	r25, r1
    4346:	ee cf       	rjmp	.-36     	; 0x4324 <decode_port_no+0x26>
    4348:	fb 01       	movw	r30, r22
    434a:	20 83       	st	Z, r18
    434c:	08 95       	ret
    434e:	80 e0       	ldi	r24, 0x00	; 0
    4350:	08 95       	ret
    4352:	80 e0       	ldi	r24, 0x00	; 0
    4354:	08 95       	ret

00004356 <decode_hexadecimal_string_bytes>:
    4356:	0f 93       	push	r16
    4358:	1f 93       	push	r17
    435a:	cf 93       	push	r28
    435c:	df 93       	push	r29
    435e:	dc 01       	movw	r26, r24
    4360:	ea 01       	movw	r28, r20
    4362:	20 97       	sbiw	r28, 0x00	; 0
    4364:	e1 f1       	breq	.+120    	; 0x43de <decode_hexadecimal_string_bytes+0x88>
    4366:	fa 01       	movw	r30, r20
    4368:	01 90       	ld	r0, Z+
    436a:	00 20       	and	r0, r0
    436c:	e9 f7       	brne	.-6      	; 0x4368 <decode_hexadecimal_string_bytes+0x12>
    436e:	31 97       	sbiw	r30, 0x01	; 1
    4370:	e4 1b       	sub	r30, r20
    4372:	f5 0b       	sbc	r31, r21
    4374:	32 97       	sbiw	r30, 0x02	; 2
    4376:	10 f5       	brcc	.+68     	; 0x43bc <decode_hexadecimal_string_bytes+0x66>
    4378:	32 c0       	rjmp	.+100    	; 0x43de <decode_hexadecimal_string_bytes+0x88>
    437a:	8d 01       	movw	r16, r26
    437c:	04 0f       	add	r16, r20
    437e:	15 1f       	adc	r17, r21
    4380:	30 e0       	ldi	r19, 0x00	; 0
    4382:	ae 01       	movw	r20, r28
    4384:	42 0f       	add	r20, r18
    4386:	53 1f       	adc	r21, r19
    4388:	fa 01       	movw	r30, r20
    438a:	90 81       	ld	r25, Z
    438c:	91 34       	cpi	r25, 0x41	; 65
    438e:	28 f0       	brcs	.+10     	; 0x439a <decode_hexadecimal_string_bytes+0x44>
    4390:	97 53       	subi	r25, 0x37	; 55
    4392:	59 2f       	mov	r21, r25
    4394:	52 95       	swap	r21
    4396:	50 7f       	andi	r21, 0xF0	; 240
    4398:	03 c0       	rjmp	.+6      	; 0x43a0 <decode_hexadecimal_string_bytes+0x4a>
    439a:	59 2f       	mov	r21, r25
    439c:	52 95       	swap	r21
    439e:	50 7f       	andi	r21, 0xF0	; 240
    43a0:	2c 0f       	add	r18, r28
    43a2:	3d 1f       	adc	r19, r29
    43a4:	f9 01       	movw	r30, r18
    43a6:	91 81       	ldd	r25, Z+1	; 0x01
    43a8:	91 34       	cpi	r25, 0x41	; 65
    43aa:	10 f0       	brcs	.+4      	; 0x43b0 <decode_hexadecimal_string_bytes+0x5a>
    43ac:	97 53       	subi	r25, 0x37	; 55
    43ae:	01 c0       	rjmp	.+2      	; 0x43b2 <decode_hexadecimal_string_bytes+0x5c>
    43b0:	90 53       	subi	r25, 0x30	; 48
    43b2:	95 0f       	add	r25, r21
    43b4:	f8 01       	movw	r30, r16
    43b6:	90 83       	st	Z, r25
    43b8:	8f 5f       	subi	r24, 0xFF	; 255
    43ba:	01 c0       	rjmp	.+2      	; 0x43be <decode_hexadecimal_string_bytes+0x68>
    43bc:	80 e0       	ldi	r24, 0x00	; 0
    43be:	28 2f       	mov	r18, r24
    43c0:	22 0f       	add	r18, r18
    43c2:	48 2f       	mov	r20, r24
    43c4:	50 e0       	ldi	r21, 0x00	; 0
    43c6:	fe 01       	movw	r30, r28
    43c8:	01 90       	ld	r0, Z+
    43ca:	00 20       	and	r0, r0
    43cc:	e9 f7       	brne	.-6      	; 0x43c8 <decode_hexadecimal_string_bytes+0x72>
    43ce:	31 97       	sbiw	r30, 0x01	; 1
    43d0:	ec 1b       	sub	r30, r28
    43d2:	fd 0b       	sbc	r31, r29
    43d4:	4e 17       	cp	r20, r30
    43d6:	5f 07       	cpc	r21, r31
    43d8:	10 f4       	brcc	.+4      	; 0x43de <decode_hexadecimal_string_bytes+0x88>
    43da:	86 13       	cpse	r24, r22
    43dc:	ce cf       	rjmp	.-100    	; 0x437a <decode_hexadecimal_string_bytes+0x24>
    43de:	df 91       	pop	r29
    43e0:	cf 91       	pop	r28
    43e2:	1f 91       	pop	r17
    43e4:	0f 91       	pop	r16
    43e6:	08 95       	ret

000043e8 <_serialCallBack>:
    43e8:	80 91 b1 17 	lds	r24, 0x17B1	; 0x8017b1 <crc_sum.1945>
    43ec:	86 0f       	add	r24, r22
    43ee:	80 93 b1 17 	sts	0x17B1, r24	; 0x8017b1 <crc_sum.1945>
    43f2:	90 91 b4 17 	lds	r25, 0x17B4	; 0x8017b4 <_mh_state>
    43f6:	91 30       	cpi	r25, 0x01	; 1
    43f8:	79 f0       	breq	.+30     	; 0x4418 <_serialCallBack+0x30>
    43fa:	28 f0       	brcs	.+10     	; 0x4406 <_serialCallBack+0x1e>
    43fc:	92 30       	cpi	r25, 0x02	; 2
    43fe:	a9 f0       	breq	.+42     	; 0x442a <_serialCallBack+0x42>
    4400:	93 30       	cpi	r25, 0x03	; 3
    4402:	19 f1       	breq	.+70     	; 0x444a <_serialCallBack+0x62>
    4404:	08 95       	ret
    4406:	6f 3f       	cpi	r22, 0xFF	; 255
    4408:	09 f0       	breq	.+2      	; 0x440c <_serialCallBack+0x24>
    440a:	48 c0       	rjmp	.+144    	; 0x449c <_serialCallBack+0xb4>
    440c:	10 92 b1 17 	sts	0x17B1, r1	; 0x8017b1 <crc_sum.1945>
    4410:	81 e0       	ldi	r24, 0x01	; 1
    4412:	80 93 b4 17 	sts	0x17B4, r24	; 0x8017b4 <_mh_state>
    4416:	08 95       	ret
    4418:	66 38       	cpi	r22, 0x86	; 134
    441a:	09 f0       	breq	.+2      	; 0x441e <_serialCallBack+0x36>
    441c:	3f c0       	rjmp	.+126    	; 0x449c <_serialCallBack+0xb4>
    441e:	10 92 b0 17 	sts	0x17B0, r1	; 0x8017b0 <inDex.1943>
    4422:	82 e0       	ldi	r24, 0x02	; 2
    4424:	80 93 b4 17 	sts	0x17B4, r24	; 0x8017b4 <_mh_state>
    4428:	08 95       	ret
    442a:	e0 91 b0 17 	lds	r30, 0x17B0	; 0x8017b0 <inDex.1943>
    442e:	81 e0       	ldi	r24, 0x01	; 1
    4430:	8e 0f       	add	r24, r30
    4432:	80 93 b0 17 	sts	0x17B0, r24	; 0x8017b0 <inDex.1943>
    4436:	f0 e0       	ldi	r31, 0x00	; 0
    4438:	e2 55       	subi	r30, 0x52	; 82
    443a:	f8 4e       	sbci	r31, 0xE8	; 232
    443c:	60 83       	st	Z, r22
    443e:	82 30       	cpi	r24, 0x02	; 2
    4440:	69 f5       	brne	.+90     	; 0x449c <_serialCallBack+0xb4>
    4442:	83 e0       	ldi	r24, 0x03	; 3
    4444:	80 93 b4 17 	sts	0x17B4, r24	; 0x8017b4 <_mh_state>
    4448:	08 95       	ret
    444a:	90 91 b0 17 	lds	r25, 0x17B0	; 0x8017b0 <inDex.1943>
    444e:	21 e0       	ldi	r18, 0x01	; 1
    4450:	29 0f       	add	r18, r25
    4452:	20 93 b0 17 	sts	0x17B0, r18	; 0x8017b0 <inDex.1943>
    4456:	96 30       	cpi	r25, 0x06	; 6
    4458:	09 f5       	brne	.+66     	; 0x449c <_serialCallBack+0xb4>
    445a:	81 11       	cpse	r24, r1
    445c:	0e c0       	rjmp	.+28     	; 0x447a <_serialCallBack+0x92>
    445e:	ee ea       	ldi	r30, 0xAE	; 174
    4460:	f7 e1       	ldi	r31, 0x17	; 23
    4462:	80 81       	ld	r24, Z
    4464:	90 e0       	ldi	r25, 0x00	; 0
    4466:	98 2f       	mov	r25, r24
    4468:	88 27       	eor	r24, r24
    446a:	21 81       	ldd	r18, Z+1	; 0x01
    446c:	82 0f       	add	r24, r18
    446e:	91 1d       	adc	r25, r1
    4470:	90 93 b6 17 	sts	0x17B6, r25	; 0x8017b6 <_ppm+0x1>
    4474:	80 93 b5 17 	sts	0x17B5, r24	; 0x8017b5 <_ppm>
    4478:	04 c0       	rjmp	.+8      	; 0x4482 <_serialCallBack+0x9a>
    447a:	10 92 b6 17 	sts	0x17B6, r1	; 0x8017b6 <_ppm+0x1>
    447e:	10 92 b5 17 	sts	0x17B5, r1	; 0x8017b5 <_ppm>
    4482:	10 92 b4 17 	sts	0x17B4, r1	; 0x8017b4 <_mh_state>
    4486:	e0 91 b2 17 	lds	r30, 0x17B2	; 0x8017b2 <_appCallBack>
    448a:	f0 91 b3 17 	lds	r31, 0x17B3	; 0x8017b3 <_appCallBack+0x1>
    448e:	30 97       	sbiw	r30, 0x00	; 0
    4490:	29 f0       	breq	.+10     	; 0x449c <_serialCallBack+0xb4>
    4492:	80 91 b5 17 	lds	r24, 0x17B5	; 0x8017b5 <_ppm>
    4496:	90 91 b6 17 	lds	r25, 0x17B6	; 0x8017b6 <_ppm+0x1>
    449a:	19 95       	eicall
    449c:	08 95       	ret

0000449e <mh_z19_initialise>:
    449e:	8f 92       	push	r8
    44a0:	9f 92       	push	r9
    44a2:	af 92       	push	r10
    44a4:	cf 92       	push	r12
    44a6:	ef 92       	push	r14
    44a8:	0f 93       	push	r16
    44aa:	0f 2e       	mov	r0, r31
    44ac:	f4 ef       	ldi	r31, 0xF4	; 244
    44ae:	8f 2e       	mov	r8, r31
    44b0:	f1 e2       	ldi	r31, 0x21	; 33
    44b2:	9f 2e       	mov	r9, r31
    44b4:	f0 2d       	mov	r31, r0
    44b6:	68 94       	set
    44b8:	aa 24       	eor	r10, r10
    44ba:	a4 f8       	bld	r10, 4
    44bc:	68 94       	set
    44be:	cc 24       	eor	r12, r12
    44c0:	c4 f8       	bld	r12, 4
    44c2:	e1 2c       	mov	r14, r1
    44c4:	00 e0       	ldi	r16, 0x00	; 0
    44c6:	23 e0       	ldi	r18, 0x03	; 3
    44c8:	40 e8       	ldi	r20, 0x80	; 128
    44ca:	55 e2       	ldi	r21, 0x25	; 37
    44cc:	60 e0       	ldi	r22, 0x00	; 0
    44ce:	70 e0       	ldi	r23, 0x00	; 0
    44d0:	4b d0       	rcall	.+150    	; 0x4568 <serial_create>
    44d2:	90 93 b8 17 	sts	0x17B8, r25	; 0x8017b8 <_serial+0x1>
    44d6:	80 93 b7 17 	sts	0x17B7, r24	; 0x8017b7 <_serial>
    44da:	0f 91       	pop	r16
    44dc:	ef 90       	pop	r14
    44de:	cf 90       	pop	r12
    44e0:	af 90       	pop	r10
    44e2:	9f 90       	pop	r9
    44e4:	8f 90       	pop	r8
    44e6:	08 95       	ret

000044e8 <mh_z19_takeMeassuring>:
    44e8:	cf 93       	push	r28
    44ea:	df 93       	push	r29
    44ec:	cd b7       	in	r28, 0x3d	; 61
    44ee:	de b7       	in	r29, 0x3e	; 62
    44f0:	29 97       	sbiw	r28, 0x09	; 9
    44f2:	0f b6       	in	r0, 0x3f	; 63
    44f4:	f8 94       	cli
    44f6:	de bf       	out	0x3e, r29	; 62
    44f8:	0f be       	out	0x3f, r0	; 63
    44fa:	cd bf       	out	0x3d, r28	; 61
    44fc:	89 e0       	ldi	r24, 0x09	; 9
    44fe:	e2 e4       	ldi	r30, 0x42	; 66
    4500:	f2 e0       	ldi	r31, 0x02	; 2
    4502:	9e 01       	movw	r18, r28
    4504:	2f 5f       	subi	r18, 0xFF	; 255
    4506:	3f 4f       	sbci	r19, 0xFF	; 255
    4508:	d9 01       	movw	r26, r18
    450a:	01 90       	ld	r0, Z+
    450c:	0d 92       	st	X+, r0
    450e:	8a 95       	dec	r24
    4510:	e1 f7       	brne	.-8      	; 0x450a <mh_z19_takeMeassuring+0x22>
    4512:	10 92 b6 17 	sts	0x17B6, r1	; 0x8017b6 <_ppm+0x1>
    4516:	10 92 b5 17 	sts	0x17B5, r1	; 0x8017b5 <_ppm>
    451a:	80 91 b7 17 	lds	r24, 0x17B7	; 0x8017b7 <_serial>
    451e:	90 91 b8 17 	lds	r25, 0x17B8	; 0x8017b8 <_serial+0x1>
    4522:	00 97       	sbiw	r24, 0x00	; 0
    4524:	31 f0       	breq	.+12     	; 0x4532 <mh_z19_takeMeassuring+0x4a>
    4526:	42 2f       	mov	r20, r18
    4528:	53 2f       	mov	r21, r19
    452a:	69 e0       	ldi	r22, 0x09	; 9
    452c:	ef d0       	rcall	.+478    	; 0x470c <serial_sendBytes>
    452e:	80 e0       	ldi	r24, 0x00	; 0
    4530:	01 c0       	rjmp	.+2      	; 0x4534 <mh_z19_takeMeassuring+0x4c>
    4532:	82 e0       	ldi	r24, 0x02	; 2
    4534:	29 96       	adiw	r28, 0x09	; 9
    4536:	0f b6       	in	r0, 0x3f	; 63
    4538:	f8 94       	cli
    453a:	de bf       	out	0x3e, r29	; 62
    453c:	0f be       	out	0x3f, r0	; 63
    453e:	cd bf       	out	0x3d, r28	; 61
    4540:	df 91       	pop	r29
    4542:	cf 91       	pop	r28
    4544:	08 95       	ret

00004546 <mh_z19_getCo2Ppm>:
    4546:	20 91 b5 17 	lds	r18, 0x17B5	; 0x8017b5 <_ppm>
    454a:	30 91 b6 17 	lds	r19, 0x17B6	; 0x8017b6 <_ppm+0x1>
    454e:	21 15       	cp	r18, r1
    4550:	31 05       	cpc	r19, r1
    4552:	29 f4       	brne	.+10     	; 0x455e <mh_z19_getCo2Ppm+0x18>
    4554:	fc 01       	movw	r30, r24
    4556:	11 82       	std	Z+1, r1	; 0x01
    4558:	10 82       	st	Z, r1
    455a:	81 e0       	ldi	r24, 0x01	; 1
    455c:	08 95       	ret
    455e:	fc 01       	movw	r30, r24
    4560:	31 83       	std	Z+1, r19	; 0x01
    4562:	20 83       	st	Z, r18
    4564:	80 e0       	ldi	r24, 0x00	; 0
    4566:	08 95       	ret

00004568 <serial_create>:
    4568:	2f 92       	push	r2
    456a:	3f 92       	push	r3
    456c:	4f 92       	push	r4
    456e:	5f 92       	push	r5
    4570:	6f 92       	push	r6
    4572:	7f 92       	push	r7
    4574:	8f 92       	push	r8
    4576:	9f 92       	push	r9
    4578:	af 92       	push	r10
    457a:	cf 92       	push	r12
    457c:	ef 92       	push	r14
    457e:	ff 92       	push	r15
    4580:	0f 93       	push	r16
    4582:	1f 93       	push	r17
    4584:	cf 93       	push	r28
    4586:	df 93       	push	r29
    4588:	cd b7       	in	r28, 0x3d	; 61
    458a:	de b7       	in	r29, 0x3e	; 62
    458c:	f8 2e       	mov	r15, r24
    458e:	2a 01       	movw	r4, r20
    4590:	3b 01       	movw	r6, r22
    4592:	88 e0       	ldi	r24, 0x08	; 8
    4594:	90 e0       	ldi	r25, 0x00	; 0
    4596:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <malloc>
    459a:	8c 01       	movw	r16, r24
    459c:	8f 2d       	mov	r24, r15
    459e:	90 e0       	ldi	r25, 0x00	; 0
    45a0:	fc 01       	movw	r30, r24
    45a2:	ee 0f       	add	r30, r30
    45a4:	ff 1f       	adc	r31, r31
    45a6:	e7 54       	subi	r30, 0x47	; 71
    45a8:	f8 4e       	sbci	r31, 0xE8	; 232
    45aa:	11 83       	std	Z+1, r17	; 0x01
    45ac:	00 83       	st	Z, r16
    45ae:	01 15       	cp	r16, r1
    45b0:	11 05       	cpc	r17, r1
    45b2:	09 f4       	brne	.+2      	; 0x45b6 <serial_create+0x4e>
    45b4:	6e c0       	rjmp	.+220    	; 0x4692 <serial_create+0x12a>
    45b6:	88 0f       	add	r24, r24
    45b8:	99 1f       	adc	r25, r25
    45ba:	fc 01       	movw	r30, r24
    45bc:	e5 5f       	subi	r30, 0xF5	; 245
    45be:	fd 4f       	sbci	r31, 0xFD	; 253
    45c0:	80 81       	ld	r24, Z
    45c2:	91 81       	ldd	r25, Z+1	; 0x01
    45c4:	d8 01       	movw	r26, r16
    45c6:	8d 93       	st	X+, r24
    45c8:	9c 93       	st	X, r25
    45ca:	8c 2d       	mov	r24, r12
    45cc:	90 e0       	ldi	r25, 0x00	; 0
    45ce:	88 0f       	add	r24, r24
    45d0:	99 1f       	adc	r25, r25
    45d2:	88 0f       	add	r24, r24
    45d4:	99 1f       	adc	r25, r25
    45d6:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <malloc>
    45da:	1c 01       	movw	r2, r24
    45dc:	86 e0       	ldi	r24, 0x06	; 6
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <malloc>
    45e4:	7c 01       	movw	r14, r24
    45e6:	4c 2d       	mov	r20, r12
    45e8:	b1 01       	movw	r22, r2
    45ea:	0e 94 65 2b 	call	0x56ca	; 0x56ca <fifo_init>
    45ee:	f8 01       	movw	r30, r16
    45f0:	f5 82       	std	Z+5, r15	; 0x05
    45f2:	e4 82       	std	Z+4, r14	; 0x04
    45f4:	8a 2d       	mov	r24, r10
    45f6:	90 e0       	ldi	r25, 0x00	; 0
    45f8:	88 0f       	add	r24, r24
    45fa:	99 1f       	adc	r25, r25
    45fc:	88 0f       	add	r24, r24
    45fe:	99 1f       	adc	r25, r25
    4600:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <malloc>
    4604:	1c 01       	movw	r2, r24
    4606:	86 e0       	ldi	r24, 0x06	; 6
    4608:	90 e0       	ldi	r25, 0x00	; 0
    460a:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <malloc>
    460e:	7c 01       	movw	r14, r24
    4610:	4a 2d       	mov	r20, r10
    4612:	b1 01       	movw	r22, r2
    4614:	0e 94 65 2b 	call	0x56ca	; 0x56ca <fifo_init>
    4618:	d8 01       	movw	r26, r16
    461a:	13 96       	adiw	r26, 0x03	; 3
    461c:	fc 92       	st	X, r15
    461e:	ee 92       	st	-X, r14
    4620:	12 97       	sbiw	r26, 0x02	; 2
    4622:	17 96       	adiw	r26, 0x07	; 7
    4624:	9c 92       	st	X, r9
    4626:	8e 92       	st	-X, r8
    4628:	16 97       	sbiw	r26, 0x06	; 6
    462a:	ff b6       	in	r15, 0x3f	; 63
    462c:	f8 94       	cli
    462e:	ed 91       	ld	r30, X+
    4630:	fc 91       	ld	r31, X
    4632:	11 97       	sbiw	r26, 0x01	; 1
    4634:	36 97       	sbiw	r30, 0x06	; 6
    4636:	80 81       	ld	r24, Z
    4638:	82 60       	ori	r24, 0x02	; 2
    463a:	80 83       	st	Z, r24
    463c:	8d 90       	ld	r8, X+
    463e:	9c 90       	ld	r9, X
    4640:	c3 01       	movw	r24, r6
    4642:	b2 01       	movw	r22, r4
    4644:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <__floatunsisf>
    4648:	20 e0       	ldi	r18, 0x00	; 0
    464a:	30 e0       	ldi	r19, 0x00	; 0
    464c:	40 e0       	ldi	r20, 0x00	; 0
    464e:	51 e4       	ldi	r21, 0x41	; 65
    4650:	0e 94 bc 2c 	call	0x5978	; 0x5978 <__mulsf3>
    4654:	9b 01       	movw	r18, r22
    4656:	ac 01       	movw	r20, r24
    4658:	60 e0       	ldi	r22, 0x00	; 0
    465a:	74 e2       	ldi	r23, 0x24	; 36
    465c:	84 e7       	ldi	r24, 0x74	; 116
    465e:	9b e4       	ldi	r25, 0x4B	; 75
    4660:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <__divsf3>
    4664:	20 e0       	ldi	r18, 0x00	; 0
    4666:	30 e0       	ldi	r19, 0x00	; 0
    4668:	40 e8       	ldi	r20, 0x80	; 128
    466a:	5f e3       	ldi	r21, 0x3F	; 63
    466c:	0e 94 81 2b 	call	0x5702	; 0x5702 <__subsf3>
    4670:	4c d9       	rcall	.-3432   	; 0x390a <__fixunssfsi>
    4672:	f4 01       	movw	r30, r8
    4674:	32 97       	sbiw	r30, 0x02	; 2
    4676:	60 83       	st	Z, r22
    4678:	d8 01       	movw	r26, r16
    467a:	ed 91       	ld	r30, X+
    467c:	fc 91       	ld	r31, X
    467e:	11 97       	sbiw	r26, 0x01	; 1
    4680:	35 97       	sbiw	r30, 0x05	; 5
    4682:	88 e9       	ldi	r24, 0x98	; 152
    4684:	80 83       	st	Z, r24
    4686:	ed 91       	ld	r30, X+
    4688:	fc 91       	ld	r31, X
    468a:	34 97       	sbiw	r30, 0x04	; 4
    468c:	86 e0       	ldi	r24, 0x06	; 6
    468e:	80 83       	st	Z, r24
    4690:	ff be       	out	0x3f, r15	; 63
    4692:	c8 01       	movw	r24, r16
    4694:	df 91       	pop	r29
    4696:	cf 91       	pop	r28
    4698:	1f 91       	pop	r17
    469a:	0f 91       	pop	r16
    469c:	ff 90       	pop	r15
    469e:	ef 90       	pop	r14
    46a0:	cf 90       	pop	r12
    46a2:	af 90       	pop	r10
    46a4:	9f 90       	pop	r9
    46a6:	8f 90       	pop	r8
    46a8:	7f 90       	pop	r7
    46aa:	6f 90       	pop	r6
    46ac:	5f 90       	pop	r5
    46ae:	4f 90       	pop	r4
    46b0:	3f 90       	pop	r3
    46b2:	2f 90       	pop	r2
    46b4:	08 95       	ret

000046b6 <serial_sendByte>:
    46b6:	cf 93       	push	r28
    46b8:	df 93       	push	r29
    46ba:	dc 01       	movw	r26, r24
    46bc:	89 2b       	or	r24, r25
    46be:	01 f1       	breq	.+64     	; 0x4700 <serial_sendByte+0x4a>
    46c0:	12 96       	adiw	r26, 0x02	; 2
    46c2:	ed 91       	ld	r30, X+
    46c4:	fc 91       	ld	r31, X
    46c6:	13 97       	sbiw	r26, 0x03	; 3
    46c8:	93 81       	ldd	r25, Z+3	; 0x03
    46ca:	82 81       	ldd	r24, Z+2	; 0x02
    46cc:	25 81       	ldd	r18, Z+5	; 0x05
    46ce:	98 1b       	sub	r25, r24
    46d0:	92 23       	and	r25, r18
    46d2:	84 81       	ldd	r24, Z+4	; 0x04
    46d4:	98 17       	cp	r25, r24
    46d6:	b1 f0       	breq	.+44     	; 0x4704 <serial_sendByte+0x4e>
    46d8:	83 81       	ldd	r24, Z+3	; 0x03
    46da:	26 95       	lsr	r18
    46dc:	28 23       	and	r18, r24
    46de:	c0 81       	ld	r28, Z
    46e0:	d1 81       	ldd	r29, Z+1	; 0x01
    46e2:	c2 0f       	add	r28, r18
    46e4:	d1 1d       	adc	r29, r1
    46e6:	68 83       	st	Y, r22
    46e8:	8f 5f       	subi	r24, 0xFF	; 255
    46ea:	95 81       	ldd	r25, Z+5	; 0x05
    46ec:	89 23       	and	r24, r25
    46ee:	83 83       	std	Z+3, r24	; 0x03
    46f0:	ed 91       	ld	r30, X+
    46f2:	fc 91       	ld	r31, X
    46f4:	35 97       	sbiw	r30, 0x05	; 5
    46f6:	80 81       	ld	r24, Z
    46f8:	80 62       	ori	r24, 0x20	; 32
    46fa:	80 83       	st	Z, r24
    46fc:	80 e0       	ldi	r24, 0x00	; 0
    46fe:	03 c0       	rjmp	.+6      	; 0x4706 <serial_sendByte+0x50>
    4700:	81 e0       	ldi	r24, 0x01	; 1
    4702:	01 c0       	rjmp	.+2      	; 0x4706 <serial_sendByte+0x50>
    4704:	82 e0       	ldi	r24, 0x02	; 2
    4706:	df 91       	pop	r29
    4708:	cf 91       	pop	r28
    470a:	08 95       	ret

0000470c <serial_sendBytes>:
    470c:	ef 92       	push	r14
    470e:	ff 92       	push	r15
    4710:	0f 93       	push	r16
    4712:	1f 93       	push	r17
    4714:	cf 93       	push	r28
    4716:	df 93       	push	r29
    4718:	7c 01       	movw	r14, r24
    471a:	00 97       	sbiw	r24, 0x00	; 0
    471c:	09 f4       	brne	.+2      	; 0x4720 <serial_sendBytes+0x14>
    471e:	41 c0       	rjmp	.+130    	; 0x47a2 <serial_sendBytes+0x96>
    4720:	dc 01       	movw	r26, r24
    4722:	12 96       	adiw	r26, 0x02	; 2
    4724:	ed 91       	ld	r30, X+
    4726:	fc 91       	ld	r31, X
    4728:	13 97       	sbiw	r26, 0x03	; 3
    472a:	93 81       	ldd	r25, Z+3	; 0x03
    472c:	82 81       	ldd	r24, Z+2	; 0x02
    472e:	98 1b       	sub	r25, r24
    4730:	85 81       	ldd	r24, Z+5	; 0x05
    4732:	98 23       	and	r25, r24
    4734:	84 81       	ldd	r24, Z+4	; 0x04
    4736:	89 1b       	sub	r24, r25
    4738:	86 17       	cp	r24, r22
    473a:	a8 f1       	brcs	.+106    	; 0x47a6 <serial_sendBytes+0x9a>
    473c:	66 23       	and	r22, r22
    473e:	41 f1       	breq	.+80     	; 0x4790 <serial_sendBytes+0x84>
    4740:	84 2f       	mov	r24, r20
    4742:	95 2f       	mov	r25, r21
    4744:	dc 01       	movw	r26, r24
    4746:	61 50       	subi	r22, 0x01	; 1
    4748:	46 2f       	mov	r20, r22
    474a:	50 e0       	ldi	r21, 0x00	; 0
    474c:	4f 5f       	subi	r20, 0xFF	; 255
    474e:	5f 4f       	sbci	r21, 0xFF	; 255
    4750:	48 0f       	add	r20, r24
    4752:	59 1f       	adc	r21, r25
    4754:	e7 01       	movw	r28, r14
    4756:	ea 81       	ldd	r30, Y+2	; 0x02
    4758:	fb 81       	ldd	r31, Y+3	; 0x03
    475a:	93 81       	ldd	r25, Z+3	; 0x03
    475c:	82 81       	ldd	r24, Z+2	; 0x02
    475e:	25 81       	ldd	r18, Z+5	; 0x05
    4760:	98 1b       	sub	r25, r24
    4762:	92 23       	and	r25, r18
    4764:	84 81       	ldd	r24, Z+4	; 0x04
    4766:	98 17       	cp	r25, r24
    4768:	79 f0       	breq	.+30     	; 0x4788 <serial_sendBytes+0x7c>
    476a:	8c 91       	ld	r24, X
    476c:	93 81       	ldd	r25, Z+3	; 0x03
    476e:	26 95       	lsr	r18
    4770:	29 23       	and	r18, r25
    4772:	60 81       	ld	r22, Z
    4774:	71 81       	ldd	r23, Z+1	; 0x01
    4776:	8b 01       	movw	r16, r22
    4778:	02 0f       	add	r16, r18
    477a:	11 1d       	adc	r17, r1
    477c:	e8 01       	movw	r28, r16
    477e:	88 83       	st	Y, r24
    4780:	9f 5f       	subi	r25, 0xFF	; 255
    4782:	85 81       	ldd	r24, Z+5	; 0x05
    4784:	98 23       	and	r25, r24
    4786:	93 83       	std	Z+3, r25	; 0x03
    4788:	11 96       	adiw	r26, 0x01	; 1
    478a:	a4 17       	cp	r26, r20
    478c:	b5 07       	cpc	r27, r21
    478e:	11 f7       	brne	.-60     	; 0x4754 <serial_sendBytes+0x48>
    4790:	d7 01       	movw	r26, r14
    4792:	ed 91       	ld	r30, X+
    4794:	fc 91       	ld	r31, X
    4796:	35 97       	sbiw	r30, 0x05	; 5
    4798:	80 81       	ld	r24, Z
    479a:	80 62       	ori	r24, 0x20	; 32
    479c:	80 83       	st	Z, r24
    479e:	80 e0       	ldi	r24, 0x00	; 0
    47a0:	03 c0       	rjmp	.+6      	; 0x47a8 <serial_sendBytes+0x9c>
    47a2:	81 e0       	ldi	r24, 0x01	; 1
    47a4:	01 c0       	rjmp	.+2      	; 0x47a8 <serial_sendBytes+0x9c>
    47a6:	82 e0       	ldi	r24, 0x02	; 2
    47a8:	df 91       	pop	r29
    47aa:	cf 91       	pop	r28
    47ac:	1f 91       	pop	r17
    47ae:	0f 91       	pop	r16
    47b0:	ff 90       	pop	r15
    47b2:	ef 90       	pop	r14
    47b4:	08 95       	ret

000047b6 <serial_getByte>:
    47b6:	00 97       	sbiw	r24, 0x00	; 0
    47b8:	d1 f0       	breq	.+52     	; 0x47ee <serial_getByte+0x38>
    47ba:	dc 01       	movw	r26, r24
    47bc:	14 96       	adiw	r26, 0x04	; 4
    47be:	ed 91       	ld	r30, X+
    47c0:	fc 91       	ld	r31, X
    47c2:	15 97       	sbiw	r26, 0x05	; 5
    47c4:	93 81       	ldd	r25, Z+3	; 0x03
    47c6:	82 81       	ldd	r24, Z+2	; 0x02
    47c8:	98 17       	cp	r25, r24
    47ca:	99 f0       	breq	.+38     	; 0x47f2 <serial_getByte+0x3c>
    47cc:	92 81       	ldd	r25, Z+2	; 0x02
    47ce:	85 81       	ldd	r24, Z+5	; 0x05
    47d0:	86 95       	lsr	r24
    47d2:	89 23       	and	r24, r25
    47d4:	a0 81       	ld	r26, Z
    47d6:	b1 81       	ldd	r27, Z+1	; 0x01
    47d8:	a8 0f       	add	r26, r24
    47da:	b1 1d       	adc	r27, r1
    47dc:	8c 91       	ld	r24, X
    47de:	db 01       	movw	r26, r22
    47e0:	8c 93       	st	X, r24
    47e2:	9f 5f       	subi	r25, 0xFF	; 255
    47e4:	85 81       	ldd	r24, Z+5	; 0x05
    47e6:	98 23       	and	r25, r24
    47e8:	92 83       	std	Z+2, r25	; 0x02
    47ea:	80 e0       	ldi	r24, 0x00	; 0
    47ec:	08 95       	ret
    47ee:	81 e0       	ldi	r24, 0x01	; 1
    47f0:	08 95       	ret
    47f2:	83 e0       	ldi	r24, 0x03	; 3
    47f4:	08 95       	ret

000047f6 <__vector_25>:
    47f6:	1f 92       	push	r1
    47f8:	0f 92       	push	r0
    47fa:	0f b6       	in	r0, 0x3f	; 63
    47fc:	0f 92       	push	r0
    47fe:	11 24       	eor	r1, r1
    4800:	0b b6       	in	r0, 0x3b	; 59
    4802:	0f 92       	push	r0
    4804:	2f 93       	push	r18
    4806:	3f 93       	push	r19
    4808:	4f 93       	push	r20
    480a:	5f 93       	push	r21
    480c:	6f 93       	push	r22
    480e:	7f 93       	push	r23
    4810:	8f 93       	push	r24
    4812:	9f 93       	push	r25
    4814:	af 93       	push	r26
    4816:	bf 93       	push	r27
    4818:	cf 93       	push	r28
    481a:	df 93       	push	r29
    481c:	ef 93       	push	r30
    481e:	ff 93       	push	r31
    4820:	a0 91 b9 17 	lds	r26, 0x17B9	; 0x8017b9 <_ser_handle>
    4824:	b0 91 ba 17 	lds	r27, 0x17BA	; 0x8017ba <_ser_handle+0x1>
    4828:	10 97       	sbiw	r26, 0x00	; 0
    482a:	11 f1       	breq	.+68     	; 0x4870 <__vector_25+0x7a>
    482c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4830:	14 96       	adiw	r26, 0x04	; 4
    4832:	ed 91       	ld	r30, X+
    4834:	fc 91       	ld	r31, X
    4836:	15 97       	sbiw	r26, 0x05	; 5
    4838:	93 81       	ldd	r25, Z+3	; 0x03
    483a:	82 81       	ldd	r24, Z+2	; 0x02
    483c:	25 81       	ldd	r18, Z+5	; 0x05
    483e:	98 1b       	sub	r25, r24
    4840:	92 23       	and	r25, r18
    4842:	84 81       	ldd	r24, Z+4	; 0x04
    4844:	98 17       	cp	r25, r24
    4846:	61 f0       	breq	.+24     	; 0x4860 <__vector_25+0x6a>
    4848:	83 81       	ldd	r24, Z+3	; 0x03
    484a:	26 95       	lsr	r18
    484c:	28 23       	and	r18, r24
    484e:	c0 81       	ld	r28, Z
    4850:	d1 81       	ldd	r29, Z+1	; 0x01
    4852:	c2 0f       	add	r28, r18
    4854:	d1 1d       	adc	r29, r1
    4856:	68 83       	st	Y, r22
    4858:	8f 5f       	subi	r24, 0xFF	; 255
    485a:	95 81       	ldd	r25, Z+5	; 0x05
    485c:	89 23       	and	r24, r25
    485e:	83 83       	std	Z+3, r24	; 0x03
    4860:	16 96       	adiw	r26, 0x06	; 6
    4862:	ed 91       	ld	r30, X+
    4864:	fc 91       	ld	r31, X
    4866:	17 97       	sbiw	r26, 0x07	; 7
    4868:	30 97       	sbiw	r30, 0x00	; 0
    486a:	11 f0       	breq	.+4      	; 0x4870 <__vector_25+0x7a>
    486c:	cd 01       	movw	r24, r26
    486e:	19 95       	eicall
    4870:	ff 91       	pop	r31
    4872:	ef 91       	pop	r30
    4874:	df 91       	pop	r29
    4876:	cf 91       	pop	r28
    4878:	bf 91       	pop	r27
    487a:	af 91       	pop	r26
    487c:	9f 91       	pop	r25
    487e:	8f 91       	pop	r24
    4880:	7f 91       	pop	r23
    4882:	6f 91       	pop	r22
    4884:	5f 91       	pop	r21
    4886:	4f 91       	pop	r20
    4888:	3f 91       	pop	r19
    488a:	2f 91       	pop	r18
    488c:	0f 90       	pop	r0
    488e:	0b be       	out	0x3b, r0	; 59
    4890:	0f 90       	pop	r0
    4892:	0f be       	out	0x3f, r0	; 63
    4894:	0f 90       	pop	r0
    4896:	1f 90       	pop	r1
    4898:	18 95       	reti

0000489a <__vector_26>:
    489a:	1f 92       	push	r1
    489c:	0f 92       	push	r0
    489e:	0f b6       	in	r0, 0x3f	; 63
    48a0:	0f 92       	push	r0
    48a2:	11 24       	eor	r1, r1
    48a4:	0b b6       	in	r0, 0x3b	; 59
    48a6:	0f 92       	push	r0
    48a8:	2f 93       	push	r18
    48aa:	8f 93       	push	r24
    48ac:	9f 93       	push	r25
    48ae:	af 93       	push	r26
    48b0:	bf 93       	push	r27
    48b2:	ef 93       	push	r30
    48b4:	ff 93       	push	r31
    48b6:	e0 91 b9 17 	lds	r30, 0x17B9	; 0x8017b9 <_ser_handle>
    48ba:	f0 91 ba 17 	lds	r31, 0x17BA	; 0x8017ba <_ser_handle+0x1>
    48be:	30 97       	sbiw	r30, 0x00	; 0
    48c0:	b9 f0       	breq	.+46     	; 0x48f0 <__vector_26+0x56>
    48c2:	02 80       	ldd	r0, Z+2	; 0x02
    48c4:	f3 81       	ldd	r31, Z+3	; 0x03
    48c6:	e0 2d       	mov	r30, r0
    48c8:	93 81       	ldd	r25, Z+3	; 0x03
    48ca:	82 81       	ldd	r24, Z+2	; 0x02
    48cc:	98 17       	cp	r25, r24
    48ce:	b1 f0       	breq	.+44     	; 0x48fc <__vector_26+0x62>
    48d0:	92 81       	ldd	r25, Z+2	; 0x02
    48d2:	85 81       	ldd	r24, Z+5	; 0x05
    48d4:	28 2f       	mov	r18, r24
    48d6:	26 95       	lsr	r18
    48d8:	29 23       	and	r18, r25
    48da:	a0 81       	ld	r26, Z
    48dc:	b1 81       	ldd	r27, Z+1	; 0x01
    48de:	a2 0f       	add	r26, r18
    48e0:	b1 1d       	adc	r27, r1
    48e2:	2c 91       	ld	r18, X
    48e4:	9f 5f       	subi	r25, 0xFF	; 255
    48e6:	89 23       	and	r24, r25
    48e8:	82 83       	std	Z+2, r24	; 0x02
    48ea:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    48ee:	0b c0       	rjmp	.+22     	; 0x4906 <__vector_26+0x6c>
    48f0:	e1 ec       	ldi	r30, 0xC1	; 193
    48f2:	f0 e0       	ldi	r31, 0x00	; 0
    48f4:	80 81       	ld	r24, Z
    48f6:	8f 7d       	andi	r24, 0xDF	; 223
    48f8:	80 83       	st	Z, r24
    48fa:	05 c0       	rjmp	.+10     	; 0x4906 <__vector_26+0x6c>
    48fc:	e1 ec       	ldi	r30, 0xC1	; 193
    48fe:	f0 e0       	ldi	r31, 0x00	; 0
    4900:	80 81       	ld	r24, Z
    4902:	8f 7d       	andi	r24, 0xDF	; 223
    4904:	80 83       	st	Z, r24
    4906:	ff 91       	pop	r31
    4908:	ef 91       	pop	r30
    490a:	bf 91       	pop	r27
    490c:	af 91       	pop	r26
    490e:	9f 91       	pop	r25
    4910:	8f 91       	pop	r24
    4912:	2f 91       	pop	r18
    4914:	0f 90       	pop	r0
    4916:	0b be       	out	0x3b, r0	; 59
    4918:	0f 90       	pop	r0
    491a:	0f be       	out	0x3f, r0	; 63
    491c:	0f 90       	pop	r0
    491e:	1f 90       	pop	r1
    4920:	18 95       	reti

00004922 <__vector_36>:
    4922:	1f 92       	push	r1
    4924:	0f 92       	push	r0
    4926:	0f b6       	in	r0, 0x3f	; 63
    4928:	0f 92       	push	r0
    492a:	11 24       	eor	r1, r1
    492c:	0b b6       	in	r0, 0x3b	; 59
    492e:	0f 92       	push	r0
    4930:	2f 93       	push	r18
    4932:	3f 93       	push	r19
    4934:	4f 93       	push	r20
    4936:	5f 93       	push	r21
    4938:	6f 93       	push	r22
    493a:	7f 93       	push	r23
    493c:	8f 93       	push	r24
    493e:	9f 93       	push	r25
    4940:	af 93       	push	r26
    4942:	bf 93       	push	r27
    4944:	cf 93       	push	r28
    4946:	df 93       	push	r29
    4948:	ef 93       	push	r30
    494a:	ff 93       	push	r31
    494c:	a0 91 bb 17 	lds	r26, 0x17BB	; 0x8017bb <_ser_handle+0x2>
    4950:	b0 91 bc 17 	lds	r27, 0x17BC	; 0x8017bc <_ser_handle+0x3>
    4954:	10 97       	sbiw	r26, 0x00	; 0
    4956:	11 f1       	breq	.+68     	; 0x499c <__vector_36+0x7a>
    4958:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    495c:	14 96       	adiw	r26, 0x04	; 4
    495e:	ed 91       	ld	r30, X+
    4960:	fc 91       	ld	r31, X
    4962:	15 97       	sbiw	r26, 0x05	; 5
    4964:	93 81       	ldd	r25, Z+3	; 0x03
    4966:	82 81       	ldd	r24, Z+2	; 0x02
    4968:	25 81       	ldd	r18, Z+5	; 0x05
    496a:	98 1b       	sub	r25, r24
    496c:	92 23       	and	r25, r18
    496e:	84 81       	ldd	r24, Z+4	; 0x04
    4970:	98 17       	cp	r25, r24
    4972:	61 f0       	breq	.+24     	; 0x498c <__vector_36+0x6a>
    4974:	83 81       	ldd	r24, Z+3	; 0x03
    4976:	26 95       	lsr	r18
    4978:	28 23       	and	r18, r24
    497a:	c0 81       	ld	r28, Z
    497c:	d1 81       	ldd	r29, Z+1	; 0x01
    497e:	c2 0f       	add	r28, r18
    4980:	d1 1d       	adc	r29, r1
    4982:	68 83       	st	Y, r22
    4984:	8f 5f       	subi	r24, 0xFF	; 255
    4986:	95 81       	ldd	r25, Z+5	; 0x05
    4988:	89 23       	and	r24, r25
    498a:	83 83       	std	Z+3, r24	; 0x03
    498c:	16 96       	adiw	r26, 0x06	; 6
    498e:	ed 91       	ld	r30, X+
    4990:	fc 91       	ld	r31, X
    4992:	17 97       	sbiw	r26, 0x07	; 7
    4994:	30 97       	sbiw	r30, 0x00	; 0
    4996:	11 f0       	breq	.+4      	; 0x499c <__vector_36+0x7a>
    4998:	cd 01       	movw	r24, r26
    499a:	19 95       	eicall
    499c:	ff 91       	pop	r31
    499e:	ef 91       	pop	r30
    49a0:	df 91       	pop	r29
    49a2:	cf 91       	pop	r28
    49a4:	bf 91       	pop	r27
    49a6:	af 91       	pop	r26
    49a8:	9f 91       	pop	r25
    49aa:	8f 91       	pop	r24
    49ac:	7f 91       	pop	r23
    49ae:	6f 91       	pop	r22
    49b0:	5f 91       	pop	r21
    49b2:	4f 91       	pop	r20
    49b4:	3f 91       	pop	r19
    49b6:	2f 91       	pop	r18
    49b8:	0f 90       	pop	r0
    49ba:	0b be       	out	0x3b, r0	; 59
    49bc:	0f 90       	pop	r0
    49be:	0f be       	out	0x3f, r0	; 63
    49c0:	0f 90       	pop	r0
    49c2:	1f 90       	pop	r1
    49c4:	18 95       	reti

000049c6 <__vector_37>:
    49c6:	1f 92       	push	r1
    49c8:	0f 92       	push	r0
    49ca:	0f b6       	in	r0, 0x3f	; 63
    49cc:	0f 92       	push	r0
    49ce:	11 24       	eor	r1, r1
    49d0:	0b b6       	in	r0, 0x3b	; 59
    49d2:	0f 92       	push	r0
    49d4:	2f 93       	push	r18
    49d6:	8f 93       	push	r24
    49d8:	9f 93       	push	r25
    49da:	af 93       	push	r26
    49dc:	bf 93       	push	r27
    49de:	ef 93       	push	r30
    49e0:	ff 93       	push	r31
    49e2:	e0 91 bb 17 	lds	r30, 0x17BB	; 0x8017bb <_ser_handle+0x2>
    49e6:	f0 91 bc 17 	lds	r31, 0x17BC	; 0x8017bc <_ser_handle+0x3>
    49ea:	30 97       	sbiw	r30, 0x00	; 0
    49ec:	b9 f0       	breq	.+46     	; 0x4a1c <__vector_37+0x56>
    49ee:	02 80       	ldd	r0, Z+2	; 0x02
    49f0:	f3 81       	ldd	r31, Z+3	; 0x03
    49f2:	e0 2d       	mov	r30, r0
    49f4:	93 81       	ldd	r25, Z+3	; 0x03
    49f6:	82 81       	ldd	r24, Z+2	; 0x02
    49f8:	98 17       	cp	r25, r24
    49fa:	b1 f0       	breq	.+44     	; 0x4a28 <__vector_37+0x62>
    49fc:	92 81       	ldd	r25, Z+2	; 0x02
    49fe:	85 81       	ldd	r24, Z+5	; 0x05
    4a00:	28 2f       	mov	r18, r24
    4a02:	26 95       	lsr	r18
    4a04:	29 23       	and	r18, r25
    4a06:	a0 81       	ld	r26, Z
    4a08:	b1 81       	ldd	r27, Z+1	; 0x01
    4a0a:	a2 0f       	add	r26, r18
    4a0c:	b1 1d       	adc	r27, r1
    4a0e:	2c 91       	ld	r18, X
    4a10:	9f 5f       	subi	r25, 0xFF	; 255
    4a12:	89 23       	and	r24, r25
    4a14:	82 83       	std	Z+2, r24	; 0x02
    4a16:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4a1a:	0b c0       	rjmp	.+22     	; 0x4a32 <__vector_37+0x6c>
    4a1c:	e9 ec       	ldi	r30, 0xC9	; 201
    4a1e:	f0 e0       	ldi	r31, 0x00	; 0
    4a20:	80 81       	ld	r24, Z
    4a22:	8f 7d       	andi	r24, 0xDF	; 223
    4a24:	80 83       	st	Z, r24
    4a26:	05 c0       	rjmp	.+10     	; 0x4a32 <__vector_37+0x6c>
    4a28:	e9 ec       	ldi	r30, 0xC9	; 201
    4a2a:	f0 e0       	ldi	r31, 0x00	; 0
    4a2c:	80 81       	ld	r24, Z
    4a2e:	8f 7d       	andi	r24, 0xDF	; 223
    4a30:	80 83       	st	Z, r24
    4a32:	ff 91       	pop	r31
    4a34:	ef 91       	pop	r30
    4a36:	bf 91       	pop	r27
    4a38:	af 91       	pop	r26
    4a3a:	9f 91       	pop	r25
    4a3c:	8f 91       	pop	r24
    4a3e:	2f 91       	pop	r18
    4a40:	0f 90       	pop	r0
    4a42:	0b be       	out	0x3b, r0	; 59
    4a44:	0f 90       	pop	r0
    4a46:	0f be       	out	0x3f, r0	; 63
    4a48:	0f 90       	pop	r0
    4a4a:	1f 90       	pop	r1
    4a4c:	18 95       	reti

00004a4e <__vector_51>:
    4a4e:	1f 92       	push	r1
    4a50:	0f 92       	push	r0
    4a52:	0f b6       	in	r0, 0x3f	; 63
    4a54:	0f 92       	push	r0
    4a56:	11 24       	eor	r1, r1
    4a58:	0b b6       	in	r0, 0x3b	; 59
    4a5a:	0f 92       	push	r0
    4a5c:	2f 93       	push	r18
    4a5e:	3f 93       	push	r19
    4a60:	4f 93       	push	r20
    4a62:	5f 93       	push	r21
    4a64:	6f 93       	push	r22
    4a66:	7f 93       	push	r23
    4a68:	8f 93       	push	r24
    4a6a:	9f 93       	push	r25
    4a6c:	af 93       	push	r26
    4a6e:	bf 93       	push	r27
    4a70:	cf 93       	push	r28
    4a72:	df 93       	push	r29
    4a74:	ef 93       	push	r30
    4a76:	ff 93       	push	r31
    4a78:	a0 91 bd 17 	lds	r26, 0x17BD	; 0x8017bd <_ser_handle+0x4>
    4a7c:	b0 91 be 17 	lds	r27, 0x17BE	; 0x8017be <_ser_handle+0x5>
    4a80:	10 97       	sbiw	r26, 0x00	; 0
    4a82:	11 f1       	breq	.+68     	; 0x4ac8 <__vector_51+0x7a>
    4a84:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4a88:	14 96       	adiw	r26, 0x04	; 4
    4a8a:	ed 91       	ld	r30, X+
    4a8c:	fc 91       	ld	r31, X
    4a8e:	15 97       	sbiw	r26, 0x05	; 5
    4a90:	93 81       	ldd	r25, Z+3	; 0x03
    4a92:	82 81       	ldd	r24, Z+2	; 0x02
    4a94:	25 81       	ldd	r18, Z+5	; 0x05
    4a96:	98 1b       	sub	r25, r24
    4a98:	92 23       	and	r25, r18
    4a9a:	84 81       	ldd	r24, Z+4	; 0x04
    4a9c:	98 17       	cp	r25, r24
    4a9e:	61 f0       	breq	.+24     	; 0x4ab8 <__vector_51+0x6a>
    4aa0:	83 81       	ldd	r24, Z+3	; 0x03
    4aa2:	26 95       	lsr	r18
    4aa4:	28 23       	and	r18, r24
    4aa6:	c0 81       	ld	r28, Z
    4aa8:	d1 81       	ldd	r29, Z+1	; 0x01
    4aaa:	c2 0f       	add	r28, r18
    4aac:	d1 1d       	adc	r29, r1
    4aae:	68 83       	st	Y, r22
    4ab0:	8f 5f       	subi	r24, 0xFF	; 255
    4ab2:	95 81       	ldd	r25, Z+5	; 0x05
    4ab4:	89 23       	and	r24, r25
    4ab6:	83 83       	std	Z+3, r24	; 0x03
    4ab8:	16 96       	adiw	r26, 0x06	; 6
    4aba:	ed 91       	ld	r30, X+
    4abc:	fc 91       	ld	r31, X
    4abe:	17 97       	sbiw	r26, 0x07	; 7
    4ac0:	30 97       	sbiw	r30, 0x00	; 0
    4ac2:	11 f0       	breq	.+4      	; 0x4ac8 <__vector_51+0x7a>
    4ac4:	cd 01       	movw	r24, r26
    4ac6:	19 95       	eicall
    4ac8:	ff 91       	pop	r31
    4aca:	ef 91       	pop	r30
    4acc:	df 91       	pop	r29
    4ace:	cf 91       	pop	r28
    4ad0:	bf 91       	pop	r27
    4ad2:	af 91       	pop	r26
    4ad4:	9f 91       	pop	r25
    4ad6:	8f 91       	pop	r24
    4ad8:	7f 91       	pop	r23
    4ada:	6f 91       	pop	r22
    4adc:	5f 91       	pop	r21
    4ade:	4f 91       	pop	r20
    4ae0:	3f 91       	pop	r19
    4ae2:	2f 91       	pop	r18
    4ae4:	0f 90       	pop	r0
    4ae6:	0b be       	out	0x3b, r0	; 59
    4ae8:	0f 90       	pop	r0
    4aea:	0f be       	out	0x3f, r0	; 63
    4aec:	0f 90       	pop	r0
    4aee:	1f 90       	pop	r1
    4af0:	18 95       	reti

00004af2 <__vector_52>:
    4af2:	1f 92       	push	r1
    4af4:	0f 92       	push	r0
    4af6:	0f b6       	in	r0, 0x3f	; 63
    4af8:	0f 92       	push	r0
    4afa:	11 24       	eor	r1, r1
    4afc:	0b b6       	in	r0, 0x3b	; 59
    4afe:	0f 92       	push	r0
    4b00:	2f 93       	push	r18
    4b02:	8f 93       	push	r24
    4b04:	9f 93       	push	r25
    4b06:	af 93       	push	r26
    4b08:	bf 93       	push	r27
    4b0a:	ef 93       	push	r30
    4b0c:	ff 93       	push	r31
    4b0e:	e0 91 bd 17 	lds	r30, 0x17BD	; 0x8017bd <_ser_handle+0x4>
    4b12:	f0 91 be 17 	lds	r31, 0x17BE	; 0x8017be <_ser_handle+0x5>
    4b16:	30 97       	sbiw	r30, 0x00	; 0
    4b18:	b9 f0       	breq	.+46     	; 0x4b48 <__vector_52+0x56>
    4b1a:	02 80       	ldd	r0, Z+2	; 0x02
    4b1c:	f3 81       	ldd	r31, Z+3	; 0x03
    4b1e:	e0 2d       	mov	r30, r0
    4b20:	93 81       	ldd	r25, Z+3	; 0x03
    4b22:	82 81       	ldd	r24, Z+2	; 0x02
    4b24:	98 17       	cp	r25, r24
    4b26:	b1 f0       	breq	.+44     	; 0x4b54 <__vector_52+0x62>
    4b28:	92 81       	ldd	r25, Z+2	; 0x02
    4b2a:	85 81       	ldd	r24, Z+5	; 0x05
    4b2c:	28 2f       	mov	r18, r24
    4b2e:	26 95       	lsr	r18
    4b30:	29 23       	and	r18, r25
    4b32:	a0 81       	ld	r26, Z
    4b34:	b1 81       	ldd	r27, Z+1	; 0x01
    4b36:	a2 0f       	add	r26, r18
    4b38:	b1 1d       	adc	r27, r1
    4b3a:	2c 91       	ld	r18, X
    4b3c:	9f 5f       	subi	r25, 0xFF	; 255
    4b3e:	89 23       	and	r24, r25
    4b40:	82 83       	std	Z+2, r24	; 0x02
    4b42:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4b46:	0b c0       	rjmp	.+22     	; 0x4b5e <__vector_52+0x6c>
    4b48:	e1 ed       	ldi	r30, 0xD1	; 209
    4b4a:	f0 e0       	ldi	r31, 0x00	; 0
    4b4c:	80 81       	ld	r24, Z
    4b4e:	8f 7d       	andi	r24, 0xDF	; 223
    4b50:	80 83       	st	Z, r24
    4b52:	05 c0       	rjmp	.+10     	; 0x4b5e <__vector_52+0x6c>
    4b54:	e1 ed       	ldi	r30, 0xD1	; 209
    4b56:	f0 e0       	ldi	r31, 0x00	; 0
    4b58:	80 81       	ld	r24, Z
    4b5a:	8f 7d       	andi	r24, 0xDF	; 223
    4b5c:	80 83       	st	Z, r24
    4b5e:	ff 91       	pop	r31
    4b60:	ef 91       	pop	r30
    4b62:	bf 91       	pop	r27
    4b64:	af 91       	pop	r26
    4b66:	9f 91       	pop	r25
    4b68:	8f 91       	pop	r24
    4b6a:	2f 91       	pop	r18
    4b6c:	0f 90       	pop	r0
    4b6e:	0b be       	out	0x3b, r0	; 59
    4b70:	0f 90       	pop	r0
    4b72:	0f be       	out	0x3f, r0	; 63
    4b74:	0f 90       	pop	r0
    4b76:	1f 90       	pop	r1
    4b78:	18 95       	reti

00004b7a <__vector_54>:
    4b7a:	1f 92       	push	r1
    4b7c:	0f 92       	push	r0
    4b7e:	0f b6       	in	r0, 0x3f	; 63
    4b80:	0f 92       	push	r0
    4b82:	11 24       	eor	r1, r1
    4b84:	0b b6       	in	r0, 0x3b	; 59
    4b86:	0f 92       	push	r0
    4b88:	2f 93       	push	r18
    4b8a:	3f 93       	push	r19
    4b8c:	4f 93       	push	r20
    4b8e:	5f 93       	push	r21
    4b90:	6f 93       	push	r22
    4b92:	7f 93       	push	r23
    4b94:	8f 93       	push	r24
    4b96:	9f 93       	push	r25
    4b98:	af 93       	push	r26
    4b9a:	bf 93       	push	r27
    4b9c:	cf 93       	push	r28
    4b9e:	df 93       	push	r29
    4ba0:	ef 93       	push	r30
    4ba2:	ff 93       	push	r31
    4ba4:	a0 91 bf 17 	lds	r26, 0x17BF	; 0x8017bf <_ser_handle+0x6>
    4ba8:	b0 91 c0 17 	lds	r27, 0x17C0	; 0x8017c0 <_ser_handle+0x7>
    4bac:	10 97       	sbiw	r26, 0x00	; 0
    4bae:	11 f1       	breq	.+68     	; 0x4bf4 <__vector_54+0x7a>
    4bb0:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4bb4:	14 96       	adiw	r26, 0x04	; 4
    4bb6:	ed 91       	ld	r30, X+
    4bb8:	fc 91       	ld	r31, X
    4bba:	15 97       	sbiw	r26, 0x05	; 5
    4bbc:	93 81       	ldd	r25, Z+3	; 0x03
    4bbe:	82 81       	ldd	r24, Z+2	; 0x02
    4bc0:	25 81       	ldd	r18, Z+5	; 0x05
    4bc2:	98 1b       	sub	r25, r24
    4bc4:	92 23       	and	r25, r18
    4bc6:	84 81       	ldd	r24, Z+4	; 0x04
    4bc8:	98 17       	cp	r25, r24
    4bca:	61 f0       	breq	.+24     	; 0x4be4 <__vector_54+0x6a>
    4bcc:	83 81       	ldd	r24, Z+3	; 0x03
    4bce:	26 95       	lsr	r18
    4bd0:	28 23       	and	r18, r24
    4bd2:	c0 81       	ld	r28, Z
    4bd4:	d1 81       	ldd	r29, Z+1	; 0x01
    4bd6:	c2 0f       	add	r28, r18
    4bd8:	d1 1d       	adc	r29, r1
    4bda:	68 83       	st	Y, r22
    4bdc:	8f 5f       	subi	r24, 0xFF	; 255
    4bde:	95 81       	ldd	r25, Z+5	; 0x05
    4be0:	89 23       	and	r24, r25
    4be2:	83 83       	std	Z+3, r24	; 0x03
    4be4:	16 96       	adiw	r26, 0x06	; 6
    4be6:	ed 91       	ld	r30, X+
    4be8:	fc 91       	ld	r31, X
    4bea:	17 97       	sbiw	r26, 0x07	; 7
    4bec:	30 97       	sbiw	r30, 0x00	; 0
    4bee:	11 f0       	breq	.+4      	; 0x4bf4 <__vector_54+0x7a>
    4bf0:	cd 01       	movw	r24, r26
    4bf2:	19 95       	eicall
    4bf4:	ff 91       	pop	r31
    4bf6:	ef 91       	pop	r30
    4bf8:	df 91       	pop	r29
    4bfa:	cf 91       	pop	r28
    4bfc:	bf 91       	pop	r27
    4bfe:	af 91       	pop	r26
    4c00:	9f 91       	pop	r25
    4c02:	8f 91       	pop	r24
    4c04:	7f 91       	pop	r23
    4c06:	6f 91       	pop	r22
    4c08:	5f 91       	pop	r21
    4c0a:	4f 91       	pop	r20
    4c0c:	3f 91       	pop	r19
    4c0e:	2f 91       	pop	r18
    4c10:	0f 90       	pop	r0
    4c12:	0b be       	out	0x3b, r0	; 59
    4c14:	0f 90       	pop	r0
    4c16:	0f be       	out	0x3f, r0	; 63
    4c18:	0f 90       	pop	r0
    4c1a:	1f 90       	pop	r1
    4c1c:	18 95       	reti

00004c1e <__vector_55>:
    4c1e:	1f 92       	push	r1
    4c20:	0f 92       	push	r0
    4c22:	0f b6       	in	r0, 0x3f	; 63
    4c24:	0f 92       	push	r0
    4c26:	11 24       	eor	r1, r1
    4c28:	0b b6       	in	r0, 0x3b	; 59
    4c2a:	0f 92       	push	r0
    4c2c:	2f 93       	push	r18
    4c2e:	8f 93       	push	r24
    4c30:	9f 93       	push	r25
    4c32:	af 93       	push	r26
    4c34:	bf 93       	push	r27
    4c36:	ef 93       	push	r30
    4c38:	ff 93       	push	r31
    4c3a:	e0 91 bf 17 	lds	r30, 0x17BF	; 0x8017bf <_ser_handle+0x6>
    4c3e:	f0 91 c0 17 	lds	r31, 0x17C0	; 0x8017c0 <_ser_handle+0x7>
    4c42:	30 97       	sbiw	r30, 0x00	; 0
    4c44:	b9 f0       	breq	.+46     	; 0x4c74 <__vector_55+0x56>
    4c46:	02 80       	ldd	r0, Z+2	; 0x02
    4c48:	f3 81       	ldd	r31, Z+3	; 0x03
    4c4a:	e0 2d       	mov	r30, r0
    4c4c:	93 81       	ldd	r25, Z+3	; 0x03
    4c4e:	82 81       	ldd	r24, Z+2	; 0x02
    4c50:	98 17       	cp	r25, r24
    4c52:	b1 f0       	breq	.+44     	; 0x4c80 <__vector_55+0x62>
    4c54:	92 81       	ldd	r25, Z+2	; 0x02
    4c56:	85 81       	ldd	r24, Z+5	; 0x05
    4c58:	28 2f       	mov	r18, r24
    4c5a:	26 95       	lsr	r18
    4c5c:	29 23       	and	r18, r25
    4c5e:	a0 81       	ld	r26, Z
    4c60:	b1 81       	ldd	r27, Z+1	; 0x01
    4c62:	a2 0f       	add	r26, r18
    4c64:	b1 1d       	adc	r27, r1
    4c66:	2c 91       	ld	r18, X
    4c68:	9f 5f       	subi	r25, 0xFF	; 255
    4c6a:	89 23       	and	r24, r25
    4c6c:	82 83       	std	Z+2, r24	; 0x02
    4c6e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4c72:	0b c0       	rjmp	.+22     	; 0x4c8a <__vector_55+0x6c>
    4c74:	e1 e3       	ldi	r30, 0x31	; 49
    4c76:	f1 e0       	ldi	r31, 0x01	; 1
    4c78:	80 81       	ld	r24, Z
    4c7a:	8f 7d       	andi	r24, 0xDF	; 223
    4c7c:	80 83       	st	Z, r24
    4c7e:	05 c0       	rjmp	.+10     	; 0x4c8a <__vector_55+0x6c>
    4c80:	e1 e3       	ldi	r30, 0x31	; 49
    4c82:	f1 e0       	ldi	r31, 0x01	; 1
    4c84:	80 81       	ld	r24, Z
    4c86:	8f 7d       	andi	r24, 0xDF	; 223
    4c88:	80 83       	st	Z, r24
    4c8a:	ff 91       	pop	r31
    4c8c:	ef 91       	pop	r30
    4c8e:	bf 91       	pop	r27
    4c90:	af 91       	pop	r26
    4c92:	9f 91       	pop	r25
    4c94:	8f 91       	pop	r24
    4c96:	2f 91       	pop	r18
    4c98:	0f 90       	pop	r0
    4c9a:	0b be       	out	0x3b, r0	; 59
    4c9c:	0f 90       	pop	r0
    4c9e:	0f be       	out	0x3f, r0	; 63
    4ca0:	0f 90       	pop	r0
    4ca2:	1f 90       	pop	r1
    4ca4:	18 95       	reti

00004ca6 <usart_getchar>:
    4ca6:	cf 93       	push	r28
    4ca8:	df 93       	push	r29
    4caa:	1f 92       	push	r1
    4cac:	cd b7       	in	r28, 0x3d	; 61
    4cae:	de b7       	in	r29, 0x3e	; 62
    4cb0:	be 01       	movw	r22, r28
    4cb2:	6f 5f       	subi	r22, 0xFF	; 255
    4cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    4cb6:	80 91 c1 17 	lds	r24, 0x17C1	; 0x8017c1 <_com_serial_instance>
    4cba:	90 91 c2 17 	lds	r25, 0x17C2	; 0x8017c2 <_com_serial_instance+0x1>
    4cbe:	7b dd       	rcall	.-1290   	; 0x47b6 <serial_getByte>
    4cc0:	81 11       	cpse	r24, r1
    4cc2:	f6 cf       	rjmp	.-20     	; 0x4cb0 <usart_getchar+0xa>
    4cc4:	89 81       	ldd	r24, Y+1	; 0x01
    4cc6:	90 e0       	ldi	r25, 0x00	; 0
    4cc8:	0f 90       	pop	r0
    4cca:	df 91       	pop	r29
    4ccc:	cf 91       	pop	r28
    4cce:	08 95       	ret

00004cd0 <usart_putchar>:
    4cd0:	68 2f       	mov	r22, r24
    4cd2:	80 91 c1 17 	lds	r24, 0x17C1	; 0x8017c1 <_com_serial_instance>
    4cd6:	90 91 c2 17 	lds	r25, 0x17C2	; 0x8017c2 <_com_serial_instance+0x1>
    4cda:	ed dc       	rcall	.-1574   	; 0x46b6 <serial_sendByte>
    4cdc:	80 e0       	ldi	r24, 0x00	; 0
    4cde:	90 e0       	ldi	r25, 0x00	; 0
    4ce0:	08 95       	ret

00004ce2 <stdio_initialise>:
    4ce2:	8f 92       	push	r8
    4ce4:	9f 92       	push	r9
    4ce6:	af 92       	push	r10
    4ce8:	cf 92       	push	r12
    4cea:	ef 92       	push	r14
    4cec:	0f 93       	push	r16
    4cee:	81 2c       	mov	r8, r1
    4cf0:	91 2c       	mov	r9, r1
    4cf2:	68 94       	set
    4cf4:	aa 24       	eor	r10, r10
    4cf6:	a7 f8       	bld	r10, 7
    4cf8:	68 94       	set
    4cfa:	cc 24       	eor	r12, r12
    4cfc:	c7 f8       	bld	r12, 7
    4cfe:	e1 2c       	mov	r14, r1
    4d00:	00 e0       	ldi	r16, 0x00	; 0
    4d02:	23 e0       	ldi	r18, 0x03	; 3
    4d04:	40 e0       	ldi	r20, 0x00	; 0
    4d06:	51 ee       	ldi	r21, 0xE1	; 225
    4d08:	60 e0       	ldi	r22, 0x00	; 0
    4d0a:	70 e0       	ldi	r23, 0x00	; 0
    4d0c:	2d dc       	rcall	.-1958   	; 0x4568 <serial_create>
    4d0e:	90 93 c2 17 	sts	0x17C2, r25	; 0x8017c2 <_com_serial_instance+0x1>
    4d12:	80 93 c1 17 	sts	0x17C1, r24	; 0x8017c1 <_com_serial_instance>
    4d16:	ec e0       	ldi	r30, 0x0C	; 12
    4d18:	f8 e1       	ldi	r31, 0x18	; 24
    4d1a:	83 e1       	ldi	r24, 0x13	; 19
    4d1c:	92 e0       	ldi	r25, 0x02	; 2
    4d1e:	91 83       	std	Z+1, r25	; 0x01
    4d20:	80 83       	st	Z, r24
    4d22:	93 83       	std	Z+3, r25	; 0x03
    4d24:	82 83       	std	Z+2, r24	; 0x02
    4d26:	0f 91       	pop	r16
    4d28:	ef 90       	pop	r14
    4d2a:	cf 90       	pop	r12
    4d2c:	af 90       	pop	r10
    4d2e:	9f 90       	pop	r9
    4d30:	8f 90       	pop	r8
    4d32:	08 95       	ret

00004d34 <_turn_off>:
    4d34:	90 e0       	ldi	r25, 0x00	; 0
    4d36:	fc 01       	movw	r30, r24
    4d38:	ee 0f       	add	r30, r30
    4d3a:	ff 1f       	adc	r31, r31
    4d3c:	e8 0f       	add	r30, r24
    4d3e:	f9 1f       	adc	r31, r25
    4d40:	ee 0f       	add	r30, r30
    4d42:	ff 1f       	adc	r31, r31
    4d44:	ed 53       	subi	r30, 0x3D	; 61
    4d46:	f8 4e       	sbci	r31, 0xE8	; 232
    4d48:	23 81       	ldd	r18, Z+3	; 0x03
    4d4a:	21 11       	cpse	r18, r1
    4d4c:	1f c0       	rjmp	.+62     	; 0x4d8c <_turn_off+0x58>
    4d4e:	9c 01       	movw	r18, r24
    4d50:	22 0f       	add	r18, r18
    4d52:	33 1f       	adc	r19, r19
    4d54:	f9 01       	movw	r30, r18
    4d56:	e8 0f       	add	r30, r24
    4d58:	f9 1f       	adc	r31, r25
    4d5a:	ee 0f       	add	r30, r30
    4d5c:	ff 1f       	adc	r31, r31
    4d5e:	ed 53       	subi	r30, 0x3D	; 61
    4d60:	f8 4e       	sbci	r31, 0xE8	; 232
    4d62:	a0 81       	ld	r26, Z
    4d64:	b1 81       	ldd	r27, Z+1	; 0x01
    4d66:	4c 91       	ld	r20, X
    4d68:	f9 01       	movw	r30, r18
    4d6a:	e8 0f       	add	r30, r24
    4d6c:	f9 1f       	adc	r31, r25
    4d6e:	ee 0f       	add	r30, r30
    4d70:	ff 1f       	adc	r31, r31
    4d72:	ed 53       	subi	r30, 0x3D	; 61
    4d74:	f8 4e       	sbci	r31, 0xE8	; 232
    4d76:	81 e0       	ldi	r24, 0x01	; 1
    4d78:	90 e0       	ldi	r25, 0x00	; 0
    4d7a:	02 80       	ldd	r0, Z+2	; 0x02
    4d7c:	02 c0       	rjmp	.+4      	; 0x4d82 <_turn_off+0x4e>
    4d7e:	88 0f       	add	r24, r24
    4d80:	99 1f       	adc	r25, r25
    4d82:	0a 94       	dec	r0
    4d84:	e2 f7       	brpl	.-8      	; 0x4d7e <_turn_off+0x4a>
    4d86:	84 2b       	or	r24, r20
    4d88:	8c 93       	st	X, r24
    4d8a:	08 95       	ret
    4d8c:	fc 01       	movw	r30, r24
    4d8e:	ee 0f       	add	r30, r30
    4d90:	ff 1f       	adc	r31, r31
    4d92:	df 01       	movw	r26, r30
    4d94:	a8 0f       	add	r26, r24
    4d96:	b9 1f       	adc	r27, r25
    4d98:	aa 0f       	add	r26, r26
    4d9a:	bb 1f       	adc	r27, r27
    4d9c:	ad 53       	subi	r26, 0x3D	; 61
    4d9e:	b8 4e       	sbci	r27, 0xE8	; 232
    4da0:	0d 90       	ld	r0, X+
    4da2:	bc 91       	ld	r27, X
    4da4:	a0 2d       	mov	r26, r0
    4da6:	2c 91       	ld	r18, X
    4da8:	e8 0f       	add	r30, r24
    4daa:	f9 1f       	adc	r31, r25
    4dac:	ee 0f       	add	r30, r30
    4dae:	ff 1f       	adc	r31, r31
    4db0:	ed 53       	subi	r30, 0x3D	; 61
    4db2:	f8 4e       	sbci	r31, 0xE8	; 232
    4db4:	81 e0       	ldi	r24, 0x01	; 1
    4db6:	90 e0       	ldi	r25, 0x00	; 0
    4db8:	02 80       	ldd	r0, Z+2	; 0x02
    4dba:	02 c0       	rjmp	.+4      	; 0x4dc0 <_turn_off+0x8c>
    4dbc:	88 0f       	add	r24, r24
    4dbe:	99 1f       	adc	r25, r25
    4dc0:	0a 94       	dec	r0
    4dc2:	e2 f7       	brpl	.-8      	; 0x4dbc <_turn_off+0x88>
    4dc4:	80 95       	com	r24
    4dc6:	82 23       	and	r24, r18
    4dc8:	8c 93       	st	X, r24
    4dca:	08 95       	ret

00004dcc <_turn_on>:
    4dcc:	90 e0       	ldi	r25, 0x00	; 0
    4dce:	fc 01       	movw	r30, r24
    4dd0:	ee 0f       	add	r30, r30
    4dd2:	ff 1f       	adc	r31, r31
    4dd4:	e8 0f       	add	r30, r24
    4dd6:	f9 1f       	adc	r31, r25
    4dd8:	ee 0f       	add	r30, r30
    4dda:	ff 1f       	adc	r31, r31
    4ddc:	ed 53       	subi	r30, 0x3D	; 61
    4dde:	f8 4e       	sbci	r31, 0xE8	; 232
    4de0:	23 81       	ldd	r18, Z+3	; 0x03
    4de2:	21 11       	cpse	r18, r1
    4de4:	20 c0       	rjmp	.+64     	; 0x4e26 <_turn_on+0x5a>
    4de6:	9c 01       	movw	r18, r24
    4de8:	22 0f       	add	r18, r18
    4dea:	33 1f       	adc	r19, r19
    4dec:	f9 01       	movw	r30, r18
    4dee:	e8 0f       	add	r30, r24
    4df0:	f9 1f       	adc	r31, r25
    4df2:	ee 0f       	add	r30, r30
    4df4:	ff 1f       	adc	r31, r31
    4df6:	ed 53       	subi	r30, 0x3D	; 61
    4df8:	f8 4e       	sbci	r31, 0xE8	; 232
    4dfa:	a0 81       	ld	r26, Z
    4dfc:	b1 81       	ldd	r27, Z+1	; 0x01
    4dfe:	4c 91       	ld	r20, X
    4e00:	f9 01       	movw	r30, r18
    4e02:	e8 0f       	add	r30, r24
    4e04:	f9 1f       	adc	r31, r25
    4e06:	ee 0f       	add	r30, r30
    4e08:	ff 1f       	adc	r31, r31
    4e0a:	ed 53       	subi	r30, 0x3D	; 61
    4e0c:	f8 4e       	sbci	r31, 0xE8	; 232
    4e0e:	81 e0       	ldi	r24, 0x01	; 1
    4e10:	90 e0       	ldi	r25, 0x00	; 0
    4e12:	02 80       	ldd	r0, Z+2	; 0x02
    4e14:	02 c0       	rjmp	.+4      	; 0x4e1a <_turn_on+0x4e>
    4e16:	88 0f       	add	r24, r24
    4e18:	99 1f       	adc	r25, r25
    4e1a:	0a 94       	dec	r0
    4e1c:	e2 f7       	brpl	.-8      	; 0x4e16 <_turn_on+0x4a>
    4e1e:	80 95       	com	r24
    4e20:	84 23       	and	r24, r20
    4e22:	8c 93       	st	X, r24
    4e24:	08 95       	ret
    4e26:	fc 01       	movw	r30, r24
    4e28:	ee 0f       	add	r30, r30
    4e2a:	ff 1f       	adc	r31, r31
    4e2c:	df 01       	movw	r26, r30
    4e2e:	a8 0f       	add	r26, r24
    4e30:	b9 1f       	adc	r27, r25
    4e32:	aa 0f       	add	r26, r26
    4e34:	bb 1f       	adc	r27, r27
    4e36:	ad 53       	subi	r26, 0x3D	; 61
    4e38:	b8 4e       	sbci	r27, 0xE8	; 232
    4e3a:	0d 90       	ld	r0, X+
    4e3c:	bc 91       	ld	r27, X
    4e3e:	a0 2d       	mov	r26, r0
    4e40:	2c 91       	ld	r18, X
    4e42:	e8 0f       	add	r30, r24
    4e44:	f9 1f       	adc	r31, r25
    4e46:	ee 0f       	add	r30, r30
    4e48:	ff 1f       	adc	r31, r31
    4e4a:	ed 53       	subi	r30, 0x3D	; 61
    4e4c:	f8 4e       	sbci	r31, 0xE8	; 232
    4e4e:	81 e0       	ldi	r24, 0x01	; 1
    4e50:	90 e0       	ldi	r25, 0x00	; 0
    4e52:	02 80       	ldd	r0, Z+2	; 0x02
    4e54:	02 c0       	rjmp	.+4      	; 0x4e5a <_turn_on+0x8e>
    4e56:	88 0f       	add	r24, r24
    4e58:	99 1f       	adc	r25, r25
    4e5a:	0a 94       	dec	r0
    4e5c:	e2 f7       	brpl	.-8      	; 0x4e56 <_turn_on+0x8a>
    4e5e:	82 2b       	or	r24, r18
    4e60:	8c 93       	st	X, r24
    4e62:	08 95       	ret

00004e64 <_hal_led_task>:
    4e64:	cc 24       	eor	r12, r12
    4e66:	c3 94       	inc	r12
    4e68:	d1 2c       	mov	r13, r1
    4e6a:	68 94       	set
    4e6c:	bb 24       	eor	r11, r11
    4e6e:	b2 f8       	bld	r11, 2
    4e70:	c3 ec       	ldi	r28, 0xC3	; 195
    4e72:	d7 e1       	ldi	r29, 0x17	; 23
    4e74:	10 e0       	ldi	r17, 0x00	; 0
    4e76:	8c 81       	ldd	r24, Y+4	; 0x04
    4e78:	81 30       	cpi	r24, 0x01	; 1
    4e7a:	81 f0       	breq	.+32     	; 0x4e9c <_hal_led_task+0x38>
    4e7c:	18 f1       	brcs	.+70     	; 0x4ec4 <_hal_led_task+0x60>
    4e7e:	82 30       	cpi	r24, 0x02	; 2
    4e80:	61 f5       	brne	.+88     	; 0x4eda <_hal_led_task+0x76>
    4e82:	e8 81       	ld	r30, Y
    4e84:	f9 81       	ldd	r31, Y+1	; 0x01
    4e86:	20 81       	ld	r18, Z
    4e88:	c6 01       	movw	r24, r12
    4e8a:	0a 80       	ldd	r0, Y+2	; 0x02
    4e8c:	02 c0       	rjmp	.+4      	; 0x4e92 <_hal_led_task+0x2e>
    4e8e:	88 0f       	add	r24, r24
    4e90:	99 1f       	adc	r25, r25
    4e92:	0a 94       	dec	r0
    4e94:	e2 f7       	brpl	.-8      	; 0x4e8e <_hal_led_task+0x2a>
    4e96:	82 27       	eor	r24, r18
    4e98:	80 83       	st	Z, r24
    4e9a:	1f c0       	rjmp	.+62     	; 0x4eda <_hal_led_task+0x76>
    4e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    4e9e:	8f 5f       	subi	r24, 0xFF	; 255
    4ea0:	86 30       	cpi	r24, 0x06	; 6
    4ea2:	10 f4       	brcc	.+4      	; 0x4ea8 <_hal_led_task+0x44>
    4ea4:	8d 83       	std	Y+5, r24	; 0x05
    4ea6:	19 c0       	rjmp	.+50     	; 0x4eda <_hal_led_task+0x76>
    4ea8:	1d 82       	std	Y+5, r1	; 0x05
    4eaa:	e8 81       	ld	r30, Y
    4eac:	f9 81       	ldd	r31, Y+1	; 0x01
    4eae:	20 81       	ld	r18, Z
    4eb0:	c6 01       	movw	r24, r12
    4eb2:	0a 80       	ldd	r0, Y+2	; 0x02
    4eb4:	02 c0       	rjmp	.+4      	; 0x4eba <_hal_led_task+0x56>
    4eb6:	88 0f       	add	r24, r24
    4eb8:	99 1f       	adc	r25, r25
    4eba:	0a 94       	dec	r0
    4ebc:	e2 f7       	brpl	.-8      	; 0x4eb6 <_hal_led_task+0x52>
    4ebe:	82 27       	eor	r24, r18
    4ec0:	80 83       	st	Z, r24
    4ec2:	0b c0       	rjmp	.+22     	; 0x4eda <_hal_led_task+0x76>
    4ec4:	0d 81       	ldd	r16, Y+5	; 0x05
    4ec6:	00 23       	and	r16, r16
    4ec8:	29 f0       	breq	.+10     	; 0x4ed4 <_hal_led_task+0x70>
    4eca:	81 2f       	mov	r24, r17
    4ecc:	7f df       	rcall	.-258    	; 0x4dcc <_turn_on>
    4ece:	01 50       	subi	r16, 0x01	; 1
    4ed0:	0d 83       	std	Y+5, r16	; 0x05
    4ed2:	03 c0       	rjmp	.+6      	; 0x4eda <_hal_led_task+0x76>
    4ed4:	bc 82       	std	Y+4, r11	; 0x04
    4ed6:	81 2f       	mov	r24, r17
    4ed8:	2d df       	rcall	.-422    	; 0x4d34 <_turn_off>
    4eda:	1f 5f       	subi	r17, 0xFF	; 255
    4edc:	26 96       	adiw	r28, 0x06	; 6
    4ede:	14 30       	cpi	r17, 0x04	; 4
    4ee0:	51 f6       	brne	.-108    	; 0x4e76 <_hal_led_task+0x12>
    4ee2:	6c e0       	ldi	r22, 0x0C	; 12
    4ee4:	70 e0       	ldi	r23, 0x00	; 0
    4ee6:	80 e0       	ldi	r24, 0x00	; 0
    4ee8:	90 e0       	ldi	r25, 0x00	; 0
    4eea:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <vTaskDelay>
    4eee:	c0 cf       	rjmp	.-128    	; 0x4e70 <_hal_led_task+0xc>

00004ef0 <status_leds_initialise>:
    4ef0:	ef 92       	push	r14
    4ef2:	ff 92       	push	r15
    4ef4:	0f 93       	push	r16
    4ef6:	1f 93       	push	r17
    4ef8:	cf 93       	push	r28
    4efa:	df 93       	push	r29
    4efc:	08 2f       	mov	r16, r24
    4efe:	80 e4       	ldi	r24, 0x40	; 64
    4f00:	87 b9       	out	0x07, r24	; 7
    4f02:	c3 ec       	ldi	r28, 0xC3	; 195
    4f04:	d7 e1       	ldi	r29, 0x17	; 23
    4f06:	0f 2e       	mov	r0, r31
    4f08:	f8 e2       	ldi	r31, 0x28	; 40
    4f0a:	ef 2e       	mov	r14, r31
    4f0c:	f1 2c       	mov	r15, r1
    4f0e:	f0 2d       	mov	r31, r0
    4f10:	f9 82       	std	Y+1, r15	; 0x01
    4f12:	e8 82       	st	Y, r14
    4f14:	86 e0       	ldi	r24, 0x06	; 6
    4f16:	8a 83       	std	Y+2, r24	; 0x02
    4f18:	1b 82       	std	Y+3, r1	; 0x03
    4f1a:	14 e0       	ldi	r17, 0x04	; 4
    4f1c:	1c 83       	std	Y+4, r17	; 0x04
    4f1e:	80 e0       	ldi	r24, 0x00	; 0
    4f20:	09 df       	rcall	.-494    	; 0x4d34 <_turn_off>
    4f22:	80 e8       	ldi	r24, 0x80	; 128
    4f24:	87 b9       	out	0x07, r24	; 7
    4f26:	ff 82       	std	Y+7, r15	; 0x07
    4f28:	ee 82       	std	Y+6, r14	; 0x06
    4f2a:	87 e0       	ldi	r24, 0x07	; 7
    4f2c:	88 87       	std	Y+8, r24	; 0x08
    4f2e:	19 86       	std	Y+9, r1	; 0x09
    4f30:	1a 87       	std	Y+10, r17	; 0x0a
    4f32:	81 e0       	ldi	r24, 0x01	; 1
    4f34:	ff de       	rcall	.-514    	; 0x4d34 <_turn_off>
    4f36:	80 e2       	ldi	r24, 0x20	; 32
    4f38:	83 bb       	out	0x13, r24	; 19
    4f3a:	84 e3       	ldi	r24, 0x34	; 52
    4f3c:	90 e0       	ldi	r25, 0x00	; 0
    4f3e:	9d 87       	std	Y+13, r25	; 0x0d
    4f40:	8c 87       	std	Y+12, r24	; 0x0c
    4f42:	85 e0       	ldi	r24, 0x05	; 5
    4f44:	8e 87       	std	Y+14, r24	; 0x0e
    4f46:	1f 86       	std	Y+15, r1	; 0x0f
    4f48:	18 8b       	std	Y+16, r17	; 0x10
    4f4a:	82 e0       	ldi	r24, 0x02	; 2
    4f4c:	f3 de       	rcall	.-538    	; 0x4d34 <_turn_off>
    4f4e:	80 e1       	ldi	r24, 0x10	; 16
    4f50:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    4f54:	82 e0       	ldi	r24, 0x02	; 2
    4f56:	91 e0       	ldi	r25, 0x01	; 1
    4f58:	9b 8b       	std	Y+19, r25	; 0x13
    4f5a:	8a 8b       	std	Y+18, r24	; 0x12
    4f5c:	1c 8b       	std	Y+20, r17	; 0x14
    4f5e:	1d 8a       	std	Y+21, r1	; 0x15
    4f60:	1e 8b       	std	Y+22, r17	; 0x16
    4f62:	83 e0       	ldi	r24, 0x03	; 3
    4f64:	e7 de       	rcall	.-562    	; 0x4d34 <_turn_off>
    4f66:	e1 2c       	mov	r14, r1
    4f68:	f1 2c       	mov	r15, r1
    4f6a:	20 e0       	ldi	r18, 0x00	; 0
    4f6c:	30 e0       	ldi	r19, 0x00	; 0
    4f6e:	40 ec       	ldi	r20, 0xC0	; 192
    4f70:	50 e0       	ldi	r21, 0x00	; 0
    4f72:	6d ef       	ldi	r22, 0xFD	; 253
    4f74:	77 e0       	ldi	r23, 0x07	; 7
    4f76:	82 e3       	ldi	r24, 0x32	; 50
    4f78:	97 e2       	ldi	r25, 0x27	; 39
    4f7a:	0e 94 b6 0c 	call	0x196c	; 0x196c <xTaskCreate>
    4f7e:	df 91       	pop	r29
    4f80:	cf 91       	pop	r28
    4f82:	1f 91       	pop	r17
    4f84:	0f 91       	pop	r16
    4f86:	ff 90       	pop	r15
    4f88:	ef 90       	pop	r14
    4f8a:	08 95       	ret

00004f8c <status_leds_slowBlink>:
    4f8c:	cf 93       	push	r28
    4f8e:	df 93       	push	r29
    4f90:	90 e0       	ldi	r25, 0x00	; 0
    4f92:	fc 01       	movw	r30, r24
    4f94:	ee 0f       	add	r30, r30
    4f96:	ff 1f       	adc	r31, r31
    4f98:	df 01       	movw	r26, r30
    4f9a:	a8 0f       	add	r26, r24
    4f9c:	b9 1f       	adc	r27, r25
    4f9e:	aa 0f       	add	r26, r26
    4fa0:	bb 1f       	adc	r27, r27
    4fa2:	ad 53       	subi	r26, 0x3D	; 61
    4fa4:	b8 4e       	sbci	r27, 0xE8	; 232
    4fa6:	cd 91       	ld	r28, X+
    4fa8:	dc 91       	ld	r29, X
    4faa:	11 97       	sbiw	r26, 0x01	; 1
    4fac:	48 81       	ld	r20, Y
    4fae:	21 e0       	ldi	r18, 0x01	; 1
    4fb0:	30 e0       	ldi	r19, 0x00	; 0
    4fb2:	12 96       	adiw	r26, 0x02	; 2
    4fb4:	0c 90       	ld	r0, X
    4fb6:	12 97       	sbiw	r26, 0x02	; 2
    4fb8:	02 c0       	rjmp	.+4      	; 0x4fbe <status_leds_slowBlink+0x32>
    4fba:	22 0f       	add	r18, r18
    4fbc:	33 1f       	adc	r19, r19
    4fbe:	0a 94       	dec	r0
    4fc0:	e2 f7       	brpl	.-8      	; 0x4fba <status_leds_slowBlink+0x2e>
    4fc2:	24 27       	eor	r18, r20
    4fc4:	28 83       	st	Y, r18
    4fc6:	fd 01       	movw	r30, r26
    4fc8:	81 e0       	ldi	r24, 0x01	; 1
    4fca:	84 83       	std	Z+4, r24	; 0x04
    4fcc:	df 91       	pop	r29
    4fce:	cf 91       	pop	r28
    4fd0:	08 95       	ret

00004fd2 <status_leds_fastBlink>:
    4fd2:	cf 93       	push	r28
    4fd4:	df 93       	push	r29
    4fd6:	90 e0       	ldi	r25, 0x00	; 0
    4fd8:	fc 01       	movw	r30, r24
    4fda:	ee 0f       	add	r30, r30
    4fdc:	ff 1f       	adc	r31, r31
    4fde:	df 01       	movw	r26, r30
    4fe0:	a8 0f       	add	r26, r24
    4fe2:	b9 1f       	adc	r27, r25
    4fe4:	aa 0f       	add	r26, r26
    4fe6:	bb 1f       	adc	r27, r27
    4fe8:	ad 53       	subi	r26, 0x3D	; 61
    4fea:	b8 4e       	sbci	r27, 0xE8	; 232
    4fec:	cd 91       	ld	r28, X+
    4fee:	dc 91       	ld	r29, X
    4ff0:	11 97       	sbiw	r26, 0x01	; 1
    4ff2:	48 81       	ld	r20, Y
    4ff4:	21 e0       	ldi	r18, 0x01	; 1
    4ff6:	30 e0       	ldi	r19, 0x00	; 0
    4ff8:	12 96       	adiw	r26, 0x02	; 2
    4ffa:	0c 90       	ld	r0, X
    4ffc:	12 97       	sbiw	r26, 0x02	; 2
    4ffe:	02 c0       	rjmp	.+4      	; 0x5004 <status_leds_fastBlink+0x32>
    5000:	22 0f       	add	r18, r18
    5002:	33 1f       	adc	r19, r19
    5004:	0a 94       	dec	r0
    5006:	e2 f7       	brpl	.-8      	; 0x5000 <status_leds_fastBlink+0x2e>
    5008:	24 27       	eor	r18, r20
    500a:	28 83       	st	Y, r18
    500c:	fd 01       	movw	r30, r26
    500e:	82 e0       	ldi	r24, 0x02	; 2
    5010:	84 83       	std	Z+4, r24	; 0x04
    5012:	df 91       	pop	r29
    5014:	cf 91       	pop	r28
    5016:	08 95       	ret

00005018 <status_leds_ledOn>:
    5018:	28 2f       	mov	r18, r24
    501a:	30 e0       	ldi	r19, 0x00	; 0
    501c:	f9 01       	movw	r30, r18
    501e:	ee 0f       	add	r30, r30
    5020:	ff 1f       	adc	r31, r31
    5022:	e2 0f       	add	r30, r18
    5024:	f3 1f       	adc	r31, r19
    5026:	ee 0f       	add	r30, r30
    5028:	ff 1f       	adc	r31, r31
    502a:	ed 53       	subi	r30, 0x3D	; 61
    502c:	f8 4e       	sbci	r31, 0xE8	; 232
    502e:	93 e0       	ldi	r25, 0x03	; 3
    5030:	94 83       	std	Z+4, r25	; 0x04
    5032:	cc ce       	rjmp	.-616    	; 0x4dcc <_turn_on>
    5034:	08 95       	ret

00005036 <status_leds_ledOff>:
    5036:	28 2f       	mov	r18, r24
    5038:	30 e0       	ldi	r19, 0x00	; 0
    503a:	f9 01       	movw	r30, r18
    503c:	ee 0f       	add	r30, r30
    503e:	ff 1f       	adc	r31, r31
    5040:	e2 0f       	add	r30, r18
    5042:	f3 1f       	adc	r31, r19
    5044:	ee 0f       	add	r30, r30
    5046:	ff 1f       	adc	r31, r31
    5048:	ed 53       	subi	r30, 0x3D	; 61
    504a:	f8 4e       	sbci	r31, 0xE8	; 232
    504c:	94 e0       	ldi	r25, 0x04	; 4
    504e:	94 83       	std	Z+4, r25	; 0x04
    5050:	71 ce       	rjmp	.-798    	; 0x4d34 <_turn_off>
    5052:	08 95       	ret

00005054 <status_leds_longPuls>:
    5054:	90 e0       	ldi	r25, 0x00	; 0
    5056:	fc 01       	movw	r30, r24
    5058:	ee 0f       	add	r30, r30
    505a:	ff 1f       	adc	r31, r31
    505c:	df 01       	movw	r26, r30
    505e:	a8 0f       	add	r26, r24
    5060:	b9 1f       	adc	r27, r25
    5062:	aa 0f       	add	r26, r26
    5064:	bb 1f       	adc	r27, r27
    5066:	ad 53       	subi	r26, 0x3D	; 61
    5068:	b8 4e       	sbci	r27, 0xE8	; 232
    506a:	26 e0       	ldi	r18, 0x06	; 6
    506c:	15 96       	adiw	r26, 0x05	; 5
    506e:	2c 93       	st	X, r18
    5070:	15 97       	sbiw	r26, 0x05	; 5
    5072:	fd 01       	movw	r30, r26
    5074:	14 82       	std	Z+4, r1	; 0x04
    5076:	08 95       	ret

00005078 <status_leds_shortPuls>:
    5078:	90 e0       	ldi	r25, 0x00	; 0
    507a:	fc 01       	movw	r30, r24
    507c:	ee 0f       	add	r30, r30
    507e:	ff 1f       	adc	r31, r31
    5080:	df 01       	movw	r26, r30
    5082:	a8 0f       	add	r26, r24
    5084:	b9 1f       	adc	r27, r25
    5086:	aa 0f       	add	r26, r26
    5088:	bb 1f       	adc	r27, r27
    508a:	ad 53       	subi	r26, 0x3D	; 61
    508c:	b8 4e       	sbci	r27, 0xE8	; 232
    508e:	15 96       	adiw	r26, 0x05	; 5
    5090:	1c 92       	st	X, r1
    5092:	15 97       	sbiw	r26, 0x05	; 5
    5094:	fd 01       	movw	r30, r26
    5096:	14 82       	std	Z+4, r1	; 0x04
    5098:	08 95       	ret

0000509a <_callBack>:
    509a:	e0 91 e3 17 	lds	r30, 0x17E3	; 0x8017e3 <_callBackFunction>
    509e:	f0 91 e4 17 	lds	r31, 0x17E4	; 0x8017e4 <_callBackFunction+0x1>
    50a2:	30 97       	sbiw	r30, 0x00	; 0
    50a4:	09 f0       	breq	.+2      	; 0x50a8 <_callBack+0xe>
    50a6:	19 95       	eicall
    50a8:	08 95       	ret

000050aa <_tsl2591TwiCallback>:
    50aa:	64 50       	subi	r22, 0x04	; 4
    50ac:	62 30       	cpi	r22, 0x02	; 2
    50ae:	08 f0       	brcs	.+2      	; 0x50b2 <_tsl2591TwiCallback+0x8>
    50b0:	3b c0       	rjmp	.+118    	; 0x5128 <_tsl2591TwiCallback+0x7e>
    50b2:	20 91 e2 17 	lds	r18, 0x17E2	; 0x8017e2 <_nextState>
    50b6:	22 30       	cpi	r18, 0x02	; 2
    50b8:	79 f0       	breq	.+30     	; 0x50d8 <_tsl2591TwiCallback+0x2e>
    50ba:	18 f4       	brcc	.+6      	; 0x50c2 <_tsl2591TwiCallback+0x18>
    50bc:	21 30       	cpi	r18, 0x01	; 1
    50be:	31 f0       	breq	.+12     	; 0x50cc <_tsl2591TwiCallback+0x22>
    50c0:	30 c0       	rjmp	.+96     	; 0x5122 <_tsl2591TwiCallback+0x78>
    50c2:	23 30       	cpi	r18, 0x03	; 3
    50c4:	81 f0       	breq	.+32     	; 0x50e6 <_tsl2591TwiCallback+0x3c>
    50c6:	24 30       	cpi	r18, 0x04	; 4
    50c8:	a1 f0       	breq	.+40     	; 0x50f2 <_tsl2591TwiCallback+0x48>
    50ca:	2b c0       	rjmp	.+86     	; 0x5122 <_tsl2591TwiCallback+0x78>
    50cc:	22 e0       	ldi	r18, 0x02	; 2
    50ce:	20 93 e2 17 	sts	0x17E2, r18	; 0x8017e2 <_nextState>
    50d2:	61 e0       	ldi	r22, 0x01	; 1
    50d4:	0a c2       	rjmp	.+1044   	; 0x54ea <twiReceive>
    50d6:	08 95       	ret
    50d8:	fa 01       	movw	r30, r20
    50da:	80 81       	ld	r24, Z
    50dc:	80 93 df 17 	sts	0x17DF, r24	; 0x8017df <_deviceId>
    50e0:	82 e0       	ldi	r24, 0x02	; 2
    50e2:	db cf       	rjmp	.-74     	; 0x509a <_callBack>
    50e4:	08 95       	ret
    50e6:	24 e0       	ldi	r18, 0x04	; 4
    50e8:	20 93 e2 17 	sts	0x17E2, r18	; 0x8017e2 <_nextState>
    50ec:	64 e0       	ldi	r22, 0x04	; 4
    50ee:	fd c1       	rjmp	.+1018   	; 0x54ea <twiReceive>
    50f0:	08 95       	ret
    50f2:	fa 01       	movw	r30, r20
    50f4:	81 81       	ldd	r24, Z+1	; 0x01
    50f6:	90 e0       	ldi	r25, 0x00	; 0
    50f8:	98 2f       	mov	r25, r24
    50fa:	88 27       	eor	r24, r24
    50fc:	20 81       	ld	r18, Z
    50fe:	82 2b       	or	r24, r18
    5100:	90 93 de 17 	sts	0x17DE, r25	; 0x8017de <_fullSpectrumRaw+0x1>
    5104:	80 93 dd 17 	sts	0x17DD, r24	; 0x8017dd <_fullSpectrumRaw>
    5108:	83 81       	ldd	r24, Z+3	; 0x03
    510a:	90 e0       	ldi	r25, 0x00	; 0
    510c:	98 2f       	mov	r25, r24
    510e:	88 27       	eor	r24, r24
    5110:	22 81       	ldd	r18, Z+2	; 0x02
    5112:	82 2b       	or	r24, r18
    5114:	90 93 dc 17 	sts	0x17DC, r25	; 0x8017dc <_infraredRaw+0x1>
    5118:	80 93 db 17 	sts	0x17DB, r24	; 0x8017db <_infraredRaw>
    511c:	81 e0       	ldi	r24, 0x01	; 1
    511e:	bd cf       	rjmp	.-134    	; 0x509a <_callBack>
    5120:	08 95       	ret
    5122:	80 e0       	ldi	r24, 0x00	; 0
    5124:	ba cf       	rjmp	.-140    	; 0x509a <_callBack>
    5126:	08 95       	ret
    5128:	10 92 e2 17 	sts	0x17E2, r1	; 0x8017e2 <_nextState>
    512c:	86 e0       	ldi	r24, 0x06	; 6
    512e:	b5 cf       	rjmp	.-150    	; 0x509a <_callBack>
    5130:	08 95       	ret

00005132 <_twiTransmit>:
    5132:	20 91 e5 17 	lds	r18, 0x17E5	; 0x8017e5 <_twiHandler>
    5136:	30 91 e6 17 	lds	r19, 0x17E6	; 0x8017e6 <_twiHandler+0x1>
    513a:	21 15       	cp	r18, r1
    513c:	31 05       	cpc	r19, r1
    513e:	41 f0       	breq	.+16     	; 0x5150 <_twiTransmit+0x1e>
    5140:	46 2f       	mov	r20, r22
    5142:	bc 01       	movw	r22, r24
    5144:	c9 01       	movw	r24, r18
    5146:	85 d1       	rcall	.+778    	; 0x5452 <twiTransmit>
    5148:	82 30       	cpi	r24, 0x02	; 2
    514a:	21 f0       	breq	.+8      	; 0x5154 <_twiTransmit+0x22>
    514c:	80 e0       	ldi	r24, 0x00	; 0
    514e:	08 95       	ret
    5150:	87 e0       	ldi	r24, 0x07	; 7
    5152:	08 95       	ret
    5154:	85 e0       	ldi	r24, 0x05	; 5
    5156:	08 95       	ret

00005158 <tsl2591_initialise>:
    5158:	0f 93       	push	r16
    515a:	1f 93       	push	r17
    515c:	90 93 e4 17 	sts	0x17E4, r25	; 0x8017e4 <_callBackFunction+0x1>
    5160:	80 93 e3 17 	sts	0x17E3, r24	; 0x8017e3 <_callBackFunction>
    5164:	05 e5       	ldi	r16, 0x55	; 85
    5166:	18 e2       	ldi	r17, 0x28	; 40
    5168:	20 e0       	ldi	r18, 0x00	; 0
    516a:	34 e2       	ldi	r19, 0x24	; 36
    516c:	44 ef       	ldi	r20, 0xF4	; 244
    516e:	50 e0       	ldi	r21, 0x00	; 0
    5170:	60 e0       	ldi	r22, 0x00	; 0
    5172:	89 e2       	ldi	r24, 0x29	; 41
    5174:	1d d1       	rcall	.+570    	; 0x53b0 <twiCreate>
    5176:	90 93 e6 17 	sts	0x17E6, r25	; 0x8017e6 <_twiHandler+0x1>
    517a:	80 93 e5 17 	sts	0x17E5, r24	; 0x8017e5 <_twiHandler>
    517e:	89 2b       	or	r24, r25
    5180:	11 f0       	breq	.+4      	; 0x5186 <tsl2591_initialise+0x2e>
    5182:	80 e0       	ldi	r24, 0x00	; 0
    5184:	01 c0       	rjmp	.+2      	; 0x5188 <tsl2591_initialise+0x30>
    5186:	88 e0       	ldi	r24, 0x08	; 8
    5188:	1f 91       	pop	r17
    518a:	0f 91       	pop	r16
    518c:	08 95       	ret

0000518e <tsl2591_enable>:
    518e:	cf 93       	push	r28
    5190:	df 93       	push	r29
    5192:	1f 92       	push	r1
    5194:	1f 92       	push	r1
    5196:	cd b7       	in	r28, 0x3d	; 61
    5198:	de b7       	in	r29, 0x3e	; 62
    519a:	80 ea       	ldi	r24, 0xA0	; 160
    519c:	89 83       	std	Y+1, r24	; 0x01
    519e:	83 e0       	ldi	r24, 0x03	; 3
    51a0:	8a 83       	std	Y+2, r24	; 0x02
    51a2:	10 92 e2 17 	sts	0x17E2, r1	; 0x8017e2 <_nextState>
    51a6:	62 e0       	ldi	r22, 0x02	; 2
    51a8:	ce 01       	movw	r24, r28
    51aa:	01 96       	adiw	r24, 0x01	; 1
    51ac:	c2 df       	rcall	.-124    	; 0x5132 <_twiTransmit>
    51ae:	0f 90       	pop	r0
    51b0:	0f 90       	pop	r0
    51b2:	df 91       	pop	r29
    51b4:	cf 91       	pop	r28
    51b6:	08 95       	ret

000051b8 <tsl2591_fetchData>:
    51b8:	cf 93       	push	r28
    51ba:	df 93       	push	r29
    51bc:	1f 92       	push	r1
    51be:	cd b7       	in	r28, 0x3d	; 61
    51c0:	de b7       	in	r29, 0x3e	; 62
    51c2:	84 eb       	ldi	r24, 0xB4	; 180
    51c4:	89 83       	std	Y+1, r24	; 0x01
    51c6:	83 e0       	ldi	r24, 0x03	; 3
    51c8:	80 93 e2 17 	sts	0x17E2, r24	; 0x8017e2 <_nextState>
    51cc:	61 e0       	ldi	r22, 0x01	; 1
    51ce:	ce 01       	movw	r24, r28
    51d0:	01 96       	adiw	r24, 0x01	; 1
    51d2:	af df       	rcall	.-162    	; 0x5132 <_twiTransmit>
    51d4:	0f 90       	pop	r0
    51d6:	df 91       	pop	r29
    51d8:	cf 91       	pop	r28
    51da:	08 95       	ret

000051dc <tsl2591_getLux>:
    51dc:	2f 92       	push	r2
    51de:	3f 92       	push	r3
    51e0:	4f 92       	push	r4
    51e2:	5f 92       	push	r5
    51e4:	6f 92       	push	r6
    51e6:	7f 92       	push	r7
    51e8:	8f 92       	push	r8
    51ea:	9f 92       	push	r9
    51ec:	af 92       	push	r10
    51ee:	bf 92       	push	r11
    51f0:	cf 92       	push	r12
    51f2:	df 92       	push	r13
    51f4:	ef 92       	push	r14
    51f6:	ff 92       	push	r15
    51f8:	0f 93       	push	r16
    51fa:	1f 93       	push	r17
    51fc:	cf 93       	push	r28
    51fe:	df 93       	push	r29
    5200:	c0 91 db 17 	lds	r28, 0x17DB	; 0x8017db <_infraredRaw>
    5204:	d0 91 dc 17 	lds	r29, 0x17DC	; 0x8017dc <_infraredRaw+0x1>
    5208:	cf 3f       	cpi	r28, 0xFF	; 255
    520a:	2f ef       	ldi	r18, 0xFF	; 255
    520c:	d2 07       	cpc	r29, r18
    520e:	41 f0       	breq	.+16     	; 0x5220 <tsl2591_getLux+0x44>
    5210:	60 91 dd 17 	lds	r22, 0x17DD	; 0x8017dd <_fullSpectrumRaw>
    5214:	70 91 de 17 	lds	r23, 0x17DE	; 0x8017de <_fullSpectrumRaw+0x1>
    5218:	6f 3f       	cpi	r22, 0xFF	; 255
    521a:	ef ef       	ldi	r30, 0xFF	; 255
    521c:	7e 07       	cpc	r23, r30
    521e:	59 f4       	brne	.+22     	; 0x5236 <tsl2591_getLux+0x5a>
    5220:	4f ef       	ldi	r20, 0xFF	; 255
    5222:	5f ef       	ldi	r21, 0xFF	; 255
    5224:	6f e7       	ldi	r22, 0x7F	; 127
    5226:	7f e7       	ldi	r23, 0x7F	; 127
    5228:	fc 01       	movw	r30, r24
    522a:	40 83       	st	Z, r20
    522c:	51 83       	std	Z+1, r21	; 0x01
    522e:	62 83       	std	Z+2, r22	; 0x02
    5230:	73 83       	std	Z+3, r23	; 0x03
    5232:	83 e0       	ldi	r24, 0x03	; 3
    5234:	99 c0       	rjmp	.+306    	; 0x5368 <tsl2591_getLux+0x18c>
    5236:	1c 01       	movw	r2, r24
    5238:	80 e0       	ldi	r24, 0x00	; 0
    523a:	90 e0       	ldi	r25, 0x00	; 0
    523c:	34 d3       	rcall	.+1640   	; 0x58a6 <__floatunsisf>
    523e:	2b 01       	movw	r4, r22
    5240:	3c 01       	movw	r6, r24
    5242:	be 01       	movw	r22, r28
    5244:	80 e0       	ldi	r24, 0x00	; 0
    5246:	90 e0       	ldi	r25, 0x00	; 0
    5248:	2e d3       	rcall	.+1628   	; 0x58a6 <__floatunsisf>
    524a:	4b 01       	movw	r8, r22
    524c:	5c 01       	movw	r10, r24
    524e:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <_currentIntegrationTime>
    5252:	90 e0       	ldi	r25, 0x00	; 0
    5254:	01 96       	adiw	r24, 0x01	; 1
    5256:	24 e6       	ldi	r18, 0x64	; 100
    5258:	28 9f       	mul	r18, r24
    525a:	b0 01       	movw	r22, r0
    525c:	29 9f       	mul	r18, r25
    525e:	70 0d       	add	r23, r0
    5260:	11 24       	eor	r1, r1
    5262:	80 91 e1 17 	lds	r24, 0x17E1	; 0x8017e1 <_currentGain>
    5266:	80 32       	cpi	r24, 0x20	; 32
    5268:	69 f0       	breq	.+26     	; 0x5284 <tsl2591_getLux+0xa8>
    526a:	80 33       	cpi	r24, 0x30	; 48
    526c:	a1 f0       	breq	.+40     	; 0x5296 <tsl2591_getLux+0xba>
    526e:	80 31       	cpi	r24, 0x10	; 16
    5270:	e1 f4       	brne	.+56     	; 0x52aa <tsl2591_getLux+0xce>
    5272:	0f 2e       	mov	r0, r31
    5274:	c1 2c       	mov	r12, r1
    5276:	d1 2c       	mov	r13, r1
    5278:	f8 ec       	ldi	r31, 0xC8	; 200
    527a:	ef 2e       	mov	r14, r31
    527c:	f1 e4       	ldi	r31, 0x41	; 65
    527e:	ff 2e       	mov	r15, r31
    5280:	f0 2d       	mov	r31, r0
    5282:	1b c0       	rjmp	.+54     	; 0x52ba <tsl2591_getLux+0xde>
    5284:	0f 2e       	mov	r0, r31
    5286:	c1 2c       	mov	r12, r1
    5288:	d1 2c       	mov	r13, r1
    528a:	f6 ed       	ldi	r31, 0xD6	; 214
    528c:	ef 2e       	mov	r14, r31
    528e:	f3 e4       	ldi	r31, 0x43	; 67
    5290:	ff 2e       	mov	r15, r31
    5292:	f0 2d       	mov	r31, r0
    5294:	12 c0       	rjmp	.+36     	; 0x52ba <tsl2591_getLux+0xde>
    5296:	0f 2e       	mov	r0, r31
    5298:	c1 2c       	mov	r12, r1
    529a:	f0 e5       	ldi	r31, 0x50	; 80
    529c:	df 2e       	mov	r13, r31
    529e:	fa e1       	ldi	r31, 0x1A	; 26
    52a0:	ef 2e       	mov	r14, r31
    52a2:	f6 e4       	ldi	r31, 0x46	; 70
    52a4:	ff 2e       	mov	r15, r31
    52a6:	f0 2d       	mov	r31, r0
    52a8:	08 c0       	rjmp	.+16     	; 0x52ba <tsl2591_getLux+0xde>
    52aa:	0f 2e       	mov	r0, r31
    52ac:	c1 2c       	mov	r12, r1
    52ae:	d1 2c       	mov	r13, r1
    52b0:	f0 e8       	ldi	r31, 0x80	; 128
    52b2:	ef 2e       	mov	r14, r31
    52b4:	ff e3       	ldi	r31, 0x3F	; 63
    52b6:	ff 2e       	mov	r15, r31
    52b8:	f0 2d       	mov	r31, r0
    52ba:	07 2e       	mov	r0, r23
    52bc:	00 0c       	add	r0, r0
    52be:	88 0b       	sbc	r24, r24
    52c0:	99 0b       	sbc	r25, r25
    52c2:	f3 d2       	rcall	.+1510   	; 0x58aa <__floatsisf>
    52c4:	a7 01       	movw	r20, r14
    52c6:	96 01       	movw	r18, r12
    52c8:	57 d3       	rcall	.+1710   	; 0x5978 <__mulsf3>
    52ca:	20 e0       	ldi	r18, 0x00	; 0
    52cc:	30 e0       	ldi	r19, 0x00	; 0
    52ce:	4c ec       	ldi	r20, 0xCC	; 204
    52d0:	53 e4       	ldi	r21, 0x43	; 67
    52d2:	7e d2       	rcall	.+1276   	; 0x57d0 <__divsf3>
    52d4:	6b 01       	movw	r12, r22
    52d6:	7c 01       	movw	r14, r24
    52d8:	25 e8       	ldi	r18, 0x85	; 133
    52da:	3b ee       	ldi	r19, 0xEB	; 235
    52dc:	41 ed       	ldi	r20, 0xD1	; 209
    52de:	5f e3       	ldi	r21, 0x3F	; 63
    52e0:	c5 01       	movw	r24, r10
    52e2:	b4 01       	movw	r22, r8
    52e4:	49 d3       	rcall	.+1682   	; 0x5978 <__mulsf3>
    52e6:	9b 01       	movw	r18, r22
    52e8:	ac 01       	movw	r20, r24
    52ea:	c3 01       	movw	r24, r6
    52ec:	b2 01       	movw	r22, r4
    52ee:	09 d2       	rcall	.+1042   	; 0x5702 <__subsf3>
    52f0:	a7 01       	movw	r20, r14
    52f2:	96 01       	movw	r18, r12
    52f4:	6d d2       	rcall	.+1242   	; 0x57d0 <__divsf3>
    52f6:	16 2f       	mov	r17, r22
    52f8:	d7 2f       	mov	r29, r23
    52fa:	c8 2f       	mov	r28, r24
    52fc:	09 2f       	mov	r16, r25
    52fe:	2d e3       	ldi	r18, 0x3D	; 61
    5300:	3a e0       	ldi	r19, 0x0A	; 10
    5302:	47 e1       	ldi	r20, 0x17	; 23
    5304:	5f e3       	ldi	r21, 0x3F	; 63
    5306:	c3 01       	movw	r24, r6
    5308:	b2 01       	movw	r22, r4
    530a:	36 d3       	rcall	.+1644   	; 0x5978 <__mulsf3>
    530c:	2b 01       	movw	r4, r22
    530e:	3c 01       	movw	r6, r24
    5310:	26 ef       	ldi	r18, 0xF6	; 246
    5312:	38 e2       	ldi	r19, 0x28	; 40
    5314:	4c e5       	ldi	r20, 0x5C	; 92
    5316:	5f e3       	ldi	r21, 0x3F	; 63
    5318:	c5 01       	movw	r24, r10
    531a:	b4 01       	movw	r22, r8
    531c:	2d d3       	rcall	.+1626   	; 0x5978 <__mulsf3>
    531e:	9b 01       	movw	r18, r22
    5320:	ac 01       	movw	r20, r24
    5322:	c3 01       	movw	r24, r6
    5324:	b2 01       	movw	r22, r4
    5326:	ed d1       	rcall	.+986    	; 0x5702 <__subsf3>
    5328:	a7 01       	movw	r20, r14
    532a:	96 01       	movw	r18, r12
    532c:	51 d2       	rcall	.+1186   	; 0x57d0 <__divsf3>
    532e:	c6 2e       	mov	r12, r22
    5330:	d7 2e       	mov	r13, r23
    5332:	e8 2e       	mov	r14, r24
    5334:	f9 2e       	mov	r15, r25
    5336:	26 2f       	mov	r18, r22
    5338:	37 2f       	mov	r19, r23
    533a:	48 2f       	mov	r20, r24
    533c:	59 2f       	mov	r21, r25
    533e:	61 2f       	mov	r22, r17
    5340:	7d 2f       	mov	r23, r29
    5342:	8c 2f       	mov	r24, r28
    5344:	90 2f       	mov	r25, r16
    5346:	14 d3       	rcall	.+1576   	; 0x5970 <__gesf2>
    5348:	18 16       	cp	r1, r24
    534a:	24 f0       	brlt	.+8      	; 0x5354 <tsl2591_getLux+0x178>
    534c:	1c 2d       	mov	r17, r12
    534e:	dd 2d       	mov	r29, r13
    5350:	ce 2d       	mov	r28, r14
    5352:	0f 2d       	mov	r16, r15
    5354:	41 2f       	mov	r20, r17
    5356:	5d 2f       	mov	r21, r29
    5358:	6c 2f       	mov	r22, r28
    535a:	70 2f       	mov	r23, r16
    535c:	f1 01       	movw	r30, r2
    535e:	40 83       	st	Z, r20
    5360:	51 83       	std	Z+1, r21	; 0x01
    5362:	62 83       	std	Z+2, r22	; 0x02
    5364:	73 83       	std	Z+3, r23	; 0x03
    5366:	80 e0       	ldi	r24, 0x00	; 0
    5368:	df 91       	pop	r29
    536a:	cf 91       	pop	r28
    536c:	1f 91       	pop	r17
    536e:	0f 91       	pop	r16
    5370:	ff 90       	pop	r15
    5372:	ef 90       	pop	r14
    5374:	df 90       	pop	r13
    5376:	cf 90       	pop	r12
    5378:	bf 90       	pop	r11
    537a:	af 90       	pop	r10
    537c:	9f 90       	pop	r9
    537e:	8f 90       	pop	r8
    5380:	7f 90       	pop	r7
    5382:	6f 90       	pop	r6
    5384:	5f 90       	pop	r5
    5386:	4f 90       	pop	r4
    5388:	3f 90       	pop	r3
    538a:	2f 90       	pop	r2
    538c:	08 95       	ret

0000538e <_initTwiInterface>:
    538e:	80 91 f5 17 	lds	r24, 0x17F5	; 0x8017f5 <_twiIsInitiated>
    5392:	81 11       	cpse	r24, r1
    5394:	0c c0       	rjmp	.+24     	; 0x53ae <_initTwiInterface+0x20>
    5396:	8c e0       	ldi	r24, 0x0C	; 12
    5398:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    539c:	8f ef       	ldi	r24, 0xFF	; 255
    539e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    53a2:	84 e0       	ldi	r24, 0x04	; 4
    53a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    53a8:	81 e0       	ldi	r24, 0x01	; 1
    53aa:	80 93 f5 17 	sts	0x17F5, r24	; 0x8017f5 <_twiIsInitiated>
    53ae:	08 95       	ret

000053b0 <twiCreate>:
    53b0:	af 92       	push	r10
    53b2:	bf 92       	push	r11
    53b4:	cf 92       	push	r12
    53b6:	df 92       	push	r13
    53b8:	ef 92       	push	r14
    53ba:	ff 92       	push	r15
    53bc:	0f 93       	push	r16
    53be:	1f 93       	push	r17
    53c0:	cf 93       	push	r28
    53c2:	df 93       	push	r29
    53c4:	a8 2e       	mov	r10, r24
    53c6:	b6 2e       	mov	r11, r22
    53c8:	69 01       	movw	r12, r18
    53ca:	7a 01       	movw	r14, r20
    53cc:	84 e0       	ldi	r24, 0x04	; 4
    53ce:	90 e0       	ldi	r25, 0x00	; 0
    53d0:	87 d3       	rcall	.+1806   	; 0x5ae0 <malloc>
    53d2:	ec 01       	movw	r28, r24
    53d4:	89 2b       	or	r24, r25
    53d6:	61 f1       	breq	.+88     	; 0x5430 <twiCreate+0x80>
    53d8:	a8 82       	st	Y, r10
    53da:	81 e0       	ldi	r24, 0x01	; 1
    53dc:	b8 12       	cpse	r11, r24
    53de:	12 c0       	rjmp	.+36     	; 0x5404 <twiCreate+0x54>
    53e0:	c7 01       	movw	r24, r14
    53e2:	b6 01       	movw	r22, r12
    53e4:	20 ea       	ldi	r18, 0xA0	; 160
    53e6:	36 e8       	ldi	r19, 0x86	; 134
    53e8:	41 e0       	ldi	r20, 0x01	; 1
    53ea:	50 e0       	ldi	r21, 0x00	; 0
    53ec:	4f d3       	rcall	.+1694   	; 0x5a8c <__udivmodsi4>
    53ee:	da 01       	movw	r26, r20
    53f0:	c9 01       	movw	r24, r18
    53f2:	40 97       	sbiw	r24, 0x10	; 16
    53f4:	a1 09       	sbc	r26, r1
    53f6:	b1 09       	sbc	r27, r1
    53f8:	b6 95       	lsr	r27
    53fa:	a7 95       	ror	r26
    53fc:	97 95       	ror	r25
    53fe:	87 95       	ror	r24
    5400:	89 83       	std	Y+1, r24	; 0x01
    5402:	11 c0       	rjmp	.+34     	; 0x5426 <twiCreate+0x76>
    5404:	c7 01       	movw	r24, r14
    5406:	b6 01       	movw	r22, r12
    5408:	20 e8       	ldi	r18, 0x80	; 128
    540a:	3a e1       	ldi	r19, 0x1A	; 26
    540c:	46 e0       	ldi	r20, 0x06	; 6
    540e:	50 e0       	ldi	r21, 0x00	; 0
    5410:	3d d3       	rcall	.+1658   	; 0x5a8c <__udivmodsi4>
    5412:	da 01       	movw	r26, r20
    5414:	c9 01       	movw	r24, r18
    5416:	40 97       	sbiw	r24, 0x10	; 16
    5418:	a1 09       	sbc	r26, r1
    541a:	b1 09       	sbc	r27, r1
    541c:	b6 95       	lsr	r27
    541e:	a7 95       	ror	r26
    5420:	97 95       	ror	r25
    5422:	87 95       	ror	r24
    5424:	89 83       	std	Y+1, r24	; 0x01
    5426:	1b 83       	std	Y+3, r17	; 0x03
    5428:	0a 83       	std	Y+2, r16	; 0x02
    542a:	8c 2f       	mov	r24, r28
    542c:	9d 2f       	mov	r25, r29
    542e:	02 c0       	rjmp	.+4      	; 0x5434 <twiCreate+0x84>
    5430:	80 e0       	ldi	r24, 0x00	; 0
    5432:	90 e0       	ldi	r25, 0x00	; 0
    5434:	df 91       	pop	r29
    5436:	cf 91       	pop	r28
    5438:	1f 91       	pop	r17
    543a:	0f 91       	pop	r16
    543c:	ff 90       	pop	r15
    543e:	ef 90       	pop	r14
    5440:	df 90       	pop	r13
    5442:	cf 90       	pop	r12
    5444:	bf 90       	pop	r11
    5446:	af 90       	pop	r10
    5448:	08 95       	ret

0000544a <twiIsBusy>:
    544a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    544e:	81 70       	andi	r24, 0x01	; 1
    5450:	08 95       	ret

00005452 <twiTransmit>:
    5452:	ff 92       	push	r15
    5454:	0f 93       	push	r16
    5456:	1f 93       	push	r17
    5458:	cf 93       	push	r28
    545a:	df 93       	push	r29
    545c:	00 97       	sbiw	r24, 0x00	; 0
    545e:	d1 f1       	breq	.+116    	; 0x54d4 <twiTransmit+0x82>
    5460:	4a 30       	cpi	r20, 0x0A	; 10
    5462:	d0 f5       	brcc	.+116    	; 0x54d8 <twiTransmit+0x86>
    5464:	f4 2e       	mov	r15, r20
    5466:	8b 01       	movw	r16, r22
    5468:	ec 01       	movw	r28, r24
    546a:	ef df       	rcall	.-34     	; 0x544a <twiIsBusy>
    546c:	81 11       	cpse	r24, r1
    546e:	36 c0       	rjmp	.+108    	; 0x54dc <twiTransmit+0x8a>
    5470:	80 91 e8 17 	lds	r24, 0x17E8	; 0x8017e8 <_twiCurrentHandler>
    5474:	90 91 e9 17 	lds	r25, 0x17E9	; 0x8017e9 <_twiCurrentHandler+0x1>
    5478:	c8 17       	cp	r28, r24
    547a:	d9 07       	cpc	r29, r25
    547c:	41 f0       	breq	.+16     	; 0x548e <twiTransmit+0x3c>
    547e:	87 df       	rcall	.-242    	; 0x538e <_initTwiInterface>
    5480:	89 81       	ldd	r24, Y+1	; 0x01
    5482:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5486:	d0 93 e9 17 	sts	0x17E9, r29	; 0x8017e9 <_twiCurrentHandler+0x1>
    548a:	c0 93 e8 17 	sts	0x17E8, r28	; 0x8017e8 <_twiCurrentHandler>
    548e:	81 e0       	ldi	r24, 0x01	; 1
    5490:	8f 0d       	add	r24, r15
    5492:	80 93 ea 17 	sts	0x17EA, r24	; 0x8017ea <_twiMessageLen>
    5496:	88 81       	ld	r24, Y
    5498:	88 0f       	add	r24, r24
    549a:	80 93 eb 17 	sts	0x17EB, r24	; 0x8017eb <_twiMessageBuffer>
    549e:	ff 20       	and	r15, r15
    54a0:	89 f0       	breq	.+34     	; 0x54c4 <twiTransmit+0x72>
    54a2:	f8 01       	movw	r30, r16
    54a4:	ac ee       	ldi	r26, 0xEC	; 236
    54a6:	b7 e1       	ldi	r27, 0x17	; 23
    54a8:	4f ef       	ldi	r20, 0xFF	; 255
    54aa:	4f 0d       	add	r20, r15
    54ac:	64 2f       	mov	r22, r20
    54ae:	70 e0       	ldi	r23, 0x00	; 0
    54b0:	cb 01       	movw	r24, r22
    54b2:	01 96       	adiw	r24, 0x01	; 1
    54b4:	b8 01       	movw	r22, r16
    54b6:	68 0f       	add	r22, r24
    54b8:	79 1f       	adc	r23, r25
    54ba:	81 91       	ld	r24, Z+
    54bc:	8d 93       	st	X+, r24
    54be:	e6 17       	cp	r30, r22
    54c0:	f7 07       	cpc	r31, r23
    54c2:	d9 f7       	brne	.-10     	; 0x54ba <twiTransmit+0x68>
    54c4:	88 ef       	ldi	r24, 0xF8	; 248
    54c6:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    54ca:	85 ea       	ldi	r24, 0xA5	; 165
    54cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54d0:	84 e0       	ldi	r24, 0x04	; 4
    54d2:	05 c0       	rjmp	.+10     	; 0x54de <twiTransmit+0x8c>
    54d4:	86 e0       	ldi	r24, 0x06	; 6
    54d6:	03 c0       	rjmp	.+6      	; 0x54de <twiTransmit+0x8c>
    54d8:	87 e0       	ldi	r24, 0x07	; 7
    54da:	01 c0       	rjmp	.+2      	; 0x54de <twiTransmit+0x8c>
    54dc:	82 e0       	ldi	r24, 0x02	; 2
    54de:	df 91       	pop	r29
    54e0:	cf 91       	pop	r28
    54e2:	1f 91       	pop	r17
    54e4:	0f 91       	pop	r16
    54e6:	ff 90       	pop	r15
    54e8:	08 95       	ret

000054ea <twiReceive>:
    54ea:	1f 93       	push	r17
    54ec:	cf 93       	push	r28
    54ee:	df 93       	push	r29
    54f0:	00 97       	sbiw	r24, 0x00	; 0
    54f2:	29 f1       	breq	.+74     	; 0x553e <twiReceive+0x54>
    54f4:	6b 30       	cpi	r22, 0x0B	; 11
    54f6:	28 f5       	brcc	.+74     	; 0x5542 <twiReceive+0x58>
    54f8:	16 2f       	mov	r17, r22
    54fa:	ec 01       	movw	r28, r24
    54fc:	a6 df       	rcall	.-180    	; 0x544a <twiIsBusy>
    54fe:	81 11       	cpse	r24, r1
    5500:	22 c0       	rjmp	.+68     	; 0x5546 <twiReceive+0x5c>
    5502:	80 91 e8 17 	lds	r24, 0x17E8	; 0x8017e8 <_twiCurrentHandler>
    5506:	90 91 e9 17 	lds	r25, 0x17E9	; 0x8017e9 <_twiCurrentHandler+0x1>
    550a:	c8 17       	cp	r28, r24
    550c:	d9 07       	cpc	r29, r25
    550e:	41 f0       	breq	.+16     	; 0x5520 <twiReceive+0x36>
    5510:	3e df       	rcall	.-388    	; 0x538e <_initTwiInterface>
    5512:	89 81       	ldd	r24, Y+1	; 0x01
    5514:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5518:	d0 93 e9 17 	sts	0x17E9, r29	; 0x8017e9 <_twiCurrentHandler+0x1>
    551c:	c0 93 e8 17 	sts	0x17E8, r28	; 0x8017e8 <_twiCurrentHandler>
    5520:	10 93 ea 17 	sts	0x17EA, r17	; 0x8017ea <_twiMessageLen>
    5524:	88 81       	ld	r24, Y
    5526:	88 0f       	add	r24, r24
    5528:	81 60       	ori	r24, 0x01	; 1
    552a:	80 93 eb 17 	sts	0x17EB, r24	; 0x8017eb <_twiMessageBuffer>
    552e:	88 ef       	ldi	r24, 0xF8	; 248
    5530:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5534:	85 ea       	ldi	r24, 0xA5	; 165
    5536:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    553a:	85 e0       	ldi	r24, 0x05	; 5
    553c:	05 c0       	rjmp	.+10     	; 0x5548 <twiReceive+0x5e>
    553e:	86 e0       	ldi	r24, 0x06	; 6
    5540:	03 c0       	rjmp	.+6      	; 0x5548 <twiReceive+0x5e>
    5542:	87 e0       	ldi	r24, 0x07	; 7
    5544:	01 c0       	rjmp	.+2      	; 0x5548 <twiReceive+0x5e>
    5546:	82 e0       	ldi	r24, 0x02	; 2
    5548:	df 91       	pop	r29
    554a:	cf 91       	pop	r28
    554c:	1f 91       	pop	r17
    554e:	08 95       	ret

00005550 <__vector_39>:
    5550:	1f 92       	push	r1
    5552:	0f 92       	push	r0
    5554:	0f b6       	in	r0, 0x3f	; 63
    5556:	0f 92       	push	r0
    5558:	11 24       	eor	r1, r1
    555a:	0b b6       	in	r0, 0x3b	; 59
    555c:	0f 92       	push	r0
    555e:	2f 93       	push	r18
    5560:	3f 93       	push	r19
    5562:	4f 93       	push	r20
    5564:	5f 93       	push	r21
    5566:	6f 93       	push	r22
    5568:	7f 93       	push	r23
    556a:	8f 93       	push	r24
    556c:	9f 93       	push	r25
    556e:	af 93       	push	r26
    5570:	bf 93       	push	r27
    5572:	ef 93       	push	r30
    5574:	ff 93       	push	r31
    5576:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    557a:	8e 2f       	mov	r24, r30
    557c:	90 e0       	ldi	r25, 0x00	; 0
    557e:	fc 01       	movw	r30, r24
    5580:	38 97       	sbiw	r30, 0x08	; 8
    5582:	e1 35       	cpi	r30, 0x51	; 81
    5584:	f1 05       	cpc	r31, r1
    5586:	08 f0       	brcs	.+2      	; 0x558a <__vector_39+0x3a>
    5588:	75 c0       	rjmp	.+234    	; 0x5674 <__vector_39+0x124>
    558a:	88 27       	eor	r24, r24
    558c:	e4 58       	subi	r30, 0x84	; 132
    558e:	ff 4f       	sbci	r31, 0xFF	; 255
    5590:	8f 4f       	sbci	r24, 0xFF	; 255
    5592:	9e c2       	rjmp	.+1340   	; 0x5ad0 <__tablejump2__>
    5594:	10 92 e7 17 	sts	0x17E7, r1	; 0x8017e7 <_index.1885>
    5598:	e0 91 e7 17 	lds	r30, 0x17E7	; 0x8017e7 <_index.1885>
    559c:	80 91 ea 17 	lds	r24, 0x17EA	; 0x8017ea <_twiMessageLen>
    55a0:	e8 17       	cp	r30, r24
    55a2:	70 f4       	brcc	.+28     	; 0x55c0 <__vector_39+0x70>
    55a4:	81 e0       	ldi	r24, 0x01	; 1
    55a6:	8e 0f       	add	r24, r30
    55a8:	80 93 e7 17 	sts	0x17E7, r24	; 0x8017e7 <_index.1885>
    55ac:	f0 e0       	ldi	r31, 0x00	; 0
    55ae:	e5 51       	subi	r30, 0x15	; 21
    55b0:	f8 4e       	sbci	r31, 0xE8	; 232
    55b2:	80 81       	ld	r24, Z
    55b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    55b8:	85 e8       	ldi	r24, 0x85	; 133
    55ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55be:	72 c0       	rjmp	.+228    	; 0x56a4 <__vector_39+0x154>
    55c0:	84 e9       	ldi	r24, 0x94	; 148
    55c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55c6:	80 91 e8 17 	lds	r24, 0x17E8	; 0x8017e8 <_twiCurrentHandler>
    55ca:	90 91 e9 17 	lds	r25, 0x17E9	; 0x8017e9 <_twiCurrentHandler+0x1>
    55ce:	dc 01       	movw	r26, r24
    55d0:	12 96       	adiw	r26, 0x02	; 2
    55d2:	ed 91       	ld	r30, X+
    55d4:	fc 91       	ld	r31, X
    55d6:	13 97       	sbiw	r26, 0x03	; 3
    55d8:	30 97       	sbiw	r30, 0x00	; 0
    55da:	09 f4       	brne	.+2      	; 0x55de <__vector_39+0x8e>
    55dc:	63 c0       	rjmp	.+198    	; 0x56a4 <__vector_39+0x154>
    55de:	20 e0       	ldi	r18, 0x00	; 0
    55e0:	40 e0       	ldi	r20, 0x00	; 0
    55e2:	50 e0       	ldi	r21, 0x00	; 0
    55e4:	64 e0       	ldi	r22, 0x04	; 4
    55e6:	19 95       	eicall
    55e8:	5d c0       	rjmp	.+186    	; 0x56a4 <__vector_39+0x154>
    55ea:	e0 91 e7 17 	lds	r30, 0x17E7	; 0x8017e7 <_index.1885>
    55ee:	81 e0       	ldi	r24, 0x01	; 1
    55f0:	8e 0f       	add	r24, r30
    55f2:	80 93 e7 17 	sts	0x17E7, r24	; 0x8017e7 <_index.1885>
    55f6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    55fa:	f0 e0       	ldi	r31, 0x00	; 0
    55fc:	e5 51       	subi	r30, 0x15	; 21
    55fe:	f8 4e       	sbci	r31, 0xE8	; 232
    5600:	80 83       	st	Z, r24
    5602:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5606:	80 34       	cpi	r24, 0x40	; 64
    5608:	11 f4       	brne	.+4      	; 0x560e <__vector_39+0xbe>
    560a:	10 92 e7 17 	sts	0x17E7, r1	; 0x8017e7 <_index.1885>
    560e:	20 91 e7 17 	lds	r18, 0x17E7	; 0x8017e7 <_index.1885>
    5612:	30 e0       	ldi	r19, 0x00	; 0
    5614:	80 91 ea 17 	lds	r24, 0x17EA	; 0x8017ea <_twiMessageLen>
    5618:	90 e0       	ldi	r25, 0x00	; 0
    561a:	01 97       	sbiw	r24, 0x01	; 1
    561c:	28 17       	cp	r18, r24
    561e:	39 07       	cpc	r19, r25
    5620:	24 f4       	brge	.+8      	; 0x562a <__vector_39+0xda>
    5622:	85 ec       	ldi	r24, 0xC5	; 197
    5624:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5628:	3d c0       	rjmp	.+122    	; 0x56a4 <__vector_39+0x154>
    562a:	85 e8       	ldi	r24, 0x85	; 133
    562c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5630:	39 c0       	rjmp	.+114    	; 0x56a4 <__vector_39+0x154>
    5632:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5636:	e0 91 e7 17 	lds	r30, 0x17E7	; 0x8017e7 <_index.1885>
    563a:	f0 e0       	ldi	r31, 0x00	; 0
    563c:	e5 51       	subi	r30, 0x15	; 21
    563e:	f8 4e       	sbci	r31, 0xE8	; 232
    5640:	80 83       	st	Z, r24
    5642:	84 e9       	ldi	r24, 0x94	; 148
    5644:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5648:	80 91 e8 17 	lds	r24, 0x17E8	; 0x8017e8 <_twiCurrentHandler>
    564c:	90 91 e9 17 	lds	r25, 0x17E9	; 0x8017e9 <_twiCurrentHandler+0x1>
    5650:	dc 01       	movw	r26, r24
    5652:	12 96       	adiw	r26, 0x02	; 2
    5654:	ed 91       	ld	r30, X+
    5656:	fc 91       	ld	r31, X
    5658:	13 97       	sbiw	r26, 0x03	; 3
    565a:	30 97       	sbiw	r30, 0x00	; 0
    565c:	19 f1       	breq	.+70     	; 0x56a4 <__vector_39+0x154>
    565e:	20 91 ea 17 	lds	r18, 0x17EA	; 0x8017ea <_twiMessageLen>
    5662:	4b ee       	ldi	r20, 0xEB	; 235
    5664:	57 e1       	ldi	r21, 0x17	; 23
    5666:	65 e0       	ldi	r22, 0x05	; 5
    5668:	19 95       	eicall
    566a:	1c c0       	rjmp	.+56     	; 0x56a4 <__vector_39+0x154>
    566c:	85 ea       	ldi	r24, 0xA5	; 165
    566e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5672:	18 c0       	rjmp	.+48     	; 0x56a4 <__vector_39+0x154>
    5674:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5678:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    567c:	84 e0       	ldi	r24, 0x04	; 4
    567e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5682:	80 91 e8 17 	lds	r24, 0x17E8	; 0x8017e8 <_twiCurrentHandler>
    5686:	90 91 e9 17 	lds	r25, 0x17E9	; 0x8017e9 <_twiCurrentHandler+0x1>
    568a:	dc 01       	movw	r26, r24
    568c:	12 96       	adiw	r26, 0x02	; 2
    568e:	ed 91       	ld	r30, X+
    5690:	fc 91       	ld	r31, X
    5692:	13 97       	sbiw	r26, 0x03	; 3
    5694:	30 97       	sbiw	r30, 0x00	; 0
    5696:	31 f0       	breq	.+12     	; 0x56a4 <__vector_39+0x154>
    5698:	20 e0       	ldi	r18, 0x00	; 0
    569a:	40 e0       	ldi	r20, 0x00	; 0
    569c:	50 e0       	ldi	r21, 0x00	; 0
    569e:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    56a2:	19 95       	eicall
    56a4:	ff 91       	pop	r31
    56a6:	ef 91       	pop	r30
    56a8:	bf 91       	pop	r27
    56aa:	af 91       	pop	r26
    56ac:	9f 91       	pop	r25
    56ae:	8f 91       	pop	r24
    56b0:	7f 91       	pop	r23
    56b2:	6f 91       	pop	r22
    56b4:	5f 91       	pop	r21
    56b6:	4f 91       	pop	r20
    56b8:	3f 91       	pop	r19
    56ba:	2f 91       	pop	r18
    56bc:	0f 90       	pop	r0
    56be:	0b be       	out	0x3b, r0	; 59
    56c0:	0f 90       	pop	r0
    56c2:	0f be       	out	0x3f, r0	; 63
    56c4:	0f 90       	pop	r0
    56c6:	1f 90       	pop	r1
    56c8:	18 95       	reti

000056ca <fifo_init>:
    56ca:	fc 01       	movw	r30, r24
    56cc:	41 11       	cpse	r20, r1
    56ce:	01 c0       	rjmp	.+2      	; 0x56d2 <fifo_init+0x8>
    56d0:	28 d3       	rcall	.+1616   	; 0x5d22 <abort>
    56d2:	84 2f       	mov	r24, r20
    56d4:	90 e0       	ldi	r25, 0x00	; 0
    56d6:	9c 01       	movw	r18, r24
    56d8:	21 50       	subi	r18, 0x01	; 1
    56da:	31 09       	sbc	r19, r1
    56dc:	82 23       	and	r24, r18
    56de:	93 23       	and	r25, r19
    56e0:	89 2b       	or	r24, r25
    56e2:	09 f0       	breq	.+2      	; 0x56e6 <fifo_init+0x1c>
    56e4:	1e d3       	rcall	.+1596   	; 0x5d22 <abort>
    56e6:	41 38       	cpi	r20, 0x81	; 129
    56e8:	08 f0       	brcs	.+2      	; 0x56ec <fifo_init+0x22>
    56ea:	1b d3       	rcall	.+1590   	; 0x5d22 <abort>
    56ec:	12 82       	std	Z+2, r1	; 0x02
    56ee:	13 82       	std	Z+3, r1	; 0x03
    56f0:	44 83       	std	Z+4, r20	; 0x04
    56f2:	44 0f       	add	r20, r20
    56f4:	41 50       	subi	r20, 0x01	; 1
    56f6:	45 83       	std	Z+5, r20	; 0x05
    56f8:	71 83       	std	Z+1, r23	; 0x01
    56fa:	60 83       	st	Z, r22
    56fc:	80 e0       	ldi	r24, 0x00	; 0
    56fe:	90 e0       	ldi	r25, 0x00	; 0
    5700:	08 95       	ret

00005702 <__subsf3>:
    5702:	50 58       	subi	r21, 0x80	; 128

00005704 <__addsf3>:
    5704:	bb 27       	eor	r27, r27
    5706:	aa 27       	eor	r26, r26
    5708:	0e d0       	rcall	.+28     	; 0x5726 <__addsf3x>
    570a:	21 c1       	rjmp	.+578    	; 0x594e <__fp_round>
    570c:	12 d1       	rcall	.+548    	; 0x5932 <__fp_pscA>
    570e:	30 f0       	brcs	.+12     	; 0x571c <__addsf3+0x18>
    5710:	17 d1       	rcall	.+558    	; 0x5940 <__fp_pscB>
    5712:	20 f0       	brcs	.+8      	; 0x571c <__addsf3+0x18>
    5714:	31 f4       	brne	.+12     	; 0x5722 <__addsf3+0x1e>
    5716:	9f 3f       	cpi	r25, 0xFF	; 255
    5718:	11 f4       	brne	.+4      	; 0x571e <__addsf3+0x1a>
    571a:	1e f4       	brtc	.+6      	; 0x5722 <__addsf3+0x1e>
    571c:	07 c1       	rjmp	.+526    	; 0x592c <__fp_nan>
    571e:	0e f4       	brtc	.+2      	; 0x5722 <__addsf3+0x1e>
    5720:	e0 95       	com	r30
    5722:	e7 fb       	bst	r30, 7
    5724:	fd c0       	rjmp	.+506    	; 0x5920 <__fp_inf>

00005726 <__addsf3x>:
    5726:	e9 2f       	mov	r30, r25
    5728:	0e 94 b1 1c 	call	0x3962	; 0x3962 <__fp_split3>
    572c:	78 f3       	brcs	.-34     	; 0x570c <__addsf3+0x8>
    572e:	ba 17       	cp	r27, r26
    5730:	62 07       	cpc	r22, r18
    5732:	73 07       	cpc	r23, r19
    5734:	84 07       	cpc	r24, r20
    5736:	95 07       	cpc	r25, r21
    5738:	20 f0       	brcs	.+8      	; 0x5742 <__addsf3x+0x1c>
    573a:	79 f4       	brne	.+30     	; 0x575a <__addsf3x+0x34>
    573c:	a6 f5       	brtc	.+104    	; 0x57a6 <__addsf3x+0x80>
    573e:	0c 94 d3 1c 	jmp	0x39a6	; 0x39a6 <__fp_zero>
    5742:	0e f4       	brtc	.+2      	; 0x5746 <__addsf3x+0x20>
    5744:	e0 95       	com	r30
    5746:	0b 2e       	mov	r0, r27
    5748:	ba 2f       	mov	r27, r26
    574a:	a0 2d       	mov	r26, r0
    574c:	0b 01       	movw	r0, r22
    574e:	b9 01       	movw	r22, r18
    5750:	90 01       	movw	r18, r0
    5752:	0c 01       	movw	r0, r24
    5754:	ca 01       	movw	r24, r20
    5756:	a0 01       	movw	r20, r0
    5758:	11 24       	eor	r1, r1
    575a:	ff 27       	eor	r31, r31
    575c:	59 1b       	sub	r21, r25
    575e:	99 f0       	breq	.+38     	; 0x5786 <__addsf3x+0x60>
    5760:	59 3f       	cpi	r21, 0xF9	; 249
    5762:	50 f4       	brcc	.+20     	; 0x5778 <__addsf3x+0x52>
    5764:	50 3e       	cpi	r21, 0xE0	; 224
    5766:	68 f1       	brcs	.+90     	; 0x57c2 <__addsf3x+0x9c>
    5768:	1a 16       	cp	r1, r26
    576a:	f0 40       	sbci	r31, 0x00	; 0
    576c:	a2 2f       	mov	r26, r18
    576e:	23 2f       	mov	r18, r19
    5770:	34 2f       	mov	r19, r20
    5772:	44 27       	eor	r20, r20
    5774:	58 5f       	subi	r21, 0xF8	; 248
    5776:	f3 cf       	rjmp	.-26     	; 0x575e <__addsf3x+0x38>
    5778:	46 95       	lsr	r20
    577a:	37 95       	ror	r19
    577c:	27 95       	ror	r18
    577e:	a7 95       	ror	r26
    5780:	f0 40       	sbci	r31, 0x00	; 0
    5782:	53 95       	inc	r21
    5784:	c9 f7       	brne	.-14     	; 0x5778 <__addsf3x+0x52>
    5786:	7e f4       	brtc	.+30     	; 0x57a6 <__addsf3x+0x80>
    5788:	1f 16       	cp	r1, r31
    578a:	ba 0b       	sbc	r27, r26
    578c:	62 0b       	sbc	r22, r18
    578e:	73 0b       	sbc	r23, r19
    5790:	84 0b       	sbc	r24, r20
    5792:	ba f0       	brmi	.+46     	; 0x57c2 <__addsf3x+0x9c>
    5794:	91 50       	subi	r25, 0x01	; 1
    5796:	a1 f0       	breq	.+40     	; 0x57c0 <__addsf3x+0x9a>
    5798:	ff 0f       	add	r31, r31
    579a:	bb 1f       	adc	r27, r27
    579c:	66 1f       	adc	r22, r22
    579e:	77 1f       	adc	r23, r23
    57a0:	88 1f       	adc	r24, r24
    57a2:	c2 f7       	brpl	.-16     	; 0x5794 <__addsf3x+0x6e>
    57a4:	0e c0       	rjmp	.+28     	; 0x57c2 <__addsf3x+0x9c>
    57a6:	ba 0f       	add	r27, r26
    57a8:	62 1f       	adc	r22, r18
    57aa:	73 1f       	adc	r23, r19
    57ac:	84 1f       	adc	r24, r20
    57ae:	48 f4       	brcc	.+18     	; 0x57c2 <__addsf3x+0x9c>
    57b0:	87 95       	ror	r24
    57b2:	77 95       	ror	r23
    57b4:	67 95       	ror	r22
    57b6:	b7 95       	ror	r27
    57b8:	f7 95       	ror	r31
    57ba:	9e 3f       	cpi	r25, 0xFE	; 254
    57bc:	08 f0       	brcs	.+2      	; 0x57c0 <__addsf3x+0x9a>
    57be:	b1 cf       	rjmp	.-158    	; 0x5722 <__addsf3+0x1e>
    57c0:	93 95       	inc	r25
    57c2:	88 0f       	add	r24, r24
    57c4:	08 f0       	brcs	.+2      	; 0x57c8 <__addsf3x+0xa2>
    57c6:	99 27       	eor	r25, r25
    57c8:	ee 0f       	add	r30, r30
    57ca:	97 95       	ror	r25
    57cc:	87 95       	ror	r24
    57ce:	08 95       	ret

000057d0 <__divsf3>:
    57d0:	0d d0       	rcall	.+26     	; 0x57ec <__divsf3x>
    57d2:	bd c0       	rjmp	.+378    	; 0x594e <__fp_round>
    57d4:	b5 d0       	rcall	.+362    	; 0x5940 <__fp_pscB>
    57d6:	48 f0       	brcs	.+18     	; 0x57ea <__divsf3+0x1a>
    57d8:	ac d0       	rcall	.+344    	; 0x5932 <__fp_pscA>
    57da:	38 f0       	brcs	.+14     	; 0x57ea <__divsf3+0x1a>
    57dc:	21 f4       	brne	.+8      	; 0x57e6 <__divsf3+0x16>
    57de:	5f 3f       	cpi	r21, 0xFF	; 255
    57e0:	21 f0       	breq	.+8      	; 0x57ea <__divsf3+0x1a>
    57e2:	9e c0       	rjmp	.+316    	; 0x5920 <__fp_inf>
    57e4:	51 11       	cpse	r21, r1
    57e6:	0c 94 d4 1c 	jmp	0x39a8	; 0x39a8 <__fp_szero>
    57ea:	a0 c0       	rjmp	.+320    	; 0x592c <__fp_nan>

000057ec <__divsf3x>:
    57ec:	0e 94 b1 1c 	call	0x3962	; 0x3962 <__fp_split3>
    57f0:	88 f3       	brcs	.-30     	; 0x57d4 <__divsf3+0x4>

000057f2 <__divsf3_pse>:
    57f2:	99 23       	and	r25, r25
    57f4:	b9 f3       	breq	.-18     	; 0x57e4 <__divsf3+0x14>
    57f6:	55 23       	and	r21, r21
    57f8:	a1 f3       	breq	.-24     	; 0x57e2 <__divsf3+0x12>
    57fa:	95 1b       	sub	r25, r21
    57fc:	55 0b       	sbc	r21, r21
    57fe:	bb 27       	eor	r27, r27
    5800:	aa 27       	eor	r26, r26
    5802:	62 17       	cp	r22, r18
    5804:	73 07       	cpc	r23, r19
    5806:	84 07       	cpc	r24, r20
    5808:	38 f0       	brcs	.+14     	; 0x5818 <__divsf3_pse+0x26>
    580a:	9f 5f       	subi	r25, 0xFF	; 255
    580c:	5f 4f       	sbci	r21, 0xFF	; 255
    580e:	22 0f       	add	r18, r18
    5810:	33 1f       	adc	r19, r19
    5812:	44 1f       	adc	r20, r20
    5814:	aa 1f       	adc	r26, r26
    5816:	a9 f3       	breq	.-22     	; 0x5802 <__divsf3_pse+0x10>
    5818:	34 d0       	rcall	.+104    	; 0x5882 <__divsf3_pse+0x90>
    581a:	0e 2e       	mov	r0, r30
    581c:	3a f0       	brmi	.+14     	; 0x582c <__divsf3_pse+0x3a>
    581e:	e0 e8       	ldi	r30, 0x80	; 128
    5820:	31 d0       	rcall	.+98     	; 0x5884 <__divsf3_pse+0x92>
    5822:	91 50       	subi	r25, 0x01	; 1
    5824:	50 40       	sbci	r21, 0x00	; 0
    5826:	e6 95       	lsr	r30
    5828:	00 1c       	adc	r0, r0
    582a:	ca f7       	brpl	.-14     	; 0x581e <__divsf3_pse+0x2c>
    582c:	2a d0       	rcall	.+84     	; 0x5882 <__divsf3_pse+0x90>
    582e:	fe 2f       	mov	r31, r30
    5830:	28 d0       	rcall	.+80     	; 0x5882 <__divsf3_pse+0x90>
    5832:	66 0f       	add	r22, r22
    5834:	77 1f       	adc	r23, r23
    5836:	88 1f       	adc	r24, r24
    5838:	bb 1f       	adc	r27, r27
    583a:	26 17       	cp	r18, r22
    583c:	37 07       	cpc	r19, r23
    583e:	48 07       	cpc	r20, r24
    5840:	ab 07       	cpc	r26, r27
    5842:	b0 e8       	ldi	r27, 0x80	; 128
    5844:	09 f0       	breq	.+2      	; 0x5848 <__divsf3_pse+0x56>
    5846:	bb 0b       	sbc	r27, r27
    5848:	80 2d       	mov	r24, r0
    584a:	bf 01       	movw	r22, r30
    584c:	ff 27       	eor	r31, r31
    584e:	93 58       	subi	r25, 0x83	; 131
    5850:	5f 4f       	sbci	r21, 0xFF	; 255
    5852:	32 f0       	brmi	.+12     	; 0x5860 <__divsf3_pse+0x6e>
    5854:	9e 3f       	cpi	r25, 0xFE	; 254
    5856:	51 05       	cpc	r21, r1
    5858:	70 f0       	brcs	.+28     	; 0x5876 <__divsf3_pse+0x84>
    585a:	62 c0       	rjmp	.+196    	; 0x5920 <__fp_inf>
    585c:	0c 94 d4 1c 	jmp	0x39a8	; 0x39a8 <__fp_szero>
    5860:	5f 3f       	cpi	r21, 0xFF	; 255
    5862:	e4 f3       	brlt	.-8      	; 0x585c <__divsf3_pse+0x6a>
    5864:	98 3e       	cpi	r25, 0xE8	; 232
    5866:	d4 f3       	brlt	.-12     	; 0x585c <__divsf3_pse+0x6a>
    5868:	86 95       	lsr	r24
    586a:	77 95       	ror	r23
    586c:	67 95       	ror	r22
    586e:	b7 95       	ror	r27
    5870:	f7 95       	ror	r31
    5872:	9f 5f       	subi	r25, 0xFF	; 255
    5874:	c9 f7       	brne	.-14     	; 0x5868 <__divsf3_pse+0x76>
    5876:	88 0f       	add	r24, r24
    5878:	91 1d       	adc	r25, r1
    587a:	96 95       	lsr	r25
    587c:	87 95       	ror	r24
    587e:	97 f9       	bld	r25, 7
    5880:	08 95       	ret
    5882:	e1 e0       	ldi	r30, 0x01	; 1
    5884:	66 0f       	add	r22, r22
    5886:	77 1f       	adc	r23, r23
    5888:	88 1f       	adc	r24, r24
    588a:	bb 1f       	adc	r27, r27
    588c:	62 17       	cp	r22, r18
    588e:	73 07       	cpc	r23, r19
    5890:	84 07       	cpc	r24, r20
    5892:	ba 07       	cpc	r27, r26
    5894:	20 f0       	brcs	.+8      	; 0x589e <__divsf3_pse+0xac>
    5896:	62 1b       	sub	r22, r18
    5898:	73 0b       	sbc	r23, r19
    589a:	84 0b       	sbc	r24, r20
    589c:	ba 0b       	sbc	r27, r26
    589e:	ee 1f       	adc	r30, r30
    58a0:	88 f7       	brcc	.-30     	; 0x5884 <__divsf3_pse+0x92>
    58a2:	e0 95       	com	r30
    58a4:	08 95       	ret

000058a6 <__floatunsisf>:
    58a6:	e8 94       	clt
    58a8:	09 c0       	rjmp	.+18     	; 0x58bc <__floatsisf+0x12>

000058aa <__floatsisf>:
    58aa:	97 fb       	bst	r25, 7
    58ac:	3e f4       	brtc	.+14     	; 0x58bc <__floatsisf+0x12>
    58ae:	90 95       	com	r25
    58b0:	80 95       	com	r24
    58b2:	70 95       	com	r23
    58b4:	61 95       	neg	r22
    58b6:	7f 4f       	sbci	r23, 0xFF	; 255
    58b8:	8f 4f       	sbci	r24, 0xFF	; 255
    58ba:	9f 4f       	sbci	r25, 0xFF	; 255
    58bc:	99 23       	and	r25, r25
    58be:	a9 f0       	breq	.+42     	; 0x58ea <__floatsisf+0x40>
    58c0:	f9 2f       	mov	r31, r25
    58c2:	96 e9       	ldi	r25, 0x96	; 150
    58c4:	bb 27       	eor	r27, r27
    58c6:	93 95       	inc	r25
    58c8:	f6 95       	lsr	r31
    58ca:	87 95       	ror	r24
    58cc:	77 95       	ror	r23
    58ce:	67 95       	ror	r22
    58d0:	b7 95       	ror	r27
    58d2:	f1 11       	cpse	r31, r1
    58d4:	f8 cf       	rjmp	.-16     	; 0x58c6 <__floatsisf+0x1c>
    58d6:	fa f4       	brpl	.+62     	; 0x5916 <__floatsisf+0x6c>
    58d8:	bb 0f       	add	r27, r27
    58da:	11 f4       	brne	.+4      	; 0x58e0 <__floatsisf+0x36>
    58dc:	60 ff       	sbrs	r22, 0
    58de:	1b c0       	rjmp	.+54     	; 0x5916 <__floatsisf+0x6c>
    58e0:	6f 5f       	subi	r22, 0xFF	; 255
    58e2:	7f 4f       	sbci	r23, 0xFF	; 255
    58e4:	8f 4f       	sbci	r24, 0xFF	; 255
    58e6:	9f 4f       	sbci	r25, 0xFF	; 255
    58e8:	16 c0       	rjmp	.+44     	; 0x5916 <__floatsisf+0x6c>
    58ea:	88 23       	and	r24, r24
    58ec:	11 f0       	breq	.+4      	; 0x58f2 <__floatsisf+0x48>
    58ee:	96 e9       	ldi	r25, 0x96	; 150
    58f0:	11 c0       	rjmp	.+34     	; 0x5914 <__floatsisf+0x6a>
    58f2:	77 23       	and	r23, r23
    58f4:	21 f0       	breq	.+8      	; 0x58fe <__floatsisf+0x54>
    58f6:	9e e8       	ldi	r25, 0x8E	; 142
    58f8:	87 2f       	mov	r24, r23
    58fa:	76 2f       	mov	r23, r22
    58fc:	05 c0       	rjmp	.+10     	; 0x5908 <__floatsisf+0x5e>
    58fe:	66 23       	and	r22, r22
    5900:	71 f0       	breq	.+28     	; 0x591e <__floatsisf+0x74>
    5902:	96 e8       	ldi	r25, 0x86	; 134
    5904:	86 2f       	mov	r24, r22
    5906:	70 e0       	ldi	r23, 0x00	; 0
    5908:	60 e0       	ldi	r22, 0x00	; 0
    590a:	2a f0       	brmi	.+10     	; 0x5916 <__floatsisf+0x6c>
    590c:	9a 95       	dec	r25
    590e:	66 0f       	add	r22, r22
    5910:	77 1f       	adc	r23, r23
    5912:	88 1f       	adc	r24, r24
    5914:	da f7       	brpl	.-10     	; 0x590c <__floatsisf+0x62>
    5916:	88 0f       	add	r24, r24
    5918:	96 95       	lsr	r25
    591a:	87 95       	ror	r24
    591c:	97 f9       	bld	r25, 7
    591e:	08 95       	ret

00005920 <__fp_inf>:
    5920:	97 f9       	bld	r25, 7
    5922:	9f 67       	ori	r25, 0x7F	; 127
    5924:	80 e8       	ldi	r24, 0x80	; 128
    5926:	70 e0       	ldi	r23, 0x00	; 0
    5928:	60 e0       	ldi	r22, 0x00	; 0
    592a:	08 95       	ret

0000592c <__fp_nan>:
    592c:	9f ef       	ldi	r25, 0xFF	; 255
    592e:	80 ec       	ldi	r24, 0xC0	; 192
    5930:	08 95       	ret

00005932 <__fp_pscA>:
    5932:	00 24       	eor	r0, r0
    5934:	0a 94       	dec	r0
    5936:	16 16       	cp	r1, r22
    5938:	17 06       	cpc	r1, r23
    593a:	18 06       	cpc	r1, r24
    593c:	09 06       	cpc	r0, r25
    593e:	08 95       	ret

00005940 <__fp_pscB>:
    5940:	00 24       	eor	r0, r0
    5942:	0a 94       	dec	r0
    5944:	12 16       	cp	r1, r18
    5946:	13 06       	cpc	r1, r19
    5948:	14 06       	cpc	r1, r20
    594a:	05 06       	cpc	r0, r21
    594c:	08 95       	ret

0000594e <__fp_round>:
    594e:	09 2e       	mov	r0, r25
    5950:	03 94       	inc	r0
    5952:	00 0c       	add	r0, r0
    5954:	11 f4       	brne	.+4      	; 0x595a <__fp_round+0xc>
    5956:	88 23       	and	r24, r24
    5958:	52 f0       	brmi	.+20     	; 0x596e <__fp_round+0x20>
    595a:	bb 0f       	add	r27, r27
    595c:	40 f4       	brcc	.+16     	; 0x596e <__fp_round+0x20>
    595e:	bf 2b       	or	r27, r31
    5960:	11 f4       	brne	.+4      	; 0x5966 <__fp_round+0x18>
    5962:	60 ff       	sbrs	r22, 0
    5964:	04 c0       	rjmp	.+8      	; 0x596e <__fp_round+0x20>
    5966:	6f 5f       	subi	r22, 0xFF	; 255
    5968:	7f 4f       	sbci	r23, 0xFF	; 255
    596a:	8f 4f       	sbci	r24, 0xFF	; 255
    596c:	9f 4f       	sbci	r25, 0xFF	; 255
    596e:	08 95       	ret

00005970 <__gesf2>:
    5970:	69 d0       	rcall	.+210    	; 0x5a44 <__fp_cmp>
    5972:	08 f4       	brcc	.+2      	; 0x5976 <__gesf2+0x6>
    5974:	8f ef       	ldi	r24, 0xFF	; 255
    5976:	08 95       	ret

00005978 <__mulsf3>:
    5978:	0c d0       	rcall	.+24     	; 0x5992 <__mulsf3x>
    597a:	e9 cf       	rjmp	.-46     	; 0x594e <__fp_round>
    597c:	da df       	rcall	.-76     	; 0x5932 <__fp_pscA>
    597e:	28 f0       	brcs	.+10     	; 0x598a <__mulsf3+0x12>
    5980:	df df       	rcall	.-66     	; 0x5940 <__fp_pscB>
    5982:	18 f0       	brcs	.+6      	; 0x598a <__mulsf3+0x12>
    5984:	95 23       	and	r25, r21
    5986:	09 f0       	breq	.+2      	; 0x598a <__mulsf3+0x12>
    5988:	cb cf       	rjmp	.-106    	; 0x5920 <__fp_inf>
    598a:	d0 cf       	rjmp	.-96     	; 0x592c <__fp_nan>
    598c:	11 24       	eor	r1, r1
    598e:	0c 94 d4 1c 	jmp	0x39a8	; 0x39a8 <__fp_szero>

00005992 <__mulsf3x>:
    5992:	0e 94 b1 1c 	call	0x3962	; 0x3962 <__fp_split3>
    5996:	90 f3       	brcs	.-28     	; 0x597c <__mulsf3+0x4>

00005998 <__mulsf3_pse>:
    5998:	95 9f       	mul	r25, r21
    599a:	c1 f3       	breq	.-16     	; 0x598c <__mulsf3+0x14>
    599c:	95 0f       	add	r25, r21
    599e:	50 e0       	ldi	r21, 0x00	; 0
    59a0:	55 1f       	adc	r21, r21
    59a2:	62 9f       	mul	r22, r18
    59a4:	f0 01       	movw	r30, r0
    59a6:	72 9f       	mul	r23, r18
    59a8:	bb 27       	eor	r27, r27
    59aa:	f0 0d       	add	r31, r0
    59ac:	b1 1d       	adc	r27, r1
    59ae:	63 9f       	mul	r22, r19
    59b0:	aa 27       	eor	r26, r26
    59b2:	f0 0d       	add	r31, r0
    59b4:	b1 1d       	adc	r27, r1
    59b6:	aa 1f       	adc	r26, r26
    59b8:	64 9f       	mul	r22, r20
    59ba:	66 27       	eor	r22, r22
    59bc:	b0 0d       	add	r27, r0
    59be:	a1 1d       	adc	r26, r1
    59c0:	66 1f       	adc	r22, r22
    59c2:	82 9f       	mul	r24, r18
    59c4:	22 27       	eor	r18, r18
    59c6:	b0 0d       	add	r27, r0
    59c8:	a1 1d       	adc	r26, r1
    59ca:	62 1f       	adc	r22, r18
    59cc:	73 9f       	mul	r23, r19
    59ce:	b0 0d       	add	r27, r0
    59d0:	a1 1d       	adc	r26, r1
    59d2:	62 1f       	adc	r22, r18
    59d4:	83 9f       	mul	r24, r19
    59d6:	a0 0d       	add	r26, r0
    59d8:	61 1d       	adc	r22, r1
    59da:	22 1f       	adc	r18, r18
    59dc:	74 9f       	mul	r23, r20
    59de:	33 27       	eor	r19, r19
    59e0:	a0 0d       	add	r26, r0
    59e2:	61 1d       	adc	r22, r1
    59e4:	23 1f       	adc	r18, r19
    59e6:	84 9f       	mul	r24, r20
    59e8:	60 0d       	add	r22, r0
    59ea:	21 1d       	adc	r18, r1
    59ec:	82 2f       	mov	r24, r18
    59ee:	76 2f       	mov	r23, r22
    59f0:	6a 2f       	mov	r22, r26
    59f2:	11 24       	eor	r1, r1
    59f4:	9f 57       	subi	r25, 0x7F	; 127
    59f6:	50 40       	sbci	r21, 0x00	; 0
    59f8:	92 f0       	brmi	.+36     	; 0x5a1e <__mulsf3_pse+0x86>
    59fa:	e9 f0       	breq	.+58     	; 0x5a36 <__mulsf3_pse+0x9e>
    59fc:	88 23       	and	r24, r24
    59fe:	4a f0       	brmi	.+18     	; 0x5a12 <__mulsf3_pse+0x7a>
    5a00:	ee 0f       	add	r30, r30
    5a02:	ff 1f       	adc	r31, r31
    5a04:	bb 1f       	adc	r27, r27
    5a06:	66 1f       	adc	r22, r22
    5a08:	77 1f       	adc	r23, r23
    5a0a:	88 1f       	adc	r24, r24
    5a0c:	91 50       	subi	r25, 0x01	; 1
    5a0e:	50 40       	sbci	r21, 0x00	; 0
    5a10:	a9 f7       	brne	.-22     	; 0x59fc <__mulsf3_pse+0x64>
    5a12:	9e 3f       	cpi	r25, 0xFE	; 254
    5a14:	51 05       	cpc	r21, r1
    5a16:	78 f0       	brcs	.+30     	; 0x5a36 <__mulsf3_pse+0x9e>
    5a18:	83 cf       	rjmp	.-250    	; 0x5920 <__fp_inf>
    5a1a:	0c 94 d4 1c 	jmp	0x39a8	; 0x39a8 <__fp_szero>
    5a1e:	5f 3f       	cpi	r21, 0xFF	; 255
    5a20:	e4 f3       	brlt	.-8      	; 0x5a1a <__mulsf3_pse+0x82>
    5a22:	98 3e       	cpi	r25, 0xE8	; 232
    5a24:	d4 f3       	brlt	.-12     	; 0x5a1a <__mulsf3_pse+0x82>
    5a26:	86 95       	lsr	r24
    5a28:	77 95       	ror	r23
    5a2a:	67 95       	ror	r22
    5a2c:	b7 95       	ror	r27
    5a2e:	f7 95       	ror	r31
    5a30:	e7 95       	ror	r30
    5a32:	9f 5f       	subi	r25, 0xFF	; 255
    5a34:	c1 f7       	brne	.-16     	; 0x5a26 <__mulsf3_pse+0x8e>
    5a36:	fe 2b       	or	r31, r30
    5a38:	88 0f       	add	r24, r24
    5a3a:	91 1d       	adc	r25, r1
    5a3c:	96 95       	lsr	r25
    5a3e:	87 95       	ror	r24
    5a40:	97 f9       	bld	r25, 7
    5a42:	08 95       	ret

00005a44 <__fp_cmp>:
    5a44:	99 0f       	add	r25, r25
    5a46:	00 08       	sbc	r0, r0
    5a48:	55 0f       	add	r21, r21
    5a4a:	aa 0b       	sbc	r26, r26
    5a4c:	e0 e8       	ldi	r30, 0x80	; 128
    5a4e:	fe ef       	ldi	r31, 0xFE	; 254
    5a50:	16 16       	cp	r1, r22
    5a52:	17 06       	cpc	r1, r23
    5a54:	e8 07       	cpc	r30, r24
    5a56:	f9 07       	cpc	r31, r25
    5a58:	c0 f0       	brcs	.+48     	; 0x5a8a <__fp_cmp+0x46>
    5a5a:	12 16       	cp	r1, r18
    5a5c:	13 06       	cpc	r1, r19
    5a5e:	e4 07       	cpc	r30, r20
    5a60:	f5 07       	cpc	r31, r21
    5a62:	98 f0       	brcs	.+38     	; 0x5a8a <__fp_cmp+0x46>
    5a64:	62 1b       	sub	r22, r18
    5a66:	73 0b       	sbc	r23, r19
    5a68:	84 0b       	sbc	r24, r20
    5a6a:	95 0b       	sbc	r25, r21
    5a6c:	39 f4       	brne	.+14     	; 0x5a7c <__fp_cmp+0x38>
    5a6e:	0a 26       	eor	r0, r26
    5a70:	61 f0       	breq	.+24     	; 0x5a8a <__fp_cmp+0x46>
    5a72:	23 2b       	or	r18, r19
    5a74:	24 2b       	or	r18, r20
    5a76:	25 2b       	or	r18, r21
    5a78:	21 f4       	brne	.+8      	; 0x5a82 <__fp_cmp+0x3e>
    5a7a:	08 95       	ret
    5a7c:	0a 26       	eor	r0, r26
    5a7e:	09 f4       	brne	.+2      	; 0x5a82 <__fp_cmp+0x3e>
    5a80:	a1 40       	sbci	r26, 0x01	; 1
    5a82:	a6 95       	lsr	r26
    5a84:	8f ef       	ldi	r24, 0xFF	; 255
    5a86:	81 1d       	adc	r24, r1
    5a88:	81 1d       	adc	r24, r1
    5a8a:	08 95       	ret

00005a8c <__udivmodsi4>:
    5a8c:	a1 e2       	ldi	r26, 0x21	; 33
    5a8e:	1a 2e       	mov	r1, r26
    5a90:	aa 1b       	sub	r26, r26
    5a92:	bb 1b       	sub	r27, r27
    5a94:	fd 01       	movw	r30, r26
    5a96:	0d c0       	rjmp	.+26     	; 0x5ab2 <__udivmodsi4_ep>

00005a98 <__udivmodsi4_loop>:
    5a98:	aa 1f       	adc	r26, r26
    5a9a:	bb 1f       	adc	r27, r27
    5a9c:	ee 1f       	adc	r30, r30
    5a9e:	ff 1f       	adc	r31, r31
    5aa0:	a2 17       	cp	r26, r18
    5aa2:	b3 07       	cpc	r27, r19
    5aa4:	e4 07       	cpc	r30, r20
    5aa6:	f5 07       	cpc	r31, r21
    5aa8:	20 f0       	brcs	.+8      	; 0x5ab2 <__udivmodsi4_ep>
    5aaa:	a2 1b       	sub	r26, r18
    5aac:	b3 0b       	sbc	r27, r19
    5aae:	e4 0b       	sbc	r30, r20
    5ab0:	f5 0b       	sbc	r31, r21

00005ab2 <__udivmodsi4_ep>:
    5ab2:	66 1f       	adc	r22, r22
    5ab4:	77 1f       	adc	r23, r23
    5ab6:	88 1f       	adc	r24, r24
    5ab8:	99 1f       	adc	r25, r25
    5aba:	1a 94       	dec	r1
    5abc:	69 f7       	brne	.-38     	; 0x5a98 <__udivmodsi4_loop>
    5abe:	60 95       	com	r22
    5ac0:	70 95       	com	r23
    5ac2:	80 95       	com	r24
    5ac4:	90 95       	com	r25
    5ac6:	9b 01       	movw	r18, r22
    5ac8:	ac 01       	movw	r20, r24
    5aca:	bd 01       	movw	r22, r26
    5acc:	cf 01       	movw	r24, r30
    5ace:	08 95       	ret

00005ad0 <__tablejump2__>:
    5ad0:	ee 0f       	add	r30, r30
    5ad2:	ff 1f       	adc	r31, r31
    5ad4:	88 1f       	adc	r24, r24
    5ad6:	8b bf       	out	0x3b, r24	; 59
    5ad8:	07 90       	elpm	r0, Z+
    5ada:	f6 91       	elpm	r31, Z
    5adc:	e0 2d       	mov	r30, r0
    5ade:	19 94       	eijmp

00005ae0 <malloc>:
    5ae0:	0f 93       	push	r16
    5ae2:	1f 93       	push	r17
    5ae4:	cf 93       	push	r28
    5ae6:	df 93       	push	r29
    5ae8:	82 30       	cpi	r24, 0x02	; 2
    5aea:	91 05       	cpc	r25, r1
    5aec:	10 f4       	brcc	.+4      	; 0x5af2 <malloc+0x12>
    5aee:	82 e0       	ldi	r24, 0x02	; 2
    5af0:	90 e0       	ldi	r25, 0x00	; 0
    5af2:	e0 91 0a 18 	lds	r30, 0x180A	; 0x80180a <__flp>
    5af6:	f0 91 0b 18 	lds	r31, 0x180B	; 0x80180b <__flp+0x1>
    5afa:	20 e0       	ldi	r18, 0x00	; 0
    5afc:	30 e0       	ldi	r19, 0x00	; 0
    5afe:	a0 e0       	ldi	r26, 0x00	; 0
    5b00:	b0 e0       	ldi	r27, 0x00	; 0
    5b02:	30 97       	sbiw	r30, 0x00	; 0
    5b04:	19 f1       	breq	.+70     	; 0x5b4c <malloc+0x6c>
    5b06:	40 81       	ld	r20, Z
    5b08:	51 81       	ldd	r21, Z+1	; 0x01
    5b0a:	02 81       	ldd	r16, Z+2	; 0x02
    5b0c:	13 81       	ldd	r17, Z+3	; 0x03
    5b0e:	48 17       	cp	r20, r24
    5b10:	59 07       	cpc	r21, r25
    5b12:	c8 f0       	brcs	.+50     	; 0x5b46 <malloc+0x66>
    5b14:	84 17       	cp	r24, r20
    5b16:	95 07       	cpc	r25, r21
    5b18:	69 f4       	brne	.+26     	; 0x5b34 <malloc+0x54>
    5b1a:	10 97       	sbiw	r26, 0x00	; 0
    5b1c:	31 f0       	breq	.+12     	; 0x5b2a <malloc+0x4a>
    5b1e:	12 96       	adiw	r26, 0x02	; 2
    5b20:	0c 93       	st	X, r16
    5b22:	12 97       	sbiw	r26, 0x02	; 2
    5b24:	13 96       	adiw	r26, 0x03	; 3
    5b26:	1c 93       	st	X, r17
    5b28:	27 c0       	rjmp	.+78     	; 0x5b78 <malloc+0x98>
    5b2a:	00 93 0a 18 	sts	0x180A, r16	; 0x80180a <__flp>
    5b2e:	10 93 0b 18 	sts	0x180B, r17	; 0x80180b <__flp+0x1>
    5b32:	22 c0       	rjmp	.+68     	; 0x5b78 <malloc+0x98>
    5b34:	21 15       	cp	r18, r1
    5b36:	31 05       	cpc	r19, r1
    5b38:	19 f0       	breq	.+6      	; 0x5b40 <malloc+0x60>
    5b3a:	42 17       	cp	r20, r18
    5b3c:	53 07       	cpc	r21, r19
    5b3e:	18 f4       	brcc	.+6      	; 0x5b46 <malloc+0x66>
    5b40:	9a 01       	movw	r18, r20
    5b42:	bd 01       	movw	r22, r26
    5b44:	ef 01       	movw	r28, r30
    5b46:	df 01       	movw	r26, r30
    5b48:	f8 01       	movw	r30, r16
    5b4a:	db cf       	rjmp	.-74     	; 0x5b02 <malloc+0x22>
    5b4c:	21 15       	cp	r18, r1
    5b4e:	31 05       	cpc	r19, r1
    5b50:	f9 f0       	breq	.+62     	; 0x5b90 <malloc+0xb0>
    5b52:	28 1b       	sub	r18, r24
    5b54:	39 0b       	sbc	r19, r25
    5b56:	24 30       	cpi	r18, 0x04	; 4
    5b58:	31 05       	cpc	r19, r1
    5b5a:	80 f4       	brcc	.+32     	; 0x5b7c <malloc+0x9c>
    5b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    5b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    5b60:	61 15       	cp	r22, r1
    5b62:	71 05       	cpc	r23, r1
    5b64:	21 f0       	breq	.+8      	; 0x5b6e <malloc+0x8e>
    5b66:	fb 01       	movw	r30, r22
    5b68:	93 83       	std	Z+3, r25	; 0x03
    5b6a:	82 83       	std	Z+2, r24	; 0x02
    5b6c:	04 c0       	rjmp	.+8      	; 0x5b76 <malloc+0x96>
    5b6e:	90 93 0b 18 	sts	0x180B, r25	; 0x80180b <__flp+0x1>
    5b72:	80 93 0a 18 	sts	0x180A, r24	; 0x80180a <__flp>
    5b76:	fe 01       	movw	r30, r28
    5b78:	32 96       	adiw	r30, 0x02	; 2
    5b7a:	44 c0       	rjmp	.+136    	; 0x5c04 <malloc+0x124>
    5b7c:	fe 01       	movw	r30, r28
    5b7e:	e2 0f       	add	r30, r18
    5b80:	f3 1f       	adc	r31, r19
    5b82:	81 93       	st	Z+, r24
    5b84:	91 93       	st	Z+, r25
    5b86:	22 50       	subi	r18, 0x02	; 2
    5b88:	31 09       	sbc	r19, r1
    5b8a:	39 83       	std	Y+1, r19	; 0x01
    5b8c:	28 83       	st	Y, r18
    5b8e:	3a c0       	rjmp	.+116    	; 0x5c04 <malloc+0x124>
    5b90:	20 91 08 18 	lds	r18, 0x1808	; 0x801808 <__brkval>
    5b94:	30 91 09 18 	lds	r19, 0x1809	; 0x801809 <__brkval+0x1>
    5b98:	23 2b       	or	r18, r19
    5b9a:	41 f4       	brne	.+16     	; 0x5bac <malloc+0xcc>
    5b9c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5ba0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5ba4:	30 93 09 18 	sts	0x1809, r19	; 0x801809 <__brkval+0x1>
    5ba8:	20 93 08 18 	sts	0x1808, r18	; 0x801808 <__brkval>
    5bac:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5bb0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5bb4:	21 15       	cp	r18, r1
    5bb6:	31 05       	cpc	r19, r1
    5bb8:	41 f4       	brne	.+16     	; 0x5bca <malloc+0xea>
    5bba:	2d b7       	in	r18, 0x3d	; 61
    5bbc:	3e b7       	in	r19, 0x3e	; 62
    5bbe:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5bc2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5bc6:	24 1b       	sub	r18, r20
    5bc8:	35 0b       	sbc	r19, r21
    5bca:	e0 91 08 18 	lds	r30, 0x1808	; 0x801808 <__brkval>
    5bce:	f0 91 09 18 	lds	r31, 0x1809	; 0x801809 <__brkval+0x1>
    5bd2:	e2 17       	cp	r30, r18
    5bd4:	f3 07       	cpc	r31, r19
    5bd6:	a0 f4       	brcc	.+40     	; 0x5c00 <malloc+0x120>
    5bd8:	2e 1b       	sub	r18, r30
    5bda:	3f 0b       	sbc	r19, r31
    5bdc:	28 17       	cp	r18, r24
    5bde:	39 07       	cpc	r19, r25
    5be0:	78 f0       	brcs	.+30     	; 0x5c00 <malloc+0x120>
    5be2:	ac 01       	movw	r20, r24
    5be4:	4e 5f       	subi	r20, 0xFE	; 254
    5be6:	5f 4f       	sbci	r21, 0xFF	; 255
    5be8:	24 17       	cp	r18, r20
    5bea:	35 07       	cpc	r19, r21
    5bec:	48 f0       	brcs	.+18     	; 0x5c00 <malloc+0x120>
    5bee:	4e 0f       	add	r20, r30
    5bf0:	5f 1f       	adc	r21, r31
    5bf2:	50 93 09 18 	sts	0x1809, r21	; 0x801809 <__brkval+0x1>
    5bf6:	40 93 08 18 	sts	0x1808, r20	; 0x801808 <__brkval>
    5bfa:	81 93       	st	Z+, r24
    5bfc:	91 93       	st	Z+, r25
    5bfe:	02 c0       	rjmp	.+4      	; 0x5c04 <malloc+0x124>
    5c00:	e0 e0       	ldi	r30, 0x00	; 0
    5c02:	f0 e0       	ldi	r31, 0x00	; 0
    5c04:	cf 01       	movw	r24, r30
    5c06:	df 91       	pop	r29
    5c08:	cf 91       	pop	r28
    5c0a:	1f 91       	pop	r17
    5c0c:	0f 91       	pop	r16
    5c0e:	08 95       	ret

00005c10 <free>:
    5c10:	cf 93       	push	r28
    5c12:	df 93       	push	r29
    5c14:	00 97       	sbiw	r24, 0x00	; 0
    5c16:	09 f4       	brne	.+2      	; 0x5c1a <free+0xa>
    5c18:	81 c0       	rjmp	.+258    	; 0x5d1c <free+0x10c>
    5c1a:	fc 01       	movw	r30, r24
    5c1c:	32 97       	sbiw	r30, 0x02	; 2
    5c1e:	13 82       	std	Z+3, r1	; 0x03
    5c20:	12 82       	std	Z+2, r1	; 0x02
    5c22:	a0 91 0a 18 	lds	r26, 0x180A	; 0x80180a <__flp>
    5c26:	b0 91 0b 18 	lds	r27, 0x180B	; 0x80180b <__flp+0x1>
    5c2a:	10 97       	sbiw	r26, 0x00	; 0
    5c2c:	81 f4       	brne	.+32     	; 0x5c4e <free+0x3e>
    5c2e:	20 81       	ld	r18, Z
    5c30:	31 81       	ldd	r19, Z+1	; 0x01
    5c32:	82 0f       	add	r24, r18
    5c34:	93 1f       	adc	r25, r19
    5c36:	20 91 08 18 	lds	r18, 0x1808	; 0x801808 <__brkval>
    5c3a:	30 91 09 18 	lds	r19, 0x1809	; 0x801809 <__brkval+0x1>
    5c3e:	28 17       	cp	r18, r24
    5c40:	39 07       	cpc	r19, r25
    5c42:	51 f5       	brne	.+84     	; 0x5c98 <free+0x88>
    5c44:	f0 93 09 18 	sts	0x1809, r31	; 0x801809 <__brkval+0x1>
    5c48:	e0 93 08 18 	sts	0x1808, r30	; 0x801808 <__brkval>
    5c4c:	67 c0       	rjmp	.+206    	; 0x5d1c <free+0x10c>
    5c4e:	ed 01       	movw	r28, r26
    5c50:	20 e0       	ldi	r18, 0x00	; 0
    5c52:	30 e0       	ldi	r19, 0x00	; 0
    5c54:	ce 17       	cp	r28, r30
    5c56:	df 07       	cpc	r29, r31
    5c58:	40 f4       	brcc	.+16     	; 0x5c6a <free+0x5a>
    5c5a:	4a 81       	ldd	r20, Y+2	; 0x02
    5c5c:	5b 81       	ldd	r21, Y+3	; 0x03
    5c5e:	9e 01       	movw	r18, r28
    5c60:	41 15       	cp	r20, r1
    5c62:	51 05       	cpc	r21, r1
    5c64:	f1 f0       	breq	.+60     	; 0x5ca2 <free+0x92>
    5c66:	ea 01       	movw	r28, r20
    5c68:	f5 cf       	rjmp	.-22     	; 0x5c54 <free+0x44>
    5c6a:	d3 83       	std	Z+3, r29	; 0x03
    5c6c:	c2 83       	std	Z+2, r28	; 0x02
    5c6e:	40 81       	ld	r20, Z
    5c70:	51 81       	ldd	r21, Z+1	; 0x01
    5c72:	84 0f       	add	r24, r20
    5c74:	95 1f       	adc	r25, r21
    5c76:	c8 17       	cp	r28, r24
    5c78:	d9 07       	cpc	r29, r25
    5c7a:	59 f4       	brne	.+22     	; 0x5c92 <free+0x82>
    5c7c:	88 81       	ld	r24, Y
    5c7e:	99 81       	ldd	r25, Y+1	; 0x01
    5c80:	84 0f       	add	r24, r20
    5c82:	95 1f       	adc	r25, r21
    5c84:	02 96       	adiw	r24, 0x02	; 2
    5c86:	91 83       	std	Z+1, r25	; 0x01
    5c88:	80 83       	st	Z, r24
    5c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    5c8c:	9b 81       	ldd	r25, Y+3	; 0x03
    5c8e:	93 83       	std	Z+3, r25	; 0x03
    5c90:	82 83       	std	Z+2, r24	; 0x02
    5c92:	21 15       	cp	r18, r1
    5c94:	31 05       	cpc	r19, r1
    5c96:	29 f4       	brne	.+10     	; 0x5ca2 <free+0x92>
    5c98:	f0 93 0b 18 	sts	0x180B, r31	; 0x80180b <__flp+0x1>
    5c9c:	e0 93 0a 18 	sts	0x180A, r30	; 0x80180a <__flp>
    5ca0:	3d c0       	rjmp	.+122    	; 0x5d1c <free+0x10c>
    5ca2:	e9 01       	movw	r28, r18
    5ca4:	fb 83       	std	Y+3, r31	; 0x03
    5ca6:	ea 83       	std	Y+2, r30	; 0x02
    5ca8:	49 91       	ld	r20, Y+
    5caa:	59 91       	ld	r21, Y+
    5cac:	c4 0f       	add	r28, r20
    5cae:	d5 1f       	adc	r29, r21
    5cb0:	ec 17       	cp	r30, r28
    5cb2:	fd 07       	cpc	r31, r29
    5cb4:	61 f4       	brne	.+24     	; 0x5cce <free+0xbe>
    5cb6:	80 81       	ld	r24, Z
    5cb8:	91 81       	ldd	r25, Z+1	; 0x01
    5cba:	84 0f       	add	r24, r20
    5cbc:	95 1f       	adc	r25, r21
    5cbe:	02 96       	adiw	r24, 0x02	; 2
    5cc0:	e9 01       	movw	r28, r18
    5cc2:	99 83       	std	Y+1, r25	; 0x01
    5cc4:	88 83       	st	Y, r24
    5cc6:	82 81       	ldd	r24, Z+2	; 0x02
    5cc8:	93 81       	ldd	r25, Z+3	; 0x03
    5cca:	9b 83       	std	Y+3, r25	; 0x03
    5ccc:	8a 83       	std	Y+2, r24	; 0x02
    5cce:	e0 e0       	ldi	r30, 0x00	; 0
    5cd0:	f0 e0       	ldi	r31, 0x00	; 0
    5cd2:	12 96       	adiw	r26, 0x02	; 2
    5cd4:	8d 91       	ld	r24, X+
    5cd6:	9c 91       	ld	r25, X
    5cd8:	13 97       	sbiw	r26, 0x03	; 3
    5cda:	00 97       	sbiw	r24, 0x00	; 0
    5cdc:	19 f0       	breq	.+6      	; 0x5ce4 <free+0xd4>
    5cde:	fd 01       	movw	r30, r26
    5ce0:	dc 01       	movw	r26, r24
    5ce2:	f7 cf       	rjmp	.-18     	; 0x5cd2 <free+0xc2>
    5ce4:	8d 91       	ld	r24, X+
    5ce6:	9c 91       	ld	r25, X
    5ce8:	11 97       	sbiw	r26, 0x01	; 1
    5cea:	9d 01       	movw	r18, r26
    5cec:	2e 5f       	subi	r18, 0xFE	; 254
    5cee:	3f 4f       	sbci	r19, 0xFF	; 255
    5cf0:	82 0f       	add	r24, r18
    5cf2:	93 1f       	adc	r25, r19
    5cf4:	20 91 08 18 	lds	r18, 0x1808	; 0x801808 <__brkval>
    5cf8:	30 91 09 18 	lds	r19, 0x1809	; 0x801809 <__brkval+0x1>
    5cfc:	28 17       	cp	r18, r24
    5cfe:	39 07       	cpc	r19, r25
    5d00:	69 f4       	brne	.+26     	; 0x5d1c <free+0x10c>
    5d02:	30 97       	sbiw	r30, 0x00	; 0
    5d04:	29 f4       	brne	.+10     	; 0x5d10 <free+0x100>
    5d06:	10 92 0b 18 	sts	0x180B, r1	; 0x80180b <__flp+0x1>
    5d0a:	10 92 0a 18 	sts	0x180A, r1	; 0x80180a <__flp>
    5d0e:	02 c0       	rjmp	.+4      	; 0x5d14 <free+0x104>
    5d10:	13 82       	std	Z+3, r1	; 0x03
    5d12:	12 82       	std	Z+2, r1	; 0x02
    5d14:	b0 93 09 18 	sts	0x1809, r27	; 0x801809 <__brkval+0x1>
    5d18:	a0 93 08 18 	sts	0x1808, r26	; 0x801808 <__brkval>
    5d1c:	df 91       	pop	r29
    5d1e:	cf 91       	pop	r28
    5d20:	08 95       	ret

00005d22 <abort>:
    5d22:	81 e0       	ldi	r24, 0x01	; 1
    5d24:	90 e0       	ldi	r25, 0x00	; 0
    5d26:	f8 94       	cli
    5d28:	7d c3       	rjmp	.+1786   	; 0x6424 <_exit>

00005d2a <memcpy>:
    5d2a:	fb 01       	movw	r30, r22
    5d2c:	dc 01       	movw	r26, r24
    5d2e:	02 c0       	rjmp	.+4      	; 0x5d34 <memcpy+0xa>
    5d30:	01 90       	ld	r0, Z+
    5d32:	0d 92       	st	X+, r0
    5d34:	41 50       	subi	r20, 0x01	; 1
    5d36:	50 40       	sbci	r21, 0x00	; 0
    5d38:	d8 f7       	brcc	.-10     	; 0x5d30 <memcpy+0x6>
    5d3a:	08 95       	ret

00005d3c <memset>:
    5d3c:	dc 01       	movw	r26, r24
    5d3e:	01 c0       	rjmp	.+2      	; 0x5d42 <memset+0x6>
    5d40:	6d 93       	st	X+, r22
    5d42:	41 50       	subi	r20, 0x01	; 1
    5d44:	50 40       	sbci	r21, 0x00	; 0
    5d46:	e0 f7       	brcc	.-8      	; 0x5d40 <memset+0x4>
    5d48:	08 95       	ret

00005d4a <strcasestr>:
    5d4a:	fb 01       	movw	r30, r22
    5d4c:	51 91       	ld	r21, Z+
    5d4e:	55 23       	and	r21, r21
    5d50:	b1 f0       	breq	.+44     	; 0x5d7e <strcasestr+0x34>
    5d52:	bf 01       	movw	r22, r30
    5d54:	dc 01       	movw	r26, r24
    5d56:	05 2e       	mov	r0, r21
    5d58:	4d 91       	ld	r20, X+
    5d5a:	44 23       	and	r20, r20
    5d5c:	69 f0       	breq	.+26     	; 0x5d78 <strcasestr+0x2e>
    5d5e:	10 d0       	rcall	.+32     	; 0x5d80 <strcasestr+0x36>
    5d60:	d9 f7       	brne	.-10     	; 0x5d58 <strcasestr+0xe>
    5d62:	cd 01       	movw	r24, r26
    5d64:	01 90       	ld	r0, Z+
    5d66:	00 20       	and	r0, r0
    5d68:	49 f0       	breq	.+18     	; 0x5d7c <strcasestr+0x32>
    5d6a:	4d 91       	ld	r20, X+
    5d6c:	41 11       	cpse	r20, r1
    5d6e:	08 d0       	rcall	.+16     	; 0x5d80 <strcasestr+0x36>
    5d70:	c9 f3       	breq	.-14     	; 0x5d64 <strcasestr+0x1a>
    5d72:	fb 01       	movw	r30, r22
    5d74:	41 11       	cpse	r20, r1
    5d76:	ee cf       	rjmp	.-36     	; 0x5d54 <strcasestr+0xa>
    5d78:	81 e0       	ldi	r24, 0x01	; 1
    5d7a:	90 e0       	ldi	r25, 0x00	; 0
    5d7c:	01 97       	sbiw	r24, 0x01	; 1
    5d7e:	08 95       	ret
    5d80:	40 25       	eor	r20, r0
    5d82:	39 f0       	breq	.+14     	; 0x5d92 <strcasestr+0x48>
    5d84:	40 32       	cpi	r20, 0x20	; 32
    5d86:	29 f4       	brne	.+10     	; 0x5d92 <strcasestr+0x48>
    5d88:	40 29       	or	r20, r0
    5d8a:	4b 57       	subi	r20, 0x7B	; 123
    5d8c:	46 5e       	subi	r20, 0xE6	; 230
    5d8e:	08 f0       	brcs	.+2      	; 0x5d92 <strcasestr+0x48>
    5d90:	18 94       	sez
    5d92:	08 95       	ret

00005d94 <strcat>:
    5d94:	fb 01       	movw	r30, r22
    5d96:	dc 01       	movw	r26, r24
    5d98:	0d 90       	ld	r0, X+
    5d9a:	00 20       	and	r0, r0
    5d9c:	e9 f7       	brne	.-6      	; 0x5d98 <strcat+0x4>
    5d9e:	11 97       	sbiw	r26, 0x01	; 1
    5da0:	01 90       	ld	r0, Z+
    5da2:	0d 92       	st	X+, r0
    5da4:	00 20       	and	r0, r0
    5da6:	e1 f7       	brne	.-8      	; 0x5da0 <strcat+0xc>
    5da8:	08 95       	ret

00005daa <strcpy>:
    5daa:	fb 01       	movw	r30, r22
    5dac:	dc 01       	movw	r26, r24
    5dae:	01 90       	ld	r0, Z+
    5db0:	0d 92       	st	X+, r0
    5db2:	00 20       	and	r0, r0
    5db4:	e1 f7       	brne	.-8      	; 0x5dae <strcpy+0x4>
    5db6:	08 95       	ret

00005db8 <strncasecmp>:
    5db8:	fb 01       	movw	r30, r22
    5dba:	dc 01       	movw	r26, r24
    5dbc:	41 50       	subi	r20, 0x01	; 1
    5dbe:	50 40       	sbci	r21, 0x00	; 0
    5dc0:	88 f0       	brcs	.+34     	; 0x5de4 <strncasecmp+0x2c>
    5dc2:	8d 91       	ld	r24, X+
    5dc4:	81 34       	cpi	r24, 0x41	; 65
    5dc6:	1c f0       	brlt	.+6      	; 0x5dce <strncasecmp+0x16>
    5dc8:	8b 35       	cpi	r24, 0x5B	; 91
    5dca:	0c f4       	brge	.+2      	; 0x5dce <strncasecmp+0x16>
    5dcc:	80 5e       	subi	r24, 0xE0	; 224
    5dce:	61 91       	ld	r22, Z+
    5dd0:	61 34       	cpi	r22, 0x41	; 65
    5dd2:	1c f0       	brlt	.+6      	; 0x5dda <strncasecmp+0x22>
    5dd4:	6b 35       	cpi	r22, 0x5B	; 91
    5dd6:	0c f4       	brge	.+2      	; 0x5dda <strncasecmp+0x22>
    5dd8:	60 5e       	subi	r22, 0xE0	; 224
    5dda:	86 1b       	sub	r24, r22
    5ddc:	61 11       	cpse	r22, r1
    5dde:	71 f3       	breq	.-36     	; 0x5dbc <strncasecmp+0x4>
    5de0:	99 0b       	sbc	r25, r25
    5de2:	08 95       	ret
    5de4:	88 1b       	sub	r24, r24
    5de6:	fc cf       	rjmp	.-8      	; 0x5de0 <strncasecmp+0x28>

00005de8 <printf>:
    5de8:	cf 93       	push	r28
    5dea:	df 93       	push	r29
    5dec:	cd b7       	in	r28, 0x3d	; 61
    5dee:	de b7       	in	r29, 0x3e	; 62
    5df0:	ae 01       	movw	r20, r28
    5df2:	4a 5f       	subi	r20, 0xFA	; 250
    5df4:	5f 4f       	sbci	r21, 0xFF	; 255
    5df6:	fa 01       	movw	r30, r20
    5df8:	61 91       	ld	r22, Z+
    5dfa:	71 91       	ld	r23, Z+
    5dfc:	af 01       	movw	r20, r30
    5dfe:	80 91 0e 18 	lds	r24, 0x180E	; 0x80180e <__iob+0x2>
    5e02:	90 91 0f 18 	lds	r25, 0x180F	; 0x80180f <__iob+0x3>
    5e06:	61 d0       	rcall	.+194    	; 0x5eca <vfprintf>
    5e08:	df 91       	pop	r29
    5e0a:	cf 91       	pop	r28
    5e0c:	08 95       	ret

00005e0e <puts>:
    5e0e:	0f 93       	push	r16
    5e10:	1f 93       	push	r17
    5e12:	cf 93       	push	r28
    5e14:	df 93       	push	r29
    5e16:	e0 91 0e 18 	lds	r30, 0x180E	; 0x80180e <__iob+0x2>
    5e1a:	f0 91 0f 18 	lds	r31, 0x180F	; 0x80180f <__iob+0x3>
    5e1e:	23 81       	ldd	r18, Z+3	; 0x03
    5e20:	21 ff       	sbrs	r18, 1
    5e22:	1b c0       	rjmp	.+54     	; 0x5e5a <puts+0x4c>
    5e24:	8c 01       	movw	r16, r24
    5e26:	d0 e0       	ldi	r29, 0x00	; 0
    5e28:	c0 e0       	ldi	r28, 0x00	; 0
    5e2a:	f8 01       	movw	r30, r16
    5e2c:	81 91       	ld	r24, Z+
    5e2e:	8f 01       	movw	r16, r30
    5e30:	60 91 0e 18 	lds	r22, 0x180E	; 0x80180e <__iob+0x2>
    5e34:	70 91 0f 18 	lds	r23, 0x180F	; 0x80180f <__iob+0x3>
    5e38:	db 01       	movw	r26, r22
    5e3a:	18 96       	adiw	r26, 0x08	; 8
    5e3c:	ed 91       	ld	r30, X+
    5e3e:	fc 91       	ld	r31, X
    5e40:	19 97       	sbiw	r26, 0x09	; 9
    5e42:	88 23       	and	r24, r24
    5e44:	31 f0       	breq	.+12     	; 0x5e52 <puts+0x44>
    5e46:	19 95       	eicall
    5e48:	89 2b       	or	r24, r25
    5e4a:	79 f3       	breq	.-34     	; 0x5e2a <puts+0x1c>
    5e4c:	df ef       	ldi	r29, 0xFF	; 255
    5e4e:	cf ef       	ldi	r28, 0xFF	; 255
    5e50:	ec cf       	rjmp	.-40     	; 0x5e2a <puts+0x1c>
    5e52:	8a e0       	ldi	r24, 0x0A	; 10
    5e54:	19 95       	eicall
    5e56:	89 2b       	or	r24, r25
    5e58:	19 f0       	breq	.+6      	; 0x5e60 <puts+0x52>
    5e5a:	8f ef       	ldi	r24, 0xFF	; 255
    5e5c:	9f ef       	ldi	r25, 0xFF	; 255
    5e5e:	02 c0       	rjmp	.+4      	; 0x5e64 <puts+0x56>
    5e60:	8d 2f       	mov	r24, r29
    5e62:	9c 2f       	mov	r25, r28
    5e64:	df 91       	pop	r29
    5e66:	cf 91       	pop	r28
    5e68:	1f 91       	pop	r17
    5e6a:	0f 91       	pop	r16
    5e6c:	08 95       	ret

00005e6e <sprintf>:
    5e6e:	0f 93       	push	r16
    5e70:	1f 93       	push	r17
    5e72:	cf 93       	push	r28
    5e74:	df 93       	push	r29
    5e76:	cd b7       	in	r28, 0x3d	; 61
    5e78:	de b7       	in	r29, 0x3e	; 62
    5e7a:	2e 97       	sbiw	r28, 0x0e	; 14
    5e7c:	0f b6       	in	r0, 0x3f	; 63
    5e7e:	f8 94       	cli
    5e80:	de bf       	out	0x3e, r29	; 62
    5e82:	0f be       	out	0x3f, r0	; 63
    5e84:	cd bf       	out	0x3d, r28	; 61
    5e86:	0e 89       	ldd	r16, Y+22	; 0x16
    5e88:	1f 89       	ldd	r17, Y+23	; 0x17
    5e8a:	86 e0       	ldi	r24, 0x06	; 6
    5e8c:	8c 83       	std	Y+4, r24	; 0x04
    5e8e:	1a 83       	std	Y+2, r17	; 0x02
    5e90:	09 83       	std	Y+1, r16	; 0x01
    5e92:	8f ef       	ldi	r24, 0xFF	; 255
    5e94:	9f e7       	ldi	r25, 0x7F	; 127
    5e96:	9e 83       	std	Y+6, r25	; 0x06
    5e98:	8d 83       	std	Y+5, r24	; 0x05
    5e9a:	ae 01       	movw	r20, r28
    5e9c:	46 5e       	subi	r20, 0xE6	; 230
    5e9e:	5f 4f       	sbci	r21, 0xFF	; 255
    5ea0:	68 8d       	ldd	r22, Y+24	; 0x18
    5ea2:	79 8d       	ldd	r23, Y+25	; 0x19
    5ea4:	ce 01       	movw	r24, r28
    5ea6:	01 96       	adiw	r24, 0x01	; 1
    5ea8:	10 d0       	rcall	.+32     	; 0x5eca <vfprintf>
    5eaa:	ef 81       	ldd	r30, Y+7	; 0x07
    5eac:	f8 85       	ldd	r31, Y+8	; 0x08
    5eae:	e0 0f       	add	r30, r16
    5eb0:	f1 1f       	adc	r31, r17
    5eb2:	10 82       	st	Z, r1
    5eb4:	2e 96       	adiw	r28, 0x0e	; 14
    5eb6:	0f b6       	in	r0, 0x3f	; 63
    5eb8:	f8 94       	cli
    5eba:	de bf       	out	0x3e, r29	; 62
    5ebc:	0f be       	out	0x3f, r0	; 63
    5ebe:	cd bf       	out	0x3d, r28	; 61
    5ec0:	df 91       	pop	r29
    5ec2:	cf 91       	pop	r28
    5ec4:	1f 91       	pop	r17
    5ec6:	0f 91       	pop	r16
    5ec8:	08 95       	ret

00005eca <vfprintf>:
    5eca:	2f 92       	push	r2
    5ecc:	3f 92       	push	r3
    5ece:	4f 92       	push	r4
    5ed0:	5f 92       	push	r5
    5ed2:	6f 92       	push	r6
    5ed4:	7f 92       	push	r7
    5ed6:	8f 92       	push	r8
    5ed8:	9f 92       	push	r9
    5eda:	af 92       	push	r10
    5edc:	bf 92       	push	r11
    5ede:	cf 92       	push	r12
    5ee0:	df 92       	push	r13
    5ee2:	ef 92       	push	r14
    5ee4:	ff 92       	push	r15
    5ee6:	0f 93       	push	r16
    5ee8:	1f 93       	push	r17
    5eea:	cf 93       	push	r28
    5eec:	df 93       	push	r29
    5eee:	cd b7       	in	r28, 0x3d	; 61
    5ef0:	de b7       	in	r29, 0x3e	; 62
    5ef2:	2b 97       	sbiw	r28, 0x0b	; 11
    5ef4:	0f b6       	in	r0, 0x3f	; 63
    5ef6:	f8 94       	cli
    5ef8:	de bf       	out	0x3e, r29	; 62
    5efa:	0f be       	out	0x3f, r0	; 63
    5efc:	cd bf       	out	0x3d, r28	; 61
    5efe:	6c 01       	movw	r12, r24
    5f00:	7b 01       	movw	r14, r22
    5f02:	8a 01       	movw	r16, r20
    5f04:	fc 01       	movw	r30, r24
    5f06:	17 82       	std	Z+7, r1	; 0x07
    5f08:	16 82       	std	Z+6, r1	; 0x06
    5f0a:	83 81       	ldd	r24, Z+3	; 0x03
    5f0c:	81 ff       	sbrs	r24, 1
    5f0e:	bf c1       	rjmp	.+894    	; 0x628e <vfprintf+0x3c4>
    5f10:	ce 01       	movw	r24, r28
    5f12:	01 96       	adiw	r24, 0x01	; 1
    5f14:	3c 01       	movw	r6, r24
    5f16:	f6 01       	movw	r30, r12
    5f18:	93 81       	ldd	r25, Z+3	; 0x03
    5f1a:	f7 01       	movw	r30, r14
    5f1c:	93 fd       	sbrc	r25, 3
    5f1e:	85 91       	lpm	r24, Z+
    5f20:	93 ff       	sbrs	r25, 3
    5f22:	81 91       	ld	r24, Z+
    5f24:	7f 01       	movw	r14, r30
    5f26:	88 23       	and	r24, r24
    5f28:	09 f4       	brne	.+2      	; 0x5f2c <vfprintf+0x62>
    5f2a:	ad c1       	rjmp	.+858    	; 0x6286 <vfprintf+0x3bc>
    5f2c:	85 32       	cpi	r24, 0x25	; 37
    5f2e:	39 f4       	brne	.+14     	; 0x5f3e <vfprintf+0x74>
    5f30:	93 fd       	sbrc	r25, 3
    5f32:	85 91       	lpm	r24, Z+
    5f34:	93 ff       	sbrs	r25, 3
    5f36:	81 91       	ld	r24, Z+
    5f38:	7f 01       	movw	r14, r30
    5f3a:	85 32       	cpi	r24, 0x25	; 37
    5f3c:	21 f4       	brne	.+8      	; 0x5f46 <vfprintf+0x7c>
    5f3e:	b6 01       	movw	r22, r12
    5f40:	90 e0       	ldi	r25, 0x00	; 0
    5f42:	d6 d1       	rcall	.+940    	; 0x62f0 <fputc>
    5f44:	e8 cf       	rjmp	.-48     	; 0x5f16 <vfprintf+0x4c>
    5f46:	91 2c       	mov	r9, r1
    5f48:	21 2c       	mov	r2, r1
    5f4a:	31 2c       	mov	r3, r1
    5f4c:	ff e1       	ldi	r31, 0x1F	; 31
    5f4e:	f3 15       	cp	r31, r3
    5f50:	d8 f0       	brcs	.+54     	; 0x5f88 <vfprintf+0xbe>
    5f52:	8b 32       	cpi	r24, 0x2B	; 43
    5f54:	79 f0       	breq	.+30     	; 0x5f74 <vfprintf+0xaa>
    5f56:	38 f4       	brcc	.+14     	; 0x5f66 <vfprintf+0x9c>
    5f58:	80 32       	cpi	r24, 0x20	; 32
    5f5a:	79 f0       	breq	.+30     	; 0x5f7a <vfprintf+0xb0>
    5f5c:	83 32       	cpi	r24, 0x23	; 35
    5f5e:	a1 f4       	brne	.+40     	; 0x5f88 <vfprintf+0xbe>
    5f60:	23 2d       	mov	r18, r3
    5f62:	20 61       	ori	r18, 0x10	; 16
    5f64:	1d c0       	rjmp	.+58     	; 0x5fa0 <vfprintf+0xd6>
    5f66:	8d 32       	cpi	r24, 0x2D	; 45
    5f68:	61 f0       	breq	.+24     	; 0x5f82 <vfprintf+0xb8>
    5f6a:	80 33       	cpi	r24, 0x30	; 48
    5f6c:	69 f4       	brne	.+26     	; 0x5f88 <vfprintf+0xbe>
    5f6e:	23 2d       	mov	r18, r3
    5f70:	21 60       	ori	r18, 0x01	; 1
    5f72:	16 c0       	rjmp	.+44     	; 0x5fa0 <vfprintf+0xd6>
    5f74:	83 2d       	mov	r24, r3
    5f76:	82 60       	ori	r24, 0x02	; 2
    5f78:	38 2e       	mov	r3, r24
    5f7a:	e3 2d       	mov	r30, r3
    5f7c:	e4 60       	ori	r30, 0x04	; 4
    5f7e:	3e 2e       	mov	r3, r30
    5f80:	2a c0       	rjmp	.+84     	; 0x5fd6 <vfprintf+0x10c>
    5f82:	f3 2d       	mov	r31, r3
    5f84:	f8 60       	ori	r31, 0x08	; 8
    5f86:	1d c0       	rjmp	.+58     	; 0x5fc2 <vfprintf+0xf8>
    5f88:	37 fc       	sbrc	r3, 7
    5f8a:	2d c0       	rjmp	.+90     	; 0x5fe6 <vfprintf+0x11c>
    5f8c:	20 ed       	ldi	r18, 0xD0	; 208
    5f8e:	28 0f       	add	r18, r24
    5f90:	2a 30       	cpi	r18, 0x0A	; 10
    5f92:	40 f0       	brcs	.+16     	; 0x5fa4 <vfprintf+0xda>
    5f94:	8e 32       	cpi	r24, 0x2E	; 46
    5f96:	b9 f4       	brne	.+46     	; 0x5fc6 <vfprintf+0xfc>
    5f98:	36 fc       	sbrc	r3, 6
    5f9a:	75 c1       	rjmp	.+746    	; 0x6286 <vfprintf+0x3bc>
    5f9c:	23 2d       	mov	r18, r3
    5f9e:	20 64       	ori	r18, 0x40	; 64
    5fa0:	32 2e       	mov	r3, r18
    5fa2:	19 c0       	rjmp	.+50     	; 0x5fd6 <vfprintf+0x10c>
    5fa4:	36 fe       	sbrs	r3, 6
    5fa6:	06 c0       	rjmp	.+12     	; 0x5fb4 <vfprintf+0xea>
    5fa8:	8a e0       	ldi	r24, 0x0A	; 10
    5faa:	98 9e       	mul	r9, r24
    5fac:	20 0d       	add	r18, r0
    5fae:	11 24       	eor	r1, r1
    5fb0:	92 2e       	mov	r9, r18
    5fb2:	11 c0       	rjmp	.+34     	; 0x5fd6 <vfprintf+0x10c>
    5fb4:	ea e0       	ldi	r30, 0x0A	; 10
    5fb6:	2e 9e       	mul	r2, r30
    5fb8:	20 0d       	add	r18, r0
    5fba:	11 24       	eor	r1, r1
    5fbc:	22 2e       	mov	r2, r18
    5fbe:	f3 2d       	mov	r31, r3
    5fc0:	f0 62       	ori	r31, 0x20	; 32
    5fc2:	3f 2e       	mov	r3, r31
    5fc4:	08 c0       	rjmp	.+16     	; 0x5fd6 <vfprintf+0x10c>
    5fc6:	8c 36       	cpi	r24, 0x6C	; 108
    5fc8:	21 f4       	brne	.+8      	; 0x5fd2 <vfprintf+0x108>
    5fca:	83 2d       	mov	r24, r3
    5fcc:	80 68       	ori	r24, 0x80	; 128
    5fce:	38 2e       	mov	r3, r24
    5fd0:	02 c0       	rjmp	.+4      	; 0x5fd6 <vfprintf+0x10c>
    5fd2:	88 36       	cpi	r24, 0x68	; 104
    5fd4:	41 f4       	brne	.+16     	; 0x5fe6 <vfprintf+0x11c>
    5fd6:	f7 01       	movw	r30, r14
    5fd8:	93 fd       	sbrc	r25, 3
    5fda:	85 91       	lpm	r24, Z+
    5fdc:	93 ff       	sbrs	r25, 3
    5fde:	81 91       	ld	r24, Z+
    5fe0:	7f 01       	movw	r14, r30
    5fe2:	81 11       	cpse	r24, r1
    5fe4:	b3 cf       	rjmp	.-154    	; 0x5f4c <vfprintf+0x82>
    5fe6:	98 2f       	mov	r25, r24
    5fe8:	9f 7d       	andi	r25, 0xDF	; 223
    5fea:	95 54       	subi	r25, 0x45	; 69
    5fec:	93 30       	cpi	r25, 0x03	; 3
    5fee:	28 f4       	brcc	.+10     	; 0x5ffa <vfprintf+0x130>
    5ff0:	0c 5f       	subi	r16, 0xFC	; 252
    5ff2:	1f 4f       	sbci	r17, 0xFF	; 255
    5ff4:	9f e3       	ldi	r25, 0x3F	; 63
    5ff6:	99 83       	std	Y+1, r25	; 0x01
    5ff8:	0d c0       	rjmp	.+26     	; 0x6014 <vfprintf+0x14a>
    5ffa:	83 36       	cpi	r24, 0x63	; 99
    5ffc:	31 f0       	breq	.+12     	; 0x600a <vfprintf+0x140>
    5ffe:	83 37       	cpi	r24, 0x73	; 115
    6000:	71 f0       	breq	.+28     	; 0x601e <vfprintf+0x154>
    6002:	83 35       	cpi	r24, 0x53	; 83
    6004:	09 f0       	breq	.+2      	; 0x6008 <vfprintf+0x13e>
    6006:	55 c0       	rjmp	.+170    	; 0x60b2 <vfprintf+0x1e8>
    6008:	20 c0       	rjmp	.+64     	; 0x604a <vfprintf+0x180>
    600a:	f8 01       	movw	r30, r16
    600c:	80 81       	ld	r24, Z
    600e:	89 83       	std	Y+1, r24	; 0x01
    6010:	0e 5f       	subi	r16, 0xFE	; 254
    6012:	1f 4f       	sbci	r17, 0xFF	; 255
    6014:	88 24       	eor	r8, r8
    6016:	83 94       	inc	r8
    6018:	91 2c       	mov	r9, r1
    601a:	53 01       	movw	r10, r6
    601c:	12 c0       	rjmp	.+36     	; 0x6042 <vfprintf+0x178>
    601e:	28 01       	movw	r4, r16
    6020:	f2 e0       	ldi	r31, 0x02	; 2
    6022:	4f 0e       	add	r4, r31
    6024:	51 1c       	adc	r5, r1
    6026:	f8 01       	movw	r30, r16
    6028:	a0 80       	ld	r10, Z
    602a:	b1 80       	ldd	r11, Z+1	; 0x01
    602c:	36 fe       	sbrs	r3, 6
    602e:	03 c0       	rjmp	.+6      	; 0x6036 <vfprintf+0x16c>
    6030:	69 2d       	mov	r22, r9
    6032:	70 e0       	ldi	r23, 0x00	; 0
    6034:	02 c0       	rjmp	.+4      	; 0x603a <vfprintf+0x170>
    6036:	6f ef       	ldi	r22, 0xFF	; 255
    6038:	7f ef       	ldi	r23, 0xFF	; 255
    603a:	c5 01       	movw	r24, r10
    603c:	4e d1       	rcall	.+668    	; 0x62da <strnlen>
    603e:	4c 01       	movw	r8, r24
    6040:	82 01       	movw	r16, r4
    6042:	f3 2d       	mov	r31, r3
    6044:	ff 77       	andi	r31, 0x7F	; 127
    6046:	3f 2e       	mov	r3, r31
    6048:	15 c0       	rjmp	.+42     	; 0x6074 <vfprintf+0x1aa>
    604a:	28 01       	movw	r4, r16
    604c:	22 e0       	ldi	r18, 0x02	; 2
    604e:	42 0e       	add	r4, r18
    6050:	51 1c       	adc	r5, r1
    6052:	f8 01       	movw	r30, r16
    6054:	a0 80       	ld	r10, Z
    6056:	b1 80       	ldd	r11, Z+1	; 0x01
    6058:	36 fe       	sbrs	r3, 6
    605a:	03 c0       	rjmp	.+6      	; 0x6062 <vfprintf+0x198>
    605c:	69 2d       	mov	r22, r9
    605e:	70 e0       	ldi	r23, 0x00	; 0
    6060:	02 c0       	rjmp	.+4      	; 0x6066 <vfprintf+0x19c>
    6062:	6f ef       	ldi	r22, 0xFF	; 255
    6064:	7f ef       	ldi	r23, 0xFF	; 255
    6066:	c5 01       	movw	r24, r10
    6068:	2d d1       	rcall	.+602    	; 0x62c4 <strnlen_P>
    606a:	4c 01       	movw	r8, r24
    606c:	f3 2d       	mov	r31, r3
    606e:	f0 68       	ori	r31, 0x80	; 128
    6070:	3f 2e       	mov	r3, r31
    6072:	82 01       	movw	r16, r4
    6074:	33 fc       	sbrc	r3, 3
    6076:	19 c0       	rjmp	.+50     	; 0x60aa <vfprintf+0x1e0>
    6078:	82 2d       	mov	r24, r2
    607a:	90 e0       	ldi	r25, 0x00	; 0
    607c:	88 16       	cp	r8, r24
    607e:	99 06       	cpc	r9, r25
    6080:	a0 f4       	brcc	.+40     	; 0x60aa <vfprintf+0x1e0>
    6082:	b6 01       	movw	r22, r12
    6084:	80 e2       	ldi	r24, 0x20	; 32
    6086:	90 e0       	ldi	r25, 0x00	; 0
    6088:	33 d1       	rcall	.+614    	; 0x62f0 <fputc>
    608a:	2a 94       	dec	r2
    608c:	f5 cf       	rjmp	.-22     	; 0x6078 <vfprintf+0x1ae>
    608e:	f5 01       	movw	r30, r10
    6090:	37 fc       	sbrc	r3, 7
    6092:	85 91       	lpm	r24, Z+
    6094:	37 fe       	sbrs	r3, 7
    6096:	81 91       	ld	r24, Z+
    6098:	5f 01       	movw	r10, r30
    609a:	b6 01       	movw	r22, r12
    609c:	90 e0       	ldi	r25, 0x00	; 0
    609e:	28 d1       	rcall	.+592    	; 0x62f0 <fputc>
    60a0:	21 10       	cpse	r2, r1
    60a2:	2a 94       	dec	r2
    60a4:	21 e0       	ldi	r18, 0x01	; 1
    60a6:	82 1a       	sub	r8, r18
    60a8:	91 08       	sbc	r9, r1
    60aa:	81 14       	cp	r8, r1
    60ac:	91 04       	cpc	r9, r1
    60ae:	79 f7       	brne	.-34     	; 0x608e <vfprintf+0x1c4>
    60b0:	e1 c0       	rjmp	.+450    	; 0x6274 <vfprintf+0x3aa>
    60b2:	84 36       	cpi	r24, 0x64	; 100
    60b4:	11 f0       	breq	.+4      	; 0x60ba <vfprintf+0x1f0>
    60b6:	89 36       	cpi	r24, 0x69	; 105
    60b8:	39 f5       	brne	.+78     	; 0x6108 <vfprintf+0x23e>
    60ba:	f8 01       	movw	r30, r16
    60bc:	37 fe       	sbrs	r3, 7
    60be:	07 c0       	rjmp	.+14     	; 0x60ce <vfprintf+0x204>
    60c0:	60 81       	ld	r22, Z
    60c2:	71 81       	ldd	r23, Z+1	; 0x01
    60c4:	82 81       	ldd	r24, Z+2	; 0x02
    60c6:	93 81       	ldd	r25, Z+3	; 0x03
    60c8:	0c 5f       	subi	r16, 0xFC	; 252
    60ca:	1f 4f       	sbci	r17, 0xFF	; 255
    60cc:	08 c0       	rjmp	.+16     	; 0x60de <vfprintf+0x214>
    60ce:	60 81       	ld	r22, Z
    60d0:	71 81       	ldd	r23, Z+1	; 0x01
    60d2:	07 2e       	mov	r0, r23
    60d4:	00 0c       	add	r0, r0
    60d6:	88 0b       	sbc	r24, r24
    60d8:	99 0b       	sbc	r25, r25
    60da:	0e 5f       	subi	r16, 0xFE	; 254
    60dc:	1f 4f       	sbci	r17, 0xFF	; 255
    60de:	f3 2d       	mov	r31, r3
    60e0:	ff 76       	andi	r31, 0x6F	; 111
    60e2:	3f 2e       	mov	r3, r31
    60e4:	97 ff       	sbrs	r25, 7
    60e6:	09 c0       	rjmp	.+18     	; 0x60fa <vfprintf+0x230>
    60e8:	90 95       	com	r25
    60ea:	80 95       	com	r24
    60ec:	70 95       	com	r23
    60ee:	61 95       	neg	r22
    60f0:	7f 4f       	sbci	r23, 0xFF	; 255
    60f2:	8f 4f       	sbci	r24, 0xFF	; 255
    60f4:	9f 4f       	sbci	r25, 0xFF	; 255
    60f6:	f0 68       	ori	r31, 0x80	; 128
    60f8:	3f 2e       	mov	r3, r31
    60fa:	2a e0       	ldi	r18, 0x0A	; 10
    60fc:	30 e0       	ldi	r19, 0x00	; 0
    60fe:	a3 01       	movw	r20, r6
    6100:	33 d1       	rcall	.+614    	; 0x6368 <__ultoa_invert>
    6102:	88 2e       	mov	r8, r24
    6104:	86 18       	sub	r8, r6
    6106:	44 c0       	rjmp	.+136    	; 0x6190 <vfprintf+0x2c6>
    6108:	85 37       	cpi	r24, 0x75	; 117
    610a:	31 f4       	brne	.+12     	; 0x6118 <vfprintf+0x24e>
    610c:	23 2d       	mov	r18, r3
    610e:	2f 7e       	andi	r18, 0xEF	; 239
    6110:	b2 2e       	mov	r11, r18
    6112:	2a e0       	ldi	r18, 0x0A	; 10
    6114:	30 e0       	ldi	r19, 0x00	; 0
    6116:	25 c0       	rjmp	.+74     	; 0x6162 <vfprintf+0x298>
    6118:	93 2d       	mov	r25, r3
    611a:	99 7f       	andi	r25, 0xF9	; 249
    611c:	b9 2e       	mov	r11, r25
    611e:	8f 36       	cpi	r24, 0x6F	; 111
    6120:	c1 f0       	breq	.+48     	; 0x6152 <vfprintf+0x288>
    6122:	18 f4       	brcc	.+6      	; 0x612a <vfprintf+0x260>
    6124:	88 35       	cpi	r24, 0x58	; 88
    6126:	79 f0       	breq	.+30     	; 0x6146 <vfprintf+0x27c>
    6128:	ae c0       	rjmp	.+348    	; 0x6286 <vfprintf+0x3bc>
    612a:	80 37       	cpi	r24, 0x70	; 112
    612c:	19 f0       	breq	.+6      	; 0x6134 <vfprintf+0x26a>
    612e:	88 37       	cpi	r24, 0x78	; 120
    6130:	21 f0       	breq	.+8      	; 0x613a <vfprintf+0x270>
    6132:	a9 c0       	rjmp	.+338    	; 0x6286 <vfprintf+0x3bc>
    6134:	e9 2f       	mov	r30, r25
    6136:	e0 61       	ori	r30, 0x10	; 16
    6138:	be 2e       	mov	r11, r30
    613a:	b4 fe       	sbrs	r11, 4
    613c:	0d c0       	rjmp	.+26     	; 0x6158 <vfprintf+0x28e>
    613e:	fb 2d       	mov	r31, r11
    6140:	f4 60       	ori	r31, 0x04	; 4
    6142:	bf 2e       	mov	r11, r31
    6144:	09 c0       	rjmp	.+18     	; 0x6158 <vfprintf+0x28e>
    6146:	34 fe       	sbrs	r3, 4
    6148:	0a c0       	rjmp	.+20     	; 0x615e <vfprintf+0x294>
    614a:	29 2f       	mov	r18, r25
    614c:	26 60       	ori	r18, 0x06	; 6
    614e:	b2 2e       	mov	r11, r18
    6150:	06 c0       	rjmp	.+12     	; 0x615e <vfprintf+0x294>
    6152:	28 e0       	ldi	r18, 0x08	; 8
    6154:	30 e0       	ldi	r19, 0x00	; 0
    6156:	05 c0       	rjmp	.+10     	; 0x6162 <vfprintf+0x298>
    6158:	20 e1       	ldi	r18, 0x10	; 16
    615a:	30 e0       	ldi	r19, 0x00	; 0
    615c:	02 c0       	rjmp	.+4      	; 0x6162 <vfprintf+0x298>
    615e:	20 e1       	ldi	r18, 0x10	; 16
    6160:	32 e0       	ldi	r19, 0x02	; 2
    6162:	f8 01       	movw	r30, r16
    6164:	b7 fe       	sbrs	r11, 7
    6166:	07 c0       	rjmp	.+14     	; 0x6176 <vfprintf+0x2ac>
    6168:	60 81       	ld	r22, Z
    616a:	71 81       	ldd	r23, Z+1	; 0x01
    616c:	82 81       	ldd	r24, Z+2	; 0x02
    616e:	93 81       	ldd	r25, Z+3	; 0x03
    6170:	0c 5f       	subi	r16, 0xFC	; 252
    6172:	1f 4f       	sbci	r17, 0xFF	; 255
    6174:	06 c0       	rjmp	.+12     	; 0x6182 <vfprintf+0x2b8>
    6176:	60 81       	ld	r22, Z
    6178:	71 81       	ldd	r23, Z+1	; 0x01
    617a:	80 e0       	ldi	r24, 0x00	; 0
    617c:	90 e0       	ldi	r25, 0x00	; 0
    617e:	0e 5f       	subi	r16, 0xFE	; 254
    6180:	1f 4f       	sbci	r17, 0xFF	; 255
    6182:	a3 01       	movw	r20, r6
    6184:	f1 d0       	rcall	.+482    	; 0x6368 <__ultoa_invert>
    6186:	88 2e       	mov	r8, r24
    6188:	86 18       	sub	r8, r6
    618a:	fb 2d       	mov	r31, r11
    618c:	ff 77       	andi	r31, 0x7F	; 127
    618e:	3f 2e       	mov	r3, r31
    6190:	36 fe       	sbrs	r3, 6
    6192:	0d c0       	rjmp	.+26     	; 0x61ae <vfprintf+0x2e4>
    6194:	23 2d       	mov	r18, r3
    6196:	2e 7f       	andi	r18, 0xFE	; 254
    6198:	a2 2e       	mov	r10, r18
    619a:	89 14       	cp	r8, r9
    619c:	58 f4       	brcc	.+22     	; 0x61b4 <vfprintf+0x2ea>
    619e:	34 fe       	sbrs	r3, 4
    61a0:	0b c0       	rjmp	.+22     	; 0x61b8 <vfprintf+0x2ee>
    61a2:	32 fc       	sbrc	r3, 2
    61a4:	09 c0       	rjmp	.+18     	; 0x61b8 <vfprintf+0x2ee>
    61a6:	83 2d       	mov	r24, r3
    61a8:	8e 7e       	andi	r24, 0xEE	; 238
    61aa:	a8 2e       	mov	r10, r24
    61ac:	05 c0       	rjmp	.+10     	; 0x61b8 <vfprintf+0x2ee>
    61ae:	b8 2c       	mov	r11, r8
    61b0:	a3 2c       	mov	r10, r3
    61b2:	03 c0       	rjmp	.+6      	; 0x61ba <vfprintf+0x2f0>
    61b4:	b8 2c       	mov	r11, r8
    61b6:	01 c0       	rjmp	.+2      	; 0x61ba <vfprintf+0x2f0>
    61b8:	b9 2c       	mov	r11, r9
    61ba:	a4 fe       	sbrs	r10, 4
    61bc:	0f c0       	rjmp	.+30     	; 0x61dc <vfprintf+0x312>
    61be:	fe 01       	movw	r30, r28
    61c0:	e8 0d       	add	r30, r8
    61c2:	f1 1d       	adc	r31, r1
    61c4:	80 81       	ld	r24, Z
    61c6:	80 33       	cpi	r24, 0x30	; 48
    61c8:	21 f4       	brne	.+8      	; 0x61d2 <vfprintf+0x308>
    61ca:	9a 2d       	mov	r25, r10
    61cc:	99 7e       	andi	r25, 0xE9	; 233
    61ce:	a9 2e       	mov	r10, r25
    61d0:	09 c0       	rjmp	.+18     	; 0x61e4 <vfprintf+0x31a>
    61d2:	a2 fe       	sbrs	r10, 2
    61d4:	06 c0       	rjmp	.+12     	; 0x61e2 <vfprintf+0x318>
    61d6:	b3 94       	inc	r11
    61d8:	b3 94       	inc	r11
    61da:	04 c0       	rjmp	.+8      	; 0x61e4 <vfprintf+0x31a>
    61dc:	8a 2d       	mov	r24, r10
    61de:	86 78       	andi	r24, 0x86	; 134
    61e0:	09 f0       	breq	.+2      	; 0x61e4 <vfprintf+0x31a>
    61e2:	b3 94       	inc	r11
    61e4:	a3 fc       	sbrc	r10, 3
    61e6:	10 c0       	rjmp	.+32     	; 0x6208 <vfprintf+0x33e>
    61e8:	a0 fe       	sbrs	r10, 0
    61ea:	06 c0       	rjmp	.+12     	; 0x61f8 <vfprintf+0x32e>
    61ec:	b2 14       	cp	r11, r2
    61ee:	80 f4       	brcc	.+32     	; 0x6210 <vfprintf+0x346>
    61f0:	28 0c       	add	r2, r8
    61f2:	92 2c       	mov	r9, r2
    61f4:	9b 18       	sub	r9, r11
    61f6:	0d c0       	rjmp	.+26     	; 0x6212 <vfprintf+0x348>
    61f8:	b2 14       	cp	r11, r2
    61fa:	58 f4       	brcc	.+22     	; 0x6212 <vfprintf+0x348>
    61fc:	b6 01       	movw	r22, r12
    61fe:	80 e2       	ldi	r24, 0x20	; 32
    6200:	90 e0       	ldi	r25, 0x00	; 0
    6202:	76 d0       	rcall	.+236    	; 0x62f0 <fputc>
    6204:	b3 94       	inc	r11
    6206:	f8 cf       	rjmp	.-16     	; 0x61f8 <vfprintf+0x32e>
    6208:	b2 14       	cp	r11, r2
    620a:	18 f4       	brcc	.+6      	; 0x6212 <vfprintf+0x348>
    620c:	2b 18       	sub	r2, r11
    620e:	02 c0       	rjmp	.+4      	; 0x6214 <vfprintf+0x34a>
    6210:	98 2c       	mov	r9, r8
    6212:	21 2c       	mov	r2, r1
    6214:	a4 fe       	sbrs	r10, 4
    6216:	0f c0       	rjmp	.+30     	; 0x6236 <vfprintf+0x36c>
    6218:	b6 01       	movw	r22, r12
    621a:	80 e3       	ldi	r24, 0x30	; 48
    621c:	90 e0       	ldi	r25, 0x00	; 0
    621e:	68 d0       	rcall	.+208    	; 0x62f0 <fputc>
    6220:	a2 fe       	sbrs	r10, 2
    6222:	16 c0       	rjmp	.+44     	; 0x6250 <vfprintf+0x386>
    6224:	a1 fc       	sbrc	r10, 1
    6226:	03 c0       	rjmp	.+6      	; 0x622e <vfprintf+0x364>
    6228:	88 e7       	ldi	r24, 0x78	; 120
    622a:	90 e0       	ldi	r25, 0x00	; 0
    622c:	02 c0       	rjmp	.+4      	; 0x6232 <vfprintf+0x368>
    622e:	88 e5       	ldi	r24, 0x58	; 88
    6230:	90 e0       	ldi	r25, 0x00	; 0
    6232:	b6 01       	movw	r22, r12
    6234:	0c c0       	rjmp	.+24     	; 0x624e <vfprintf+0x384>
    6236:	8a 2d       	mov	r24, r10
    6238:	86 78       	andi	r24, 0x86	; 134
    623a:	51 f0       	breq	.+20     	; 0x6250 <vfprintf+0x386>
    623c:	a1 fe       	sbrs	r10, 1
    623e:	02 c0       	rjmp	.+4      	; 0x6244 <vfprintf+0x37a>
    6240:	8b e2       	ldi	r24, 0x2B	; 43
    6242:	01 c0       	rjmp	.+2      	; 0x6246 <vfprintf+0x37c>
    6244:	80 e2       	ldi	r24, 0x20	; 32
    6246:	a7 fc       	sbrc	r10, 7
    6248:	8d e2       	ldi	r24, 0x2D	; 45
    624a:	b6 01       	movw	r22, r12
    624c:	90 e0       	ldi	r25, 0x00	; 0
    624e:	50 d0       	rcall	.+160    	; 0x62f0 <fputc>
    6250:	89 14       	cp	r8, r9
    6252:	30 f4       	brcc	.+12     	; 0x6260 <vfprintf+0x396>
    6254:	b6 01       	movw	r22, r12
    6256:	80 e3       	ldi	r24, 0x30	; 48
    6258:	90 e0       	ldi	r25, 0x00	; 0
    625a:	4a d0       	rcall	.+148    	; 0x62f0 <fputc>
    625c:	9a 94       	dec	r9
    625e:	f8 cf       	rjmp	.-16     	; 0x6250 <vfprintf+0x386>
    6260:	8a 94       	dec	r8
    6262:	f3 01       	movw	r30, r6
    6264:	e8 0d       	add	r30, r8
    6266:	f1 1d       	adc	r31, r1
    6268:	80 81       	ld	r24, Z
    626a:	b6 01       	movw	r22, r12
    626c:	90 e0       	ldi	r25, 0x00	; 0
    626e:	40 d0       	rcall	.+128    	; 0x62f0 <fputc>
    6270:	81 10       	cpse	r8, r1
    6272:	f6 cf       	rjmp	.-20     	; 0x6260 <vfprintf+0x396>
    6274:	22 20       	and	r2, r2
    6276:	09 f4       	brne	.+2      	; 0x627a <vfprintf+0x3b0>
    6278:	4e ce       	rjmp	.-868    	; 0x5f16 <vfprintf+0x4c>
    627a:	b6 01       	movw	r22, r12
    627c:	80 e2       	ldi	r24, 0x20	; 32
    627e:	90 e0       	ldi	r25, 0x00	; 0
    6280:	37 d0       	rcall	.+110    	; 0x62f0 <fputc>
    6282:	2a 94       	dec	r2
    6284:	f7 cf       	rjmp	.-18     	; 0x6274 <vfprintf+0x3aa>
    6286:	f6 01       	movw	r30, r12
    6288:	86 81       	ldd	r24, Z+6	; 0x06
    628a:	97 81       	ldd	r25, Z+7	; 0x07
    628c:	02 c0       	rjmp	.+4      	; 0x6292 <vfprintf+0x3c8>
    628e:	8f ef       	ldi	r24, 0xFF	; 255
    6290:	9f ef       	ldi	r25, 0xFF	; 255
    6292:	2b 96       	adiw	r28, 0x0b	; 11
    6294:	0f b6       	in	r0, 0x3f	; 63
    6296:	f8 94       	cli
    6298:	de bf       	out	0x3e, r29	; 62
    629a:	0f be       	out	0x3f, r0	; 63
    629c:	cd bf       	out	0x3d, r28	; 61
    629e:	df 91       	pop	r29
    62a0:	cf 91       	pop	r28
    62a2:	1f 91       	pop	r17
    62a4:	0f 91       	pop	r16
    62a6:	ff 90       	pop	r15
    62a8:	ef 90       	pop	r14
    62aa:	df 90       	pop	r13
    62ac:	cf 90       	pop	r12
    62ae:	bf 90       	pop	r11
    62b0:	af 90       	pop	r10
    62b2:	9f 90       	pop	r9
    62b4:	8f 90       	pop	r8
    62b6:	7f 90       	pop	r7
    62b8:	6f 90       	pop	r6
    62ba:	5f 90       	pop	r5
    62bc:	4f 90       	pop	r4
    62be:	3f 90       	pop	r3
    62c0:	2f 90       	pop	r2
    62c2:	08 95       	ret

000062c4 <strnlen_P>:
    62c4:	fc 01       	movw	r30, r24
    62c6:	05 90       	lpm	r0, Z+
    62c8:	61 50       	subi	r22, 0x01	; 1
    62ca:	70 40       	sbci	r23, 0x00	; 0
    62cc:	01 10       	cpse	r0, r1
    62ce:	d8 f7       	brcc	.-10     	; 0x62c6 <strnlen_P+0x2>
    62d0:	80 95       	com	r24
    62d2:	90 95       	com	r25
    62d4:	8e 0f       	add	r24, r30
    62d6:	9f 1f       	adc	r25, r31
    62d8:	08 95       	ret

000062da <strnlen>:
    62da:	fc 01       	movw	r30, r24
    62dc:	61 50       	subi	r22, 0x01	; 1
    62de:	70 40       	sbci	r23, 0x00	; 0
    62e0:	01 90       	ld	r0, Z+
    62e2:	01 10       	cpse	r0, r1
    62e4:	d8 f7       	brcc	.-10     	; 0x62dc <strnlen+0x2>
    62e6:	80 95       	com	r24
    62e8:	90 95       	com	r25
    62ea:	8e 0f       	add	r24, r30
    62ec:	9f 1f       	adc	r25, r31
    62ee:	08 95       	ret

000062f0 <fputc>:
    62f0:	0f 93       	push	r16
    62f2:	1f 93       	push	r17
    62f4:	cf 93       	push	r28
    62f6:	df 93       	push	r29
    62f8:	fb 01       	movw	r30, r22
    62fa:	23 81       	ldd	r18, Z+3	; 0x03
    62fc:	21 fd       	sbrc	r18, 1
    62fe:	03 c0       	rjmp	.+6      	; 0x6306 <fputc+0x16>
    6300:	8f ef       	ldi	r24, 0xFF	; 255
    6302:	9f ef       	ldi	r25, 0xFF	; 255
    6304:	2c c0       	rjmp	.+88     	; 0x635e <fputc+0x6e>
    6306:	22 ff       	sbrs	r18, 2
    6308:	16 c0       	rjmp	.+44     	; 0x6336 <fputc+0x46>
    630a:	46 81       	ldd	r20, Z+6	; 0x06
    630c:	57 81       	ldd	r21, Z+7	; 0x07
    630e:	24 81       	ldd	r18, Z+4	; 0x04
    6310:	35 81       	ldd	r19, Z+5	; 0x05
    6312:	42 17       	cp	r20, r18
    6314:	53 07       	cpc	r21, r19
    6316:	44 f4       	brge	.+16     	; 0x6328 <fputc+0x38>
    6318:	a0 81       	ld	r26, Z
    631a:	b1 81       	ldd	r27, Z+1	; 0x01
    631c:	9d 01       	movw	r18, r26
    631e:	2f 5f       	subi	r18, 0xFF	; 255
    6320:	3f 4f       	sbci	r19, 0xFF	; 255
    6322:	31 83       	std	Z+1, r19	; 0x01
    6324:	20 83       	st	Z, r18
    6326:	8c 93       	st	X, r24
    6328:	26 81       	ldd	r18, Z+6	; 0x06
    632a:	37 81       	ldd	r19, Z+7	; 0x07
    632c:	2f 5f       	subi	r18, 0xFF	; 255
    632e:	3f 4f       	sbci	r19, 0xFF	; 255
    6330:	37 83       	std	Z+7, r19	; 0x07
    6332:	26 83       	std	Z+6, r18	; 0x06
    6334:	14 c0       	rjmp	.+40     	; 0x635e <fputc+0x6e>
    6336:	8b 01       	movw	r16, r22
    6338:	ec 01       	movw	r28, r24
    633a:	fb 01       	movw	r30, r22
    633c:	00 84       	ldd	r0, Z+8	; 0x08
    633e:	f1 85       	ldd	r31, Z+9	; 0x09
    6340:	e0 2d       	mov	r30, r0
    6342:	19 95       	eicall
    6344:	89 2b       	or	r24, r25
    6346:	e1 f6       	brne	.-72     	; 0x6300 <fputc+0x10>
    6348:	d8 01       	movw	r26, r16
    634a:	16 96       	adiw	r26, 0x06	; 6
    634c:	8d 91       	ld	r24, X+
    634e:	9c 91       	ld	r25, X
    6350:	17 97       	sbiw	r26, 0x07	; 7
    6352:	01 96       	adiw	r24, 0x01	; 1
    6354:	17 96       	adiw	r26, 0x07	; 7
    6356:	9c 93       	st	X, r25
    6358:	8e 93       	st	-X, r24
    635a:	16 97       	sbiw	r26, 0x06	; 6
    635c:	ce 01       	movw	r24, r28
    635e:	df 91       	pop	r29
    6360:	cf 91       	pop	r28
    6362:	1f 91       	pop	r17
    6364:	0f 91       	pop	r16
    6366:	08 95       	ret

00006368 <__ultoa_invert>:
    6368:	fa 01       	movw	r30, r20
    636a:	aa 27       	eor	r26, r26
    636c:	28 30       	cpi	r18, 0x08	; 8
    636e:	51 f1       	breq	.+84     	; 0x63c4 <__ultoa_invert+0x5c>
    6370:	20 31       	cpi	r18, 0x10	; 16
    6372:	81 f1       	breq	.+96     	; 0x63d4 <__ultoa_invert+0x6c>
    6374:	e8 94       	clt
    6376:	6f 93       	push	r22
    6378:	6e 7f       	andi	r22, 0xFE	; 254
    637a:	6e 5f       	subi	r22, 0xFE	; 254
    637c:	7f 4f       	sbci	r23, 0xFF	; 255
    637e:	8f 4f       	sbci	r24, 0xFF	; 255
    6380:	9f 4f       	sbci	r25, 0xFF	; 255
    6382:	af 4f       	sbci	r26, 0xFF	; 255
    6384:	b1 e0       	ldi	r27, 0x01	; 1
    6386:	3e d0       	rcall	.+124    	; 0x6404 <__ultoa_invert+0x9c>
    6388:	b4 e0       	ldi	r27, 0x04	; 4
    638a:	3c d0       	rcall	.+120    	; 0x6404 <__ultoa_invert+0x9c>
    638c:	67 0f       	add	r22, r23
    638e:	78 1f       	adc	r23, r24
    6390:	89 1f       	adc	r24, r25
    6392:	9a 1f       	adc	r25, r26
    6394:	a1 1d       	adc	r26, r1
    6396:	68 0f       	add	r22, r24
    6398:	79 1f       	adc	r23, r25
    639a:	8a 1f       	adc	r24, r26
    639c:	91 1d       	adc	r25, r1
    639e:	a1 1d       	adc	r26, r1
    63a0:	6a 0f       	add	r22, r26
    63a2:	71 1d       	adc	r23, r1
    63a4:	81 1d       	adc	r24, r1
    63a6:	91 1d       	adc	r25, r1
    63a8:	a1 1d       	adc	r26, r1
    63aa:	20 d0       	rcall	.+64     	; 0x63ec <__ultoa_invert+0x84>
    63ac:	09 f4       	brne	.+2      	; 0x63b0 <__ultoa_invert+0x48>
    63ae:	68 94       	set
    63b0:	3f 91       	pop	r19
    63b2:	2a e0       	ldi	r18, 0x0A	; 10
    63b4:	26 9f       	mul	r18, r22
    63b6:	11 24       	eor	r1, r1
    63b8:	30 19       	sub	r19, r0
    63ba:	30 5d       	subi	r19, 0xD0	; 208
    63bc:	31 93       	st	Z+, r19
    63be:	de f6       	brtc	.-74     	; 0x6376 <__ultoa_invert+0xe>
    63c0:	cf 01       	movw	r24, r30
    63c2:	08 95       	ret
    63c4:	46 2f       	mov	r20, r22
    63c6:	47 70       	andi	r20, 0x07	; 7
    63c8:	40 5d       	subi	r20, 0xD0	; 208
    63ca:	41 93       	st	Z+, r20
    63cc:	b3 e0       	ldi	r27, 0x03	; 3
    63ce:	0f d0       	rcall	.+30     	; 0x63ee <__ultoa_invert+0x86>
    63d0:	c9 f7       	brne	.-14     	; 0x63c4 <__ultoa_invert+0x5c>
    63d2:	f6 cf       	rjmp	.-20     	; 0x63c0 <__ultoa_invert+0x58>
    63d4:	46 2f       	mov	r20, r22
    63d6:	4f 70       	andi	r20, 0x0F	; 15
    63d8:	40 5d       	subi	r20, 0xD0	; 208
    63da:	4a 33       	cpi	r20, 0x3A	; 58
    63dc:	18 f0       	brcs	.+6      	; 0x63e4 <__ultoa_invert+0x7c>
    63de:	49 5d       	subi	r20, 0xD9	; 217
    63e0:	31 fd       	sbrc	r19, 1
    63e2:	40 52       	subi	r20, 0x20	; 32
    63e4:	41 93       	st	Z+, r20
    63e6:	02 d0       	rcall	.+4      	; 0x63ec <__ultoa_invert+0x84>
    63e8:	a9 f7       	brne	.-22     	; 0x63d4 <__ultoa_invert+0x6c>
    63ea:	ea cf       	rjmp	.-44     	; 0x63c0 <__ultoa_invert+0x58>
    63ec:	b4 e0       	ldi	r27, 0x04	; 4
    63ee:	a6 95       	lsr	r26
    63f0:	97 95       	ror	r25
    63f2:	87 95       	ror	r24
    63f4:	77 95       	ror	r23
    63f6:	67 95       	ror	r22
    63f8:	ba 95       	dec	r27
    63fa:	c9 f7       	brne	.-14     	; 0x63ee <__ultoa_invert+0x86>
    63fc:	00 97       	sbiw	r24, 0x00	; 0
    63fe:	61 05       	cpc	r22, r1
    6400:	71 05       	cpc	r23, r1
    6402:	08 95       	ret
    6404:	9b 01       	movw	r18, r22
    6406:	ac 01       	movw	r20, r24
    6408:	0a 2e       	mov	r0, r26
    640a:	06 94       	lsr	r0
    640c:	57 95       	ror	r21
    640e:	47 95       	ror	r20
    6410:	37 95       	ror	r19
    6412:	27 95       	ror	r18
    6414:	ba 95       	dec	r27
    6416:	c9 f7       	brne	.-14     	; 0x640a <__ultoa_invert+0xa2>
    6418:	62 0f       	add	r22, r18
    641a:	73 1f       	adc	r23, r19
    641c:	84 1f       	adc	r24, r20
    641e:	95 1f       	adc	r25, r21
    6420:	a0 1d       	adc	r26, r0
    6422:	08 95       	ret

00006424 <_exit>:
    6424:	f8 94       	cli

00006426 <__stop_program>:
    6426:	ff cf       	rjmp	.-2      	; 0x6426 <__stop_program>
